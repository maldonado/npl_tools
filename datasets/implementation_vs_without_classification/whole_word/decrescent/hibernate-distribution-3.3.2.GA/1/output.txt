// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9931465632027844	WITHOUT_CLASSIFICATION	0.006853436797215647	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9931465632027844	WITHOUT_CLASSIFICATION	0.006853436797215647	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9971019380117412	WITHOUT_CLASSIFICATION	0.0028980619882587886	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9984995254882895	WITHOUT_CLASSIFICATION	0.0015004745117105423	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8819002520123285	IMPLEMENTATION	0.11809974798767153	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.999929477529384	WITHOUT_CLASSIFICATION	7.05224706160047E-5	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6616848890663773	IMPLEMENTATION	0.33831511093362265	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9950426421442753	WITHOUT_CLASSIFICATION	0.004957357855724608	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9816737384293643	WITHOUT_CLASSIFICATION	0.01832626157063557	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9996653385685763	WITHOUT_CLASSIFICATION	3.3466143142375424E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9686533267284897	WITHOUT_CLASSIFICATION	0.03134667327151024	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9864996605245333	WITHOUT_CLASSIFICATION	0.01350033947546678	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9864996605245333	WITHOUT_CLASSIFICATION	0.01350033947546678	IMPLEMENTATION
/**	IMPLEMENTATION	0.9999122242669968	WITHOUT_CLASSIFICATION	8.777573300322549E-5	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5441867827814393	IMPLEMENTATION	0.45581321721856055	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999831336164691	IMPLEMENTATION	1.6866383530978373E-5	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.767955877747735	WITHOUT_CLASSIFICATION	0.23204412225226495	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9998277527909464	WITHOUT_CLASSIFICATION	1.722472090535235E-4	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9689331445597386	WITHOUT_CLASSIFICATION	0.031066855440261387	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9916014967025673	WITHOUT_CLASSIFICATION	0.008398503297432743	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9995175777561035	WITHOUT_CLASSIFICATION	4.824222438966159E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9967106588607995	WITHOUT_CLASSIFICATION	0.003289341139200456	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9696895216995903	WITHOUT_CLASSIFICATION	0.030310478300409657	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9696895216995903	WITHOUT_CLASSIFICATION	0.030310478300409657	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9248191612478067	IMPLEMENTATION	0.07518083875219334	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9956889571526549	WITHOUT_CLASSIFICATION	0.004311042847345065	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9737796996730683	IMPLEMENTATION	0.026220300326931692	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9943288882638442	WITHOUT_CLASSIFICATION	0.005671111736155809	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7527498691203355	WITHOUT_CLASSIFICATION	0.24725013087966458	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9986492784295616	WITHOUT_CLASSIFICATION	0.0013507215704383273	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9915954026436032	WITHOUT_CLASSIFICATION	0.008404597356396752	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9990364401461548	WITHOUT_CLASSIFICATION	9.635598538452258E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9745086528672743	WITHOUT_CLASSIFICATION	0.025491347132725776	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.7904250844828442	WITHOUT_CLASSIFICATION	0.2095749155171558	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9779203384125892	WITHOUT_CLASSIFICATION	0.022079661587410836	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9457539408282816	IMPLEMENTATION	0.054246059171718305	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9908901467715179	WITHOUT_CLASSIFICATION	0.009109853228482168	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.995892558573224	WITHOUT_CLASSIFICATION	0.004107441426775974	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9227977787010015	IMPLEMENTATION	0.07720222129899838	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9227977787010015	IMPLEMENTATION	0.07720222129899838	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8435476264948031	IMPLEMENTATION	0.15645237350519686	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9988630581713869	WITHOUT_CLASSIFICATION	0.0011369418286131202	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9999254038524714	WITHOUT_CLASSIFICATION	7.45961475285504E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9988978449017224	IMPLEMENTATION	0.0011021550982776677	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9961007629314569	WITHOUT_CLASSIFICATION	0.0038992370685430786	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9844101092577799	WITHOUT_CLASSIFICATION	0.015589890742220175	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9971818423330288	WITHOUT_CLASSIFICATION	0.0028181576669712685	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9985898153273277	WITHOUT_CLASSIFICATION	0.0014101846726723149	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.999304690661006	WITHOUT_CLASSIFICATION	6.953093389939993E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9992901050629576	WITHOUT_CLASSIFICATION	7.098949370424277E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.7911582297140337	IMPLEMENTATION	0.20884177028596632	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9200763160508408	WITHOUT_CLASSIFICATION	0.07992368394915914	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9629707363897005	WITHOUT_CLASSIFICATION	0.037029263610299394	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9816059686754377	WITHOUT_CLASSIFICATION	0.018394031324562386	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9915954026436032	WITHOUT_CLASSIFICATION	0.008404597356396752	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9816059686754377	WITHOUT_CLASSIFICATION	0.018394031324562386	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.983877901048991	IMPLEMENTATION	0.01612209895100904	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6350627619205466	WITHOUT_CLASSIFICATION	0.3649372380794534	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9816059686754377	WITHOUT_CLASSIFICATION	0.018394031324562386	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999998649777273	WITHOUT_CLASSIFICATION	1.3502227269679773E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999998649777273	WITHOUT_CLASSIFICATION	1.3502227269679773E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9995323434517381	IMPLEMENTATION	4.6765654826199217E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9853901803400358	WITHOUT_CLASSIFICATION	0.014609819659964296	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996790167090017	WITHOUT_CLASSIFICATION	3.2098329099830054E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998586908742468	WITHOUT_CLASSIFICATION	1.4130912575317867E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9996778892011817	WITHOUT_CLASSIFICATION	3.221107988181993E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99987100106889	WITHOUT_CLASSIFICATION	1.2899893110992892E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99987100106889	WITHOUT_CLASSIFICATION	1.2899893110992892E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999657589835	WITHOUT_CLASSIFICATION	3.4241016499968424E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993908045461326	WITHOUT_CLASSIFICATION	6.091954538674212E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9997990762081382	WITHOUT_CLASSIFICATION	2.0092379186170434E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9997059164825811	WITHOUT_CLASSIFICATION	2.9408351741887424E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999973998608462	WITHOUT_CLASSIFICATION	2.6001391537358645E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999973998608462	WITHOUT_CLASSIFICATION	2.6001391537358645E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999779816055528	WITHOUT_CLASSIFICATION	2.2018394447232704E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9986037459132463	WITHOUT_CLASSIFICATION	0.001396254086753757	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.999703995760443	WITHOUT_CLASSIFICATION	2.9600423955700243E-4	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996845635876369	WITHOUT_CLASSIFICATION	3.1543641236307803E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999421133898739	WITHOUT_CLASSIFICATION	5.788661012609648E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999525341479579	WITHOUT_CLASSIFICATION	4.746585204205048E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.999993669219225	WITHOUT_CLASSIFICATION	6.330780775020989E-6	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999620628451651	WITHOUT_CLASSIFICATION	3.793715483497049E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994479022115527	WITHOUT_CLASSIFICATION	5.520977884473268E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9996546477832869	WITHOUT_CLASSIFICATION	3.4535221671310904E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995366184207712	WITHOUT_CLASSIFICATION	4.633815792287849E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.5162393711416363	WITHOUT_CLASSIFICATION	0.48376062885836363	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9999122242669968	WITHOUT_CLASSIFICATION	8.777573300322549E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9999122242669968	WITHOUT_CLASSIFICATION	8.777573300322549E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996846168148732	WITHOUT_CLASSIFICATION	3.15383185126858E-4	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996124806612586	WITHOUT_CLASSIFICATION	3.8751933874137974E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9998599704278565	WITHOUT_CLASSIFICATION	1.4002957214354186E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999648467974395	WITHOUT_CLASSIFICATION	3.515320256049736E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9996892261627529	WITHOUT_CLASSIFICATION	3.107738372469877E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9983220828044501	WITHOUT_CLASSIFICATION	0.0016779171955498247	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997009751010936	WITHOUT_CLASSIFICATION	2.9902489890647774E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992781812465538	WITHOUT_CLASSIFICATION	7.218187534461532E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9950640897140267	IMPLEMENTATION	0.004935910285973334	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9995734435695438	WITHOUT_CLASSIFICATION	4.2655643045619594E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9922250886828814	WITHOUT_CLASSIFICATION	0.007774911317118705	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998133011623421	WITHOUT_CLASSIFICATION	1.8669883765784755E-4	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999603726875917	WITHOUT_CLASSIFICATION	3.962731240831056E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.8133821014233803	WITHOUT_CLASSIFICATION	0.18661789857661956	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9992746548680175	WITHOUT_CLASSIFICATION	7.253451319825611E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9890419846785622	WITHOUT_CLASSIFICATION	0.010958015321437852	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9990435485137431	WITHOUT_CLASSIFICATION	9.564514862569156E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9994466619966239	WITHOUT_CLASSIFICATION	5.533380033761092E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999894109094696	WITHOUT_CLASSIFICATION	1.0589090530409486E-4	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9985163395747338	WITHOUT_CLASSIFICATION	0.0014836604252661827	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999788006242655	WITHOUT_CLASSIFICATION	2.1199375734496666E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999654388187916	WITHOUT_CLASSIFICATION	3.4561181208428515E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999062726575062	WITHOUT_CLASSIFICATION	9.372734249381896E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999742309511326	WITHOUT_CLASSIFICATION	2.576904886749223E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999406356303753	WITHOUT_CLASSIFICATION	5.9364369624615775E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999512210052928	WITHOUT_CLASSIFICATION	4.877899470721726E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9997159177586109	WITHOUT_CLASSIFICATION	2.8408224138910815E-4	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999462811826421	WITHOUT_CLASSIFICATION	5.371881735800506E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9990242576622173	WITHOUT_CLASSIFICATION	9.757423377827975E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997002898826143	WITHOUT_CLASSIFICATION	2.9971011738566967E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6737310485933817	WITHOUT_CLASSIFICATION	0.3262689514066182	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9989755592255319	WITHOUT_CLASSIFICATION	0.0010244407744680346	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9997301849315315	WITHOUT_CLASSIFICATION	2.6981506846844615E-4	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9932396620791083	WITHOUT_CLASSIFICATION	0.006760337920891762	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995420910222377	WITHOUT_CLASSIFICATION	4.5790897776230567E-4	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999994066329515	WITHOUT_CLASSIFICATION	5.933670485386491E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9989963974940564	WITHOUT_CLASSIFICATION	0.0010036025059435617	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9998556656787939	WITHOUT_CLASSIFICATION	1.443343212062157E-4	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999656819323517	WITHOUT_CLASSIFICATION	3.431806764839016E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9992585036165517	WITHOUT_CLASSIFICATION	7.414963834482903E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999249280234831	WITHOUT_CLASSIFICATION	7.507197651696198E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999934765599198	WITHOUT_CLASSIFICATION	6.523440080182933E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9992585036165517	WITHOUT_CLASSIFICATION	7.414963834482903E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9760195993075639	WITHOUT_CLASSIFICATION	0.023980400692436052	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9991551155959383	WITHOUT_CLASSIFICATION	8.448844040618683E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9981243984713367	WITHOUT_CLASSIFICATION	0.001875601528663308	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9996310595173094	WITHOUT_CLASSIFICATION	3.6894048269056027E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9994159680312367	WITHOUT_CLASSIFICATION	5.840319687634265E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9994159680312367	WITHOUT_CLASSIFICATION	5.840319687634265E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999983075016653	WITHOUT_CLASSIFICATION	1.6924983347349861E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999633346681045	WITHOUT_CLASSIFICATION	3.666533189553558E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9983536013214801	WITHOUT_CLASSIFICATION	0.001646398678519805	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999520426329501	WITHOUT_CLASSIFICATION	4.7957367049860255E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999878687013548	WITHOUT_CLASSIFICATION	1.2131298645201145E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9907696263436917	WITHOUT_CLASSIFICATION	0.009230373656308277	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999858405628104	WITHOUT_CLASSIFICATION	1.415943718960822E-4	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999885145621489	WITHOUT_CLASSIFICATION	1.1485437851100202E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999398778667291	WITHOUT_CLASSIFICATION	6.01221332709007E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999398778667291	WITHOUT_CLASSIFICATION	6.01221332709007E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9987335185821412	WITHOUT_CLASSIFICATION	0.0012664814178587078	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998185050925991	WITHOUT_CLASSIFICATION	1.8149490740084598E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999398778667291	WITHOUT_CLASSIFICATION	6.01221332709007E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998189483667024	WITHOUT_CLASSIFICATION	1.8105163329764406E-4	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9994812797087743	WITHOUT_CLASSIFICATION	5.187202912257688E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999903064689936	WITHOUT_CLASSIFICATION	9.693531006418226E-6	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999929960919245	WITHOUT_CLASSIFICATION	7.003908075506141E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9960599154143467	WITHOUT_CLASSIFICATION	0.003940084585653319	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9960599154143467	WITHOUT_CLASSIFICATION	0.003940084585653319	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9992919924658689	WITHOUT_CLASSIFICATION	7.080075341312227E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9981477849396218	WITHOUT_CLASSIFICATION	0.001852215060378232	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9998105571538647	WITHOUT_CLASSIFICATION	1.894428461354425E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999533557254181	WITHOUT_CLASSIFICATION	4.6644274581889184E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999533557254181	WITHOUT_CLASSIFICATION	4.6644274581889184E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9989822035026394	WITHOUT_CLASSIFICATION	0.0010177964973605953	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.997369503257759	WITHOUT_CLASSIFICATION	0.002630496742241105	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999499846484722	WITHOUT_CLASSIFICATION	5.001535152780511E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999961583263256	WITHOUT_CLASSIFICATION	3.841673674366246E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9998409808720745	WITHOUT_CLASSIFICATION	1.5901912792544554E-4	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9995370864879456	WITHOUT_CLASSIFICATION	4.6291351205430696E-4	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9976202183278924	WITHOUT_CLASSIFICATION	0.0023797816721076765	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9984056449585329	WITHOUT_CLASSIFICATION	0.0015943550414671112	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999499846484722	WITHOUT_CLASSIFICATION	5.001535152780511E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9965864317420258	WITHOUT_CLASSIFICATION	0.0034135682579742054	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9990613019014014	WITHOUT_CLASSIFICATION	9.386980985986002E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9990613019014014	WITHOUT_CLASSIFICATION	9.386980985986002E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999698782723295	WITHOUT_CLASSIFICATION	3.0121727670429245E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9991305894110952	WITHOUT_CLASSIFICATION	8.69410588904826E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9682588045452193	WITHOUT_CLASSIFICATION	0.03174119545478069	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9983761949282697	WITHOUT_CLASSIFICATION	0.0016238050717302963	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9983857755201916	WITHOUT_CLASSIFICATION	0.0016142244798082995	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9967946336057856	WITHOUT_CLASSIFICATION	0.0032053663942145736	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9986094544378422	WITHOUT_CLASSIFICATION	0.0013905455621577932	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9937811469031911	WITHOUT_CLASSIFICATION	0.006218853096808945	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999717178747947	WITHOUT_CLASSIFICATION	2.8282125205250835E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999717178747947	WITHOUT_CLASSIFICATION	2.8282125205250835E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996790167090017	WITHOUT_CLASSIFICATION	3.2098329099830054E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9993975767209827	WITHOUT_CLASSIFICATION	6.024232790173691E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9996809493282642	WITHOUT_CLASSIFICATION	3.190506717358227E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9996303318502893	WITHOUT_CLASSIFICATION	3.6966814971065476E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9997313164638101	WITHOUT_CLASSIFICATION	2.686835361898601E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9986834182036446	WITHOUT_CLASSIFICATION	0.0013165817963554055	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9991839680693586	WITHOUT_CLASSIFICATION	8.160319306413508E-4	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999819611139324	WITHOUT_CLASSIFICATION	1.8038886067486025E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9995706426700507	WITHOUT_CLASSIFICATION	4.2935732994929917E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9986834182036446	WITHOUT_CLASSIFICATION	0.0013165817963554055	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9997131935111202	WITHOUT_CLASSIFICATION	2.868064888797607E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9964620642876565	WITHOUT_CLASSIFICATION	0.0035379357123435425	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9997317420434543	WITHOUT_CLASSIFICATION	2.682579565457616E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9997378663435268	WITHOUT_CLASSIFICATION	2.621336564731932E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9995757016683999	WITHOUT_CLASSIFICATION	4.2429833160003924E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99987100106889	WITHOUT_CLASSIFICATION	1.2899893110992892E-4	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9857874828964464	WITHOUT_CLASSIFICATION	0.014212517103553647	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9980591102242016	WITHOUT_CLASSIFICATION	0.001940889775798467	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9996175104785128	WITHOUT_CLASSIFICATION	3.8248952148713355E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9997465184828408	WITHOUT_CLASSIFICATION	2.534815171592476E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997070928583741	WITHOUT_CLASSIFICATION	2.929071416259437E-4	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997665412063143	WITHOUT_CLASSIFICATION	2.3345879368577745E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999356840537209	WITHOUT_CLASSIFICATION	6.43159462790883E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9728734347803537	WITHOUT_CLASSIFICATION	0.02712656521964629	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999451044440644	WITHOUT_CLASSIFICATION	5.4895555935641694E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999657589835	WITHOUT_CLASSIFICATION	3.4241016499968424E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9997120769913703	WITHOUT_CLASSIFICATION	2.8792300862969124E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9995409527273946	WITHOUT_CLASSIFICATION	4.590472726054344E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9996581044777969	WITHOUT_CLASSIFICATION	3.4189552220310773E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.998640682590465	WITHOUT_CLASSIFICATION	0.0013593174095349735	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9995801676364324	WITHOUT_CLASSIFICATION	4.198323635676536E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999204297267673	WITHOUT_CLASSIFICATION	7.957027323268273E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995299846538823	WITHOUT_CLASSIFICATION	4.7001534611767223E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995299846538823	WITHOUT_CLASSIFICATION	4.7001534611767223E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998809923269069	WITHOUT_CLASSIFICATION	1.1900767309314334E-4	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997965035124095	WITHOUT_CLASSIFICATION	2.0349648759061475E-4	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998702447602447	WITHOUT_CLASSIFICATION	1.2975523975538347E-4	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9996809493282642	WITHOUT_CLASSIFICATION	3.190506717358227E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995174159497414	WITHOUT_CLASSIFICATION	4.8258405025860385E-4	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9997790197186424	WITHOUT_CLASSIFICATION	2.2098028135765483E-4	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9998919187731721	WITHOUT_CLASSIFICATION	1.0808122682799909E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993908045461326	WITHOUT_CLASSIFICATION	6.091954538674212E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999054310881434	WITHOUT_CLASSIFICATION	9.456891185650265E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999054310881434	WITHOUT_CLASSIFICATION	9.456891185650265E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999054310881434	WITHOUT_CLASSIFICATION	9.456891185650265E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9996575667585623	WITHOUT_CLASSIFICATION	3.424332414376301E-4	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999054310881434	WITHOUT_CLASSIFICATION	9.456891185650265E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998468665471882	WITHOUT_CLASSIFICATION	1.53133452811667E-4	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999763466815901	WITHOUT_CLASSIFICATION	2.365331840998432E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999817300951838	WITHOUT_CLASSIFICATION	1.82699048162345E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9989727067493313	WITHOUT_CLASSIFICATION	0.001027293250668792	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9977341251060804	WITHOUT_CLASSIFICATION	0.0022658748939195983	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998240044292444	WITHOUT_CLASSIFICATION	1.7599557075567495E-4	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9997059164825811	WITHOUT_CLASSIFICATION	2.9408351741887424E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9997059164825811	WITHOUT_CLASSIFICATION	2.9408351741887424E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9864641128401254	WITHOUT_CLASSIFICATION	0.01353588715987465	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999591961970611	WITHOUT_CLASSIFICATION	4.08038029388988E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999837585144694	WITHOUT_CLASSIFICATION	1.624148553057121E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999871033314335	WITHOUT_CLASSIFICATION	1.2896668566539002E-5	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.999975794306517	WITHOUT_CLASSIFICATION	2.4205693483029817E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999973998608462	WITHOUT_CLASSIFICATION	2.6001391537358645E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999779816055528	WITHOUT_CLASSIFICATION	2.2018394447232704E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999779816055528	WITHOUT_CLASSIFICATION	2.2018394447232704E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990923921403031	WITHOUT_CLASSIFICATION	9.07607859697037E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990923921403031	WITHOUT_CLASSIFICATION	9.07607859697037E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9994468667369361	WITHOUT_CLASSIFICATION	5.531332630640387E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9994468667369361	WITHOUT_CLASSIFICATION	5.531332630640387E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9997059164825811	WITHOUT_CLASSIFICATION	2.9408351741887424E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999973998608462	WITHOUT_CLASSIFICATION	2.6001391537358645E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999779816055528	WITHOUT_CLASSIFICATION	2.2018394447232704E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990923921403031	WITHOUT_CLASSIFICATION	9.07607859697037E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990923921403031	WITHOUT_CLASSIFICATION	9.07607859697037E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9994468667369361	WITHOUT_CLASSIFICATION	5.531332630640387E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9989972010860207	WITHOUT_CLASSIFICATION	0.0010027989139793456	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.998687912572981	WITHOUT_CLASSIFICATION	0.0013120874270190212	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.998206293986418	WITHOUT_CLASSIFICATION	0.001793706013581972	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999744446971171	WITHOUT_CLASSIFICATION	2.5555302882904386E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9992892767599607	WITHOUT_CLASSIFICATION	7.107232400392195E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999759833010726	WITHOUT_CLASSIFICATION	2.4016698927357703E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997305136083156	WITHOUT_CLASSIFICATION	2.694863916844381E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999522711103634	WITHOUT_CLASSIFICATION	4.7728889636468776E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999269127878906	WITHOUT_CLASSIFICATION	7.30872121094671E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.98806450409667	WITHOUT_CLASSIFICATION	0.01193549590332992	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9995178394357874	WITHOUT_CLASSIFICATION	4.821605642125865E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998252669595364	WITHOUT_CLASSIFICATION	1.7473304046355115E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999759833010726	WITHOUT_CLASSIFICATION	2.4016698927357703E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998548971242767	WITHOUT_CLASSIFICATION	1.4510287572334332E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9992301860007092	WITHOUT_CLASSIFICATION	7.698139992907096E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9992301860007092	WITHOUT_CLASSIFICATION	7.698139992907096E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9986780629525744	WITHOUT_CLASSIFICATION	0.001321937047425557	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999702570210944	WITHOUT_CLASSIFICATION	2.9742978905501574E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9995260579443954	WITHOUT_CLASSIFICATION	4.739420556046086E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9949535603799808	WITHOUT_CLASSIFICATION	0.005046439620019205	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9949535603799808	WITHOUT_CLASSIFICATION	0.005046439620019205	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999421133898739	WITHOUT_CLASSIFICATION	5.788661012609648E-4	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9972888843042641	WITHOUT_CLASSIFICATION	0.0027111156957359225	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9972888843042641	WITHOUT_CLASSIFICATION	0.0027111156957359225	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999257328853248	WITHOUT_CLASSIFICATION	7.426711467520145E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999378525966414	WITHOUT_CLASSIFICATION	6.214740335863257E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999620628451651	WITHOUT_CLASSIFICATION	3.793715483497049E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9286578358840636	WITHOUT_CLASSIFICATION	0.07134216411593639	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999525341479579	WITHOUT_CLASSIFICATION	4.746585204205048E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997557928630193	WITHOUT_CLASSIFICATION	2.4420713698070806E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9996540514038992	WITHOUT_CLASSIFICATION	3.4594859610084946E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998045696461314	WITHOUT_CLASSIFICATION	1.954303538685744E-4	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999845743032828	WITHOUT_CLASSIFICATION	1.542569671720472E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9995366184207712	WITHOUT_CLASSIFICATION	4.633815792287849E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999508867594913	WITHOUT_CLASSIFICATION	4.9113240508727634E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9986512926338809	WITHOUT_CLASSIFICATION	0.0013487073661191252	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999620628451651	WITHOUT_CLASSIFICATION	3.793715483497049E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.998791089847791	WITHOUT_CLASSIFICATION	0.0012089101522090077	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9991853083037635	WITHOUT_CLASSIFICATION	8.14691696236461E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9986512926338809	WITHOUT_CLASSIFICATION	0.0013487073661191252	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.998791089847791	WITHOUT_CLASSIFICATION	0.0012089101522090077	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992735753196509	WITHOUT_CLASSIFICATION	7.2642468034907E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992735753196509	WITHOUT_CLASSIFICATION	7.2642468034907E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9985732726793457	WITHOUT_CLASSIFICATION	0.0014267273206542345	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999740450138856	WITHOUT_CLASSIFICATION	2.5954986114377505E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9997331793019997	WITHOUT_CLASSIFICATION	2.6682069800028975E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9961240935315094	WITHOUT_CLASSIFICATION	0.003875906468490619	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999099497108137	WITHOUT_CLASSIFICATION	9.005028918627671E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9955342591429112	WITHOUT_CLASSIFICATION	0.00446574085708874	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9989903561779128	WITHOUT_CLASSIFICATION	0.0010096438220873	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999099497108137	WITHOUT_CLASSIFICATION	9.005028918627671E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999051764439498	WITHOUT_CLASSIFICATION	9.482355605019743E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9986512926338809	WITHOUT_CLASSIFICATION	0.0013487073661191252	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9991784125894008	WITHOUT_CLASSIFICATION	8.215874105992846E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.999808948376527	WITHOUT_CLASSIFICATION	1.9105162347303418E-4	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9828406796467994	WITHOUT_CLASSIFICATION	0.01715932035320051	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9994332845929645	WITHOUT_CLASSIFICATION	5.667154070354779E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9990258896975973	WITHOUT_CLASSIFICATION	9.741103024026234E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999776300152595	WITHOUT_CLASSIFICATION	2.2369984740446184E-5	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999351288948288	WITHOUT_CLASSIFICATION	6.487110517117676E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9963625619893628	WITHOUT_CLASSIFICATION	0.003637438010637138	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.997335352887126	WITHOUT_CLASSIFICATION	0.002664647112874025	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9981562702373599	WITHOUT_CLASSIFICATION	0.0018437297626401148	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995366184207712	WITHOUT_CLASSIFICATION	4.633815792287849E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9997353077165018	WITHOUT_CLASSIFICATION	2.64692283498259E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9994813197002251	WITHOUT_CLASSIFICATION	5.186802997749397E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.997699904067463	WITHOUT_CLASSIFICATION	0.0023000959325370175	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9988811999202181	WITHOUT_CLASSIFICATION	0.0011188000797819149	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9988811999202181	WITHOUT_CLASSIFICATION	0.0011188000797819149	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9996245152252333	WITHOUT_CLASSIFICATION	3.754847747667457E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999969864161854	WITHOUT_CLASSIFICATION	3.013583814583977E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9996155744807621	WITHOUT_CLASSIFICATION	3.844255192378334E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9880867213376385	WITHOUT_CLASSIFICATION	0.01191327866236145	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9993793907272623	WITHOUT_CLASSIFICATION	6.206092727376608E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9687616260421651	WITHOUT_CLASSIFICATION	0.031238373957835016	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9687616260421651	WITHOUT_CLASSIFICATION	0.031238373957835016	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997358469079284	WITHOUT_CLASSIFICATION	2.641530920716428E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998073557923494	WITHOUT_CLASSIFICATION	1.926442076507044E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9996239113955482	WITHOUT_CLASSIFICATION	3.7608860445178854E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9993666773122662	WITHOUT_CLASSIFICATION	6.333226877336916E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9993667717023286	WITHOUT_CLASSIFICATION	6.33228297671392E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997673431458576	WITHOUT_CLASSIFICATION	2.3265685414250057E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.508368702311018	IMPLEMENTATION	0.49163129768898206	WITHOUT_CLASSIFICATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998808780921421	WITHOUT_CLASSIFICATION	1.1912190785783238E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9995071487775653	WITHOUT_CLASSIFICATION	4.928512224347081E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9995380506565134	WITHOUT_CLASSIFICATION	4.619493434866041E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.998724829476072	WITHOUT_CLASSIFICATION	0.0012751705239279145	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.994645627914713	WITHOUT_CLASSIFICATION	0.005354372085287006	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997617116854809	WITHOUT_CLASSIFICATION	2.382883145190795E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990917754000781	WITHOUT_CLASSIFICATION	9.082245999218767E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9997078747563402	WITHOUT_CLASSIFICATION	2.921252436598271E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999995214739393	WITHOUT_CLASSIFICATION	4.785260607064916E-6	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9995697792086213	WITHOUT_CLASSIFICATION	4.3022079137867335E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9979381763010677	WITHOUT_CLASSIFICATION	0.002061823698932208	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999701064965635	WITHOUT_CLASSIFICATION	2.989350343658093E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999701064965635	WITHOUT_CLASSIFICATION	2.989350343658093E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.997711709739834	WITHOUT_CLASSIFICATION	0.002288290260165949	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.997711709739834	WITHOUT_CLASSIFICATION	0.002288290260165949	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9880867213376385	WITHOUT_CLASSIFICATION	0.01191327866236145	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999031464711022	WITHOUT_CLASSIFICATION	9.685352889781115E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9987070760347012	WITHOUT_CLASSIFICATION	0.0012929239652988002	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9987070760347012	WITHOUT_CLASSIFICATION	0.0012929239652988002	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994805198523837	WITHOUT_CLASSIFICATION	5.194801476162912E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999989395673918	WITHOUT_CLASSIFICATION	1.0604326082070763E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.99947720057375	WITHOUT_CLASSIFICATION	5.227994262500158E-4	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999851258847222	WITHOUT_CLASSIFICATION	1.487411527784591E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9850375266573785	WITHOUT_CLASSIFICATION	0.014962473342621576	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9993646924501427	WITHOUT_CLASSIFICATION	6.353075498573541E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999261591473966	WITHOUT_CLASSIFICATION	7.38408526034113E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9988762032818411	WITHOUT_CLASSIFICATION	0.0011237967181588885	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995651263375142	WITHOUT_CLASSIFICATION	4.3487366248589905E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999491282913768	WITHOUT_CLASSIFICATION	5.087170862320721E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997027636511117	WITHOUT_CLASSIFICATION	2.9723634888843153E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999243210995814	WITHOUT_CLASSIFICATION	7.567890041861788E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9998935796456864	WITHOUT_CLASSIFICATION	1.064203543136086E-4	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999122014017077	WITHOUT_CLASSIFICATION	8.779859829230539E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999122014017077	WITHOUT_CLASSIFICATION	8.779859829230539E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998139464206239	WITHOUT_CLASSIFICATION	1.8605357937606827E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998139464206239	WITHOUT_CLASSIFICATION	1.8605357937606827E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9994062535625071	WITHOUT_CLASSIFICATION	5.937464374929385E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994805198523837	WITHOUT_CLASSIFICATION	5.194801476162912E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9695924811173501	WITHOUT_CLASSIFICATION	0.03040751888265	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999650991805374	WITHOUT_CLASSIFICATION	3.4900819462486035E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9644726317488551	WITHOUT_CLASSIFICATION	0.0355273682511449	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998789495822357	WITHOUT_CLASSIFICATION	1.2105041776433249E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9902097980144482	WITHOUT_CLASSIFICATION	0.009790201985551788	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994805198523837	WITHOUT_CLASSIFICATION	5.194801476162912E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998789495822357	WITHOUT_CLASSIFICATION	1.2105041776433249E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9902097980144482	WITHOUT_CLASSIFICATION	0.009790201985551788	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9994923298663543	WITHOUT_CLASSIFICATION	5.076701336457171E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9980173818512469	WITHOUT_CLASSIFICATION	0.0019826181487531086	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997778763117261	WITHOUT_CLASSIFICATION	2.2212368827396111E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994805198523837	WITHOUT_CLASSIFICATION	5.194801476162912E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994805198523837	WITHOUT_CLASSIFICATION	5.194801476162912E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9995995696171985	WITHOUT_CLASSIFICATION	4.0043038280150394E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9996778634891894	WITHOUT_CLASSIFICATION	3.2213651081063337E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9974661572713837	WITHOUT_CLASSIFICATION	0.002533842728616343	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998538974623641	WITHOUT_CLASSIFICATION	1.461025376359257E-4	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997817887636229	WITHOUT_CLASSIFICATION	2.1821123637704403E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9996956768527765	WITHOUT_CLASSIFICATION	3.0432314722352906E-4	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9987786233682052	WITHOUT_CLASSIFICATION	0.0012213766317947133	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9993090942148175	WITHOUT_CLASSIFICATION	6.909057851824092E-4	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999637665539199	WITHOUT_CLASSIFICATION	3.623344608001595E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9985954847380462	WITHOUT_CLASSIFICATION	0.0014045152619538309	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9978605992915033	WITHOUT_CLASSIFICATION	0.0021394007084967687	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9979859616148875	WITHOUT_CLASSIFICATION	0.0020140383851125613	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999545022709515	WITHOUT_CLASSIFICATION	4.549772904857432E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9992015737520579	WITHOUT_CLASSIFICATION	7.984262479421623E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999858886927703	WITHOUT_CLASSIFICATION	1.4111307229662591E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999648467974395	WITHOUT_CLASSIFICATION	3.515320256049736E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9994055207020515	WITHOUT_CLASSIFICATION	5.94479297948588E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9992430901446914	WITHOUT_CLASSIFICATION	7.569098553086258E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9987313960640172	WITHOUT_CLASSIFICATION	0.0012686039359829015	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999648467974395	WITHOUT_CLASSIFICATION	3.515320256049736E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.8984728022512898	WITHOUT_CLASSIFICATION	0.1015271977487102	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999744393319311	WITHOUT_CLASSIFICATION	2.5560668068983427E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.987569153536254	WITHOUT_CLASSIFICATION	0.012430846463745928	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999776390048583	WITHOUT_CLASSIFICATION	2.236099514169134E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998633788460879	WITHOUT_CLASSIFICATION	1.3662115391216415E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9968545944577893	WITHOUT_CLASSIFICATION	0.003145405542210585	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9910739740531171	WITHOUT_CLASSIFICATION	0.008926025946882831	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9995675607535025	WITHOUT_CLASSIFICATION	4.3243924649747744E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9992878964960192	WITHOUT_CLASSIFICATION	7.121035039806523E-4	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999945120973094	WITHOUT_CLASSIFICATION	5.4879026905996515E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9990972143666298	WITHOUT_CLASSIFICATION	9.027856333703254E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997739344461685	WITHOUT_CLASSIFICATION	2.2606555383152996E-4	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998488472429011	WITHOUT_CLASSIFICATION	1.511527570989805E-4	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9962904230154349	WITHOUT_CLASSIFICATION	0.0037095769845651395	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9970015952283594	WITHOUT_CLASSIFICATION	0.002998404771640659	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989547098410088	WITHOUT_CLASSIFICATION	0.0010452901589912468	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9995906261208484	WITHOUT_CLASSIFICATION	4.0937387915164757E-4	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9974976077086953	WITHOUT_CLASSIFICATION	0.0025023922913046366	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999988776079049	WITHOUT_CLASSIFICATION	1.1223920951098357E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968753685796625	WITHOUT_CLASSIFICATION	0.003124631420337491	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968753685796625	WITHOUT_CLASSIFICATION	0.003124631420337491	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929442322360368	WITHOUT_CLASSIFICATION	0.007055767763963185	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993860356095282	WITHOUT_CLASSIFICATION	6.139643904718479E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9902419154012778	WITHOUT_CLASSIFICATION	0.00975808459872216	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9946699704191357	WITHOUT_CLASSIFICATION	0.005330029580864207	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9945651852820181	WITHOUT_CLASSIFICATION	0.0054348147179819955	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946943938052577	WITHOUT_CLASSIFICATION	0.005305606194742287	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9919303660650538	WITHOUT_CLASSIFICATION	0.008069633934946257	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9810944985116138	WITHOUT_CLASSIFICATION	0.01890550148838627	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999844125889004	WITHOUT_CLASSIFICATION	1.5587411099607175E-4	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8852759045755768	WITHOUT_CLASSIFICATION	0.11472409542442327	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999018802841884	WITHOUT_CLASSIFICATION	9.811971581155261E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999165571149414	WITHOUT_CLASSIFICATION	8.344288505861394E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988280646201366	WITHOUT_CLASSIFICATION	0.0011719353798633732	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9994958560929808	WITHOUT_CLASSIFICATION	5.041439070192603E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9994923298663543	WITHOUT_CLASSIFICATION	5.076701336457171E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9996337601655385	WITHOUT_CLASSIFICATION	3.662398344615144E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9997787419544201	WITHOUT_CLASSIFICATION	2.2125804557986643E-4	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.996711327962915	WITHOUT_CLASSIFICATION	0.0032886720370850827	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9995664904264924	WITHOUT_CLASSIFICATION	4.335095735075645E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9993758409579101	WITHOUT_CLASSIFICATION	6.241590420899088E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994105494255093	WITHOUT_CLASSIFICATION	5.89450574490769E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995211584572138	WITHOUT_CLASSIFICATION	4.7884154278628335E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993861796030625	WITHOUT_CLASSIFICATION	6.138203969374981E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9951656240318003	WITHOUT_CLASSIFICATION	0.0048343759681996855	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9987946759998009	WITHOUT_CLASSIFICATION	0.0012053240001991703	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9994953825864431	WITHOUT_CLASSIFICATION	5.046174135569396E-4	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998107736993218	WITHOUT_CLASSIFICATION	1.8922630067825602E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99365001207414	WITHOUT_CLASSIFICATION	0.006349987925859929	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996005918849541	WITHOUT_CLASSIFICATION	3.994081150457893E-4	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9996859763604219	WITHOUT_CLASSIFICATION	3.1402363957805374E-4	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9995927689333944	WITHOUT_CLASSIFICATION	4.0723106660560626E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9992663826565286	WITHOUT_CLASSIFICATION	7.336173434713821E-4	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9975733459490527	WITHOUT_CLASSIFICATION	0.0024266540509473816	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9932535588197345	WITHOUT_CLASSIFICATION	0.00674644118026544	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999792289159906	WITHOUT_CLASSIFICATION	2.0771084009446773E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9991106654867379	WITHOUT_CLASSIFICATION	8.893345132621631E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988280646201366	WITHOUT_CLASSIFICATION	0.0011719353798633732	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.99836032908664	WITHOUT_CLASSIFICATION	0.0016396709133600037	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999967868393738	WITHOUT_CLASSIFICATION	3.213160626202291E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995796111321912	WITHOUT_CLASSIFICATION	4.203888678087525E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999018802841884	WITHOUT_CLASSIFICATION	9.811971581155261E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9994138235602781	WITHOUT_CLASSIFICATION	5.861764397219318E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996005135239906	WITHOUT_CLASSIFICATION	3.99486476009395E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999768550128203	WITHOUT_CLASSIFICATION	2.314498717963428E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994606163034386	WITHOUT_CLASSIFICATION	5.393836965613097E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999436829200251	WITHOUT_CLASSIFICATION	5.631707997496615E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9993566748207572	WITHOUT_CLASSIFICATION	6.433251792427264E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9964483198118886	WITHOUT_CLASSIFICATION	0.0035516801881112707	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999769670784397	WITHOUT_CLASSIFICATION	2.3032921560293584E-5	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999648899252152	WITHOUT_CLASSIFICATION	3.51100747848628E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9994923298663543	WITHOUT_CLASSIFICATION	5.076701336457171E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999018802841884	WITHOUT_CLASSIFICATION	9.811971581155261E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9978883585163241	WITHOUT_CLASSIFICATION	0.0021116414836758086	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999798194652031	WITHOUT_CLASSIFICATION	2.0180534796897996E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998680115427243	WITHOUT_CLASSIFICATION	1.319884572756417E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9972647515422467	WITHOUT_CLASSIFICATION	0.0027352484577532524	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9995818085617066	WITHOUT_CLASSIFICATION	4.1819143829331933E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997262747799498	WITHOUT_CLASSIFICATION	2.737252200502531E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9979676001398918	WITHOUT_CLASSIFICATION	0.0020323998601081985	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9998617615293316	WITHOUT_CLASSIFICATION	1.3823847066836984E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.999993669219225	WITHOUT_CLASSIFICATION	6.330780775020989E-6	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9977509706317654	WITHOUT_CLASSIFICATION	0.002249029368234575	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999378019610649	WITHOUT_CLASSIFICATION	6.219803893511263E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999018802841884	WITHOUT_CLASSIFICATION	9.811971581155261E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988280646201366	WITHOUT_CLASSIFICATION	0.0011719353798633732	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9948043164707939	WITHOUT_CLASSIFICATION	0.005195683529206085	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9935978314336658	WITHOUT_CLASSIFICATION	0.0064021685663343125	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9924600503696686	WITHOUT_CLASSIFICATION	0.007539949630331384	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988280646201366	WITHOUT_CLASSIFICATION	0.0011719353798633732	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999540256974796	WITHOUT_CLASSIFICATION	4.597430252052463E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998680115427243	WITHOUT_CLASSIFICATION	1.319884572756417E-4	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9983899169018401	WITHOUT_CLASSIFICATION	0.0016100830981599452	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993035977213849	WITHOUT_CLASSIFICATION	6.964022786151713E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999953414264506	WITHOUT_CLASSIFICATION	4.658573549399927E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999436829200251	WITHOUT_CLASSIFICATION	5.631707997496615E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9997654282093078	WITHOUT_CLASSIFICATION	2.3457179069215678E-4	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.999784410986904	WITHOUT_CLASSIFICATION	2.1558901309605096E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9989825763506297	WITHOUT_CLASSIFICATION	0.0010174236493702637	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999734183557433	WITHOUT_CLASSIFICATION	2.6581644256692345E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9994246466933594	WITHOUT_CLASSIFICATION	5.753533066406109E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988280646201366	WITHOUT_CLASSIFICATION	0.0011719353798633732	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9993566748207572	WITHOUT_CLASSIFICATION	6.433251792427264E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9964483198118886	WITHOUT_CLASSIFICATION	0.0035516801881112707	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999609690436239	WITHOUT_CLASSIFICATION	3.9030956376105713E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992556351338705	WITHOUT_CLASSIFICATION	7.443648661295348E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999460198216488	WITHOUT_CLASSIFICATION	5.398017835119629E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999198927288268	WITHOUT_CLASSIFICATION	8.010727117322973E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9989273985817558	WITHOUT_CLASSIFICATION	0.0010726014182441455	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999781804452856	WITHOUT_CLASSIFICATION	2.1819554714278854E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9981826649621124	WITHOUT_CLASSIFICATION	0.0018173350378876685	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9996057902439627	WITHOUT_CLASSIFICATION	3.9420975603736994E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9995626982599607	WITHOUT_CLASSIFICATION	4.373017400392542E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946943938052577	WITHOUT_CLASSIFICATION	0.005305606194742287	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9995911315449142	WITHOUT_CLASSIFICATION	4.088684550857329E-4	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999691711074266	WITHOUT_CLASSIFICATION	3.082889257340343E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9921904547463793	WITHOUT_CLASSIFICATION	0.007809545253620573	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9938656914350716	WITHOUT_CLASSIFICATION	0.006134308564928316	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9919303660650538	WITHOUT_CLASSIFICATION	0.008069633934946257	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917953640856028	WITHOUT_CLASSIFICATION	0.008204635914397209	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9992663826565286	WITHOUT_CLASSIFICATION	7.336173434713821E-4	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999188058614773	WITHOUT_CLASSIFICATION	8.119413852265934E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997863135572413	WITHOUT_CLASSIFICATION	2.1368644275860147E-4	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997753561006102	WITHOUT_CLASSIFICATION	2.2464389938984953E-4	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999471789517441	WITHOUT_CLASSIFICATION	5.2821048255805704E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999840540608742	WITHOUT_CLASSIFICATION	1.5945939125869424E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9987757417959843	WITHOUT_CLASSIFICATION	0.001224258204015676	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999116563738897	WITHOUT_CLASSIFICATION	8.834362611033473E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9910739740531171	WITHOUT_CLASSIFICATION	0.008926025946882831	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9986816495868761	WITHOUT_CLASSIFICATION	0.0013183504131238592	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9997644135516939	WITHOUT_CLASSIFICATION	2.3558644830621317E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9996562603389924	WITHOUT_CLASSIFICATION	3.4373966100765147E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9995703494192472	WITHOUT_CLASSIFICATION	4.296505807527667E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998916856616333	WITHOUT_CLASSIFICATION	1.0831433836669085E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9981149708585462	WITHOUT_CLASSIFICATION	0.0018850291414538789	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991103662286597	WITHOUT_CLASSIFICATION	8.896337713402493E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987255464048311	WITHOUT_CLASSIFICATION	0.001274453595168834	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997899294648533	WITHOUT_CLASSIFICATION	2.1007053514671744E-4	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9978109703802646	WITHOUT_CLASSIFICATION	0.002189029619735428	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999686492789337	WITHOUT_CLASSIFICATION	3.13507210662965E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995510990038178	WITHOUT_CLASSIFICATION	4.4890099618222126E-4	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988980563884307	WITHOUT_CLASSIFICATION	0.0011019436115693908	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993239974724991	WITHOUT_CLASSIFICATION	6.760025275007789E-4	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9961816344963635	WITHOUT_CLASSIFICATION	0.003818365503636317	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9994457841184624	WITHOUT_CLASSIFICATION	5.542158815375356E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988980563884307	WITHOUT_CLASSIFICATION	0.0011019436115693908	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996775816560028	WITHOUT_CLASSIFICATION	3.224183439972136E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996330282912007	WITHOUT_CLASSIFICATION	3.6697170879928685E-4	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992349199614962	WITHOUT_CLASSIFICATION	7.650800385037234E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998139803103152	WITHOUT_CLASSIFICATION	1.860196896848363E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9993863977045343	WITHOUT_CLASSIFICATION	6.136022954657806E-4	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9993631685058674	WITHOUT_CLASSIFICATION	6.368314941325516E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9984845923009632	WITHOUT_CLASSIFICATION	0.0015154076990366993	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9992188879143392	WITHOUT_CLASSIFICATION	7.811120856608618E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9992188879143392	WITHOUT_CLASSIFICATION	7.811120856608618E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9997151081336869	WITHOUT_CLASSIFICATION	2.848918663131018E-4	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999649829268309	WITHOUT_CLASSIFICATION	3.501707316909263E-4	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994818926469164	WITHOUT_CLASSIFICATION	5.181073530835678E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9995424038999582	WITHOUT_CLASSIFICATION	4.575961000419004E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999950257540682	WITHOUT_CLASSIFICATION	4.974245931834713E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9984583390880334	WITHOUT_CLASSIFICATION	0.0015416609119665193	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999961666763449	WITHOUT_CLASSIFICATION	3.833323655067662E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999892388106739	WITHOUT_CLASSIFICATION	1.0761189326117776E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9994032711803826	WITHOUT_CLASSIFICATION	5.967288196174304E-4	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9993411780532168	WITHOUT_CLASSIFICATION	6.5882194678323E-4	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9995282286892184	WITHOUT_CLASSIFICATION	4.717713107815619E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999396320075171	WITHOUT_CLASSIFICATION	6.0367992482854784E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9973177083390384	WITHOUT_CLASSIFICATION	0.0026822916609614525	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8548666449827395	WITHOUT_CLASSIFICATION	0.14513335501726055	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9976599428563216	WITHOUT_CLASSIFICATION	0.002340057143678417	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999307682572729	WITHOUT_CLASSIFICATION	6.923174272705507E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9991850735709742	WITHOUT_CLASSIFICATION	8.149264290258078E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9959295953237329	WITHOUT_CLASSIFICATION	0.004070404676267129	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9976511120724498	WITHOUT_CLASSIFICATION	0.002348887927550259	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9990820086548573	WITHOUT_CLASSIFICATION	9.179913451426681E-4	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999734656626022	WITHOUT_CLASSIFICATION	2.6534337397799893E-4	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9990823209027376	WITHOUT_CLASSIFICATION	9.176790972623265E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9979539935419531	WITHOUT_CLASSIFICATION	0.002046006458046861	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999080798212387	WITHOUT_CLASSIFICATION	9.192017876124046E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9992458672675028	WITHOUT_CLASSIFICATION	7.541327324972491E-4	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9981848780831576	WITHOUT_CLASSIFICATION	0.0018151219168424354	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9936235929402188	WITHOUT_CLASSIFICATION	0.006376407059781088	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9950409776934037	WITHOUT_CLASSIFICATION	0.004959022306596295	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9854786771473675	WITHOUT_CLASSIFICATION	0.014521322852632574	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9996626849941487	WITHOUT_CLASSIFICATION	3.3731500585133806E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9971142610011652	WITHOUT_CLASSIFICATION	0.0028857389988348726	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9990228549575387	WITHOUT_CLASSIFICATION	9.771450424612027E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9992478803656345	WITHOUT_CLASSIFICATION	7.521196343654943E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997725025567292	WITHOUT_CLASSIFICATION	2.2749744327074282E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9991938353791221	WITHOUT_CLASSIFICATION	8.061646208779631E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9987106882234806	WITHOUT_CLASSIFICATION	0.0012893117765193922	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9938157764249543	WITHOUT_CLASSIFICATION	0.00618422357504567	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9986719951863133	WITHOUT_CLASSIFICATION	0.001328004813686688	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.99976593526122	WITHOUT_CLASSIFICATION	2.3406473877999795E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9993410081111437	WITHOUT_CLASSIFICATION	6.589918888563674E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9994923298663543	WITHOUT_CLASSIFICATION	5.076701336457171E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9994923298663543	WITHOUT_CLASSIFICATION	5.076701336457171E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9994865649398504	WITHOUT_CLASSIFICATION	5.134350601495711E-4	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999427797886997	WITHOUT_CLASSIFICATION	5.7220211300394016E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998305674450501	WITHOUT_CLASSIFICATION	1.6943255494990175E-4	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999350702351558	WITHOUT_CLASSIFICATION	6.49297648442147E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998315512081661	WITHOUT_CLASSIFICATION	1.6844879183379065E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999598779135758	WITHOUT_CLASSIFICATION	4.012208642425709E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9990215373131425	WITHOUT_CLASSIFICATION	9.78462686857511E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9961127835545585	WITHOUT_CLASSIFICATION	0.0038872164454415072	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9997072567644909	WITHOUT_CLASSIFICATION	2.927432355091419E-4	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9994869981059954	WITHOUT_CLASSIFICATION	5.130018940046393E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993032640372913	WITHOUT_CLASSIFICATION	6.967359627087505E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.998603213668996	WITHOUT_CLASSIFICATION	0.0013967863310039852	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9989827561524643	WITHOUT_CLASSIFICATION	0.0010172438475356258	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9988538310028157	WITHOUT_CLASSIFICATION	0.0011461689971843587	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9981444985159005	WITHOUT_CLASSIFICATION	0.0018555014840995149	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9970989988522981	WITHOUT_CLASSIFICATION	0.0029010011477018827	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9992614139308587	WITHOUT_CLASSIFICATION	7.385860691413842E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9972912266580438	WITHOUT_CLASSIFICATION	0.0027087733419561243	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9984633006741617	WITHOUT_CLASSIFICATION	0.0015366993258383492	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997754840390026	WITHOUT_CLASSIFICATION	2.2451596099725598E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9972912266580438	WITHOUT_CLASSIFICATION	0.0027087733419561243	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999511543307815	WITHOUT_CLASSIFICATION	4.884566921842816E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999209649393923	WITHOUT_CLASSIFICATION	7.903506060770053E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9987068111687395	WITHOUT_CLASSIFICATION	0.001293188831260488	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9967769574480996	WITHOUT_CLASSIFICATION	0.0032230425519002917	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9976998463758288	WITHOUT_CLASSIFICATION	0.0023001536241711905	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999863884117315	WITHOUT_CLASSIFICATION	1.3611588268575178E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9996077769777416	WITHOUT_CLASSIFICATION	3.9222302225840744E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997461990675082	WITHOUT_CLASSIFICATION	2.538009324919124E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9993974602162551	WITHOUT_CLASSIFICATION	6.02539783745013E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9998745857562248	WITHOUT_CLASSIFICATION	1.2541424377521826E-4	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9991241927641704	WITHOUT_CLASSIFICATION	8.758072358296111E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9408121565253357	WITHOUT_CLASSIFICATION	0.05918784347466435	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9997204062811692	WITHOUT_CLASSIFICATION	2.795937188307892E-4	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9941028287151642	WITHOUT_CLASSIFICATION	0.005897171284835747	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9961133660627864	WITHOUT_CLASSIFICATION	0.0038866339372136158	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9919616844508412	WITHOUT_CLASSIFICATION	0.008038315549158724	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9993246299086088	WITHOUT_CLASSIFICATION	6.753700913911959E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9895318890281353	WITHOUT_CLASSIFICATION	0.010468110971864711	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997418550086677	WITHOUT_CLASSIFICATION	2.581449913322625E-4	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999206873796245	WITHOUT_CLASSIFICATION	7.931262037548703E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9229472924597715	WITHOUT_CLASSIFICATION	0.07705270754022857	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9292850836917392	WITHOUT_CLASSIFICATION	0.07071491630826084	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9976362796155636	WITHOUT_CLASSIFICATION	0.002363720384436482	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9983900872899493	WITHOUT_CLASSIFICATION	0.0016099127100506869	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9750592466799505	WITHOUT_CLASSIFICATION	0.024940753320049514	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996398701134174	WITHOUT_CLASSIFICATION	3.6012988658272455E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9981149708585462	WITHOUT_CLASSIFICATION	0.0018850291414538789	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9990809775837831	WITHOUT_CLASSIFICATION	9.190224162169452E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999993025030455	WITHOUT_CLASSIFICATION	6.974969545037749E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9993905855836853	WITHOUT_CLASSIFICATION	6.094144163145848E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998574862469989	WITHOUT_CLASSIFICATION	1.4251375300108334E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999744840917567	WITHOUT_CLASSIFICATION	2.551590824326107E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9954926271126484	WITHOUT_CLASSIFICATION	0.004507372887351534	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9932752946675333	WITHOUT_CLASSIFICATION	0.006724705332466791	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998025103577335	WITHOUT_CLASSIFICATION	1.9748964226639363E-4	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9994964533002654	WITHOUT_CLASSIFICATION	5.035466997346121E-4	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9995124897526426	WITHOUT_CLASSIFICATION	4.8751024735734096E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9998247126020345	WITHOUT_CLASSIFICATION	1.7528739796546865E-4	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999622168449358	WITHOUT_CLASSIFICATION	3.7783155064208875E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9985446558932005	WITHOUT_CLASSIFICATION	0.001455344106799508	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9972192427363095	WITHOUT_CLASSIFICATION	0.002780757263690513	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9984713942497556	WITHOUT_CLASSIFICATION	0.0015286057502444023	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9993186474802072	WITHOUT_CLASSIFICATION	6.813525197928692E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999923244584584	WITHOUT_CLASSIFICATION	7.675541541595185E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999400030990513	WITHOUT_CLASSIFICATION	5.999690094868915E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999677978225856	WITHOUT_CLASSIFICATION	3.2202177414428805E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9984735530734281	WITHOUT_CLASSIFICATION	0.0015264469265718137	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9993920287878326	WITHOUT_CLASSIFICATION	6.079712121673356E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9989377113496792	WITHOUT_CLASSIFICATION	0.001062288650320857	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998056141874337	WITHOUT_CLASSIFICATION	1.9438581256613882E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9992580063883354	WITHOUT_CLASSIFICATION	7.419936116645266E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9994789489424982	WITHOUT_CLASSIFICATION	5.210510575017569E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9988938509561904	WITHOUT_CLASSIFICATION	0.0011061490438095192	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999710081367099	WITHOUT_CLASSIFICATION	2.8991863289990045E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9924076688671103	WITHOUT_CLASSIFICATION	0.007592331132889687	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9756195981022545	WITHOUT_CLASSIFICATION	0.02438040189774546	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981298821114608	WITHOUT_CLASSIFICATION	0.0018701178885392618	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985366322284568	WITHOUT_CLASSIFICATION	0.0014633677715431212	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142765643336	WITHOUT_CLASSIFICATION	4.857234356663803E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998805800628022	WITHOUT_CLASSIFICATION	1.1941993719785019E-4	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999624094721942	WITHOUT_CLASSIFICATION	3.759052780579259E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999793157433036	WITHOUT_CLASSIFICATION	2.068425669639505E-4	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9059197207659556	WITHOUT_CLASSIFICATION	0.0940802792340444	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9986603825528322	WITHOUT_CLASSIFICATION	0.0013396174471677312	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993230627032731	WITHOUT_CLASSIFICATION	6.769372967268493E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9986603825528322	WITHOUT_CLASSIFICATION	0.0013396174471677312	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.998626693331524	WITHOUT_CLASSIFICATION	0.0013733066684760604	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9997584028439711	WITHOUT_CLASSIFICATION	2.4159715602888924E-4	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9995543092230484	WITHOUT_CLASSIFICATION	4.456907769514903E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999403974417492	WITHOUT_CLASSIFICATION	5.960255825065373E-5	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998603622706173	WITHOUT_CLASSIFICATION	1.3963772938276652E-4	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997405923726654	WITHOUT_CLASSIFICATION	2.594076273345133E-4	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9994572625789655	WITHOUT_CLASSIFICATION	5.427374210345065E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9996995639971014	WITHOUT_CLASSIFICATION	3.004360028986468E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9986433439679117	WITHOUT_CLASSIFICATION	0.0013566560320883367	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.5227039033379001	IMPLEMENTATION	0.4772960966620999	WITHOUT_CLASSIFICATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9936869580030938	WITHOUT_CLASSIFICATION	0.006313041996906217	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9903460605790204	WITHOUT_CLASSIFICATION	0.009653939420979536	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993081328623178	WITHOUT_CLASSIFICATION	6.918671376822392E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9996735064689977	WITHOUT_CLASSIFICATION	3.264935310024402E-4	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6186888935736562	WITHOUT_CLASSIFICATION	0.3813111064263437	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9972617842199335	WITHOUT_CLASSIFICATION	0.0027382157800665686	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997807388043048	WITHOUT_CLASSIFICATION	2.1926119569505491E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997807388043048	WITHOUT_CLASSIFICATION	2.1926119569505491E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9994869981059954	WITHOUT_CLASSIFICATION	5.130018940046393E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9990350014446604	WITHOUT_CLASSIFICATION	9.649985553396552E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999871763661738	WITHOUT_CLASSIFICATION	1.2823633826014457E-5	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999133212847984	WITHOUT_CLASSIFICATION	8.667871520169064E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9983812136670428	WITHOUT_CLASSIFICATION	0.0016187863329571203	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9995486643975632	WITHOUT_CLASSIFICATION	4.5133560243685125E-4	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9896389619666186	WITHOUT_CLASSIFICATION	0.010361038033381302	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999975517564647	WITHOUT_CLASSIFICATION	2.448243535305896E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9994397813452004	WITHOUT_CLASSIFICATION	5.60218654799526E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997726015644137	WITHOUT_CLASSIFICATION	2.2739843558628378E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999534081708149	WITHOUT_CLASSIFICATION	4.6591829185178705E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.998056958151173	WITHOUT_CLASSIFICATION	0.001943041848826969	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9992177609023699	WITHOUT_CLASSIFICATION	7.822390976300445E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999109895810597	WITHOUT_CLASSIFICATION	8.901041894019067E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9986888861948842	WITHOUT_CLASSIFICATION	0.0013111138051157387	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9968198735502263	WITHOUT_CLASSIFICATION	0.003180126449773778	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999649766639376	WITHOUT_CLASSIFICATION	3.502333606246036E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9943810479047025	WITHOUT_CLASSIFICATION	0.005618952095297486	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9979212237817645	WITHOUT_CLASSIFICATION	0.0020787762182353925	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999866181845776	WITHOUT_CLASSIFICATION	1.3381815422434656E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9993730043830992	WITHOUT_CLASSIFICATION	6.269956169008373E-4	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.998710923226852	WITHOUT_CLASSIFICATION	0.0012890767731480739	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9996559697206306	WITHOUT_CLASSIFICATION	3.440302793694251E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.998441962576759	WITHOUT_CLASSIFICATION	0.0015580374232409982	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9982941613035842	WITHOUT_CLASSIFICATION	0.0017058386964157474	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999551612863652	WITHOUT_CLASSIFICATION	4.483871363479965E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9982929131046944	WITHOUT_CLASSIFICATION	0.0017070868953057037	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.998073894396698	WITHOUT_CLASSIFICATION	0.0019261056033018998	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999388670095444	WITHOUT_CLASSIFICATION	6.113299045556309E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9996799824006782	WITHOUT_CLASSIFICATION	3.200175993217106E-4	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996186351933996	WITHOUT_CLASSIFICATION	3.813648066003551E-4	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9985669801194469	WITHOUT_CLASSIFICATION	0.0014330198805530625	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9980620942165339	WITHOUT_CLASSIFICATION	0.0019379057834659845	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999907123226153	WITHOUT_CLASSIFICATION	9.287677384693184E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9995958447027935	WITHOUT_CLASSIFICATION	4.041552972065239E-4	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999809654081554	WITHOUT_CLASSIFICATION	1.9034591844593313E-4	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999821357118922	WITHOUT_CLASSIFICATION	1.786428810780495E-4	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999805692140807	WITHOUT_CLASSIFICATION	1.9430785919304603E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9974474545576546	WITHOUT_CLASSIFICATION	0.002552545442345367	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9991730615969425	WITHOUT_CLASSIFICATION	8.269384030574846E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993945079214288	WITHOUT_CLASSIFICATION	6.054920785712474E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.899870041190978	WITHOUT_CLASSIFICATION	0.10012995880902202	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9983467645374212	WITHOUT_CLASSIFICATION	0.001653235462578751	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.996707865620234	WITHOUT_CLASSIFICATION	0.0032921343797659543	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.997062072213372	WITHOUT_CLASSIFICATION	0.002937927786628173	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999978002713128	WITHOUT_CLASSIFICATION	2.1997286872221173E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9988589292893767	WITHOUT_CLASSIFICATION	0.0011410707106233643	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998214958289652	WITHOUT_CLASSIFICATION	1.7850417103483824E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993945079214288	WITHOUT_CLASSIFICATION	6.054920785712474E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999375165988826	WITHOUT_CLASSIFICATION	6.248340111740411E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9979243345778326	WITHOUT_CLASSIFICATION	0.0020756654221675097	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999104988377253	WITHOUT_CLASSIFICATION	8.950116227470587E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9982644208346928	WITHOUT_CLASSIFICATION	0.0017355791653071923	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999540256974796	WITHOUT_CLASSIFICATION	4.597430252052463E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999540256974796	WITHOUT_CLASSIFICATION	4.597430252052463E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999329990332676	WITHOUT_CLASSIFICATION	6.700096673239397E-5	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999732998576413	WITHOUT_CLASSIFICATION	2.670014235871468E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999762201628497	WITHOUT_CLASSIFICATION	2.3779837150335158E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9979079828344477	WITHOUT_CLASSIFICATION	0.002092017165552333	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9965511185127718	WITHOUT_CLASSIFICATION	0.003448881487228212	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9991244760963746	WITHOUT_CLASSIFICATION	8.755239036254836E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9993038813479042	WITHOUT_CLASSIFICATION	6.96118652095739E-4	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994673286457703	WITHOUT_CLASSIFICATION	5.326713542297032E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9951172174408743	WITHOUT_CLASSIFICATION	0.0048827825591257305	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9995431298436647	WITHOUT_CLASSIFICATION	4.568701563353689E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998890954293705	WITHOUT_CLASSIFICATION	1.109045706295313E-4	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9990708126971845	WITHOUT_CLASSIFICATION	9.291873028155487E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9990447964460222	WITHOUT_CLASSIFICATION	9.552035539778604E-4	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9978292142727628	WITHOUT_CLASSIFICATION	0.002170785727237254	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9906981281589601	WITHOUT_CLASSIFICATION	0.00930187184103997	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9936803541755143	WITHOUT_CLASSIFICATION	0.006319645824485763	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997865356643686	WITHOUT_CLASSIFICATION	2.1346433563140772E-4	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9996061302287136	WITHOUT_CLASSIFICATION	3.9386977128644945E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997941922929594	WITHOUT_CLASSIFICATION	2.0580770704063732E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998461281204823	WITHOUT_CLASSIFICATION	1.5387187951768444E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9802799326284386	WITHOUT_CLASSIFICATION	0.019720067371561435	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9959926590268082	WITHOUT_CLASSIFICATION	0.004007340973191755	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9907263808163214	WITHOUT_CLASSIFICATION	0.00927361918367865	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9991989313969933	WITHOUT_CLASSIFICATION	8.010686030066195E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999983966006432	WITHOUT_CLASSIFICATION	1.603399356866154E-6	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999379926158616	WITHOUT_CLASSIFICATION	6.200738413841211E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999771741663175	WITHOUT_CLASSIFICATION	2.2825833682508186E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9986656012241738	WITHOUT_CLASSIFICATION	0.0013343987758262146	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999379926158616	WITHOUT_CLASSIFICATION	6.200738413841211E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9966208455707973	WITHOUT_CLASSIFICATION	0.003379154429202724	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9995767010237698	WITHOUT_CLASSIFICATION	4.232989762300833E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999569362406319	WITHOUT_CLASSIFICATION	4.306375936812925E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9995352033013991	WITHOUT_CLASSIFICATION	4.6479669860082553E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.8973249229421609	WITHOUT_CLASSIFICATION	0.10267507705783904	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999534081708149	WITHOUT_CLASSIFICATION	4.6591829185178705E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999901648115165	WITHOUT_CLASSIFICATION	9.835188483502163E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9987757417959843	WITHOUT_CLASSIFICATION	0.001224258204015676	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998861920701585	WITHOUT_CLASSIFICATION	1.138079298413755E-4	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995986032128096	WITHOUT_CLASSIFICATION	4.013967871904507E-4	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999680096783347	WITHOUT_CLASSIFICATION	3.199032166528295E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9997001563042158	WITHOUT_CLASSIFICATION	2.998436957841242E-4	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9997337345987912	WITHOUT_CLASSIFICATION	2.662654012087931E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998304508604606	WITHOUT_CLASSIFICATION	1.6954913953934076E-4	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9992805382521494	WITHOUT_CLASSIFICATION	7.194617478507124E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999545266298744	WITHOUT_CLASSIFICATION	4.547337012566202E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9992637201204344	WITHOUT_CLASSIFICATION	7.36279879565615E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.998019564114659	WITHOUT_CLASSIFICATION	0.001980435885341048	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999350712089087	WITHOUT_CLASSIFICATION	6.492879109130293E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9996317778365567	WITHOUT_CLASSIFICATION	3.6822216344332373E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999248583377559	WITHOUT_CLASSIFICATION	7.514166224409669E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9997004423574483	WITHOUT_CLASSIFICATION	2.9955764255168443E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9997597524700864	WITHOUT_CLASSIFICATION	2.402475299135822E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998956655953312	WITHOUT_CLASSIFICATION	1.0433440466876874E-4	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998001834761764	WITHOUT_CLASSIFICATION	1.9981652382351127E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9996716325352246	WITHOUT_CLASSIFICATION	3.283674647753765E-4	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.998396323566506	WITHOUT_CLASSIFICATION	0.0016036764334940571	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9983329894621766	WITHOUT_CLASSIFICATION	0.0016670105378232992	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9994034575147008	WITHOUT_CLASSIFICATION	5.965424852991355E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952054569736571	WITHOUT_CLASSIFICATION	0.004794543026342849	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980919963102396	WITHOUT_CLASSIFICATION	0.0019080036897603455	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.996517524970368	WITHOUT_CLASSIFICATION	0.0034824750296318817	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9992609214714618	WITHOUT_CLASSIFICATION	7.390785285382022E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9998704597099303	WITHOUT_CLASSIFICATION	1.2954029006969313E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998262703663852	WITHOUT_CLASSIFICATION	1.737296336148595E-4	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9989996880668771	WITHOUT_CLASSIFICATION	0.001000311933122846	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999864598090256	WITHOUT_CLASSIFICATION	1.354019097440671E-4	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9995585163000728	WITHOUT_CLASSIFICATION	4.4148369992723656E-4	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9974428288159652	WITHOUT_CLASSIFICATION	0.002557171184034828	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998715943827622	WITHOUT_CLASSIFICATION	1.2840561723780115E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999834784485004	WITHOUT_CLASSIFICATION	1.6521551499601317E-4	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999937237496408	WITHOUT_CLASSIFICATION	6.276250359204147E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9993229813196178	WITHOUT_CLASSIFICATION	6.770186803821679E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9997999227535314	WITHOUT_CLASSIFICATION	2.0007724646858762E-4	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.998256911268894	WITHOUT_CLASSIFICATION	0.001743088731105934	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9996254675215099	WITHOUT_CLASSIFICATION	3.74532478489995E-4	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99950772591137	WITHOUT_CLASSIFICATION	4.922740886299299E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9974240425816753	WITHOUT_CLASSIFICATION	0.002575957418324785	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999378119562567	WITHOUT_CLASSIFICATION	6.218804374330957E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9998624025322246	WITHOUT_CLASSIFICATION	1.3759746777542806E-4	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998828319422856	WITHOUT_CLASSIFICATION	1.1716805771436358E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9988716435663817	WITHOUT_CLASSIFICATION	0.0011283564336182605	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9989584931354099	WITHOUT_CLASSIFICATION	0.001041506864590172	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999732149560969	WITHOUT_CLASSIFICATION	2.6785043903097063E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999140349152897	WITHOUT_CLASSIFICATION	8.59650847102635E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9997110676700561	WITHOUT_CLASSIFICATION	2.889323299439014E-4	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9996162598232651	WITHOUT_CLASSIFICATION	3.837401767348893E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9989461288849043	WITHOUT_CLASSIFICATION	0.0010538711150957466	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952054569736571	WITHOUT_CLASSIFICATION	0.004794543026342849	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9994477869464831	WITHOUT_CLASSIFICATION	5.522130535168982E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9974573701414292	WITHOUT_CLASSIFICATION	0.0025426298585708314	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999770041454429	WITHOUT_CLASSIFICATION	2.299585455712948E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9980010179835163	WITHOUT_CLASSIFICATION	0.0019989820164837712	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999055532736659	WITHOUT_CLASSIFICATION	9.44467263339733E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9990429314505385	WITHOUT_CLASSIFICATION	9.570685494615196E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993923083333446	WITHOUT_CLASSIFICATION	6.076916666553747E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999951882342831	WITHOUT_CLASSIFICATION	4.8117657168736094E-6	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999684008178755	WITHOUT_CLASSIFICATION	3.159918212448791E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997666942090899	WITHOUT_CLASSIFICATION	2.3330579091010716E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9988774289743533	WITHOUT_CLASSIFICATION	0.001122571025646748	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9989670867832198	WITHOUT_CLASSIFICATION	0.0010329132167802878	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9996108799179046	WITHOUT_CLASSIFICATION	3.8912008209544233E-4	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999190578528129	WITHOUT_CLASSIFICATION	8.094214718709312E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.998626693331524	WITHOUT_CLASSIFICATION	0.0013733066684760604	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999343743983657	WITHOUT_CLASSIFICATION	6.562560163420712E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999892727144446	WITHOUT_CLASSIFICATION	1.0727285555297076E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998806637556168	WITHOUT_CLASSIFICATION	1.193362443831839E-4	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9983241243458896	WITHOUT_CLASSIFICATION	0.0016758756541103699	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9988942301540269	WITHOUT_CLASSIFICATION	0.0011057698459731435	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9969199235076373	WITHOUT_CLASSIFICATION	0.003080076492362755	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9969199235076373	WITHOUT_CLASSIFICATION	0.003080076492362755	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9995395040627141	WITHOUT_CLASSIFICATION	4.604959372858269E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999849450640328	WITHOUT_CLASSIFICATION	1.505493596710791E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9993672921216703	WITHOUT_CLASSIFICATION	6.327078783298026E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997940714116327	WITHOUT_CLASSIFICATION	2.0592858836727246E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9993685806942875	WITHOUT_CLASSIFICATION	6.314193057124869E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999072849034579	WITHOUT_CLASSIFICATION	9.271509654209979E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9994303691265355	WITHOUT_CLASSIFICATION	5.696308734644629E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9894302622214518	WITHOUT_CLASSIFICATION	0.010569737778548303	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9894302622214518	WITHOUT_CLASSIFICATION	0.010569737778548303	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.7468646002349485	IMPLEMENTATION	0.2531353997650514	WITHOUT_CLASSIFICATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9997167544179197	WITHOUT_CLASSIFICATION	2.832455820802398E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999857296476398	WITHOUT_CLASSIFICATION	1.427035236010797E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9990680446798362	WITHOUT_CLASSIFICATION	9.319553201637441E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9981247911865392	WITHOUT_CLASSIFICATION	0.001875208813460774	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999740191587426	WITHOUT_CLASSIFICATION	2.598084125740033E-4	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.8619041017955121	WITHOUT_CLASSIFICATION	0.13809589820448784	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9994980487267916	WITHOUT_CLASSIFICATION	5.01951273208456E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999298641964743	WITHOUT_CLASSIFICATION	7.01358035256199E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.994332621674688	WITHOUT_CLASSIFICATION	0.005667378325311881	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997921252606933	WITHOUT_CLASSIFICATION	2.0787473930666966E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9846615605341188	WITHOUT_CLASSIFICATION	0.01533843946588114	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9996420042703997	WITHOUT_CLASSIFICATION	3.5799572960027863E-4	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999208735913464	WITHOUT_CLASSIFICATION	7.912640865353563E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999779498035718	WITHOUT_CLASSIFICATION	2.205019642819632E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999243673016688	WITHOUT_CLASSIFICATION	7.563269833122651E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999958576220762	WITHOUT_CLASSIFICATION	4.1423779237917674E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999171969422012	WITHOUT_CLASSIFICATION	8.280305779888214E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9995281492447315	WITHOUT_CLASSIFICATION	4.718507552683926E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9969893962632004	WITHOUT_CLASSIFICATION	0.0030106037367996397	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9969199235076373	WITHOUT_CLASSIFICATION	0.003080076492362755	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9986909563099345	WITHOUT_CLASSIFICATION	0.0013090436900654963	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9989893336574808	WITHOUT_CLASSIFICATION	0.001010666342519281	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997451810907786	WITHOUT_CLASSIFICATION	2.5481890922132E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998757608531821	WITHOUT_CLASSIFICATION	1.24239146817944E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998995297298146	WITHOUT_CLASSIFICATION	1.0047027018553171E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999988391760503	WITHOUT_CLASSIFICATION	1.1608239497815998E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998581552697541	WITHOUT_CLASSIFICATION	1.418447302458166E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997442416978021	WITHOUT_CLASSIFICATION	2.5575830219800314E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999174471252802	WITHOUT_CLASSIFICATION	8.255287471986603E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998154003920596	WITHOUT_CLASSIFICATION	1.845996079402771E-4	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999998936786638	WITHOUT_CLASSIFICATION	1.0632133619623532E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999984551110382	WITHOUT_CLASSIFICATION	1.544888961799907E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999917650326674	WITHOUT_CLASSIFICATION	8.234967332554101E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999830501595339	WITHOUT_CLASSIFICATION	1.6949840466066456E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999206385240721	WITHOUT_CLASSIFICATION	7.936147592790533E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9736784412727153	WITHOUT_CLASSIFICATION	0.026321558727284724	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9990130282786576	WITHOUT_CLASSIFICATION	9.86971721342415E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999265345267229	WITHOUT_CLASSIFICATION	7.346547327708472E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998229662568688	WITHOUT_CLASSIFICATION	1.7703374313118313E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998229662568688	WITHOUT_CLASSIFICATION	1.7703374313118313E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999507164779805	WITHOUT_CLASSIFICATION	4.928352201949793E-4	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999557619033145	WITHOUT_CLASSIFICATION	4.42380966855596E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9995101577252492	WITHOUT_CLASSIFICATION	4.898422747508302E-4	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999503088493252	WITHOUT_CLASSIFICATION	4.969115067480184E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999673015002929	WITHOUT_CLASSIFICATION	3.2698499707091476E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999613764606405	WITHOUT_CLASSIFICATION	3.862353935949514E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9995016297935099	WITHOUT_CLASSIFICATION	4.98370206490112E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998180756835858	WITHOUT_CLASSIFICATION	1.8192431641410144E-4	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9995531472381638	WITHOUT_CLASSIFICATION	4.468527618362772E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999633874087394	WITHOUT_CLASSIFICATION	3.661259126060046E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9994551940379934	WITHOUT_CLASSIFICATION	5.448059620064765E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993912801693318	WITHOUT_CLASSIFICATION	6.087198306683111E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999921920887892	WITHOUT_CLASSIFICATION	7.807911210804376E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999506836636627	WITHOUT_CLASSIFICATION	4.9316336337420216E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999665020723439	WITHOUT_CLASSIFICATION	3.349792765606088E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9996235703739176	WITHOUT_CLASSIFICATION	3.764296260824548E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767911558866	WITHOUT_CLASSIFICATION	2.3208844113425654E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767911558866	WITHOUT_CLASSIFICATION	2.3208844113425654E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9984600962845276	WITHOUT_CLASSIFICATION	0.0015399037154723992	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999995463493764	WITHOUT_CLASSIFICATION	4.536506236052572E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998545358531562	WITHOUT_CLASSIFICATION	1.4546414684376286E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998545358531562	WITHOUT_CLASSIFICATION	1.4546414684376286E-4	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997654688017588	WITHOUT_CLASSIFICATION	2.3453119824135983E-4	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996733919832992	WITHOUT_CLASSIFICATION	3.266080167008419E-4	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9946605671497398	WITHOUT_CLASSIFICATION	0.00533943285026021	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997907468127004	WITHOUT_CLASSIFICATION	2.0925318729966757E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995514975125334	WITHOUT_CLASSIFICATION	4.4850248746664277E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999856921175169	WITHOUT_CLASSIFICATION	1.4307882483049339E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9997345639135078	WITHOUT_CLASSIFICATION	2.6543608649224416E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997907468127004	WITHOUT_CLASSIFICATION	2.0925318729966757E-4	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9981274465915604	WITHOUT_CLASSIFICATION	0.0018725534084395562	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9969615945853373	WITHOUT_CLASSIFICATION	0.0030384054146627123	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9994844031410329	WITHOUT_CLASSIFICATION	5.155968589670728E-4	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9993720100789559	WITHOUT_CLASSIFICATION	6.279899210440833E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999991811202342	WITHOUT_CLASSIFICATION	8.188797658287951E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996103290280954	WITHOUT_CLASSIFICATION	3.896709719046297E-4	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9876272475735837	WITHOUT_CLASSIFICATION	0.012372752426416441	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999516785908628	WITHOUT_CLASSIFICATION	4.832140913719562E-4	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.99966732866372	WITHOUT_CLASSIFICATION	3.32671336279978E-4	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999745421563835	WITHOUT_CLASSIFICATION	2.545784361651425E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9992518392883416	WITHOUT_CLASSIFICATION	7.481607116584338E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996037483118468	WITHOUT_CLASSIFICATION	3.962516881531373E-4	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9992293709297305	WITHOUT_CLASSIFICATION	7.706290702694139E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9989890732158444	WITHOUT_CLASSIFICATION	0.0010109267841555485	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9991653981608067	WITHOUT_CLASSIFICATION	8.346018391933068E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9997476517287436	WITHOUT_CLASSIFICATION	2.523482712564424E-4	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9993963287408298	WITHOUT_CLASSIFICATION	6.036712591701255E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9767310979250424	WITHOUT_CLASSIFICATION	0.023268902074957586	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9767310979250424	WITHOUT_CLASSIFICATION	0.023268902074957586	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9876272475735837	WITHOUT_CLASSIFICATION	0.012372752426416441	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9658347957604371	WITHOUT_CLASSIFICATION	0.03416520423956287	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9915404892865612	WITHOUT_CLASSIFICATION	0.008459510713438713	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9986344528621954	WITHOUT_CLASSIFICATION	0.0013655471378045108	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999791669619049	WITHOUT_CLASSIFICATION	2.083303809517102E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997669366281595	WITHOUT_CLASSIFICATION	2.3306337184039364E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9990613019014014	WITHOUT_CLASSIFICATION	9.386980985986002E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9998353993916888	WITHOUT_CLASSIFICATION	1.646006083113115E-4	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.997552261904541	WITHOUT_CLASSIFICATION	0.0024477380954589243	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9991276853461949	WITHOUT_CLASSIFICATION	8.72314653805079E-4	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998269682689966	WITHOUT_CLASSIFICATION	1.7303173100336765E-4	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9998753268947483	WITHOUT_CLASSIFICATION	1.2467310525169799E-4	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9993242450745308	WITHOUT_CLASSIFICATION	6.757549254692148E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9984916449840701	WITHOUT_CLASSIFICATION	0.0015083550159298623	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9996187500357593	WITHOUT_CLASSIFICATION	3.8124996424071457E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9989607623842788	WITHOUT_CLASSIFICATION	0.0010392376157212272	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999176461442164	WITHOUT_CLASSIFICATION	8.235385578360628E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999981513734689	WITHOUT_CLASSIFICATION	1.8486265311735056E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9997798211757531	WITHOUT_CLASSIFICATION	2.2017882424687964E-4	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.99919605996318	WITHOUT_CLASSIFICATION	8.039400368201136E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9992942282745124	WITHOUT_CLASSIFICATION	7.057717254876268E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999101881564384	WITHOUT_CLASSIFICATION	8.981184356161478E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999972614113846	WITHOUT_CLASSIFICATION	2.7385886153919903E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9996675219849451	WITHOUT_CLASSIFICATION	3.324780150548506E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9998845545225568	WITHOUT_CLASSIFICATION	1.1544547744320879E-4	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999764306798604	WITHOUT_CLASSIFICATION	2.3569320139611043E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995338927192507	WITHOUT_CLASSIFICATION	4.661072807492588E-4	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999602146488166	WITHOUT_CLASSIFICATION	3.978535118340011E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999536811017479	WITHOUT_CLASSIFICATION	4.6318898252138956E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999044160730135	WITHOUT_CLASSIFICATION	9.558392698640591E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9982492481075264	WITHOUT_CLASSIFICATION	0.0017507518924735686	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9989607623842788	WITHOUT_CLASSIFICATION	0.0010392376157212272	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998891849895816	WITHOUT_CLASSIFICATION	1.1081501041841802E-4	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999931775641895	WITHOUT_CLASSIFICATION	6.822435810500616E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999246102647436	WITHOUT_CLASSIFICATION	7.538973525641637E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9993852861385721	WITHOUT_CLASSIFICATION	6.147138614278009E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9719678544407467	WITHOUT_CLASSIFICATION	0.0280321455592533	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.99988437009188	WITHOUT_CLASSIFICATION	1.1562990812006065E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9997730924519325	WITHOUT_CLASSIFICATION	2.2690754806756517E-4	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995361634927677	WITHOUT_CLASSIFICATION	4.6383650723224744E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9962629260813073	WITHOUT_CLASSIFICATION	0.00373707391869281	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9972624793725189	WITHOUT_CLASSIFICATION	0.0027375206274811658	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997390100857562	WITHOUT_CLASSIFICATION	2.609899142438602E-4	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999983786965813	WITHOUT_CLASSIFICATION	1.6213034187320336E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9983733646630911	WITHOUT_CLASSIFICATION	0.0016266353369088625	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998211065759757	WITHOUT_CLASSIFICATION	1.7889342402438855E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9984287516338625	WITHOUT_CLASSIFICATION	0.0015712483661375343	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9322140331114227	WITHOUT_CLASSIFICATION	0.06778596688857738	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999848803160672	WITHOUT_CLASSIFICATION	1.5119683932771528E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999936120796304	WITHOUT_CLASSIFICATION	6.387920369554537E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9924961863227741	WITHOUT_CLASSIFICATION	0.007503813677225855	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997676489049413	WITHOUT_CLASSIFICATION	2.3235109505869442E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995514975125334	WITHOUT_CLASSIFICATION	4.4850248746664277E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999876196968555	WITHOUT_CLASSIFICATION	1.2380303144654912E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9989607623842788	WITHOUT_CLASSIFICATION	0.0010392376157212272	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9995599653586889	WITHOUT_CLASSIFICATION	4.400346413111211E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999670921362329	WITHOUT_CLASSIFICATION	3.290786376709383E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999699241347157	WITHOUT_CLASSIFICATION	3.007586528430389E-4	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999699241347157	WITHOUT_CLASSIFICATION	3.007586528430389E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9993525134771086	WITHOUT_CLASSIFICATION	6.474865228913544E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999852525921565	WITHOUT_CLASSIFICATION	1.4747407843499557E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993940130362252	WITHOUT_CLASSIFICATION	6.059869637748239E-4	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999576997280738	WITHOUT_CLASSIFICATION	4.2300271926132997E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9989684730617755	WITHOUT_CLASSIFICATION	0.0010315269382245036	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999830999710758	WITHOUT_CLASSIFICATION	1.6900028924169467E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9809458946569558	WITHOUT_CLASSIFICATION	0.019054105343044084	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999422551109425	WITHOUT_CLASSIFICATION	5.774488905748781E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9943682193068222	WITHOUT_CLASSIFICATION	0.005631780693177927	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9943682193068222	WITHOUT_CLASSIFICATION	0.005631780693177927	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999799377128541	WITHOUT_CLASSIFICATION	2.0062287145992502E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9575616054370664	WITHOUT_CLASSIFICATION	0.04243839456293364	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9980831744933961	WITHOUT_CLASSIFICATION	0.0019168255066038407	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999981577583255	WITHOUT_CLASSIFICATION	1.842241674495531E-5	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999992686235033	WITHOUT_CLASSIFICATION	7.313764967035122E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9995493091184446	WITHOUT_CLASSIFICATION	4.506908815554884E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999989102062923	WITHOUT_CLASSIFICATION	1.0897937077371466E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999715582052554	WITHOUT_CLASSIFICATION	2.8441794744563875E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999512081445519	WITHOUT_CLASSIFICATION	4.8791855448122496E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9993930699279077	WITHOUT_CLASSIFICATION	6.069300720924383E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9990061079612995	WITHOUT_CLASSIFICATION	9.938920387004757E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9990061079612995	WITHOUT_CLASSIFICATION	9.938920387004757E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999889486474548	WITHOUT_CLASSIFICATION	1.1051352545204174E-5	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9989409468261595	WITHOUT_CLASSIFICATION	0.0010590531738404957	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999936345608188	WITHOUT_CLASSIFICATION	6.36543918124126E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9992178115790608	WITHOUT_CLASSIFICATION	7.821884209392591E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999882482702481	WITHOUT_CLASSIFICATION	1.1751729751877063E-5	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997744175486234	WITHOUT_CLASSIFICATION	2.2558245137648087E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999857202043971	WITHOUT_CLASSIFICATION	1.4279795602908594E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999470323293733	WITHOUT_CLASSIFICATION	5.2967670626613936E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998903518848806	WITHOUT_CLASSIFICATION	1.0964811511948058E-4	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9996041353049023	WITHOUT_CLASSIFICATION	3.958646950977341E-4	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999664892182535	WITHOUT_CLASSIFICATION	3.351078174650991E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400590045046	WITHOUT_CLASSIFICATION	5.994099549539256E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9992878964960192	WITHOUT_CLASSIFICATION	7.121035039806523E-4	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9990244244373282	WITHOUT_CLASSIFICATION	9.75575562671814E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9989822035026394	WITHOUT_CLASSIFICATION	0.0010177964973605953	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999018802841884	WITHOUT_CLASSIFICATION	9.811971581155261E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.999993669219225	WITHOUT_CLASSIFICATION	6.330780775020989E-6	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9992430901446914	WITHOUT_CLASSIFICATION	7.569098553086258E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992864443725429	WITHOUT_CLASSIFICATION	7.135556274570431E-4	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998159687467861	WITHOUT_CLASSIFICATION	1.8403125321394696E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998154951996489	WITHOUT_CLASSIFICATION	1.8450480035116338E-4	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999606185770227	WITHOUT_CLASSIFICATION	3.938142297729478E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997810501351959	WITHOUT_CLASSIFICATION	2.1894986480421302E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9997033846403132	WITHOUT_CLASSIFICATION	2.9661535968686104E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999477204071769	WITHOUT_CLASSIFICATION	5.227959282309847E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9872742359678447	WITHOUT_CLASSIFICATION	0.012725764032155251	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999418033902545	WITHOUT_CLASSIFICATION	5.819660974553568E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9985386772260392	WITHOUT_CLASSIFICATION	0.0014613227739608884	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9921904547463793	WITHOUT_CLASSIFICATION	0.007809545253620573	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9996671883070158	WITHOUT_CLASSIFICATION	3.3281169298413977E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999850218470137	WITHOUT_CLASSIFICATION	1.4978152986294438E-4	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999955296117968	WITHOUT_CLASSIFICATION	4.470388203191588E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9995437851382399	WITHOUT_CLASSIFICATION	4.5621486176004877E-4	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929844927053861	WITHOUT_CLASSIFICATION	0.0070155072946138635	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9996721414580656	WITHOUT_CLASSIFICATION	3.2785854193438516E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998731450400206	WITHOUT_CLASSIFICATION	1.2685495997948886E-4	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997071927835282	WITHOUT_CLASSIFICATION	2.928072164717541E-4	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9991526578617123	WITHOUT_CLASSIFICATION	8.473421382877011E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998709738804499	WITHOUT_CLASSIFICATION	1.2902611955015723E-4	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999303732468814	WITHOUT_CLASSIFICATION	6.962675311858976E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9988027103619841	WITHOUT_CLASSIFICATION	0.0011972896380158561	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9978802360754306	WITHOUT_CLASSIFICATION	0.0021197639245693653	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9993838664614039	WITHOUT_CLASSIFICATION	6.161335385960352E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9970946392189592	WITHOUT_CLASSIFICATION	0.002905360781040686	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999979184329712	WITHOUT_CLASSIFICATION	2.081567028791924E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999681662052643	WITHOUT_CLASSIFICATION	3.18337947357051E-4	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9992010905637575	WITHOUT_CLASSIFICATION	7.989094362424785E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999393194955994	WITHOUT_CLASSIFICATION	6.068050440060922E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9996043957757604	WITHOUT_CLASSIFICATION	3.95604224239489E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996684696551159	WITHOUT_CLASSIFICATION	3.3153034488410914E-4	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998952509771806	WITHOUT_CLASSIFICATION	1.047490228194523E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9993112110071933	WITHOUT_CLASSIFICATION	6.887889928066968E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999231885735431	WITHOUT_CLASSIFICATION	7.681142645689632E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9993112110071933	WITHOUT_CLASSIFICATION	6.887889928066968E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9995356072887084	WITHOUT_CLASSIFICATION	4.6439271129171205E-4	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997195406864207	WITHOUT_CLASSIFICATION	2.8045931357934694E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9964142801036653	WITHOUT_CLASSIFICATION	0.003585719896334799	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998505124288412	WITHOUT_CLASSIFICATION	1.4948757115880129E-4	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9996785040338122	WITHOUT_CLASSIFICATION	3.214959661878129E-4	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9964142801036653	WITHOUT_CLASSIFICATION	0.003585719896334799	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998427991314222	WITHOUT_CLASSIFICATION	1.57200868577839E-4	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.998336241973613	WITHOUT_CLASSIFICATION	0.0016637580263869575	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999719473668864	WITHOUT_CLASSIFICATION	2.8052633113590474E-4	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9984493128869658	WITHOUT_CLASSIFICATION	0.0015506871130341728	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9963137166969878	WITHOUT_CLASSIFICATION	0.0036862833030122583	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999194142478799	WITHOUT_CLASSIFICATION	8.058575212010497E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9997019674579167	WITHOUT_CLASSIFICATION	2.980325420832328E-4	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7610887042115034	WITHOUT_CLASSIFICATION	0.23891129578849662	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.998785577620607	WITHOUT_CLASSIFICATION	0.0012144223793930048	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996469859717806	WITHOUT_CLASSIFICATION	3.530140282193814E-4	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999294551412033	WITHOUT_CLASSIFICATION	7.054485879659639E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9995645448199995	WITHOUT_CLASSIFICATION	4.3545518000055126E-4	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999845505346839	WITHOUT_CLASSIFICATION	1.5449465316101894E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9992572571362895	WITHOUT_CLASSIFICATION	7.427428637104982E-4	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999989522361856	WITHOUT_CLASSIFICATION	1.0477638143889929E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9989785304275125	WITHOUT_CLASSIFICATION	0.0010214695724874874	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998933002237307	WITHOUT_CLASSIFICATION	1.0669977626926639E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999254525876237	WITHOUT_CLASSIFICATION	7.454741237629849E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9992020490332006	WITHOUT_CLASSIFICATION	7.979509667993682E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999861550728106	WITHOUT_CLASSIFICATION	1.3844927189415435E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9994544108648705	WITHOUT_CLASSIFICATION	5.455891351295009E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9981720667478559	WITHOUT_CLASSIFICATION	0.0018279332521440993	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9892012423990736	WITHOUT_CLASSIFICATION	0.010798757600926464	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997015410461522	WITHOUT_CLASSIFICATION	2.9845895384786553E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999997964882597	WITHOUT_CLASSIFICATION	2.0351174029168973E-7	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9983763851088779	WITHOUT_CLASSIFICATION	0.001623614891122039	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9978095702560618	WITHOUT_CLASSIFICATION	0.002190429743938246	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9995081644703382	WITHOUT_CLASSIFICATION	4.918355296618415E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9995755390395143	WITHOUT_CLASSIFICATION	4.2446096048566305E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9924600503696686	WITHOUT_CLASSIFICATION	0.007539949630331384	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999861550728106	WITHOUT_CLASSIFICATION	1.3844927189415435E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999987966785791	WITHOUT_CLASSIFICATION	1.2033214209016258E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999314997115801	WITHOUT_CLASSIFICATION	6.8500288419914E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9959784418858121	WITHOUT_CLASSIFICATION	0.004021558114187822	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9976270677885835	WITHOUT_CLASSIFICATION	0.002372932211416546	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9998361634672254	WITHOUT_CLASSIFICATION	1.6383653277462904E-4	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999979453263861	WITHOUT_CLASSIFICATION	2.054673613982991E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999201900353968	WITHOUT_CLASSIFICATION	7.980996460318023E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9992019748131018	WITHOUT_CLASSIFICATION	7.980251868981629E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999765932022391	WITHOUT_CLASSIFICATION	2.34067977609012E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9990026392913208	WITHOUT_CLASSIFICATION	9.973607086792109E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999760590053831	WITHOUT_CLASSIFICATION	2.3940994616938965E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999332604140104	WITHOUT_CLASSIFICATION	6.673958598960164E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999868513126937	WITHOUT_CLASSIFICATION	1.3148687306297258E-4	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9994955385567384	WITHOUT_CLASSIFICATION	5.044614432615321E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9995277848100271	WITHOUT_CLASSIFICATION	4.7221518997285993E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999399245329276	WITHOUT_CLASSIFICATION	6.007546707239693E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9652135138608378	WITHOUT_CLASSIFICATION	0.03478648613916219	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9974973909977308	WITHOUT_CLASSIFICATION	0.0025026090022691565	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9931596584156624	WITHOUT_CLASSIFICATION	0.006840341584337541	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997884918972519	WITHOUT_CLASSIFICATION	2.1150810274805438E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9821624992686561	WITHOUT_CLASSIFICATION	0.017837500731343953	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9821624992686561	WITHOUT_CLASSIFICATION	0.017837500731343953	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998633788460879	WITHOUT_CLASSIFICATION	1.3662115391216415E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9821624992686561	WITHOUT_CLASSIFICATION	0.017837500731343953	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9821624992686561	WITHOUT_CLASSIFICATION	0.017837500731343953	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999113063713102	WITHOUT_CLASSIFICATION	8.869362868979623E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9963220879755185	WITHOUT_CLASSIFICATION	0.003677912024481644	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9968545944577893	WITHOUT_CLASSIFICATION	0.003145405542210585	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9485727187185878	WITHOUT_CLASSIFICATION	0.051427281281412114	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994822476155308	WITHOUT_CLASSIFICATION	5.17752384469128E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999899955659062	WITHOUT_CLASSIFICATION	1.0004434093749158E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9981444985159005	WITHOUT_CLASSIFICATION	0.0018555014840995149	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9956561176547818	WITHOUT_CLASSIFICATION	0.004343882345218234	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9989988012078987	WITHOUT_CLASSIFICATION	0.0010011987921012648	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989748958970502	WITHOUT_CLASSIFICATION	0.0010251041029497483	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9990268303500642	WITHOUT_CLASSIFICATION	9.731696499358423E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997371243712869	WITHOUT_CLASSIFICATION	2.6287562871298253E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9985964328358488	WITHOUT_CLASSIFICATION	0.0014035671641511643	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9994973225270755	WITHOUT_CLASSIFICATION	5.02677472924561E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999793157433036	WITHOUT_CLASSIFICATION	2.068425669639505E-4	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9991109005725168	WITHOUT_CLASSIFICATION	8.890994274831379E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9986933305226813	WITHOUT_CLASSIFICATION	0.0013066694773187946	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.99895655453822	WITHOUT_CLASSIFICATION	0.0010434454617800684	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9993629085208656	WITHOUT_CLASSIFICATION	6.370914791343022E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9987566237684128	WITHOUT_CLASSIFICATION	0.001243376231587259	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999793157433036	WITHOUT_CLASSIFICATION	2.068425669639505E-4	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9994544108648705	WITHOUT_CLASSIFICATION	5.455891351295009E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9974945976253997	WITHOUT_CLASSIFICATION	0.002505402374600307	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993239974724991	WITHOUT_CLASSIFICATION	6.760025275007789E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988980563884307	WITHOUT_CLASSIFICATION	0.0011019436115693908	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9979379389133811	WITHOUT_CLASSIFICATION	0.002062061086618937	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9997935717254446	WITHOUT_CLASSIFICATION	2.0642827455543192E-4	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9970644897351554	WITHOUT_CLASSIFICATION	0.0029355102648445266	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999226055812676	WITHOUT_CLASSIFICATION	7.739441873247423E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997331211155231	WITHOUT_CLASSIFICATION	2.6687888447678236E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998033929863395	WITHOUT_CLASSIFICATION	1.9660701366058122E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.997772821480814	WITHOUT_CLASSIFICATION	0.0022271785191860494	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9996161067228448	WITHOUT_CLASSIFICATION	3.8389327715510866E-4	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9989504227863452	WITHOUT_CLASSIFICATION	0.0010495772136548483	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9974430027674637	WITHOUT_CLASSIFICATION	0.002556997232536389	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9798434119116085	WITHOUT_CLASSIFICATION	0.02015658808839149	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9995495480205502	WITHOUT_CLASSIFICATION	4.504519794497397E-4	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9982308183985166	WITHOUT_CLASSIFICATION	0.0017691816014834718	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9981507630937397	WITHOUT_CLASSIFICATION	0.0018492369062602925	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9995376080327095	WITHOUT_CLASSIFICATION	4.6239196729048294E-4	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9994356187947203	WITHOUT_CLASSIFICATION	5.643812052796383E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998205562872381	WITHOUT_CLASSIFICATION	1.7944371276200583E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9990157461050145	WITHOUT_CLASSIFICATION	9.842538949855213E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999527742271409	WITHOUT_CLASSIFICATION	4.7225772858986033E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997331211155231	WITHOUT_CLASSIFICATION	2.6687888447678236E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9978568850849624	WITHOUT_CLASSIFICATION	0.0021431149150375035	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9988196834127472	WITHOUT_CLASSIFICATION	0.0011803165872528282	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9983821294949815	WITHOUT_CLASSIFICATION	0.0016178705050185604	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9996057902439627	WITHOUT_CLASSIFICATION	3.9420975603736994E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9979112959936597	WITHOUT_CLASSIFICATION	0.002088704006340253	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9963625619893628	WITHOUT_CLASSIFICATION	0.003637438010637138	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9967541185276265	WITHOUT_CLASSIFICATION	0.0032458814723734957	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9963625619893628	WITHOUT_CLASSIFICATION	0.003637438010637138	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9967252256193004	WITHOUT_CLASSIFICATION	0.0032747743806996687	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994766302833926	WITHOUT_CLASSIFICATION	5.233697166073447E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998753148611776	WITHOUT_CLASSIFICATION	1.24685138822424E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9993308093126363	WITHOUT_CLASSIFICATION	6.691906873636816E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9990357988576576	WITHOUT_CLASSIFICATION	9.642011423424204E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997586587797122	WITHOUT_CLASSIFICATION	2.4134122028778569E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995145034573512	WITHOUT_CLASSIFICATION	4.854965426487404E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994766302833926	WITHOUT_CLASSIFICATION	5.233697166073447E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998309521330426	WITHOUT_CLASSIFICATION	1.6904786695729577E-4	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999525209345415	WITHOUT_CLASSIFICATION	4.7479065458569064E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9990820086548573	WITHOUT_CLASSIFICATION	9.179913451426681E-4	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9989349517801239	WITHOUT_CLASSIFICATION	0.001065048219876043	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9988811999202181	WITHOUT_CLASSIFICATION	0.0011188000797819149	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9928838597149807	WITHOUT_CLASSIFICATION	0.0071161402850192885	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9993020956793421	WITHOUT_CLASSIFICATION	6.979043206577487E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995266381972459	WITHOUT_CLASSIFICATION	4.733618027541223E-4	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995178394357874	WITHOUT_CLASSIFICATION	4.821605642125865E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978420849102946	WITHOUT_CLASSIFICATION	0.0021579150897053545	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978420849102946	WITHOUT_CLASSIFICATION	0.0021579150897053545	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978420849102946	WITHOUT_CLASSIFICATION	0.0021579150897053545	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996068979543007	WITHOUT_CLASSIFICATION	3.931020456992635E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996068979543007	WITHOUT_CLASSIFICATION	3.931020456992635E-4	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.99996802292146	WITHOUT_CLASSIFICATION	3.1977078539968185E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999073353986414	WITHOUT_CLASSIFICATION	9.266460135856949E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9986716307400202	WITHOUT_CLASSIFICATION	0.0013283692599798445	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9985938716912627	WITHOUT_CLASSIFICATION	0.0014061283087372888	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9222037677952484	WITHOUT_CLASSIFICATION	0.0777962322047516	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999387828858172	WITHOUT_CLASSIFICATION	6.12171141827952E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996608070188142	WITHOUT_CLASSIFICATION	3.391929811857438E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999204154941368	WITHOUT_CLASSIFICATION	7.95845058631524E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997360773726777	WITHOUT_CLASSIFICATION	2.639226273223559E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999387828858172	WITHOUT_CLASSIFICATION	6.12171141827952E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996608070188142	WITHOUT_CLASSIFICATION	3.391929811857438E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998885192989505	WITHOUT_CLASSIFICATION	1.1148070104948192E-4	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998520414872427	WITHOUT_CLASSIFICATION	1.479585127573643E-4	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999369795011999	WITHOUT_CLASSIFICATION	6.302049880010245E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999757191292173	WITHOUT_CLASSIFICATION	2.42808707826434E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995259808004618	WITHOUT_CLASSIFICATION	4.7401919953816014E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.99986859870961	WITHOUT_CLASSIFICATION	1.314012903900098E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9996598956798668	WITHOUT_CLASSIFICATION	3.4010432013321126E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998585391821433	WITHOUT_CLASSIFICATION	1.4146081785675936E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9993272418624037	WITHOUT_CLASSIFICATION	6.727581375962223E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998542665468565	WITHOUT_CLASSIFICATION	1.4573345314340737E-4	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993227588559604	WITHOUT_CLASSIFICATION	6.772411440396663E-4	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9994920161038382	WITHOUT_CLASSIFICATION	5.079838961618805E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9992398141912017	WITHOUT_CLASSIFICATION	7.601858087984151E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9997849127630232	WITHOUT_CLASSIFICATION	2.1508723697669324E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996775091248518	WITHOUT_CLASSIFICATION	3.2249087514820795E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998260090387333	WITHOUT_CLASSIFICATION	1.7399096126657156E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999021694201673	WITHOUT_CLASSIFICATION	9.783057983270705E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.995143018673272	WITHOUT_CLASSIFICATION	0.0048569813267279605	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999403380957522	WITHOUT_CLASSIFICATION	5.9661904247647026E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9998983212260962	WITHOUT_CLASSIFICATION	1.0167877390377507E-4	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9405825025349552	WITHOUT_CLASSIFICATION	0.05941749746504483	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9997611853570513	WITHOUT_CLASSIFICATION	2.3881464294884437E-4	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993799590973109	WITHOUT_CLASSIFICATION	6.200409026891985E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990806308960393	WITHOUT_CLASSIFICATION	9.193691039607964E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993032640372913	WITHOUT_CLASSIFICATION	6.967359627087505E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993032640372913	WITHOUT_CLASSIFICATION	6.967359627087505E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9993900997961946	WITHOUT_CLASSIFICATION	6.099002038053875E-4	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9996460820194922	WITHOUT_CLASSIFICATION	3.5391798050785203E-4	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9866468852087691	WITHOUT_CLASSIFICATION	0.01335311479123094	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9982882416996832	WITHOUT_CLASSIFICATION	0.0017117583003168001	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999764309991747	WITHOUT_CLASSIFICATION	2.356900082539946E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999595597583048	WITHOUT_CLASSIFICATION	4.0440241695291106E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9997719539899562	WITHOUT_CLASSIFICATION	2.2804601004387042E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9970989988522981	WITHOUT_CLASSIFICATION	0.0029010011477018827	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9846996402273509	WITHOUT_CLASSIFICATION	0.01530035977264905	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9996662179021402	WITHOUT_CLASSIFICATION	3.337820978597735E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994899530964682	WITHOUT_CLASSIFICATION	5.100469035318524E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9997890246077552	WITHOUT_CLASSIFICATION	2.1097539224488573E-4	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999878310266785	WITHOUT_CLASSIFICATION	1.2168973321561079E-5	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9978220778920903	WITHOUT_CLASSIFICATION	0.0021779221079096037	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9994378947335936	WITHOUT_CLASSIFICATION	5.621052664064201E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9992976870472455	WITHOUT_CLASSIFICATION	7.023129527545019E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994899530964682	WITHOUT_CLASSIFICATION	5.100469035318524E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994899530964682	WITHOUT_CLASSIFICATION	5.100469035318524E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9992732951203068	WITHOUT_CLASSIFICATION	7.267048796931328E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999650129107432	WITHOUT_CLASSIFICATION	3.498708925672219E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9647673653860652	WITHOUT_CLASSIFICATION	0.03523263461393478	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999552198501954	WITHOUT_CLASSIFICATION	4.478014980468731E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999830501595339	WITHOUT_CLASSIFICATION	1.6949840466066456E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996775091248518	WITHOUT_CLASSIFICATION	3.2249087514820795E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9981949377141928	WITHOUT_CLASSIFICATION	0.001805062285807325	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996908435621599	WITHOUT_CLASSIFICATION	3.091564378400981E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9996649019473194	WITHOUT_CLASSIFICATION	3.350980526807091E-4	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979787676130882	WITHOUT_CLASSIFICATION	0.002021232386911771	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999281203511593	WITHOUT_CLASSIFICATION	7.187964884077455E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994163091091404	WITHOUT_CLASSIFICATION	5.836908908597404E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9994619812929076	WITHOUT_CLASSIFICATION	5.380187070924275E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9994619812929076	WITHOUT_CLASSIFICATION	5.380187070924275E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9994619812929076	WITHOUT_CLASSIFICATION	5.380187070924275E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9994619812929076	WITHOUT_CLASSIFICATION	5.380187070924275E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99951316747209	WITHOUT_CLASSIFICATION	4.868325279100188E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9996141984061337	WITHOUT_CLASSIFICATION	3.8580159386616367E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999749875932299	WITHOUT_CLASSIFICATION	2.50124067700999E-4	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999760815296194	WITHOUT_CLASSIFICATION	2.3918470380650273E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993890531700674	WITHOUT_CLASSIFICATION	6.109468299324845E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991666988215305	WITHOUT_CLASSIFICATION	8.333011784694644E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9994696805878855	WITHOUT_CLASSIFICATION	5.303194121144315E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998926287789456	WITHOUT_CLASSIFICATION	1.0737122105443876E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999878078235257	WITHOUT_CLASSIFICATION	1.2192176474386075E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9994938727845715	WITHOUT_CLASSIFICATION	5.061272154285281E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9983525828916122	WITHOUT_CLASSIFICATION	0.0016474171083878315	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9992993736695461	WITHOUT_CLASSIFICATION	7.006263304538967E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9968848822584081	WITHOUT_CLASSIFICATION	0.0031151177415918714	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9983698820296418	WITHOUT_CLASSIFICATION	0.0016301179703581451	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9983698820296418	WITHOUT_CLASSIFICATION	0.0016301179703581451	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998042013396082	WITHOUT_CLASSIFICATION	1.9579866039174526E-4	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998347954943947	WITHOUT_CLASSIFICATION	1.652045056052423E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999755755180877	WITHOUT_CLASSIFICATION	2.442448191234567E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999879341422607	WITHOUT_CLASSIFICATION	1.2065857739298456E-4	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978420849102946	WITHOUT_CLASSIFICATION	0.0021579150897053545	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9751369161690485	WITHOUT_CLASSIFICATION	0.024863083830951482	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9995883429654405	WITHOUT_CLASSIFICATION	4.1165703455939593E-4	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997766866035492	WITHOUT_CLASSIFICATION	2.2331339645075365E-4	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9987411668463174	WITHOUT_CLASSIFICATION	0.0012588331536825803	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999832378656014	WITHOUT_CLASSIFICATION	1.6762134398587878E-4	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9958802906845559	WITHOUT_CLASSIFICATION	0.004119709315444147	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9985641155802912	WITHOUT_CLASSIFICATION	0.0014358844197086885	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998989505846965	WITHOUT_CLASSIFICATION	0.001010494153034974	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.998915556083092	WITHOUT_CLASSIFICATION	0.0010844439169080129	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9988087237190463	WITHOUT_CLASSIFICATION	0.001191276280953725	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9996331007733148	WITHOUT_CLASSIFICATION	3.668992266851861E-4	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999998547886754	WITHOUT_CLASSIFICATION	1.452113246078796E-6	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999965032187185	WITHOUT_CLASSIFICATION	3.496781281500431E-5	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999749493219975	WITHOUT_CLASSIFICATION	2.5050678002415837E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999984854134295	WITHOUT_CLASSIFICATION	1.5145865704371218E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9996363490983825	WITHOUT_CLASSIFICATION	3.6365090161753034E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9977008653940338	WITHOUT_CLASSIFICATION	0.002299134605966277	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999810573357586	WITHOUT_CLASSIFICATION	1.8942664241424392E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9993933055725911	WITHOUT_CLASSIFICATION	6.066944274088637E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999942858733852	WITHOUT_CLASSIFICATION	5.71412661476567E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999923244584584	WITHOUT_CLASSIFICATION	7.675541541595185E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999625092768054	WITHOUT_CLASSIFICATION	3.7490723194596726E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9995695656163037	WITHOUT_CLASSIFICATION	4.304343836962445E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999133409629087	WITHOUT_CLASSIFICATION	8.665903709125721E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.6395967855743979	WITHOUT_CLASSIFICATION	0.36040321442560214	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9723156799464189	WITHOUT_CLASSIFICATION	0.027684320053581204	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9936803541755143	WITHOUT_CLASSIFICATION	0.006319645824485763	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9986803809399609	WITHOUT_CLASSIFICATION	0.0013196190600390505	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999048023470714	WITHOUT_CLASSIFICATION	9.519765292874242E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997764110863889	WITHOUT_CLASSIFICATION	2.235889136111576E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999887430377491	WITHOUT_CLASSIFICATION	1.1256962250906338E-4	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9994457387756992	WITHOUT_CLASSIFICATION	5.542612243007371E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9934933981853336	WITHOUT_CLASSIFICATION	0.006506601814666528	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999060371476525	WITHOUT_CLASSIFICATION	9.396285234743134E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999459565131715	WITHOUT_CLASSIFICATION	5.404348682834118E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9994060940856606	WITHOUT_CLASSIFICATION	5.939059143393475E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998926073611278	WITHOUT_CLASSIFICATION	1.0739263887218656E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997807388043048	WITHOUT_CLASSIFICATION	2.1926119569505491E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995901205773174	WITHOUT_CLASSIFICATION	4.098794226826347E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999748055039548	WITHOUT_CLASSIFICATION	2.5194496045204048E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9996009965916082	WITHOUT_CLASSIFICATION	3.990034083919157E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9969769109085103	WITHOUT_CLASSIFICATION	0.003023089091489674	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9981581572676214	WITHOUT_CLASSIFICATION	0.0018418427323786224	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9985308901111628	WITHOUT_CLASSIFICATION	0.0014691098888372377	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9983391249600596	WITHOUT_CLASSIFICATION	0.0016608750399403685	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9990853547893163	WITHOUT_CLASSIFICATION	9.146452106837313E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9964306598348992	WITHOUT_CLASSIFICATION	0.0035693401651007875	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9971328140648101	WITHOUT_CLASSIFICATION	0.002867185935189783	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998692222501429	WITHOUT_CLASSIFICATION	1.3077774985717337E-4	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9988042849660592	WITHOUT_CLASSIFICATION	0.0011957150339407645	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9992922588972357	WITHOUT_CLASSIFICATION	7.077411027642591E-4	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997704851628231	WITHOUT_CLASSIFICATION	2.295148371770003E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999889523668946	WITHOUT_CLASSIFICATION	1.104763310544181E-5	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9991532438143124	WITHOUT_CLASSIFICATION	8.467561856877082E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998605743875961	WITHOUT_CLASSIFICATION	1.3942561240390448E-4	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999799308354212	WITHOUT_CLASSIFICATION	2.0069164578705238E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999579324919183	WITHOUT_CLASSIFICATION	4.206750808177862E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9995225111414241	WITHOUT_CLASSIFICATION	4.774888585759192E-4	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.8657904900738542	WITHOUT_CLASSIFICATION	0.1342095099261458	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9973390717819032	WITHOUT_CLASSIFICATION	0.002660928218096793	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999320913413017	WITHOUT_CLASSIFICATION	6.790865869831546E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9989561618175582	WITHOUT_CLASSIFICATION	0.0010438381824417402	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9987071989264584	WITHOUT_CLASSIFICATION	0.001292801073541562	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9911255059919215	WITHOUT_CLASSIFICATION	0.008874494008078519	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999767409702206	WITHOUT_CLASSIFICATION	2.3259029779389723E-4	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9986851141587176	WITHOUT_CLASSIFICATION	0.001314885841282364	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9998045756532553	WITHOUT_CLASSIFICATION	1.954243467446129E-4	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999655322185684	WITHOUT_CLASSIFICATION	3.4467781431598757E-4	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998883335289739	WITHOUT_CLASSIFICATION	1.1166647102613473E-4	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9966557382473867	WITHOUT_CLASSIFICATION	0.003344261752613359	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997063296525899	WITHOUT_CLASSIFICATION	2.936703474101383E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9986687051038211	WITHOUT_CLASSIFICATION	0.00133129489617889	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.949741083091099	IMPLEMENTATION	0.050258916908901115	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9989785304275125	WITHOUT_CLASSIFICATION	0.0010214695724874874	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9466048131805492	WITHOUT_CLASSIFICATION	0.05339518681945075	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9973228947638731	WITHOUT_CLASSIFICATION	0.002677105236126962	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.998625001035663	WITHOUT_CLASSIFICATION	0.0013749989643369613	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9947137649862149	WITHOUT_CLASSIFICATION	0.005286235013785141	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.99951981288732	WITHOUT_CLASSIFICATION	4.80187112680057E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9975808016728822	WITHOUT_CLASSIFICATION	0.0024191983271176732	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9975835004543182	WITHOUT_CLASSIFICATION	0.0024164995456817623	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9975602535187021	WITHOUT_CLASSIFICATION	0.002439746481297942	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9993696983704731	WITHOUT_CLASSIFICATION	6.303016295270273E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9994514536148986	WITHOUT_CLASSIFICATION	5.485463851013682E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992878452724608	WITHOUT_CLASSIFICATION	7.121547275392152E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999593183214605	WITHOUT_CLASSIFICATION	4.068167853964721E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9926649231737982	WITHOUT_CLASSIFICATION	0.007335076826201813	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999484130459013	WITHOUT_CLASSIFICATION	5.158695409866819E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9996850345627907	WITHOUT_CLASSIFICATION	3.1496543720932756E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9981661604545013	WITHOUT_CLASSIFICATION	0.0018338395454986776	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999251778548639	WITHOUT_CLASSIFICATION	7.482214513605943E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999251778548639	WITHOUT_CLASSIFICATION	7.482214513605943E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9996799669261021	WITHOUT_CLASSIFICATION	3.2003307389797894E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9914817794603488	WITHOUT_CLASSIFICATION	0.008518220539651148	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9993841288914374	WITHOUT_CLASSIFICATION	6.158711085626063E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998757554274661	WITHOUT_CLASSIFICATION	1.242445725338231E-4	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998524151539459	WITHOUT_CLASSIFICATION	1.4758484605412284E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994910078648235	WITHOUT_CLASSIFICATION	5.089921351765159E-4	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998114137966164	WITHOUT_CLASSIFICATION	1.885862033835535E-4	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999729264733409	WITHOUT_CLASSIFICATION	2.7073526659189556E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.505878680131798	IMPLEMENTATION	0.49412131986820196	WITHOUT_CLASSIFICATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999852153396287	WITHOUT_CLASSIFICATION	1.4784660371442682E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999958282795659	WITHOUT_CLASSIFICATION	4.171720434179351E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.995002721037271	WITHOUT_CLASSIFICATION	0.004997278962728887	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999820657014915	WITHOUT_CLASSIFICATION	1.7934298508564595E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996611480125476	WITHOUT_CLASSIFICATION	3.3885198745246266E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9995390369695847	WITHOUT_CLASSIFICATION	4.6096303041520746E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9913677901137091	IMPLEMENTATION	0.008632209886290905	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9913677901137091	IMPLEMENTATION	0.008632209886290905	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9991346189939166	WITHOUT_CLASSIFICATION	8.653810060833806E-4	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997610568401192	WITHOUT_CLASSIFICATION	2.389431598807618E-4	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9988606229130532	WITHOUT_CLASSIFICATION	0.0011393770869467914	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999815843293517	WITHOUT_CLASSIFICATION	1.8415670648306732E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9996957094115155	WITHOUT_CLASSIFICATION	3.042905884844753E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9991269979785237	WITHOUT_CLASSIFICATION	8.730020214763951E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9991269979785237	WITHOUT_CLASSIFICATION	8.730020214763951E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9996954833551025	WITHOUT_CLASSIFICATION	3.045166448974607E-4	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9925357213581724	WITHOUT_CLASSIFICATION	0.007464278641827625	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9958946887340177	WITHOUT_CLASSIFICATION	0.004105311265982399	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999623778745	WITHOUT_CLASSIFICATION	3.7622125513751384E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9978870091386006	WITHOUT_CLASSIFICATION	0.00211299086139937	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998666888876354	WITHOUT_CLASSIFICATION	1.3331111236457367E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9969893962632004	WITHOUT_CLASSIFICATION	0.0030106037367996397	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991251370329252	WITHOUT_CLASSIFICATION	8.748629670748625E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997211381676806	WITHOUT_CLASSIFICATION	2.788618323194516E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9998624025322246	WITHOUT_CLASSIFICATION	1.3759746777542806E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9980010179835163	WITHOUT_CLASSIFICATION	0.0019989820164837712	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999627267345191	WITHOUT_CLASSIFICATION	3.727326548097529E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998409764272451	WITHOUT_CLASSIFICATION	1.590235727549307E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9989822035026394	WITHOUT_CLASSIFICATION	0.0010177964973605953	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.998389258496322	WITHOUT_CLASSIFICATION	0.0016107415036780508	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9995204106767444	WITHOUT_CLASSIFICATION	4.795893232555722E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999641090450208	WITHOUT_CLASSIFICATION	3.5890954979188166E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.998685188667585	WITHOUT_CLASSIFICATION	0.0013148113324150024	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9996247314091681	WITHOUT_CLASSIFICATION	3.752685908319835E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997395129258564	WITHOUT_CLASSIFICATION	2.6048707414366506E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9944411800396348	WITHOUT_CLASSIFICATION	0.005558819960365142	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9941111897905432	WITHOUT_CLASSIFICATION	0.005888810209456721	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9994170681802609	WITHOUT_CLASSIFICATION	5.829318197391314E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995081654366477	WITHOUT_CLASSIFICATION	4.918345633523994E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.8875282921742456	WITHOUT_CLASSIFICATION	0.1124717078257545	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999635331286417	WITHOUT_CLASSIFICATION	3.646687135822343E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9801715142491317	WITHOUT_CLASSIFICATION	0.019828485750868305	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767911558866	WITHOUT_CLASSIFICATION	2.3208844113425654E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996670619519744	WITHOUT_CLASSIFICATION	3.329380480255571E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997909280252981	WITHOUT_CLASSIFICATION	2.0907197470175062E-4	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9825277631634166	WITHOUT_CLASSIFICATION	0.01747223683658338	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9952368852602975	WITHOUT_CLASSIFICATION	0.004763114739702449	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9987422094171634	WITHOUT_CLASSIFICATION	0.001257790582836509	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9972234548353051	WITHOUT_CLASSIFICATION	0.0027765451646948876	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9985996479618785	WITHOUT_CLASSIFICATION	0.0014003520381214458	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994168136598087	WITHOUT_CLASSIFICATION	5.831863401912734E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999825565298628	WITHOUT_CLASSIFICATION	1.7443470137211433E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9990468627798166	WITHOUT_CLASSIFICATION	9.531372201832933E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9987222192569783	WITHOUT_CLASSIFICATION	0.0012777807430216386	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998625117130271	WITHOUT_CLASSIFICATION	1.3748828697285738E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999996691665279	WITHOUT_CLASSIFICATION	3.308334720949392E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9983711176229008	WITHOUT_CLASSIFICATION	0.001628882377099219	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994168136598087	WITHOUT_CLASSIFICATION	5.831863401912734E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9980406101344105	WITHOUT_CLASSIFICATION	0.0019593898655895026	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9988326946364307	WITHOUT_CLASSIFICATION	0.0011673053635694063	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999262677434972	WITHOUT_CLASSIFICATION	7.373225650278267E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9995148695430306	WITHOUT_CLASSIFICATION	4.8513045696937647E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998882535903634	WITHOUT_CLASSIFICATION	1.1174640963655604E-4	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.994052587577924	WITHOUT_CLASSIFICATION	0.005947412422075963	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9990541516083864	WITHOUT_CLASSIFICATION	9.45848391613649E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999768749155733	WITHOUT_CLASSIFICATION	2.312508442673764E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999236759547793	WITHOUT_CLASSIFICATION	7.63240452206405E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9980751711555114	WITHOUT_CLASSIFICATION	0.0019248288444886508	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999594853644147	WITHOUT_CLASSIFICATION	4.051463558518941E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9980751711555114	WITHOUT_CLASSIFICATION	0.0019248288444886508	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998210257241126	WITHOUT_CLASSIFICATION	1.7897427588738692E-4	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9990045894003895	WITHOUT_CLASSIFICATION	9.95410599610457E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998210257241126	WITHOUT_CLASSIFICATION	1.7897427588738692E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978328047960211	WITHOUT_CLASSIFICATION	0.0021671952039787824	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998723642579486	WITHOUT_CLASSIFICATION	1.2763574205145982E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999599944158021	WITHOUT_CLASSIFICATION	4.0005584198037236E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999599944158021	WITHOUT_CLASSIFICATION	4.0005584198037236E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9990215373131425	WITHOUT_CLASSIFICATION	9.78462686857511E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9990350557298441	WITHOUT_CLASSIFICATION	9.649442701559891E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9990215373131425	WITHOUT_CLASSIFICATION	9.78462686857511E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993762227280587	WITHOUT_CLASSIFICATION	6.237772719412928E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.514448239931012	WITHOUT_CLASSIFICATION	0.4855517600689879	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9977095872466568	WITHOUT_CLASSIFICATION	0.002290412753343184	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9993159437995873	WITHOUT_CLASSIFICATION	6.840562004125805E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999750676180885	WITHOUT_CLASSIFICATION	2.493238191157112E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.99886937708449	WITHOUT_CLASSIFICATION	0.0011306229155101377	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9978768375001331	WITHOUT_CLASSIFICATION	0.002123162499866833	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999610420531866	WITHOUT_CLASSIFICATION	3.8957946813400794E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9995390910876722	WITHOUT_CLASSIFICATION	4.609089123278291E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996217452996	WITHOUT_CLASSIFICATION	3.7825470040004397E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999800444972198	WITHOUT_CLASSIFICATION	1.9955502780193138E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995163068666378	WITHOUT_CLASSIFICATION	4.836931333621414E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9984172964696882	WITHOUT_CLASSIFICATION	0.0015827035303116795	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9977111583621944	WITHOUT_CLASSIFICATION	0.002288841637805571	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9910952434133934	WITHOUT_CLASSIFICATION	0.00890475658660655	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9793537093951067	WITHOUT_CLASSIFICATION	0.020646290604893217	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9985498345455593	WITHOUT_CLASSIFICATION	0.0014501654544406674	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9991706814664765	WITHOUT_CLASSIFICATION	8.293185335234298E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9965738053989714	WITHOUT_CLASSIFICATION	0.0034261946010285585	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9986845712061138	WITHOUT_CLASSIFICATION	0.0013154287938862328	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9977095872466568	WITHOUT_CLASSIFICATION	0.002290412753343184	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997017337342333	WITHOUT_CLASSIFICATION	2.982662657666533E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9965873624923764	WITHOUT_CLASSIFICATION	0.003412637507623588	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9919599761595822	WITHOUT_CLASSIFICATION	0.008040023840417694	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9977069119944231	WITHOUT_CLASSIFICATION	0.00229308800557706	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997786710602437	WITHOUT_CLASSIFICATION	2.2132893975641618E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9994991346923857	WITHOUT_CLASSIFICATION	5.008653076142444E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993762227280587	WITHOUT_CLASSIFICATION	6.237772719412928E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993762227280587	WITHOUT_CLASSIFICATION	6.237772719412928E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9951327614204618	WITHOUT_CLASSIFICATION	0.004867238579538134	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9994991346923857	WITHOUT_CLASSIFICATION	5.008653076142444E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9974723932227143	WITHOUT_CLASSIFICATION	0.0025276067772857453	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9977435516340812	WITHOUT_CLASSIFICATION	0.0022564483659187513	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9968764031767907	WITHOUT_CLASSIFICATION	0.003123596823209317	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9920718268759767	WITHOUT_CLASSIFICATION	0.007928173124023354	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999903187745667	WITHOUT_CLASSIFICATION	9.681225433316413E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9995149966082932	WITHOUT_CLASSIFICATION	4.8500339170668365E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998740408001551	WITHOUT_CLASSIFICATION	1.2595919984491026E-4	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9978768375001331	WITHOUT_CLASSIFICATION	0.002123162499866833	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9977552701871782	WITHOUT_CLASSIFICATION	0.002244729812821753	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998740408001551	WITHOUT_CLASSIFICATION	1.2595919984491026E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9988811999202181	WITHOUT_CLASSIFICATION	0.0011188000797819149	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999536403972982	WITHOUT_CLASSIFICATION	4.6359602701839216E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9996996053819441	WITHOUT_CLASSIFICATION	3.003946180559242E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9932819078813557	WITHOUT_CLASSIFICATION	0.006718092118644238	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9989562231947695	WITHOUT_CLASSIFICATION	0.0010437768052305525	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999809023973741	WITHOUT_CLASSIFICATION	1.9097602625890995E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997075505095384	WITHOUT_CLASSIFICATION	2.924494904615275E-4	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999997905062211	WITHOUT_CLASSIFICATION	2.0949377877452915E-7	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9997146691464891	WITHOUT_CLASSIFICATION	2.8533085351090283E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999815327991886	WITHOUT_CLASSIFICATION	1.8467200811411047E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9638207120025964	WITHOUT_CLASSIFICATION	0.03617928799740348	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998740408001551	WITHOUT_CLASSIFICATION	1.2595919984491026E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9989562231947695	WITHOUT_CLASSIFICATION	0.0010437768052305525	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997075505095384	WITHOUT_CLASSIFICATION	2.924494904615275E-4	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9991632679171029	WITHOUT_CLASSIFICATION	8.367320828971364E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9869387803895072	WITHOUT_CLASSIFICATION	0.013061219610492888	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9996722199159287	WITHOUT_CLASSIFICATION	3.27780084071331E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9967398195503732	WITHOUT_CLASSIFICATION	0.0032601804496267474	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9989823770524358	WITHOUT_CLASSIFICATION	0.0010176229475643036	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9988811999202181	WITHOUT_CLASSIFICATION	0.0011188000797819149	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9977096701226926	WITHOUT_CLASSIFICATION	0.002290329877307326	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9966187350164155	WITHOUT_CLASSIFICATION	0.00338126498358445	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.5365792282618976	IMPLEMENTATION	0.4634207717381024	WITHOUT_CLASSIFICATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.5365792282618976	IMPLEMENTATION	0.4634207717381024	WITHOUT_CLASSIFICATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9981149708585462	WITHOUT_CLASSIFICATION	0.0018850291414538789	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978328047960211	WITHOUT_CLASSIFICATION	0.0021671952039787824	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999253258974938	WITHOUT_CLASSIFICATION	7.467410250618518E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999963464531664	WITHOUT_CLASSIFICATION	3.653546833556888E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999002048012982	WITHOUT_CLASSIFICATION	9.979519870189283E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999910252532493	WITHOUT_CLASSIFICATION	8.974746750632934E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999898911303207	WITHOUT_CLASSIFICATION	1.0108869679438088E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9991329262050014	WITHOUT_CLASSIFICATION	8.670737949986213E-4	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9978882430406739	WITHOUT_CLASSIFICATION	0.0021117569593259913	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9996621549614653	WITHOUT_CLASSIFICATION	3.378450385347518E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9996237203449804	WITHOUT_CLASSIFICATION	3.7627965501967623E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9977993437466418	WITHOUT_CLASSIFICATION	0.0022006562533581236	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9995553389046458	WITHOUT_CLASSIFICATION	4.4466109535420744E-4	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9994885753295714	WITHOUT_CLASSIFICATION	5.114246704286328E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996417770955445	WITHOUT_CLASSIFICATION	3.582229044554663E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9964457957555023	WITHOUT_CLASSIFICATION	0.00355420424449764	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9967430511617187	WITHOUT_CLASSIFICATION	0.0032569488382814355	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.997114461341962	WITHOUT_CLASSIFICATION	0.0028855386580380433	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997703545252821	WITHOUT_CLASSIFICATION	2.296454747178986E-4	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9982970705982929	WITHOUT_CLASSIFICATION	0.001702929401707182	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9981904718874033	WITHOUT_CLASSIFICATION	0.0018095281125966912	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999589173086179	WITHOUT_CLASSIFICATION	4.1082691382046704E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998888576548192	WITHOUT_CLASSIFICATION	1.1114234518085356E-4	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9884448368653925	WITHOUT_CLASSIFICATION	0.011555163134607452	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9976960893821086	WITHOUT_CLASSIFICATION	0.0023039106178914443	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9977591089735196	WITHOUT_CLASSIFICATION	0.0022408910264804173	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.998765933416503	WITHOUT_CLASSIFICATION	0.0012340665834969474	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997342190974853	WITHOUT_CLASSIFICATION	2.6578090251469695E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997849127630232	WITHOUT_CLASSIFICATION	2.1508723697669324E-4	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999477169940911	WITHOUT_CLASSIFICATION	5.228300590881812E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9988619592830272	WITHOUT_CLASSIFICATION	0.0011380407169728143	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7707250717674737	IMPLEMENTATION	0.22927492823252626	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9974661958321124	WITHOUT_CLASSIFICATION	0.0025338041678876983	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9987172920818947	WITHOUT_CLASSIFICATION	0.001282707918105193	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9995362609585557	WITHOUT_CLASSIFICATION	4.637390414442822E-4	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9915954026436032	WITHOUT_CLASSIFICATION	0.008404597356396752	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9996639514460488	WITHOUT_CLASSIFICATION	3.3604855395114557E-4	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999745421563835	WITHOUT_CLASSIFICATION	2.545784361651425E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997319443293384	WITHOUT_CLASSIFICATION	2.680556706615564E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999876196968555	WITHOUT_CLASSIFICATION	1.2380303144654912E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996693756983153	WITHOUT_CLASSIFICATION	3.3062430168477125E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996906469465189	WITHOUT_CLASSIFICATION	3.0935305348117116E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997035795416619	WITHOUT_CLASSIFICATION	2.9642045833812276E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9976699211893284	WITHOUT_CLASSIFICATION	0.002330078810671664	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996906469465189	WITHOUT_CLASSIFICATION	3.0935305348117116E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996693756983153	WITHOUT_CLASSIFICATION	3.3062430168477125E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997035795416619	WITHOUT_CLASSIFICATION	2.9642045833812276E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9998649298006292	WITHOUT_CLASSIFICATION	1.3507019937073272E-4	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998746538779215	WITHOUT_CLASSIFICATION	1.2534612207850654E-4	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9953844891100322	WITHOUT_CLASSIFICATION	0.004615510889967769	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9997054648518293	WITHOUT_CLASSIFICATION	2.945351481706844E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999973205902873	WITHOUT_CLASSIFICATION	2.67940971266726E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8311315046542099	IMPLEMENTATION	0.16886849534579004	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.916150308672197	WITHOUT_CLASSIFICATION	0.08384969132780297	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9991901227083037	WITHOUT_CLASSIFICATION	8.098772916962805E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998974273599753	WITHOUT_CLASSIFICATION	1.0257264002466507E-4	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.998534603534421	WITHOUT_CLASSIFICATION	0.0014653964655789648	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9985182014876747	WITHOUT_CLASSIFICATION	0.0014817985123253767	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999678916101704	WITHOUT_CLASSIFICATION	3.210838982959539E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993824158043755	WITHOUT_CLASSIFICATION	6.17584195624576E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9995034668864965	WITHOUT_CLASSIFICATION	4.96533113503482E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9996024110843035	WITHOUT_CLASSIFICATION	3.97588915696546E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9936878438017244	WITHOUT_CLASSIFICATION	0.006312156198275566	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9972353007036793	WITHOUT_CLASSIFICATION	0.002764699296320706	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999948306977384	WITHOUT_CLASSIFICATION	5.1693022616074494E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9986020709324545	WITHOUT_CLASSIFICATION	0.0013979290675455434	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9953452696293079	WITHOUT_CLASSIFICATION	0.004654730370692033	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9957662226575295	WITHOUT_CLASSIFICATION	0.004233777342470606	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9968655893486577	WITHOUT_CLASSIFICATION	0.0031344106513423375	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999400208461995	WITHOUT_CLASSIFICATION	5.997915380049978E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9983935266711801	WITHOUT_CLASSIFICATION	0.0016064733288198192	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9953452696293079	WITHOUT_CLASSIFICATION	0.004654730370692033	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9953452696293079	WITHOUT_CLASSIFICATION	0.004654730370692033	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9984534402138199	WITHOUT_CLASSIFICATION	0.001546559786180218	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9984534402138199	WITHOUT_CLASSIFICATION	0.001546559786180218	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9948376520643768	WITHOUT_CLASSIFICATION	0.005162347935623122	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9972353007036793	WITHOUT_CLASSIFICATION	0.002764699296320706	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9959181869165596	WITHOUT_CLASSIFICATION	0.004081813083440366	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996165469911573	WITHOUT_CLASSIFICATION	3.8345300884264056E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9987755133040257	WITHOUT_CLASSIFICATION	0.0012244866959742991	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9987755133040257	WITHOUT_CLASSIFICATION	0.0012244866959742991	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9993095942311034	WITHOUT_CLASSIFICATION	6.904057688964782E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9853448661100599	WITHOUT_CLASSIFICATION	0.014655133889940171	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9776267605847474	WITHOUT_CLASSIFICATION	0.0223732394152526	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.999655669008319	WITHOUT_CLASSIFICATION	3.443309916809531E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9996626393876187	WITHOUT_CLASSIFICATION	3.373606123813316E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999933212754846	WITHOUT_CLASSIFICATION	6.678724515391392E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997206759413041	WITHOUT_CLASSIFICATION	2.793240586958785E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997008414348733	WITHOUT_CLASSIFICATION	2.99158565126719E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9994805560403599	WITHOUT_CLASSIFICATION	5.19443959640208E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999363788330519	WITHOUT_CLASSIFICATION	6.36211669481448E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9995218546819302	WITHOUT_CLASSIFICATION	4.7814531806972423E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9981027632841477	WITHOUT_CLASSIFICATION	0.0018972367158523109	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9720287990971147	WITHOUT_CLASSIFICATION	0.02797120090288522	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998785917007226	WITHOUT_CLASSIFICATION	1.2140829927750249E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993984448486677	WITHOUT_CLASSIFICATION	6.01555151332317E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9970281588923929	WITHOUT_CLASSIFICATION	0.0029718411076070043	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.8028357765065701	WITHOUT_CLASSIFICATION	0.1971642234934298	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9995701004407518	WITHOUT_CLASSIFICATION	4.298995592482289E-4	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997576873069081	WITHOUT_CLASSIFICATION	2.4231269309187838E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999443225429995	WITHOUT_CLASSIFICATION	5.567745700063553E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9996206099680456	WITHOUT_CLASSIFICATION	3.793900319544976E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999851998780287	WITHOUT_CLASSIFICATION	1.480012197127671E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9989670867832198	WITHOUT_CLASSIFICATION	0.0010329132167802878	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999344673717909	WITHOUT_CLASSIFICATION	6.553262820910699E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997703545252821	WITHOUT_CLASSIFICATION	2.296454747178986E-4	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9994673549808538	WITHOUT_CLASSIFICATION	5.326450191461886E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999942921614589	WITHOUT_CLASSIFICATION	5.707838541137921E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993838148185823	WITHOUT_CLASSIFICATION	6.161851814177543E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9977202664499077	WITHOUT_CLASSIFICATION	0.002279733550092288	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9977202664499077	WITHOUT_CLASSIFICATION	0.002279733550092288	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9991568987766635	WITHOUT_CLASSIFICATION	8.43101223336529E-4	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9982697776051945	WITHOUT_CLASSIFICATION	0.0017302223948054596	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9972553470298904	WITHOUT_CLASSIFICATION	0.002744652970109748	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9972553470298904	WITHOUT_CLASSIFICATION	0.002744652970109748	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9719678544407467	WITHOUT_CLASSIFICATION	0.0280321455592533	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994646069060519	WITHOUT_CLASSIFICATION	5.353930939481914E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9697751036465593	WITHOUT_CLASSIFICATION	0.030224896353440684	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999830501595339	WITHOUT_CLASSIFICATION	1.6949840466066456E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.997772821480814	WITHOUT_CLASSIFICATION	0.0022271785191860494	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997645035008789	WITHOUT_CLASSIFICATION	2.3549649912113415E-4	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9989972010860207	WITHOUT_CLASSIFICATION	0.0010027989139793456	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9980042654669559	WITHOUT_CLASSIFICATION	0.001995734533044053	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9980042654669559	WITHOUT_CLASSIFICATION	0.001995734533044053	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9991024706340756	WITHOUT_CLASSIFICATION	8.975293659244896E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999056241929423	WITHOUT_CLASSIFICATION	9.437580705763035E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999056241929423	WITHOUT_CLASSIFICATION	9.437580705763035E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9987828132778951	WITHOUT_CLASSIFICATION	0.0012171867221049447	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9996673171647458	WITHOUT_CLASSIFICATION	3.3268283525426435E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9994957213311285	WITHOUT_CLASSIFICATION	5.042786688714431E-4	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998607154021372	WITHOUT_CLASSIFICATION	1.3928459786284874E-4	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9966383688212379	WITHOUT_CLASSIFICATION	0.00336163117876211	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999928654370696	WITHOUT_CLASSIFICATION	7.134562930390594E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996089898210732	WITHOUT_CLASSIFICATION	3.9101017892687924E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9983748468596428	WITHOUT_CLASSIFICATION	0.0016251531403572584	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9928949297560206	WITHOUT_CLASSIFICATION	0.007105070243979422	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998639365273068	WITHOUT_CLASSIFICATION	0.0013606347269320303	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9741075321000039	WITHOUT_CLASSIFICATION	0.025892467899996142	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9996180673940256	WITHOUT_CLASSIFICATION	3.819326059743763E-4	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9993274704027588	WITHOUT_CLASSIFICATION	6.725295972410973E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9977288781216085	WITHOUT_CLASSIFICATION	0.0022711218783915132	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9987717097676212	WITHOUT_CLASSIFICATION	0.0012282902323787993	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9990218439237986	WITHOUT_CLASSIFICATION	9.781560762013575E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998721476387049	WITHOUT_CLASSIFICATION	1.2785236129507328E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9987459240312979	WITHOUT_CLASSIFICATION	0.0012540759687020436	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9996028356255691	WITHOUT_CLASSIFICATION	3.9716437443101227E-4	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9653483429459578	WITHOUT_CLASSIFICATION	0.034651657054042086	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9994080841612448	WITHOUT_CLASSIFICATION	5.91915838755074E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9990921869289242	WITHOUT_CLASSIFICATION	9.078130710757933E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999998786206031	WITHOUT_CLASSIFICATION	1.213793968964408E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9380092925472868	IMPLEMENTATION	0.06199070745271329	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999912922364868	WITHOUT_CLASSIFICATION	8.707763513149834E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9990921869289242	WITHOUT_CLASSIFICATION	9.078130710757933E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.7863836786591402	WITHOUT_CLASSIFICATION	0.2136163213408597	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9991477774393929	WITHOUT_CLASSIFICATION	8.522225606070069E-4	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999183534190612	WITHOUT_CLASSIFICATION	8.164658093871765E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996845717934364	WITHOUT_CLASSIFICATION	3.154282065636243E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999547799218731	WITHOUT_CLASSIFICATION	4.5220078126898786E-4	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9955962074348069	WITHOUT_CLASSIFICATION	0.004403792565193152	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9998851370467613	WITHOUT_CLASSIFICATION	1.1486295323872378E-4	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999847849903601	WITHOUT_CLASSIFICATION	1.5215009639901647E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995714427014629	WITHOUT_CLASSIFICATION	4.285572985370399E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999683804563138	WITHOUT_CLASSIFICATION	3.161954368630645E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995714427014629	WITHOUT_CLASSIFICATION	4.285572985370399E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999689432530552	WITHOUT_CLASSIFICATION	3.105674694475622E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995409181474677	WITHOUT_CLASSIFICATION	4.590818525322725E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.613086433915693	IMPLEMENTATION	0.3869135660843071	WITHOUT_CLASSIFICATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999818866394422	WITHOUT_CLASSIFICATION	1.811336055771207E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9994873742148306	WITHOUT_CLASSIFICATION	5.12625785169507E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999904136359008	WITHOUT_CLASSIFICATION	9.586364099279495E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995570879580581	WITHOUT_CLASSIFICATION	4.429120419418845E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999623061457324	WITHOUT_CLASSIFICATION	3.769385426758795E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995570879580581	WITHOUT_CLASSIFICATION	4.429120419418845E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9991435052659546	WITHOUT_CLASSIFICATION	8.564947340453736E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9994035145791142	WITHOUT_CLASSIFICATION	5.964854208857404E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997852122418877	WITHOUT_CLASSIFICATION	2.1478775811247967E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999989784674632	WITHOUT_CLASSIFICATION	1.0215325368033251E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999904136359008	WITHOUT_CLASSIFICATION	9.586364099279495E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999623061457324	WITHOUT_CLASSIFICATION	3.769385426758795E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9991435052659546	WITHOUT_CLASSIFICATION	8.564947340453736E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9977550207735918	WITHOUT_CLASSIFICATION	0.0022449792264082682	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.997839335376364	WITHOUT_CLASSIFICATION	0.0021606646236359156	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.998245845378478	WITHOUT_CLASSIFICATION	0.0017541546215219732	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9968002205262028	WITHOUT_CLASSIFICATION	0.0031997794737972894	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9984239221495269	WITHOUT_CLASSIFICATION	0.0015760778504730747	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999394223815583	WITHOUT_CLASSIFICATION	6.057761844171724E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993984448486677	WITHOUT_CLASSIFICATION	6.01555151332317E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9994035145791142	WITHOUT_CLASSIFICATION	5.964854208857404E-4	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.8692202627658044	WITHOUT_CLASSIFICATION	0.1307797372341956	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9987768632009509	WITHOUT_CLASSIFICATION	0.001223136799049093	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9996679652717909	WITHOUT_CLASSIFICATION	3.320347282090754E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993984448486677	WITHOUT_CLASSIFICATION	6.01555151332317E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9993130531016384	WITHOUT_CLASSIFICATION	6.869468983615771E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993984448486677	WITHOUT_CLASSIFICATION	6.01555151332317E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9996023024183613	WITHOUT_CLASSIFICATION	3.97697581638723E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999477204071769	WITHOUT_CLASSIFICATION	5.227959282309847E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9984948825920517	WITHOUT_CLASSIFICATION	0.001505117407948304	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9952022006638982	WITHOUT_CLASSIFICATION	0.004797799336101869	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999850218470137	WITHOUT_CLASSIFICATION	1.4978152986294438E-4	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9986388427726767	WITHOUT_CLASSIFICATION	0.001361157227323415	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999062577812763	WITHOUT_CLASSIFICATION	9.374221872371284E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997533739292109	WITHOUT_CLASSIFICATION	2.466260707890339E-4	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9960818033373655	WITHOUT_CLASSIFICATION	0.003918196662634444	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9994307991990489	WITHOUT_CLASSIFICATION	5.692008009510478E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998893713159253	WITHOUT_CLASSIFICATION	1.106286840747244E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9994307991990489	WITHOUT_CLASSIFICATION	5.692008009510478E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9979037107769437	WITHOUT_CLASSIFICATION	0.0020962892230562617	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998425796346398	WITHOUT_CLASSIFICATION	1.5742036536004508E-4	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999053865630886	WITHOUT_CLASSIFICATION	9.461343691134652E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998028047711514	WITHOUT_CLASSIFICATION	1.9719522884863104E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9995706839255989	WITHOUT_CLASSIFICATION	4.293160744011051E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999895269668284	WITHOUT_CLASSIFICATION	1.0473033171501737E-5	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997750748159916	WITHOUT_CLASSIFICATION	2.2492518400834424E-4	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994037480575555	WITHOUT_CLASSIFICATION	5.962519424445313E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994037480575555	WITHOUT_CLASSIFICATION	5.962519424445313E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.99976173606069	WITHOUT_CLASSIFICATION	2.382639393099386E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999939444777351	WITHOUT_CLASSIFICATION	6.0555222649107896E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999891465040501	WITHOUT_CLASSIFICATION	1.0853495949960186E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9981699538864945	WITHOUT_CLASSIFICATION	0.001830046113505438	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9990538216696226	WITHOUT_CLASSIFICATION	9.461783303774355E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999970552274431	WITHOUT_CLASSIFICATION	2.944772556955353E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996684696551159	WITHOUT_CLASSIFICATION	3.3153034488410914E-4	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9994178944794633	WITHOUT_CLASSIFICATION	5.821055205366709E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9966244185622952	WITHOUT_CLASSIFICATION	0.003375581437704816	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9985355245342671	WITHOUT_CLASSIFICATION	0.001464475465732888	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9994476342903447	WITHOUT_CLASSIFICATION	5.523657096553074E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998505124288412	WITHOUT_CLASSIFICATION	1.4948757115880129E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9981118108140774	WITHOUT_CLASSIFICATION	0.0018881891859225167	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9915276585986003	WITHOUT_CLASSIFICATION	0.008472341401399838	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9915276585986003	WITHOUT_CLASSIFICATION	0.008472341401399838	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9807414726618302	WITHOUT_CLASSIFICATION	0.019258527338169875	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997533739292109	WITHOUT_CLASSIFICATION	2.466260707890339E-4	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9986807076516561	WITHOUT_CLASSIFICATION	0.0013192923483438836	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9975262804430116	WITHOUT_CLASSIFICATION	0.0024737195569884004	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9984093871497309	WITHOUT_CLASSIFICATION	0.0015906128502690133	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997604214402322	WITHOUT_CLASSIFICATION	2.395785597676714E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9995888843302628	WITHOUT_CLASSIFICATION	4.1111566973712425E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9997980714357005	WITHOUT_CLASSIFICATION	2.0192856429932765E-4	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9990763234310921	WITHOUT_CLASSIFICATION	9.236765689079898E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9993048883495038	WITHOUT_CLASSIFICATION	6.951116504963042E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999962430192699	WITHOUT_CLASSIFICATION	3.7569807299585157E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999645503566017	WITHOUT_CLASSIFICATION	3.54496433982776E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999823810205788	WITHOUT_CLASSIFICATION	1.761897942123645E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.974242105423095	WITHOUT_CLASSIFICATION	0.02575789457690504	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9994530921488741	WITHOUT_CLASSIFICATION	5.469078511259323E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999585437529181	WITHOUT_CLASSIFICATION	4.1456247081901526E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999852922209691	WITHOUT_CLASSIFICATION	1.4707779030896726E-4	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.99662897904728	WITHOUT_CLASSIFICATION	0.00337102095272012	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9961169861312917	WITHOUT_CLASSIFICATION	0.0038830138687081287	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999330047810788	WITHOUT_CLASSIFICATION	6.69952189211578E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999664967760444	WITHOUT_CLASSIFICATION	3.3503223955558214E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9983066232806492	WITHOUT_CLASSIFICATION	0.0016933767193507453	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9996869546883962	WITHOUT_CLASSIFICATION	3.130453116037798E-4	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999393594352345	WITHOUT_CLASSIFICATION	6.064056476549189E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999904803660558	WITHOUT_CLASSIFICATION	9.519633944284877E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9973150837973143	WITHOUT_CLASSIFICATION	0.002684916202685748	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.8499241056377881	WITHOUT_CLASSIFICATION	0.15007589436221203	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9980755108350132	WITHOUT_CLASSIFICATION	0.0019244891649867338	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.996891165649584	WITHOUT_CLASSIFICATION	0.0031088343504160135	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999387828858172	WITHOUT_CLASSIFICATION	6.12171141827952E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9994062751035511	WITHOUT_CLASSIFICATION	5.937248964488095E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9996342071266097	WITHOUT_CLASSIFICATION	3.6579287339040886E-4	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999280043042292	WITHOUT_CLASSIFICATION	7.199569577080345E-4	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9957378125916009	WITHOUT_CLASSIFICATION	0.004262187408399041	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992446716057878	WITHOUT_CLASSIFICATION	7.553283942121381E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9969510076930974	WITHOUT_CLASSIFICATION	0.0030489923069025537	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9970993323372382	WITHOUT_CLASSIFICATION	0.0029006676627617565	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9970993323372382	WITHOUT_CLASSIFICATION	0.0029006676627617565	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9982674734733938	WITHOUT_CLASSIFICATION	0.0017325265266062654	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998227707070789	WITHOUT_CLASSIFICATION	1.772292929210768E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99985467145978	WITHOUT_CLASSIFICATION	1.4532854022002989E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99985467145978	WITHOUT_CLASSIFICATION	1.4532854022002989E-4	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9998521348147403	WITHOUT_CLASSIFICATION	1.4786518525960915E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989748958970502	WITHOUT_CLASSIFICATION	0.0010251041029497483	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9528002116532073	WITHOUT_CLASSIFICATION	0.04719978834679277	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999852062349314	WITHOUT_CLASSIFICATION	1.4793765068667468E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995328915752492	WITHOUT_CLASSIFICATION	4.6710842475091964E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999343084108966	WITHOUT_CLASSIFICATION	6.56915891034724E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999343084108966	WITHOUT_CLASSIFICATION	6.56915891034724E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999481511733963	WITHOUT_CLASSIFICATION	5.184882660379243E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9993762227280587	WITHOUT_CLASSIFICATION	6.237772719412928E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.999236944919041	WITHOUT_CLASSIFICATION	7.630550809588613E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9991175891767394	WITHOUT_CLASSIFICATION	8.824108232605548E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996403263341809	WITHOUT_CLASSIFICATION	3.5967366581911054E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9992166718036454	WITHOUT_CLASSIFICATION	7.833281963547641E-4	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999989982082606	WITHOUT_CLASSIFICATION	1.0017917394068737E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9982519000277814	WITHOUT_CLASSIFICATION	0.0017480999722185764	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999812356416308	WITHOUT_CLASSIFICATION	1.8764358369195992E-4	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9988846784679032	WITHOUT_CLASSIFICATION	0.0011153215320969156	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9996667334163124	WITHOUT_CLASSIFICATION	3.3326658368757584E-4	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999274041783593	WITHOUT_CLASSIFICATION	7.259582164066149E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9990165548931443	WITHOUT_CLASSIFICATION	9.834451068557177E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.559759647087062	WITHOUT_CLASSIFICATION	0.44024035291293784	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.519590644582575	IMPLEMENTATION	0.48040935541742497	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999719269283902	WITHOUT_CLASSIFICATION	2.8073071609829378E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.998642453356225	WITHOUT_CLASSIFICATION	0.0013575466437749611	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999704070858582	WITHOUT_CLASSIFICATION	2.9592914141860787E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9961471598865702	WITHOUT_CLASSIFICATION	0.0038528401134297853	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9770579380140323	WITHOUT_CLASSIFICATION	0.022942061985967814	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9814327912148205	WITHOUT_CLASSIFICATION	0.018567208785179447	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9954538717682129	WITHOUT_CLASSIFICATION	0.004546128231787174	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9901986523419635	WITHOUT_CLASSIFICATION	0.009801347658036608	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9979052646769624	WITHOUT_CLASSIFICATION	0.002094735323037643	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.986022554400604	WITHOUT_CLASSIFICATION	0.013977445599395939	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999559394257514	WITHOUT_CLASSIFICATION	4.406057424861507E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999591600903001	WITHOUT_CLASSIFICATION	4.083990969988955E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9998426283351429	WITHOUT_CLASSIFICATION	1.573716648569706E-4	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999758916821404	WITHOUT_CLASSIFICATION	2.4108317859593842E-4	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999824720257319	WITHOUT_CLASSIFICATION	1.752797426810894E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993227588559604	WITHOUT_CLASSIFICATION	6.772411440396663E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999021694201673	WITHOUT_CLASSIFICATION	9.783057983270705E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9995706553093271	WITHOUT_CLASSIFICATION	4.2934469067288435E-4	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999501754239078	WITHOUT_CLASSIFICATION	4.982457609217764E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9994125892339052	WITHOUT_CLASSIFICATION	5.874107660947675E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999365695968854	WITHOUT_CLASSIFICATION	6.343040311459975E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999334388791795	WITHOUT_CLASSIFICATION	6.656112082049769E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999609312304731	WITHOUT_CLASSIFICATION	3.906876952689342E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999904220754095	WITHOUT_CLASSIFICATION	9.577924590506838E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9997046424607017	WITHOUT_CLASSIFICATION	2.953575392983314E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9987233782828672	WITHOUT_CLASSIFICATION	0.0012766217171328422	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9990646711877667	WITHOUT_CLASSIFICATION	9.353288122333048E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9986411864806461	WITHOUT_CLASSIFICATION	0.001358813519353881	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9986809645351168	WITHOUT_CLASSIFICATION	0.0013190354648832635	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9989823134442554	WITHOUT_CLASSIFICATION	0.0010176865557446355	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999433365343567	WITHOUT_CLASSIFICATION	5.666346564329623E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9978898136942216	WITHOUT_CLASSIFICATION	0.002110186305778391	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9974692754012002	WITHOUT_CLASSIFICATION	0.0025307245987997366	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999012424645282	WITHOUT_CLASSIFICATION	9.875753547189503E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9974145213739719	WITHOUT_CLASSIFICATION	0.002585478626027984	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6768903905182306	WITHOUT_CLASSIFICATION	0.32310960948176937	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9997981959033524	WITHOUT_CLASSIFICATION	2.0180409664758981E-4	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997069234848901	WITHOUT_CLASSIFICATION	2.930765151099272E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9997866853403149	WITHOUT_CLASSIFICATION	2.1331465968517328E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9997436243417316	WITHOUT_CLASSIFICATION	2.563756582684272E-4	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9997497600044001	WITHOUT_CLASSIFICATION	2.5023999559991883E-4	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998058207364752	WITHOUT_CLASSIFICATION	1.9417926352490445E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999862918439791	WITHOUT_CLASSIFICATION	1.3708156020906808E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9938863055454262	WITHOUT_CLASSIFICATION	0.006113694454573686	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9938863055454262	WITHOUT_CLASSIFICATION	0.006113694454573686	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999997988006784	WITHOUT_CLASSIFICATION	2.0119932171000946E-7	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999472510105848	WITHOUT_CLASSIFICATION	5.274898941519614E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999872667135236	WITHOUT_CLASSIFICATION	1.27332864764897E-5	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998953025333903	WITHOUT_CLASSIFICATION	1.0469746660963105E-4	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999224994864454	WITHOUT_CLASSIFICATION	7.750051355458952E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9993563676898175	WITHOUT_CLASSIFICATION	6.436323101825588E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9997248525187801	WITHOUT_CLASSIFICATION	2.75147481219962E-4	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999297395481764	WITHOUT_CLASSIFICATION	7.026045182349621E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999101127910807	WITHOUT_CLASSIFICATION	8.988720891935819E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999686069239111	WITHOUT_CLASSIFICATION	3.13930760889133E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999914352333384	WITHOUT_CLASSIFICATION	8.56476666159823E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9993632309960037	WITHOUT_CLASSIFICATION	6.367690039963691E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999442180114498	WITHOUT_CLASSIFICATION	5.5781988550217115E-5	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9992332295051002	WITHOUT_CLASSIFICATION	7.667704948997216E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995145034573512	WITHOUT_CLASSIFICATION	4.854965426487404E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995145034573512	WITHOUT_CLASSIFICATION	4.854965426487404E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999378525966414	WITHOUT_CLASSIFICATION	6.214740335863257E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998260080477779	WITHOUT_CLASSIFICATION	1.7399195222220546E-4	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997830167195897	WITHOUT_CLASSIFICATION	2.1698328041025382E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999425174793859	WITHOUT_CLASSIFICATION	5.748252061417978E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994766302833926	WITHOUT_CLASSIFICATION	5.233697166073447E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995873633918604	WITHOUT_CLASSIFICATION	4.1263660813955274E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999492871770223	WITHOUT_CLASSIFICATION	5.071282297783215E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9989917750389594	WITHOUT_CLASSIFICATION	0.001008224961040571	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9987576793262362	WITHOUT_CLASSIFICATION	0.0012423206737638653	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997073848077791	WITHOUT_CLASSIFICATION	2.9261519222094335E-4	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9996816562124642	WITHOUT_CLASSIFICATION	3.1834378753584086E-4	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9988474787191298	WITHOUT_CLASSIFICATION	0.0011525212808702143	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999341830665122	WITHOUT_CLASSIFICATION	6.58169334877855E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9973582697735595	WITHOUT_CLASSIFICATION	0.002641730226440547	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9993800376469961	WITHOUT_CLASSIFICATION	6.199623530039347E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.99836032908664	WITHOUT_CLASSIFICATION	0.0016396709133600037	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999953414264506	WITHOUT_CLASSIFICATION	4.658573549399927E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999942643814583	WITHOUT_CLASSIFICATION	5.735618541639732E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9982886781677969	WITHOUT_CLASSIFICATION	0.0017113218322031844	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999820550347479	WITHOUT_CLASSIFICATION	1.794496525219856E-5	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999766776785485	WITHOUT_CLASSIFICATION	2.332232145145618E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999693240203449	WITHOUT_CLASSIFICATION	3.067597965517979E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9997101562861447	WITHOUT_CLASSIFICATION	2.898437138553464E-4	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998585391821433	WITHOUT_CLASSIFICATION	1.4146081785675936E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.969942030532365	WITHOUT_CLASSIFICATION	0.030057969467635007	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9968840480839796	WITHOUT_CLASSIFICATION	0.0031159519160203503	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9949143745808288	WITHOUT_CLASSIFICATION	0.005085625419171233	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9991206521662394	WITHOUT_CLASSIFICATION	8.793478337605004E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999026248887972	WITHOUT_CLASSIFICATION	9.737511120272006E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997529542712562	WITHOUT_CLASSIFICATION	2.470457287437458E-4	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.997828932741083	WITHOUT_CLASSIFICATION	0.002171067258917069	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9997062345043721	WITHOUT_CLASSIFICATION	2.9376549562795825E-4	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9872572085072694	WITHOUT_CLASSIFICATION	0.012742791492730528	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9936825416995758	WITHOUT_CLASSIFICATION	0.006317458300424198	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9944922068911088	WITHOUT_CLASSIFICATION	0.0055077931088910815	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9984624208713325	WITHOUT_CLASSIFICATION	0.0015375791286675496	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999968830579757	WITHOUT_CLASSIFICATION	3.1169420242991E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9995141643010059	WITHOUT_CLASSIFICATION	4.8583569899400813E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999220313232343	WITHOUT_CLASSIFICATION	7.796867676572698E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986308778224474	WITHOUT_CLASSIFICATION	0.0013691221775525104	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986308778224474	WITHOUT_CLASSIFICATION	0.0013691221775525104	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999337926023181	WITHOUT_CLASSIFICATION	6.620739768189401E-4	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999413570590077	WITHOUT_CLASSIFICATION	5.864294099226993E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9998420955595699	WITHOUT_CLASSIFICATION	1.579044404300547E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999168121002041	WITHOUT_CLASSIFICATION	8.31878997958953E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.7245116942188708	WITHOUT_CLASSIFICATION	0.2754883057811291	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999966898462454	WITHOUT_CLASSIFICATION	3.310153754588153E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9994947733092087	WITHOUT_CLASSIFICATION	5.052266907913016E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9980529900776063	WITHOUT_CLASSIFICATION	0.0019470099223937408	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999993893786614	WITHOUT_CLASSIFICATION	6.106213385746209E-7	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992907873648657	WITHOUT_CLASSIFICATION	7.092126351343752E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994899530964682	WITHOUT_CLASSIFICATION	5.100469035318524E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999566123483041	WITHOUT_CLASSIFICATION	4.3387651695975366E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999540575558623	WITHOUT_CLASSIFICATION	4.594244413763076E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9874231325994473	WITHOUT_CLASSIFICATION	0.012576867400552862	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9989507018706161	WITHOUT_CLASSIFICATION	0.0010492981293839198	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999973855339251	WITHOUT_CLASSIFICATION	2.614466074907767E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999001423704188	WITHOUT_CLASSIFICATION	9.985762958121629E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9992711643857353	WITHOUT_CLASSIFICATION	7.288356142647572E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999713679276816	WITHOUT_CLASSIFICATION	2.8632072318464042E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999848259219337	WITHOUT_CLASSIFICATION	1.5174078066186373E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9779789842291214	WITHOUT_CLASSIFICATION	0.022021015770878588	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9912743505568372	WITHOUT_CLASSIFICATION	0.008725649443162791	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9970025732365047	WITHOUT_CLASSIFICATION	0.002997426763495456	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9985763555216765	WITHOUT_CLASSIFICATION	0.0014236444783235207	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999668488846245	WITHOUT_CLASSIFICATION	3.315111537546119E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991316133330573	WITHOUT_CLASSIFICATION	8.683866669427284E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9993161006596862	WITHOUT_CLASSIFICATION	6.83899340313637E-4	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9845042828909252	WITHOUT_CLASSIFICATION	0.015495717109074788	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999005518957375	WITHOUT_CLASSIFICATION	9.944810426256047E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.998511695137853	WITHOUT_CLASSIFICATION	0.0014883048621470757	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999591705163717	WITHOUT_CLASSIFICATION	4.0829483628286376E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999916258813675	WITHOUT_CLASSIFICATION	8.374118632555946E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999830999710758	WITHOUT_CLASSIFICATION	1.6900028924169467E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999296128989	WITHOUT_CLASSIFICATION	7.038710115416797E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999254525876237	WITHOUT_CLASSIFICATION	7.454741237629849E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998928822612292	WITHOUT_CLASSIFICATION	1.0711773877087516E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999657651997779	WITHOUT_CLASSIFICATION	3.423480022211742E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999198020604273	WITHOUT_CLASSIFICATION	8.019793957269619E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9972393773340817	WITHOUT_CLASSIFICATION	0.002760622665918144	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998270927526435	WITHOUT_CLASSIFICATION	1.7290724735647642E-4	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999816244419013	WITHOUT_CLASSIFICATION	1.837555809868013E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9996694703129876	WITHOUT_CLASSIFICATION	3.305296870123803E-4	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9623427650804759	WITHOUT_CLASSIFICATION	0.037657234919524045	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.997063818049079	WITHOUT_CLASSIFICATION	0.0029361819509211755	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9635813914754858	WITHOUT_CLASSIFICATION	0.0364186085245142	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999918509042899	WITHOUT_CLASSIFICATION	8.149095710088376E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999442180114498	WITHOUT_CLASSIFICATION	5.5781988550217115E-5	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9993585752747433	WITHOUT_CLASSIFICATION	6.414247252566122E-4	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999353649652692	WITHOUT_CLASSIFICATION	6.463503473073358E-5	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.994280666030848	WITHOUT_CLASSIFICATION	0.0057193339691520755	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999700103924734	WITHOUT_CLASSIFICATION	2.998960752657541E-5	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999922572823343	WITHOUT_CLASSIFICATION	7.742717665688217E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997701600734757	WITHOUT_CLASSIFICATION	2.2983992652423306E-4	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9987790802121906	WITHOUT_CLASSIFICATION	0.0012209197878093733	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9190634994590338	IMPLEMENTATION	0.08093650054096628	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999878078235257	WITHOUT_CLASSIFICATION	1.2192176474386075E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9948363228609775	WITHOUT_CLASSIFICATION	0.005163677139022565	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9715975320491429	WITHOUT_CLASSIFICATION	0.028402467950857154	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9931596584156624	WITHOUT_CLASSIFICATION	0.006840341584337541	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999535376301867	WITHOUT_CLASSIFICATION	4.6462369813306765E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.994052587577924	WITHOUT_CLASSIFICATION	0.005947412422075963	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978739677378802	WITHOUT_CLASSIFICATION	0.002126032262119709	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9989660536896705	WITHOUT_CLASSIFICATION	0.001033946310329463	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9993763875553389	WITHOUT_CLASSIFICATION	6.236124446610782E-4	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997779714491251	WITHOUT_CLASSIFICATION	2.220285508749327E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978739677378802	WITHOUT_CLASSIFICATION	0.002126032262119709	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.7699653904133827	WITHOUT_CLASSIFICATION	0.23003460958661737	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9879497682195674	WITHOUT_CLASSIFICATION	0.01205023178043258	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9997793367194472	WITHOUT_CLASSIFICATION	2.2066328055269768E-4	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9989550652891414	WITHOUT_CLASSIFICATION	0.0010449347108586555	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9988200761927448	WITHOUT_CLASSIFICATION	0.0011799238072551428	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9958633820094829	WITHOUT_CLASSIFICATION	0.0041366179905170525	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999820106953253	WITHOUT_CLASSIFICATION	1.798930467462101E-5	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999524269414299	WITHOUT_CLASSIFICATION	4.757305857010707E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998311391625484	WITHOUT_CLASSIFICATION	1.6886083745156584E-4	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998329762423478	WITHOUT_CLASSIFICATION	0.0016702375765219985	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.998249866178198	WITHOUT_CLASSIFICATION	0.0017501338218019447	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9438332049168454	WITHOUT_CLASSIFICATION	0.05616679508315452	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9981091161964699	WITHOUT_CLASSIFICATION	0.0018908838035300315	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9919528890216215	WITHOUT_CLASSIFICATION	0.008047110978378487	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9935109264690005	WITHOUT_CLASSIFICATION	0.006489073530999597	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9983066232806492	WITHOUT_CLASSIFICATION	0.0016933767193507453	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999864245820449	WITHOUT_CLASSIFICATION	1.3575417955070104E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999301751065942	WITHOUT_CLASSIFICATION	6.98248934058184E-5	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997344377041761	WITHOUT_CLASSIFICATION	2.6556229582381716E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9733306301453704	WITHOUT_CLASSIFICATION	0.02666936985462959	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9956686818662108	WITHOUT_CLASSIFICATION	0.004331318133789188	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9996947899909923	WITHOUT_CLASSIFICATION	3.0521000900773866E-4	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9970776957023718	WITHOUT_CLASSIFICATION	0.002922304297628047	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999990553576551	WITHOUT_CLASSIFICATION	9.446423450018169E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999912533788806	WITHOUT_CLASSIFICATION	8.746621119400737E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9996776422112384	WITHOUT_CLASSIFICATION	3.2235778876146365E-4	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.8696147152861486	WITHOUT_CLASSIFICATION	0.13038528471385133	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998989505846965	WITHOUT_CLASSIFICATION	0.001010494153034974	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.8624049257259756	WITHOUT_CLASSIFICATION	0.1375950742740244	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.5952589999555904	IMPLEMENTATION	0.4047410000444096	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9997963605365084	WITHOUT_CLASSIFICATION	2.0363946349167487E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997369327322363	WITHOUT_CLASSIFICATION	2.63067267763704E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999619757029408	WITHOUT_CLASSIFICATION	3.802429705919896E-4	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999168042639203	WITHOUT_CLASSIFICATION	8.319573607979457E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9994091870647294	WITHOUT_CLASSIFICATION	5.908129352705431E-4	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999928203869091	WITHOUT_CLASSIFICATION	7.179613091003611E-6	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998055093463252	WITHOUT_CLASSIFICATION	1.9449065367474057E-4	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.998654426326225	WITHOUT_CLASSIFICATION	0.001345573673774963	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9998647643583077	WITHOUT_CLASSIFICATION	1.3523564169218785E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9975602535187021	WITHOUT_CLASSIFICATION	0.002439746481297942	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986696045820921	WITHOUT_CLASSIFICATION	0.001330395417907894	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986696045820921	WITHOUT_CLASSIFICATION	0.001330395417907894	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994910078648235	WITHOUT_CLASSIFICATION	5.089921351765159E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999852153396287	WITHOUT_CLASSIFICATION	1.4784660371442682E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999815843293517	WITHOUT_CLASSIFICATION	1.8415670648306732E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9999122242669968	WITHOUT_CLASSIFICATION	8.777573300322549E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999830501595339	WITHOUT_CLASSIFICATION	1.6949840466066456E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999830501595339	WITHOUT_CLASSIFICATION	1.6949840466066456E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9990968542213321	WITHOUT_CLASSIFICATION	9.031457786679283E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.998389258496322	WITHOUT_CLASSIFICATION	0.0016107415036780508	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999975778940229	WITHOUT_CLASSIFICATION	2.422105977089807E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9944411800396348	WITHOUT_CLASSIFICATION	0.005558819960365142	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.7809168626213521	WITHOUT_CLASSIFICATION	0.219083137378648	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998672410595998	WITHOUT_CLASSIFICATION	1.327589404002559E-4	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9996302133236226	WITHOUT_CLASSIFICATION	3.697866763774488E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9994886406204323	WITHOUT_CLASSIFICATION	5.113593795677204E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9953167015839033	WITHOUT_CLASSIFICATION	0.004683298416096682	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994759584231142	WITHOUT_CLASSIFICATION	5.240415768858252E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994759584231142	WITHOUT_CLASSIFICATION	5.240415768858252E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.99835144164039	WITHOUT_CLASSIFICATION	0.0016485583596098918	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9986385284494232	WITHOUT_CLASSIFICATION	0.001361471550576766	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9992274152062007	WITHOUT_CLASSIFICATION	7.72584793799231E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999772343916339	WITHOUT_CLASSIFICATION	2.2765608366109703E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999253258974938	WITHOUT_CLASSIFICATION	7.467410250618518E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993837240754918	WITHOUT_CLASSIFICATION	6.162759245082557E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999795711657745	WITHOUT_CLASSIFICATION	2.0428834225480936E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995524049717615	WITHOUT_CLASSIFICATION	4.475950282384566E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9976714597031179	WITHOUT_CLASSIFICATION	0.002328540296882215	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9991318103506553	WITHOUT_CLASSIFICATION	8.681896493445534E-4	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998329762423478	WITHOUT_CLASSIFICATION	0.0016702375765219985	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999520608354379	WITHOUT_CLASSIFICATION	4.7939164562156954E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9992560442617799	WITHOUT_CLASSIFICATION	7.439557382199891E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999141923086357	WITHOUT_CLASSIFICATION	8.580769136437002E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.999573478603613	WITHOUT_CLASSIFICATION	4.2652139638692986E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9982471893542602	WITHOUT_CLASSIFICATION	0.0017528106457398627	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9989612992561224	WITHOUT_CLASSIFICATION	0.0010387007438775661	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9989817938734299	WITHOUT_CLASSIFICATION	0.0010182061265700507	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9973163132939137	WITHOUT_CLASSIFICATION	0.0026836867060863463	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9979556141699392	WITHOUT_CLASSIFICATION	0.0020443858300608483	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.943745049478672	WITHOUT_CLASSIFICATION	0.05625495052132795	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.943745049478672	WITHOUT_CLASSIFICATION	0.05625495052132795	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9990921869289242	WITHOUT_CLASSIFICATION	9.078130710757933E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9996382925539534	WITHOUT_CLASSIFICATION	3.617074460465824E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977064833513248	WITHOUT_CLASSIFICATION	0.002293516648675084	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9945279252025762	WITHOUT_CLASSIFICATION	0.005472074797423895	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9981243984713367	WITHOUT_CLASSIFICATION	0.001875601528663308	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9989004041263854	WITHOUT_CLASSIFICATION	0.0010995958736146115	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999818866394422	WITHOUT_CLASSIFICATION	1.811336055771207E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999994793758241	WITHOUT_CLASSIFICATION	5.206241759465609E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9977550207735918	WITHOUT_CLASSIFICATION	0.0022449792264082682	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9922250886828814	WITHOUT_CLASSIFICATION	0.007774911317118705	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993984448486677	WITHOUT_CLASSIFICATION	6.01555151332317E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.984536399717139	WITHOUT_CLASSIFICATION	0.015463600282860887	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999172654395491	WITHOUT_CLASSIFICATION	8.273456045094223E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999894109094696	WITHOUT_CLASSIFICATION	1.0589090530409486E-4	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999488305593179	WITHOUT_CLASSIFICATION	5.116944068206133E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9990242576622173	WITHOUT_CLASSIFICATION	9.757423377827975E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999999583090987	WITHOUT_CLASSIFICATION	4.169090130214606E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997002898826143	WITHOUT_CLASSIFICATION	2.9971011738566967E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9936830072999898	WITHOUT_CLASSIFICATION	0.006316992700010194	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999384411881034	WITHOUT_CLASSIFICATION	6.155881189657197E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998336449559955	WITHOUT_CLASSIFICATION	1.6635504400451E-4	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995515022955	WITHOUT_CLASSIFICATION	4.484977045229399E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996403263341809	WITHOUT_CLASSIFICATION	3.5967366581911054E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9993430500064964	WITHOUT_CLASSIFICATION	6.569499935037113E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9994159680312367	WITHOUT_CLASSIFICATION	5.840319687634265E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9994159680312367	WITHOUT_CLASSIFICATION	5.840319687634265E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.997369503257759	WITHOUT_CLASSIFICATION	0.002630496742241105	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9682588045452193	WITHOUT_CLASSIFICATION	0.03174119545478069	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9997349176952045	WITHOUT_CLASSIFICATION	2.650823047954674E-4	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998341187779337	WITHOUT_CLASSIFICATION	1.6588122206618523E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998673659851262	WITHOUT_CLASSIFICATION	1.3263401487384623E-4	IMPLEMENTATION
