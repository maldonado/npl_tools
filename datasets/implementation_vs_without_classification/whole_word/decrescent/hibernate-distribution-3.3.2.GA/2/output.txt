// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9967803905642382	WITHOUT_CLASSIFICATION	0.0032196094357618355	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9967803905642382	WITHOUT_CLASSIFICATION	0.0032196094357618355	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9917060000624589	WITHOUT_CLASSIFICATION	0.008293999937541156	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9988239547208242	WITHOUT_CLASSIFICATION	0.001176045279175845	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8427889214987628	IMPLEMENTATION	0.1572110785012372	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9999317616925002	WITHOUT_CLASSIFICATION	6.823830749972397E-5	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6285856623153373	IMPLEMENTATION	0.3714143376846626	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9964653215655281	WITHOUT_CLASSIFICATION	0.0035346784344719093	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9702987267760436	WITHOUT_CLASSIFICATION	0.029701273223956434	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999304161609528	WITHOUT_CLASSIFICATION	6.95838390471826E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9742690194204766	WITHOUT_CLASSIFICATION	0.025730980579523416	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.98445457752313	WITHOUT_CLASSIFICATION	0.015545422476869858	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.98445457752313	WITHOUT_CLASSIFICATION	0.015545422476869858	IMPLEMENTATION
/**	IMPLEMENTATION	0.8227269535776667	WITHOUT_CLASSIFICATION	0.17727304642233324	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5830359918829675	IMPLEMENTATION	0.41696400811703255	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999618416176946	IMPLEMENTATION	3.815838230532012E-5	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8781363447534759	WITHOUT_CLASSIFICATION	0.12186365524652411	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999481066325966	WITHOUT_CLASSIFICATION	5.1893367403302666E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9763504033283279	WITHOUT_CLASSIFICATION	0.02364959667167216	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9951130908057557	WITHOUT_CLASSIFICATION	0.004886909194244268	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9998890013983451	WITHOUT_CLASSIFICATION	1.1099860165485567E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9965287993049309	WITHOUT_CLASSIFICATION	0.0034712006950690984	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9694195565628377	WITHOUT_CLASSIFICATION	0.030580443437162246	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9694195565628377	WITHOUT_CLASSIFICATION	0.030580443437162246	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7376041959828097	IMPLEMENTATION	0.2623958040171903	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9954054247605946	WITHOUT_CLASSIFICATION	0.004594575239405403	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9150820604149849	IMPLEMENTATION	0.08491793958501505	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9949059648582683	WITHOUT_CLASSIFICATION	0.005094035141731656	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.6354893732129091	WITHOUT_CLASSIFICATION	0.3645106267870908	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9987919447774272	WITHOUT_CLASSIFICATION	0.001208055222572794	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9917312175986129	WITHOUT_CLASSIFICATION	0.008268782401387124	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9996031399440178	WITHOUT_CLASSIFICATION	3.96860055982081E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9658019066912263	WITHOUT_CLASSIFICATION	0.03419809330877365	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8230634461044174	WITHOUT_CLASSIFICATION	0.1769365538955826	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9657089124961517	WITHOUT_CLASSIFICATION	0.03429108750384843	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9391669191981553	IMPLEMENTATION	0.06083308080184477	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9958468078515978	WITHOUT_CLASSIFICATION	0.0041531921484021525	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9984562805172381	WITHOUT_CLASSIFICATION	0.0015437194827618464	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8539656719221567	IMPLEMENTATION	0.14603432807784333	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8539656719221567	IMPLEMENTATION	0.14603432807784333	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5233549865760252	WITHOUT_CLASSIFICATION	0.47664501342397486	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.999801339948984	WITHOUT_CLASSIFICATION	1.9866005101598397E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.999921714374639	WITHOUT_CLASSIFICATION	7.828562536105027E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9933819585537855	IMPLEMENTATION	0.006618041446214462	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.991434973767702	WITHOUT_CLASSIFICATION	0.00856502623229804	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.976177368103731	WITHOUT_CLASSIFICATION	0.023822631896268952	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9921108177122259	WITHOUT_CLASSIFICATION	0.00788918228777416	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.999300864545167	WITHOUT_CLASSIFICATION	6.991354548329443E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9987838274838657	WITHOUT_CLASSIFICATION	0.0012161725161343065	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9995986524808484	WITHOUT_CLASSIFICATION	4.01347519151526E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.5611934823037011	WITHOUT_CLASSIFICATION	0.4388065176962989	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9344637837084137	WITHOUT_CLASSIFICATION	0.06553621629158624	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.990730677364909	WITHOUT_CLASSIFICATION	0.009269322635091028	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9701205829196035	WITHOUT_CLASSIFICATION	0.029879417080396507	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9917312175986129	WITHOUT_CLASSIFICATION	0.008268782401387124	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9701205829196035	WITHOUT_CLASSIFICATION	0.029879417080396507	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9823045988415062	IMPLEMENTATION	0.017695401158493756	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.5622095099843485	WITHOUT_CLASSIFICATION	0.4377904900156515	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9701205829196035	WITHOUT_CLASSIFICATION	0.029879417080396507	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999997541724298	WITHOUT_CLASSIFICATION	2.458275701290964E-7	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999997541724298	WITHOUT_CLASSIFICATION	2.458275701290964E-7	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9977001307897571	IMPLEMENTATION	0.0022998692102429155	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9996895282179721	WITHOUT_CLASSIFICATION	3.104717820278465E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992942949854304	WITHOUT_CLASSIFICATION	7.057050145695678E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999683031174826	WITHOUT_CLASSIFICATION	3.1696882517358226E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9997906201743051	WITHOUT_CLASSIFICATION	2.0937982569487187E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999341041815327	WITHOUT_CLASSIFICATION	6.589581846726806E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999341041815327	WITHOUT_CLASSIFICATION	6.589581846726806E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999990153886808	WITHOUT_CLASSIFICATION	9.846113191995548E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999753367963864	WITHOUT_CLASSIFICATION	2.466320361359943E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999954244748485	WITHOUT_CLASSIFICATION	4.5755251514870805E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998603181163307	WITHOUT_CLASSIFICATION	1.3968188366929966E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999976369989425	WITHOUT_CLASSIFICATION	2.3630010575306822E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999976369989425	WITHOUT_CLASSIFICATION	2.3630010575306822E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999747087923445	WITHOUT_CLASSIFICATION	2.52912076555039E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9987424154575414	WITHOUT_CLASSIFICATION	0.0012575845424585706	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9998507947663166	WITHOUT_CLASSIFICATION	1.492052336833373E-4	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999387299221729	WITHOUT_CLASSIFICATION	6.12700778271791E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9997743579715356	WITHOUT_CLASSIFICATION	2.2564202846431054E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999713935254091	WITHOUT_CLASSIFICATION	2.8606474590855158E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999490095384836	WITHOUT_CLASSIFICATION	5.0990461516424474E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9988791728891276	WITHOUT_CLASSIFICATION	0.0011208271108723324	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9990753824701167	WITHOUT_CLASSIFICATION	9.246175298834212E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999801111025413	WITHOUT_CLASSIFICATION	1.9888897458830968E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9997556205290468	WITHOUT_CLASSIFICATION	2.4437947095320723E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999763064484358	WITHOUT_CLASSIFICATION	2.36935515640988E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9995933856488148	WITHOUT_CLASSIFICATION	4.0661435118511774E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998131572373545	WITHOUT_CLASSIFICATION	1.8684276264556557E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9612060230139077	WITHOUT_CLASSIFICATION	0.038793976986092354	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.8227269535776667	WITHOUT_CLASSIFICATION	0.17727304642233324	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.8227269535776667	WITHOUT_CLASSIFICATION	0.17727304642233324	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998652853152095	WITHOUT_CLASSIFICATION	1.3471468479056792E-4	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998373786430396	WITHOUT_CLASSIFICATION	1.6262135696036115E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999725771379636	WITHOUT_CLASSIFICATION	2.742286203639834E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694123137437	WITHOUT_CLASSIFICATION	4.305876862562668E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998628471268811	WITHOUT_CLASSIFICATION	1.371528731187876E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999747071330774	WITHOUT_CLASSIFICATION	2.529286692260171E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9991188486159627	WITHOUT_CLASSIFICATION	8.811513840373724E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999951940525844	WITHOUT_CLASSIFICATION	4.805947415590368E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9966842471188022	WITHOUT_CLASSIFICATION	0.0033157528811978126	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9966842471188022	WITHOUT_CLASSIFICATION	0.0033157528811978126	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9989339600933517	WITHOUT_CLASSIFICATION	0.001066039906648292	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9673121131791165	IMPLEMENTATION	0.03268788682088348	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998322581620113	WITHOUT_CLASSIFICATION	1.677418379887287E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995009577453199	WITHOUT_CLASSIFICATION	4.990422546801439E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999369143699091	WITHOUT_CLASSIFICATION	6.308563009094375E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999940442357521	WITHOUT_CLASSIFICATION	5.9557642478997215E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.991347186564365	WITHOUT_CLASSIFICATION	0.008652813435634845	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997131670513487	WITHOUT_CLASSIFICATION	2.868329486512854E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.996579382766705	WITHOUT_CLASSIFICATION	0.003420617233295116	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9993753129130728	WITHOUT_CLASSIFICATION	6.246870869271397E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997930536206162	WITHOUT_CLASSIFICATION	2.0694637938374998E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9990998531364713	WITHOUT_CLASSIFICATION	9.001468635286393E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998714907273518	WITHOUT_CLASSIFICATION	1.2850927264814474E-4	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9987429342432358	WITHOUT_CLASSIFICATION	0.0012570657567642532	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999479767215185	WITHOUT_CLASSIFICATION	5.202327848158881E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999888261113983	WITHOUT_CLASSIFICATION	1.117388860167747E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999327869481826	WITHOUT_CLASSIFICATION	6.721305181745497E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999826346511848	WITHOUT_CLASSIFICATION	1.736534881526335E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999849383556196	WITHOUT_CLASSIFICATION	1.5061644380483944E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999836589473422	WITHOUT_CLASSIFICATION	1.6341052657828366E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999254122831799	WITHOUT_CLASSIFICATION	7.45877168200595E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999898883238891	WITHOUT_CLASSIFICATION	1.0111676110990618E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9995504447216123	WITHOUT_CLASSIFICATION	4.4955527838766836E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996219538173376	WITHOUT_CLASSIFICATION	3.7804618266234493E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6903000705349348	IMPLEMENTATION	0.30969992946506514	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9993957812982887	WITHOUT_CLASSIFICATION	6.042187017113716E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999124924561013	WITHOUT_CLASSIFICATION	8.750754389878045E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9989063683288328	WITHOUT_CLASSIFICATION	0.001093631671167091	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997207826842648	WITHOUT_CLASSIFICATION	2.7921731573527544E-4	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998811260633	WITHOUT_CLASSIFICATION	1.1887393671499039E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9997362548780927	WITHOUT_CLASSIFICATION	2.637451219073745E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999293607710689	WITHOUT_CLASSIFICATION	7.063922893115039E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999955543360476	WITHOUT_CLASSIFICATION	4.445663952482184E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997393150693274	WITHOUT_CLASSIFICATION	2.606849306725208E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999950434984648	WITHOUT_CLASSIFICATION	4.956501535206887E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999998751845972	WITHOUT_CLASSIFICATION	1.2481540281005725E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997393150693274	WITHOUT_CLASSIFICATION	2.606849306725208E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9976857569291809	WITHOUT_CLASSIFICATION	0.0023142430708190417	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999715327593685	WITHOUT_CLASSIFICATION	2.8467240631500706E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9974159174346601	WITHOUT_CLASSIFICATION	0.0025840825653398554	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9996995169734141	WITHOUT_CLASSIFICATION	3.0048302658587113E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9995830714773711	WITHOUT_CLASSIFICATION	4.169285226288707E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9995830714773711	WITHOUT_CLASSIFICATION	4.169285226288707E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9966842471188022	WITHOUT_CLASSIFICATION	0.0033157528811978126	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993175454249	WITHOUT_CLASSIFICATION	6.824545750878651E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999679732178747	WITHOUT_CLASSIFICATION	3.2026782125318484E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999371488500634	WITHOUT_CLASSIFICATION	6.285114993661392E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999981836616586	WITHOUT_CLASSIFICATION	1.8163383413940793E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999774988060068	WITHOUT_CLASSIFICATION	2.250119399324409E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.987353482562572	WITHOUT_CLASSIFICATION	0.012646517437428085	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9997333475584609	WITHOUT_CLASSIFICATION	2.6665244153914686E-4	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999626394536595	WITHOUT_CLASSIFICATION	3.736054634057312E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999542796208254	WITHOUT_CLASSIFICATION	4.5720379174482044E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999542796208254	WITHOUT_CLASSIFICATION	4.5720379174482044E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998297686299162	WITHOUT_CLASSIFICATION	1.702313700837618E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997648411790762	WITHOUT_CLASSIFICATION	2.3515882092377288E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999896973885439	WITHOUT_CLASSIFICATION	1.0302611456092699E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999542796208254	WITHOUT_CLASSIFICATION	4.5720379174482044E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998297686299162	WITHOUT_CLASSIFICATION	1.702313700837618E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998297686299162	WITHOUT_CLASSIFICATION	1.702313700837618E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999692184616014	WITHOUT_CLASSIFICATION	3.078153839867153E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9995777900614264	WITHOUT_CLASSIFICATION	4.2220993857360886E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999991281986513	WITHOUT_CLASSIFICATION	8.71801348704589E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998881293820606	WITHOUT_CLASSIFICATION	1.1187061793935345E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9981599748460188	WITHOUT_CLASSIFICATION	0.0018400251539811862	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9981599748460188	WITHOUT_CLASSIFICATION	0.0018400251539811862	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998564890223545	WITHOUT_CLASSIFICATION	1.435109776455852E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9977174771916606	WITHOUT_CLASSIFICATION	0.0022825228083395046	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9998755899109598	WITHOUT_CLASSIFICATION	1.244100890401781E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999992454865752	WITHOUT_CLASSIFICATION	7.5451342480606235E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999992454865752	WITHOUT_CLASSIFICATION	7.5451342480606235E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9992398671418122	WITHOUT_CLASSIFICATION	7.601328581877126E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992200127817745	WITHOUT_CLASSIFICATION	7.799872182254133E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998185719493841	WITHOUT_CLASSIFICATION	1.8142805061591608E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999996946426184	WITHOUT_CLASSIFICATION	3.0535738158435755E-7	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999333575745333	WITHOUT_CLASSIFICATION	6.664242546663872E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9986653687881861	WITHOUT_CLASSIFICATION	0.0013346312118138986	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9990674557753374	WITHOUT_CLASSIFICATION	9.325442246624891E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9981809334799335	WITHOUT_CLASSIFICATION	0.0018190665200665246	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998185719493841	WITHOUT_CLASSIFICATION	1.8142805061591608E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9962705301270025	WITHOUT_CLASSIFICATION	0.0037294698729974335	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998211203802312	WITHOUT_CLASSIFICATION	1.788796197688644E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998211203802312	WITHOUT_CLASSIFICATION	1.788796197688644E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999970598811178	WITHOUT_CLASSIFICATION	2.940118882217741E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999417926852389	WITHOUT_CLASSIFICATION	5.820731476118533E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.991802848556751	WITHOUT_CLASSIFICATION	0.008197151443248929	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9989793870142971	WITHOUT_CLASSIFICATION	0.0010206129857028166	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9981745191148288	WITHOUT_CLASSIFICATION	0.001825480885171102	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9967040791032855	WITHOUT_CLASSIFICATION	0.003295920896714468	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9994595846019086	WITHOUT_CLASSIFICATION	5.404153980913578E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9964255581660523	WITHOUT_CLASSIFICATION	0.0035744418339477843	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999948948750622	WITHOUT_CLASSIFICATION	5.105124937695414E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999948948750622	WITHOUT_CLASSIFICATION	5.105124937695414E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992942949854304	WITHOUT_CLASSIFICATION	7.057050145695678E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9997210494828671	WITHOUT_CLASSIFICATION	2.789505171328191E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9997670942647038	WITHOUT_CLASSIFICATION	2.3290573529614967E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999793266322554	WITHOUT_CLASSIFICATION	2.0673367744604272E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998195405206926	WITHOUT_CLASSIFICATION	1.8045947930737672E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9991281191255693	WITHOUT_CLASSIFICATION	8.718808744306953E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9997820693570328	WITHOUT_CLASSIFICATION	2.1793064296717955E-4	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999748524317754	WITHOUT_CLASSIFICATION	2.514756822464168E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997028778459812	WITHOUT_CLASSIFICATION	2.971221540187697E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9991281191255693	WITHOUT_CLASSIFICATION	8.718808744306953E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999365491296411	WITHOUT_CLASSIFICATION	6.345087035886077E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.998993675051802	WITHOUT_CLASSIFICATION	0.0010063249481980232	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998265715262123	WITHOUT_CLASSIFICATION	1.73428473787661E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9997485043652096	WITHOUT_CLASSIFICATION	2.51495634790439E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998021214126982	WITHOUT_CLASSIFICATION	1.9787858730177234E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999341041815327	WITHOUT_CLASSIFICATION	6.589581846726806E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9957157262664879	WITHOUT_CLASSIFICATION	0.004284273733512235	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9987979805348692	WITHOUT_CLASSIFICATION	0.001202019465130814	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997297711791061	WITHOUT_CLASSIFICATION	2.7022882089383247E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999764928272245	WITHOUT_CLASSIFICATION	2.3507172775514448E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998994558843819	WITHOUT_CLASSIFICATION	1.0054411561818598E-4	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.99996197459902	WITHOUT_CLASSIFICATION	3.802540097993134E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999638824888895	WITHOUT_CLASSIFICATION	3.611751111060688E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9906101784143008	WITHOUT_CLASSIFICATION	0.009389821585699279	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999705981274586	WITHOUT_CLASSIFICATION	2.9401872541360248E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999990153886808	WITHOUT_CLASSIFICATION	9.846113191995548E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9997810009298024	WITHOUT_CLASSIFICATION	2.1899907019764576E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997821711138162	WITHOUT_CLASSIFICATION	2.1782888618380544E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999717357224611	WITHOUT_CLASSIFICATION	2.826427753889568E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999103559827498	WITHOUT_CLASSIFICATION	8.964401725018627E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997122676372836	WITHOUT_CLASSIFICATION	2.877323627163313E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999756027168152	WITHOUT_CLASSIFICATION	2.4397283184891464E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9996271408360133	WITHOUT_CLASSIFICATION	3.7285916398662453E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9996271408360133	WITHOUT_CLASSIFICATION	3.7285916398662453E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999859813658178	WITHOUT_CLASSIFICATION	1.4018634182090436E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999260004302826	WITHOUT_CLASSIFICATION	7.399956971745653E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999711872405807	WITHOUT_CLASSIFICATION	2.881275941936019E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999766636748009	WITHOUT_CLASSIFICATION	2.3336325199102033E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999137857534329	WITHOUT_CLASSIFICATION	8.621424656696223E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998946892066386	WITHOUT_CLASSIFICATION	1.0531079336134321E-4	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999956960862418	WITHOUT_CLASSIFICATION	4.303913758192498E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999753367963864	WITHOUT_CLASSIFICATION	2.466320361359943E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999084649051763	WITHOUT_CLASSIFICATION	9.153509482369308E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999084649051763	WITHOUT_CLASSIFICATION	9.153509482369308E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999084649051763	WITHOUT_CLASSIFICATION	9.153509482369308E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9998735894798894	WITHOUT_CLASSIFICATION	1.2641052011065502E-4	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999084649051763	WITHOUT_CLASSIFICATION	9.153509482369308E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998936435059576	WITHOUT_CLASSIFICATION	1.0635649404238762E-4	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999784309385846	WITHOUT_CLASSIFICATION	2.1569061415396392E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999593285395587	WITHOUT_CLASSIFICATION	4.06714604413081E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.998807681705626	WITHOUT_CLASSIFICATION	0.001192318294373945	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.999057503792877	WITHOUT_CLASSIFICATION	9.424962071229369E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999685134190619	WITHOUT_CLASSIFICATION	3.14865809380496E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998603181163307	WITHOUT_CLASSIFICATION	1.3968188366929966E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998603181163307	WITHOUT_CLASSIFICATION	1.3968188366929966E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9832333874635651	WITHOUT_CLASSIFICATION	0.016766612536434772	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999816244227636	WITHOUT_CLASSIFICATION	1.837557723640621E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999779747430683	WITHOUT_CLASSIFICATION	2.202525693176793E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.99997096478266	WITHOUT_CLASSIFICATION	2.9035217339968175E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999829727639954	WITHOUT_CLASSIFICATION	1.702723600459609E-5	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999713223663724	WITHOUT_CLASSIFICATION	2.8677633627575118E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999976369989425	WITHOUT_CLASSIFICATION	2.3630010575306822E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999707940424006	WITHOUT_CLASSIFICATION	2.9205957599429777E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999707940424006	WITHOUT_CLASSIFICATION	2.9205957599429777E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999747087923445	WITHOUT_CLASSIFICATION	2.52912076555039E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999747087923445	WITHOUT_CLASSIFICATION	2.52912076555039E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9992238986290398	WITHOUT_CLASSIFICATION	7.761013709601382E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9992238986290398	WITHOUT_CLASSIFICATION	7.761013709601382E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997678184926019	WITHOUT_CLASSIFICATION	2.3218150739805297E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997678184926019	WITHOUT_CLASSIFICATION	2.3218150739805297E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998603181163307	WITHOUT_CLASSIFICATION	1.3968188366929966E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999976369989425	WITHOUT_CLASSIFICATION	2.3630010575306822E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999707940424006	WITHOUT_CLASSIFICATION	2.9205957599429777E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999707940424006	WITHOUT_CLASSIFICATION	2.9205957599429777E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999747087923445	WITHOUT_CLASSIFICATION	2.52912076555039E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9992238986290398	WITHOUT_CLASSIFICATION	7.761013709601382E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9992238986290398	WITHOUT_CLASSIFICATION	7.761013709601382E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997678184926019	WITHOUT_CLASSIFICATION	2.3218150739805297E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999769530935501	WITHOUT_CLASSIFICATION	2.3046906449905182E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9985890613005556	WITHOUT_CLASSIFICATION	0.0014109386994444035	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9964271457237607	WITHOUT_CLASSIFICATION	0.0035728542762394526	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9995626441744999	WITHOUT_CLASSIFICATION	4.3735582550009894E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9989217807842486	WITHOUT_CLASSIFICATION	0.001078219215751346	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.99997092271031	WITHOUT_CLASSIFICATION	2.9077289690013283E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997646815409722	WITHOUT_CLASSIFICATION	2.3531845902792568E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999707786411227	WITHOUT_CLASSIFICATION	2.922135887728588E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999412398466007	WITHOUT_CLASSIFICATION	5.876015339936055E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9948472503246559	WITHOUT_CLASSIFICATION	0.005152749675344105	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998178471083515	WITHOUT_CLASSIFICATION	1.8215289164852258E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999349258681274	WITHOUT_CLASSIFICATION	6.507413187261071E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9966842471188022	WITHOUT_CLASSIFICATION	0.0033157528811978126	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.99997092271031	WITHOUT_CLASSIFICATION	2.9077289690013283E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999755171921894	WITHOUT_CLASSIFICATION	2.4482807810697776E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993416638655247	WITHOUT_CLASSIFICATION	6.583361344753424E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993416638655247	WITHOUT_CLASSIFICATION	6.583361344753424E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9995597581839314	WITHOUT_CLASSIFICATION	4.402418160685583E-4	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999952476017114	WITHOUT_CLASSIFICATION	4.75239828849355E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999650816693969	WITHOUT_CLASSIFICATION	3.491833060308955E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9976253458128844	WITHOUT_CLASSIFICATION	0.0023746541871155777	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9976253458128844	WITHOUT_CLASSIFICATION	0.0023746541871155777	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9997743579715356	WITHOUT_CLASSIFICATION	2.2564202846431054E-4	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9970472845257101	WITHOUT_CLASSIFICATION	0.002952715474289819	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9970472845257101	WITHOUT_CLASSIFICATION	0.002952715474289819	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9989299087321418	WITHOUT_CLASSIFICATION	0.0010700912678581686	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999976272304136	WITHOUT_CLASSIFICATION	2.3727695863923902E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999801111025413	WITHOUT_CLASSIFICATION	1.9888897458830968E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999752309390185	WITHOUT_CLASSIFICATION	2.476906098142145E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999713935254091	WITHOUT_CLASSIFICATION	2.8606474590855158E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8365784539615796	WITHOUT_CLASSIFICATION	0.16342154603842043	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999488321665985	WITHOUT_CLASSIFICATION	5.116783340163391E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998635244812831	WITHOUT_CLASSIFICATION	1.3647551871685817E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999754242360001	WITHOUT_CLASSIFICATION	2.457576399990532E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999427304800134	WITHOUT_CLASSIFICATION	5.7269519986663465E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999974492325842	WITHOUT_CLASSIFICATION	2.5507674159350133E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998131572373545	WITHOUT_CLASSIFICATION	1.8684276264556557E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999156718257385	WITHOUT_CLASSIFICATION	8.432817426142445E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9991593712647018	WITHOUT_CLASSIFICATION	8.406287352981019E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999715784141978	WITHOUT_CLASSIFICATION	2.8421585802149347E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9990686122539826	WITHOUT_CLASSIFICATION	9.31387746017297E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998146178962651	WITHOUT_CLASSIFICATION	1.8538210373481948E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994386734313647	WITHOUT_CLASSIFICATION	5.613265686351938E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999801111025413	WITHOUT_CLASSIFICATION	1.9888897458830968E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9993497983138216	WITHOUT_CLASSIFICATION	6.50201686178382E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9993958081308093	WITHOUT_CLASSIFICATION	6.041918691906739E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999734445579483	WITHOUT_CLASSIFICATION	2.6555442051699986E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999713935254091	WITHOUT_CLASSIFICATION	2.8606474590855158E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994386734313647	WITHOUT_CLASSIFICATION	5.613265686351938E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9993497983138216	WITHOUT_CLASSIFICATION	6.50201686178382E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999734445579483	WITHOUT_CLASSIFICATION	2.6555442051699986E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995423486885308	WITHOUT_CLASSIFICATION	4.5765131146925626E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995423486885308	WITHOUT_CLASSIFICATION	4.5765131146925626E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9980273201437239	WITHOUT_CLASSIFICATION	0.0019726798562761535	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9965579748243568	WITHOUT_CLASSIFICATION	0.0034420251756431754	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999976490914373	WITHOUT_CLASSIFICATION	2.350908562791214E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999233858011383	WITHOUT_CLASSIFICATION	7.661419886169379E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9893829383160246	WITHOUT_CLASSIFICATION	0.0106170616839754	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998998710896446	WITHOUT_CLASSIFICATION	1.0012891035538769E-4	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9975948950654016	WITHOUT_CLASSIFICATION	0.002405104934598438	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9969138041416636	WITHOUT_CLASSIFICATION	0.003086195858336241	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998998710896446	WITHOUT_CLASSIFICATION	1.0012891035538769E-4	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999763064484358	WITHOUT_CLASSIFICATION	2.36935515640988E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9991822183050703	WITHOUT_CLASSIFICATION	8.17781694929877E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994386734313647	WITHOUT_CLASSIFICATION	5.613265686351938E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998625632220336	WITHOUT_CLASSIFICATION	1.3743677796638828E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999151713357554	WITHOUT_CLASSIFICATION	8.482866424468213E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9976440649891398	WITHOUT_CLASSIFICATION	0.0023559350108601214	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9997604468831913	WITHOUT_CLASSIFICATION	2.3955311680873273E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999818446718454	WITHOUT_CLASSIFICATION	1.8155328154598587E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999997406403925	WITHOUT_CLASSIFICATION	2.5935960750824463E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999586311073803	WITHOUT_CLASSIFICATION	4.1368892619748205E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9953441145794953	WITHOUT_CLASSIFICATION	0.004655885420504737	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999073833169805	WITHOUT_CLASSIFICATION	9.261668301948718E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9983650269503027	WITHOUT_CLASSIFICATION	0.001634973049697379	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995943865808952	WITHOUT_CLASSIFICATION	4.056134191047803E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998131572373545	WITHOUT_CLASSIFICATION	1.8684276264556557E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9998048290279332	WITHOUT_CLASSIFICATION	1.9517097206679762E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998951206785361	WITHOUT_CLASSIFICATION	1.0487932146395066E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.997856574319883	WITHOUT_CLASSIFICATION	0.002143425680117083	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9989906566732956	WITHOUT_CLASSIFICATION	0.001009343326704421	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9989906566732956	WITHOUT_CLASSIFICATION	0.001009343326704421	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998391443623782	WITHOUT_CLASSIFICATION	1.6085563762190084E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999883396954	WITHOUT_CLASSIFICATION	1.1660304606048679E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999110287925955	WITHOUT_CLASSIFICATION	8.897120740446915E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9885615399521704	WITHOUT_CLASSIFICATION	0.01143846004782968	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9992285578563299	WITHOUT_CLASSIFICATION	7.714421436701925E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.97273477849251	WITHOUT_CLASSIFICATION	0.027265221507490004	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.97273477849251	WITHOUT_CLASSIFICATION	0.027265221507490004	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9995582059410066	WITHOUT_CLASSIFICATION	4.417940589932858E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998749814779755	WITHOUT_CLASSIFICATION	1.2501852202448206E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998771548603488	WITHOUT_CLASSIFICATION	1.2284513965115415E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9997878063069809	WITHOUT_CLASSIFICATION	2.1219369301902442E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999217626886863	WITHOUT_CLASSIFICATION	7.823731131370606E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9993361670560547	WITHOUT_CLASSIFICATION	6.638329439453741E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998783941212233	WITHOUT_CLASSIFICATION	1.216058787767675E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9493816111924934	WITHOUT_CLASSIFICATION	0.05061838880750662	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998219866364113	WITHOUT_CLASSIFICATION	1.7801336358857464E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9994150924086851	WITHOUT_CLASSIFICATION	5.84907591314905E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997395864389951	WITHOUT_CLASSIFICATION	2.6041356100500344E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9990527826975432	WITHOUT_CLASSIFICATION	9.472173024567488E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9941989329935486	WITHOUT_CLASSIFICATION	0.005801067006451457	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091874458697	WITHOUT_CLASSIFICATION	9.081255413040366E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997009522750888	WITHOUT_CLASSIFICATION	2.990477249112802E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999781770917534	WITHOUT_CLASSIFICATION	2.1822908246607028E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999995250835976	WITHOUT_CLASSIFICATION	4.7491640244257015E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9997219556633691	WITHOUT_CLASSIFICATION	2.7804433663094396E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9991814102727506	WITHOUT_CLASSIFICATION	8.185897272494294E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999967492379723	WITHOUT_CLASSIFICATION	3.25076202769323E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999967492379723	WITHOUT_CLASSIFICATION	3.25076202769323E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9965575984496954	WITHOUT_CLASSIFICATION	0.003442401550304568	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9965575984496954	WITHOUT_CLASSIFICATION	0.003442401550304568	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9885615399521704	WITHOUT_CLASSIFICATION	0.01143846004782968	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999364782902983	WITHOUT_CLASSIFICATION	6.352170970169422E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994791657069735	WITHOUT_CLASSIFICATION	5.208342930264145E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9984862737690966	WITHOUT_CLASSIFICATION	0.0015137262309034205	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994791657069735	WITHOUT_CLASSIFICATION	5.208342930264145E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9984862737690966	WITHOUT_CLASSIFICATION	0.0015137262309034205	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996579817590346	WITHOUT_CLASSIFICATION	3.420182409654467E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999951218301562	WITHOUT_CLASSIFICATION	4.878169843799822E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998742218842449	WITHOUT_CLASSIFICATION	1.2577811575506458E-4	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999947221277327	WITHOUT_CLASSIFICATION	5.277872267393983E-6	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9916833383663319	WITHOUT_CLASSIFICATION	0.008316661633668182	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9984168187536946	WITHOUT_CLASSIFICATION	0.0015831812463054649	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9994038317723009	WITHOUT_CLASSIFICATION	5.961682276992028E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9979865478682254	WITHOUT_CLASSIFICATION	0.0020134521317746786	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997156733972646	WITHOUT_CLASSIFICATION	2.843266027353037E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999260818287985	WITHOUT_CLASSIFICATION	7.391817120146471E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999254245201949	WITHOUT_CLASSIFICATION	7.457547980509177E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999552698405848	WITHOUT_CLASSIFICATION	4.473015941527008E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999260213632897	WITHOUT_CLASSIFICATION	7.397863671036614E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999259485969665	WITHOUT_CLASSIFICATION	7.405140303350134E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999259485969665	WITHOUT_CLASSIFICATION	7.405140303350134E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996470805609097	WITHOUT_CLASSIFICATION	3.5291943909036567E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996470805609097	WITHOUT_CLASSIFICATION	3.5291943909036567E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999857900933956	WITHOUT_CLASSIFICATION	1.4209906604389054E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996579817590346	WITHOUT_CLASSIFICATION	3.420182409654467E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9870084001527779	WITHOUT_CLASSIFICATION	0.012991599847222082	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999744695757423	WITHOUT_CLASSIFICATION	2.5530424257609558E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9924824988075523	WITHOUT_CLASSIFICATION	0.007517501192447724	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999911177521238	WITHOUT_CLASSIFICATION	8.882247876196719E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9920055664499611	WITHOUT_CLASSIFICATION	0.007994433550039039	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996579817590346	WITHOUT_CLASSIFICATION	3.420182409654467E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999911177521238	WITHOUT_CLASSIFICATION	8.882247876196719E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9920055664499611	WITHOUT_CLASSIFICATION	0.007994433550039039	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9988209781494973	WITHOUT_CLASSIFICATION	0.001179021850502637	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9987985499341225	WITHOUT_CLASSIFICATION	0.001201450065877472	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997967708237296	WITHOUT_CLASSIFICATION	2.0322917627035506E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996579817590346	WITHOUT_CLASSIFICATION	3.420182409654467E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996579817590346	WITHOUT_CLASSIFICATION	3.420182409654467E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9997925816427977	WITHOUT_CLASSIFICATION	2.074183572022503E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9998002937813276	WITHOUT_CLASSIFICATION	1.997062186724091E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9987988838413647	WITHOUT_CLASSIFICATION	0.0012011161586352734	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.99996700610695	WITHOUT_CLASSIFICATION	3.299389304994399E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997090362772909	WITHOUT_CLASSIFICATION	2.909637227091388E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999702853683375	WITHOUT_CLASSIFICATION	2.9714631662449404E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.997049662595062	WITHOUT_CLASSIFICATION	0.0029503374049380717	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9995904208202886	WITHOUT_CLASSIFICATION	4.0957917971139207E-4	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999614699939611	WITHOUT_CLASSIFICATION	3.853000603880631E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9982509313317285	WITHOUT_CLASSIFICATION	0.0017490686682714968	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9991433713322871	WITHOUT_CLASSIFICATION	8.566286677128139E-4	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9817191563433267	WITHOUT_CLASSIFICATION	0.018280843656673255	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999909339344584	WITHOUT_CLASSIFICATION	9.066065541595064E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9997343777030628	WITHOUT_CLASSIFICATION	2.6562229693715973E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997469333828591	WITHOUT_CLASSIFICATION	2.5306661714077943E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.99996002054957	WITHOUT_CLASSIFICATION	3.9979450429929206E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694123137437	WITHOUT_CLASSIFICATION	4.305876862562668E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9995031298096406	WITHOUT_CLASSIFICATION	4.96870190359299E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9984356249687983	WITHOUT_CLASSIFICATION	0.0015643750312016556	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9984862737690966	WITHOUT_CLASSIFICATION	0.0015137262309034205	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9977638991512502	WITHOUT_CLASSIFICATION	0.002236100848749749	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694123137437	WITHOUT_CLASSIFICATION	4.305876862562668E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9659384323808412	WITHOUT_CLASSIFICATION	0.03406156761915879	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999649060883868	WITHOUT_CLASSIFICATION	3.509391161314895E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9906433426375761	WITHOUT_CLASSIFICATION	0.009356657362423955	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999492787260616	WITHOUT_CLASSIFICATION	5.072127393840642E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998605805313072	WITHOUT_CLASSIFICATION	1.394194686928521E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9991506235970887	WITHOUT_CLASSIFICATION	8.493764029112521E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995587733782797	WITHOUT_CLASSIFICATION	4.4122662172024817E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998872450980155	WITHOUT_CLASSIFICATION	1.1275490198446922E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999878221095518	WITHOUT_CLASSIFICATION	1.2177890448184805E-4	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999427574588234	WITHOUT_CLASSIFICATION	5.7242541176674205E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997500954577507	WITHOUT_CLASSIFICATION	2.4990454224929967E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999945834048396	WITHOUT_CLASSIFICATION	5.41659516039432E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683617399082	WITHOUT_CLASSIFICATION	3.1638260091831255E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990666473245602	WITHOUT_CLASSIFICATION	9.333526754397723E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9987268142165786	WITHOUT_CLASSIFICATION	0.0012731857834214677	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9950795275242323	WITHOUT_CLASSIFICATION	0.004920472475767629	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998385892635051	WITHOUT_CLASSIFICATION	1.614107364949167E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999186539229741	WITHOUT_CLASSIFICATION	8.13460770259551E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987448535501784	WITHOUT_CLASSIFICATION	0.0012551464498215955	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999967087486377	WITHOUT_CLASSIFICATION	3.291251362296041E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997492701818747	WITHOUT_CLASSIFICATION	0.0025072981812529326	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980796436881919	WITHOUT_CLASSIFICATION	0.0019203563118081798	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968801463275181	WITHOUT_CLASSIFICATION	0.0031198536724819335	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997523851661806	WITHOUT_CLASSIFICATION	2.4761483381940627E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966012036671078	WITHOUT_CLASSIFICATION	0.0033987963328921873	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9962442924178266	WITHOUT_CLASSIFICATION	0.003755707582173431	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.998520424377028	WITHOUT_CLASSIFICATION	0.0014795756229718739	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971949306632657	WITHOUT_CLASSIFICATION	0.0028050693367343317	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972753379064129	WITHOUT_CLASSIFICATION	0.002724662093587178	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967800848170376	WITHOUT_CLASSIFICATION	0.003219915182962418	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993247405120458	WITHOUT_CLASSIFICATION	0.006752594879542031	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962117970255212	WITHOUT_CLASSIFICATION	0.003788202974478827	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962642177284097	WITHOUT_CLASSIFICATION	0.003735782271590327	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999946406560392	WITHOUT_CLASSIFICATION	5.359343960797802E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997473728664411	WITHOUT_CLASSIFICATION	2.5262713355888466E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8138100200814199	WITHOUT_CLASSIFICATION	0.18618997991858005	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999787556334954	WITHOUT_CLASSIFICATION	2.1244366504631682E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999751859593338	WITHOUT_CLASSIFICATION	2.4814040666223874E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990424913231944	WITHOUT_CLASSIFICATION	9.575086768055578E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9966200622317669	WITHOUT_CLASSIFICATION	0.003379937768233084	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9994458479794042	WITHOUT_CLASSIFICATION	5.541520205958844E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9988209781494973	WITHOUT_CLASSIFICATION	0.001179021850502637	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9990852944408101	WITHOUT_CLASSIFICATION	9.147055591898258E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9991924227685056	WITHOUT_CLASSIFICATION	8.075772314944081E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998230905221953	WITHOUT_CLASSIFICATION	1.7690947780463816E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998265552028484	WITHOUT_CLASSIFICATION	1.7344479715163146E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998506883864502	WITHOUT_CLASSIFICATION	1.4931161354982613E-4	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9984748888691379	WITHOUT_CLASSIFICATION	0.0015251111308620838	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998516363188651	WITHOUT_CLASSIFICATION	1.4836368113498087E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994127380944013	WITHOUT_CLASSIFICATION	5.872619055987447E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998025668261347	WITHOUT_CLASSIFICATION	1.9743317386538002E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998133064868245	WITHOUT_CLASSIFICATION	1.8669351317547752E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997488935932968	WITHOUT_CLASSIFICATION	2.5110640670316894E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9978057251309517	WITHOUT_CLASSIFICATION	0.0021942748690483784	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9991069034870825	WITHOUT_CLASSIFICATION	8.930965129174618E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.99982412961106	WITHOUT_CLASSIFICATION	1.7587038893994493E-4	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998932135609662	WITHOUT_CLASSIFICATION	1.0678643903373915E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973217669791506	WITHOUT_CLASSIFICATION	0.0026782330208494558	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998801856551435	WITHOUT_CLASSIFICATION	1.1981434485643319E-4	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998287482891421	WITHOUT_CLASSIFICATION	1.7125171085786943E-4	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999054739844846	WITHOUT_CLASSIFICATION	9.45260155154097E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998751168041992	WITHOUT_CLASSIFICATION	1.2488319580074937E-4	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996041056377822	WITHOUT_CLASSIFICATION	3.9589436221784083E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9978319576288738	WITHOUT_CLASSIFICATION	0.002168042371126218	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999982003234902	WITHOUT_CLASSIFICATION	1.7996765098004223E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997551913598743	WITHOUT_CLASSIFICATION	2.4480864012565816E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990424913231944	WITHOUT_CLASSIFICATION	9.575086768055578E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9993210782744499	WITHOUT_CLASSIFICATION	6.789217255500846E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999982942894914	WITHOUT_CLASSIFICATION	1.705710508643732E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999417587450856	WITHOUT_CLASSIFICATION	5.824125491440331E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999787556334954	WITHOUT_CLASSIFICATION	2.1244366504631682E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9997499275313217	WITHOUT_CLASSIFICATION	2.500724686782098E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9998005560617138	WITHOUT_CLASSIFICATION	1.9944393828618678E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996471199071217	WITHOUT_CLASSIFICATION	3.5288009287822537E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999892404644068	WITHOUT_CLASSIFICATION	1.0759535593098517E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9992626891003396	WITHOUT_CLASSIFICATION	7.373108996604196E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999815268634464	WITHOUT_CLASSIFICATION	1.8473136553564172E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997745609001794	WITHOUT_CLASSIFICATION	2.2543909982068605E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997855797936812	WITHOUT_CLASSIFICATION	2.1442020631882771E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997467562798634	WITHOUT_CLASSIFICATION	2.5324372013664693E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988670930606003	WITHOUT_CLASSIFICATION	0.0011329069393997547	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999921773341794	WITHOUT_CLASSIFICATION	7.822665820606285E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999928251704252	WITHOUT_CLASSIFICATION	7.174829574873997E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9988209781494973	WITHOUT_CLASSIFICATION	0.001179021850502637	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978662105089	WITHOUT_CLASSIFICATION	2.1337894910995222E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9996607504120194	WITHOUT_CLASSIFICATION	3.3924958798062016E-4	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998082464777904	WITHOUT_CLASSIFICATION	1.917535222095229E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999659028178917	WITHOUT_CLASSIFICATION	3.4097182108384906E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9995163302548169	WITHOUT_CLASSIFICATION	4.8366974518302086E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999809186005997	WITHOUT_CLASSIFICATION	1.9081399400304214E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999226756417685	WITHOUT_CLASSIFICATION	7.732435823150278E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999502066994677	WITHOUT_CLASSIFICATION	4.979330053229704E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999207547115347	WITHOUT_CLASSIFICATION	7.924528846524172E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9988791728891276	WITHOUT_CLASSIFICATION	0.0011208271108723324	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9966996969867892	WITHOUT_CLASSIFICATION	0.003300303013210867	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9992437351081057	WITHOUT_CLASSIFICATION	7.562648918942692E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999787556334954	WITHOUT_CLASSIFICATION	2.1244366504631682E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990424913231944	WITHOUT_CLASSIFICATION	9.575086768055578E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9994735646469103	WITHOUT_CLASSIFICATION	5.264353530897283E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9972078036111528	WITHOUT_CLASSIFICATION	0.0027921963888471717	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9955188873576837	WITHOUT_CLASSIFICATION	0.004481112642316302	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990424913231944	WITHOUT_CLASSIFICATION	9.575086768055578E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999654992998921	WITHOUT_CLASSIFICATION	3.4500700107862226E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999659028178917	WITHOUT_CLASSIFICATION	3.4097182108384906E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.998916212200879	WITHOUT_CLASSIFICATION	0.0010837877991210724	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997145803340993	WITHOUT_CLASSIFICATION	2.854196659007367E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999938735451546	WITHOUT_CLASSIFICATION	6.126454845387525E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999815268634464	WITHOUT_CLASSIFICATION	1.8473136553564172E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997745609001794	WITHOUT_CLASSIFICATION	2.2543909982068605E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997855797936812	WITHOUT_CLASSIFICATION	2.1442020631882771E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9997619202520766	WITHOUT_CLASSIFICATION	2.3807974792345563E-4	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9994978236890465	WITHOUT_CLASSIFICATION	5.021763109533777E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9994502289513536	WITHOUT_CLASSIFICATION	5.497710486463955E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999876271007729	WITHOUT_CLASSIFICATION	1.2372899227188518E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999734274279301	WITHOUT_CLASSIFICATION	2.6572572069905753E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990424913231944	WITHOUT_CLASSIFICATION	9.575086768055578E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997467562798634	WITHOUT_CLASSIFICATION	2.5324372013664693E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988670930606003	WITHOUT_CLASSIFICATION	0.0011329069393997547	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410824563252	WITHOUT_CLASSIFICATION	1.5891754367483208E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995774575361503	WITHOUT_CLASSIFICATION	4.225424638496687E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998186741014549	WITHOUT_CLASSIFICATION	1.8132589854515926E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999764015620081	WITHOUT_CLASSIFICATION	2.3598437991917742E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9995146715345256	WITHOUT_CLASSIFICATION	4.853284654744489E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999951080850604	WITHOUT_CLASSIFICATION	4.8919149395735825E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9992515139360716	WITHOUT_CLASSIFICATION	7.484860639284572E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9997210882690247	WITHOUT_CLASSIFICATION	2.7891173097532927E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998157106695852	WITHOUT_CLASSIFICATION	1.8428933041474753E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966012036671078	WITHOUT_CLASSIFICATION	0.0033987963328921873	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972753379064129	WITHOUT_CLASSIFICATION	0.002724662093587178	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999943108439145	WITHOUT_CLASSIFICATION	5.689156085491667E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998776895745355	WITHOUT_CLASSIFICATION	1.2231042546444063E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963338856689837	WITHOUT_CLASSIFICATION	0.0036661143310163192	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9984203738575814	WITHOUT_CLASSIFICATION	0.0015796261424185503	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967800848170376	WITHOUT_CLASSIFICATION	0.003219915182962418	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961860991207048	WITHOUT_CLASSIFICATION	0.003813900879295293	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998751168041992	WITHOUT_CLASSIFICATION	1.2488319580074937E-4	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999743963408833	WITHOUT_CLASSIFICATION	2.560365911675808E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998161751743251	WITHOUT_CLASSIFICATION	1.838248256749437E-4	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999923020386324	WITHOUT_CLASSIFICATION	7.697961367450978E-6	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999841997324711	WITHOUT_CLASSIFICATION	1.580026752891968E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999991997460204	WITHOUT_CLASSIFICATION	8.002539796972284E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.998312203910045	WITHOUT_CLASSIFICATION	0.0016877960899550598	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999246815044388	WITHOUT_CLASSIFICATION	7.531849556122792E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995587733782797	WITHOUT_CLASSIFICATION	4.4122662172024817E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.998633189783662	WITHOUT_CLASSIFICATION	0.0013668102163380768	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999862536092856	WITHOUT_CLASSIFICATION	1.3746390714401856E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998463213044125	WITHOUT_CLASSIFICATION	1.5367869558755045E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998534152818263	WITHOUT_CLASSIFICATION	1.4658471817373332E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999500596588299	WITHOUT_CLASSIFICATION	4.9940341170081064E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9962831046027742	WITHOUT_CLASSIFICATION	0.0037168953972257575	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994820742970907	WITHOUT_CLASSIFICATION	5.179257029093549E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992947853432971	WITHOUT_CLASSIFICATION	7.052146567029313E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999760576127684	WITHOUT_CLASSIFICATION	2.3942387231571985E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9993561087601643	WITHOUT_CLASSIFICATION	6.438912398357043E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998693682534465	WITHOUT_CLASSIFICATION	1.3063174655351262E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999846042493334	WITHOUT_CLASSIFICATION	1.5395750666604685E-4	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997789741557377	WITHOUT_CLASSIFICATION	2.2102584426242345E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998745320593885	WITHOUT_CLASSIFICATION	1.2546794061148812E-4	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9981717264449407	WITHOUT_CLASSIFICATION	0.0018282735550593015	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998042298933862	WITHOUT_CLASSIFICATION	1.957701066137837E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997789741557377	WITHOUT_CLASSIFICATION	2.2102584426242345E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998795486824676	WITHOUT_CLASSIFICATION	1.2045131753243203E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999319399979321	WITHOUT_CLASSIFICATION	6.806000206787977E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998887955490725	WITHOUT_CLASSIFICATION	1.1120445092743763E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998991925037425	WITHOUT_CLASSIFICATION	1.0080749625748955E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997083329084768	WITHOUT_CLASSIFICATION	2.9166709152311424E-4	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997128341497503	WITHOUT_CLASSIFICATION	2.871658502497461E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9994476447319167	WITHOUT_CLASSIFICATION	5.523552680832254E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9991127230009047	WITHOUT_CLASSIFICATION	8.872769990953633E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9991127230009047	WITHOUT_CLASSIFICATION	8.872769990953633E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999956021840115	WITHOUT_CLASSIFICATION	4.39781598850186E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999845737402375	WITHOUT_CLASSIFICATION	1.5426259762497046E-4	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997132322006265	WITHOUT_CLASSIFICATION	2.8676779937356544E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999068281427502	WITHOUT_CLASSIFICATION	9.317185724977363E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999980516774462	WITHOUT_CLASSIFICATION	1.9483225537654438E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999416087613964	WITHOUT_CLASSIFICATION	5.839123860359465E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999996540217039	WITHOUT_CLASSIFICATION	3.4597829612524054E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999614413628952	WITHOUT_CLASSIFICATION	3.855863710467053E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998506665113003	WITHOUT_CLASSIFICATION	1.4933348869971682E-4	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999118559722364	WITHOUT_CLASSIFICATION	8.814402776359386E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999007058348972	WITHOUT_CLASSIFICATION	9.929416510282005E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999972402000134	WITHOUT_CLASSIFICATION	2.7597999866045713E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996755205164727	WITHOUT_CLASSIFICATION	3.244794835273741E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8000231790325112	WITHOUT_CLASSIFICATION	0.1999768209674888	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.998502561517984	WITHOUT_CLASSIFICATION	0.0014974384820159977	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999367226331429	WITHOUT_CLASSIFICATION	6.327736685700862E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997208683487518	WITHOUT_CLASSIFICATION	2.791316512481512E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9903613912941913	WITHOUT_CLASSIFICATION	0.009638608705808686	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999198318460313	WITHOUT_CLASSIFICATION	8.016815396870052E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997256330847235	WITHOUT_CLASSIFICATION	2.743669152764599E-4	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998957849787572	WITHOUT_CLASSIFICATION	1.0421502124281143E-4	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997256299687696	WITHOUT_CLASSIFICATION	2.74370031230463E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9995031174132235	WITHOUT_CLASSIFICATION	4.968825867764775E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999452027684435	WITHOUT_CLASSIFICATION	5.47972315566129E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997038807657437	WITHOUT_CLASSIFICATION	2.9611923425629797E-4	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995385622524187	WITHOUT_CLASSIFICATION	4.614377475813384E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9981645927635803	WITHOUT_CLASSIFICATION	0.0018354072364198028	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9960067530176344	WITHOUT_CLASSIFICATION	0.003993246982365573	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9976482634310655	WITHOUT_CLASSIFICATION	0.0023517365689345467	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9990687210494598	WITHOUT_CLASSIFICATION	9.312789505402076E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998777718102424	WITHOUT_CLASSIFICATION	1.2222818975760437E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9975826587568757	WITHOUT_CLASSIFICATION	0.0024173412431242602	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9994100802239445	WITHOUT_CLASSIFICATION	5.899197760555124E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9995136432677298	WITHOUT_CLASSIFICATION	4.8635673227007494E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997460604118724	WITHOUT_CLASSIFICATION	2.539395881276373E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9993430061164278	WITHOUT_CLASSIFICATION	6.569938835722242E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995651497311411	WITHOUT_CLASSIFICATION	4.348502688589909E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9916023671107714	WITHOUT_CLASSIFICATION	0.008397632889228509	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9970197991795768	WITHOUT_CLASSIFICATION	0.0029802008204231666	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9997415268186051	WITHOUT_CLASSIFICATION	2.5847318139496036E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997735038508386	WITHOUT_CLASSIFICATION	2.2649614916139251E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9988209781494973	WITHOUT_CLASSIFICATION	0.001179021850502637	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9988209781494973	WITHOUT_CLASSIFICATION	0.001179021850502637	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998875921472395	WITHOUT_CLASSIFICATION	1.1240785276043451E-4	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999727415697565	WITHOUT_CLASSIFICATION	2.7258430243452504E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999309096920255	WITHOUT_CLASSIFICATION	6.909030797456484E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999856822643399	WITHOUT_CLASSIFICATION	1.4317735660181263E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999973285434655	WITHOUT_CLASSIFICATION	2.6714565344904522E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9998946426842233	WITHOUT_CLASSIFICATION	1.0535731577664989E-4	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9991730036711977	WITHOUT_CLASSIFICATION	8.269963288024574E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9961412606368402	WITHOUT_CLASSIFICATION	0.0038587393631599547	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999806736263926	WITHOUT_CLASSIFICATION	1.9326373607392086E-4	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999521070020014	WITHOUT_CLASSIFICATION	4.789299799859421E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999308644659945	WITHOUT_CLASSIFICATION	6.91355340055046E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997837081463342	WITHOUT_CLASSIFICATION	2.1629185366572344E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9990784993431002	WITHOUT_CLASSIFICATION	9.215006568997375E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9990928978978295	WITHOUT_CLASSIFICATION	9.071021021704925E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.998016524901009	WITHOUT_CLASSIFICATION	0.001983475098990971	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9984781160022639	WITHOUT_CLASSIFICATION	0.001521883997736124	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9994133282679605	WITHOUT_CLASSIFICATION	5.86671732039512E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9979584914110291	WITHOUT_CLASSIFICATION	0.002041508588970926	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9996147390035157	WITHOUT_CLASSIFICATION	3.8526099648434356E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999523514695047	WITHOUT_CLASSIFICATION	4.764853049527233E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9979584914110291	WITHOUT_CLASSIFICATION	0.002041508588970926	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999976309467136	WITHOUT_CLASSIFICATION	2.3690532864060065E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999607271458207	WITHOUT_CLASSIFICATION	3.927285417931918E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9982978834833501	WITHOUT_CLASSIFICATION	0.0017021165166498436	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9986235139281894	WITHOUT_CLASSIFICATION	0.001376486071810652	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9979038022597375	WITHOUT_CLASSIFICATION	0.0020961977402625324	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999946876798158	WITHOUT_CLASSIFICATION	5.312320184089468E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999813955624275	WITHOUT_CLASSIFICATION	1.8604437572499396E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996933630500967	WITHOUT_CLASSIFICATION	3.0663694990329507E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997506395635964	WITHOUT_CLASSIFICATION	2.49360436403636E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999833110579687	WITHOUT_CLASSIFICATION	1.6688942031407735E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999819131053511	WITHOUT_CLASSIFICATION	1.8086894648913405E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9935485179693135	WITHOUT_CLASSIFICATION	0.006451482030686459	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998435109597726	WITHOUT_CLASSIFICATION	1.5648904022736782E-4	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9966368892572867	WITHOUT_CLASSIFICATION	0.0033631107427133174	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9971726226869675	WITHOUT_CLASSIFICATION	0.0028273773130324683	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9960801565439283	WITHOUT_CLASSIFICATION	0.003919843456071769	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999094835717429	WITHOUT_CLASSIFICATION	9.051642825704754E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9923506176403742	WITHOUT_CLASSIFICATION	0.0076493823596257325	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9992167408095436	WITHOUT_CLASSIFICATION	7.832591904564502E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998966118228391	WITHOUT_CLASSIFICATION	1.0338817716095433E-4	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999046971429143	WITHOUT_CLASSIFICATION	9.530285708575642E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9592821500318598	WITHOUT_CLASSIFICATION	0.040717849968140124	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9760777278295173	WITHOUT_CLASSIFICATION	0.023922272170482744	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9991624627372045	WITHOUT_CLASSIFICATION	8.375372627953837E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9979053581852569	WITHOUT_CLASSIFICATION	0.0020946418147430638	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9790164015605952	WITHOUT_CLASSIFICATION	0.020983598439404803	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998559372738812	WITHOUT_CLASSIFICATION	1.4406272611890063E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9962831046027742	WITHOUT_CLASSIFICATION	0.0037168953972257575	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9983362050261108	WITHOUT_CLASSIFICATION	0.0016637949738891992	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999971315687096	WITHOUT_CLASSIFICATION	2.8684312903548748E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9403851851138092	WITHOUT_CLASSIFICATION	0.05961481488619085	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9995799478028053	WITHOUT_CLASSIFICATION	4.2005219719466763E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999890461115847	WITHOUT_CLASSIFICATION	1.095388841527562E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9921857444504376	WITHOUT_CLASSIFICATION	0.007814255549562511	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9977327009600976	WITHOUT_CLASSIFICATION	0.002267299039902331	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999658129012727	WITHOUT_CLASSIFICATION	3.4187098727212356E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9997568074193883	WITHOUT_CLASSIFICATION	2.431925806117519E-4	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9997624365538632	WITHOUT_CLASSIFICATION	2.375634461369001E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999191866579801	WITHOUT_CLASSIFICATION	8.08133420199026E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998407096069556	WITHOUT_CLASSIFICATION	1.5929039304439515E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9991312110986522	WITHOUT_CLASSIFICATION	8.687889013476752E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9965707587630447	WITHOUT_CLASSIFICATION	0.0034292412369552466	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9978109066819911	WITHOUT_CLASSIFICATION	0.002189093318008883	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9992292680187013	WITHOUT_CLASSIFICATION	7.707319812986305E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999493722024713	WITHOUT_CLASSIFICATION	5.062779752877513E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9995883776708052	WITHOUT_CLASSIFICATION	4.116223291947169E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999653382458799	WITHOUT_CLASSIFICATION	3.466175412015029E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9983204461450175	WITHOUT_CLASSIFICATION	0.001679553854982556	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996197876859	WITHOUT_CLASSIFICATION	3.8021231409999417E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995691970566684	WITHOUT_CLASSIFICATION	4.30802943331678E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999837283927644	WITHOUT_CLASSIFICATION	1.6271607235591692E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9993670318760369	WITHOUT_CLASSIFICATION	6.329681239630927E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9986659906701701	WITHOUT_CLASSIFICATION	0.0013340093298298444	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999237718457634	WITHOUT_CLASSIFICATION	7.622815423661081E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999747791147178	WITHOUT_CLASSIFICATION	2.522088528216894E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9966219194971789	WITHOUT_CLASSIFICATION	0.00337808050282109	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9495027027798142	WITHOUT_CLASSIFICATION	0.05049729722018591	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990925675057806	WITHOUT_CLASSIFICATION	9.074324942193963E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999141948339515	WITHOUT_CLASSIFICATION	8.580516604850062E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999747600802378	WITHOUT_CLASSIFICATION	2.523991976219789E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999926923848629	WITHOUT_CLASSIFICATION	7.307615137225629E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998325265643456	WITHOUT_CLASSIFICATION	1.6747343565436286E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682175106857	WITHOUT_CLASSIFICATION	3.178248931440819E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9731503165438353	WITHOUT_CLASSIFICATION	0.026849683456164727	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9991916972648254	WITHOUT_CLASSIFICATION	8.083027351746784E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997475713759313	WITHOUT_CLASSIFICATION	2.5242862406873426E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9991916972648254	WITHOUT_CLASSIFICATION	8.083027351746784E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994462486132574	WITHOUT_CLASSIFICATION	5.537513867425618E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999371962089916	WITHOUT_CLASSIFICATION	6.280379100840494E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9997000643048332	WITHOUT_CLASSIFICATION	2.9993569516688855E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999911947950496	WITHOUT_CLASSIFICATION	8.805204950439496E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999681359427975	WITHOUT_CLASSIFICATION	3.186405720254934E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998859770566513	WITHOUT_CLASSIFICATION	1.1402294334871444E-4	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9997194078971813	WITHOUT_CLASSIFICATION	2.8059210281869797E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999761684230111	WITHOUT_CLASSIFICATION	2.38315769889014E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9996712010869655	WITHOUT_CLASSIFICATION	3.287989130344712E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.6977184706571603	WITHOUT_CLASSIFICATION	0.30228152934283975	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.997880746477439	WITHOUT_CLASSIFICATION	0.002119253522561146	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9983112696006107	WITHOUT_CLASSIFICATION	0.0016887303993893246	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993502544826275	WITHOUT_CLASSIFICATION	6.497455173725966E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9998933203644772	WITHOUT_CLASSIFICATION	1.066796355228624E-4	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6220488594019032	IMPLEMENTATION	0.37795114059809676	WITHOUT_CLASSIFICATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996043111480768	WITHOUT_CLASSIFICATION	3.956888519231175E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997940201108048	WITHOUT_CLASSIFICATION	2.0597988919524807E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997940201108048	WITHOUT_CLASSIFICATION	2.0597988919524807E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999521070020014	WITHOUT_CLASSIFICATION	4.789299799859421E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9995979585943594	WITHOUT_CLASSIFICATION	4.020414056404917E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999941907064315	WITHOUT_CLASSIFICATION	5.809293568438511E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999912702623647	WITHOUT_CLASSIFICATION	8.729737635392433E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999266313824713	WITHOUT_CLASSIFICATION	7.336861752876233E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999244873355266	WITHOUT_CLASSIFICATION	7.551266447333534E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9991976923902138	WITHOUT_CLASSIFICATION	8.023076097861833E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999476143678176	WITHOUT_CLASSIFICATION	5.238563218226512E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9996105788601752	WITHOUT_CLASSIFICATION	3.894211398247382E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999184272629041	WITHOUT_CLASSIFICATION	8.157273709595849E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999878792208842	WITHOUT_CLASSIFICATION	1.2120779115813575E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.99976445398171	WITHOUT_CLASSIFICATION	2.3554601829006095E-4	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997777992914888	WITHOUT_CLASSIFICATION	2.2220070851133403E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999814041281286	WITHOUT_CLASSIFICATION	1.8595871871311646E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9988979440218393	WITHOUT_CLASSIFICATION	0.001102055978160756	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9991939939939898	WITHOUT_CLASSIFICATION	8.060060060102102E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999846187883848	WITHOUT_CLASSIFICATION	1.538121161514845E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9933866455897103	WITHOUT_CLASSIFICATION	0.006613354410289662	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9976481054613183	WITHOUT_CLASSIFICATION	0.0023518945386817487	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999911620022228	WITHOUT_CLASSIFICATION	8.837997777160367E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9998968073080139	WITHOUT_CLASSIFICATION	1.0319269198608543E-4	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9993997099016053	WITHOUT_CLASSIFICATION	6.00290098394636E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998002614057625	WITHOUT_CLASSIFICATION	1.997385942374416E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995298903548858	WITHOUT_CLASSIFICATION	4.701096451140867E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9993835074112476	WITHOUT_CLASSIFICATION	6.164925887524667E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999876773373163	WITHOUT_CLASSIFICATION	1.2322662683708386E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9991924373522457	WITHOUT_CLASSIFICATION	8.075626477543225E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.998400445118108	WITHOUT_CLASSIFICATION	0.0015995548818920238	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.996747623444458	WITHOUT_CLASSIFICATION	0.0032523765555420303	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999977231942934	WITHOUT_CLASSIFICATION	2.2768057066034196E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998252800690265	WITHOUT_CLASSIFICATION	1.7471993097361205E-4	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999537582198342	WITHOUT_CLASSIFICATION	4.6241780165830186E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9989865999491058	WITHOUT_CLASSIFICATION	0.001013400050894254	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9963651741198437	WITHOUT_CLASSIFICATION	0.0036348258801563163	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999959708439849	WITHOUT_CLASSIFICATION	4.0291560150900515E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999230893914888	WITHOUT_CLASSIFICATION	7.691060851124975E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998341150386568	WITHOUT_CLASSIFICATION	1.6588496134322674E-4	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999889925882544	WITHOUT_CLASSIFICATION	1.1007411745605122E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999996459927321	WITHOUT_CLASSIFICATION	3.540072678974825E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9977660687509804	WITHOUT_CLASSIFICATION	0.0022339312490195578	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997888971532025	WITHOUT_CLASSIFICATION	2.1110284679755413E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997496617482224	WITHOUT_CLASSIFICATION	2.5033825177755737E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9966879733210587	WITHOUT_CLASSIFICATION	0.0033120266789411767	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6175492822806652	IMPLEMENTATION	0.38245071771933475	WITHOUT_CLASSIFICATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9985654324411288	WITHOUT_CLASSIFICATION	0.0014345675588711153	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9986379719468373	WITHOUT_CLASSIFICATION	0.0013620280531625821	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9993402748504768	WITHOUT_CLASSIFICATION	6.597251495230975E-4	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997550530992	WITHOUT_CLASSIFICATION	2.4494690072643844E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9997423691177406	WITHOUT_CLASSIFICATION	2.576308822594856E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999933666779372	WITHOUT_CLASSIFICATION	6.633322062795491E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997496617482224	WITHOUT_CLASSIFICATION	2.5033825177755737E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998951041493008	WITHOUT_CLASSIFICATION	1.048958506990571E-4	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9928351516882703	WITHOUT_CLASSIFICATION	0.007164848311729681	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9980741888892315	WITHOUT_CLASSIFICATION	0.0019258111107686058	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9981805376231887	WITHOUT_CLASSIFICATION	0.0018194623768113035	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999654992998921	WITHOUT_CLASSIFICATION	3.4500700107862226E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999654992998921	WITHOUT_CLASSIFICATION	3.4500700107862226E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999946469680175	WITHOUT_CLASSIFICATION	5.353031982405552E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999778237024411	WITHOUT_CLASSIFICATION	2.2176297558853583E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999890316262171	WITHOUT_CLASSIFICATION	1.096837378288085E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9996092757200011	WITHOUT_CLASSIFICATION	3.9072427999886546E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9983179279650062	WITHOUT_CLASSIFICATION	0.0016820720349937704	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998376553664312	WITHOUT_CLASSIFICATION	1.623446335687073E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.99988988724586	WITHOUT_CLASSIFICATION	1.1011275413994787E-4	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996073547800696	WITHOUT_CLASSIFICATION	3.9264521993044203E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9985949440608688	WITHOUT_CLASSIFICATION	0.0014050559391312926	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996843230039567	WITHOUT_CLASSIFICATION	3.156769960432634E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999653933803282	WITHOUT_CLASSIFICATION	3.460661967181301E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9992269272180713	WITHOUT_CLASSIFICATION	7.730727819286808E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9995712469842776	WITHOUT_CLASSIFICATION	4.2875301572245213E-4	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9996188976856311	WITHOUT_CLASSIFICATION	3.811023143689226E-4	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9973409045159705	WITHOUT_CLASSIFICATION	0.0026590954840295536	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9908209846550885	WITHOUT_CLASSIFICATION	0.00917901534491145	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997136841705342	WITHOUT_CLASSIFICATION	2.8631582946579204E-4	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999181570946668	WITHOUT_CLASSIFICATION	8.184290533326656E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9988815169325517	WITHOUT_CLASSIFICATION	0.0011184830674483444	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998198614067999	WITHOUT_CLASSIFICATION	1.801385932001334E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999273965735104	WITHOUT_CLASSIFICATION	7.260342648968856E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9806256557200607	WITHOUT_CLASSIFICATION	0.019374344279939372	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9984470697101301	WITHOUT_CLASSIFICATION	0.0015529302898699036	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.994688327916288	WITHOUT_CLASSIFICATION	0.0053116720837120615	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998606374911297	WITHOUT_CLASSIFICATION	1.3936250887029995E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999991600205976	WITHOUT_CLASSIFICATION	8.399794023149505E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999962028301538	WITHOUT_CLASSIFICATION	3.7971698461856684E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998286279231432	WITHOUT_CLASSIFICATION	1.7137207685674535E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9995725480659583	WITHOUT_CLASSIFICATION	4.2745193404171775E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999962028301538	WITHOUT_CLASSIFICATION	3.7971698461856684E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9988551784443679	WITHOUT_CLASSIFICATION	0.0011448215556320513	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999813553450526	WITHOUT_CLASSIFICATION	1.8644654947335365E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999741992565224	WITHOUT_CLASSIFICATION	2.58007434775081E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9994190833299132	WITHOUT_CLASSIFICATION	5.809166700867604E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9617623048220703	WITHOUT_CLASSIFICATION	0.038237695177929625	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999878792208842	WITHOUT_CLASSIFICATION	1.2120779115813575E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999336008027644	WITHOUT_CLASSIFICATION	6.639919723560874E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.998312203910045	WITHOUT_CLASSIFICATION	0.0016877960899550598	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999349902670238	WITHOUT_CLASSIFICATION	6.500973297628245E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998454305006524	WITHOUT_CLASSIFICATION	1.5456949934745384E-4	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999893408375913	WITHOUT_CLASSIFICATION	1.0659162408785116E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999001459138804	WITHOUT_CLASSIFICATION	9.985408611963238E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9995769107630004	WITHOUT_CLASSIFICATION	4.230892369995319E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999763029808397	WITHOUT_CLASSIFICATION	2.3697019160193553E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998822870024422	WITHOUT_CLASSIFICATION	1.1771299755785471E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999493432303647	WITHOUT_CLASSIFICATION	5.06567696354166E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999697292023111	WITHOUT_CLASSIFICATION	3.0270797688902913E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9982196341636229	WITHOUT_CLASSIFICATION	0.001780365836377214	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9995135237481707	WITHOUT_CLASSIFICATION	4.864762518292741E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999901815803248	WITHOUT_CLASSIFICATION	9.818419675196755E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9996985946226187	WITHOUT_CLASSIFICATION	3.014053773813184E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9997815045444872	WITHOUT_CLASSIFICATION	2.184954555127071E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999818744375281	WITHOUT_CLASSIFICATION	1.8125562471897822E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999504496763777	WITHOUT_CLASSIFICATION	4.9550323622344504E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998121473604928	WITHOUT_CLASSIFICATION	1.8785263950715244E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999228796652343	WITHOUT_CLASSIFICATION	7.71203347657043E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9985543938238459	WITHOUT_CLASSIFICATION	0.0014456061761539717	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9989315807510667	WITHOUT_CLASSIFICATION	0.001068419248933206	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9998792721922878	WITHOUT_CLASSIFICATION	1.2072780771214857E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989813793015893	WITHOUT_CLASSIFICATION	0.0010186206984107613	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990820827560978	WITHOUT_CLASSIFICATION	9.179172439021805E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9977841052223896	WITHOUT_CLASSIFICATION	0.00221589477761037	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999269979707249	WITHOUT_CLASSIFICATION	7.300202927511235E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999931456484273	WITHOUT_CLASSIFICATION	6.854351572709667E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999655555946206	WITHOUT_CLASSIFICATION	3.444440537933581E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996985538718579	WITHOUT_CLASSIFICATION	3.01446128142067E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999488451984899	WITHOUT_CLASSIFICATION	5.1154801509998344E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997552468789387	WITHOUT_CLASSIFICATION	2.447531210613108E-4	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9987008042925815	WITHOUT_CLASSIFICATION	0.0012991957074185547	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999547805686496	WITHOUT_CLASSIFICATION	4.5219431350334244E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999649302884923	WITHOUT_CLASSIFICATION	3.5069711507696286E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999763086408661	WITHOUT_CLASSIFICATION	2.369135913400348E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9997621637708081	WITHOUT_CLASSIFICATION	2.378362291920349E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998076561966384	WITHOUT_CLASSIFICATION	1.923438033617179E-4	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9997956257018867	WITHOUT_CLASSIFICATION	2.0437429811316095E-4	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998537341232547	WITHOUT_CLASSIFICATION	1.4626587674518998E-4	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999595484145631	WITHOUT_CLASSIFICATION	4.045158543689207E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999837829647008	WITHOUT_CLASSIFICATION	1.621703529921091E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998784659033738	WITHOUT_CLASSIFICATION	1.2153409662616107E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999917575924483	WITHOUT_CLASSIFICATION	8.242407551801445E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999521927632307	WITHOUT_CLASSIFICATION	4.7807236769269485E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997899274351445	WITHOUT_CLASSIFICATION	2.100725648554453E-4	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997485864047496	WITHOUT_CLASSIFICATION	2.5141359525034156E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997158430092781	WITHOUT_CLASSIFICATION	2.8415699072195704E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999591696834247	WITHOUT_CLASSIFICATION	4.083031657527781E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999450566907999	WITHOUT_CLASSIFICATION	5.494330920008092E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999254327044984	WITHOUT_CLASSIFICATION	7.456729550162628E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9993087651653295	WITHOUT_CLASSIFICATION	6.912348346704583E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989813793015893	WITHOUT_CLASSIFICATION	0.0010186206984107613	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998311198563352	WITHOUT_CLASSIFICATION	1.6888014366468518E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9989377962115159	WITHOUT_CLASSIFICATION	0.0010622037884840613	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999719315563279	WITHOUT_CLASSIFICATION	2.8068443672158084E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9984657187606554	WITHOUT_CLASSIFICATION	0.0015342812393445585	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999857839702347	WITHOUT_CLASSIFICATION	1.421602976530794E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9996638624915523	WITHOUT_CLASSIFICATION	3.361375084477266E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997643278431598	WITHOUT_CLASSIFICATION	2.356721568400953E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993838327307	WITHOUT_CLASSIFICATION	6.161672692924761E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999891148447276	WITHOUT_CLASSIFICATION	1.0885155272269106E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999451673966275	WITHOUT_CLASSIFICATION	5.483260337242358E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9993172884372148	WITHOUT_CLASSIFICATION	6.827115627852015E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990669475376114	WITHOUT_CLASSIFICATION	9.330524623886409E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998327157056466	WITHOUT_CLASSIFICATION	1.6728429435340801E-4	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9995555202610804	WITHOUT_CLASSIFICATION	4.444797389196669E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994462486132574	WITHOUT_CLASSIFICATION	5.537513867425618E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999829535009008	WITHOUT_CLASSIFICATION	1.704649909925743E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999997980568808	WITHOUT_CLASSIFICATION	2.0194311919649097E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999655453485689	WITHOUT_CLASSIFICATION	3.445465143118903E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.999228964421373	WITHOUT_CLASSIFICATION	7.710355786271076E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9995470045145313	WITHOUT_CLASSIFICATION	4.5299548546873903E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984252186198884	WITHOUT_CLASSIFICATION	0.001574781380111623	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984252186198884	WITHOUT_CLASSIFICATION	0.001574781380111623	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9992810184173518	WITHOUT_CLASSIFICATION	7.189815826481573E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999886798012892	WITHOUT_CLASSIFICATION	1.1320198710726295E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998135678165369	WITHOUT_CLASSIFICATION	1.8643218346322407E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999228966091395	WITHOUT_CLASSIFICATION	7.710339086056551E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.99974141850451	WITHOUT_CLASSIFICATION	2.5858149549001644E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999815862542305	WITHOUT_CLASSIFICATION	1.841374576938726E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9994805117859188	WITHOUT_CLASSIFICATION	5.194882140812422E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9961283819291272	WITHOUT_CLASSIFICATION	0.0038716180708726995	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9961283819291272	WITHOUT_CLASSIFICATION	0.0038716180708726995	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6621091874110089	IMPLEMENTATION	0.3378908125889912	WITHOUT_CLASSIFICATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9997759501699478	WITHOUT_CLASSIFICATION	2.2404983005209705E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999953552304054	WITHOUT_CLASSIFICATION	4.64476959464913E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997126696884605	WITHOUT_CLASSIFICATION	2.873303115394691E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997126696884605	WITHOUT_CLASSIFICATION	2.873303115394691E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997126696884605	WITHOUT_CLASSIFICATION	2.873303115394691E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999331592470676	WITHOUT_CLASSIFICATION	6.684075293239418E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999967975556529	WITHOUT_CLASSIFICATION	3.2024443470839624E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.8386723267167682	WITHOUT_CLASSIFICATION	0.16132767328323186	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995145248296029	WITHOUT_CLASSIFICATION	4.85475170397164E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999655167856965	WITHOUT_CLASSIFICATION	3.448321430352161E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9976930017878481	WITHOUT_CLASSIFICATION	0.0023069982121519442	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999801699988304	WITHOUT_CLASSIFICATION	1.9830001169592415E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9965339979936808	WITHOUT_CLASSIFICATION	0.003466002006319125	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999367932985117	WITHOUT_CLASSIFICATION	6.32067014883696E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999361702084287	WITHOUT_CLASSIFICATION	6.382979157126916E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999357329319001	WITHOUT_CLASSIFICATION	6.426706809994371E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999752521791057	WITHOUT_CLASSIFICATION	2.4747820894396887E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999999059528617	WITHOUT_CLASSIFICATION	9.404713829304592E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999692188311434	WITHOUT_CLASSIFICATION	3.078116885645562E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9997340839583301	WITHOUT_CLASSIFICATION	2.659160416699405E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988699088191276	WITHOUT_CLASSIFICATION	0.0011300911808723355	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984252186198884	WITHOUT_CLASSIFICATION	0.001574781380111623	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998389991997589	WITHOUT_CLASSIFICATION	1.6100080024111774E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.8569288620507292	WITHOUT_CLASSIFICATION	0.1430711379492709	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998771155810421	WITHOUT_CLASSIFICATION	1.2288441895781709E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999055060479616	WITHOUT_CLASSIFICATION	9.44939520383337E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999419346254066	WITHOUT_CLASSIFICATION	5.806537459334937E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999997843588016	WITHOUT_CLASSIFICATION	2.156411983969212E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999230967806647	WITHOUT_CLASSIFICATION	7.690321933529498E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998877604044809	WITHOUT_CLASSIFICATION	1.1223959551905618E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999691383241921	WITHOUT_CLASSIFICATION	3.086167580792538E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999450562836039	WITHOUT_CLASSIFICATION	5.494371639614565E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999996051380905	WITHOUT_CLASSIFICATION	3.948619095622058E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999928958545699	WITHOUT_CLASSIFICATION	7.104145430221533E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999890803686206	WITHOUT_CLASSIFICATION	1.091963137947037E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999644894594512	WITHOUT_CLASSIFICATION	3.55105405488383E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9992706870106853	WITHOUT_CLASSIFICATION	7.293129893145915E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9255320572789036	WITHOUT_CLASSIFICATION	0.07446794272109636	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998200407013631	WITHOUT_CLASSIFICATION	1.7995929863684793E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999714162949991	WITHOUT_CLASSIFICATION	2.8583705000881208E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998828434071055	WITHOUT_CLASSIFICATION	1.1715659289444242E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998828434071055	WITHOUT_CLASSIFICATION	1.1715659289444242E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999744595498489	WITHOUT_CLASSIFICATION	2.554045015110196E-4	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999893275884193	WITHOUT_CLASSIFICATION	1.0672411580651134E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997562627327258	WITHOUT_CLASSIFICATION	2.4373726727435304E-4	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996937259534403	WITHOUT_CLASSIFICATION	3.0627404655977507E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997865536023256	WITHOUT_CLASSIFICATION	2.134463976743867E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9997765152579431	WITHOUT_CLASSIFICATION	2.2348474205696105E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998475137541805	WITHOUT_CLASSIFICATION	1.5248624581953385E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998825171207704	WITHOUT_CLASSIFICATION	1.1748287922969621E-4	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997798839588429	WITHOUT_CLASSIFICATION	2.201160411571019E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999848920024479	WITHOUT_CLASSIFICATION	1.5107997552084332E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998918496869165	WITHOUT_CLASSIFICATION	1.0815031308361253E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999427860676439	WITHOUT_CLASSIFICATION	5.721393235609513E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999669387304811	WITHOUT_CLASSIFICATION	3.3061269518813714E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999860695379096	WITHOUT_CLASSIFICATION	1.3930462090318377E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999740739332993	WITHOUT_CLASSIFICATION	2.5926066700806813E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998686228505663	WITHOUT_CLASSIFICATION	1.3137714943376217E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978209572423	WITHOUT_CLASSIFICATION	2.179042757658348E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978209572423	WITHOUT_CLASSIFICATION	2.179042757658348E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998057079620934	WITHOUT_CLASSIFICATION	1.942920379064743E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998251703094	WITHOUT_CLASSIFICATION	1.7482969065006838E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999634923138436	WITHOUT_CLASSIFICATION	3.650768615636097E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999634923138436	WITHOUT_CLASSIFICATION	3.650768615636097E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.99991462801749	WITHOUT_CLASSIFICATION	8.537198251007534E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999286534546176	WITHOUT_CLASSIFICATION	7.134654538248351E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9954599406112624	WITHOUT_CLASSIFICATION	0.004540059388737614	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999177018256235	WITHOUT_CLASSIFICATION	8.229817437649923E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997008064983813	WITHOUT_CLASSIFICATION	2.991935016186836E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999967447378884	WITHOUT_CLASSIFICATION	3.255262111584096E-6	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998513223998495	WITHOUT_CLASSIFICATION	1.4867760015045128E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999177018256235	WITHOUT_CLASSIFICATION	8.229817437649923E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999357934496983	WITHOUT_CLASSIFICATION	6.420655030170328E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999087007335787	WITHOUT_CLASSIFICATION	9.129926642130205E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9995289620262299	WITHOUT_CLASSIFICATION	4.7103797377018693E-4	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998652779511426	WITHOUT_CLASSIFICATION	1.3472204885743875E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999995623843907	WITHOUT_CLASSIFICATION	4.3761560927776733E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997648499882725	WITHOUT_CLASSIFICATION	2.3515001172735877E-4	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9841087768537614	WITHOUT_CLASSIFICATION	0.01589122314623855	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9996673073923474	WITHOUT_CLASSIFICATION	3.326926076525505E-4	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999363584617018	WITHOUT_CLASSIFICATION	6.364153829809475E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999284581985134	WITHOUT_CLASSIFICATION	7.154180148662185E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999405749242169	WITHOUT_CLASSIFICATION	5.942507578309786E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997881925898283	WITHOUT_CLASSIFICATION	2.118074101716796E-4	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9994176691036145	WITHOUT_CLASSIFICATION	5.823308963854538E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9987535581478906	WITHOUT_CLASSIFICATION	0.0012464418521094215	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9992246555000212	WITHOUT_CLASSIFICATION	7.753444999788735E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998796415419428	WITHOUT_CLASSIFICATION	1.2035845805715148E-4	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998046173464679	WITHOUT_CLASSIFICATION	1.9538265353202228E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9846058742550338	WITHOUT_CLASSIFICATION	0.015394125744966278	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9846058742550338	WITHOUT_CLASSIFICATION	0.015394125744966278	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9841087768537614	WITHOUT_CLASSIFICATION	0.01589122314623855	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9798119718696288	WITHOUT_CLASSIFICATION	0.02018802813037124	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9977780382047796	WITHOUT_CLASSIFICATION	0.0022219617952203294	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9987141203037332	WITHOUT_CLASSIFICATION	0.0012858796962667686	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999763195000808	WITHOUT_CLASSIFICATION	2.3680499919201705E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999269236354198	WITHOUT_CLASSIFICATION	7.307636458023096E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998211203802312	WITHOUT_CLASSIFICATION	1.788796197688644E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999952743712906	WITHOUT_CLASSIFICATION	4.725628709394678E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9993003178505518	WITHOUT_CLASSIFICATION	6.996821494482198E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9998034830422519	WITHOUT_CLASSIFICATION	1.9651695774806002E-4	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999528017700772	WITHOUT_CLASSIFICATION	4.71982299228358E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9998933182208909	WITHOUT_CLASSIFICATION	1.0668177910913806E-4	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999641939795962	WITHOUT_CLASSIFICATION	3.5806020403795894E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9991674958004875	WITHOUT_CLASSIFICATION	8.325041995125181E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.99987082011984	WITHOUT_CLASSIFICATION	1.291798801601022E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997839250678843	WITHOUT_CLASSIFICATION	2.1607493211572759E-4	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999918163014144	WITHOUT_CLASSIFICATION	8.183698585571883E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999379077972	WITHOUT_CLASSIFICATION	6.20922028414007E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999723094383448	WITHOUT_CLASSIFICATION	2.7690561655228566E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998074172587454	WITHOUT_CLASSIFICATION	1.9258274125465486E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9996260723007816	WITHOUT_CLASSIFICATION	3.739276992184245E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9979218482804009	WITHOUT_CLASSIFICATION	0.002078151719599163	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999874659373484	WITHOUT_CLASSIFICATION	1.2534062651508868E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995714860948983	WITHOUT_CLASSIFICATION	4.2851390510161485E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9997773442183016	WITHOUT_CLASSIFICATION	2.2265578169855882E-4	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999513783264238	WITHOUT_CLASSIFICATION	4.862167357630163E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997653766332247	WITHOUT_CLASSIFICATION	2.3462336677521813E-4	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999900776736884	WITHOUT_CLASSIFICATION	9.922326311570063E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999584360005337	WITHOUT_CLASSIFICATION	4.156399946632303E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999411767205892	WITHOUT_CLASSIFICATION	5.882327941077471E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.998727873442637	WITHOUT_CLASSIFICATION	0.0012721265573630233	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997839250678843	WITHOUT_CLASSIFICATION	2.1607493211572759E-4	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999241938278713	WITHOUT_CLASSIFICATION	7.580617212865127E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999987156121986	WITHOUT_CLASSIFICATION	1.284387801400928E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999450746173926	WITHOUT_CLASSIFICATION	5.4925382607492455E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9996542655307096	WITHOUT_CLASSIFICATION	3.457344692903565E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9929706547760725	WITHOUT_CLASSIFICATION	0.007029345223927546	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998908398949711	WITHOUT_CLASSIFICATION	1.0916010502883721E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9998908373177003	WITHOUT_CLASSIFICATION	1.0916268229965624E-4	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996385837289223	WITHOUT_CLASSIFICATION	3.6141627107762946E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9983200943294513	WITHOUT_CLASSIFICATION	0.0016799056705486485	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9989217457099248	WITHOUT_CLASSIFICATION	0.001078254290075201	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998392779615479	WITHOUT_CLASSIFICATION	1.6072203845220284E-4	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999963579278601	WITHOUT_CLASSIFICATION	3.6420721397469074E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999308362628746	WITHOUT_CLASSIFICATION	6.916373712540782E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999519060125461	WITHOUT_CLASSIFICATION	4.809398745397512E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9996306185954419	WITHOUT_CLASSIFICATION	3.693814045580949E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9794932929875769	WITHOUT_CLASSIFICATION	0.02050670701242304	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999964980229251	WITHOUT_CLASSIFICATION	3.5019770748247904E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999730294007152	WITHOUT_CLASSIFICATION	2.6970599284759906E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9977739412632076	WITHOUT_CLASSIFICATION	0.0022260587367923415	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999290229039345	WITHOUT_CLASSIFICATION	7.097709606548816E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997008064983813	WITHOUT_CLASSIFICATION	2.991935016186836E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999990793236947	WITHOUT_CLASSIFICATION	9.206763051949755E-7	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997839250678843	WITHOUT_CLASSIFICATION	2.1607493211572759E-4	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998512522376249	WITHOUT_CLASSIFICATION	1.4874776237494867E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999571718946157	WITHOUT_CLASSIFICATION	4.28281053842944E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999881915978084	WITHOUT_CLASSIFICATION	1.1808402191608192E-4	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999881915978084	WITHOUT_CLASSIFICATION	1.1808402191608192E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998062366688835	WITHOUT_CLASSIFICATION	1.9376333111645712E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999398715123452	WITHOUT_CLASSIFICATION	6.0128487654890486E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998920327648609	WITHOUT_CLASSIFICATION	1.0796723513909731E-4	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999583294596097	WITHOUT_CLASSIFICATION	4.167054039021545E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998309805276295	WITHOUT_CLASSIFICATION	1.6901947237041765E-4	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999941652935743	WITHOUT_CLASSIFICATION	5.834706425607299E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9933826099773865	WITHOUT_CLASSIFICATION	0.006617390022613484	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998201582850487	WITHOUT_CLASSIFICATION	1.7984171495123507E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999196368705448	WITHOUT_CLASSIFICATION	8.036312945520274E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999196368705448	WITHOUT_CLASSIFICATION	8.036312945520274E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999132145854	WITHOUT_CLASSIFICATION	8.678541459221231E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.986638904453605	WITHOUT_CLASSIFICATION	0.013361095546394943	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998040853692509	WITHOUT_CLASSIFICATION	1.9591463074900833E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999990045331056	WITHOUT_CLASSIFICATION	9.9546689429945E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999961441631935	WITHOUT_CLASSIFICATION	3.855836806535876E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997569869602797	WITHOUT_CLASSIFICATION	2.4301303972035378E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999991278188735	WITHOUT_CLASSIFICATION	8.721811264121068E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999824786893717	WITHOUT_CLASSIFICATION	1.752131062825938E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999462847302599	WITHOUT_CLASSIFICATION	5.3715269740064205E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9995284216674077	WITHOUT_CLASSIFICATION	4.7157833259222677E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9994374503752361	WITHOUT_CLASSIFICATION	5.625496247639089E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9994374503752361	WITHOUT_CLASSIFICATION	5.625496247639089E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998291071126	WITHOUT_CLASSIFICATION	1.7089288737564657E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9993090853833332	WITHOUT_CLASSIFICATION	6.909146166668924E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999981544877933	WITHOUT_CLASSIFICATION	1.8455122066992655E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996975136171714	WITHOUT_CLASSIFICATION	3.0248638282860603E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999995724802533	WITHOUT_CLASSIFICATION	4.275197467064438E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997568026379174	WITHOUT_CLASSIFICATION	2.4319736208258962E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999935500463385	WITHOUT_CLASSIFICATION	6.449953661576158E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999458032545231	WITHOUT_CLASSIFICATION	5.419674547696871E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999945886399168	WITHOUT_CLASSIFICATION	5.4113600831917E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999694913353776	WITHOUT_CLASSIFICATION	3.050866462245319E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9995973668180312	WITHOUT_CLASSIFICATION	4.0263318196873983E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997497597116493	WITHOUT_CLASSIFICATION	2.502402883507455E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999878221095518	WITHOUT_CLASSIFICATION	1.2177890448184805E-4	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9997806717719325	WITHOUT_CLASSIFICATION	2.1932822806754626E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992398671418122	WITHOUT_CLASSIFICATION	7.601328581877126E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999800229888115	WITHOUT_CLASSIFICATION	1.9977011188551613E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9988791728891276	WITHOUT_CLASSIFICATION	0.0011208271108723324	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9984356249687983	WITHOUT_CLASSIFICATION	0.0015643750312016556	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998112144502277	WITHOUT_CLASSIFICATION	1.8878554977228978E-4	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9992168243060049	WITHOUT_CLASSIFICATION	7.831756939951091E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9988815169325517	WITHOUT_CLASSIFICATION	0.0011184830674483444	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999963464595778	WITHOUT_CLASSIFICATION	3.653540422190712E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9993937777073759	WITHOUT_CLASSIFICATION	6.06222292624148E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9979357118243061	WITHOUT_CLASSIFICATION	0.0020642881756938827	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9997014460778708	WITHOUT_CLASSIFICATION	2.9855392212925117E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995239087628992	WITHOUT_CLASSIFICATION	4.7609123710076274E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964004109047817	WITHOUT_CLASSIFICATION	0.0035995890952184237	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999349704884499	WITHOUT_CLASSIFICATION	6.50295115500711E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9983140383779826	WITHOUT_CLASSIFICATION	0.0016859616220174629	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963338856689837	WITHOUT_CLASSIFICATION	0.0036661143310163192	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9990385500978031	WITHOUT_CLASSIFICATION	9.614499021968593E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999108349092021	WITHOUT_CLASSIFICATION	8.91650907979123E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999989821084915	WITHOUT_CLASSIFICATION	1.017891508523502E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997157349519195	WITHOUT_CLASSIFICATION	2.842650480806128E-4	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.996967311004093	WITHOUT_CLASSIFICATION	0.0030326889959070616	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999425372080572	WITHOUT_CLASSIFICATION	5.746279194279647E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999258887836311	WITHOUT_CLASSIFICATION	7.411121636887136E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998026391799618	WITHOUT_CLASSIFICATION	1.9736082003817354E-4	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9996448849181706	WITHOUT_CLASSIFICATION	3.5511508182939995E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999611953756279	WITHOUT_CLASSIFICATION	3.880462437203391E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999844614851409	WITHOUT_CLASSIFICATION	1.5538514859106606E-4	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9974422443936268	WITHOUT_CLASSIFICATION	0.002557755606373064	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9991364067739564	WITHOUT_CLASSIFICATION	8.635932260435518E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997468975367694	WITHOUT_CLASSIFICATION	2.5310246323063316E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9970282732106146	WITHOUT_CLASSIFICATION	0.0029717267893854082	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999961626890566	WITHOUT_CLASSIFICATION	3.83731094345945E-6	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999514537074922	WITHOUT_CLASSIFICATION	4.854629250790115E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9997217523664167	WITHOUT_CLASSIFICATION	2.782476335833182E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999748537317151	WITHOUT_CLASSIFICATION	2.5146268284853144E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9997232929656417	WITHOUT_CLASSIFICATION	2.767070343583188E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998639683459579	WITHOUT_CLASSIFICATION	1.3603165404217543E-4	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999831884621861	WITHOUT_CLASSIFICATION	1.681153781386128E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9990453111274699	WITHOUT_CLASSIFICATION	9.546888725300198E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999212821545611	WITHOUT_CLASSIFICATION	7.87178454388531E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9990453111274699	WITHOUT_CLASSIFICATION	9.546888725300198E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999212658348784	WITHOUT_CLASSIFICATION	7.8734165121606E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997809218285164	WITHOUT_CLASSIFICATION	2.1907817148355207E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9985199045590848	WITHOUT_CLASSIFICATION	0.001480095440915232	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999535757567036	WITHOUT_CLASSIFICATION	4.642424329643082E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9997111291728268	WITHOUT_CLASSIFICATION	2.8887082717319544E-4	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9985199045590848	WITHOUT_CLASSIFICATION	0.001480095440915232	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999681235123333	WITHOUT_CLASSIFICATION	3.187648766665479E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995034485962283	WITHOUT_CLASSIFICATION	4.965514037717649E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998834292190215	WITHOUT_CLASSIFICATION	1.165707809785806E-4	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9993534025797544	WITHOUT_CLASSIFICATION	6.465974202456735E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9992614751845748	WITHOUT_CLASSIFICATION	7.385248154251687E-4	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999436689902477	WITHOUT_CLASSIFICATION	5.633100975228814E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9998947126862511	WITHOUT_CLASSIFICATION	1.0528731374893707E-4	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7015484404217812	WITHOUT_CLASSIFICATION	0.2984515595782188	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9994888437706315	WITHOUT_CLASSIFICATION	5.111562293685862E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998434060722583	WITHOUT_CLASSIFICATION	1.565939277417085E-4	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999487820727541	WITHOUT_CLASSIFICATION	5.121792724596554E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999013644880516	WITHOUT_CLASSIFICATION	9.863551194842198E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999948846314155	WITHOUT_CLASSIFICATION	5.115368584437126E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997424943363712	WITHOUT_CLASSIFICATION	2.5750566362880837E-4	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999535226753	WITHOUT_CLASSIFICATION	4.6477324703603503E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9990805305184656	WITHOUT_CLASSIFICATION	9.194694815344448E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999791997785921	WITHOUT_CLASSIFICATION	2.080022140790101E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997258686853358	WITHOUT_CLASSIFICATION	2.7413131466421265E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9995786165869487	WITHOUT_CLASSIFICATION	4.2138341305138146E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999921879009811	WITHOUT_CLASSIFICATION	7.812099018926971E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9993733063359644	WITHOUT_CLASSIFICATION	6.266936640355888E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9969607517514041	WITHOUT_CLASSIFICATION	0.0030392482485959867	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9988206488619495	WITHOUT_CLASSIFICATION	0.0011793511380504204	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9834687402147047	WITHOUT_CLASSIFICATION	0.01653125978529541	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999868945816091	WITHOUT_CLASSIFICATION	1.3105418390910623E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999925881502	WITHOUT_CLASSIFICATION	7.411849813928003E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9987231914937066	WITHOUT_CLASSIFICATION	0.0012768085062934225	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9964600345443196	WITHOUT_CLASSIFICATION	0.003539965455680447	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9990088303304128	WITHOUT_CLASSIFICATION	9.911696695873197E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9997645423163533	WITHOUT_CLASSIFICATION	2.3545768364664196E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9992193676170561	WITHOUT_CLASSIFICATION	7.806323829437717E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9955188873576837	WITHOUT_CLASSIFICATION	0.004481112642316302	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999921879009811	WITHOUT_CLASSIFICATION	7.812099018926971E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999958415810658	WITHOUT_CLASSIFICATION	4.1584189342489414E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999422271230048	WITHOUT_CLASSIFICATION	5.7772876995217605E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.996560875181792	WITHOUT_CLASSIFICATION	0.003439124818207994	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9942423920775743	WITHOUT_CLASSIFICATION	0.005757607922425738	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999735867616125	WITHOUT_CLASSIFICATION	2.6413238387486413E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999997275939359	WITHOUT_CLASSIFICATION	2.7240606409945495E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999518597434861	WITHOUT_CLASSIFICATION	4.814025651403251E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9995786343548307	WITHOUT_CLASSIFICATION	4.2136564516932914E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998607866334815	WITHOUT_CLASSIFICATION	1.3921336651856795E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.998378593745848	WITHOUT_CLASSIFICATION	0.001621406254151939	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999962606874073	WITHOUT_CLASSIFICATION	3.739312592573926E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998692496463726	WITHOUT_CLASSIFICATION	1.3075035362753495E-4	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999386981167055	WITHOUT_CLASSIFICATION	6.130188329451034E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9987228464456915	WITHOUT_CLASSIFICATION	0.0012771535543084568	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9993107753497982	WITHOUT_CLASSIFICATION	6.892246502019125E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999614286796531	WITHOUT_CLASSIFICATION	3.8571320346891206E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9867449841357958	WITHOUT_CLASSIFICATION	0.01325501586420426	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9985483301559509	WITHOUT_CLASSIFICATION	0.0014516698440490549	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9938461825097095	WITHOUT_CLASSIFICATION	0.0061538174902905805	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999184975130907	WITHOUT_CLASSIFICATION	8.150248690927397E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9841656821109597	WITHOUT_CLASSIFICATION	0.015834317889040297	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9841656821109597	WITHOUT_CLASSIFICATION	0.015834317889040297	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998605805313072	WITHOUT_CLASSIFICATION	1.394194686928521E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9841656821109597	WITHOUT_CLASSIFICATION	0.015834317889040297	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9841656821109597	WITHOUT_CLASSIFICATION	0.015834317889040297	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9985070531587943	WITHOUT_CLASSIFICATION	0.001492946841205759	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9989174959739464	WITHOUT_CLASSIFICATION	0.001082504026053605	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999747723947713	WITHOUT_CLASSIFICATION	2.5227605228698665E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999747723947713	WITHOUT_CLASSIFICATION	2.5227605228698665E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991506235970887	WITHOUT_CLASSIFICATION	8.493764029112521E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9746717721086422	WITHOUT_CLASSIFICATION	0.025328227891357788	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996254640916985	WITHOUT_CLASSIFICATION	3.7453590830148834E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999989815706567	WITHOUT_CLASSIFICATION	1.0184293432367138E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9978927828134739	WITHOUT_CLASSIFICATION	0.00210721718652608	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9955929495710969	WITHOUT_CLASSIFICATION	0.004407050428903096	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995276626799393	WITHOUT_CLASSIFICATION	4.723373200607692E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9966341645697755	WITHOUT_CLASSIFICATION	0.003365835430224424	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9993864633502004	WITHOUT_CLASSIFICATION	6.135366497996457E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999850649349051	WITHOUT_CLASSIFICATION	1.4935065094904475E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9987144555653218	WITHOUT_CLASSIFICATION	0.001285544434678169	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9996356928529233	WITHOUT_CLASSIFICATION	3.6430714707673905E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682175106857	WITHOUT_CLASSIFICATION	3.178248931440819E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998047664947629	WITHOUT_CLASSIFICATION	1.9523350523701925E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9988503266158405	WITHOUT_CLASSIFICATION	0.0011496733841594325	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999217171550873	WITHOUT_CLASSIFICATION	7.828284491270305E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.998703123301036	WITHOUT_CLASSIFICATION	0.0012968766989640043	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9990059510510583	WITHOUT_CLASSIFICATION	9.940489489417017E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682175106857	WITHOUT_CLASSIFICATION	3.178248931440819E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9993733063359644	WITHOUT_CLASSIFICATION	6.266936640355888E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.99576314509593	WITHOUT_CLASSIFICATION	0.004236854904069998	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998745320593885	WITHOUT_CLASSIFICATION	1.2546794061148812E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997789741557377	WITHOUT_CLASSIFICATION	2.2102584426242345E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9962150132763693	WITHOUT_CLASSIFICATION	0.003784986723630697	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999275613413042	WITHOUT_CLASSIFICATION	7.243865869573294E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9986204380434587	WITHOUT_CLASSIFICATION	0.0013795619565413132	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999684307227219	WITHOUT_CLASSIFICATION	3.1569277278164854E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998294167461214	WITHOUT_CLASSIFICATION	1.7058325387859076E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998511996559829	WITHOUT_CLASSIFICATION	1.488003440171925E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9966319650527988	WITHOUT_CLASSIFICATION	0.003368034947201296	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999238620747537	WITHOUT_CLASSIFICATION	7.613792524627427E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9995545799400635	WITHOUT_CLASSIFICATION	4.4542005993653824E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9987325761702991	WITHOUT_CLASSIFICATION	0.001267423829700895	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9913359089080889	WITHOUT_CLASSIFICATION	0.00866409109191119	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998908171618012	WITHOUT_CLASSIFICATION	1.0918283819883952E-4	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9993103361793633	WITHOUT_CLASSIFICATION	6.896638206367078E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9994508142221085	WITHOUT_CLASSIFICATION	5.491857778916613E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999017985206853	WITHOUT_CLASSIFICATION	9.820147931465043E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998819279140824	WITHOUT_CLASSIFICATION	1.1807208591759531E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998513042256739	WITHOUT_CLASSIFICATION	1.4869577432605015E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9989605872042635	WITHOUT_CLASSIFICATION	0.0010394127957364721	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999926238420412	WITHOUT_CLASSIFICATION	7.3761579587303465E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998294167461214	WITHOUT_CLASSIFICATION	1.7058325387859076E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9966612995658113	WITHOUT_CLASSIFICATION	0.0033387004341887973	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9982079414556992	WITHOUT_CLASSIFICATION	0.001792058544300748	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9980834925384581	WITHOUT_CLASSIFICATION	0.00191650746154198	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997210882690247	WITHOUT_CLASSIFICATION	2.7891173097532927E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9968234546443596	WITHOUT_CLASSIFICATION	0.0031765453556402896	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9953638830510164	WITHOUT_CLASSIFICATION	0.004636116948983516	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9986866466438525	WITHOUT_CLASSIFICATION	0.0013133533561474596	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9953441145794953	WITHOUT_CLASSIFICATION	0.004655885420504737	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.994352293074733	WITHOUT_CLASSIFICATION	0.005647706925266897	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999519523570406	WITHOUT_CLASSIFICATION	4.8047642959409166E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999013625672349	WITHOUT_CLASSIFICATION	9.863743276505304E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999935921926882	WITHOUT_CLASSIFICATION	6.407807311804103E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9997718109548611	WITHOUT_CLASSIFICATION	2.2818904513889526E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999303240217997	WITHOUT_CLASSIFICATION	6.967597820033833E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994869173246841	WITHOUT_CLASSIFICATION	5.13082675315955E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999519523570406	WITHOUT_CLASSIFICATION	4.8047642959409166E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999972950413323	WITHOUT_CLASSIFICATION	2.7049586676895668E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999413717811584	WITHOUT_CLASSIFICATION	5.862821884158526E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997256330847235	WITHOUT_CLASSIFICATION	2.743669152764599E-4	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9996583763735891	WITHOUT_CLASSIFICATION	3.4162362641088117E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9989906566732956	WITHOUT_CLASSIFICATION	0.001009343326704421	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9979046994251668	WITHOUT_CLASSIFICATION	0.0020953005748331347	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9997076902787779	WITHOUT_CLASSIFICATION	2.9230972122211505E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998450697483636	WITHOUT_CLASSIFICATION	1.5493025163636076E-4	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178471083515	WITHOUT_CLASSIFICATION	1.8215289164852258E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983698026507405	WITHOUT_CLASSIFICATION	0.0016301973492595335	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983698026507405	WITHOUT_CLASSIFICATION	0.0016301973492595335	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983698026507405	WITHOUT_CLASSIFICATION	0.0016301973492595335	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999083953858597	WITHOUT_CLASSIFICATION	9.160461414028103E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999083953858597	WITHOUT_CLASSIFICATION	9.160461414028103E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999877357402162	WITHOUT_CLASSIFICATION	1.2264259783880326E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999575609656742	WITHOUT_CLASSIFICATION	4.243903432577363E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9991751608240252	WITHOUT_CLASSIFICATION	8.24839175974669E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9990764831223835	WITHOUT_CLASSIFICATION	9.235168776165522E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9862608289437375	WITHOUT_CLASSIFICATION	0.013739171056262546	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997477369785016	WITHOUT_CLASSIFICATION	2.522630214983469E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998545324205587	WITHOUT_CLASSIFICATION	1.4546757944136683E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999978081328479	WITHOUT_CLASSIFICATION	2.191867152182881E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713064438612	WITHOUT_CLASSIFICATION	1.2869355613882833E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997477369785016	WITHOUT_CLASSIFICATION	2.522630214983469E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998545324205587	WITHOUT_CLASSIFICATION	1.4546757944136683E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999638019154342	WITHOUT_CLASSIFICATION	3.619808456582552E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999544102222131	WITHOUT_CLASSIFICATION	4.5589777786885875E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999674463751128	WITHOUT_CLASSIFICATION	3.255362488715831E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999870494475038	WITHOUT_CLASSIFICATION	1.2950552496165537E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9992950690023427	WITHOUT_CLASSIFICATION	7.049309976573089E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998877195596017	WITHOUT_CLASSIFICATION	1.1228044039841555E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9998495892630669	WITHOUT_CLASSIFICATION	1.504107369331534E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999974846701234	WITHOUT_CLASSIFICATION	2.5153298766022685E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9991775388436315	WITHOUT_CLASSIFICATION	8.224611563684933E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999459300431008	WITHOUT_CLASSIFICATION	5.406995689925988E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997237438540871	WITHOUT_CLASSIFICATION	2.762561459129379E-4	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995396322008523	WITHOUT_CLASSIFICATION	4.603677991477153E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996792719477037	WITHOUT_CLASSIFICATION	3.2072805229630216E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999131803157107	WITHOUT_CLASSIFICATION	8.681968428925405E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998043901131437	WITHOUT_CLASSIFICATION	1.9560988685626233E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998938153306934	WITHOUT_CLASSIFICATION	1.0618466930659964E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999764191413837	WITHOUT_CLASSIFICATION	2.3580858616317254E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9958416543512568	WITHOUT_CLASSIFICATION	0.0041583456487431615	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999512809533329	WITHOUT_CLASSIFICATION	4.871904666709823E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999767697941255	WITHOUT_CLASSIFICATION	2.3230205874546766E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9692800754707491	WITHOUT_CLASSIFICATION	0.030719924529250913	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997660252787094	WITHOUT_CLASSIFICATION	2.3397472129052063E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999720940011931	WITHOUT_CLASSIFICATION	2.790599880695264E-5	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548252441725	WITHOUT_CLASSIFICATION	2.451747558275613E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995870735774426	WITHOUT_CLASSIFICATION	4.1292642255735123E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999308644659945	WITHOUT_CLASSIFICATION	6.91355340055046E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999308644659945	WITHOUT_CLASSIFICATION	6.91355340055046E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996689585312352	WITHOUT_CLASSIFICATION	3.310414687648999E-4	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999255096077081	WITHOUT_CLASSIFICATION	7.449039229187842E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9898641416081003	WITHOUT_CLASSIFICATION	0.010135858391899684	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9988129797014479	WITHOUT_CLASSIFICATION	0.0011870202985521795	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999915893296827	WITHOUT_CLASSIFICATION	8.410670317283059E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9998962430903994	WITHOUT_CLASSIFICATION	1.0375690960070764E-4	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9997352928237131	WITHOUT_CLASSIFICATION	2.647071762869794E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9984781160022639	WITHOUT_CLASSIFICATION	0.001521883997736124	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9958765571740338	WITHOUT_CLASSIFICATION	0.00412344282596622	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999162131384915	WITHOUT_CLASSIFICATION	8.37868615083765E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998573691025986	WITHOUT_CLASSIFICATION	1.4263089740148974E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999015325139005	WITHOUT_CLASSIFICATION	9.846748609959049E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999964541688903	WITHOUT_CLASSIFICATION	3.5458311097888707E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9987747515649458	WITHOUT_CLASSIFICATION	0.0012252484350542296	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9998870099318047	WITHOUT_CLASSIFICATION	1.1299006819540789E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9996902639519267	WITHOUT_CLASSIFICATION	3.0973604807326343E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998573691025986	WITHOUT_CLASSIFICATION	1.4263089740148974E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998573691025986	WITHOUT_CLASSIFICATION	1.4263089740148974E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998097543222698	WITHOUT_CLASSIFICATION	1.9024567773012158E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999876091660977	WITHOUT_CLASSIFICATION	1.2390833902209082E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9931930366338831	WITHOUT_CLASSIFICATION	0.006806963366116814	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999922835784366	WITHOUT_CLASSIFICATION	7.716421563358385E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999644894594512	WITHOUT_CLASSIFICATION	3.55105405488383E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998043901131437	WITHOUT_CLASSIFICATION	1.9560988685626233E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9992123903184191	WITHOUT_CLASSIFICATION	7.876096815808227E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9997707905146882	WITHOUT_CLASSIFICATION	2.292094853117056E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9998144785613651	WITHOUT_CLASSIFICATION	1.855214386348335E-4	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991884431793673	WITHOUT_CLASSIFICATION	8.11556820632782E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999878326893991	WITHOUT_CLASSIFICATION	1.2167310601038254E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999037013658301	WITHOUT_CLASSIFICATION	9.629863416994295E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999796481528726	WITHOUT_CLASSIFICATION	2.035184712740621E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999796481528726	WITHOUT_CLASSIFICATION	2.035184712740621E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999796481528726	WITHOUT_CLASSIFICATION	2.035184712740621E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999796481528726	WITHOUT_CLASSIFICATION	2.035184712740621E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998083291829954	WITHOUT_CLASSIFICATION	1.9167081700458628E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997505521753209	WITHOUT_CLASSIFICATION	2.4944782467904703E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468159264086	WITHOUT_CLASSIFICATION	2.5318407359145524E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998894572739563	WITHOUT_CLASSIFICATION	1.105427260437466E-4	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999879185122217	WITHOUT_CLASSIFICATION	1.2081487778287042E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997511111935051	WITHOUT_CLASSIFICATION	2.488888064949222E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996700209830851	WITHOUT_CLASSIFICATION	3.299790169149239E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9997145222142227	WITHOUT_CLASSIFICATION	2.8547778577719317E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999516752417199	WITHOUT_CLASSIFICATION	4.832475828018384E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999964730567596	WITHOUT_CLASSIFICATION	3.5269432404011186E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9997777103626013	WITHOUT_CLASSIFICATION	2.2228963739865005E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9963671379330706	WITHOUT_CLASSIFICATION	0.0036328620669294764	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996352310327284	WITHOUT_CLASSIFICATION	3.6476896727158863E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9949044447787524	WITHOUT_CLASSIFICATION	0.00509555522124761	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9983744550519674	WITHOUT_CLASSIFICATION	0.0016255449480325778	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9983744550519674	WITHOUT_CLASSIFICATION	0.0016255449480325778	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999769949904052	WITHOUT_CLASSIFICATION	2.3005009594867233E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999141082525043	WITHOUT_CLASSIFICATION	8.589174749570361E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999953723953469	WITHOUT_CLASSIFICATION	4.627604653104477E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576470866926	WITHOUT_CLASSIFICATION	2.423529133074154E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576470866926	WITHOUT_CLASSIFICATION	2.423529133074154E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999978020074355	WITHOUT_CLASSIFICATION	2.1979925645013558E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983698026507405	WITHOUT_CLASSIFICATION	0.0016301973492595335	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9931994832561437	WITHOUT_CLASSIFICATION	0.006800516743856298	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999586895932131	WITHOUT_CLASSIFICATION	4.131040678687173E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999641311541765	WITHOUT_CLASSIFICATION	3.586884582349131E-4	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997010408599867	WITHOUT_CLASSIFICATION	2.989591400133764E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997469333828591	WITHOUT_CLASSIFICATION	2.5306661714077943E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998909007029756	WITHOUT_CLASSIFICATION	1.090992970243926E-4	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9994749761954178	WITHOUT_CLASSIFICATION	5.250238045822033E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9994261576373435	WITHOUT_CLASSIFICATION	5.738423626563355E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996430641221928	WITHOUT_CLASSIFICATION	3.569358778071544E-4	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999133244585529	WITHOUT_CLASSIFICATION	8.667554144713532E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999185888000404	WITHOUT_CLASSIFICATION	8.141119995962332E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998878338759771	WITHOUT_CLASSIFICATION	1.1216612402287396E-4	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998908942526	WITHOUT_CLASSIFICATION	1.091057475612452E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999920439450932	WITHOUT_CLASSIFICATION	7.956054906876105E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999974727485262	WITHOUT_CLASSIFICATION	2.5272514738273746E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991518788417	WITHOUT_CLASSIFICATION	8.481211583479535E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997951649203689	WITHOUT_CLASSIFICATION	2.0483507963119064E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995197577762392	WITHOUT_CLASSIFICATION	4.8024222376085807E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999532905268277	WITHOUT_CLASSIFICATION	4.670947317222946E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999400254811993	WITHOUT_CLASSIFICATION	5.997451880070866E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999993663157037	WITHOUT_CLASSIFICATION	6.336842962550481E-7	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999493722024713	WITHOUT_CLASSIFICATION	5.062779752877513E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999966621898259	WITHOUT_CLASSIFICATION	3.3378101742447547E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9990362149292238	WITHOUT_CLASSIFICATION	9.637850707761104E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998487784407423	WITHOUT_CLASSIFICATION	1.5122155925779277E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9495825075482782	WITHOUT_CLASSIFICATION	0.050417492451721765	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9540608715514116	WITHOUT_CLASSIFICATION	0.045939128448588336	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9908209846550885	WITHOUT_CLASSIFICATION	0.00917901534491145	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9994510322489738	WITHOUT_CLASSIFICATION	5.489677510261575E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9997022914713639	WITHOUT_CLASSIFICATION	2.9770852863616765E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997431181764178	WITHOUT_CLASSIFICATION	2.5688182358220654E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999634901210444	WITHOUT_CLASSIFICATION	3.65098789556043E-5	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998194958226185	WITHOUT_CLASSIFICATION	1.8050417738148096E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.991542537291723	WITHOUT_CLASSIFICATION	0.008457462708276985	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999701949283533	WITHOUT_CLASSIFICATION	2.980507164670048E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999916197634737	WITHOUT_CLASSIFICATION	8.38023652623797E-6	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999617654100999	WITHOUT_CLASSIFICATION	3.8234589900102626E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998688759287252	WITHOUT_CLASSIFICATION	1.3112407127484582E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9997940201108048	WITHOUT_CLASSIFICATION	2.0597988919524807E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998614852050581	WITHOUT_CLASSIFICATION	1.3851479494188547E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999881772523607	WITHOUT_CLASSIFICATION	1.1822747639293541E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9997945898549843	WITHOUT_CLASSIFICATION	2.054101450157321E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.998670227164199	WITHOUT_CLASSIFICATION	0.0013297728358011016	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9995080477549987	WITHOUT_CLASSIFICATION	4.919522450013302E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9982970953857666	WITHOUT_CLASSIFICATION	0.0017029046142333492	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9983088271064123	WITHOUT_CLASSIFICATION	0.0016911728935875901	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9995980567897916	WITHOUT_CLASSIFICATION	4.0194321020836226E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9968572726063893	WITHOUT_CLASSIFICATION	0.003142727393610582	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9988959190211266	WITHOUT_CLASSIFICATION	0.0011040809788733193	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999207525479297	WITHOUT_CLASSIFICATION	7.924745207029564E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9985377130254337	WITHOUT_CLASSIFICATION	0.0014622869745662325	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999824408090639	WITHOUT_CLASSIFICATION	1.7559190936092663E-4	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997509871705155	WITHOUT_CLASSIFICATION	2.490128294845235E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999968363262992	WITHOUT_CLASSIFICATION	3.163673700689815E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9989596149695148	WITHOUT_CLASSIFICATION	0.0010403850304851598	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999443533667481	WITHOUT_CLASSIFICATION	5.564663325187973E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999982006423566	WITHOUT_CLASSIFICATION	1.7993576434531218E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999661376234671	WITHOUT_CLASSIFICATION	3.3862376533011166E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999961041174877	WITHOUT_CLASSIFICATION	3.895882512201106E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9694096484452943	WITHOUT_CLASSIFICATION	0.030590351554705585	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9996663328643971	WITHOUT_CLASSIFICATION	3.3366713560290515E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999433753337109	WITHOUT_CLASSIFICATION	5.662466628914811E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9991888706850157	WITHOUT_CLASSIFICATION	8.11129314984314E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999000796603787	WITHOUT_CLASSIFICATION	9.992033962115374E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9980919737575683	WITHOUT_CLASSIFICATION	0.0019080262424317697	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999656612431058	WITHOUT_CLASSIFICATION	3.4338756894094156E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9991079310932285	WITHOUT_CLASSIFICATION	8.920689067715456E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999658492637089	WITHOUT_CLASSIFICATION	3.415073629117777E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9989587310429253	WITHOUT_CLASSIFICATION	0.001041268957074656	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999588620193878	WITHOUT_CLASSIFICATION	4.1137980612266656E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9922754918932499	WITHOUT_CLASSIFICATION	0.007724508106750128	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999874137311169	WITHOUT_CLASSIFICATION	1.2586268883100604E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.998975644821447	WITHOUT_CLASSIFICATION	0.0010243551785530114	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.7084299249736128	IMPLEMENTATION	0.29157007502638715	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9990805305184656	WITHOUT_CLASSIFICATION	9.194694815344448E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.973881846463571	WITHOUT_CLASSIFICATION	0.026118153536428927	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9996461944679422	WITHOUT_CLASSIFICATION	3.538055320577146E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999514100626211	WITHOUT_CLASSIFICATION	4.8589937378891245E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9960696283489543	WITHOUT_CLASSIFICATION	0.0039303716510457	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9994237234541333	WITHOUT_CLASSIFICATION	5.762765458666945E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9986294468859845	WITHOUT_CLASSIFICATION	0.0013705531140154013	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9993098798479813	WITHOUT_CLASSIFICATION	6.901201520188564E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9919290808491696	WITHOUT_CLASSIFICATION	0.008070919150830342	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9992208858472813	WITHOUT_CLASSIFICATION	7.791141527186171E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9984220240405531	WITHOUT_CLASSIFICATION	0.0015779759594468765	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993704878359677	WITHOUT_CLASSIFICATION	6.295121640322295E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999843227928654	WITHOUT_CLASSIFICATION	1.5677207134534862E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9929590289041393	WITHOUT_CLASSIFICATION	0.007040971095860661	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999732400925851	WITHOUT_CLASSIFICATION	2.6759907414902952E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9997909035778916	WITHOUT_CLASSIFICATION	2.0909642210839121E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9994957019006544	WITHOUT_CLASSIFICATION	5.042980993456169E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.998247985925857	WITHOUT_CLASSIFICATION	0.00175201407414305	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999552422022843	WITHOUT_CLASSIFICATION	4.475779771566337E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999552422022843	WITHOUT_CLASSIFICATION	4.475779771566337E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999960613277936	WITHOUT_CLASSIFICATION	3.9386722064132246E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9893629248079976	WITHOUT_CLASSIFICATION	0.010637075192002455	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997468480632153	WITHOUT_CLASSIFICATION	2.5315193678471004E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999636051723888	WITHOUT_CLASSIFICATION	3.6394827611189233E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998966035524423	WITHOUT_CLASSIFICATION	1.0339644755776877E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999488398644986	WITHOUT_CLASSIFICATION	5.11601355015558E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999607253149672	WITHOUT_CLASSIFICATION	3.92746850328059E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999972166275471	WITHOUT_CLASSIFICATION	2.7833724527916975E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.760843771709725	WITHOUT_CLASSIFICATION	0.23915622829027502	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999910527238601	WITHOUT_CLASSIFICATION	8.947276139950644E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999978022161272	WITHOUT_CLASSIFICATION	2.1977838728343727E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9987069369666801	WITHOUT_CLASSIFICATION	0.0012930630333198424	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999975135638448	WITHOUT_CLASSIFICATION	2.486436155151597E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997619172101946	WITHOUT_CLASSIFICATION	2.380827898052865E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998973150881959	WITHOUT_CLASSIFICATION	1.0268491180411539E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.963998813120636	IMPLEMENTATION	0.036001186879364114	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.963998813120636	IMPLEMENTATION	0.036001186879364114	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998540405185299	WITHOUT_CLASSIFICATION	1.4595948147002528E-4	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999953061610404	WITHOUT_CLASSIFICATION	4.693838959598094E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997853804571812	WITHOUT_CLASSIFICATION	2.1461954281873797E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999492939899575	WITHOUT_CLASSIFICATION	5.0706010042643954E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9998676118803466	WITHOUT_CLASSIFICATION	1.3238811965346007E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997905201121855	WITHOUT_CLASSIFICATION	2.094798878145016E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997905201121855	WITHOUT_CLASSIFICATION	2.094798878145016E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999823143458891	WITHOUT_CLASSIFICATION	1.7685654110900686E-4	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9972758217659863	WITHOUT_CLASSIFICATION	0.0027241782340136377	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9989249235922233	WITHOUT_CLASSIFICATION	0.0010750764077766912	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999991522829	WITHOUT_CLASSIFICATION	8.477172471948481E-10	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998270770456054	WITHOUT_CLASSIFICATION	1.7292295439463477E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.99995011287893	WITHOUT_CLASSIFICATION	4.988712107000233E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988699088191276	WITHOUT_CLASSIFICATION	0.0011300911808723355	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991921464171346	WITHOUT_CLASSIFICATION	8.078535828655092E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999120841460342	WITHOUT_CLASSIFICATION	8.791585396581629E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999917575924483	WITHOUT_CLASSIFICATION	8.242407551801445E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9984657187606554	WITHOUT_CLASSIFICATION	0.0015342812393445585	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999463596385731	WITHOUT_CLASSIFICATION	5.3640361427002145E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998978598342855	WITHOUT_CLASSIFICATION	1.0214016571445466E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992398671418122	WITHOUT_CLASSIFICATION	7.601328581877126E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9971990743475728	WITHOUT_CLASSIFICATION	0.0028009256524271077	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9993395231106752	WITHOUT_CLASSIFICATION	6.604768893246755E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999992128006856	WITHOUT_CLASSIFICATION	7.871993144010837E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9988419330550071	WITHOUT_CLASSIFICATION	0.001158066944992857	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999833603237716	WITHOUT_CLASSIFICATION	1.6639676228413864E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998781474781414	WITHOUT_CLASSIFICATION	1.2185252185867846E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9918985168532821	WITHOUT_CLASSIFICATION	0.008101483146717966	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9991357844382369	WITHOUT_CLASSIFICATION	8.642155617632162E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999039756409221	WITHOUT_CLASSIFICATION	9.60243590778664E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999348873410535	WITHOUT_CLASSIFICATION	6.511265894648979E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9587093854691698	WITHOUT_CLASSIFICATION	0.04129061453083016	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999424008054206	WITHOUT_CLASSIFICATION	5.759919457943189E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9990567882888283	WITHOUT_CLASSIFICATION	9.432117111718142E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978209572423	WITHOUT_CLASSIFICATION	2.179042757658348E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9991982208753959	WITHOUT_CLASSIFICATION	8.017791246041833E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999771720074161	WITHOUT_CLASSIFICATION	2.28279925839844E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9869229504152585	WITHOUT_CLASSIFICATION	0.013077049584741651	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.99520806028751	WITHOUT_CLASSIFICATION	0.004791939712490039	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9991478343640429	WITHOUT_CLASSIFICATION	8.521656359571906E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9968592964076276	WITHOUT_CLASSIFICATION	0.00314070359237228	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9987938253315458	WITHOUT_CLASSIFICATION	0.0012061746684541917	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9994388373591407	WITHOUT_CLASSIFICATION	5.611626408592212E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9990543522154137	WITHOUT_CLASSIFICATION	9.456477845862225E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999156299588735	WITHOUT_CLASSIFICATION	8.437004112644038E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9988647764475064	WITHOUT_CLASSIFICATION	0.0011352235524937145	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9983285652967222	WITHOUT_CLASSIFICATION	0.0016714347032778449	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9996789685727053	WITHOUT_CLASSIFICATION	3.210314272947056E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999978335189142	WITHOUT_CLASSIFICATION	2.1664810858658555E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9985033027659521	WITHOUT_CLASSIFICATION	0.001496697234047812	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9994388373591407	WITHOUT_CLASSIFICATION	5.611626408592212E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9990543522154137	WITHOUT_CLASSIFICATION	9.456477845862225E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993583806699545	WITHOUT_CLASSIFICATION	6.416193300454544E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9991835364638378	WITHOUT_CLASSIFICATION	8.164635361621394E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999437563586966	WITHOUT_CLASSIFICATION	5.6243641303266435E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9993205965434157	WITHOUT_CLASSIFICATION	6.794034565843744E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999448512607785	WITHOUT_CLASSIFICATION	5.514873922150691E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9938546228488052	WITHOUT_CLASSIFICATION	0.006145377151194745	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9990066962999169	WITHOUT_CLASSIFICATION	9.933037000830669E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999726716909877	WITHOUT_CLASSIFICATION	2.7328309012197053E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999765075549637	WITHOUT_CLASSIFICATION	2.3492445036313846E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9973239771293394	WITHOUT_CLASSIFICATION	0.002676022870660603	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999737168379682	WITHOUT_CLASSIFICATION	2.6283162031847408E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9973239771293394	WITHOUT_CLASSIFICATION	0.002676022870660603	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999348172055447	WITHOUT_CLASSIFICATION	6.51827944552657E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9991035435637741	WITHOUT_CLASSIFICATION	8.96456436225877E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999348172055447	WITHOUT_CLASSIFICATION	6.51827944552657E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992729816098259	WITHOUT_CLASSIFICATION	7.270183901740612E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999409375523935	WITHOUT_CLASSIFICATION	5.906244760631625E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999017476309152	WITHOUT_CLASSIFICATION	9.825236908481182E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999017476309152	WITHOUT_CLASSIFICATION	9.825236908481182E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9991730036711977	WITHOUT_CLASSIFICATION	8.269963288024574E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9991836934438101	WITHOUT_CLASSIFICATION	8.163065561899183E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9991730036711977	WITHOUT_CLASSIFICATION	8.269963288024574E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999229175688295	WITHOUT_CLASSIFICATION	7.708243117051092E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8779413832237737	WITHOUT_CLASSIFICATION	0.12205861677622637	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9966334558841249	WITHOUT_CLASSIFICATION	0.0033665441158750907	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9993537960948137	WITHOUT_CLASSIFICATION	6.462039051863678E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999734445579483	WITHOUT_CLASSIFICATION	2.6555442051699986E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9968852171909993	WITHOUT_CLASSIFICATION	0.003114782809000788	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999891515091451	WITHOUT_CLASSIFICATION	1.0848490854955457E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9993264510651064	WITHOUT_CLASSIFICATION	6.735489348936116E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999016147680669	WITHOUT_CLASSIFICATION	9.838523193310008E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998135513616188	WITHOUT_CLASSIFICATION	1.864486383812107E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997679057196535	WITHOUT_CLASSIFICATION	2.3209428034652314E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998469168764628	WITHOUT_CLASSIFICATION	1.5308312353727358E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999529393372835	WITHOUT_CLASSIFICATION	4.7060662716577043E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998396840800576	WITHOUT_CLASSIFICATION	1.6031591994239867E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996047823380296	WITHOUT_CLASSIFICATION	3.952176619704028E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9987889581937844	WITHOUT_CLASSIFICATION	0.0012110418062155671	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9970022978056843	WITHOUT_CLASSIFICATION	0.002997702194315789	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9983691082363445	WITHOUT_CLASSIFICATION	0.0016308917636554288	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9755388872122792	WITHOUT_CLASSIFICATION	0.024461112787720778	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996000358279143	WITHOUT_CLASSIFICATION	3.9996417208565816E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999836391494358	WITHOUT_CLASSIFICATION	1.636085056419613E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9956732639166465	WITHOUT_CLASSIFICATION	0.00432673608335352	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9995713448727316	WITHOUT_CLASSIFICATION	4.2865512726831905E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9966334558841249	WITHOUT_CLASSIFICATION	0.0033665441158750907	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998709869272174	WITHOUT_CLASSIFICATION	1.2901307278255421E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9950112614553795	WITHOUT_CLASSIFICATION	0.004988738544620485	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9942786554748101	WITHOUT_CLASSIFICATION	0.005721344525189815	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9965570583364438	WITHOUT_CLASSIFICATION	0.003442941663556206	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999002778554764	WITHOUT_CLASSIFICATION	9.972214452355348E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9993129873017448	WITHOUT_CLASSIFICATION	6.870126982552218E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999229175688295	WITHOUT_CLASSIFICATION	7.708243117051092E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999229175688295	WITHOUT_CLASSIFICATION	7.708243117051092E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9958722341280454	WITHOUT_CLASSIFICATION	0.004127765871954678	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9993068837583868	WITHOUT_CLASSIFICATION	6.931162416130999E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.996766645644221	WITHOUT_CLASSIFICATION	0.003233354355778989	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9969626640955963	WITHOUT_CLASSIFICATION	0.0030373359044035915	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9985277560323692	WITHOUT_CLASSIFICATION	0.0014722439676308529	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999599233461053	WITHOUT_CLASSIFICATION	4.007665389470799E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9988463828025654	WITHOUT_CLASSIFICATION	0.0011536171974345815	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999988891265295	WITHOUT_CLASSIFICATION	1.1108734704927378E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999709779436667	WITHOUT_CLASSIFICATION	2.902205633330416E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999311777553203	WITHOUT_CLASSIFICATION	6.88222446797538E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999016147680669	WITHOUT_CLASSIFICATION	9.838523193310008E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9979591917778834	WITHOUT_CLASSIFICATION	0.002040808222116588	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999311777553203	WITHOUT_CLASSIFICATION	6.88222446797538E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9990749143410345	WITHOUT_CLASSIFICATION	9.250856589655964E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999507233394284	WITHOUT_CLASSIFICATION	4.927666057169018E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9993257452297687	WITHOUT_CLASSIFICATION	6.742547702312398E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9883942753983659	WITHOUT_CLASSIFICATION	0.011605724601633994	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996329816447387	WITHOUT_CLASSIFICATION	3.670183552612947E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999956631320437	WITHOUT_CLASSIFICATION	4.336867956341721E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999496420917655	WITHOUT_CLASSIFICATION	5.03579082346114E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999947262905	WITHOUT_CLASSIFICATION	5.273709521145109E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9992142792572202	WITHOUT_CLASSIFICATION	7.857207427799175E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998827123442128	WITHOUT_CLASSIFICATION	1.1728765578722237E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999939710276072	WITHOUT_CLASSIFICATION	6.028972392797629E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9863171867628884	WITHOUT_CLASSIFICATION	0.013682813237111732	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999311777553203	WITHOUT_CLASSIFICATION	6.88222446797538E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996329816447387	WITHOUT_CLASSIFICATION	3.670183552612947E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999496420917655	WITHOUT_CLASSIFICATION	5.03579082346114E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9990547920419849	WITHOUT_CLASSIFICATION	9.452079580151872E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9972453034232738	WITHOUT_CLASSIFICATION	0.0027546965767262393	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9998492951383554	WITHOUT_CLASSIFICATION	1.5070486164448144E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9984743767939576	WITHOUT_CLASSIFICATION	0.0015256232060424475	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999318124338989	WITHOUT_CLASSIFICATION	6.818756610109636E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9990749143410345	WITHOUT_CLASSIFICATION	9.250856589655964E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9989569920055689	WITHOUT_CLASSIFICATION	0.0010430079944311291	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9979264897090805	WITHOUT_CLASSIFICATION	0.002073510290919456	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9986306102376163	WITHOUT_CLASSIFICATION	0.001369389762383639	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.574178213378924	IMPLEMENTATION	0.4258217866210759	WITHOUT_CLASSIFICATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6522481959210336	IMPLEMENTATION	0.3477518040789664	WITHOUT_CLASSIFICATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9977560190200492	WITHOUT_CLASSIFICATION	0.0022439809799507013	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992729816098259	WITHOUT_CLASSIFICATION	7.270183901740612E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734847000287	WITHOUT_CLASSIFICATION	2.651529997131971E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999994623478738	WITHOUT_CLASSIFICATION	5.376521260973959E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999407630152742	WITHOUT_CLASSIFICATION	5.923698472569047E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999965517426955	WITHOUT_CLASSIFICATION	3.448257304600484E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999950410744007	WITHOUT_CLASSIFICATION	4.958925599279578E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997407356119592	WITHOUT_CLASSIFICATION	2.5926438804084733E-4	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9992396210705363	WITHOUT_CLASSIFICATION	7.603789294637418E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999670363320371	WITHOUT_CLASSIFICATION	3.296366796294779E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.99655976137494	WITHOUT_CLASSIFICATION	0.0034402386250600493	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9997877334300682	WITHOUT_CLASSIFICATION	2.1226656993181153E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9955196762542166	WITHOUT_CLASSIFICATION	0.004480323745783418	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998537817987804	WITHOUT_CLASSIFICATION	1.4621820121957487E-4	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9997180834785432	WITHOUT_CLASSIFICATION	2.8191652145689145E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9994593667856364	WITHOUT_CLASSIFICATION	5.406332143636563E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9995944786075865	WITHOUT_CLASSIFICATION	4.055213924134212E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9579017781117435	WITHOUT_CLASSIFICATION	0.04209822188825646	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9953257259741679	WITHOUT_CLASSIFICATION	0.004674274025832182	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9996562982625818	WITHOUT_CLASSIFICATION	3.43701737418175E-4	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9924264132772334	WITHOUT_CLASSIFICATION	0.007573586722766701	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9967321599495249	WITHOUT_CLASSIFICATION	0.003267840050475177	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999823530465072	WITHOUT_CLASSIFICATION	1.7646953492826744E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999952723326202	WITHOUT_CLASSIFICATION	4.727667379797165E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9972898950751262	WITHOUT_CLASSIFICATION	0.0027101049248738607	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9993358401550534	WITHOUT_CLASSIFICATION	6.641598449466222E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.998855761115856	WITHOUT_CLASSIFICATION	0.0011442388841440157	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9989057214399364	WITHOUT_CLASSIFICATION	0.001094278560063625	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998856696828462	WITHOUT_CLASSIFICATION	1.1433031715381968E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999913888411808	WITHOUT_CLASSIFICATION	8.611158819201871E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999776737805981	WITHOUT_CLASSIFICATION	2.2326219401859856E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9993595850452885	WITHOUT_CLASSIFICATION	6.404149547113731E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8012965310184447	IMPLEMENTATION	0.1987034689815553	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9979621589906916	WITHOUT_CLASSIFICATION	0.0020378410093083526	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9990840765238966	WITHOUT_CLASSIFICATION	9.159234761034872E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999866612310382	WITHOUT_CLASSIFICATION	1.3338768961799544E-4	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9917312175986129	WITHOUT_CLASSIFICATION	0.008268782401387124	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997329507089527	WITHOUT_CLASSIFICATION	2.670492910473711E-4	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999284581985134	WITHOUT_CLASSIFICATION	7.154180148662185E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999061846999581	WITHOUT_CLASSIFICATION	9.381530004202846E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999990793236947	WITHOUT_CLASSIFICATION	9.206763051949755E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998873161867455	WITHOUT_CLASSIFICATION	1.1268381325444276E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999716386175733	WITHOUT_CLASSIFICATION	2.8361382426692977E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997015347962799	WITHOUT_CLASSIFICATION	2.9846520372013346E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9987921135906996	WITHOUT_CLASSIFICATION	0.001207886409300325	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999716386175733	WITHOUT_CLASSIFICATION	2.8361382426692977E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998873161867455	WITHOUT_CLASSIFICATION	1.1268381325444276E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997015347962799	WITHOUT_CLASSIFICATION	2.9846520372013346E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9997951516244789	WITHOUT_CLASSIFICATION	2.0484837552124186E-4	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999805119916245	WITHOUT_CLASSIFICATION	1.9488008375415965E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9952401787534143	WITHOUT_CLASSIFICATION	0.004759821246585635	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998768620977786	WITHOUT_CLASSIFICATION	1.2313790222141333E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999987027407363	WITHOUT_CLASSIFICATION	1.2972592636390597E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5305480135750714	WITHOUT_CLASSIFICATION	0.46945198642492875	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9869745534357466	WITHOUT_CLASSIFICATION	0.013025446564253473	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998799428244165	WITHOUT_CLASSIFICATION	1.200571755835256E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998595999604173	WITHOUT_CLASSIFICATION	1.404000395827597E-4	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9996314662919107	WITHOUT_CLASSIFICATION	3.685337080894214E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9968380954999322	WITHOUT_CLASSIFICATION	0.0031619045000677326	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999878640210713	WITHOUT_CLASSIFICATION	1.2135978928688878E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999827395797239	WITHOUT_CLASSIFICATION	1.7260420276101065E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9995454644361983	WITHOUT_CLASSIFICATION	4.5453556380180553E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998619315364415	WITHOUT_CLASSIFICATION	1.380684635584356E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9986064020146023	WITHOUT_CLASSIFICATION	0.001393597985397667	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989809813136341	WITHOUT_CLASSIFICATION	0.0010190186863658403	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999619915118224	WITHOUT_CLASSIFICATION	3.800848817767874E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997546612982858	WITHOUT_CLASSIFICATION	2.453387017141628E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9982012222883567	WITHOUT_CLASSIFICATION	0.0017987777116433288	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9991380261692181	WITHOUT_CLASSIFICATION	8.619738307819042E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.997980247851785	WITHOUT_CLASSIFICATION	0.00201975214821508	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994458475041765	WITHOUT_CLASSIFICATION	5.541524958234749E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997302403588264	WITHOUT_CLASSIFICATION	2.6975964117353967E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9980216925749685	WITHOUT_CLASSIFICATION	0.0019783074250315116	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9980216925749685	WITHOUT_CLASSIFICATION	0.0019783074250315116	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9989134985365153	WITHOUT_CLASSIFICATION	0.0010865014634846035	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9989134985365153	WITHOUT_CLASSIFICATION	0.0010865014634846035	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9963892687657192	WITHOUT_CLASSIFICATION	0.003610731234280802	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989809813136341	WITHOUT_CLASSIFICATION	0.0010190186863658403	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9994003822698516	WITHOUT_CLASSIFICATION	5.996177301483886E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999006782416806	WITHOUT_CLASSIFICATION	9.93217583192899E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9993269909766523	WITHOUT_CLASSIFICATION	6.730090233475762E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9993269909766523	WITHOUT_CLASSIFICATION	6.730090233475762E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9996041078617135	WITHOUT_CLASSIFICATION	3.958921382865214E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9793116607844727	WITHOUT_CLASSIFICATION	0.02068833921552732	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9935446999453028	WITHOUT_CLASSIFICATION	0.006455300054697111	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9993783917139407	WITHOUT_CLASSIFICATION	6.21608286059252E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999679796724805	WITHOUT_CLASSIFICATION	3.202032751949755E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999876456610959	WITHOUT_CLASSIFICATION	1.2354338904101382E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999704784115242	WITHOUT_CLASSIFICATION	2.952158847580441E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998196731276902	WITHOUT_CLASSIFICATION	1.8032687230973293E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9991704299970107	WITHOUT_CLASSIFICATION	8.295700029892395E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999785088310396	WITHOUT_CLASSIFICATION	2.1491168960497897E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9988062889552188	WITHOUT_CLASSIFICATION	0.0011937110447810951	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9980860998302343	WITHOUT_CLASSIFICATION	0.0019139001697656925	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9995276260650627	WITHOUT_CLASSIFICATION	4.723739349372976E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.998054380393049	WITHOUT_CLASSIFICATION	0.0019456196069510103	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9914896217292931	WITHOUT_CLASSIFICATION	0.008510378270707001	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997273715128729	WITHOUT_CLASSIFICATION	2.7262848712710435E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997540496033316	WITHOUT_CLASSIFICATION	2.4595039666841495E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9975951350018196	WITHOUT_CLASSIFICATION	0.0024048649981804338	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.8780297232890137	WITHOUT_CLASSIFICATION	0.12197027671098626	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999270070473797	WITHOUT_CLASSIFICATION	7.299295262030028E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999158265766561	WITHOUT_CLASSIFICATION	8.417342334378389E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999845859106515	WITHOUT_CLASSIFICATION	1.5414089348437125E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9996598534239807	WITHOUT_CLASSIFICATION	3.401465760193094E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999964889954132	WITHOUT_CLASSIFICATION	3.511004586920325E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990669475376114	WITHOUT_CLASSIFICATION	9.330524623886409E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9995822267407994	WITHOUT_CLASSIFICATION	4.177732592006098E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9996562982625818	WITHOUT_CLASSIFICATION	3.43701737418175E-4	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997118128388957	WITHOUT_CLASSIFICATION	2.881871611043537E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999964051778628	WITHOUT_CLASSIFICATION	3.5948221371723844E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999747964915856	WITHOUT_CLASSIFICATION	2.520350841439114E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9973394030980087	WITHOUT_CLASSIFICATION	0.0026605969019911913	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9973394030980087	WITHOUT_CLASSIFICATION	0.0026605969019911913	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9996021505131779	WITHOUT_CLASSIFICATION	3.9784948682218573E-4	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9988087890398372	WITHOUT_CLASSIFICATION	0.0011912109601627825	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9985179198546139	WITHOUT_CLASSIFICATION	0.0014820801453860831	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9985179198546139	WITHOUT_CLASSIFICATION	0.0014820801453860831	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9929706547760725	WITHOUT_CLASSIFICATION	0.007029345223927546	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9997903435317925	WITHOUT_CLASSIFICATION	2.0965646820756233E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9821122699197796	WITHOUT_CLASSIFICATION	0.01788773008022048	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999644894594512	WITHOUT_CLASSIFICATION	3.55105405488383E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9966319650527988	WITHOUT_CLASSIFICATION	0.003368034947201296	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998695394416932	WITHOUT_CLASSIFICATION	1.3046055830685018E-4	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999769530935501	WITHOUT_CLASSIFICATION	2.3046906449905182E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997691350627015	WITHOUT_CLASSIFICATION	2.3086493729852783E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997691350627015	WITHOUT_CLASSIFICATION	2.3086493729852783E-4	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996769913966241	WITHOUT_CLASSIFICATION	3.230086033759266E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999101069347314	WITHOUT_CLASSIFICATION	8.989306526867469E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999101069347314	WITHOUT_CLASSIFICATION	8.989306526867469E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998952366616356	WITHOUT_CLASSIFICATION	1.0476333836433129E-4	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999797734261039	WITHOUT_CLASSIFICATION	2.0226573896106817E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9996489316653359	WITHOUT_CLASSIFICATION	3.510683346641257E-4	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999203172712895	WITHOUT_CLASSIFICATION	7.968272871048413E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9984459743406374	WITHOUT_CLASSIFICATION	0.0015540256593625998	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999984428666221	WITHOUT_CLASSIFICATION	1.5571333778896327E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999411655244756	WITHOUT_CLASSIFICATION	5.883447552440744E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9994227222460704	WITHOUT_CLASSIFICATION	5.772777539294806E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9904630304763564	WITHOUT_CLASSIFICATION	0.009536969523643576	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992961801681359	WITHOUT_CLASSIFICATION	7.038198318640225E-4	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.987561382359502	WITHOUT_CLASSIFICATION	0.01243861764049793	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998757266058168	WITHOUT_CLASSIFICATION	1.2427339418318625E-4	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997891498796454	WITHOUT_CLASSIFICATION	2.1085012035454092E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9973369276592144	WITHOUT_CLASSIFICATION	0.0026630723407855745	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9989119541954833	WITHOUT_CLASSIFICATION	0.0010880458045166436	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9983050585341967	WITHOUT_CLASSIFICATION	0.0016949414658032449	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998988048900935	WITHOUT_CLASSIFICATION	1.0119510990654454E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9985809440151582	WITHOUT_CLASSIFICATION	0.00141905598484181	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998301984496428	WITHOUT_CLASSIFICATION	1.6980155035715457E-4	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9766880103277799	WITHOUT_CLASSIFICATION	0.023311989672220153	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9995988299431989	WITHOUT_CLASSIFICATION	4.011700568011534E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985456818863059	WITHOUT_CLASSIFICATION	0.0014543181136940158	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999977823281193	WITHOUT_CLASSIFICATION	2.217671880596961E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.913933690754987	IMPLEMENTATION	0.08606630924501295	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999933362717504	WITHOUT_CLASSIFICATION	6.663728249539322E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985456818863059	WITHOUT_CLASSIFICATION	0.0014543181136940158	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.5054023821051364	IMPLEMENTATION	0.49459761789486356	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999721180562747	WITHOUT_CLASSIFICATION	2.7881943725303096E-4	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999738655759941	WITHOUT_CLASSIFICATION	2.6134424005925277E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998816084126754	WITHOUT_CLASSIFICATION	1.1839158732460197E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999723601919973	WITHOUT_CLASSIFICATION	2.7639808002701193E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9981528561471981	WITHOUT_CLASSIFICATION	0.0018471438528018624	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999511076746755	WITHOUT_CLASSIFICATION	4.8892325324385526E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998810756599402	WITHOUT_CLASSIFICATION	1.189243400598002E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998559440102441	WITHOUT_CLASSIFICATION	1.4405598975578447E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999853190283042	WITHOUT_CLASSIFICATION	1.4680971695662145E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998559440102441	WITHOUT_CLASSIFICATION	1.4405598975578447E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999818180146002	WITHOUT_CLASSIFICATION	1.8181985399809104E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998481391298499	WITHOUT_CLASSIFICATION	1.5186087015002942E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.501835306442814	WITHOUT_CLASSIFICATION	0.49816469355718596	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999616343528263	WITHOUT_CLASSIFICATION	3.836564717371938E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999784276856487	WITHOUT_CLASSIFICATION	2.1572314351310965E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999912496976897	WITHOUT_CLASSIFICATION	8.750302310283483E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997420999130535	WITHOUT_CLASSIFICATION	2.579000869463956E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999981018838603	WITHOUT_CLASSIFICATION	1.8981161396986487E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997420999130535	WITHOUT_CLASSIFICATION	2.579000869463956E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9990061056347017	WITHOUT_CLASSIFICATION	9.938943652983408E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99988368806543	WITHOUT_CLASSIFICATION	1.1631193456999894E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999133857270678	WITHOUT_CLASSIFICATION	8.661427293226977E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999990411903264	WITHOUT_CLASSIFICATION	9.588096736024256E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999912496976897	WITHOUT_CLASSIFICATION	8.750302310283483E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999981018838603	WITHOUT_CLASSIFICATION	1.8981161396986487E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9990061056347017	WITHOUT_CLASSIFICATION	9.938943652983408E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992484232810985	WITHOUT_CLASSIFICATION	7.515767189014291E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9969518530706418	WITHOUT_CLASSIFICATION	0.003048146929358222	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9967628625794585	WITHOUT_CLASSIFICATION	0.003237137420541581	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.995393073591282	WITHOUT_CLASSIFICATION	0.004606926408717997	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996030329672275	WITHOUT_CLASSIFICATION	3.969670327725752E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999256344759061	WITHOUT_CLASSIFICATION	7.436552409387191E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997540496033316	WITHOUT_CLASSIFICATION	2.4595039666841495E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99988368806543	WITHOUT_CLASSIFICATION	1.1631193456999894E-4	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9346272558730533	WITHOUT_CLASSIFICATION	0.06537274412694681	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9989414722454784	WITHOUT_CLASSIFICATION	0.0010585277545216896	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9997968181728788	WITHOUT_CLASSIFICATION	2.0318182712122346E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997540496033316	WITHOUT_CLASSIFICATION	2.4595039666841495E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9990926943747923	WITHOUT_CLASSIFICATION	9.073056252076114E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997540496033316	WITHOUT_CLASSIFICATION	2.4595039666841495E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9997508009124492	WITHOUT_CLASSIFICATION	2.491990875508801E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995239087628992	WITHOUT_CLASSIFICATION	4.7609123710076274E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9961622924500482	WITHOUT_CLASSIFICATION	0.0038377075499519053	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.998457552523733	WITHOUT_CLASSIFICATION	0.001542447476266996	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999108349092021	WITHOUT_CLASSIFICATION	8.91650907979123E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9990656724259669	WITHOUT_CLASSIFICATION	9.34327574033175E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998269480088224	WITHOUT_CLASSIFICATION	1.7305199117747242E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998780330879292	WITHOUT_CLASSIFICATION	1.2196691207083503E-4	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9950547186929413	WITHOUT_CLASSIFICATION	0.004945281307058793	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9989787894135562	WITHOUT_CLASSIFICATION	0.0010212105864437764	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999212099328975	WITHOUT_CLASSIFICATION	7.879006710247833E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9989787894135562	WITHOUT_CLASSIFICATION	0.0010212105864437764	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9932253348898976	WITHOUT_CLASSIFICATION	0.0067746651101024255	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9969681170955361	WITHOUT_CLASSIFICATION	0.003031882904463833	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999456600598792	WITHOUT_CLASSIFICATION	5.433994012082005E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999609459314989	WITHOUT_CLASSIFICATION	3.905406850108907E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999707860407084	WITHOUT_CLASSIFICATION	2.921395929162492E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998358174230121	WITHOUT_CLASSIFICATION	1.6418257698780234E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999975957504079	WITHOUT_CLASSIFICATION	2.4042495920266384E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999279845820042	WITHOUT_CLASSIFICATION	7.20154179957563E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991249589186394	WITHOUT_CLASSIFICATION	8.750410813605993E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991249589186394	WITHOUT_CLASSIFICATION	8.750410813605993E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9998059415257384	WITHOUT_CLASSIFICATION	1.9405847426164435E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999981295266039	WITHOUT_CLASSIFICATION	1.8704733961046487E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999970830923824	WITHOUT_CLASSIFICATION	2.9169076176223125E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9992918718192548	WITHOUT_CLASSIFICATION	7.081281807451049E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997470338531874	WITHOUT_CLASSIFICATION	2.5296614681261076E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999977281058198	WITHOUT_CLASSIFICATION	2.271894180282949E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998639683459579	WITHOUT_CLASSIFICATION	1.3603165404217543E-4	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996376513116023	WITHOUT_CLASSIFICATION	3.623486883976116E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9945105595713888	WITHOUT_CLASSIFICATION	0.005489440428611194	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.997787139172032	WITHOUT_CLASSIFICATION	0.002212860827968015	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9997425160112776	WITHOUT_CLASSIFICATION	2.574839887223864E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999535757567036	WITHOUT_CLASSIFICATION	4.642424329643082E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9987226089961425	WITHOUT_CLASSIFICATION	0.0012773910038575268	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9942737610219057	WITHOUT_CLASSIFICATION	0.005726238978094341	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9942737610219057	WITHOUT_CLASSIFICATION	0.005726238978094341	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9987356776392058	WITHOUT_CLASSIFICATION	0.0012643223607942504	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998780330879292	WITHOUT_CLASSIFICATION	1.2196691207083503E-4	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981859046176186	WITHOUT_CLASSIFICATION	0.0018140953823813405	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9965045648620173	WITHOUT_CLASSIFICATION	0.0034954351379827982	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9992446927546569	WITHOUT_CLASSIFICATION	7.553072453431864E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999607757583759	WITHOUT_CLASSIFICATION	3.922424162410551E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9994816356619194	WITHOUT_CLASSIFICATION	5.183643380806642E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9997181452429119	WITHOUT_CLASSIFICATION	2.8185475708810505E-4	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998325800032384	WITHOUT_CLASSIFICATION	1.6741999676150204E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9990549531304324	WITHOUT_CLASSIFICATION	9.450468695675722E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991998305886	WITHOUT_CLASSIFICATION	8.001694114173928E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999525256010006	WITHOUT_CLASSIFICATION	4.747439899949019E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999836433967993	WITHOUT_CLASSIFICATION	1.6356603200710105E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9939309456879803	WITHOUT_CLASSIFICATION	0.006069054312019721	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9993634661468682	WITHOUT_CLASSIFICATION	6.365338531316801E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999553428237822	WITHOUT_CLASSIFICATION	4.465717621778654E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999967105485191	WITHOUT_CLASSIFICATION	3.289451480909125E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9994316433437888	WITHOUT_CLASSIFICATION	5.683566562112326E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9991282541642643	WITHOUT_CLASSIFICATION	8.717458357357348E-4	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999700213074452	WITHOUT_CLASSIFICATION	2.9978692554768782E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999889476848047	WITHOUT_CLASSIFICATION	1.1052315195262934E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9987739255784519	WITHOUT_CLASSIFICATION	0.0012260744215480623	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9997528855453887	WITHOUT_CLASSIFICATION	2.471144546113015E-4	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999977921678906	WITHOUT_CLASSIFICATION	2.2078321094162775E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999980804113657	WITHOUT_CLASSIFICATION	1.919588634365463E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.997985975314111	WITHOUT_CLASSIFICATION	0.002014024685889063	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.938704256700748	WITHOUT_CLASSIFICATION	0.06129574329925206	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9982473550950626	WITHOUT_CLASSIFICATION	0.0017526449049374395	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9942028694460368	WITHOUT_CLASSIFICATION	0.005797130553963171	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9997477369785016	WITHOUT_CLASSIFICATION	2.522630214983469E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9997553895696236	WITHOUT_CLASSIFICATION	2.4461043037635205E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998596874400763	WITHOUT_CLASSIFICATION	1.4031255992374734E-4	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997607347011129	WITHOUT_CLASSIFICATION	2.392652988870448E-4	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9984029712095945	WITHOUT_CLASSIFICATION	0.0015970287904055142	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996878843585995	WITHOUT_CLASSIFICATION	3.121156414005353E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9993484117744963	WITHOUT_CLASSIFICATION	6.515882255037377E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9992279290460604	WITHOUT_CLASSIFICATION	7.720709539395878E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9992279290460604	WITHOUT_CLASSIFICATION	7.720709539395878E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999352167825078	WITHOUT_CLASSIFICATION	6.478321749220021E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998898620126927	WITHOUT_CLASSIFICATION	1.1013798730733943E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999279198877744	WITHOUT_CLASSIFICATION	7.208011222554587E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999279198877744	WITHOUT_CLASSIFICATION	7.208011222554587E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999054636817993	WITHOUT_CLASSIFICATION	9.45363182006398E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9966341645697755	WITHOUT_CLASSIFICATION	0.003365835430224424	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9954530184750496	WITHOUT_CLASSIFICATION	0.004546981524950356	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999880021921362	WITHOUT_CLASSIFICATION	1.1997807863729228E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998409739295894	WITHOUT_CLASSIFICATION	1.5902607041064006E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999773746302157	WITHOUT_CLASSIFICATION	2.262536978433283E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999773746302157	WITHOUT_CLASSIFICATION	2.262536978433283E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999690913599056	WITHOUT_CLASSIFICATION	3.090864009429066E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999229175688295	WITHOUT_CLASSIFICATION	7.708243117051092E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9992845189126588	WITHOUT_CLASSIFICATION	7.154810873412086E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9995862095106333	WITHOUT_CLASSIFICATION	4.1379048936678536E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999343153001367	WITHOUT_CLASSIFICATION	6.568469986339988E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9996533070733444	WITHOUT_CLASSIFICATION	3.466929266554857E-4	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999992208102554	WITHOUT_CLASSIFICATION	7.791897445935146E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9987512492807422	WITHOUT_CLASSIFICATION	0.0012487507192578953	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999774181700511	WITHOUT_CLASSIFICATION	2.2581829948907487E-4	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9992018521594718	WITHOUT_CLASSIFICATION	7.981478405281523E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9996932255775697	WITHOUT_CLASSIFICATION	3.06774422430328E-4	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999948337231456	WITHOUT_CLASSIFICATION	5.1662768543916354E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9982904287402777	WITHOUT_CLASSIFICATION	0.0017095712597223415	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.7013016119844119	WITHOUT_CLASSIFICATION	0.29869838801558823	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.5041986546956535	WITHOUT_CLASSIFICATION	0.4958013453043464	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999342362154625	WITHOUT_CLASSIFICATION	6.576378453745974E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9990730513658231	WITHOUT_CLASSIFICATION	9.269486341768943E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999947710186153	WITHOUT_CLASSIFICATION	5.2289813846614434E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9990027418713998	WITHOUT_CLASSIFICATION	9.972581286001368E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9742678042020506	WITHOUT_CLASSIFICATION	0.025732195797949352	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9946658741098519	WITHOUT_CLASSIFICATION	0.00533412589014811	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9990903931969901	WITHOUT_CLASSIFICATION	9.096068030098068E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9968200529099447	WITHOUT_CLASSIFICATION	0.003179947090055247	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9986422058813739	WITHOUT_CLASSIFICATION	0.001357794118626162	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9966849776120492	WITHOUT_CLASSIFICATION	0.003315022387950847	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9992306784784488	WITHOUT_CLASSIFICATION	7.693215215511537E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9998920580249556	WITHOUT_CLASSIFICATION	1.0794197504441973E-4	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.999927908615164	WITHOUT_CLASSIFICATION	7.209138483598842E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9998368410053087	WITHOUT_CLASSIFICATION	1.6315899469145724E-4	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999962500279007	WITHOUT_CLASSIFICATION	3.749972099274844E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997237438540871	WITHOUT_CLASSIFICATION	2.762561459129379E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999764191413837	WITHOUT_CLASSIFICATION	2.3580858616317254E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999388562909969	WITHOUT_CLASSIFICATION	6.114370900316513E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999745702502403	WITHOUT_CLASSIFICATION	2.5429749759784456E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9995565192132385	WITHOUT_CLASSIFICATION	4.434807867614617E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999216654151653	WITHOUT_CLASSIFICATION	7.833458483471001E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998887065017016	WITHOUT_CLASSIFICATION	1.1129349829841796E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999722096899417	WITHOUT_CLASSIFICATION	2.779031005821715E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999369100204497	WITHOUT_CLASSIFICATION	6.308997955035267E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998544947449604	WITHOUT_CLASSIFICATION	1.4550525503956465E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9991436439352238	WITHOUT_CLASSIFICATION	8.563560647762565E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9993367276704676	WITHOUT_CLASSIFICATION	6.632723295324005E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9991152602330059	WITHOUT_CLASSIFICATION	8.847397669940175E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9990847683220114	WITHOUT_CLASSIFICATION	9.152316779884753E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9993768309967455	WITHOUT_CLASSIFICATION	6.231690032546251E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999764139340724	WITHOUT_CLASSIFICATION	2.3586065927611597E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9980350543907205	WITHOUT_CLASSIFICATION	0.0019649456092794997	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9992638673228719	WITHOUT_CLASSIFICATION	7.361326771280737E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998746988126679	WITHOUT_CLASSIFICATION	1.253011873321605E-4	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9929458217247348	WITHOUT_CLASSIFICATION	0.007054178275265108	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.73383619793822	WITHOUT_CLASSIFICATION	0.26616380206178003	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9993862812081752	WITHOUT_CLASSIFICATION	6.137187918246982E-4	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998246605081017	WITHOUT_CLASSIFICATION	1.7533949189831654E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999926677585942	WITHOUT_CLASSIFICATION	7.332241405797836E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999021821995654	WITHOUT_CLASSIFICATION	9.781780043471482E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998838927415382	WITHOUT_CLASSIFICATION	1.1610725846168267E-4	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998883876605617	WITHOUT_CLASSIFICATION	1.1161233943836404E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999828108406125	WITHOUT_CLASSIFICATION	1.7189159387507693E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.993748537256231	WITHOUT_CLASSIFICATION	0.006251462743768958	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.993748537256231	WITHOUT_CLASSIFICATION	0.006251462743768958	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999941698903	WITHOUT_CLASSIFICATION	5.8301096999244183E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999958108903628	WITHOUT_CLASSIFICATION	4.189109637164135E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999965697663188	WITHOUT_CLASSIFICATION	3.4302336812135386E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999943927416255	WITHOUT_CLASSIFICATION	5.607258374493164E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999379860202231	WITHOUT_CLASSIFICATION	6.201397977688085E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9998557241651095	WITHOUT_CLASSIFICATION	1.4427583489050718E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999114462775958	WITHOUT_CLASSIFICATION	8.855372240430504E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999946937621428	WITHOUT_CLASSIFICATION	5.306237857211958E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999957512142695	WITHOUT_CLASSIFICATION	4.2487857305020114E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.99998945145026	WITHOUT_CLASSIFICATION	1.0548549740038259E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99999592146936	WITHOUT_CLASSIFICATION	4.078530640079844E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999353729347044	WITHOUT_CLASSIFICATION	6.462706529560309E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999944414098583	WITHOUT_CLASSIFICATION	5.558590141742542E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998119062385067	WITHOUT_CLASSIFICATION	1.8809376149328858E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994869173246841	WITHOUT_CLASSIFICATION	5.13082675315955E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994869173246841	WITHOUT_CLASSIFICATION	5.13082675315955E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999976272304136	WITHOUT_CLASSIFICATION	2.3727695863923902E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999184685306439	WITHOUT_CLASSIFICATION	8.153146935596267E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998344677911698	WITHOUT_CLASSIFICATION	1.6553220883015632E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999914395054509	WITHOUT_CLASSIFICATION	8.560494549120352E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999519523570406	WITHOUT_CLASSIFICATION	4.8047642959409166E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998071528714991	WITHOUT_CLASSIFICATION	1.9284712850083438E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998974064558923	WITHOUT_CLASSIFICATION	1.0259354410774092E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999442970328746	WITHOUT_CLASSIFICATION	5.570296712540926E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998593117890535	WITHOUT_CLASSIFICATION	1.406882109465086E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9995615540305749	WITHOUT_CLASSIFICATION	4.3844596942511514E-4	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999613031705766	WITHOUT_CLASSIFICATION	3.869682942336837E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9993150754881308	WITHOUT_CLASSIFICATION	6.849245118691138E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9998856314968093	WITHOUT_CLASSIFICATION	1.1436850319079768E-4	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9986879445009138	WITHOUT_CLASSIFICATION	0.0013120554990861436	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9993196766666943	WITHOUT_CLASSIFICATION	6.803233333055927E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9993210782744499	WITHOUT_CLASSIFICATION	6.789217255500846E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999938735451546	WITHOUT_CLASSIFICATION	6.126454845387525E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999936200356883	WITHOUT_CLASSIFICATION	6.37996431183424E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9997399561584939	WITHOUT_CLASSIFICATION	2.60043841506123E-4	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999828930275153	WITHOUT_CLASSIFICATION	1.7106972484731488E-5	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999995144502969	WITHOUT_CLASSIFICATION	4.855497030136425E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994922168375	WITHOUT_CLASSIFICATION	5.077831625033673E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999411493579217	WITHOUT_CLASSIFICATION	5.8850642078359896E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999974846701234	WITHOUT_CLASSIFICATION	2.5153298766022685E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9593283062204624	WITHOUT_CLASSIFICATION	0.04067169377953765	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9957790859722396	WITHOUT_CLASSIFICATION	0.004220914027760353	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9935373573541689	WITHOUT_CLASSIFICATION	0.006462642645831028	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9993652402949494	WITHOUT_CLASSIFICATION	6.347597050505009E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999474094110602	WITHOUT_CLASSIFICATION	5.2590588939730164E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999145822228745	WITHOUT_CLASSIFICATION	8.541777712552932E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9991387478728816	WITHOUT_CLASSIFICATION	8.612521271183131E-4	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999724971609764	WITHOUT_CLASSIFICATION	2.7502839023613036E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9918472657094188	WITHOUT_CLASSIFICATION	0.00815273429058104	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9996269297127186	WITHOUT_CLASSIFICATION	3.7307028728139976E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994532877198583	WITHOUT_CLASSIFICATION	5.467122801417498E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998908071246203	WITHOUT_CLASSIFICATION	1.0919287537970691E-4	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999895384362675	WITHOUT_CLASSIFICATION	1.0461563732532033E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9997474764227888	WITHOUT_CLASSIFICATION	2.5252357721108426E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999952954250301	WITHOUT_CLASSIFICATION	4.704574969907075E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995463792224216	WITHOUT_CLASSIFICATION	4.5362077757839036E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995463792224216	WITHOUT_CLASSIFICATION	4.5362077757839036E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999276494560281	WITHOUT_CLASSIFICATION	7.235054397190949E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999885461063373	WITHOUT_CLASSIFICATION	1.1453893662816371E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999582820141069	WITHOUT_CLASSIFICATION	4.1717985893167425E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999631175060208	WITHOUT_CLASSIFICATION	3.688249397917116E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.7310533299833376	WITHOUT_CLASSIFICATION	0.2689466700166625	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999646513335522	WITHOUT_CLASSIFICATION	3.534866644788206E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997718962869555	WITHOUT_CLASSIFICATION	2.2810371304457768E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9974644642965479	WITHOUT_CLASSIFICATION	0.0025355357034521553	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999021690548	WITHOUT_CLASSIFICATION	9.783094521749138E-8	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993744123063405	WITHOUT_CLASSIFICATION	6.255876936593939E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998573691025986	WITHOUT_CLASSIFICATION	1.4263089740148974E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.99996225698214	WITHOUT_CLASSIFICATION	3.774301785999321E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999958596334105	WITHOUT_CLASSIFICATION	4.140366589421737E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9946086012428156	WITHOUT_CLASSIFICATION	0.005391398757184416	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9994183430571754	WITHOUT_CLASSIFICATION	5.81656942824657E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999954594749185	WITHOUT_CLASSIFICATION	4.5405250814240186E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999720116767702	WITHOUT_CLASSIFICATION	2.7988323229774218E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999188187305863	WITHOUT_CLASSIFICATION	8.118126941365265E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999534297516158	WITHOUT_CLASSIFICATION	4.657024838414229E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999943987884521	WITHOUT_CLASSIFICATION	5.601211547909021E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9966700924299232	WITHOUT_CLASSIFICATION	0.003329907570076845	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9954910858106847	WITHOUT_CLASSIFICATION	0.0045089141893152876	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9931128092289613	WITHOUT_CLASSIFICATION	0.006887190771038723	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999263196206367	WITHOUT_CLASSIFICATION	7.368037936329928E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999862678173239	WITHOUT_CLASSIFICATION	1.3732182676091522E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9981879064409845	WITHOUT_CLASSIFICATION	0.0018120935590155685	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9996803469439367	WITHOUT_CLASSIFICATION	3.196530560633056E-4	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9992479734231512	WITHOUT_CLASSIFICATION	7.520265768488758E-4	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998602538618175	WITHOUT_CLASSIFICATION	1.397461381824498E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999423076946826	WITHOUT_CLASSIFICATION	5.769230531739037E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999704796850106	WITHOUT_CLASSIFICATION	2.9520314989390947E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999976731208592	WITHOUT_CLASSIFICATION	2.326879140854334E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999941652935743	WITHOUT_CLASSIFICATION	5.834706425607299E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999997274136592	WITHOUT_CLASSIFICATION	2.7258634083075524E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997258686853358	WITHOUT_CLASSIFICATION	2.7413131466421265E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999805650447072	WITHOUT_CLASSIFICATION	1.9434955292732845E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999799988052744	WITHOUT_CLASSIFICATION	2.000119472549132E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998648383339351	WITHOUT_CLASSIFICATION	1.3516166606486642E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9977077914536744	WITHOUT_CLASSIFICATION	0.0022922085463256284	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998156166479367	WITHOUT_CLASSIFICATION	1.8438335206337456E-4	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999862707502348	WITHOUT_CLASSIFICATION	1.3729249765293144E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999339208970883	WITHOUT_CLASSIFICATION	6.607910291174594E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9980787552701419	WITHOUT_CLASSIFICATION	0.0019212447298581202	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999437944522461	WITHOUT_CLASSIFICATION	5.620554775398783E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9856484893321054	WITHOUT_CLASSIFICATION	0.01435151066789475	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999987867233662	WITHOUT_CLASSIFICATION	1.2132766337297093E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999944414098583	WITHOUT_CLASSIFICATION	5.558590141742542E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9993506577022401	WITHOUT_CLASSIFICATION	6.493422977598529E-4	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999932302696869	WITHOUT_CLASSIFICATION	6.769730313145452E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9981274946209074	WITHOUT_CLASSIFICATION	0.0018725053790925451	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999872533833425	WITHOUT_CLASSIFICATION	1.274661665756159E-5	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999998350550026	WITHOUT_CLASSIFICATION	1.6494499740215795E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999137080675425	WITHOUT_CLASSIFICATION	8.629193245738915E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999973258087576	WITHOUT_CLASSIFICATION	2.6741912424019833E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9221334565431222	IMPLEMENTATION	0.07786654345687789	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999964730567596	WITHOUT_CLASSIFICATION	3.5269432404011186E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9984046321117588	WITHOUT_CLASSIFICATION	0.0015953678882412211	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9986047534977823	WITHOUT_CLASSIFICATION	0.0013952465022177148	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9938461825097095	WITHOUT_CLASSIFICATION	0.0061538174902905805	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9998864133703297	WITHOUT_CLASSIFICATION	1.1358662967042529E-4	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9926515199403356	WITHOUT_CLASSIFICATION	0.007348480059664367	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992755418238348	WITHOUT_CLASSIFICATION	7.244581761652193E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9987530987024211	WITHOUT_CLASSIFICATION	0.001246901297578794	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9970023234085289	WITHOUT_CLASSIFICATION	0.00299767659147099	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999605387448854	WITHOUT_CLASSIFICATION	3.946125511453357E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992755418238348	WITHOUT_CLASSIFICATION	7.244581761652193E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.8953942221989767	WITHOUT_CLASSIFICATION	0.10460577780102323	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9981705982916095	WITHOUT_CLASSIFICATION	0.001829401708390585	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999869365143358	WITHOUT_CLASSIFICATION	1.306348566424626E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9983480495154106	WITHOUT_CLASSIFICATION	0.0016519504845894113	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9991152627811013	WITHOUT_CLASSIFICATION	8.847372188987302E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9987081438359245	WITHOUT_CLASSIFICATION	0.0012918561640754087	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999955960836301	WITHOUT_CLASSIFICATION	4.403916369851953E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996915776156715	WITHOUT_CLASSIFICATION	3.0842238432843695E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999820261512422	WITHOUT_CLASSIFICATION	1.7973848757729127E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9989736137333143	WITHOUT_CLASSIFICATION	0.001026386266685756	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994074641054972	WITHOUT_CLASSIFICATION	5.925358945028327E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9574330790559344	WITHOUT_CLASSIFICATION	0.0425669209440656	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9995498590260844	WITHOUT_CLASSIFICATION	4.5014097391557424E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9978640439072395	WITHOUT_CLASSIFICATION	0.0021359560927605957	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9786401536652003	WITHOUT_CLASSIFICATION	0.021359846334799718	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9987739255784519	WITHOUT_CLASSIFICATION	0.0012260744215480623	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999858900797867	WITHOUT_CLASSIFICATION	1.410992021345229E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999956859115715	WITHOUT_CLASSIFICATION	4.314088428505309E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9996520319332304	WITHOUT_CLASSIFICATION	3.479680667696554E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9773566827586634	WITHOUT_CLASSIFICATION	0.022643317241336666	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9941855111088532	WITHOUT_CLASSIFICATION	0.005814488891146847	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999277660950083	WITHOUT_CLASSIFICATION	7.223390499172167E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9893098889167942	WITHOUT_CLASSIFICATION	0.010690111083205708	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999874352096	WITHOUT_CLASSIFICATION	1.25647903691749E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999267059381312	WITHOUT_CLASSIFICATION	7.329406186880003E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999427255137392	WITHOUT_CLASSIFICATION	5.7274486260835214E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9980305387486782	WITHOUT_CLASSIFICATION	0.0019694612513219043	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996430641221928	WITHOUT_CLASSIFICATION	3.569358778071544E-4	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.7792267276632174	WITHOUT_CLASSIFICATION	0.22077327233678254	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.7643137882967792	WITHOUT_CLASSIFICATION	0.23568621170322068	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9998118179550667	WITHOUT_CLASSIFICATION	1.8818204493343708E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998328239668878	WITHOUT_CLASSIFICATION	1.6717603311223393E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9997109449786069	WITHOUT_CLASSIFICATION	2.890550213931065E-4	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999806551616276	WITHOUT_CLASSIFICATION	1.9344838372450137E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997049562996347	WITHOUT_CLASSIFICATION	2.950437003652178E-4	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999997576486604	WITHOUT_CLASSIFICATION	2.4235133959490345E-6	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999973890733662	WITHOUT_CLASSIFICATION	2.6109266337247233E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9992376722327896	WITHOUT_CLASSIFICATION	7.623277672104151E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999498714469915	WITHOUT_CLASSIFICATION	5.0128553008455027E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9919290808491696	WITHOUT_CLASSIFICATION	0.008070919150830342	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998739462765206	WITHOUT_CLASSIFICATION	1.2605372347937802E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998739462765206	WITHOUT_CLASSIFICATION	1.2605372347937802E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999488398644986	WITHOUT_CLASSIFICATION	5.11601355015558E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999910527238601	WITHOUT_CLASSIFICATION	8.947276139950644E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999492939899575	WITHOUT_CLASSIFICATION	5.0706010042643954E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.8227269535776667	WITHOUT_CLASSIFICATION	0.17727304642233324	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999644894594512	WITHOUT_CLASSIFICATION	3.55105405488383E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999644894594512	WITHOUT_CLASSIFICATION	3.55105405488383E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9994060696597376	WITHOUT_CLASSIFICATION	5.939303402624972E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9971990743475728	WITHOUT_CLASSIFICATION	0.0028009256524271077	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999970764908297	WITHOUT_CLASSIFICATION	2.9235091703083797E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9918985168532821	WITHOUT_CLASSIFICATION	0.008101483146717966	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.6031130372687091	WITHOUT_CLASSIFICATION	0.39688696273129087	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999475949171951	WITHOUT_CLASSIFICATION	5.2405082804863095E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998636423869282	WITHOUT_CLASSIFICATION	1.3635761307183487E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997581438812264	WITHOUT_CLASSIFICATION	2.4185611877351734E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9992125843519861	WITHOUT_CLASSIFICATION	7.874156480138647E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995837870633096	WITHOUT_CLASSIFICATION	4.162129366903635E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995837870633096	WITHOUT_CLASSIFICATION	4.162129366903635E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9987353200955884	WITHOUT_CLASSIFICATION	0.0012646799044115655	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990652123136763	WITHOUT_CLASSIFICATION	9.347876863236658E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9992142792572202	WITHOUT_CLASSIFICATION	7.857207427799175E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999255817006073	WITHOUT_CLASSIFICATION	7.44182993926975E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999791341921477	WITHOUT_CLASSIFICATION	2.0865807852297146E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734847000287	WITHOUT_CLASSIFICATION	2.651529997131971E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997467728107063	WITHOUT_CLASSIFICATION	2.5322718929362756E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999941407987757	WITHOUT_CLASSIFICATION	5.85920122428814E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996224574873167	WITHOUT_CLASSIFICATION	3.7754251268323286E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9996435081296982	WITHOUT_CLASSIFICATION	3.564918703018771E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9996862323865573	WITHOUT_CLASSIFICATION	3.1376761344276556E-4	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9989736137333143	WITHOUT_CLASSIFICATION	0.001026386266685756	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999631982975817	WITHOUT_CLASSIFICATION	3.680170241829913E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999037028667887	WITHOUT_CLASSIFICATION	9.629713321128828E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999937594495233	WITHOUT_CLASSIFICATION	6.240550476737716E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.999685295098809	WITHOUT_CLASSIFICATION	3.1470490119103387E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9988716060536451	WITHOUT_CLASSIFICATION	0.0011283939463548594	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9990655965962804	WITHOUT_CLASSIFICATION	9.344034037195148E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9990695585336773	WITHOUT_CLASSIFICATION	9.304414663227085E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9994799327415992	WITHOUT_CLASSIFICATION	5.200672584008026E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9976767908543885	WITHOUT_CLASSIFICATION	0.002323209145611397	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9921136004044319	WITHOUT_CLASSIFICATION	0.00788639959556804	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9921136004044319	WITHOUT_CLASSIFICATION	0.00788639959556804	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985456818863059	WITHOUT_CLASSIFICATION	0.0014543181136940158	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999441892481885	WITHOUT_CLASSIFICATION	5.581075181155979E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9965569656219369	WITHOUT_CLASSIFICATION	0.0034430343780632467	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9966782991939351	WITHOUT_CLASSIFICATION	0.0033217008060647457	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9974159174346601	WITHOUT_CLASSIFICATION	0.0025840825653398554	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999281568481906	WITHOUT_CLASSIFICATION	7.184315180946364E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999616343528263	WITHOUT_CLASSIFICATION	3.836564717371938E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999991274113722	WITHOUT_CLASSIFICATION	8.725886278975106E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992484232810985	WITHOUT_CLASSIFICATION	7.515767189014291E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995009577453199	WITHOUT_CLASSIFICATION	4.990422546801439E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997540496033316	WITHOUT_CLASSIFICATION	2.4595039666841495E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9879234670829891	WITHOUT_CLASSIFICATION	0.012076532917010907	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999826438584363	WITHOUT_CLASSIFICATION	1.7356141563729985E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998714907273518	WITHOUT_CLASSIFICATION	1.2850927264814474E-4	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999715003615878	WITHOUT_CLASSIFICATION	2.8499638412318994E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9995504447216123	WITHOUT_CLASSIFICATION	4.4955527838766836E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999985775268858	WITHOUT_CLASSIFICATION	1.4224731142272113E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996219538173376	WITHOUT_CLASSIFICATION	3.7804618266234493E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9943292710654963	WITHOUT_CLASSIFICATION	0.00567072893450368	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998498000319312	WITHOUT_CLASSIFICATION	1.5019996806876234E-4	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999787014849393	WITHOUT_CLASSIFICATION	2.129851506069003E-4	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999688980735	WITHOUT_CLASSIFICATION	3.110192646159376E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999343153001367	WITHOUT_CLASSIFICATION	6.568469986339988E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999886608556083	WITHOUT_CLASSIFICATION	1.1339144391580999E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9995830714773711	WITHOUT_CLASSIFICATION	4.169285226288707E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9995830714773711	WITHOUT_CLASSIFICATION	4.169285226288707E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992200127817745	WITHOUT_CLASSIFICATION	7.799872182254133E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.991802848556751	WITHOUT_CLASSIFICATION	0.008197151443248929	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9997895522363268	WITHOUT_CLASSIFICATION	2.104477636731448E-4	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9997172298812147	WITHOUT_CLASSIFICATION	2.827701187853215E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999930089186229	WITHOUT_CLASSIFICATION	6.991081377092123E-5	IMPLEMENTATION
