// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9942398366819059	WITHOUT_CLASSIFICATION	0.0057601633180941305	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9942398366819059	WITHOUT_CLASSIFICATION	0.0057601633180941305	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9830954589985677	WITHOUT_CLASSIFICATION	0.016904541001432363	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9897917971779097	WITHOUT_CLASSIFICATION	0.010208202822090343	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9557432486623915	WITHOUT_CLASSIFICATION	0.04425675133760849	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9378923785920732	IMPLEMENTATION	0.062107621407926784	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9993575321969909	WITHOUT_CLASSIFICATION	6.424678030090635E-4	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6900716700268414	IMPLEMENTATION	0.30992832997315856	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.987654055659443	WITHOUT_CLASSIFICATION	0.012345944340557016	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9524829038385709	WITHOUT_CLASSIFICATION	0.0475170961614291	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.999837664698105	WITHOUT_CLASSIFICATION	1.6233530189511624E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8739554511976282	WITHOUT_CLASSIFICATION	0.12604454880237184	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9437447719593723	WITHOUT_CLASSIFICATION	0.056255228040627624	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9437447719593723	WITHOUT_CLASSIFICATION	0.056255228040627624	IMPLEMENTATION
/**	IMPLEMENTATION	0.5073016759173333	WITHOUT_CLASSIFICATION	0.4926983240826668	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6181990998295963	IMPLEMENTATION	0.3818009001704037	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999986804981067	IMPLEMENTATION	1.3195018932430373E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.7555270197389765	WITHOUT_CLASSIFICATION	0.24447298026102357	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999553182116802	WITHOUT_CLASSIFICATION	4.468178831985809E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9618265794382519	WITHOUT_CLASSIFICATION	0.038173420561748043	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8927565222073905	WITHOUT_CLASSIFICATION	0.10724347779260936	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9975402287032507	WITHOUT_CLASSIFICATION	0.0024597712967492475	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9358786216901179	WITHOUT_CLASSIFICATION	0.06412137830988207	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8805261853392155	WITHOUT_CLASSIFICATION	0.1194738146607846	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8805261853392155	WITHOUT_CLASSIFICATION	0.1194738146607846	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.688887168025871	WITHOUT_CLASSIFICATION	0.31111283197412887	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9686245502423722	WITHOUT_CLASSIFICATION	0.03137544975762794	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.8860150981062166	IMPLEMENTATION	0.11398490189378345	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9840506024235188	WITHOUT_CLASSIFICATION	0.015949397576481245	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.962060660908079	IMPLEMENTATION	0.037939339091920994	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9801309218523712	WITHOUT_CLASSIFICATION	0.019869078147628838	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9791898908499409	WITHOUT_CLASSIFICATION	0.020810109150059087	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9994920993949543	WITHOUT_CLASSIFICATION	5.079006050457209E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8951087775118713	WITHOUT_CLASSIFICATION	0.10489122248812868	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9007675509569999	IMPLEMENTATION	0.09923244904300013	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9762267114544905	WITHOUT_CLASSIFICATION	0.023773288545509544	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9296847275369301	IMPLEMENTATION	0.0703152724630698	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.975301038207857	WITHOUT_CLASSIFICATION	0.02469896179214308	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9925407599970422	WITHOUT_CLASSIFICATION	0.007459240002957879	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.796062953393635	IMPLEMENTATION	0.2039370466063651	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.796062953393635	IMPLEMENTATION	0.2039370466063651	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5556034325192126	IMPLEMENTATION	0.44439656748078743	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999113972023718	WITHOUT_CLASSIFICATION	8.860279762821028E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9986924045845806	WITHOUT_CLASSIFICATION	0.001307595415419368	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9993551002631619	IMPLEMENTATION	6.448997368382126E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9398341414915921	WITHOUT_CLASSIFICATION	0.06016585850840794	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9731267606895249	WITHOUT_CLASSIFICATION	0.026873239310475118	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9951665140893433	WITHOUT_CLASSIFICATION	0.004833485910656649	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9995471133574051	WITHOUT_CLASSIFICATION	4.5288664259491906E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.996780985167665	WITHOUT_CLASSIFICATION	0.003219014832334955	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9951705472740775	WITHOUT_CLASSIFICATION	0.004829452725922416	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9822132072035852	IMPLEMENTATION	0.017786792796414874	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.976737668619091	WITHOUT_CLASSIFICATION	0.023262331380909093	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.5277849558113188	IMPLEMENTATION	0.4722150441886812	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9318159032195569	WITHOUT_CLASSIFICATION	0.06818409678044317	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9791780568028002	WITHOUT_CLASSIFICATION	0.02082194319719983	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9318159032195569	WITHOUT_CLASSIFICATION	0.06818409678044317	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9992079568368168	IMPLEMENTATION	7.920431631830986E-4	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6099656430881126	IMPLEMENTATION	0.39003435691188726	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9318159032195569	WITHOUT_CLASSIFICATION	0.06818409678044317	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999912881509311	WITHOUT_CLASSIFICATION	8.711849068931872E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999912881509311	WITHOUT_CLASSIFICATION	8.711849068931872E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999917746651417	IMPLEMENTATION	8.225334858379208E-6	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9942218684951702	WITHOUT_CLASSIFICATION	0.005778131504829673	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998126721646616	WITHOUT_CLASSIFICATION	1.8732783533850815E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999975739785874	WITHOUT_CLASSIFICATION	2.4260214126009246E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999677640565752	WITHOUT_CLASSIFICATION	3.223594342486517E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999805383597378	WITHOUT_CLASSIFICATION	1.9461640262307587E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999805383597378	WITHOUT_CLASSIFICATION	1.9461640262307587E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999998622053867	WITHOUT_CLASSIFICATION	1.3779461329845395E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999326614177739	WITHOUT_CLASSIFICATION	6.733858222604544E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999636631864668	WITHOUT_CLASSIFICATION	3.633681353320142E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999943417039436	WITHOUT_CLASSIFICATION	5.65829605639528E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993200960455	WITHOUT_CLASSIFICATION	6.799039543869169E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993200960455	WITHOUT_CLASSIFICATION	6.799039543869169E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999881932152982	WITHOUT_CLASSIFICATION	1.1806784701836633E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9993829689769587	WITHOUT_CLASSIFICATION	6.170310230413068E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999584273285237	WITHOUT_CLASSIFICATION	4.1572671476375134E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999838707462857	WITHOUT_CLASSIFICATION	1.6129253714306506E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993156200886	WITHOUT_CLASSIFICATION	6.843799113125831E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999894132883687	WITHOUT_CLASSIFICATION	1.0586711631410714E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999829092951201	WITHOUT_CLASSIFICATION	1.7090704879895095E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9987236142014485	WITHOUT_CLASSIFICATION	0.0012763857985515293	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997439641903382	WITHOUT_CLASSIFICATION	2.5603580966183746E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999968993425032	WITHOUT_CLASSIFICATION	3.1006574966455617E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997423800095501	WITHOUT_CLASSIFICATION	2.576199904499406E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997423800095501	WITHOUT_CLASSIFICATION	2.576199904499406E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999783163435803	WITHOUT_CLASSIFICATION	2.1683656419662047E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999901287825937	WITHOUT_CLASSIFICATION	9.871217406277276E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999914097263809	WITHOUT_CLASSIFICATION	8.590273619098216E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999485138788083	WITHOUT_CLASSIFICATION	5.1486121191626526E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9560906452464656	WITHOUT_CLASSIFICATION	0.04390935475353443	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5073016759173333	WITHOUT_CLASSIFICATION	0.4926983240826668	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5073016759173333	WITHOUT_CLASSIFICATION	0.4926983240826668	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999934642623106	WITHOUT_CLASSIFICATION	6.535737689412369E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996164208102005	WITHOUT_CLASSIFICATION	3.8357918979958457E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999852581735487	WITHOUT_CLASSIFICATION	1.4741826451357882E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999225832431395	WITHOUT_CLASSIFICATION	7.741675686051371E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999695084066159	WITHOUT_CLASSIFICATION	3.0491593384029955E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999406394995015	WITHOUT_CLASSIFICATION	5.9360500498513416E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997986309959458	WITHOUT_CLASSIFICATION	2.0136900405412077E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999872904319675	WITHOUT_CLASSIFICATION	1.2709568032545964E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9989359965320893	WITHOUT_CLASSIFICATION	0.0010640034679106868	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9989359965320893	WITHOUT_CLASSIFICATION	0.0010640034679106868	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997216253164489	WITHOUT_CLASSIFICATION	2.7837468355109795E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.767688995466781	WITHOUT_CLASSIFICATION	0.23231100453321893	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999355614637145	WITHOUT_CLASSIFICATION	6.443853628550641E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999847247171283	WITHOUT_CLASSIFICATION	1.5275282871641785E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999957270949253	WITHOUT_CLASSIFICATION	4.27290507468856E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999931602419887	WITHOUT_CLASSIFICATION	6.839758011351336E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9994532566325321	WITHOUT_CLASSIFICATION	5.467433674679133E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998566199002012	WITHOUT_CLASSIFICATION	1.4338009979882133E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9995751467892138	WITHOUT_CLASSIFICATION	4.248532107862178E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997381875629946	WITHOUT_CLASSIFICATION	2.618124370054338E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9995581470296303	WITHOUT_CLASSIFICATION	4.418529703697075E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997466587658644	WITHOUT_CLASSIFICATION	2.53341234135578E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999965664337234	WITHOUT_CLASSIFICATION	3.4335662765650477E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999092474962256	WITHOUT_CLASSIFICATION	9.075250377446403E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999807496946329	WITHOUT_CLASSIFICATION	1.9250305367012303E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999987762291198	WITHOUT_CLASSIFICATION	1.2237708802148356E-6	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999665690083241	WITHOUT_CLASSIFICATION	3.343099167593902E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999908216023266	WITHOUT_CLASSIFICATION	9.17839767353637E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999903566005404	WITHOUT_CLASSIFICATION	9.6433994596941E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999932600049607	WITHOUT_CLASSIFICATION	6.739995039200196E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999626193284906	WITHOUT_CLASSIFICATION	3.738067150942166E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999308363338	WITHOUT_CLASSIFICATION	6.916366620696906E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999047030213145	WITHOUT_CLASSIFICATION	9.52969786854282E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999178846358576	WITHOUT_CLASSIFICATION	8.211536414246023E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.836842888891281	IMPLEMENTATION	0.16315711110871894	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999875165012667	WITHOUT_CLASSIFICATION	1.2483498733294863E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999734135857345	WITHOUT_CLASSIFICATION	2.6586414265498064E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9807283491058989	WITHOUT_CLASSIFICATION	0.019271650894101156	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999974744569597	WITHOUT_CLASSIFICATION	2.525543040188699E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999989466588923	WITHOUT_CLASSIFICATION	1.0533411076326246E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9998696465322265	WITHOUT_CLASSIFICATION	1.3035346777347264E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999808366339774	WITHOUT_CLASSIFICATION	1.9163366022572405E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999993737891194	WITHOUT_CLASSIFICATION	6.26210880606036E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999959364608652	WITHOUT_CLASSIFICATION	4.0635391348382086E-6	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999895355275304	WITHOUT_CLASSIFICATION	1.0464472469668849E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995107762457	WITHOUT_CLASSIFICATION	4.892237542985976E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999959364608652	WITHOUT_CLASSIFICATION	4.0635391348382086E-6	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999501409942372	WITHOUT_CLASSIFICATION	4.985900576278927E-4	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9991873985398887	WITHOUT_CLASSIFICATION	8.126014601113561E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997456993012237	WITHOUT_CLASSIFICATION	2.543006987762965E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999614740551754	WITHOUT_CLASSIFICATION	3.8525944824480705E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999756835206804	WITHOUT_CLASSIFICATION	2.4316479319596203E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999756835206804	WITHOUT_CLASSIFICATION	2.4316479319596203E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9989374344121938	WITHOUT_CLASSIFICATION	0.0010625655878061082	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993823901534	WITHOUT_CLASSIFICATION	6.176098465397091E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999976718670942	WITHOUT_CLASSIFICATION	2.328132905857536E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998669523028364	WITHOUT_CLASSIFICATION	1.3304769716352828E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999955275979675	WITHOUT_CLASSIFICATION	4.472402032472673E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999273162204402	WITHOUT_CLASSIFICATION	7.268377955977652E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9983541874435323	WITHOUT_CLASSIFICATION	0.0016458125564676805	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999742225680494	WITHOUT_CLASSIFICATION	2.577743195072425E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999913733864624	WITHOUT_CLASSIFICATION	8.626613537602635E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691056153709	WITHOUT_CLASSIFICATION	3.08943846292144E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691056153709	WITHOUT_CLASSIFICATION	3.08943846292144E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999438166524853	WITHOUT_CLASSIFICATION	5.6183347514729274E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999314545822265	WITHOUT_CLASSIFICATION	6.854541777341713E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999675784461621	WITHOUT_CLASSIFICATION	3.2421553837941044E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691056153709	WITHOUT_CLASSIFICATION	3.08943846292144E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999438166524853	WITHOUT_CLASSIFICATION	5.6183347514729274E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999438166524853	WITHOUT_CLASSIFICATION	5.6183347514729274E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999930604642024	WITHOUT_CLASSIFICATION	6.9395357975006595E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999164908432324	WITHOUT_CLASSIFICATION	8.350915676761983E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998845446626	WITHOUT_CLASSIFICATION	1.1545533741078701E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999997862875063	WITHOUT_CLASSIFICATION	2.137124936930013E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995071510245224	WITHOUT_CLASSIFICATION	4.928489754776067E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995071510245224	WITHOUT_CLASSIFICATION	4.928489754776067E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999984199559978	WITHOUT_CLASSIFICATION	1.5800440022034544E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994998108089334	WITHOUT_CLASSIFICATION	5.001891910666027E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999837450585611	WITHOUT_CLASSIFICATION	1.6254941438860338E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999020464869	WITHOUT_CLASSIFICATION	9.795351310590549E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999020464869	WITHOUT_CLASSIFICATION	9.795351310590549E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997890543047024	WITHOUT_CLASSIFICATION	2.1094569529759E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998100309620759	WITHOUT_CLASSIFICATION	1.8996903792406296E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999824114201281	WITHOUT_CLASSIFICATION	1.7588579871874434E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999921167244	WITHOUT_CLASSIFICATION	7.88327569943761E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999869111323175	WITHOUT_CLASSIFICATION	1.308886768250562E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999606059530326	WITHOUT_CLASSIFICATION	3.939404696750211E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996073084005165	WITHOUT_CLASSIFICATION	3.926915994835489E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.999842523060174	WITHOUT_CLASSIFICATION	1.5747693982608814E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999824114201281	WITHOUT_CLASSIFICATION	1.7588579871874434E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9994100391166835	WITHOUT_CLASSIFICATION	5.899608833165454E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999353960162792	WITHOUT_CLASSIFICATION	6.460398372070779E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999353960162792	WITHOUT_CLASSIFICATION	6.460398372070779E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999791248165	WITHOUT_CLASSIFICATION	2.0875183526081148E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999896190471443	WITHOUT_CLASSIFICATION	1.0380952855550429E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9960796871266588	WITHOUT_CLASSIFICATION	0.003920312873341021	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998294579472105	WITHOUT_CLASSIFICATION	1.7054205278948083E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999816253139412	WITHOUT_CLASSIFICATION	1.837468605879078E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9994793999136073	WITHOUT_CLASSIFICATION	5.206000863926664E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998850182144764	WITHOUT_CLASSIFICATION	1.1498178552368522E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999384512917366	WITHOUT_CLASSIFICATION	6.154870826327408E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999992751384793	WITHOUT_CLASSIFICATION	7.248615207445789E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999992751384793	WITHOUT_CLASSIFICATION	7.248615207445789E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998126721646616	WITHOUT_CLASSIFICATION	1.8732783533850815E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999416388681965	WITHOUT_CLASSIFICATION	5.8361131803504775E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999369032601604	WITHOUT_CLASSIFICATION	6.309673983960136E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999617477800763	WITHOUT_CLASSIFICATION	3.8252219923699124E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999214114331875	WITHOUT_CLASSIFICATION	7.858856681246297E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998264420602927	WITHOUT_CLASSIFICATION	1.73557939707429E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999746603068618	WITHOUT_CLASSIFICATION	2.5339693138170547E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999897913686446	WITHOUT_CLASSIFICATION	1.0208631355336878E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999898140614664	WITHOUT_CLASSIFICATION	1.0185938533662726E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999412539673025	WITHOUT_CLASSIFICATION	5.874603269755643E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9998264420602927	WITHOUT_CLASSIFICATION	1.73557939707429E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999869246352097	WITHOUT_CLASSIFICATION	1.3075364790402474E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998746444440016	WITHOUT_CLASSIFICATION	1.2535555599843927E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999338697785294	WITHOUT_CLASSIFICATION	6.613022147062956E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999563334586032	WITHOUT_CLASSIFICATION	4.366654139678931E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999992267069877	WITHOUT_CLASSIFICATION	7.732930123012408E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999805383597378	WITHOUT_CLASSIFICATION	1.9461640262307587E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998477762763577	WITHOUT_CLASSIFICATION	1.5222372364227313E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997453200033494	WITHOUT_CLASSIFICATION	2.54679996650588E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999974118826289	WITHOUT_CLASSIFICATION	2.58811737110064E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999701611347283	WITHOUT_CLASSIFICATION	2.983886527165098E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997446608607177	WITHOUT_CLASSIFICATION	2.5533913928231646E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999744371775602	WITHOUT_CLASSIFICATION	2.5562822439886963E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999871922007356	WITHOUT_CLASSIFICATION	1.2807799264394301E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999467162345776	WITHOUT_CLASSIFICATION	5.3283765422329595E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9984233638594191	WITHOUT_CLASSIFICATION	0.0015766361405808599	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.99999724440026	WITHOUT_CLASSIFICATION	2.7555997398134794E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999898140614664	WITHOUT_CLASSIFICATION	1.0185938533662726E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997446608607177	WITHOUT_CLASSIFICATION	2.5533913928231646E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999998622053867	WITHOUT_CLASSIFICATION	1.3779461329845395E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999666819139337	WITHOUT_CLASSIFICATION	3.3318086066445165E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999928219193427	WITHOUT_CLASSIFICATION	7.178080657298529E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999732500040158	WITHOUT_CLASSIFICATION	2.6749995984240798E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997862851318475	WITHOUT_CLASSIFICATION	2.1371486815250173E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999643468977845	WITHOUT_CLASSIFICATION	3.565310221543809E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999014098718053	WITHOUT_CLASSIFICATION	9.859012819473865E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998218992401581	WITHOUT_CLASSIFICATION	1.7810075984188426E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998218992401581	WITHOUT_CLASSIFICATION	1.7810075984188426E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999938966386894	WITHOUT_CLASSIFICATION	6.103361310546012E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999558796032417	WITHOUT_CLASSIFICATION	4.4120396758236404E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999801299356442	WITHOUT_CLASSIFICATION	1.9870064355799255E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999015466992285	WITHOUT_CLASSIFICATION	9.845330077149407E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999698730994533	WITHOUT_CLASSIFICATION	3.0126900546746863E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999517660119313	WITHOUT_CLASSIFICATION	4.823398806883345E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999866183086632	WITHOUT_CLASSIFICATION	1.338169133673734E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999326614177739	WITHOUT_CLASSIFICATION	6.733858222604544E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999658886993124	WITHOUT_CLASSIFICATION	3.411130068768998E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999658886993124	WITHOUT_CLASSIFICATION	3.411130068768998E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999658886993124	WITHOUT_CLASSIFICATION	3.411130068768998E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999413995160951	WITHOUT_CLASSIFICATION	5.8600483905012335E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999658886993124	WITHOUT_CLASSIFICATION	3.411130068768998E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999582419824663	WITHOUT_CLASSIFICATION	4.17580175337872E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999951262047473	WITHOUT_CLASSIFICATION	4.873795252698179E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999876045436314	WITHOUT_CLASSIFICATION	1.2395456368538445E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999898140614664	WITHOUT_CLASSIFICATION	1.0185938533662726E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997446608607177	WITHOUT_CLASSIFICATION	2.5533913928231646E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997446608607177	WITHOUT_CLASSIFICATION	2.5533913928231646E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999449921830049	WITHOUT_CLASSIFICATION	5.500781699511069E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9997165337283154	WITHOUT_CLASSIFICATION	2.834662716846824E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9994841857418884	WITHOUT_CLASSIFICATION	5.158142581116688E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999654147107838	WITHOUT_CLASSIFICATION	3.458528921613783E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999943417039436	WITHOUT_CLASSIFICATION	5.65829605639528E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999943417039436	WITHOUT_CLASSIFICATION	5.65829605639528E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9938957743106761	WITHOUT_CLASSIFICATION	0.006104225689323911	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999920476921302	WITHOUT_CLASSIFICATION	7.952307869694153E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999942236224055	WITHOUT_CLASSIFICATION	5.776377594459989E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999911110438349	WITHOUT_CLASSIFICATION	8.88895616507175E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999956584874486	WITHOUT_CLASSIFICATION	4.341512551408385E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999896187633533	WITHOUT_CLASSIFICATION	1.0381236646619597E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993200960455	WITHOUT_CLASSIFICATION	6.799039543869169E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999894222413048	WITHOUT_CLASSIFICATION	1.0577758695046189E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999894222413048	WITHOUT_CLASSIFICATION	1.0577758695046189E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999881932152982	WITHOUT_CLASSIFICATION	1.1806784701836633E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999881932152982	WITHOUT_CLASSIFICATION	1.1806784701836633E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989790717129687	WITHOUT_CLASSIFICATION	0.0010209282870313082	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989790717129687	WITHOUT_CLASSIFICATION	0.0010209282870313082	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999280685220195	WITHOUT_CLASSIFICATION	7.193147798049192E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999280685220195	WITHOUT_CLASSIFICATION	7.193147798049192E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999943417039436	WITHOUT_CLASSIFICATION	5.65829605639528E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993200960455	WITHOUT_CLASSIFICATION	6.799039543869169E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999894222413048	WITHOUT_CLASSIFICATION	1.0577758695046189E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999894222413048	WITHOUT_CLASSIFICATION	1.0577758695046189E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999881932152982	WITHOUT_CLASSIFICATION	1.1806784701836633E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989790717129687	WITHOUT_CLASSIFICATION	0.0010209282870313082	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989790717129687	WITHOUT_CLASSIFICATION	0.0010209282870313082	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999280685220195	WITHOUT_CLASSIFICATION	7.193147798049192E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997309385589841	WITHOUT_CLASSIFICATION	2.690614410158769E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9992708937086985	WITHOUT_CLASSIFICATION	7.291062913014928E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9993132316505569	WITHOUT_CLASSIFICATION	6.867683494430386E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996396037261649	WITHOUT_CLASSIFICATION	3.603962738351918E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998696318951799	WITHOUT_CLASSIFICATION	1.303681048202073E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999893118387111	WITHOUT_CLASSIFICATION	1.0688161288841483E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999941830143901	WITHOUT_CLASSIFICATION	5.816985609855227E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999626712750354	WITHOUT_CLASSIFICATION	3.732872496459379E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999807420364535	WITHOUT_CLASSIFICATION	1.9257963546536784E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997306278533798	WITHOUT_CLASSIFICATION	2.693721466200854E-4	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999246214552262	WITHOUT_CLASSIFICATION	7.537854477379812E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999985750654526	WITHOUT_CLASSIFICATION	1.4249345474080184E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9989374344121938	WITHOUT_CLASSIFICATION	0.0010625655878061082	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999893118387111	WITHOUT_CLASSIFICATION	1.0688161288841483E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.999955124291911	WITHOUT_CLASSIFICATION	4.4875708088943836E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.999955124291911	WITHOUT_CLASSIFICATION	4.4875708088943836E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999975120708969	WITHOUT_CLASSIFICATION	2.487929103048461E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997189252271093	WITHOUT_CLASSIFICATION	2.8107477289073196E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997189252271093	WITHOUT_CLASSIFICATION	2.8107477289073196E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9993425381582308	WITHOUT_CLASSIFICATION	6.57461841769149E-4	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999998522798693	WITHOUT_CLASSIFICATION	1.477201307306896E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999206165581447	WITHOUT_CLASSIFICATION	7.938344185538873E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998595643884332	WITHOUT_CLASSIFICATION	1.404356115669263E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998595643884332	WITHOUT_CLASSIFICATION	1.404356115669263E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993156200886	WITHOUT_CLASSIFICATION	6.843799113125831E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999851501355854	WITHOUT_CLASSIFICATION	1.484986441445905E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999851501355854	WITHOUT_CLASSIFICATION	1.484986441445905E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9995349583359684	WITHOUT_CLASSIFICATION	4.650416640316012E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999957600241054	WITHOUT_CLASSIFICATION	4.2399758946585225E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999968993425032	WITHOUT_CLASSIFICATION	3.1006574966455617E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999899903548863	WITHOUT_CLASSIFICATION	1.0009645113702787E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999894132883687	WITHOUT_CLASSIFICATION	1.0586711631410714E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.759509225320462	WITHOUT_CLASSIFICATION	0.24049077467953803	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999829046960254	WITHOUT_CLASSIFICATION	1.709530397474929E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999862557593485	WITHOUT_CLASSIFICATION	1.3744240651571647E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999615646047859	WITHOUT_CLASSIFICATION	3.843539521407975E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999775671514106	WITHOUT_CLASSIFICATION	2.2432848589352587E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999339021057	WITHOUT_CLASSIFICATION	6.60978943443973E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999485138788083	WITHOUT_CLASSIFICATION	5.1486121191626526E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999621683301446	WITHOUT_CLASSIFICATION	3.7831669855511206E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997478227271296	WITHOUT_CLASSIFICATION	2.521772728704054E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.999989381587076	WITHOUT_CLASSIFICATION	1.0618412924046858E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997415520554992	WITHOUT_CLASSIFICATION	2.5844794450081E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999476815503584	WITHOUT_CLASSIFICATION	5.231844964168288E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999452334411378	WITHOUT_CLASSIFICATION	5.476655886226092E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998218829575012	WITHOUT_CLASSIFICATION	1.7811704249890662E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999968993425032	WITHOUT_CLASSIFICATION	3.1006574966455617E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998533021594522	WITHOUT_CLASSIFICATION	1.466978405477773E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999145912682857	WITHOUT_CLASSIFICATION	8.540873171417251E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999902401781631	WITHOUT_CLASSIFICATION	9.75982183698899E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999894132883687	WITHOUT_CLASSIFICATION	1.0586711631410714E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998218829575012	WITHOUT_CLASSIFICATION	1.7811704249890662E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998533021594522	WITHOUT_CLASSIFICATION	1.466978405477773E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999902401781631	WITHOUT_CLASSIFICATION	9.75982183698899E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999330329151814	WITHOUT_CLASSIFICATION	6.696708481864787E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999330329151814	WITHOUT_CLASSIFICATION	6.696708481864787E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997423800095501	WITHOUT_CLASSIFICATION	2.576199904499406E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9993517080649915	WITHOUT_CLASSIFICATION	6.482919350084474E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9989393405785159	WITHOUT_CLASSIFICATION	0.0010606594214840957	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999992601175183	WITHOUT_CLASSIFICATION	7.398824817304128E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999378957009893	WITHOUT_CLASSIFICATION	6.210429901064644E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9992644850509648	WITHOUT_CLASSIFICATION	7.355149490351723E-4	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999976954243203	WITHOUT_CLASSIFICATION	2.3045756796993814E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998053892894222	WITHOUT_CLASSIFICATION	1.9461071057779648E-4	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9993290520857266	WITHOUT_CLASSIFICATION	6.709479142732267E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999976954243203	WITHOUT_CLASSIFICATION	2.3045756796993814E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999901287825937	WITHOUT_CLASSIFICATION	9.871217406277276E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9990631899646734	WITHOUT_CLASSIFICATION	9.368100353267156E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999893579049282	WITHOUT_CLASSIFICATION	1.064209507179288E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998218829575012	WITHOUT_CLASSIFICATION	1.7811704249890662E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999172731668632	WITHOUT_CLASSIFICATION	8.272683313685017E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999697418338027	WITHOUT_CLASSIFICATION	3.0258166197281656E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9981404425663871	WITHOUT_CLASSIFICATION	0.0018595574336129456	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.999945965860798	WITHOUT_CLASSIFICATION	5.403413920190089E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999655566000648	WITHOUT_CLASSIFICATION	3.444339993520863E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996723829333	WITHOUT_CLASSIFICATION	3.276170666593727E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999864793975266	WITHOUT_CLASSIFICATION	1.3520602473339744E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9983977962170753	WITHOUT_CLASSIFICATION	0.001602203782924673	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997638946764379	WITHOUT_CLASSIFICATION	2.361053235622221E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999586509457033	WITHOUT_CLASSIFICATION	4.134905429670698E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999449921830049	WITHOUT_CLASSIFICATION	5.500781699511069E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998791987999364	WITHOUT_CLASSIFICATION	1.2080120006356525E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999485138788083	WITHOUT_CLASSIFICATION	5.1486121191626526E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999325978627294	WITHOUT_CLASSIFICATION	6.740213727072604E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997734528615888	WITHOUT_CLASSIFICATION	2.2654713841123306E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9993565207500795	WITHOUT_CLASSIFICATION	6.434792499204578E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998312697463999	WITHOUT_CLASSIFICATION	1.687302536001245E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998616290603056	WITHOUT_CLASSIFICATION	1.3837093969446443E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999660946780043	WITHOUT_CLASSIFICATION	3.390532199560977E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998860492469	WITHOUT_CLASSIFICATION	1.1395075295783391E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999639020866993	WITHOUT_CLASSIFICATION	3.609791330074258E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.994564934959001	WITHOUT_CLASSIFICATION	0.00543506504099898	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998361789581375	WITHOUT_CLASSIFICATION	1.6382104186241116E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9912641034993019	WITHOUT_CLASSIFICATION	0.00873589650069804	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9912641034993019	WITHOUT_CLASSIFICATION	0.00873589650069804	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998287020638835	WITHOUT_CLASSIFICATION	1.7129793611641875E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999705915508491	WITHOUT_CLASSIFICATION	2.9408449150879572E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999618947411881	WITHOUT_CLASSIFICATION	3.810525881193046E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999484450368286	WITHOUT_CLASSIFICATION	5.155496317139401E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.99976951054341	WITHOUT_CLASSIFICATION	2.3048945658993598E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9992279103043248	WITHOUT_CLASSIFICATION	7.720896956752592E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999878709109669	WITHOUT_CLASSIFICATION	1.2129089033189328E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9983194566885115	WITHOUT_CLASSIFICATION	0.0016805433114884822	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999580260421763	WITHOUT_CLASSIFICATION	4.197395782370798E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998275569300292	WITHOUT_CLASSIFICATION	1.7244306997085942E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999307895048474	WITHOUT_CLASSIFICATION	6.921049515267668E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9988802315640856	WITHOUT_CLASSIFICATION	0.0011197684359143833	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9969852557996342	WITHOUT_CLASSIFICATION	0.0030147442003659233	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739914550206	WITHOUT_CLASSIFICATION	2.6008544979444492E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995993069542569	WITHOUT_CLASSIFICATION	4.0069304574300816E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999948043404687	WITHOUT_CLASSIFICATION	5.195659531278822E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999148745115	WITHOUT_CLASSIFICATION	8.51254886087316E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999651414499204	WITHOUT_CLASSIFICATION	3.485855007959475E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999388448668278	WITHOUT_CLASSIFICATION	6.11551331721394E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999905356032384	WITHOUT_CLASSIFICATION	9.464396761538842E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999905356032384	WITHOUT_CLASSIFICATION	9.464396761538842E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9989154262203297	WITHOUT_CLASSIFICATION	0.0010845737796702677	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9989154262203297	WITHOUT_CLASSIFICATION	0.0010845737796702677	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.994564934959001	WITHOUT_CLASSIFICATION	0.00543506504099898	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9992691361838693	WITHOUT_CLASSIFICATION	7.308638161307293E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.997589406039896	WITHOUT_CLASSIFICATION	0.0024105939601039533	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99960149194182	WITHOUT_CLASSIFICATION	3.985080581798905E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.997589406039896	WITHOUT_CLASSIFICATION	0.0024105939601039533	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99960149194182	WITHOUT_CLASSIFICATION	3.985080581798905E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997553478993552	WITHOUT_CLASSIFICATION	2.446521006448373E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999957449272499	WITHOUT_CLASSIFICATION	4.255072750122274E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999465109780332	WITHOUT_CLASSIFICATION	5.3489021966725106E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999994522299644	WITHOUT_CLASSIFICATION	5.477700355540377E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9975807496934367	WITHOUT_CLASSIFICATION	0.002419250306563223	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998131304010034	WITHOUT_CLASSIFICATION	1.8686959899668642E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999614828331569	WITHOUT_CLASSIFICATION	3.8517166843106805E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9994590114627552	WITHOUT_CLASSIFICATION	5.409885372448211E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999928137525744	WITHOUT_CLASSIFICATION	7.18624742552996E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999988656433481	WITHOUT_CLASSIFICATION	1.1343566519920012E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998717023442631	WITHOUT_CLASSIFICATION	1.2829765573682065E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999984497477699	WITHOUT_CLASSIFICATION	1.550252230170748E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999940120936127	WITHOUT_CLASSIFICATION	5.987906387286622E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998808467742236	WITHOUT_CLASSIFICATION	1.191532257764832E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998808467742236	WITHOUT_CLASSIFICATION	1.191532257764832E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999978519710984	WITHOUT_CLASSIFICATION	2.148028901596335E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999978519710984	WITHOUT_CLASSIFICATION	2.148028901596335E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999972567165346	WITHOUT_CLASSIFICATION	2.7432834653716612E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997553478993552	WITHOUT_CLASSIFICATION	2.446521006448373E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9962341671065668	WITHOUT_CLASSIFICATION	0.0037658328934331987	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999896484453616	WITHOUT_CLASSIFICATION	1.0351554638283792E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9805882674044448	WITHOUT_CLASSIFICATION	0.019411732595555082	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999683385674916	WITHOUT_CLASSIFICATION	3.166143250840117E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988124263137695	WITHOUT_CLASSIFICATION	0.0011875736862304658	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997553478993552	WITHOUT_CLASSIFICATION	2.446521006448373E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999683385674916	WITHOUT_CLASSIFICATION	3.166143250840117E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988124263137695	WITHOUT_CLASSIFICATION	0.0011875736862304658	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997963659593544	WITHOUT_CLASSIFICATION	2.0363404064561915E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.99975101000293	WITHOUT_CLASSIFICATION	2.489899970699992E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.99988182183829	WITHOUT_CLASSIFICATION	1.181781617099775E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997553478993552	WITHOUT_CLASSIFICATION	2.446521006448373E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997553478993552	WITHOUT_CLASSIFICATION	2.446521006448373E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999613410666991	WITHOUT_CLASSIFICATION	3.865893330088031E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999577058715986	WITHOUT_CLASSIFICATION	4.229412840136493E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999000617902943	WITHOUT_CLASSIFICATION	9.993820970569343E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999966687804016	WITHOUT_CLASSIFICATION	3.3312195983682032E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998759546422347	WITHOUT_CLASSIFICATION	1.2404535776531494E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999986348771888	WITHOUT_CLASSIFICATION	1.3651228112056299E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9985145248942969	WITHOUT_CLASSIFICATION	0.0014854751057030457	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999982016082058	WITHOUT_CLASSIFICATION	1.7983917942060753E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999776773063954	WITHOUT_CLASSIFICATION	2.2322693604649346E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9998008553439083	WITHOUT_CLASSIFICATION	1.9914465609175517E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9993415812453451	WITHOUT_CLASSIFICATION	6.584187546548475E-4	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9961358289136057	WITHOUT_CLASSIFICATION	0.0038641710863941458	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999968774634167	WITHOUT_CLASSIFICATION	3.1225365833088752E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994920885773643	WITHOUT_CLASSIFICATION	5.079114226357118E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999046798678751	WITHOUT_CLASSIFICATION	9.532013212481687E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999985974137832	WITHOUT_CLASSIFICATION	1.4025862167870303E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999225832431395	WITHOUT_CLASSIFICATION	7.741675686051371E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999028578504947	WITHOUT_CLASSIFICATION	9.714214950529473E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996430634046094	WITHOUT_CLASSIFICATION	3.5693659539052115E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.99960149194182	WITHOUT_CLASSIFICATION	3.985080581798905E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9984417038238251	WITHOUT_CLASSIFICATION	0.0015582961761749204	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999225832431395	WITHOUT_CLASSIFICATION	7.741675686051371E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999905150648774	WITHOUT_CLASSIFICATION	9.484935122597144E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999911803692024	WITHOUT_CLASSIFICATION	8.819630797588336E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9882294219806628	WITHOUT_CLASSIFICATION	0.011770578019337287	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999042698700752	WITHOUT_CLASSIFICATION	9.57301299247539E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998954895697487	WITHOUT_CLASSIFICATION	0.0010451043025130017	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999976743501781	WITHOUT_CLASSIFICATION	2.3256498218980583E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999603284113934	WITHOUT_CLASSIFICATION	3.9671588606616505E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999475260436003	WITHOUT_CLASSIFICATION	5.247395639979393E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999320920886562	WITHOUT_CLASSIFICATION	6.790791134383209E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999833507116277	WITHOUT_CLASSIFICATION	1.6649288372302057E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999915962857139	WITHOUT_CLASSIFICATION	8.403714286116837E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999409465259439	WITHOUT_CLASSIFICATION	5.9053474056208925E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999722966583386	WITHOUT_CLASSIFICATION	2.7703341661389368E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819720382122	WITHOUT_CLASSIFICATION	1.802796178785971E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998039267715354	WITHOUT_CLASSIFICATION	1.9607322846456525E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9989108701786197	WITHOUT_CLASSIFICATION	0.0010891298213802766	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9991518698202716	WITHOUT_CLASSIFICATION	8.481301797283099E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999930409365479	WITHOUT_CLASSIFICATION	6.959063452103469E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999958822639707	WITHOUT_CLASSIFICATION	4.117736029234316E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9992715450784553	WITHOUT_CLASSIFICATION	7.284549215447685E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999604315141976	WITHOUT_CLASSIFICATION	3.95684858024576E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990134059527228	WITHOUT_CLASSIFICATION	9.865940472771498E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999335622798231	WITHOUT_CLASSIFICATION	6.643772017690183E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987963266753702	WITHOUT_CLASSIFICATION	0.0012036733246297833	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492888059482	WITHOUT_CLASSIFICATION	5.071119405178731E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985447381681954	WITHOUT_CLASSIFICATION	0.0014552618318045558	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998792488704246	WITHOUT_CLASSIFICATION	1.2075112957535211E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999926452300199	WITHOUT_CLASSIFICATION	7.354769980102943E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990228888702274	WITHOUT_CLASSIFICATION	9.77111129772476E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991081097597416	WITHOUT_CLASSIFICATION	8.918902402583832E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985528779789913	WITHOUT_CLASSIFICATION	0.0014471220210087526	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943644345119653	WITHOUT_CLASSIFICATION	0.005635565488034646	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984827983749253	WITHOUT_CLASSIFICATION	0.0015172016250748143	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998274126474032	WITHOUT_CLASSIFICATION	0.0017258735259679653	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999981664844995	WITHOUT_CLASSIFICATION	1.833515500501994E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999255567987081	WITHOUT_CLASSIFICATION	7.444320129187299E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.5444815567775022	WITHOUT_CLASSIFICATION	0.45551844322249774	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999929259128726	WITHOUT_CLASSIFICATION	7.074087127380016E-6	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999984319184694	WITHOUT_CLASSIFICATION	1.56808153069872E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996311707627833	WITHOUT_CLASSIFICATION	3.688292372166888E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9989195234320307	WITHOUT_CLASSIFICATION	0.0010804765679692404	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998636017267596	WITHOUT_CLASSIFICATION	1.363982732404518E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998072343504558	WITHOUT_CLASSIFICATION	1.927656495441439E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997438965754041	WITHOUT_CLASSIFICATION	2.5610342459588296E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997538943112155	WITHOUT_CLASSIFICATION	2.4610568878451417E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999509221790426	WITHOUT_CLASSIFICATION	4.907782095743252E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999690107721575	WITHOUT_CLASSIFICATION	3.098922784250193E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997426636009226	WITHOUT_CLASSIFICATION	2.573363990774246E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999359535240085	WITHOUT_CLASSIFICATION	6.404647599147337E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.998946695983902	WITHOUT_CLASSIFICATION	0.0010533040160980909	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999366335590104	WITHOUT_CLASSIFICATION	6.33664409896557E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998471019931928	WITHOUT_CLASSIFICATION	1.5289800680713556E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247861819821	WITHOUT_CLASSIFICATION	7.521381801792168E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526404650836	WITHOUT_CLASSIFICATION	4.735953491638574E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999454797062777	WITHOUT_CLASSIFICATION	5.4520293722264616E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261192474292	WITHOUT_CLASSIFICATION	7.388075257064719E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9997437146625057	WITHOUT_CLASSIFICATION	2.56285337494317E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999384509205664	WITHOUT_CLASSIFICATION	6.154907943353892E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999600159231006	WITHOUT_CLASSIFICATION	3.998407689939052E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998563196557023	WITHOUT_CLASSIFICATION	1.4368034429770274E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999832153063738	WITHOUT_CLASSIFICATION	1.6784693626197277E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999283792130886	WITHOUT_CLASSIFICATION	7.162078691140519E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999791805773484	WITHOUT_CLASSIFICATION	2.081942265161441E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999977214370374	WITHOUT_CLASSIFICATION	2.2785629625971118E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999611630560474	WITHOUT_CLASSIFICATION	3.883694395262158E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998296471881402	WITHOUT_CLASSIFICATION	1.7035281185990127E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986695098749379	WITHOUT_CLASSIFICATION	0.0013304901250620878	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999977757359001	WITHOUT_CLASSIFICATION	2.224264099932681E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998405781661639	WITHOUT_CLASSIFICATION	1.594218338360989E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996311707627833	WITHOUT_CLASSIFICATION	3.688292372166888E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990988684254481	WITHOUT_CLASSIFICATION	9.011315745518206E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999953161252125	WITHOUT_CLASSIFICATION	4.683874787517025E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998373435390945	WITHOUT_CLASSIFICATION	1.626564609056222E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999929259128726	WITHOUT_CLASSIFICATION	7.074087127380016E-6	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999242635803807	WITHOUT_CLASSIFICATION	7.573641961939458E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999621182228869	WITHOUT_CLASSIFICATION	3.788177711294891E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999672934136982	WITHOUT_CLASSIFICATION	3.27065863017764E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999998479831013	WITHOUT_CLASSIFICATION	1.5201689869386428E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997903269421962	WITHOUT_CLASSIFICATION	2.09673057803885E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999794353909416	WITHOUT_CLASSIFICATION	2.0564609058342502E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999846573257711	WITHOUT_CLASSIFICATION	1.5342674228899374E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999386135786645	WITHOUT_CLASSIFICATION	6.138642133541848E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999346293450753	WITHOUT_CLASSIFICATION	6.537065492470101E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9433595056105927	WITHOUT_CLASSIFICATION	0.0566404943894073	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999998529581635	WITHOUT_CLASSIFICATION	1.4704183649333054E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999923964947511	WITHOUT_CLASSIFICATION	7.603505248902171E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998072343504558	WITHOUT_CLASSIFICATION	1.927656495441439E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999928887532208	WITHOUT_CLASSIFICATION	7.111246779225959E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999827493349478	WITHOUT_CLASSIFICATION	1.7250665052151834E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998448573451658	WITHOUT_CLASSIFICATION	1.551426548341625E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999805037018491	WITHOUT_CLASSIFICATION	1.9496298150835124E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999290165801126	WITHOUT_CLASSIFICATION	7.098341988733667E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998945846869373	WITHOUT_CLASSIFICATION	1.0541531306277497E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999622717118042	WITHOUT_CLASSIFICATION	3.772828819585435E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999107832196964	WITHOUT_CLASSIFICATION	8.921678030363961E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999916377775534	WITHOUT_CLASSIFICATION	8.36222244662242E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9987236142014485	WITHOUT_CLASSIFICATION	0.0012763857985515293	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9991566265310606	WITHOUT_CLASSIFICATION	8.433734689392512E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998200642436541	WITHOUT_CLASSIFICATION	1.7993575634594615E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999929259128726	WITHOUT_CLASSIFICATION	7.074087127380016E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996311707627833	WITHOUT_CLASSIFICATION	3.688292372166888E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998987381059823	WITHOUT_CLASSIFICATION	1.012618940176724E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9991799196580875	WITHOUT_CLASSIFICATION	8.200803419125192E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9755984642924422	WITHOUT_CLASSIFICATION	0.02440153570755778	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996311707627833	WITHOUT_CLASSIFICATION	3.688292372166888E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999875332098835	WITHOUT_CLASSIFICATION	1.2466790116532824E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999805037018491	WITHOUT_CLASSIFICATION	1.9496298150835124E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997746957832814	WITHOUT_CLASSIFICATION	2.2530421671854977E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999466623354553	WITHOUT_CLASSIFICATION	5.333766454470906E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999958735766923	WITHOUT_CLASSIFICATION	4.126423307676026E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999794353909416	WITHOUT_CLASSIFICATION	2.0564609058342502E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999846573257711	WITHOUT_CLASSIFICATION	1.5342674228899374E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999386135786645	WITHOUT_CLASSIFICATION	6.138642133541848E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999626321294474	WITHOUT_CLASSIFICATION	3.736787055268501E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.999674164850336	WITHOUT_CLASSIFICATION	3.25835149663977E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999203305563777	WITHOUT_CLASSIFICATION	7.966944362224956E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999975462240542	WITHOUT_CLASSIFICATION	2.4537759457667016E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9996864985585497	WITHOUT_CLASSIFICATION	3.135014414501729E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996311707627833	WITHOUT_CLASSIFICATION	3.688292372166888E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999346293450753	WITHOUT_CLASSIFICATION	6.537065492470101E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9433595056105927	WITHOUT_CLASSIFICATION	0.0566404943894073	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716043911708	WITHOUT_CLASSIFICATION	2.8395608829094692E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998924473981404	WITHOUT_CLASSIFICATION	1.0755260185962276E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999654748709618	WITHOUT_CLASSIFICATION	3.4525129038121895E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999929911512764	WITHOUT_CLASSIFICATION	7.008848723560043E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9991973486082388	WITHOUT_CLASSIFICATION	8.026513917611854E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999988316250505	WITHOUT_CLASSIFICATION	1.1683749493850976E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999287997570896	WITHOUT_CLASSIFICATION	7.120024291044252E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999624348500389	WITHOUT_CLASSIFICATION	3.7565149961074656E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999929949961139	WITHOUT_CLASSIFICATION	7.005003886095702E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999449921830049	WITHOUT_CLASSIFICATION	5.500781699511069E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985447381681954	WITHOUT_CLASSIFICATION	0.0014552618318045558	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991081097597416	WITHOUT_CLASSIFICATION	8.918902402583832E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999449921830049	WITHOUT_CLASSIFICATION	5.500781699511069E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999915918231083	WITHOUT_CLASSIFICATION	8.408176891703087E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999659535017764	WITHOUT_CLASSIFICATION	3.404649822355114E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986002041618339	WITHOUT_CLASSIFICATION	0.0013997958381660295	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9850884304733593	WITHOUT_CLASSIFICATION	0.014911569526640826	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9989350265119928	WITHOUT_CLASSIFICATION	0.00106497348800711	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985528779789913	WITHOUT_CLASSIFICATION	0.0014471220210087526	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998479557235623	WITHOUT_CLASSIFICATION	0.0015204427643770336	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999611630560474	WITHOUT_CLASSIFICATION	3.883694395262158E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999386215630599	WITHOUT_CLASSIFICATION	6.137843694005916E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999914681425869	WITHOUT_CLASSIFICATION	8.531857413125356E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999842061627341	WITHOUT_CLASSIFICATION	1.5793837265893524E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999744103056852	WITHOUT_CLASSIFICATION	2.558969431481908E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997933488999	WITHOUT_CLASSIFICATION	2.0665110019553886E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999718958830229	WITHOUT_CLASSIFICATION	2.810411697710058E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999776834742371	WITHOUT_CLASSIFICATION	2.2316525762990732E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999475260436003	WITHOUT_CLASSIFICATION	5.247395639979393E-5	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995101038505727	WITHOUT_CLASSIFICATION	4.898961494273035E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999305417520547	WITHOUT_CLASSIFICATION	6.945824794530235E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999960711635393	WITHOUT_CLASSIFICATION	3.9288364606908725E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999818776514992	WITHOUT_CLASSIFICATION	1.8122348500819606E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999751628285448	WITHOUT_CLASSIFICATION	2.4837171455100083E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9992637939192718	WITHOUT_CLASSIFICATION	7.362060807283291E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999154833344915	WITHOUT_CLASSIFICATION	8.451666550858059E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617304375796	WITHOUT_CLASSIFICATION	1.3826956242036278E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999809559338688	WITHOUT_CLASSIFICATION	1.9044066131163858E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9992578930696442	WITHOUT_CLASSIFICATION	7.421069303557615E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999818572797088	WITHOUT_CLASSIFICATION	1.814272029126483E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999758711334209	WITHOUT_CLASSIFICATION	2.4128866579136405E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999102676720998	WITHOUT_CLASSIFICATION	8.97323279002545E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999795230317026	WITHOUT_CLASSIFICATION	2.047696829745287E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996127735143682	WITHOUT_CLASSIFICATION	3.872264856317643E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998777681402624	WITHOUT_CLASSIFICATION	1.222318597375755E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999102676720998	WITHOUT_CLASSIFICATION	8.97323279002545E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999934868931918	WITHOUT_CLASSIFICATION	6.513106808204904E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999900663696465	WITHOUT_CLASSIFICATION	9.933630353454836E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993130520109818	WITHOUT_CLASSIFICATION	6.869479890182004E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999780183125249	WITHOUT_CLASSIFICATION	2.198168747516275E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999796406615308	WITHOUT_CLASSIFICATION	2.0359338469262837E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999465194144957	WITHOUT_CLASSIFICATION	5.348058550432875E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998731180013263	WITHOUT_CLASSIFICATION	1.2688199867378716E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999198725270037	WITHOUT_CLASSIFICATION	8.012747299641841E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999198725270037	WITHOUT_CLASSIFICATION	8.012747299641841E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999988211060999	WITHOUT_CLASSIFICATION	1.1788939001059692E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999533216859138	WITHOUT_CLASSIFICATION	4.66783140862266E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999388691231134	WITHOUT_CLASSIFICATION	6.11308768865665E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999779204577972	WITHOUT_CLASSIFICATION	2.2079542202822706E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999299246529	WITHOUT_CLASSIFICATION	7.007534711424302E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996811472840268	WITHOUT_CLASSIFICATION	3.188527159730907E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999986213017997	WITHOUT_CLASSIFICATION	1.3786982002063386E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999912204336946	WITHOUT_CLASSIFICATION	8.779566305379066E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999393333220007	WITHOUT_CLASSIFICATION	6.066667799927735E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999707799312452	WITHOUT_CLASSIFICATION	2.9220068754776223E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998805238996841	WITHOUT_CLASSIFICATION	1.1947610031592543E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999766463552735	WITHOUT_CLASSIFICATION	2.3353644726563114E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996973141530575	WITHOUT_CLASSIFICATION	3.0268584694245125E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9209839584318065	WITHOUT_CLASSIFICATION	0.07901604156819352	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9988226068568162	WITHOUT_CLASSIFICATION	0.0011773931431837501	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999704293000363	WITHOUT_CLASSIFICATION	2.9570699963648647E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999553727147099	WITHOUT_CLASSIFICATION	4.462728529008228E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9985754019361499	WITHOUT_CLASSIFICATION	0.001424598063850076	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9994900682456148	WITHOUT_CLASSIFICATION	5.099317543851588E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999517723801222	WITHOUT_CLASSIFICATION	4.822761987777196E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999841362331233	WITHOUT_CLASSIFICATION	1.5863766876664307E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999606758176197	WITHOUT_CLASSIFICATION	3.9324182380361666E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9996414688262777	WITHOUT_CLASSIFICATION	3.585311737222908E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999949619567187	WITHOUT_CLASSIFICATION	5.038043281282925E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999713999383342	WITHOUT_CLASSIFICATION	2.8600061665877944E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997500762247614	WITHOUT_CLASSIFICATION	2.499237752386276E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9996970184383736	WITHOUT_CLASSIFICATION	3.029815616264131E-4	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999532865202265	WITHOUT_CLASSIFICATION	4.6713479773493683E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9881549295647628	WITHOUT_CLASSIFICATION	0.011845070435237115	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9995216566420672	WITHOUT_CLASSIFICATION	4.7834335793284937E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999786626258091	WITHOUT_CLASSIFICATION	2.133737419086643E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9997100586220745	WITHOUT_CLASSIFICATION	2.8994137792548257E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999293137500382	WITHOUT_CLASSIFICATION	7.068624996184406E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.999947725587008	WITHOUT_CLASSIFICATION	5.227441299192918E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998712343365417	WITHOUT_CLASSIFICATION	1.2876566345831414E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.999788103859296	WITHOUT_CLASSIFICATION	2.11896140704032E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9962395868072826	WITHOUT_CLASSIFICATION	0.0037604131927174472	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9974570935523391	WITHOUT_CLASSIFICATION	0.0025429064476608304	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999766742001156	WITHOUT_CLASSIFICATION	2.3325799884327296E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9996614813181827	WITHOUT_CLASSIFICATION	3.3851868181737773E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998058378126945	WITHOUT_CLASSIFICATION	1.9416218730543362E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998072343504558	WITHOUT_CLASSIFICATION	1.927656495441439E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998072343504558	WITHOUT_CLASSIFICATION	1.927656495441439E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999965781514254	WITHOUT_CLASSIFICATION	3.421848574604741E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999991099559089	WITHOUT_CLASSIFICATION	8.900440911119436E-7	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999889004651266	WITHOUT_CLASSIFICATION	1.1099534873372708E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999976001415505	WITHOUT_CLASSIFICATION	2.399858449525252E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999898404893452	WITHOUT_CLASSIFICATION	1.0159510654625124E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999677532306336	WITHOUT_CLASSIFICATION	3.2246769366520283E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997316125548533	WITHOUT_CLASSIFICATION	2.6838744514665335E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9994858080494562	WITHOUT_CLASSIFICATION	5.14191950543749E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999794711812616	WITHOUT_CLASSIFICATION	2.0528818738470288E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998683820510775	WITHOUT_CLASSIFICATION	1.316179489224823E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998310232845826	WITHOUT_CLASSIFICATION	1.689767154173182E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999990420893241	WITHOUT_CLASSIFICATION	9.579106758676023E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996956561768926	WITHOUT_CLASSIFICATION	3.043438231073779E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999041411555105	WITHOUT_CLASSIFICATION	9.585884448944048E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9993119911884607	WITHOUT_CLASSIFICATION	6.880088115393162E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9993706478857369	WITHOUT_CLASSIFICATION	6.29352114263113E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9995499136862482	WITHOUT_CLASSIFICATION	4.500863137518302E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998675466119714	WITHOUT_CLASSIFICATION	1.3245338802858435E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9992239808178572	WITHOUT_CLASSIFICATION	7.7601918214277E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999986074838437	WITHOUT_CLASSIFICATION	1.3925161562941629E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998675466119714	WITHOUT_CLASSIFICATION	1.3245338802858435E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999860744985445	WITHOUT_CLASSIFICATION	1.3925501455456599E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999980187422788	WITHOUT_CLASSIFICATION	1.981257721216892E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997112410464415	WITHOUT_CLASSIFICATION	2.8875895355845915E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997632582323981	WITHOUT_CLASSIFICATION	2.3674176760181667E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9994710289125815	WITHOUT_CLASSIFICATION	5.289710874184802E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999973989325476	WITHOUT_CLASSIFICATION	2.601067452493245E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996846415087607	WITHOUT_CLASSIFICATION	3.15358491239299E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999948424531242	WITHOUT_CLASSIFICATION	5.157546875803235E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998686469356222	WITHOUT_CLASSIFICATION	1.313530643777844E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999927372048056	WITHOUT_CLASSIFICATION	7.262795194393403E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999994644556027	WITHOUT_CLASSIFICATION	5.355443973159644E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999881760186605	WITHOUT_CLASSIFICATION	1.182398133954912E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9996419206446925	WITHOUT_CLASSIFICATION	3.580793553074864E-4	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999397988812447	WITHOUT_CLASSIFICATION	6.020111875527832E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9975975037859932	WITHOUT_CLASSIFICATION	0.002402496214006762	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999693078040904	WITHOUT_CLASSIFICATION	3.0692195909539896E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9972552941477945	WITHOUT_CLASSIFICATION	0.00274470585220555	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998904804281782	WITHOUT_CLASSIFICATION	1.0951957182178882E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9994328024065166	WITHOUT_CLASSIFICATION	5.67197593483467E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9998232462988275	WITHOUT_CLASSIFICATION	1.7675370117242698E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.99998019355631	WITHOUT_CLASSIFICATION	1.9806443690051794E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999796230349364	WITHOUT_CLASSIFICATION	2.037696506361512E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9980480748699154	WITHOUT_CLASSIFICATION	0.0019519251300844952	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.711044577166992	WITHOUT_CLASSIFICATION	0.288955422833008	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9998626976821127	WITHOUT_CLASSIFICATION	1.3730231788727662E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9993831874092357	WITHOUT_CLASSIFICATION	6.168125907643421E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9987480058545132	WITHOUT_CLASSIFICATION	0.001251994145486806	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999118805244341	WITHOUT_CLASSIFICATION	8.811947556591029E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9992637939192718	WITHOUT_CLASSIFICATION	7.362060807283291E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9987413955966288	WITHOUT_CLASSIFICATION	0.0012586044033712554	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999986988097136	WITHOUT_CLASSIFICATION	1.30119028634402E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9014618829779344	WITHOUT_CLASSIFICATION	0.0985381170220655	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999277474671402	WITHOUT_CLASSIFICATION	7.225253285974233E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999993775420052	WITHOUT_CLASSIFICATION	6.224579947983708E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9987089127906188	WITHOUT_CLASSIFICATION	0.0012910872093812018	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9960264339632422	WITHOUT_CLASSIFICATION	0.003973566036757794	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999992631571876	WITHOUT_CLASSIFICATION	7.368428123934399E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999675516716139	WITHOUT_CLASSIFICATION	3.2448328386117735E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999676743420562	WITHOUT_CLASSIFICATION	3.232565794371983E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999996579788174	WITHOUT_CLASSIFICATION	3.420211825878196E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9993830512172225	WITHOUT_CLASSIFICATION	6.169487827775435E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9989266926348689	WITHOUT_CLASSIFICATION	0.0010733073651310705	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9990689047113792	WITHOUT_CLASSIFICATION	9.310952886206448E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999768097210301	WITHOUT_CLASSIFICATION	2.3190278969919827E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999784957367414	WITHOUT_CLASSIFICATION	2.150426325860001E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999924270196254	WITHOUT_CLASSIFICATION	7.5729803745995235E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998679088131628	WITHOUT_CLASSIFICATION	1.3209118683728472E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999995788076289	WITHOUT_CLASSIFICATION	4.211923711016981E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999675605151561	WITHOUT_CLASSIFICATION	3.2439484843910075E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998389491431984	WITHOUT_CLASSIFICATION	1.6105085680166712E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998844177884406	WITHOUT_CLASSIFICATION	1.1558221155939624E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998636684630566	WITHOUT_CLASSIFICATION	1.363315369433633E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997681994424538	WITHOUT_CLASSIFICATION	2.3180055754612672E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9996107702174225	WITHOUT_CLASSIFICATION	3.8922978257748225E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998312619776141	WITHOUT_CLASSIFICATION	1.6873802238598018E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999985551346854	WITHOUT_CLASSIFICATION	1.4448653146042978E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9976228642945891	WITHOUT_CLASSIFICATION	0.0023771357054108416	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9988913242969276	WITHOUT_CLASSIFICATION	0.0011086757030723457	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404025603617	WITHOUT_CLASSIFICATION	5.959743963837756E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998682161833926	WITHOUT_CLASSIFICATION	1.3178381660741324E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999199264444957	WITHOUT_CLASSIFICATION	8.00735555043804E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999976134587434	WITHOUT_CLASSIFICATION	2.3865412565982734E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999537412429627	WITHOUT_CLASSIFICATION	4.6258757037427575E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999962145184288	WITHOUT_CLASSIFICATION	3.785481571111309E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9984142638140024	WITHOUT_CLASSIFICATION	0.0015857361859976406	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997329024158791	WITHOUT_CLASSIFICATION	2.6709758412084267E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934440789374	WITHOUT_CLASSIFICATION	6.555921062591379E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997329024158791	WITHOUT_CLASSIFICATION	2.6709758412084267E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998534048251	WITHOUT_CLASSIFICATION	1.465951748999769E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999832177443309	WITHOUT_CLASSIFICATION	1.6782255669203097E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.999985352647533	WITHOUT_CLASSIFICATION	1.4647352467098289E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999877214205252	WITHOUT_CLASSIFICATION	1.227857947475587E-5	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999990181486989	WITHOUT_CLASSIFICATION	9.818513010949464E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999681460270676	WITHOUT_CLASSIFICATION	3.1853972932356115E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999571702884241	WITHOUT_CLASSIFICATION	4.282971157583696E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999782870022536	WITHOUT_CLASSIFICATION	2.171299774644249E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999023882527096	WITHOUT_CLASSIFICATION	9.761174729041184E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.924097615905666	WITHOUT_CLASSIFICATION	0.07590238409433411	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997004592274724	WITHOUT_CLASSIFICATION	2.9954077252764883E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9992000686171076	WITHOUT_CLASSIFICATION	7.999313828922962E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999205566517657	WITHOUT_CLASSIFICATION	7.94433482343558E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999837904699646	WITHOUT_CLASSIFICATION	1.6209530035487296E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9904999357822136	WITHOUT_CLASSIFICATION	0.009500064217786318	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997163995696945	WITHOUT_CLASSIFICATION	2.836004303055186E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999286373760322	WITHOUT_CLASSIFICATION	7.136262396786337E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999286373760322	WITHOUT_CLASSIFICATION	7.136262396786337E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998499279544755	WITHOUT_CLASSIFICATION	1.5007204552458116E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998624186614539	WITHOUT_CLASSIFICATION	1.375813385462002E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999996690976352	WITHOUT_CLASSIFICATION	3.3090236479201136E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999682370898566	WITHOUT_CLASSIFICATION	3.176291014333508E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999967645114993	WITHOUT_CLASSIFICATION	3.235488500597511E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999978609375242	WITHOUT_CLASSIFICATION	2.139062475863339E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9973173237945836	WITHOUT_CLASSIFICATION	0.0026826762054164544	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999961959194095	WITHOUT_CLASSIFICATION	3.804080590486729E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9998672081585805	WITHOUT_CLASSIFICATION	1.327918414195141E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999927577682334	WITHOUT_CLASSIFICATION	7.242231766600104E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996366757673	WITHOUT_CLASSIFICATION	3.633242325937118E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.99966847018198	WITHOUT_CLASSIFICATION	3.3152981801992177E-4	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999481402109072	WITHOUT_CLASSIFICATION	5.185978909270984E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999961138810477	WITHOUT_CLASSIFICATION	3.886118952294643E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999373086109486	WITHOUT_CLASSIFICATION	6.269138905130705E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9998652713066616	WITHOUT_CLASSIFICATION	1.3472869333834868E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999993362273388	WITHOUT_CLASSIFICATION	6.6377266121112954E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.996331772781072	WITHOUT_CLASSIFICATION	0.0036682272189279483	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9997619778664886	WITHOUT_CLASSIFICATION	2.3802213351127339E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999966737683391	WITHOUT_CLASSIFICATION	3.3262316608247065E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999935875784535	WITHOUT_CLASSIFICATION	6.412421546587087E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9993799699621684	WITHOUT_CLASSIFICATION	6.200300378316828E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9995457533633685	WITHOUT_CLASSIFICATION	4.5424663663156284E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9620949438866809	WITHOUT_CLASSIFICATION	0.03790505611331908	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999026692850349	WITHOUT_CLASSIFICATION	9.7330714965155E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999992697214782	WITHOUT_CLASSIFICATION	7.302785217212977E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999474474828793	WITHOUT_CLASSIFICATION	5.255251712076236E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999511016847028	WITHOUT_CLASSIFICATION	4.8898315297104674E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9990656613018314	WITHOUT_CLASSIFICATION	9.343386981686101E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999922553417675	WITHOUT_CLASSIFICATION	7.74465823242791E-6	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999784234749952	WITHOUT_CLASSIFICATION	2.1576525004821722E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999961580907426	WITHOUT_CLASSIFICATION	3.841909257475646E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994726794222547	WITHOUT_CLASSIFICATION	5.273205777453726E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9968180045553692	WITHOUT_CLASSIFICATION	0.0031819954446308998	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994961035747981	WITHOUT_CLASSIFICATION	5.038964252018455E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999992498451415	WITHOUT_CLASSIFICATION	7.501548584946582E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999518802915204	WITHOUT_CLASSIFICATION	4.811970847954978E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999953247378902	WITHOUT_CLASSIFICATION	4.675262109771303E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.99999888226636	WITHOUT_CLASSIFICATION	1.1177336399127774E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9992821629438211	WITHOUT_CLASSIFICATION	7.178370561789306E-4	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999786899410494	WITHOUT_CLASSIFICATION	2.1310058950567092E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315737361903	WITHOUT_CLASSIFICATION	6.84262638096432E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9989204132350328	WITHOUT_CLASSIFICATION	0.0010795867649672534	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.783812398480331	WITHOUT_CLASSIFICATION	0.216187601519669	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.998288411426931	WITHOUT_CLASSIFICATION	0.0017115885730690109	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999248214673185	WITHOUT_CLASSIFICATION	7.517853268155603E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999725445597941	WITHOUT_CLASSIFICATION	2.7455440205873388E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996743183731	WITHOUT_CLASSIFICATION	3.256816268723933E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999128021286897	WITHOUT_CLASSIFICATION	8.719787131032284E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999512881826668	WITHOUT_CLASSIFICATION	4.871181733336307E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315737361903	WITHOUT_CLASSIFICATION	6.84262638096432E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999915856552586	WITHOUT_CLASSIFICATION	8.41434474132423E-6	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998332121871364	WITHOUT_CLASSIFICATION	1.6678781286352004E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998771416702243	WITHOUT_CLASSIFICATION	1.2285832977574132E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9994517552299991	WITHOUT_CLASSIFICATION	5.482447700008547E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999875332098835	WITHOUT_CLASSIFICATION	1.2466790116532824E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999875332098835	WITHOUT_CLASSIFICATION	1.2466790116532824E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999988199104662	WITHOUT_CLASSIFICATION	1.1800895338009666E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999940476913809	WITHOUT_CLASSIFICATION	5.9523086191092425E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999987166906413	WITHOUT_CLASSIFICATION	1.2833093586318547E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999487721467624	WITHOUT_CLASSIFICATION	5.1227853237657776E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996766041232161	WITHOUT_CLASSIFICATION	3.2339587678379854E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999533351610831	WITHOUT_CLASSIFICATION	4.666483891690089E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999484707624203	WITHOUT_CLASSIFICATION	5.152923757977523E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999083553959687	WITHOUT_CLASSIFICATION	9.164460403133876E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999454517784002	WITHOUT_CLASSIFICATION	5.454822159983026E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999109229144317	WITHOUT_CLASSIFICATION	8.907708556825437E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999900309637072	WITHOUT_CLASSIFICATION	9.969036292769776E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998187475745636	WITHOUT_CLASSIFICATION	1.812524254364923E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999501505270999	WITHOUT_CLASSIFICATION	4.984947290012251E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999638859611931	WITHOUT_CLASSIFICATION	3.611403880695231E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996696215832039	WITHOUT_CLASSIFICATION	3.3037841679600145E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9969294115219622	WITHOUT_CLASSIFICATION	0.0030705884780376884	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999985297978967	WITHOUT_CLASSIFICATION	1.4702021031988397E-6	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998461720235492	WITHOUT_CLASSIFICATION	1.538279764508713E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9997137264102408	WITHOUT_CLASSIFICATION	2.862735897591067E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997301439410975	WITHOUT_CLASSIFICATION	2.6985605890257375E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998439779264128	WITHOUT_CLASSIFICATION	1.5602207358722365E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999852722915963	WITHOUT_CLASSIFICATION	1.4727708403675721E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.993572099431504	WITHOUT_CLASSIFICATION	0.006427900568495951	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9958609024273324	WITHOUT_CLASSIFICATION	0.00413909757266765	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999099910089957	WITHOUT_CLASSIFICATION	9.000899100433103E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998917031101845	WITHOUT_CLASSIFICATION	1.0829688981550257E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999996439075841	WITHOUT_CLASSIFICATION	3.560924158871327E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999989378008409	WITHOUT_CLASSIFICATION	1.0621991590590304E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999994267418606	WITHOUT_CLASSIFICATION	5.732581393266352E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.99974394046289	WITHOUT_CLASSIFICATION	2.5605953710999596E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999989333969704	WITHOUT_CLASSIFICATION	1.0666030295793396E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9992718721512421	WITHOUT_CLASSIFICATION	7.281278487579587E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999762730517232	WITHOUT_CLASSIFICATION	2.372694827675184E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999988896672235	WITHOUT_CLASSIFICATION	1.1103327765232005E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999345635542332	WITHOUT_CLASSIFICATION	6.543644576683806E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9990300756856094	WITHOUT_CLASSIFICATION	9.69924314390475E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996366757673	WITHOUT_CLASSIFICATION	3.633242325937118E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999481819037509	WITHOUT_CLASSIFICATION	5.1818096249202365E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999718958830229	WITHOUT_CLASSIFICATION	2.810411697710058E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999954846134521	WITHOUT_CLASSIFICATION	4.5153865479850955E-6	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999890467068643	WITHOUT_CLASSIFICATION	1.0953293135668037E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999980224008899	WITHOUT_CLASSIFICATION	1.977599110159538E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999958697104273	WITHOUT_CLASSIFICATION	4.130289572627154E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999396835521783	WITHOUT_CLASSIFICATION	6.031644782162204E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999941714528862	WITHOUT_CLASSIFICATION	5.828547113931282E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999955991506456	WITHOUT_CLASSIFICATION	4.400849354416116E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999875203924435	WITHOUT_CLASSIFICATION	1.2479607556448499E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997699230081382	WITHOUT_CLASSIFICATION	2.3007699186193022E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.99987044965775	WITHOUT_CLASSIFICATION	1.2955034225010177E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998612675220725	WITHOUT_CLASSIFICATION	1.3873247792757062E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999568542107455	WITHOUT_CLASSIFICATION	4.3145789254419735E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999235535510698	WITHOUT_CLASSIFICATION	7.644644893022803E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999259195798487	WITHOUT_CLASSIFICATION	7.408042015139281E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999423094413584	WITHOUT_CLASSIFICATION	5.7690558641492716E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996854717646659	WITHOUT_CLASSIFICATION	3.145282353341333E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998420714493265	WITHOUT_CLASSIFICATION	1.5792855067343559E-4	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997960928203083	WITHOUT_CLASSIFICATION	2.039071796915918E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999956429337166	WITHOUT_CLASSIFICATION	4.3570662834053975E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995989500042347	WITHOUT_CLASSIFICATION	4.010499957652875E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997808476468715	WITHOUT_CLASSIFICATION	2.1915235312845363E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.999986822431959	WITHOUT_CLASSIFICATION	1.3177568041009335E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985666814266193	WITHOUT_CLASSIFICATION	0.0014333185733807726	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999354595294488	WITHOUT_CLASSIFICATION	6.454047055120593E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998564153615238	WITHOUT_CLASSIFICATION	1.4358463847615748E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999642943298578	WITHOUT_CLASSIFICATION	3.5705670142202974E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999927236148892	WITHOUT_CLASSIFICATION	7.276385110818967E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999780286204302	WITHOUT_CLASSIFICATION	2.197137956986983E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997965800795544	WITHOUT_CLASSIFICATION	2.0341992044549723E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999668272539082	WITHOUT_CLASSIFICATION	3.317274609189572E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999968324102603	WITHOUT_CLASSIFICATION	3.1675897397049E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9912490979783051	WITHOUT_CLASSIFICATION	0.008750902021694889	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998466406711694	WITHOUT_CLASSIFICATION	1.53359328830612E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999989134723295	WITHOUT_CLASSIFICATION	1.0865276704933223E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999839374544525	WITHOUT_CLASSIFICATION	1.606254554745396E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999471632207839	WITHOUT_CLASSIFICATION	5.28367792159966E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999932919921294	WITHOUT_CLASSIFICATION	6.70800787061788E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999152498449558	WITHOUT_CLASSIFICATION	8.475015504413927E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999954287370838	WITHOUT_CLASSIFICATION	4.571262916161852E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999833825412291	WITHOUT_CLASSIFICATION	1.661745877097679E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999810439066845	WITHOUT_CLASSIFICATION	1.8956093315419783E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999380961492309	WITHOUT_CLASSIFICATION	6.190385076910597E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999970627478721	WITHOUT_CLASSIFICATION	2.937252127726498E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999649623489762	WITHOUT_CLASSIFICATION	3.503765102379205E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999978514708969	WITHOUT_CLASSIFICATION	2.148529103066097E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998953878179061	WITHOUT_CLASSIFICATION	1.0461218209393022E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999058207758722	WITHOUT_CLASSIFICATION	9.417922412783908E-5	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999900040715558	WITHOUT_CLASSIFICATION	9.995928444306372E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999881658721842	WITHOUT_CLASSIFICATION	1.1834127815783952E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999894987352113	WITHOUT_CLASSIFICATION	1.0501264788744259E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.99996507808734	WITHOUT_CLASSIFICATION	3.492191265990431E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985666814266193	WITHOUT_CLASSIFICATION	0.0014333185733807726	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999776392781176	WITHOUT_CLASSIFICATION	2.2360721882404577E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9997722487286106	WITHOUT_CLASSIFICATION	2.2775127138951223E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999928105934663	WITHOUT_CLASSIFICATION	7.1894065336841545E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.998356595705845	WITHOUT_CLASSIFICATION	0.0016434042941549907	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9998632878435951	WITHOUT_CLASSIFICATION	1.3671215640487342E-4	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999325375670338	WITHOUT_CLASSIFICATION	6.746243296617384E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998173445942026	WITHOUT_CLASSIFICATION	1.8265540579740535E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999990757787355	WITHOUT_CLASSIFICATION	9.242212644674141E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999990361372283	WITHOUT_CLASSIFICATION	9.638627717458211E-7	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998258183065144	WITHOUT_CLASSIFICATION	1.741816934854738E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9996930851121314	WITHOUT_CLASSIFICATION	3.0691488786864084E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996847912290547	WITHOUT_CLASSIFICATION	3.152087709451888E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999906195771084	WITHOUT_CLASSIFICATION	9.380422891518267E-6	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999568939635916	WITHOUT_CLASSIFICATION	4.3106036408466855E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998534048251	WITHOUT_CLASSIFICATION	1.465951748999769E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999979940247713	WITHOUT_CLASSIFICATION	2.005975228751148E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999889645379982	WITHOUT_CLASSIFICATION	1.1035462001840258E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999925249033871	WITHOUT_CLASSIFICATION	7.4750966129725E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999184932702009	WITHOUT_CLASSIFICATION	8.150672979914725E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999972782203878	WITHOUT_CLASSIFICATION	2.7217796122062653E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999821003872857	WITHOUT_CLASSIFICATION	1.7899612714295562E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999821003872857	WITHOUT_CLASSIFICATION	1.7899612714295562E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999785071206321	WITHOUT_CLASSIFICATION	2.1492879367898538E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999953042997681	WITHOUT_CLASSIFICATION	4.695700231900033E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999743759068362	WITHOUT_CLASSIFICATION	2.5624093163788005E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999693477300103	WITHOUT_CLASSIFICATION	3.065226998963139E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998943431835143	WITHOUT_CLASSIFICATION	1.0565681648559031E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999565781729292	WITHOUT_CLASSIFICATION	4.342182707090171E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.998923208562706	WITHOUT_CLASSIFICATION	0.0010767914372939976	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9906156808097455	WITHOUT_CLASSIFICATION	0.00938431919025445	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9906156808097455	WITHOUT_CLASSIFICATION	0.00938431919025445	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.7003978085307656	WITHOUT_CLASSIFICATION	0.2996021914692344	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999625381026562	WITHOUT_CLASSIFICATION	3.7461897343751625E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999961196177856	WITHOUT_CLASSIFICATION	3.880382214394969E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999379645083811	WITHOUT_CLASSIFICATION	6.203549161883979E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999379645083811	WITHOUT_CLASSIFICATION	6.203549161883979E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999379645083811	WITHOUT_CLASSIFICATION	6.203549161883979E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999462803425713	WITHOUT_CLASSIFICATION	5.3719657428769497E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999570615787511	WITHOUT_CLASSIFICATION	4.2938421248810236E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9921812772616826	WITHOUT_CLASSIFICATION	0.007818722738317357	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999986054294907	WITHOUT_CLASSIFICATION	1.3945705092937598E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999939159210499	WITHOUT_CLASSIFICATION	6.084078950033984E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9996459712786288	WITHOUT_CLASSIFICATION	3.540287213711696E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999966221192229	WITHOUT_CLASSIFICATION	3.377880777199531E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9993597224784179	WITHOUT_CLASSIFICATION	6.4027752158218E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999912138536745	WITHOUT_CLASSIFICATION	8.786146325504182E-6	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9997653407851869	WITHOUT_CLASSIFICATION	2.3465921481309474E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999976612590059	WITHOUT_CLASSIFICATION	2.3387409941064118E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999625208606568	WITHOUT_CLASSIFICATION	3.747913934318189E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999436782275692	WITHOUT_CLASSIFICATION	5.632177243085935E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999998579133482	WITHOUT_CLASSIFICATION	1.4208665179770822E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999994186435412	WITHOUT_CLASSIFICATION	5.813564587926855E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999416692776169	WITHOUT_CLASSIFICATION	5.8330722383060656E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998197780379974	WITHOUT_CLASSIFICATION	1.8022196200266388E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999821003872857	WITHOUT_CLASSIFICATION	1.7899612714295562E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996508458911314	WITHOUT_CLASSIFICATION	3.4915410886867835E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9876883477687914	WITHOUT_CLASSIFICATION	0.012311652231208569	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999289182627249	WITHOUT_CLASSIFICATION	7.108173727513646E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999691115508028	WITHOUT_CLASSIFICATION	3.0888449197130453E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999979856556202	WITHOUT_CLASSIFICATION	2.01434437979078E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999895456612	WITHOUT_CLASSIFICATION	1.0454338798974141E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999381878023401	WITHOUT_CLASSIFICATION	6.181219765988501E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999538293069828	WITHOUT_CLASSIFICATION	4.617069301714693E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999932337943507	WITHOUT_CLASSIFICATION	6.766205649326605E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999906217527795	WITHOUT_CLASSIFICATION	9.378247220411191E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999127131496	WITHOUT_CLASSIFICATION	8.728685044789743E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999997732885945	WITHOUT_CLASSIFICATION	2.2671140549501637E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999943633375318	WITHOUT_CLASSIFICATION	5.6366624681949145E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999911645252696	WITHOUT_CLASSIFICATION	8.835474730469188E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9997221665995201	WITHOUT_CLASSIFICATION	2.778334004799857E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.6830198771037033	IMPLEMENTATION	0.3169801228962966	WITHOUT_CLASSIFICATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999935922477522	WITHOUT_CLASSIFICATION	6.407752247847008E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999919247262886	WITHOUT_CLASSIFICATION	8.075273711493474E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999882438015705	WITHOUT_CLASSIFICATION	1.1756198429570266E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999882438015705	WITHOUT_CLASSIFICATION	1.1756198429570266E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999614273265592	WITHOUT_CLASSIFICATION	3.8572673440805206E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999942514421203	WITHOUT_CLASSIFICATION	5.748557879785625E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999594379571042	WITHOUT_CLASSIFICATION	4.056204289573372E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999349268393246	WITHOUT_CLASSIFICATION	6.507316067537695E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999512540652736	WITHOUT_CLASSIFICATION	4.874593472635975E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999169439989295	WITHOUT_CLASSIFICATION	8.305600107041966E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999655299013513	WITHOUT_CLASSIFICATION	3.4470098648667374E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999922532195749	WITHOUT_CLASSIFICATION	7.74678042521112E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999758816740937	WITHOUT_CLASSIFICATION	2.4118325906304597E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999987208208178	WITHOUT_CLASSIFICATION	1.2791791822048522E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998710466178685	WITHOUT_CLASSIFICATION	1.2895338213143634E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997435373669258	WITHOUT_CLASSIFICATION	2.564626330741296E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999941587727726	WITHOUT_CLASSIFICATION	5.841227227392529E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999983404505415	WITHOUT_CLASSIFICATION	1.6595494585684216E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999939165939582	WITHOUT_CLASSIFICATION	6.083406041872998E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999909449308934	WITHOUT_CLASSIFICATION	9.055069106591095E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999910033676	WITHOUT_CLASSIFICATION	8.99663240483374E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999910033676	WITHOUT_CLASSIFICATION	8.99663240483374E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9981234864317173	WITHOUT_CLASSIFICATION	0.0018765135682826048	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998250763493	WITHOUT_CLASSIFICATION	1.749236507172127E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999954697891899	WITHOUT_CLASSIFICATION	4.530210810176553E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.999995439847049	WITHOUT_CLASSIFICATION	4.560152950994091E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999908983733637	WITHOUT_CLASSIFICATION	9.101626636136464E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999892688635322	WITHOUT_CLASSIFICATION	1.0731136467826768E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993372930293439	WITHOUT_CLASSIFICATION	6.627069706561016E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999696713414654	WITHOUT_CLASSIFICATION	3.0328658534542515E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998393561637907	WITHOUT_CLASSIFICATION	1.606438362092042E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999997734969353	WITHOUT_CLASSIFICATION	2.2650306481756864E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999497721706341	WITHOUT_CLASSIFICATION	5.0227829365845415E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999696713414654	WITHOUT_CLASSIFICATION	3.0328658534542515E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999331710009938	WITHOUT_CLASSIFICATION	6.682899900622257E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9988676292498649	WITHOUT_CLASSIFICATION	0.0011323707501351538	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999692619920325	WITHOUT_CLASSIFICATION	3.073800796751321E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999281247954088	WITHOUT_CLASSIFICATION	7.187520459114964E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999691457147	WITHOUT_CLASSIFICATION	3.0854285241384386E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999444742411476	WITHOUT_CLASSIFICATION	5.552575885242857E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9987812186515411	WITHOUT_CLASSIFICATION	0.0012187813484589279	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999863861107845	WITHOUT_CLASSIFICATION	1.3613889215606733E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999967049583997	WITHOUT_CLASSIFICATION	3.2950416003677422E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996192693672529	WITHOUT_CLASSIFICATION	3.8073063274719147E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996969059105822	WITHOUT_CLASSIFICATION	3.030940894178218E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999935088342972	WITHOUT_CLASSIFICATION	6.491165702882953E-6	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998553191868554	WITHOUT_CLASSIFICATION	1.446808131444933E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9995469066348199	WITHOUT_CLASSIFICATION	4.5309336518004615E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999868950568813	WITHOUT_CLASSIFICATION	1.3104943118710157E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999913075096905	WITHOUT_CLASSIFICATION	8.69249030950508E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999732916301242	WITHOUT_CLASSIFICATION	2.6708369875907987E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9909573170078542	WITHOUT_CLASSIFICATION	0.00904268299214582	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9909573170078542	WITHOUT_CLASSIFICATION	0.00904268299214582	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9987812186515411	WITHOUT_CLASSIFICATION	0.0012187813484589279	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9808186776321708	WITHOUT_CLASSIFICATION	0.01918132236782918	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999786882407515	WITHOUT_CLASSIFICATION	2.1311759248542922E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999132402247938	WITHOUT_CLASSIFICATION	8.675977520620703E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999895486806185	WITHOUT_CLASSIFICATION	1.045131938140812E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999920960954624	WITHOUT_CLASSIFICATION	7.9039045377407E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999353960162792	WITHOUT_CLASSIFICATION	6.460398372070779E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999863250894921	WITHOUT_CLASSIFICATION	1.3674910507841098E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998174021655538	WITHOUT_CLASSIFICATION	1.825978344461684E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999543118021209	WITHOUT_CLASSIFICATION	4.568819787907275E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999638764162423	WITHOUT_CLASSIFICATION	3.612358375769256E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999612443238246	WITHOUT_CLASSIFICATION	3.875567617536805E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999332142481956	WITHOUT_CLASSIFICATION	6.678575180445835E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998234797619221	WITHOUT_CLASSIFICATION	1.7652023807784577E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999185618510255	WITHOUT_CLASSIFICATION	8.143814897454622E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999250633731821	WITHOUT_CLASSIFICATION	7.493662681793722E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999971754912526	WITHOUT_CLASSIFICATION	2.82450874745244E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999996420855477	WITHOUT_CLASSIFICATION	3.5791445236895433E-7	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999938673414511	WITHOUT_CLASSIFICATION	6.132658548869574E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999343853755628	WITHOUT_CLASSIFICATION	6.561462443730106E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999475422026378	WITHOUT_CLASSIFICATION	5.245779736213438E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998314430370012	WITHOUT_CLASSIFICATION	1.6855696299882512E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999979624425523	WITHOUT_CLASSIFICATION	2.0375574476071288E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999766140725758	WITHOUT_CLASSIFICATION	2.3385927424202557E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999930683915051	WITHOUT_CLASSIFICATION	6.9316084948529625E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999827458389653	WITHOUT_CLASSIFICATION	1.7254161034637113E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999929191156347	WITHOUT_CLASSIFICATION	7.080884365372601E-6	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999910796559931	WITHOUT_CLASSIFICATION	8.920344006890808E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999982207834093	WITHOUT_CLASSIFICATION	1.779216590694997E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999951279623565	WITHOUT_CLASSIFICATION	4.87203764352478E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999351928986894	WITHOUT_CLASSIFICATION	6.48071013107238E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999250471967355	WITHOUT_CLASSIFICATION	7.495280326449393E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999590405300652	WITHOUT_CLASSIFICATION	4.0959469934821795E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999815683323	WITHOUT_CLASSIFICATION	1.8431667704860766E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999990691131081	WITHOUT_CLASSIFICATION	9.308868919049288E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999693976002209	WITHOUT_CLASSIFICATION	3.060239977907491E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.998897982559254	WITHOUT_CLASSIFICATION	0.00110201744074599	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999977693648961	WITHOUT_CLASSIFICATION	2.2306351037854996E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999634966016412	WITHOUT_CLASSIFICATION	3.650339835881697E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999968164603777	WITHOUT_CLASSIFICATION	3.183539622301764E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9925389328667151	WITHOUT_CLASSIFICATION	0.007461067133284855	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9994663328950335	WITHOUT_CLASSIFICATION	5.33667104966428E-4	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999498162741646	WITHOUT_CLASSIFICATION	5.0183725835508556E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999994327951421	WITHOUT_CLASSIFICATION	5.672048578672124E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9992381979394281	WITHOUT_CLASSIFICATION	7.618020605718313E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999789900612001	WITHOUT_CLASSIFICATION	2.1009938799925956E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999966813840012	WITHOUT_CLASSIFICATION	3.318615998803394E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99936453535194	WITHOUT_CLASSIFICATION	6.354646480599697E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995627170091	WITHOUT_CLASSIFICATION	4.3728299094242024E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999986960288741	WITHOUT_CLASSIFICATION	1.3039711258344576E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9987305890168263	WITHOUT_CLASSIFICATION	0.0012694109831736875	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999916873231692	WITHOUT_CLASSIFICATION	8.312676830736784E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998393561637907	WITHOUT_CLASSIFICATION	1.606438362092042E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999910633133111	WITHOUT_CLASSIFICATION	8.936686688906009E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999250633731821	WITHOUT_CLASSIFICATION	7.493662681793722E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.99988922385254	WITHOUT_CLASSIFICATION	1.1077614746010981E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999961276486924	WITHOUT_CLASSIFICATION	3.872351307577094E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999877180013972	WITHOUT_CLASSIFICATION	1.2281998602825115E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999875684596778	WITHOUT_CLASSIFICATION	1.2431540322136429E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999686051814034	WITHOUT_CLASSIFICATION	3.139481859662729E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999333786825717	WITHOUT_CLASSIFICATION	6.662131742823978E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999757116441675	WITHOUT_CLASSIFICATION	2.4288355832492773E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999936170815397	WITHOUT_CLASSIFICATION	6.382918460332768E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999328674096584	WITHOUT_CLASSIFICATION	6.713259034162157E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999938072038568	WITHOUT_CLASSIFICATION	6.192796143222079E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9988762936303778	WITHOUT_CLASSIFICATION	0.0011237063696221716	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999634271326624	WITHOUT_CLASSIFICATION	3.6572867337585E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999926060533042	WITHOUT_CLASSIFICATION	7.39394669579596E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999926060533042	WITHOUT_CLASSIFICATION	7.39394669579596E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997898713239	WITHOUT_CLASSIFICATION	2.101286762260866E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9942160084136614	WITHOUT_CLASSIFICATION	0.005783991586338491	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999912442073369	WITHOUT_CLASSIFICATION	8.755792663096642E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999989898985777	WITHOUT_CLASSIFICATION	1.0101014222252252E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999982084383915	WITHOUT_CLASSIFICATION	1.7915616084358059E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999927049682687	WITHOUT_CLASSIFICATION	7.295031731298978E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999996208805487	WITHOUT_CLASSIFICATION	3.791194512781636E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999992963084464	WITHOUT_CLASSIFICATION	7.036915536142019E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999821204240114	WITHOUT_CLASSIFICATION	1.7879575988571833E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9997937105026025	WITHOUT_CLASSIFICATION	2.0628949739751382E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9997179316970269	WITHOUT_CLASSIFICATION	2.8206830297300135E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997179316970269	WITHOUT_CLASSIFICATION	2.8206830297300135E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999516309585	WITHOUT_CLASSIFICATION	4.836904142712316E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999928840827114	WITHOUT_CLASSIFICATION	7.115917288603572E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994411625122	WITHOUT_CLASSIFICATION	5.588374878779921E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997595639904185	WITHOUT_CLASSIFICATION	2.4043600958145983E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999990887779936	WITHOUT_CLASSIFICATION	9.112220064251349E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999960764272274	WITHOUT_CLASSIFICATION	3.923572772517384E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999988880561818	WITHOUT_CLASSIFICATION	1.1119438181433064E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999984706217568	WITHOUT_CLASSIFICATION	1.5293782431656416E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999942372067739	WITHOUT_CLASSIFICATION	5.762793226004777E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.99999085863173	WITHOUT_CLASSIFICATION	9.14136827003969E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9995655147744839	WITHOUT_CLASSIFICATION	4.3448522551610863E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261808107294	WITHOUT_CLASSIFICATION	7.381918927060314E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999833507116277	WITHOUT_CLASSIFICATION	1.6649288372302057E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999803106205708	WITHOUT_CLASSIFICATION	1.9689379429177253E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997890543047024	WITHOUT_CLASSIFICATION	2.1094569529759E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999929965976346	WITHOUT_CLASSIFICATION	7.003402365420461E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9987236142014485	WITHOUT_CLASSIFICATION	0.0012763857985515293	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996430634046094	WITHOUT_CLASSIFICATION	3.5693659539052115E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999321013530094	WITHOUT_CLASSIFICATION	6.789864699071009E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9945814331546929	WITHOUT_CLASSIFICATION	0.005418566845307097	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997301439410975	WITHOUT_CLASSIFICATION	2.6985605890257375E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999777676359833	WITHOUT_CLASSIFICATION	2.2232364016545327E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997454199500326	WITHOUT_CLASSIFICATION	2.5458004996743635E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9983237541971703	WITHOUT_CLASSIFICATION	0.0016762458028295982	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998751343456598	WITHOUT_CLASSIFICATION	1.2486565434020557E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999235216886577	WITHOUT_CLASSIFICATION	7.647831134223159E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985910421250143	WITHOUT_CLASSIFICATION	0.0014089578749857622	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999966459797178	WITHOUT_CLASSIFICATION	3.354020282248445E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997158919191317	WITHOUT_CLASSIFICATION	2.841080808682347E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986002041618339	WITHOUT_CLASSIFICATION	0.0013997958381660295	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9969850461071833	WITHOUT_CLASSIFICATION	0.0030149538928167796	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999688331844343	WITHOUT_CLASSIFICATION	3.116681556578575E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999985974198973	WITHOUT_CLASSIFICATION	1.4025801028015877E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999586455700331	WITHOUT_CLASSIFICATION	4.135442996697219E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987982432483095	WITHOUT_CLASSIFICATION	0.0012017567516905926	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999737909414382	WITHOUT_CLASSIFICATION	2.6209058561821516E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999855599350441	WITHOUT_CLASSIFICATION	1.4440064955855453E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999826887952771	WITHOUT_CLASSIFICATION	1.731120472289805E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999316133049141	WITHOUT_CLASSIFICATION	6.838669508591249E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999971702099838	WITHOUT_CLASSIFICATION	2.829790016170261E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999829912804531	WITHOUT_CLASSIFICATION	1.7008719546907833E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9986804409333769	WITHOUT_CLASSIFICATION	0.0013195590666230897	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997610091644747	WITHOUT_CLASSIFICATION	2.3899083552521037E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999249176295796	WITHOUT_CLASSIFICATION	7.508237042039155E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9995111609851313	WITHOUT_CLASSIFICATION	4.88839014868687E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997431800933	WITHOUT_CLASSIFICATION	2.568199067146643E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999958881029705	WITHOUT_CLASSIFICATION	4.1118970295069296E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999275553972461	WITHOUT_CLASSIFICATION	7.244460275396951E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999920221880707	WITHOUT_CLASSIFICATION	7.97781192924721E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999590059829874	WITHOUT_CLASSIFICATION	4.09940170126646E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999749355129203	WITHOUT_CLASSIFICATION	2.5064487079797163E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999995090857793	WITHOUT_CLASSIFICATION	4.909142206944297E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998485793809526	WITHOUT_CLASSIFICATION	1.514206190474909E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998365066014202	WITHOUT_CLASSIFICATION	1.6349339857980102E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998485793809526	WITHOUT_CLASSIFICATION	1.514206190474909E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998586243474795	WITHOUT_CLASSIFICATION	1.4137565252052563E-4	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999457171714428	WITHOUT_CLASSIFICATION	5.42828285572687E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9963732611856556	WITHOUT_CLASSIFICATION	0.003626738814344354	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999879639196871	WITHOUT_CLASSIFICATION	1.203608031279949E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999616465579408	WITHOUT_CLASSIFICATION	3.835344205904045E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9963732611856556	WITHOUT_CLASSIFICATION	0.003626738814344354	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999956565166578	WITHOUT_CLASSIFICATION	4.3434833422178144E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997360207529522	WITHOUT_CLASSIFICATION	2.6397924704775407E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999860947657169	WITHOUT_CLASSIFICATION	1.3905234283141068E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999624308441162	WITHOUT_CLASSIFICATION	3.756915588379634E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999556230178028	WITHOUT_CLASSIFICATION	4.4376982197280244E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999817123899778	WITHOUT_CLASSIFICATION	1.828761002219395E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999924224061617	WITHOUT_CLASSIFICATION	7.577593838374789E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7480283728836313	WITHOUT_CLASSIFICATION	0.2519716271163686	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997230951339812	WITHOUT_CLASSIFICATION	2.769048660188645E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999978165462787	WITHOUT_CLASSIFICATION	2.1834537212593336E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999988452027235	WITHOUT_CLASSIFICATION	1.1547972765132135E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999929367136453	WITHOUT_CLASSIFICATION	7.063286354700492E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999981954757327	WITHOUT_CLASSIFICATION	1.804524267426794E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999753256302081	WITHOUT_CLASSIFICATION	2.4674369791885567E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996511236668	WITHOUT_CLASSIFICATION	3.4887633311484303E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996872830070562	WITHOUT_CLASSIFICATION	3.1271699294370484E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999650038076494	WITHOUT_CLASSIFICATION	3.4996192350572795E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999720326894775	WITHOUT_CLASSIFICATION	2.7967310522459358E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998401702408264	WITHOUT_CLASSIFICATION	1.5982975917365195E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999994185470601	WITHOUT_CLASSIFICATION	5.814529397907775E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999389769517402	WITHOUT_CLASSIFICATION	6.1023048259788535E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9975486359612478	WITHOUT_CLASSIFICATION	0.002451364038752338	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995713150513533	WITHOUT_CLASSIFICATION	4.2868494864661805E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.996420897598279	WITHOUT_CLASSIFICATION	0.0035791024017209905	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9989214314609666	WITHOUT_CLASSIFICATION	0.0010785685390334312	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998438557662533	WITHOUT_CLASSIFICATION	1.561442337467165E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999762172	WITHOUT_CLASSIFICATION	2.3782843564286174E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998614579026767	WITHOUT_CLASSIFICATION	1.385420973234425E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.99856356295142	WITHOUT_CLASSIFICATION	0.0014364370485799736	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999894631932004	WITHOUT_CLASSIFICATION	1.0536806799597697E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9998984464233637	WITHOUT_CLASSIFICATION	1.0155357663631385E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9997692016297455	WITHOUT_CLASSIFICATION	2.307983702544812E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9755984642924422	WITHOUT_CLASSIFICATION	0.02440153570755778	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999994185470601	WITHOUT_CLASSIFICATION	5.814529397907775E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999988951487042	WITHOUT_CLASSIFICATION	1.1048512958710303E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999541543681438	WITHOUT_CLASSIFICATION	4.584563185610434E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992388707517399	WITHOUT_CLASSIFICATION	7.61129248260041E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9988718028089555	WITHOUT_CLASSIFICATION	0.00112819719104453	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999823765387619	WITHOUT_CLASSIFICATION	1.7623461238098103E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999771023044681	WITHOUT_CLASSIFICATION	2.2897695531904465E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999748766833221	WITHOUT_CLASSIFICATION	2.5123316677887374E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998401655010659	WITHOUT_CLASSIFICATION	1.5983449893405724E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999935584716771	WITHOUT_CLASSIFICATION	6.441528322900393E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9994260647741853	WITHOUT_CLASSIFICATION	5.739352258147516E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999967710406884	WITHOUT_CLASSIFICATION	3.2289593116710833E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999857220366871	WITHOUT_CLASSIFICATION	1.4277963313025933E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999820379437859	WITHOUT_CLASSIFICATION	1.7962056214071133E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999020326265138	WITHOUT_CLASSIFICATION	9.79673734862672E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998362304103742	WITHOUT_CLASSIFICATION	1.6376958962582443E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999815459763666	WITHOUT_CLASSIFICATION	1.8454023633333005E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9847412152712497	WITHOUT_CLASSIFICATION	0.015258784728750358	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999048804284099	WITHOUT_CLASSIFICATION	9.511957159003466E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993554355558618	WITHOUT_CLASSIFICATION	6.445644441381936E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999868951356858	WITHOUT_CLASSIFICATION	1.310486431409293E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9928800665623339	WITHOUT_CLASSIFICATION	0.007119933437666029	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9928800665623339	WITHOUT_CLASSIFICATION	0.007119933437666029	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999976743501781	WITHOUT_CLASSIFICATION	2.3256498218980583E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9928800665623339	WITHOUT_CLASSIFICATION	0.007119933437666029	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9928800665623339	WITHOUT_CLASSIFICATION	0.007119933437666029	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9995805522084793	WITHOUT_CLASSIFICATION	4.194477915207642E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999521477463214	WITHOUT_CLASSIFICATION	4.7852253678603414E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999278892084473	WITHOUT_CLASSIFICATION	7.211079155275815E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999278892084473	WITHOUT_CLASSIFICATION	7.211079155275815E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999603284113934	WITHOUT_CLASSIFICATION	3.9671588606616505E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999731095010803	WITHOUT_CLASSIFICATION	2.689049891969815E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996815885734677	WITHOUT_CLASSIFICATION	3.1841142653237685E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999100364214	WITHOUT_CLASSIFICATION	8.996357855557754E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9992942078666678	WITHOUT_CLASSIFICATION	7.057921333321807E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9979037764403866	WITHOUT_CLASSIFICATION	0.0020962235596134484	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9989645747005235	WITHOUT_CLASSIFICATION	0.0010354252994765542	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989702157816825	WITHOUT_CLASSIFICATION	0.001029784218317455	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9997099087713776	WITHOUT_CLASSIFICATION	2.9009122862241665E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999222642147902	WITHOUT_CLASSIFICATION	7.773578520976467E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997263502706968	WITHOUT_CLASSIFICATION	2.7364972930321856E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.99996099560637	WITHOUT_CLASSIFICATION	3.90043936300126E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999962145184288	WITHOUT_CLASSIFICATION	3.785481571111309E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997930920887009	WITHOUT_CLASSIFICATION	2.0690791129915323E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997027355730584	WITHOUT_CLASSIFICATION	2.972644269416212E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9995797349676084	WITHOUT_CLASSIFICATION	4.20265032391661E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9996123674675307	WITHOUT_CLASSIFICATION	3.876325324693259E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9996826602749526	WITHOUT_CLASSIFICATION	3.173397250475272E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999962145184288	WITHOUT_CLASSIFICATION	3.785481571111309E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999389769517402	WITHOUT_CLASSIFICATION	6.1023048259788535E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9987681704163462	WITHOUT_CLASSIFICATION	0.0012318295836537014	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999795230317026	WITHOUT_CLASSIFICATION	2.047696829745287E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999102676720998	WITHOUT_CLASSIFICATION	8.97323279002545E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9986544664430644	WITHOUT_CLASSIFICATION	0.0013455335569355173	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999604092770856	WITHOUT_CLASSIFICATION	3.959072291448453E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9993144690967656	WITHOUT_CLASSIFICATION	6.855309032345488E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999120796101041	WITHOUT_CLASSIFICATION	8.792038989592375E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999716170225673	WITHOUT_CLASSIFICATION	2.838297743273839E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999955065049552	WITHOUT_CLASSIFICATION	4.493495044831642E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9991248429999187	WITHOUT_CLASSIFICATION	8.751570000812291E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999929224272902	WITHOUT_CLASSIFICATION	7.0775727098064565E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999672276223159	WITHOUT_CLASSIFICATION	3.277237768403928E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998308020180982	WITHOUT_CLASSIFICATION	1.6919798190177663E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9983720411704745	WITHOUT_CLASSIFICATION	0.0016279588295255814	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998992628086412	WITHOUT_CLASSIFICATION	1.0073719135876405E-4	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999438325656463	WITHOUT_CLASSIFICATION	5.616743435359779E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999784341124354	WITHOUT_CLASSIFICATION	2.1565887564609163E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999864377315166	WITHOUT_CLASSIFICATION	1.3562268483468547E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998494387652598	WITHOUT_CLASSIFICATION	1.5056123474033309E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999716398637308	WITHOUT_CLASSIFICATION	2.8360136269183403E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9992565132448509	WITHOUT_CLASSIFICATION	7.434867551491809E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999991504823162	WITHOUT_CLASSIFICATION	8.495176837350856E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999716170225673	WITHOUT_CLASSIFICATION	2.838297743273839E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9989562023632664	WITHOUT_CLASSIFICATION	0.0010437976367334773	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.999680106927801	WITHOUT_CLASSIFICATION	3.198930721990378E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9993394073950662	WITHOUT_CLASSIFICATION	6.60592604933748E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999624348500389	WITHOUT_CLASSIFICATION	3.7565149961074656E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.998979533568955	WITHOUT_CLASSIFICATION	0.0010204664310450005	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9984000299924463	WITHOUT_CLASSIFICATION	0.0015999700075537855	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9976791821340955	WITHOUT_CLASSIFICATION	0.002320817865904469	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9984018558525369	WITHOUT_CLASSIFICATION	0.0015981441474631005	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9963518623576249	WITHOUT_CLASSIFICATION	0.003648137642375235	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999764394562425	WITHOUT_CLASSIFICATION	2.3560543757524824E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998813187359414	WITHOUT_CLASSIFICATION	1.1868126405866451E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999997151091472	WITHOUT_CLASSIFICATION	2.8489085280374032E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999955052556523	WITHOUT_CLASSIFICATION	4.494744347712017E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999927797768948	WITHOUT_CLASSIFICATION	7.220223105202273E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999441055919346	WITHOUT_CLASSIFICATION	5.5894408065528264E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999764394562425	WITHOUT_CLASSIFICATION	2.3560543757524824E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999944485986579	WITHOUT_CLASSIFICATION	5.551401342090569E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999958550470147	WITHOUT_CLASSIFICATION	4.144952985208351E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999517723801222	WITHOUT_CLASSIFICATION	4.822761987777196E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999444115055319	WITHOUT_CLASSIFICATION	5.558849446805457E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9998209577365351	WITHOUT_CLASSIFICATION	1.7904226346479523E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9985667427443752	WITHOUT_CLASSIFICATION	0.0014332572556247272	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999578759276772	WITHOUT_CLASSIFICATION	4.212407232287477E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780765751161	WITHOUT_CLASSIFICATION	2.192342488386908E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999245934485332	WITHOUT_CLASSIFICATION	7.540655146683945E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993302141909397	WITHOUT_CLASSIFICATION	6.697858090601872E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993302141909397	WITHOUT_CLASSIFICATION	6.697858090601872E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993302141909397	WITHOUT_CLASSIFICATION	6.697858090601872E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999884032577907	WITHOUT_CLASSIFICATION	1.1596742209246791E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999884032577907	WITHOUT_CLASSIFICATION	1.1596742209246791E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999948454456344	WITHOUT_CLASSIFICATION	5.154554365479969E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999950140346723	WITHOUT_CLASSIFICATION	4.985965327663905E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997837325811988	WITHOUT_CLASSIFICATION	2.162674188011833E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9997216253716211	WITHOUT_CLASSIFICATION	2.783746283788668E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9913843306517537	WITHOUT_CLASSIFICATION	0.008615669348246367	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999285228311429	WITHOUT_CLASSIFICATION	7.147716885714927E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999624648520323	WITHOUT_CLASSIFICATION	3.753514796766595E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999629461209	WITHOUT_CLASSIFICATION	3.705387908562936E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998968858914558	WITHOUT_CLASSIFICATION	1.0311410854416662E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999285228311429	WITHOUT_CLASSIFICATION	7.147716885714927E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999624648520323	WITHOUT_CLASSIFICATION	3.753514796766595E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999991599212485	WITHOUT_CLASSIFICATION	8.400787513951777E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999994042334194	WITHOUT_CLASSIFICATION	5.957665805955933E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999989754725372	WITHOUT_CLASSIFICATION	1.0245274627817712E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999994523539014	WITHOUT_CLASSIFICATION	5.4764609865928E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997977747928595	WITHOUT_CLASSIFICATION	2.0222520714063485E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999735129315512	WITHOUT_CLASSIFICATION	2.648706844880089E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999449921830049	WITHOUT_CLASSIFICATION	5.500781699511069E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999858080281935	WITHOUT_CLASSIFICATION	1.4191971806587047E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996186294477224	WITHOUT_CLASSIFICATION	3.813705522774979E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9989124122916612	WITHOUT_CLASSIFICATION	0.0010875877083388504	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999877086461622	WITHOUT_CLASSIFICATION	1.2291353837832454E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999580599943484	WITHOUT_CLASSIFICATION	4.194000565159636E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998667197501977	WITHOUT_CLASSIFICATION	1.3328024980235084E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996370143807406	WITHOUT_CLASSIFICATION	3.629856192595184E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999630608793821	WITHOUT_CLASSIFICATION	3.693912061789176E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997978532282638	WITHOUT_CLASSIFICATION	2.021467717363157E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999959254224245	WITHOUT_CLASSIFICATION	4.074577575422303E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999500925911459	WITHOUT_CLASSIFICATION	4.990740885409862E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9786829968288232	WITHOUT_CLASSIFICATION	0.02131700317117681	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999906444486037	WITHOUT_CLASSIFICATION	9.35555139616772E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999956105702396	WITHOUT_CLASSIFICATION	4.389429760460548E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.975275003497822	WITHOUT_CLASSIFICATION	0.024724996502177916	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999248339007956	WITHOUT_CLASSIFICATION	7.51660992044257E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267349653437	WITHOUT_CLASSIFICATION	7.326503465628061E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999984523794277	WITHOUT_CLASSIFICATION	1.5476205722944141E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999303281445511	WITHOUT_CLASSIFICATION	6.967185544892406E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999479505238769	WITHOUT_CLASSIFICATION	5.204947612308201E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998310232845826	WITHOUT_CLASSIFICATION	1.689767154173182E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998310232845826	WITHOUT_CLASSIFICATION	1.689767154173182E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999726695359962	WITHOUT_CLASSIFICATION	2.733046400374855E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9998917795863879	WITHOUT_CLASSIFICATION	1.0822041361210623E-4	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9983528122919859	WITHOUT_CLASSIFICATION	0.0016471877080141003	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9994740838502311	WITHOUT_CLASSIFICATION	5.25916149768857E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999980804485252	WITHOUT_CLASSIFICATION	1.9195514748062476E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999601219646987	WITHOUT_CLASSIFICATION	3.9878035301253965E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999213806959946	WITHOUT_CLASSIFICATION	7.861930400539933E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9993706478857369	WITHOUT_CLASSIFICATION	6.29352114263113E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998797260201824	WITHOUT_CLASSIFICATION	1.2027397981763545E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878725768768	WITHOUT_CLASSIFICATION	1.2127423123199054E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878754810828	WITHOUT_CLASSIFICATION	1.2124518917200464E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9984944280043914	WITHOUT_CLASSIFICATION	0.001505571995608613	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998735187250463	WITHOUT_CLASSIFICATION	1.264812749538183E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999683420595316	WITHOUT_CLASSIFICATION	3.165794046846507E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999401638999716	WITHOUT_CLASSIFICATION	5.983610002841024E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997410510383	WITHOUT_CLASSIFICATION	2.58948961683354E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9991632230795392	WITHOUT_CLASSIFICATION	8.367769204607493E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999752199737177	WITHOUT_CLASSIFICATION	2.478002628222301E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9958493647620428	WITHOUT_CLASSIFICATION	0.004150635237957264	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999683420595316	WITHOUT_CLASSIFICATION	3.165794046846507E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999683420595316	WITHOUT_CLASSIFICATION	3.165794046846507E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999239386522172	WITHOUT_CLASSIFICATION	7.606134778279024E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999759079214949	WITHOUT_CLASSIFICATION	2.40920785050764E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997387384721972	WITHOUT_CLASSIFICATION	2.612615278028977E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999911509482017	WITHOUT_CLASSIFICATION	8.849051798260545E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999911645252696	WITHOUT_CLASSIFICATION	8.835474730469188E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997978532282638	WITHOUT_CLASSIFICATION	2.021467717363157E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999303132229369	WITHOUT_CLASSIFICATION	6.96867770630213E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999619315492291	WITHOUT_CLASSIFICATION	3.806845077095806E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999842077891019	WITHOUT_CLASSIFICATION	1.57922108980303E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998102853715691	WITHOUT_CLASSIFICATION	1.8971462843088806E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999919355310162	WITHOUT_CLASSIFICATION	8.064468983747978E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999925497184251	WITHOUT_CLASSIFICATION	7.45028157489568E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999574157539995	WITHOUT_CLASSIFICATION	4.258424600044318E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999574157539995	WITHOUT_CLASSIFICATION	4.258424600044318E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999574157539995	WITHOUT_CLASSIFICATION	4.258424600044318E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999574157539995	WITHOUT_CLASSIFICATION	4.258424600044318E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428751829691	WITHOUT_CLASSIFICATION	5.712481703082226E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9993086450494751	WITHOUT_CLASSIFICATION	6.913549505248721E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388612454626	WITHOUT_CLASSIFICATION	6.11387545373838E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999411044414768	WITHOUT_CLASSIFICATION	5.8895558523115186E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999914708897956	WITHOUT_CLASSIFICATION	8.529110204497188E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999318467927897	WITHOUT_CLASSIFICATION	6.815320721028174E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563849297469	WITHOUT_CLASSIFICATION	4.36150702531211E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999765697405733	WITHOUT_CLASSIFICATION	2.3430259426664563E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999947732087556	WITHOUT_CLASSIFICATION	5.2267912444033745E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999981937906905	WITHOUT_CLASSIFICATION	1.8062093093870561E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999384439085011	WITHOUT_CLASSIFICATION	6.155609149894181E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997294186266603	WITHOUT_CLASSIFICATION	2.7058137333973466E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999272102423966	WITHOUT_CLASSIFICATION	7.278975760333962E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9970741227708407	WITHOUT_CLASSIFICATION	0.0029258772291591625	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9996585717064064	WITHOUT_CLASSIFICATION	3.4142829359360533E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9996585717064064	WITHOUT_CLASSIFICATION	3.4142829359360533E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999485578784739	WITHOUT_CLASSIFICATION	5.144212152606298E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999825590886581	WITHOUT_CLASSIFICATION	1.7440911341892765E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987906122275	WITHOUT_CLASSIFICATION	1.209387772400774E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999389871551193	WITHOUT_CLASSIFICATION	6.101284488062345E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999389871551193	WITHOUT_CLASSIFICATION	6.101284488062345E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999886127764299	WITHOUT_CLASSIFICATION	1.138722357011048E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993302141909397	WITHOUT_CLASSIFICATION	6.697858090601872E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9889067649388492	WITHOUT_CLASSIFICATION	0.011093235061150774	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999957810342386	WITHOUT_CLASSIFICATION	4.21896576136872E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999878752942984	WITHOUT_CLASSIFICATION	1.2124705701528045E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9594354016343829	WITHOUT_CLASSIFICATION	0.040564598365617065	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999046798678751	WITHOUT_CLASSIFICATION	9.532013212481687E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999926970596409	WITHOUT_CLASSIFICATION	7.3029403590178525E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998496252456646	WITHOUT_CLASSIFICATION	1.5037475433548028E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995372396592582	WITHOUT_CLASSIFICATION	4.6276034074176E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999720592608177	WITHOUT_CLASSIFICATION	2.794073918229787E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999935703950831	WITHOUT_CLASSIFICATION	6.4296049169026244E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999954544420829	WITHOUT_CLASSIFICATION	4.54555791712239E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999907801830352	WITHOUT_CLASSIFICATION	9.219816964771353E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999971126208	WITHOUT_CLASSIFICATION	2.8873792385745746E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999404122385	WITHOUT_CLASSIFICATION	5.958776147643723E-8	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999806147689	WITHOUT_CLASSIFICATION	1.938523117877649E-8	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999339244064	WITHOUT_CLASSIFICATION	6.607559360200309E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999201578886973	WITHOUT_CLASSIFICATION	7.984211130268004E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999488058082384	WITHOUT_CLASSIFICATION	5.119419176162245E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999887117625965	WITHOUT_CLASSIFICATION	1.1288237403439471E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998559019747434	WITHOUT_CLASSIFICATION	1.4409802525663557E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999032366415	WITHOUT_CLASSIFICATION	9.676335853397814E-8	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999924270196254	WITHOUT_CLASSIFICATION	7.5729803745995235E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997178916398	WITHOUT_CLASSIFICATION	2.821083602688607E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999243954020444	WITHOUT_CLASSIFICATION	7.560459795570015E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999338051633262	WITHOUT_CLASSIFICATION	6.619483667375279E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9638996279974569	WITHOUT_CLASSIFICATION	0.0361003720025432	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9996766623558758	WITHOUT_CLASSIFICATION	3.2333764412422627E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9969294115219622	WITHOUT_CLASSIFICATION	0.0030705884780376884	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997518926430733	WITHOUT_CLASSIFICATION	2.4810735692668793E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999568144048758	WITHOUT_CLASSIFICATION	4.318559512418031E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999614806304271	WITHOUT_CLASSIFICATION	3.851936957282844E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999999306109982	WITHOUT_CLASSIFICATION	6.938900180907871E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999662890598611	WITHOUT_CLASSIFICATION	3.371094013889576E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9567064741702614	WITHOUT_CLASSIFICATION	0.04329352582973849	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999920656794906	WITHOUT_CLASSIFICATION	7.93432050941799E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999235518701	WITHOUT_CLASSIFICATION	7.644812995536706E-8	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997880066967499	WITHOUT_CLASSIFICATION	2.1199330325013152E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999841245876515	WITHOUT_CLASSIFICATION	1.5875412348504798E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999286373760322	WITHOUT_CLASSIFICATION	7.136262396786337E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999422962963921	WITHOUT_CLASSIFICATION	5.7703703607966005E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999897949787462	WITHOUT_CLASSIFICATION	1.0205021253689973E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999827098802205	WITHOUT_CLASSIFICATION	1.729011977939035E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9990926903161366	WITHOUT_CLASSIFICATION	9.073096838635242E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997974310919481	WITHOUT_CLASSIFICATION	2.0256890805197276E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996320325689662	WITHOUT_CLASSIFICATION	3.679674310338615E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998766867738558	WITHOUT_CLASSIFICATION	1.233132261442309E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9997881336410032	WITHOUT_CLASSIFICATION	2.1186635899681685E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9975655811524964	WITHOUT_CLASSIFICATION	0.0024344188475037285	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999334027895812	WITHOUT_CLASSIFICATION	6.659721041881867E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999802025929094	WITHOUT_CLASSIFICATION	1.9797407090594098E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996293781457013	WITHOUT_CLASSIFICATION	3.706218542988124E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999980504250187	WITHOUT_CLASSIFICATION	1.9495749812910517E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999765940549763	WITHOUT_CLASSIFICATION	2.3405945023606902E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998672778058	WITHOUT_CLASSIFICATION	1.3272219417573422E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999045917508478	WITHOUT_CLASSIFICATION	9.540824915224208E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999850684167138	WITHOUT_CLASSIFICATION	1.4931583286200078E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999975198124967	WITHOUT_CLASSIFICATION	2.4801875033204487E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999844499623508	WITHOUT_CLASSIFICATION	1.5550037649106616E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999994046654518	WITHOUT_CLASSIFICATION	5.953345481593307E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9676268734415443	WITHOUT_CLASSIFICATION	0.032373126558455735	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997926905308564	WITHOUT_CLASSIFICATION	2.0730946914371075E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999303467256015	WITHOUT_CLASSIFICATION	6.96532743984652E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998841770548034	WITHOUT_CLASSIFICATION	1.1582294519671906E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999378930334638	WITHOUT_CLASSIFICATION	6.2106966536119E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999952264953403	WITHOUT_CLASSIFICATION	4.773504659664512E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999990400568448	WITHOUT_CLASSIFICATION	9.599431551401497E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9994126996547269	WITHOUT_CLASSIFICATION	5.873003452731222E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999976060409331	WITHOUT_CLASSIFICATION	2.39395906691081E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999053634351887	WITHOUT_CLASSIFICATION	9.463656481131776E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999947446771715	WITHOUT_CLASSIFICATION	5.255322828427924E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9993042647166284	WITHOUT_CLASSIFICATION	6.957352833716597E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999881273491853	WITHOUT_CLASSIFICATION	1.1872650814816609E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9991670189450337	WITHOUT_CLASSIFICATION	8.329810549662468E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6467401072482466	IMPLEMENTATION	0.3532598927517535	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996872830070562	WITHOUT_CLASSIFICATION	3.1271699294370484E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9777000771206833	WITHOUT_CLASSIFICATION	0.022299922879316682	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988716353521893	WITHOUT_CLASSIFICATION	0.0011283646478108104	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999102952254978	WITHOUT_CLASSIFICATION	8.97047745022186E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9997146921022106	WITHOUT_CLASSIFICATION	2.853078977892512E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999930566499298	WITHOUT_CLASSIFICATION	6.943350070197184E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9990914066967616	WITHOUT_CLASSIFICATION	9.085933032385584E-4	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999046284225777	WITHOUT_CLASSIFICATION	9.53715774223169E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996144687280376	WITHOUT_CLASSIFICATION	3.8553127196238983E-4	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997361821036139	WITHOUT_CLASSIFICATION	2.6381789638601816E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9997001649091015	WITHOUT_CLASSIFICATION	2.998350908984563E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997964624124862	WITHOUT_CLASSIFICATION	2.0353758751374246E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999865157569292	WITHOUT_CLASSIFICATION	1.3484243070922758E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9993370275629723	WITHOUT_CLASSIFICATION	6.629724370277463E-4	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999928027670422	WITHOUT_CLASSIFICATION	7.197232957755491E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999556132592977	WITHOUT_CLASSIFICATION	4.438674070225165E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999127473858839	WITHOUT_CLASSIFICATION	8.725261411610061E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9996123530509122	WITHOUT_CLASSIFICATION	3.8764694908771587E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999944267457079	WITHOUT_CLASSIFICATION	5.573254292047778E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999944267457079	WITHOUT_CLASSIFICATION	5.573254292047778E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999264771360828	WITHOUT_CLASSIFICATION	7.352286391707193E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9985024890979732	WITHOUT_CLASSIFICATION	0.001497510902026754	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999266464737068	WITHOUT_CLASSIFICATION	7.33535262932343E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999929695643142	WITHOUT_CLASSIFICATION	7.03043568574083E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998678518091894	WITHOUT_CLASSIFICATION	1.3214819081055066E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999935943843397	WITHOUT_CLASSIFICATION	6.405615660297951E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999824886838481	WITHOUT_CLASSIFICATION	1.7511316151944775E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999994945720116	WITHOUT_CLASSIFICATION	5.054279883481128E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.935860344499409	WITHOUT_CLASSIFICATION	0.06413965550059102	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999966951871885	WITHOUT_CLASSIFICATION	3.30481281148835E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999993321679396	WITHOUT_CLASSIFICATION	6.678320604915584E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.996918219065427	WITHOUT_CLASSIFICATION	0.0030817809345729127	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999976934829921	WITHOUT_CLASSIFICATION	2.3065170080136793E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998369707448189	WITHOUT_CLASSIFICATION	1.6302925518108866E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999939256781288	WITHOUT_CLASSIFICATION	6.07432187114361E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9708566032794289	IMPLEMENTATION	0.029143396720571108	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9708566032794289	IMPLEMENTATION	0.029143396720571108	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999640768439618	WITHOUT_CLASSIFICATION	3.5923156038124135E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.99999840278177	WITHOUT_CLASSIFICATION	1.5972182300490872E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998917883432221	WITHOUT_CLASSIFICATION	1.0821165677784466E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999635422862373	WITHOUT_CLASSIFICATION	3.64577137626498E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999816487082329	WITHOUT_CLASSIFICATION	1.835129176708483E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998852336448548	WITHOUT_CLASSIFICATION	1.1476635514513844E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998852336448548	WITHOUT_CLASSIFICATION	1.1476635514513844E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999843061683159	WITHOUT_CLASSIFICATION	1.569383168401795E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999843483152784	WITHOUT_CLASSIFICATION	1.5651684721676697E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9996031020657198	WITHOUT_CLASSIFICATION	3.96897934280228E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999984864	WITHOUT_CLASSIFICATION	1.5136159127467907E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999619194274267	WITHOUT_CLASSIFICATION	3.808057257320151E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999870928873515	WITHOUT_CLASSIFICATION	1.2907112648433986E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998197780379974	WITHOUT_CLASSIFICATION	1.8022196200266388E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999108178610571	WITHOUT_CLASSIFICATION	8.918213894296897E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999740177286848	WITHOUT_CLASSIFICATION	2.59822713153128E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999970627478721	WITHOUT_CLASSIFICATION	2.937252127726498E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.998356595705845	WITHOUT_CLASSIFICATION	0.0016434042941549907	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999508495240134	WITHOUT_CLASSIFICATION	4.915047598672634E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999780105912552	WITHOUT_CLASSIFICATION	2.198940874471588E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997890543047024	WITHOUT_CLASSIFICATION	2.1094569529759E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9990925385078926	WITHOUT_CLASSIFICATION	9.074614921073444E-4	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9997692754143779	WITHOUT_CLASSIFICATION	2.3072458562210427E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997952286978282	WITHOUT_CLASSIFICATION	2.047713021718057E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997988987942982	WITHOUT_CLASSIFICATION	2.0110120570183913E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999786778557336	WITHOUT_CLASSIFICATION	2.1322144266394163E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999699309207745	WITHOUT_CLASSIFICATION	3.006907922548261E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9970027862110473	WITHOUT_CLASSIFICATION	0.0029972137889527893	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994786824037428	WITHOUT_CLASSIFICATION	5.213175962571515E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999273824368847	WITHOUT_CLASSIFICATION	7.261756311521155E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999785061809778	WITHOUT_CLASSIFICATION	2.1493819022109904E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9976830621266612	WITHOUT_CLASSIFICATION	0.0023169378733386894	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999997848515989	WITHOUT_CLASSIFICATION	2.151484011020609E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998381215066848	WITHOUT_CLASSIFICATION	1.6187849331525077E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999910033676	WITHOUT_CLASSIFICATION	8.99663240483374E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995820302208701	WITHOUT_CLASSIFICATION	4.179697791298527E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9989164910512492	WITHOUT_CLASSIFICATION	0.0010835089487508623	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999970491274037	WITHOUT_CLASSIFICATION	2.9508725961910742E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9657944603607548	WITHOUT_CLASSIFICATION	0.034205539639245164	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9995093850198115	WITHOUT_CLASSIFICATION	4.906149801886568E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999939233526026	WITHOUT_CLASSIFICATION	6.0766473973952826E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.99979092937905	WITHOUT_CLASSIFICATION	2.0907062094998617E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9997968667294267	WITHOUT_CLASSIFICATION	2.031332705733805E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998219542294	WITHOUT_CLASSIFICATION	1.7804577060003552E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998364319759165	WITHOUT_CLASSIFICATION	1.635680240833692E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999370355685632	WITHOUT_CLASSIFICATION	6.296443143689573E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9998061801526206	WITHOUT_CLASSIFICATION	1.9381984737930908E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9995641980477319	WITHOUT_CLASSIFICATION	4.3580195226814247E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999960020531015	WITHOUT_CLASSIFICATION	3.997946898560546E-6	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999050425796	WITHOUT_CLASSIFICATION	9.495742048596642E-8	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9980951811287299	WITHOUT_CLASSIFICATION	0.001904818871270115	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998219542294	WITHOUT_CLASSIFICATION	1.7804577060003552E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998364319759165	WITHOUT_CLASSIFICATION	1.635680240833692E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998544429119576	WITHOUT_CLASSIFICATION	1.4555708804255165E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997129957579722	WITHOUT_CLASSIFICATION	2.870042420278524E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999992345539126	WITHOUT_CLASSIFICATION	7.654460874810784E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999323075359021	WITHOUT_CLASSIFICATION	6.769246409796061E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999931478273621	WITHOUT_CLASSIFICATION	6.85217263786406E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9943130369726723	WITHOUT_CLASSIFICATION	0.00568696302732773	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997781257167548	WITHOUT_CLASSIFICATION	2.2187428324517604E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999912905069144	WITHOUT_CLASSIFICATION	8.709493085667328E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999959460527992	WITHOUT_CLASSIFICATION	4.0539472008145174E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.923018050717688	WITHOUT_CLASSIFICATION	0.07698194928231185	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998828960953339	WITHOUT_CLASSIFICATION	1.1710390466617108E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.923018050717688	WITHOUT_CLASSIFICATION	0.07698194928231185	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999530322874793	WITHOUT_CLASSIFICATION	4.6967712520706085E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997450248597676	WITHOUT_CLASSIFICATION	2.549751402324698E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999530322874793	WITHOUT_CLASSIFICATION	4.6967712520706085E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979118582115	WITHOUT_CLASSIFICATION	2.0881417885031732E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999309777765659	WITHOUT_CLASSIFICATION	6.90222234340841E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999560470831579	WITHOUT_CLASSIFICATION	4.395291684206036E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999560470831579	WITHOUT_CLASSIFICATION	4.395291684206036E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997316125548533	WITHOUT_CLASSIFICATION	2.6838744514665335E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997337838929868	WITHOUT_CLASSIFICATION	2.6621610701313213E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997316125548533	WITHOUT_CLASSIFICATION	2.6838744514665335E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997712938251236	WITHOUT_CLASSIFICATION	2.2870617487631912E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9868142472805375	WITHOUT_CLASSIFICATION	0.01318575271946262	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9987598230651824	WITHOUT_CLASSIFICATION	0.0012401769348175623	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998361033098815	WITHOUT_CLASSIFICATION	1.638966901185036E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999902401781631	WITHOUT_CLASSIFICATION	9.75982183698899E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9989378956100344	WITHOUT_CLASSIFICATION	0.0010621043899655869	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999475035236778	WITHOUT_CLASSIFICATION	5.249647632228472E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9998101050155164	WITHOUT_CLASSIFICATION	1.8989498448366182E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999273613105996	WITHOUT_CLASSIFICATION	7.263868940041767E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999593556647863	WITHOUT_CLASSIFICATION	4.064433521376874E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999952958303055	WITHOUT_CLASSIFICATION	4.7041696944907594E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999581828128752	WITHOUT_CLASSIFICATION	4.181718712470567E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999688992830804	WITHOUT_CLASSIFICATION	3.110071691963891E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999506073644675	WITHOUT_CLASSIFICATION	4.939263553245351E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998800194533914	WITHOUT_CLASSIFICATION	1.1998054660861087E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999572749781048	WITHOUT_CLASSIFICATION	4.2725021895195076E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9991103495095272	WITHOUT_CLASSIFICATION	8.896504904727609E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9981719084823774	WITHOUT_CLASSIFICATION	0.0018280915176226628	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9792140249682834	WITHOUT_CLASSIFICATION	0.02078597503171669	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998450558686584	WITHOUT_CLASSIFICATION	1.549441313417042E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998959441465906	WITHOUT_CLASSIFICATION	1.0405585340940683E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.993763693448369	WITHOUT_CLASSIFICATION	0.006236306551630874	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998171375995342	WITHOUT_CLASSIFICATION	1.8286240046578813E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9987598230651824	WITHOUT_CLASSIFICATION	0.0012401769348175623	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999661482719453	WITHOUT_CLASSIFICATION	3.38517280547319E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9992751813074274	WITHOUT_CLASSIFICATION	7.248186925725458E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9546248131020115	WITHOUT_CLASSIFICATION	0.04537518689798847	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9990380234825947	WITHOUT_CLASSIFICATION	9.619765174052635E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999714630668162	WITHOUT_CLASSIFICATION	2.853693318374937E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998711215515244	WITHOUT_CLASSIFICATION	1.2887844847564195E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997712938251236	WITHOUT_CLASSIFICATION	2.2870617487631912E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997712938251236	WITHOUT_CLASSIFICATION	2.2870617487631912E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9987675271770907	WITHOUT_CLASSIFICATION	0.001232472822909229	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998599425037893	WITHOUT_CLASSIFICATION	1.400574962107245E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998698971817349	WITHOUT_CLASSIFICATION	1.301028182651471E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9986269823110657	WITHOUT_CLASSIFICATION	0.0013730176889343423	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987538862861152	WITHOUT_CLASSIFICATION	0.001246113713884818	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997598410572403	WITHOUT_CLASSIFICATION	2.4015894275989148E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999909712183442	WITHOUT_CLASSIFICATION	9.028781655856161E-6	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997277280552	WITHOUT_CLASSIFICATION	2.722719447971588E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998624240985837	WITHOUT_CLASSIFICATION	1.3757590141632358E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924306133615	WITHOUT_CLASSIFICATION	7.569386638422344E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999273613105996	WITHOUT_CLASSIFICATION	7.263868940041767E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9992527404845364	WITHOUT_CLASSIFICATION	7.472595154635493E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924306133615	WITHOUT_CLASSIFICATION	7.569386638422344E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998318881643482	WITHOUT_CLASSIFICATION	1.681118356518398E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998660377765707	WITHOUT_CLASSIFICATION	1.3396222342921044E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999922151714199	WITHOUT_CLASSIFICATION	7.784828580097767E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9505375906210033	WITHOUT_CLASSIFICATION	0.049462409378996756	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998783606625171	WITHOUT_CLASSIFICATION	1.2163933748282335E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999995259700565	WITHOUT_CLASSIFICATION	4.740299435500844E-7	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982805851938	WITHOUT_CLASSIFICATION	1.7194148060779755E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999986172374	WITHOUT_CLASSIFICATION	1.3827625761486318E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997645437533875	WITHOUT_CLASSIFICATION	2.3545624661241966E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999786810877586	WITHOUT_CLASSIFICATION	2.1318912241509767E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998719630940084	WITHOUT_CLASSIFICATION	1.2803690599154656E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9945031538496464	WITHOUT_CLASSIFICATION	0.005496846150353685	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924306133615	WITHOUT_CLASSIFICATION	7.569386638422344E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998783606625171	WITHOUT_CLASSIFICATION	1.2163933748282335E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982805851938	WITHOUT_CLASSIFICATION	1.7194148060779755E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998374635079188	WITHOUT_CLASSIFICATION	1.6253649208117812E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997810703804798	WITHOUT_CLASSIFICATION	2.1892961952026715E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999238461114525	WITHOUT_CLASSIFICATION	7.61538885474803E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998513901955921	WITHOUT_CLASSIFICATION	1.4860980440779993E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997932090373604	WITHOUT_CLASSIFICATION	2.0679096263967998E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997423800095501	WITHOUT_CLASSIFICATION	2.576199904499406E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998318881643482	WITHOUT_CLASSIFICATION	1.681118356518398E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999751832277252	WITHOUT_CLASSIFICATION	2.4816772274808467E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9989601660409674	WITHOUT_CLASSIFICATION	0.0010398339590325647	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.998978631745333	WITHOUT_CLASSIFICATION	0.0010213682546670066	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8437980827143952	WITHOUT_CLASSIFICATION	0.15620191728560479	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.8351764333246791	WITHOUT_CLASSIFICATION	0.16482356667532094	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.999482776002321	WITHOUT_CLASSIFICATION	5.17223997679004E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979118582115	WITHOUT_CLASSIFICATION	2.0881417885031732E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903908763585	WITHOUT_CLASSIFICATION	9.609123641394287E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999992814324814	WITHOUT_CLASSIFICATION	7.185675185761154E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999643579692356	WITHOUT_CLASSIFICATION	3.564203076440632E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999965656159079	WITHOUT_CLASSIFICATION	3.4343840920547374E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999993940844982	WITHOUT_CLASSIFICATION	6.0591550178958815E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999667132280791	WITHOUT_CLASSIFICATION	3.328677192088239E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9993349351331564	WITHOUT_CLASSIFICATION	6.650648668435027E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999989802985808	WITHOUT_CLASSIFICATION	1.019701419215613E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997423800095501	WITHOUT_CLASSIFICATION	2.576199904499406E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9989318121882138	WITHOUT_CLASSIFICATION	0.0010681878117861931	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999457912796343	WITHOUT_CLASSIFICATION	5.420872036570155E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9961248669340381	WITHOUT_CLASSIFICATION	0.0038751330659618235	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999934204663937	WITHOUT_CLASSIFICATION	6.5795336063543024E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998873221340444	WITHOUT_CLASSIFICATION	1.1267786595554432E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9995075435007531	WITHOUT_CLASSIFICATION	4.924564992469238E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999131669489061	WITHOUT_CLASSIFICATION	8.68330510939203E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9901043262545077	WITHOUT_CLASSIFICATION	0.009895673745492392	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9980860274207561	WITHOUT_CLASSIFICATION	0.0019139725792439108	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999884263471359	WITHOUT_CLASSIFICATION	1.1573652864012605E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9991757814526538	WITHOUT_CLASSIFICATION	8.242185473462759E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9987523598728305	WITHOUT_CLASSIFICATION	0.0012476401271694884	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999920146704515	WITHOUT_CLASSIFICATION	7.985329548465653E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999937148374918	WITHOUT_CLASSIFICATION	6.285162508217241E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998278786040193	WITHOUT_CLASSIFICATION	1.7212139598071874E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999762557600127	WITHOUT_CLASSIFICATION	2.374423998733051E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9984013447492844	WITHOUT_CLASSIFICATION	0.0015986552507154996	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998009504282189	WITHOUT_CLASSIFICATION	1.9904957178111518E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999909581504329	WITHOUT_CLASSIFICATION	9.041849567032628E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999681361070378	WITHOUT_CLASSIFICATION	3.186389296221094E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999977691392088	WITHOUT_CLASSIFICATION	2.2308607911612758E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999232142128451	WITHOUT_CLASSIFICATION	7.678578715496288E-5	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8896382471203007	IMPLEMENTATION	0.11036175287969932	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9885152162554478	WITHOUT_CLASSIFICATION	0.011484783744552222	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998437532173929	WITHOUT_CLASSIFICATION	1.5624678260701524E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999957029801545	WITHOUT_CLASSIFICATION	4.297019845492192E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9791780568028002	WITHOUT_CLASSIFICATION	0.02082194319719983	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999931046134062	WITHOUT_CLASSIFICATION	6.895386593800299E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996192693672529	WITHOUT_CLASSIFICATION	3.8073063274719147E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999888855850106	WITHOUT_CLASSIFICATION	1.1114414989252449E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999910633133111	WITHOUT_CLASSIFICATION	8.936686688906009E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999938887751332	WITHOUT_CLASSIFICATION	6.111224866850743E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999887521002278	WITHOUT_CLASSIFICATION	1.1247899772198205E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999863717850866	WITHOUT_CLASSIFICATION	1.3628214913396312E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9976484293477181	WITHOUT_CLASSIFICATION	0.0023515706522819133	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999887521002278	WITHOUT_CLASSIFICATION	1.1247899772198205E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999938887751332	WITHOUT_CLASSIFICATION	6.111224866850743E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999863717850866	WITHOUT_CLASSIFICATION	1.3628214913396312E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.999944199407834	WITHOUT_CLASSIFICATION	5.5800592165983554E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999228268966994	WITHOUT_CLASSIFICATION	7.717310330064625E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9982118678733776	WITHOUT_CLASSIFICATION	0.0017881321266223975	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999768543594285	WITHOUT_CLASSIFICATION	2.3145640571474048E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998792766289	WITHOUT_CLASSIFICATION	1.207233710914994E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5183411449450267	IMPLEMENTATION	0.48165885505497325	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9926017204668012	WITHOUT_CLASSIFICATION	0.00739827953319885	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997079353230456	WITHOUT_CLASSIFICATION	2.9206467695442386E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999976361472945	WITHOUT_CLASSIFICATION	2.3638527054693907E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999008963192643	WITHOUT_CLASSIFICATION	9.910368073576235E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9995182831733431	WITHOUT_CLASSIFICATION	4.817168266568902E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999806941452767	WITHOUT_CLASSIFICATION	1.9305854723323902E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999572292231193	WITHOUT_CLASSIFICATION	4.2770776880703907E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999028509402978	WITHOUT_CLASSIFICATION	9.714905970216749E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999967126551484	WITHOUT_CLASSIFICATION	3.2873448515649786E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999916687827982	WITHOUT_CLASSIFICATION	8.331217201709144E-6	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999660310493822	WITHOUT_CLASSIFICATION	3.3968950617870185E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999987306767758	WITHOUT_CLASSIFICATION	1.2693232242098143E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9986033621447867	WITHOUT_CLASSIFICATION	0.0013966378552132818	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9977876950944451	WITHOUT_CLASSIFICATION	0.002212304905554924	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.983856953615254	WITHOUT_CLASSIFICATION	0.016143046384745906	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9997277005860353	WITHOUT_CLASSIFICATION	2.7229941396471243E-4	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9995139081714816	WITHOUT_CLASSIFICATION	4.8609182851850225E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999849476409624	WITHOUT_CLASSIFICATION	1.5052359037585924E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9977539122407253	WITHOUT_CLASSIFICATION	0.0022460877592745724	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9977539122407253	WITHOUT_CLASSIFICATION	0.0022460877592745724	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9991308559385486	WITHOUT_CLASSIFICATION	8.691440614514481E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9991308559385486	WITHOUT_CLASSIFICATION	8.691440614514481E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.998463663269851	WITHOUT_CLASSIFICATION	0.0015363367301489005	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999660310493822	WITHOUT_CLASSIFICATION	3.3968950617870185E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9987738026004532	WITHOUT_CLASSIFICATION	0.0012261973995467794	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9992152412362079	WITHOUT_CLASSIFICATION	7.847587637922496E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998151670451656	WITHOUT_CLASSIFICATION	1.8483295483449276E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998151670451656	WITHOUT_CLASSIFICATION	1.8483295483449276E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998927095422732	WITHOUT_CLASSIFICATION	1.0729045772690473E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9995076218392753	WITHOUT_CLASSIFICATION	4.92378160724607E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999318767015068	WITHOUT_CLASSIFICATION	6.812329849308006E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999019288126325	WITHOUT_CLASSIFICATION	9.807118736750907E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999743509592753	WITHOUT_CLASSIFICATION	2.5649040724683223E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999933016025487	WITHOUT_CLASSIFICATION	6.698397451236497E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999098567364527	WITHOUT_CLASSIFICATION	9.014326354727764E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999631994817	WITHOUT_CLASSIFICATION	3.680051830004653E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9998490089866996	WITHOUT_CLASSIFICATION	1.509910133004695E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999919514202805	WITHOUT_CLASSIFICATION	8.048579719507528E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998317140898958	WITHOUT_CLASSIFICATION	1.6828591010426434E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997227756696686	WITHOUT_CLASSIFICATION	2.772243303313091E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998409395688249	WITHOUT_CLASSIFICATION	1.5906043117501115E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9992853304258406	WITHOUT_CLASSIFICATION	7.146695741594195E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.86936313387109	WITHOUT_CLASSIFICATION	0.13063686612890998	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999141576643508	WITHOUT_CLASSIFICATION	8.584233564917666E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313470859749	WITHOUT_CLASSIFICATION	6.865291402516814E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995779046827711	WITHOUT_CLASSIFICATION	4.2209531722886963E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9868481903741009	WITHOUT_CLASSIFICATION	0.013151809625899109	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999774686183	WITHOUT_CLASSIFICATION	2.2531381700624695E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9996579554006159	WITHOUT_CLASSIFICATION	3.420445993840709E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999964304517945	WITHOUT_CLASSIFICATION	3.569548205574055E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998876067386941	WITHOUT_CLASSIFICATION	1.1239326130579706E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999991674836691	WITHOUT_CLASSIFICATION	8.325163308828665E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996847912290547	WITHOUT_CLASSIFICATION	3.152087709451888E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998270371234931	WITHOUT_CLASSIFICATION	1.7296287650694485E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999884263471359	WITHOUT_CLASSIFICATION	1.1573652864012605E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999258210764388	WITHOUT_CLASSIFICATION	7.417892356116433E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999967266485168	WITHOUT_CLASSIFICATION	3.273351483106635E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999306842124576	WITHOUT_CLASSIFICATION	6.931578754251675E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999255214321713	WITHOUT_CLASSIFICATION	7.447856782873396E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9995577043939883	WITHOUT_CLASSIFICATION	4.4229560601169167E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9995577043939883	WITHOUT_CLASSIFICATION	4.4229560601169167E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999849839751922	WITHOUT_CLASSIFICATION	1.5016024807683617E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9997414822995956	WITHOUT_CLASSIFICATION	2.5851770040438195E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9997105525249048	WITHOUT_CLASSIFICATION	2.894474750952028E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9997105525249048	WITHOUT_CLASSIFICATION	2.894474750952028E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.998897982559254	WITHOUT_CLASSIFICATION	0.00110201744074599	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999399347257234	WITHOUT_CLASSIFICATION	6.0065274276649246E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9965157677163704	WITHOUT_CLASSIFICATION	0.0034842322836296244	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999911645252696	WITHOUT_CLASSIFICATION	8.835474730469188E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9991248429999187	WITHOUT_CLASSIFICATION	8.751570000812291E-4	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999836573871533	WITHOUT_CLASSIFICATION	1.6342612846617418E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997309385589841	WITHOUT_CLASSIFICATION	2.690614410158769E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999657882541151	WITHOUT_CLASSIFICATION	3.421174588487231E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999657882541151	WITHOUT_CLASSIFICATION	3.421174588487231E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9988689230865418	WITHOUT_CLASSIFICATION	0.0011310769134581227	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999908926961915	WITHOUT_CLASSIFICATION	9.107303808605653E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999908926961915	WITHOUT_CLASSIFICATION	9.107303808605653E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999817410720373	WITHOUT_CLASSIFICATION	1.8258927962709323E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999765330122604	WITHOUT_CLASSIFICATION	2.3466987739653854E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999715670296678	WITHOUT_CLASSIFICATION	2.8432970332168847E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999939573355142	WITHOUT_CLASSIFICATION	6.042664485841639E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9985480574121137	WITHOUT_CLASSIFICATION	0.0014519425878862955	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999950744112744	WITHOUT_CLASSIFICATION	4.925588725591743E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999267245145994	WITHOUT_CLASSIFICATION	7.327548540056466E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999487816667199	WITHOUT_CLASSIFICATION	5.1218333280204476E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9980138347615415	WITHOUT_CLASSIFICATION	0.001986165238458502	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999406866926817	WITHOUT_CLASSIFICATION	5.931330731839515E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9133839569533313	WITHOUT_CLASSIFICATION	0.08661604304666876	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998954895697487	WITHOUT_CLASSIFICATION	0.0010451043025130017	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998954895697487	WITHOUT_CLASSIFICATION	0.0010451043025130017	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998954895697487	WITHOUT_CLASSIFICATION	0.0010451043025130017	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998954895697487	WITHOUT_CLASSIFICATION	0.0010451043025130017	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999796434077601	WITHOUT_CLASSIFICATION	2.035659223990562E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998317802501813	WITHOUT_CLASSIFICATION	1.6821974981863472E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9992227832758843	WITHOUT_CLASSIFICATION	7.772167241156956E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9995551550792201	WITHOUT_CLASSIFICATION	4.448449207799019E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9996360733681431	WITHOUT_CLASSIFICATION	3.6392663185692636E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999778483863003	WITHOUT_CLASSIFICATION	2.215161369973984E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995628712379693	WITHOUT_CLASSIFICATION	4.371287620307555E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999170980391803	WITHOUT_CLASSIFICATION	8.290196081972313E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9975013748317724	WITHOUT_CLASSIFICATION	0.002498625168227603	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998668885810209	WITHOUT_CLASSIFICATION	1.331114189791698E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993612412954505	WITHOUT_CLASSIFICATION	6.387587045494658E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999507562295	WITHOUT_CLASSIFICATION	4.9243770469193116E-8	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.6066094588042754	IMPLEMENTATION	0.39339054119572464	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999810290577889	WITHOUT_CLASSIFICATION	1.8970942211092066E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993612412954505	WITHOUT_CLASSIFICATION	6.387587045494658E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9368440988628797	WITHOUT_CLASSIFICATION	0.06315590113712041	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999432016339472	WITHOUT_CLASSIFICATION	5.679836605278462E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987211161235	WITHOUT_CLASSIFICATION	1.2788838764503252E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999767110394326	WITHOUT_CLASSIFICATION	2.3288960567309418E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999808434219031	WITHOUT_CLASSIFICATION	1.915657809690391E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9996180159270207	WITHOUT_CLASSIFICATION	3.8198407297937323E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999895694093557	WITHOUT_CLASSIFICATION	1.0430590644256562E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999521206559111	WITHOUT_CLASSIFICATION	4.787934408893819E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974638677857	WITHOUT_CLASSIFICATION	2.5361322142753593E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999977742347017	WITHOUT_CLASSIFICATION	2.2257652981683826E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974638677857	WITHOUT_CLASSIFICATION	2.5361322142753593E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999941191020421	WITHOUT_CLASSIFICATION	5.880897957926152E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998882165688133	WITHOUT_CLASSIFICATION	1.1178343118661034E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7407528960657332	WITHOUT_CLASSIFICATION	0.25924710393426675	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999844263925737	WITHOUT_CLASSIFICATION	1.5573607426248082E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998882806249888	WITHOUT_CLASSIFICATION	1.1171937501120248E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998051308382	WITHOUT_CLASSIFICATION	1.948691618044039E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999500312286097	WITHOUT_CLASSIFICATION	4.9968771390360266E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999881317358305	WITHOUT_CLASSIFICATION	1.1868264169554376E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999500312286097	WITHOUT_CLASSIFICATION	4.9968771390360266E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999827928883233	WITHOUT_CLASSIFICATION	1.7207111676740023E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999941367592057	WITHOUT_CLASSIFICATION	5.863240794384257E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999486356971452	WITHOUT_CLASSIFICATION	5.136430285476853E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999961487331914	WITHOUT_CLASSIFICATION	3.8512668085763896E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998051308382	WITHOUT_CLASSIFICATION	1.948691618044039E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999881317358305	WITHOUT_CLASSIFICATION	1.1868264169554376E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999827928883233	WITHOUT_CLASSIFICATION	1.7207111676740023E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996237400987652	WITHOUT_CLASSIFICATION	3.762599012347846E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9990770649294508	WITHOUT_CLASSIFICATION	9.229350705490435E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9994264127678231	WITHOUT_CLASSIFICATION	5.735872321769566E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9997277151141837	WITHOUT_CLASSIFICATION	2.722848858163067E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994095476415328	WITHOUT_CLASSIFICATION	5.904523584673093E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999969022711807	WITHOUT_CLASSIFICATION	3.0977288193067736E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313470859749	WITHOUT_CLASSIFICATION	6.865291402516814E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999941367592057	WITHOUT_CLASSIFICATION	5.863240794384257E-6	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9816228377815984	WITHOUT_CLASSIFICATION	0.018377162218401515	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999026025253337	WITHOUT_CLASSIFICATION	9.739747466628482E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999655269646862	WITHOUT_CLASSIFICATION	3.447303531384161E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313470859749	WITHOUT_CLASSIFICATION	6.865291402516814E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999892247722732	WITHOUT_CLASSIFICATION	1.0775227726801976E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313470859749	WITHOUT_CLASSIFICATION	6.865291402516814E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999774070542788	WITHOUT_CLASSIFICATION	2.2592945721181664E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999235216886577	WITHOUT_CLASSIFICATION	7.647831134223159E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9984851115491079	WITHOUT_CLASSIFICATION	0.0015148884508920338	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9976752408064647	WITHOUT_CLASSIFICATION	0.002324759193535268	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999688331844343	WITHOUT_CLASSIFICATION	3.116681556578575E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997416837227294	WITHOUT_CLASSIFICATION	2.583162772705981E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998601815954615	WITHOUT_CLASSIFICATION	1.3981840453849203E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999853393249137	WITHOUT_CLASSIFICATION	1.4660675086233175E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996268418070038	WITHOUT_CLASSIFICATION	3.7315819299618463E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999024244895104	WITHOUT_CLASSIFICATION	9.757551048959869E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999851294222633	WITHOUT_CLASSIFICATION	1.4870577736697058E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999023912523005	WITHOUT_CLASSIFICATION	9.760874769947156E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9990800750478371	WITHOUT_CLASSIFICATION	9.199249521629307E-4	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9989910360870039	WITHOUT_CLASSIFICATION	0.001008963912996077	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999911469285864	WITHOUT_CLASSIFICATION	8.853071413676637E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999940452766625	WITHOUT_CLASSIFICATION	5.954723337511931E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999982857822635	WITHOUT_CLASSIFICATION	1.7142177365232925E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999938957453429	WITHOUT_CLASSIFICATION	6.1042546571964425E-6	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999253940211	WITHOUT_CLASSIFICATION	7.460597888595445E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999801373670244	WITHOUT_CLASSIFICATION	1.9862632975642587E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998578982242364	WITHOUT_CLASSIFICATION	1.4210177576347462E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998578982242364	WITHOUT_CLASSIFICATION	1.4210177576347462E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999896866012455	WITHOUT_CLASSIFICATION	1.0313398754372587E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999991671667247	WITHOUT_CLASSIFICATION	8.32833275297897E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.999955124291911	WITHOUT_CLASSIFICATION	4.4875708088943836E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997395138466	WITHOUT_CLASSIFICATION	2.6048615346366736E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999865144121492	WITHOUT_CLASSIFICATION	1.348558785080926E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999638570829776	WITHOUT_CLASSIFICATION	3.6142917022309766E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997703834761866	WITHOUT_CLASSIFICATION	2.2961652381339173E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999995270273461	WITHOUT_CLASSIFICATION	4.7297265391251274E-7	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9934578546915243	WITHOUT_CLASSIFICATION	0.006542145308475757	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999749355129203	WITHOUT_CLASSIFICATION	2.5064487079797163E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998236432604505	WITHOUT_CLASSIFICATION	1.763567395494822E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9970202794219928	WITHOUT_CLASSIFICATION	0.0029797205780073034	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989303888400287	WITHOUT_CLASSIFICATION	0.0010696111599712732	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999522647259645	WITHOUT_CLASSIFICATION	4.7735274035423486E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999879639196871	WITHOUT_CLASSIFICATION	1.203608031279949E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997204030003108	WITHOUT_CLASSIFICATION	2.7959699968914376E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9984812263656865	WITHOUT_CLASSIFICATION	0.001518773634313531	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9984812263656865	WITHOUT_CLASSIFICATION	0.001518773634313531	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999729995626303	WITHOUT_CLASSIFICATION	2.700043736964191E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999853393249137	WITHOUT_CLASSIFICATION	1.4660675086233175E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9993827246066437	WITHOUT_CLASSIFICATION	6.172753933562812E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996844735130598	WITHOUT_CLASSIFICATION	3.1552648694025857E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999179462964802	WITHOUT_CLASSIFICATION	8.205370351978377E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999952709695815	WITHOUT_CLASSIFICATION	4.729030418379456E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998589077104734	WITHOUT_CLASSIFICATION	1.4109228952658584E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999552746717567	WITHOUT_CLASSIFICATION	4.472532824338216E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999920237366055	WITHOUT_CLASSIFICATION	7.976263394610996E-6	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997928542750713	WITHOUT_CLASSIFICATION	2.0714572492872908E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9998108727932125	WITHOUT_CLASSIFICATION	1.8912720678753868E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999994828628629	WITHOUT_CLASSIFICATION	5.171371370990959E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999993013079226	WITHOUT_CLASSIFICATION	6.986920774030187E-7	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996568598024	WITHOUT_CLASSIFICATION	3.4314019749294534E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9991463885547295	WITHOUT_CLASSIFICATION	8.536114452705033E-4	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999785007618823	WITHOUT_CLASSIFICATION	2.1499238117699053E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999981533336096	WITHOUT_CLASSIFICATION	1.8466663903245137E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999975137335806	WITHOUT_CLASSIFICATION	2.4862664193295734E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999039983759559	WITHOUT_CLASSIFICATION	9.600162404411049E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999889359032273	WITHOUT_CLASSIFICATION	1.1064096772601533E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999976204221699	WITHOUT_CLASSIFICATION	2.3795778301099294E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999892353517937	WITHOUT_CLASSIFICATION	1.0764648206165546E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996438757773701	WITHOUT_CLASSIFICATION	3.561242226298163E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999633351482986	WITHOUT_CLASSIFICATION	3.666485170133055E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999961714491452	WITHOUT_CLASSIFICATION	3.828550854769931E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999987951557745	WITHOUT_CLASSIFICATION	1.2048442254425045E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.99963916243717	WITHOUT_CLASSIFICATION	3.6083756282997417E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9367294197915667	WITHOUT_CLASSIFICATION	0.06327058020843325	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998958505607914	WITHOUT_CLASSIFICATION	1.041494392085803E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999384649202315	WITHOUT_CLASSIFICATION	6.15350797684965E-4	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999285377672815	WITHOUT_CLASSIFICATION	7.146223271847569E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999289979409872	WITHOUT_CLASSIFICATION	7.10020590128493E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999675228165371	WITHOUT_CLASSIFICATION	3.2477183462913116E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999671529242377	WITHOUT_CLASSIFICATION	3.284707576222243E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999122673592119	WITHOUT_CLASSIFICATION	8.773264078802916E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998711731157973	WITHOUT_CLASSIFICATION	1.2882688420272367E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999868984348144	WITHOUT_CLASSIFICATION	1.310156518567957E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998684019935885	WITHOUT_CLASSIFICATION	1.3159800641159757E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998684019935885	WITHOUT_CLASSIFICATION	1.3159800641159757E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999181564478274	WITHOUT_CLASSIFICATION	8.184355217264105E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999800780968208	WITHOUT_CLASSIFICATION	1.9921903179138098E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999858213942686	WITHOUT_CLASSIFICATION	1.4178605731493246E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999858213942686	WITHOUT_CLASSIFICATION	1.4178605731493246E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999760729294459	WITHOUT_CLASSIFICATION	2.392707055412797E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989702157816825	WITHOUT_CLASSIFICATION	0.001029784218317455	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998369182209913	WITHOUT_CLASSIFICATION	1.63081779008693E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999523842845	WITHOUT_CLASSIFICATION	4.761571550392017E-7	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999538036594503	WITHOUT_CLASSIFICATION	4.6196340549780436E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999929880271093	WITHOUT_CLASSIFICATION	7.011972890652569E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999929880271093	WITHOUT_CLASSIFICATION	7.011972890652569E-6	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9997992800017792	WITHOUT_CLASSIFICATION	2.007199982208345E-4	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9997712938251236	WITHOUT_CLASSIFICATION	2.2870617487631912E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999732129142373	WITHOUT_CLASSIFICATION	2.6787085762696556E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999732129142373	WITHOUT_CLASSIFICATION	2.6787085762696556E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9996587400630097	WITHOUT_CLASSIFICATION	3.412599369902554E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999963484203388	WITHOUT_CLASSIFICATION	3.651579661199122E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998195785097341	WITHOUT_CLASSIFICATION	1.8042149026592034E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999875035639056	WITHOUT_CLASSIFICATION	1.2496436094402365E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999979030451036	WITHOUT_CLASSIFICATION	2.096954896348172E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997394928375121	WITHOUT_CLASSIFICATION	2.6050716248792464E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999527782364283	WITHOUT_CLASSIFICATION	4.722176357177401E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9998037479829206	WITHOUT_CLASSIFICATION	1.9625201707943664E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999851335371724	WITHOUT_CLASSIFICATION	1.4866462827539135E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999894835458715	WITHOUT_CLASSIFICATION	1.0516454128460035E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9966939541134524	WITHOUT_CLASSIFICATION	0.0033060458865475945	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9613799087947059	WITHOUT_CLASSIFICATION	0.03862009120529414	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.5155982574997171	IMPLEMENTATION	0.4844017425002829	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999985694996919	WITHOUT_CLASSIFICATION	1.4305003081529396E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.999772253987068	WITHOUT_CLASSIFICATION	2.2774601293200033E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999906122996399	WITHOUT_CLASSIFICATION	9.387700360033226E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999683169044358	WITHOUT_CLASSIFICATION	3.168309556423844E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9956156790548869	WITHOUT_CLASSIFICATION	0.0043843209451130535	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9986182028719941	WITHOUT_CLASSIFICATION	0.0013817971280058348	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999802770568771	WITHOUT_CLASSIFICATION	1.972294312290641E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9992332997736356	WITHOUT_CLASSIFICATION	7.66700226364375E-4	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997307100237854	WITHOUT_CLASSIFICATION	2.692899762145274E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9943063763438986	WITHOUT_CLASSIFICATION	0.00569362365610129	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999955091670398	WITHOUT_CLASSIFICATION	4.490832960197212E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.999955097257302	WITHOUT_CLASSIFICATION	4.490274269801E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999911920450798	WITHOUT_CLASSIFICATION	8.807954920274641E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999856310745404	WITHOUT_CLASSIFICATION	1.4368925459578563E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999987372680317	WITHOUT_CLASSIFICATION	1.2627319683452124E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999580599943484	WITHOUT_CLASSIFICATION	4.194000565159636E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999500925911459	WITHOUT_CLASSIFICATION	4.990740885409862E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999496394449309	WITHOUT_CLASSIFICATION	5.0360555069131486E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999961247310084	WITHOUT_CLASSIFICATION	3.875268991570833E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999414274633008	WITHOUT_CLASSIFICATION	5.8572536699226566E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997691395353674	WITHOUT_CLASSIFICATION	2.3086046463248632E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999224855241454	WITHOUT_CLASSIFICATION	7.751447585457886E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999968868156962	WITHOUT_CLASSIFICATION	3.113184303857786E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999671043923455	WITHOUT_CLASSIFICATION	3.2895607654519865E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999782411132462	WITHOUT_CLASSIFICATION	2.1758886753795356E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9994451587995484	WITHOUT_CLASSIFICATION	5.548412004515855E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999090164882927	WITHOUT_CLASSIFICATION	9.098351170730764E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998401188597796	WITHOUT_CLASSIFICATION	1.5988114022025097E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997564066453217	WITHOUT_CLASSIFICATION	2.4359335467826607E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999028211058774	WITHOUT_CLASSIFICATION	9.717889412264571E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999013620041872	WITHOUT_CLASSIFICATION	9.863799581270953E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9958006703313671	WITHOUT_CLASSIFICATION	0.004199329668632878	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998510543336746	WITHOUT_CLASSIFICATION	1.489456663253506E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999434689154627	WITHOUT_CLASSIFICATION	5.653108453737203E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997856906766728	WITHOUT_CLASSIFICATION	2.1430932332716578E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.5334822299181218	WITHOUT_CLASSIFICATION	0.46651777008187806	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999616111988899	WITHOUT_CLASSIFICATION	3.838880111006406E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999859740843929	WITHOUT_CLASSIFICATION	1.4025915606931841E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999912776951302	WITHOUT_CLASSIFICATION	8.722304869808705E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999853307211579	WITHOUT_CLASSIFICATION	1.4669278842113993E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999575273723296	WITHOUT_CLASSIFICATION	4.247262767044863E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9991739754811017	WITHOUT_CLASSIFICATION	8.260245188983551E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999994131232004	WITHOUT_CLASSIFICATION	5.868767996924594E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997827297505524	WITHOUT_CLASSIFICATION	2.1727024944761538E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997827297505524	WITHOUT_CLASSIFICATION	2.1727024944761538E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999998894146	WITHOUT_CLASSIFICATION	1.1058543526156936E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999379104680892	WITHOUT_CLASSIFICATION	6.208953191086404E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999987738751586	WITHOUT_CLASSIFICATION	1.2261248413952101E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999983351699708	WITHOUT_CLASSIFICATION	1.6648300291692295E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999990045138099	WITHOUT_CLASSIFICATION	9.954861901147092E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999867201564691	WITHOUT_CLASSIFICATION	1.327984353102596E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999717941736022	WITHOUT_CLASSIFICATION	2.8205826397843706E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999669235585	WITHOUT_CLASSIFICATION	3.307644143411065E-8	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999939799856278	WITHOUT_CLASSIFICATION	6.0200143723074814E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999956716323831	WITHOUT_CLASSIFICATION	4.328367616889885E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99991080112372	WITHOUT_CLASSIFICATION	8.919887628010121E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998799268854153	WITHOUT_CLASSIFICATION	1.2007311458473643E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999886404252	WITHOUT_CLASSIFICATION	1.1359574794604861E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9995111965547497	WITHOUT_CLASSIFICATION	4.888034452502747E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999441055919346	WITHOUT_CLASSIFICATION	5.5894408065528264E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999441055919346	WITHOUT_CLASSIFICATION	5.5894408065528264E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999957600241054	WITHOUT_CLASSIFICATION	4.2399758946585225E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999746405656796	WITHOUT_CLASSIFICATION	2.535943432033263E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999336333137521	WITHOUT_CLASSIFICATION	6.636668624788974E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999949279737584	WITHOUT_CLASSIFICATION	5.072026241567387E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999764394562425	WITHOUT_CLASSIFICATION	2.3560543757524824E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999482607347636	WITHOUT_CLASSIFICATION	5.173926523641406E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999758927833626	WITHOUT_CLASSIFICATION	2.4107216637374602E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999785530802863	WITHOUT_CLASSIFICATION	2.144691971366097E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999927673957524	WITHOUT_CLASSIFICATION	7.23260424757218E-6	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999555562730038	WITHOUT_CLASSIFICATION	4.444372699619981E-4	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.998327085995984	WITHOUT_CLASSIFICATION	0.0016729140040160494	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9994664489569955	WITHOUT_CLASSIFICATION	5.33551043004417E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999946861682972	WITHOUT_CLASSIFICATION	5.313831702752169E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997915087912127	WITHOUT_CLASSIFICATION	2.0849120878731049E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999021927073277	WITHOUT_CLASSIFICATION	9.780729267229309E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990988684254481	WITHOUT_CLASSIFICATION	9.011315745518206E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999958735766923	WITHOUT_CLASSIFICATION	4.126423307676026E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999986161217133	WITHOUT_CLASSIFICATION	1.3838782866829095E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999687129868351	WITHOUT_CLASSIFICATION	3.128701316487671E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999970156601078	WITHOUT_CLASSIFICATION	2.984339892147727E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998151440733	WITHOUT_CLASSIFICATION	1.8485592672960262E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999997706816278	WITHOUT_CLASSIFICATION	2.2931837220782184E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999808216989244	WITHOUT_CLASSIFICATION	1.9178301075568785E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9989146203291926	WITHOUT_CLASSIFICATION	0.0010853796708073422	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996186294477224	WITHOUT_CLASSIFICATION	3.813705522774979E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9992705914109492	WITHOUT_CLASSIFICATION	7.294085890508113E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999141256514665	WITHOUT_CLASSIFICATION	8.587434853356326E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999355479372497	WITHOUT_CLASSIFICATION	6.445206275027732E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999930056941278	WITHOUT_CLASSIFICATION	6.994305872202417E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999936927094591	WITHOUT_CLASSIFICATION	6.307290540786751E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999945112725561	WITHOUT_CLASSIFICATION	5.488727443887332E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999724741521663	WITHOUT_CLASSIFICATION	2.7525847833782294E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999977954629239	WITHOUT_CLASSIFICATION	2.204537076141397E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9930282417309128	WITHOUT_CLASSIFICATION	0.006971758269087271	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9859574162830764	WITHOUT_CLASSIFICATION	0.014042583716923629	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999450723496387	WITHOUT_CLASSIFICATION	5.4927650361379244E-5	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999976261134549	WITHOUT_CLASSIFICATION	2.3738865451030945E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999986914713278	WITHOUT_CLASSIFICATION	1.3085286722251001E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999197810723524	WITHOUT_CLASSIFICATION	8.02189276476287E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999993777088034	WITHOUT_CLASSIFICATION	6.222911965010503E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994339743742371	WITHOUT_CLASSIFICATION	5.660256257629452E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994339743742371	WITHOUT_CLASSIFICATION	5.660256257629452E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999980176320885	WITHOUT_CLASSIFICATION	1.982367911572672E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999759074026361	WITHOUT_CLASSIFICATION	2.409259736387235E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9907289480461121	WITHOUT_CLASSIFICATION	0.00927105195388777	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999768440713287	WITHOUT_CLASSIFICATION	2.3155928671238774E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9461974334970489	WITHOUT_CLASSIFICATION	0.05380256650295117	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999973552899436	WITHOUT_CLASSIFICATION	2.6447100564477966E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999640683576272	WITHOUT_CLASSIFICATION	3.5931642372782115E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997169366303743	WITHOUT_CLASSIFICATION	2.830633696256991E-4	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999993401752816	WITHOUT_CLASSIFICATION	6.5982471840150025E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998841099702267	WITHOUT_CLASSIFICATION	1.1589002977332647E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784259385363	WITHOUT_CLASSIFICATION	1.2157406146372063E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999683420595316	WITHOUT_CLASSIFICATION	3.165794046846507E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999990145282261	WITHOUT_CLASSIFICATION	9.854717738698682E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999981009892033	WITHOUT_CLASSIFICATION	1.8990107966757518E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9892930228653767	WITHOUT_CLASSIFICATION	0.010706977134623395	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999469035334401	WITHOUT_CLASSIFICATION	5.309646655988744E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999833991868786	WITHOUT_CLASSIFICATION	1.66008131214011E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999919602495195	WITHOUT_CLASSIFICATION	8.039750480470732E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999914471868987	WITHOUT_CLASSIFICATION	8.552813101315907E-6	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999970196567866	WITHOUT_CLASSIFICATION	2.980343213396619E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996897350822	WITHOUT_CLASSIFICATION	3.1026491774687545E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9926070500945334	WITHOUT_CLASSIFICATION	0.007392949905466599	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9987431482819571	WITHOUT_CLASSIFICATION	0.0012568517180428992	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996782464164649	WITHOUT_CLASSIFICATION	3.217535835351082E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999590003724996	WITHOUT_CLASSIFICATION	4.099962750037229E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999189682075571	WITHOUT_CLASSIFICATION	8.103179244289143E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997700322061942	WITHOUT_CLASSIFICATION	2.2996779380582855E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.99996591569383	WITHOUT_CLASSIFICATION	3.408430616992145E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.996647219678702	WITHOUT_CLASSIFICATION	0.003352780321297984	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999709520784985	WITHOUT_CLASSIFICATION	2.9047921501514606E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997530673866338	WITHOUT_CLASSIFICATION	2.4693261336613826E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.99999782814069	WITHOUT_CLASSIFICATION	2.171859310006565E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999989027216939	WITHOUT_CLASSIFICATION	1.0972783061518183E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999938072038568	WITHOUT_CLASSIFICATION	6.192796143222079E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999382605796	WITHOUT_CLASSIFICATION	6.173942040148483E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999720326894775	WITHOUT_CLASSIFICATION	2.7967310522459358E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995298702099	WITHOUT_CLASSIFICATION	4.7012979004191534E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999960701072984	WITHOUT_CLASSIFICATION	3.929892701648421E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998720228617146	WITHOUT_CLASSIFICATION	1.279771382854194E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.99930822981346	WITHOUT_CLASSIFICATION	6.91770186539909E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999666496393582	WITHOUT_CLASSIFICATION	3.3350360641675815E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994073182036	WITHOUT_CLASSIFICATION	5.926817964890472E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999591089339424	WITHOUT_CLASSIFICATION	4.089106605767866E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999541383101719	WITHOUT_CLASSIFICATION	4.5861689828119845E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999667601629945	WITHOUT_CLASSIFICATION	3.32398370055657E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9920121867409336	WITHOUT_CLASSIFICATION	0.007987813259066407	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997499263116	WITHOUT_CLASSIFICATION	2.5007368848977774E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999886404252	WITHOUT_CLASSIFICATION	1.1359574794604861E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.99999489133223	WITHOUT_CLASSIFICATION	5.108667770071248E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.99999943733737	WITHOUT_CLASSIFICATION	5.626626299291146E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998035913663379	WITHOUT_CLASSIFICATION	1.9640863366200754E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999115367791	WITHOUT_CLASSIFICATION	8.846322083729455E-8	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999876669564	WITHOUT_CLASSIFICATION	1.2333043603286888E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999988157199818	WITHOUT_CLASSIFICATION	1.1842800181950759E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999144375621506	WITHOUT_CLASSIFICATION	8.55624378493453E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.5849557453270687	WITHOUT_CLASSIFICATION	0.4150442546729313	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999981937906905	WITHOUT_CLASSIFICATION	1.8062093093870561E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9962541248395719	WITHOUT_CLASSIFICATION	0.0037458751604280173	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999221402280302	WITHOUT_CLASSIFICATION	7.785977196989502E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993554355558618	WITHOUT_CLASSIFICATION	6.445644441381936E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999972292284384	WITHOUT_CLASSIFICATION	2.7707715616157755E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9951344884200468	WITHOUT_CLASSIFICATION	0.004865511579953194	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808698420947	WITHOUT_CLASSIFICATION	1.91301579054092E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996174982122357	WITHOUT_CLASSIFICATION	3.8250178776429617E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9995501019825357	WITHOUT_CLASSIFICATION	4.498980174642374E-4	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999990315886828	WITHOUT_CLASSIFICATION	9.684113173044922E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808698420947	WITHOUT_CLASSIFICATION	1.91301579054092E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.7736860099500719	WITHOUT_CLASSIFICATION	0.226313990049928	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999621506317314	WITHOUT_CLASSIFICATION	3.784936826868154E-5	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999996963077426	WITHOUT_CLASSIFICATION	3.0369225739261527E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9996882674021823	WITHOUT_CLASSIFICATION	3.1173259781777836E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999952268515132	WITHOUT_CLASSIFICATION	4.773148486796354E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99995227142319	WITHOUT_CLASSIFICATION	4.772857681004404E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999990533710077	WITHOUT_CLASSIFICATION	9.466289922245066E-7	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9993911780390076	WITHOUT_CLASSIFICATION	6.08821960992345E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999989044234141	WITHOUT_CLASSIFICATION	1.0955765858351167E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9997399971670924	WITHOUT_CLASSIFICATION	2.60002832907694E-4	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997652013569861	WITHOUT_CLASSIFICATION	2.3479864301403E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9501097123834912	WITHOUT_CLASSIFICATION	0.04989028761650887	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999596494480058	WITHOUT_CLASSIFICATION	4.035055199419962E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9987699577867447	WITHOUT_CLASSIFICATION	0.0012300422132552372	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9996566611679479	WITHOUT_CLASSIFICATION	3.433388320520925E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996438757773701	WITHOUT_CLASSIFICATION	3.561242226298163E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999971313764661	WITHOUT_CLASSIFICATION	2.8686235339425843E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999992038369209	WITHOUT_CLASSIFICATION	7.961630791091258E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999666058118915	WITHOUT_CLASSIFICATION	3.339418810849918E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9984767857799691	WITHOUT_CLASSIFICATION	0.0015232142200309123	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9995433940863476	WITHOUT_CLASSIFICATION	4.566059136524557E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999952472080181	WITHOUT_CLASSIFICATION	4.7527919818017015E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9964888519882003	WITHOUT_CLASSIFICATION	0.0035111480117997725	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999007911	WITHOUT_CLASSIFICATION	9.920886392504477E-11	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999951436404568	WITHOUT_CLASSIFICATION	4.856359543189293E-6	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999238781055331	WITHOUT_CLASSIFICATION	7.612189446689924E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9993988420373944	WITHOUT_CLASSIFICATION	6.011579626056312E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999720592608177	WITHOUT_CLASSIFICATION	2.794073918229787E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9987029606579052	WITHOUT_CLASSIFICATION	0.0012970393420947616	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.999289533977333	WITHOUT_CLASSIFICATION	7.104660226669097E-4	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999721941470919	WITHOUT_CLASSIFICATION	2.7805852908180933E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999009235159391	WITHOUT_CLASSIFICATION	9.907648406097331E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999952286129785	WITHOUT_CLASSIFICATION	4.771387021504234E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999978014930507	WITHOUT_CLASSIFICATION	2.198506949298601E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999998121959844	WITHOUT_CLASSIFICATION	1.8780401569594578E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999212843046	WITHOUT_CLASSIFICATION	7.87156953204349E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998570295998	WITHOUT_CLASSIFICATION	1.4297040025578194E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9993561112315507	WITHOUT_CLASSIFICATION	6.438887684493081E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999607998641872	WITHOUT_CLASSIFICATION	3.920013581292178E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996144687280376	WITHOUT_CLASSIFICATION	3.8553127196238983E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999100410897669	WITHOUT_CLASSIFICATION	8.995891023307436E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999100410897669	WITHOUT_CLASSIFICATION	8.995891023307436E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999935943843397	WITHOUT_CLASSIFICATION	6.405615660297951E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999966951871885	WITHOUT_CLASSIFICATION	3.30481281148835E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999635422862373	WITHOUT_CLASSIFICATION	3.64577137626498E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5073016759173333	WITHOUT_CLASSIFICATION	0.4926983240826668	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999911645252696	WITHOUT_CLASSIFICATION	8.835474730469188E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999911645252696	WITHOUT_CLASSIFICATION	8.835474730469188E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9997806625939728	WITHOUT_CLASSIFICATION	2.193374060273369E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9990925385078926	WITHOUT_CLASSIFICATION	9.074614921073444E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999893024041501	WITHOUT_CLASSIFICATION	1.0697595849915748E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9970027862110473	WITHOUT_CLASSIFICATION	0.0029972137889527893	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9855556575227657	WITHOUT_CLASSIFICATION	0.014444342477234293	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999787499896554	WITHOUT_CLASSIFICATION	2.1250010344554377E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999263615736134	WITHOUT_CLASSIFICATION	7.363842638664927E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999344602421353	WITHOUT_CLASSIFICATION	6.553975786465128E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999527035919704	WITHOUT_CLASSIFICATION	4.7296408029571945E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865216088297	WITHOUT_CLASSIFICATION	1.3478391170242272E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865216088297	WITHOUT_CLASSIFICATION	1.3478391170242272E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995338579730779	WITHOUT_CLASSIFICATION	4.6614202692212643E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997412148377827	WITHOUT_CLASSIFICATION	2.587851622173286E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997645437533875	WITHOUT_CLASSIFICATION	2.3545624661241966E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999765096419482	WITHOUT_CLASSIFICATION	2.3490358051798623E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999064378569804	WITHOUT_CLASSIFICATION	9.356214301957178E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903908763585	WITHOUT_CLASSIFICATION	9.609123641394287E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247813181642	WITHOUT_CLASSIFICATION	7.521868183582589E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999975328824824	WITHOUT_CLASSIFICATION	2.467117517718029E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999601688276265	WITHOUT_CLASSIFICATION	3.9831172373619134E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997998873583774	WITHOUT_CLASSIFICATION	2.001126416225085E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999959080017316	WITHOUT_CLASSIFICATION	4.0919982683960245E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9997399971670924	WITHOUT_CLASSIFICATION	2.60002832907694E-4	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999915721084937	WITHOUT_CLASSIFICATION	8.42789150631513E-6	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9997364854825311	WITHOUT_CLASSIFICATION	2.635145174688608E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992982259932	WITHOUT_CLASSIFICATION	7.017740068519084E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998622682734754	WITHOUT_CLASSIFICATION	1.377317265246364E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997534230034388	WITHOUT_CLASSIFICATION	2.465769965611725E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996843376302117	WITHOUT_CLASSIFICATION	3.1566236978824004E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9989945243049994	WITHOUT_CLASSIFICATION	0.001005475695000656	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997221429884428	WITHOUT_CLASSIFICATION	2.7785701155719347E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9991999245083666	WITHOUT_CLASSIFICATION	8.000754916335253E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.997945980938289	WITHOUT_CLASSIFICATION	0.002054019061711021	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.997945980938289	WITHOUT_CLASSIFICATION	0.002054019061711021	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993612412954505	WITHOUT_CLASSIFICATION	6.387587045494658E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999986195450451	WITHOUT_CLASSIFICATION	1.3804549548330514E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998954474971301	WITHOUT_CLASSIFICATION	0.0010455250286990076	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996270945785026	WITHOUT_CLASSIFICATION	3.7290542149737203E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997456993012237	WITHOUT_CLASSIFICATION	2.543006987762965E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999342346675776	WITHOUT_CLASSIFICATION	6.576533242238722E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999844263925737	WITHOUT_CLASSIFICATION	1.5573607426248082E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.99999999988404	WITHOUT_CLASSIFICATION	1.159599800127568E-10	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996237400987652	WITHOUT_CLASSIFICATION	3.762599012347846E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999847247171283	WITHOUT_CLASSIFICATION	1.5275282871641785E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313470859749	WITHOUT_CLASSIFICATION	6.865291402516814E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997468252747779	WITHOUT_CLASSIFICATION	2.531747252222147E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999928363056412	WITHOUT_CLASSIFICATION	7.1636943587462045E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999965664337234	WITHOUT_CLASSIFICATION	3.4335662765650477E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999991639892828	WITHOUT_CLASSIFICATION	8.360107172262397E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999047030213145	WITHOUT_CLASSIFICATION	9.52969786854282E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999609338895241	WITHOUT_CLASSIFICATION	3.906611047585111E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999178846358576	WITHOUT_CLASSIFICATION	8.211536414246023E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9982410066093851	WITHOUT_CLASSIFICATION	0.0017589933906149988	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999588122254	WITHOUT_CLASSIFICATION	4.118777465126162E-8	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999984186686725	WITHOUT_CLASSIFICATION	1.5813313274985857E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999955476937	WITHOUT_CLASSIFICATION	4.452306360417768E-9	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998195785097341	WITHOUT_CLASSIFICATION	1.8042149026592034E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999994392142518	WITHOUT_CLASSIFICATION	5.6078574820222065E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999756835206804	WITHOUT_CLASSIFICATION	2.4316479319596203E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999756835206804	WITHOUT_CLASSIFICATION	2.4316479319596203E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998100309620759	WITHOUT_CLASSIFICATION	1.8996903792406296E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9960796871266588	WITHOUT_CLASSIFICATION	0.003920312873341021	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999989897055176	WITHOUT_CLASSIFICATION	1.010294482393793E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999860505930999	WITHOUT_CLASSIFICATION	1.3949406900038794E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999894666486745	WITHOUT_CLASSIFICATION	1.0533351325518476E-5	IMPLEMENTATION
