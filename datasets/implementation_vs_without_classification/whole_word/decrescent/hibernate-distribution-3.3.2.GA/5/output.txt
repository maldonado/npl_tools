// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992815827116059	WITHOUT_CLASSIFICATION	7.184172883940307E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992815827116059	WITHOUT_CLASSIFICATION	7.184172883940307E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.985628859785605	WITHOUT_CLASSIFICATION	0.014371140214395088	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.990515377237322	WITHOUT_CLASSIFICATION	0.009484622762677987	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9471325368700498	WITHOUT_CLASSIFICATION	0.052867463129950186	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9074092541573852	IMPLEMENTATION	0.09259074584261484	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9963043709229737	WITHOUT_CLASSIFICATION	0.00369562907702633	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7121564990515844	IMPLEMENTATION	0.28784350094841554	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9818549300279837	WITHOUT_CLASSIFICATION	0.018145069972016238	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9514525094530545	WITHOUT_CLASSIFICATION	0.04854749054694554	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999548932902371	WITHOUT_CLASSIFICATION	4.5106709762918656E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9116562235248461	WITHOUT_CLASSIFICATION	0.08834377647515386	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9665385596690995	WITHOUT_CLASSIFICATION	0.033461440330900476	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9665385596690995	WITHOUT_CLASSIFICATION	0.033461440330900476	IMPLEMENTATION
/**	IMPLEMENTATION	0.502432231787048	IMPLEMENTATION	0.49756776821295196	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6314476000470327	IMPLEMENTATION	0.3685523999529673	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999961906316482	IMPLEMENTATION	3.8093683517550227E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.5996325592544256	WITHOUT_CLASSIFICATION	0.40036744074557445	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999948628902813	WITHOUT_CLASSIFICATION	5.1371097187266495E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9046667455294394	WITHOUT_CLASSIFICATION	0.09533325447056071	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9268240954988165	WITHOUT_CLASSIFICATION	0.07317590450118344	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9955213939812791	WITHOUT_CLASSIFICATION	0.004478606018720873	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9576982918256365	WITHOUT_CLASSIFICATION	0.042301708174363496	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8264182009449872	WITHOUT_CLASSIFICATION	0.17358179905501292	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8264182009449872	WITHOUT_CLASSIFICATION	0.17358179905501292	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7083695253129452	WITHOUT_CLASSIFICATION	0.29163047468705494	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9614168802038575	WITHOUT_CLASSIFICATION	0.03858311979614249	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.753164552248398	IMPLEMENTATION	0.24683544775160204	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9884633834570817	WITHOUT_CLASSIFICATION	0.011536616542918297	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.8163616650539419	IMPLEMENTATION	0.1836383349460581	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9930354920154286	WITHOUT_CLASSIFICATION	0.006964507984571482	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9761201534946576	WITHOUT_CLASSIFICATION	0.023879846505342306	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.99987757205987	WITHOUT_CLASSIFICATION	1.2242794012987918E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9478672572978023	WITHOUT_CLASSIFICATION	0.05213274270219768	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8474133087215817	IMPLEMENTATION	0.15258669127841828	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9346726211290431	WITHOUT_CLASSIFICATION	0.06532737887095683	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9534554608145445	IMPLEMENTATION	0.04654453918545552	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9706011887008357	WITHOUT_CLASSIFICATION	0.029398811299164312	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9908955462385999	WITHOUT_CLASSIFICATION	0.009104453761400207	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9598967197520002	IMPLEMENTATION	0.04010328024799972	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9598967197520002	IMPLEMENTATION	0.04010328024799972	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5848667491256446	WITHOUT_CLASSIFICATION	0.4151332508743553	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999335666712773	WITHOUT_CLASSIFICATION	6.643332872275527E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9986206357634728	WITHOUT_CLASSIFICATION	0.0013793642365271495	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9987258090768654	IMPLEMENTATION	0.0012741909231346624	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9846402701082143	WITHOUT_CLASSIFICATION	0.015359729891785665	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9531075012509919	WITHOUT_CLASSIFICATION	0.0468924987490082	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9933476848436386	WITHOUT_CLASSIFICATION	0.006652315156361416	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9997335588329557	WITHOUT_CLASSIFICATION	2.6644116704427286E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9877516299078641	WITHOUT_CLASSIFICATION	0.012248370092135868	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9970733794590282	WITHOUT_CLASSIFICATION	0.002926620540971907	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.6036993693374652	IMPLEMENTATION	0.39630063066253496	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9492979451469189	WITHOUT_CLASSIFICATION	0.05070205485308111	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9379719427430373	WITHOUT_CLASSIFICATION	0.06202805725696276	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9385438749258108	WITHOUT_CLASSIFICATION	0.061456125074189155	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9761201534946576	WITHOUT_CLASSIFICATION	0.023879846505342306	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9385438749258108	WITHOUT_CLASSIFICATION	0.061456125074189155	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9753134330373493	IMPLEMENTATION	0.024686566962650668	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6417512286196922	IMPLEMENTATION	0.35824877138030764	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9385438749258108	WITHOUT_CLASSIFICATION	0.061456125074189155	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999871211470561	WITHOUT_CLASSIFICATION	1.2878852943932984E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999871211470561	WITHOUT_CLASSIFICATION	1.2878852943932984E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9972212622218076	IMPLEMENTATION	0.002778737778192292	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9982086033873744	WITHOUT_CLASSIFICATION	0.001791396612625679	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997745648784261	WITHOUT_CLASSIFICATION	2.2543512157383876E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999756407724377	WITHOUT_CLASSIFICATION	2.4359227562339694E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998514290289657	WITHOUT_CLASSIFICATION	1.485709710342835E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999690940676499	WITHOUT_CLASSIFICATION	3.090593235005206E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999690940676499	WITHOUT_CLASSIFICATION	3.090593235005206E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999981104631538	WITHOUT_CLASSIFICATION	1.8895368461399903E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998863366190381	WITHOUT_CLASSIFICATION	1.136633809618941E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999591695784522	WITHOUT_CLASSIFICATION	4.08304215477828E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999724989385498	WITHOUT_CLASSIFICATION	2.750106145014429E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999992945362808	WITHOUT_CLASSIFICATION	7.054637191054274E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999992945362808	WITHOUT_CLASSIFICATION	7.054637191054274E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999849251472194	WITHOUT_CLASSIFICATION	1.5074852780695547E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996309260656625	WITHOUT_CLASSIFICATION	3.6907393433752123E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.999935621416849	WITHOUT_CLASSIFICATION	6.43785831509341E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999449825944442	WITHOUT_CLASSIFICATION	5.5017405555794566E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999975903868401	WITHOUT_CLASSIFICATION	2.4096131599412867E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999881130494579	WITHOUT_CLASSIFICATION	1.188695054205248E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999798772146902	WITHOUT_CLASSIFICATION	2.0122785309732883E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992845355261035	WITHOUT_CLASSIFICATION	7.154644738965382E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9996664827821351	WITHOUT_CLASSIFICATION	3.3351721786482896E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999949299240833	WITHOUT_CLASSIFICATION	5.070075916720201E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9998622750216883	WITHOUT_CLASSIFICATION	1.377249783117219E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999893829882783	WITHOUT_CLASSIFICATION	1.0617011721645217E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998122664505809	WITHOUT_CLASSIFICATION	1.877335494192769E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999071448259121	WITHOUT_CLASSIFICATION	9.285517408779121E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.984692048987432	WITHOUT_CLASSIFICATION	0.015307951012567952	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.502432231787048	IMPLEMENTATION	0.49756776821295196	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.502432231787048	IMPLEMENTATION	0.49756776821295196	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999713724374696	WITHOUT_CLASSIFICATION	2.862756253028669E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9995883867499813	WITHOUT_CLASSIFICATION	4.1161325001871685E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999852576199971	WITHOUT_CLASSIFICATION	1.4742380002947961E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998698429145196	WITHOUT_CLASSIFICATION	1.3015708548033252E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999407674439541	WITHOUT_CLASSIFICATION	5.923255604583218E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763962085977	WITHOUT_CLASSIFICATION	1.2360379140237835E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993794038055609	WITHOUT_CLASSIFICATION	6.205961944391057E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9995873171998148	WITHOUT_CLASSIFICATION	4.1268280018520135E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9981038247209366	WITHOUT_CLASSIFICATION	0.0018961752790633785	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9981038247209366	WITHOUT_CLASSIFICATION	0.0018961752790633785	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992436340414813	WITHOUT_CLASSIFICATION	7.563659585187844E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.7131488310687786	WITHOUT_CLASSIFICATION	0.2868511689312214	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998947795460885	WITHOUT_CLASSIFICATION	1.052204539114791E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998430921545107	WITHOUT_CLASSIFICATION	1.5690784548918089E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999810286254666	WITHOUT_CLASSIFICATION	1.8971374533496554E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999973754268544	WITHOUT_CLASSIFICATION	2.624573145621396E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9978894290703468	WITHOUT_CLASSIFICATION	0.0021105709296532376	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999893741060844	WITHOUT_CLASSIFICATION	1.0625893915601444E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9968824346283416	WITHOUT_CLASSIFICATION	0.0031175653716585625	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9995013147918929	WITHOUT_CLASSIFICATION	4.98685208107184E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999399868644555	WITHOUT_CLASSIFICATION	6.001313554440616E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9996668349845457	WITHOUT_CLASSIFICATION	3.331650154543494E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999906403577296	WITHOUT_CLASSIFICATION	9.359642270401326E-5	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9989065318582747	WITHOUT_CLASSIFICATION	0.0010934681417253346	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999908278673209	WITHOUT_CLASSIFICATION	9.172132679112447E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999909641658962	WITHOUT_CLASSIFICATION	9.035834103811586E-6	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999578008341518	WITHOUT_CLASSIFICATION	4.219916584823033E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999807785849005	WITHOUT_CLASSIFICATION	1.9221415099474943E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999725862546162	WITHOUT_CLASSIFICATION	2.741374538379295E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999799132101999	WITHOUT_CLASSIFICATION	2.0086789800170354E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999947537834652	WITHOUT_CLASSIFICATION	5.246216534806534E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999947381024017	WITHOUT_CLASSIFICATION	5.261897598204127E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999814121090962	WITHOUT_CLASSIFICATION	1.8587890903807086E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997518563639047	WITHOUT_CLASSIFICATION	2.481436360952115E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.70290618461864	IMPLEMENTATION	0.29709381538136004	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.99951103545068	WITHOUT_CLASSIFICATION	4.889645493200179E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999764724981705	WITHOUT_CLASSIFICATION	2.352750182955658E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9990638319427777	WITHOUT_CLASSIFICATION	9.361680572223732E-4	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999931934619039	WITHOUT_CLASSIFICATION	6.80653809610711E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999959307971961	WITHOUT_CLASSIFICATION	4.069202803947945E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9991632061127661	WITHOUT_CLASSIFICATION	8.367938872339748E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999706504223289	WITHOUT_CLASSIFICATION	2.9349577671111924E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999963902900654	WITHOUT_CLASSIFICATION	3.6097099344945175E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999484376878901	WITHOUT_CLASSIFICATION	5.156231210975787E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999882786740432	WITHOUT_CLASSIFICATION	1.1721325956768162E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999986130595622	WITHOUT_CLASSIFICATION	1.386940437871167E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999484376878901	WITHOUT_CLASSIFICATION	5.156231210975787E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9972072552267157	WITHOUT_CLASSIFICATION	0.0027927447732842784	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998555141948203	WITHOUT_CLASSIFICATION	1.4448580517968266E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9995484534283858	WITHOUT_CLASSIFICATION	4.515465716141454E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999217432730164	WITHOUT_CLASSIFICATION	7.825672698351654E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999410440092857	WITHOUT_CLASSIFICATION	5.895599071428168E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999410440092857	WITHOUT_CLASSIFICATION	5.895599071428168E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9981038247209366	WITHOUT_CLASSIFICATION	0.0018961752790633785	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999980230254938	WITHOUT_CLASSIFICATION	1.976974506142215E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999995419716128	WITHOUT_CLASSIFICATION	4.580283872063365E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998076046848084	WITHOUT_CLASSIFICATION	1.9239531519151464E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999880108888213	WITHOUT_CLASSIFICATION	1.1989111178702913E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998891167713627	WITHOUT_CLASSIFICATION	1.1088322863730106E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9975240857860718	WITHOUT_CLASSIFICATION	0.0024759142139282784	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999464563512844	WITHOUT_CLASSIFICATION	5.354364871566437E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999985903143188	WITHOUT_CLASSIFICATION	1.4096856811997132E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999668513005184	WITHOUT_CLASSIFICATION	3.31486994815069E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999668513005184	WITHOUT_CLASSIFICATION	3.31486994815069E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998712300252014	WITHOUT_CLASSIFICATION	1.2876997479862427E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998961631566935	WITHOUT_CLASSIFICATION	1.0383684330645177E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999790223397865	WITHOUT_CLASSIFICATION	2.09776602134194E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999668513005184	WITHOUT_CLASSIFICATION	3.31486994815069E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998712300252014	WITHOUT_CLASSIFICATION	1.2876997479862427E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998712300252014	WITHOUT_CLASSIFICATION	1.2876997479862427E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999995663234852	WITHOUT_CLASSIFICATION	4.3367651479317824E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998162177566634	WITHOUT_CLASSIFICATION	1.8378224333648842E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999257927638	WITHOUT_CLASSIFICATION	7.420723622531456E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999899571443015	WITHOUT_CLASSIFICATION	1.0042855698589827E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9988834563421058	WITHOUT_CLASSIFICATION	0.0011165436578942538	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9988834563421058	WITHOUT_CLASSIFICATION	0.0011165436578942538	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999471078634662	WITHOUT_CLASSIFICATION	5.289213653378903E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9987117427046649	WITHOUT_CLASSIFICATION	0.0012882572953351167	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999691836116655	WITHOUT_CLASSIFICATION	3.0816388334532104E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999998053373675	WITHOUT_CLASSIFICATION	1.9466263250284512E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999998053373675	WITHOUT_CLASSIFICATION	1.9466263250284512E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999502459763743	WITHOUT_CLASSIFICATION	4.975402362570127E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9975364619832734	WITHOUT_CLASSIFICATION	0.00246353801672664	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998905978198799	WITHOUT_CLASSIFICATION	1.0940218012016047E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999597853566	WITHOUT_CLASSIFICATION	4.0214643279315575E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999884659583264	WITHOUT_CLASSIFICATION	1.153404167360351E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999086043631495	WITHOUT_CLASSIFICATION	9.1395636850434E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998245239031911	WITHOUT_CLASSIFICATION	1.754760968088769E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995753319684604	WITHOUT_CLASSIFICATION	4.2466803153961874E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998905978198799	WITHOUT_CLASSIFICATION	1.0940218012016047E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9990458815501924	WITHOUT_CLASSIFICATION	9.541184498076788E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999121719625053	WITHOUT_CLASSIFICATION	8.782803749470939E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999121719625053	WITHOUT_CLASSIFICATION	8.782803749470939E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999170239463	WITHOUT_CLASSIFICATION	8.297605365554758E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999755013529551	WITHOUT_CLASSIFICATION	2.4498647044861262E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9899373137860533	WITHOUT_CLASSIFICATION	0.010062686213946766	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997537731715165	WITHOUT_CLASSIFICATION	2.4622682848347957E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999600555143228	WITHOUT_CLASSIFICATION	3.994448567720815E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9991625129016454	WITHOUT_CLASSIFICATION	8.374870983545673E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998838061496703	WITHOUT_CLASSIFICATION	1.1619385032977887E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9996192258092379	WITHOUT_CLASSIFICATION	3.807741907621054E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988063173179	WITHOUT_CLASSIFICATION	1.1936826821622676E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988063173179	WITHOUT_CLASSIFICATION	1.1936826821622676E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997745648784261	WITHOUT_CLASSIFICATION	2.2543512157383876E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999211154768283	WITHOUT_CLASSIFICATION	7.888452317176359E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999149601269459	WITHOUT_CLASSIFICATION	8.503987305409206E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999157729070458	WITHOUT_CLASSIFICATION	8.422709295422203E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998208724671698	WITHOUT_CLASSIFICATION	1.7912753283019537E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999748905856733	WITHOUT_CLASSIFICATION	2.510941432669047E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999424214506208	WITHOUT_CLASSIFICATION	5.757854937917277E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999898295375784	WITHOUT_CLASSIFICATION	1.0170462421556547E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999886285417142	WITHOUT_CLASSIFICATION	1.1371458285782157E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999113235634708	WITHOUT_CLASSIFICATION	8.867643652912744E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.999748905856733	WITHOUT_CLASSIFICATION	2.510941432669047E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999679114214661	WITHOUT_CLASSIFICATION	3.208857853381199E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9996216762096094	WITHOUT_CLASSIFICATION	3.783237903905333E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998260543154174	WITHOUT_CLASSIFICATION	1.7394568458264112E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999377576293229	WITHOUT_CLASSIFICATION	6.224237067709952E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999975956480048	WITHOUT_CLASSIFICATION	2.4043519952059608E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999690940676499	WITHOUT_CLASSIFICATION	3.090593235005206E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9990905835716051	WITHOUT_CLASSIFICATION	9.09416428394928E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9996724856802417	WITHOUT_CLASSIFICATION	3.27514319758249E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999294678294248	WITHOUT_CLASSIFICATION	7.053217057514073E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999535887754795	WITHOUT_CLASSIFICATION	4.641122452053048E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996664131222545	WITHOUT_CLASSIFICATION	3.335868777455505E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999607487325622	WITHOUT_CLASSIFICATION	3.925126743768134E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999846373808069	WITHOUT_CLASSIFICATION	1.536261919313837E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999475977683867	WITHOUT_CLASSIFICATION	5.240223161328586E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9970648831259804	WITHOUT_CLASSIFICATION	0.002935116874019591	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999923056106234	WITHOUT_CLASSIFICATION	7.694389376689853E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999886285417142	WITHOUT_CLASSIFICATION	1.1371458285782157E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996664131222545	WITHOUT_CLASSIFICATION	3.335868777455505E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999981104631538	WITHOUT_CLASSIFICATION	1.8895368461399903E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998449421333772	WITHOUT_CLASSIFICATION	1.5505786662284993E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998934144273519	WITHOUT_CLASSIFICATION	1.0658557264803793E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999926388007754	WITHOUT_CLASSIFICATION	7.361199224604647E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9996730188972538	WITHOUT_CLASSIFICATION	3.269811027461897E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999427527419313	WITHOUT_CLASSIFICATION	5.724725806871066E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999046600840364	WITHOUT_CLASSIFICATION	9.533991596356063E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997964707883615	WITHOUT_CLASSIFICATION	2.0352921163846224E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997964707883615	WITHOUT_CLASSIFICATION	2.0352921163846224E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.99998661337402	WITHOUT_CLASSIFICATION	1.3386625980049475E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999511927941382	WITHOUT_CLASSIFICATION	4.8807205861797026E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999800492506354	WITHOUT_CLASSIFICATION	1.9950749364579904E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9998757337618189	WITHOUT_CLASSIFICATION	1.2426623818099535E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999230743800841	WITHOUT_CLASSIFICATION	7.692561991591239E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999614083256886	WITHOUT_CLASSIFICATION	3.8591674311399616E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999815183464869	WITHOUT_CLASSIFICATION	1.8481653513132496E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998863366190381	WITHOUT_CLASSIFICATION	1.136633809618941E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999794066781952	WITHOUT_CLASSIFICATION	2.059332180477928E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999794066781952	WITHOUT_CLASSIFICATION	2.059332180477928E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999794066781952	WITHOUT_CLASSIFICATION	2.059332180477928E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999578278405066	WITHOUT_CLASSIFICATION	4.217215949336554E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999794066781952	WITHOUT_CLASSIFICATION	2.059332180477928E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999734691917772	WITHOUT_CLASSIFICATION	2.6530808222803155E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999928867460305	WITHOUT_CLASSIFICATION	7.1132539695830555E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999878425250646	WITHOUT_CLASSIFICATION	1.2157474935372728E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999886285417142	WITHOUT_CLASSIFICATION	1.1371458285782157E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996664131222545	WITHOUT_CLASSIFICATION	3.335868777455505E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996664131222545	WITHOUT_CLASSIFICATION	3.335868777455505E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9996792653947291	WITHOUT_CLASSIFICATION	3.2073460527094554E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9995929719751361	WITHOUT_CLASSIFICATION	4.0702802486403437E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999745869708017	WITHOUT_CLASSIFICATION	2.5413029198226064E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999724989385498	WITHOUT_CLASSIFICATION	2.750106145014429E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999724989385498	WITHOUT_CLASSIFICATION	2.750106145014429E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9938399242679592	WITHOUT_CLASSIFICATION	0.006160075732040786	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999970627738917	WITHOUT_CLASSIFICATION	2.93722610828767E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999937904851788	WITHOUT_CLASSIFICATION	6.209514821211202E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999891561026631	WITHOUT_CLASSIFICATION	1.084389733673499E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999946044183291	WITHOUT_CLASSIFICATION	5.395581670887555E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999883389362756	WITHOUT_CLASSIFICATION	1.166106372438359E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999992945362808	WITHOUT_CLASSIFICATION	7.054637191054274E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999880509914119	WITHOUT_CLASSIFICATION	1.1949008588136416E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999880509914119	WITHOUT_CLASSIFICATION	1.1949008588136416E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999849251472194	WITHOUT_CLASSIFICATION	1.5074852780695547E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999849251472194	WITHOUT_CLASSIFICATION	1.5074852780695547E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998297586490742	WITHOUT_CLASSIFICATION	1.7024135092574152E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998297586490742	WITHOUT_CLASSIFICATION	1.7024135092574152E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998804189964378	WITHOUT_CLASSIFICATION	1.1958100356218716E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998804189964378	WITHOUT_CLASSIFICATION	1.1958100356218716E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999724989385498	WITHOUT_CLASSIFICATION	2.750106145014429E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999992945362808	WITHOUT_CLASSIFICATION	7.054637191054274E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999880509914119	WITHOUT_CLASSIFICATION	1.1949008588136416E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999880509914119	WITHOUT_CLASSIFICATION	1.1949008588136416E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999849251472194	WITHOUT_CLASSIFICATION	1.5074852780695547E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998297586490742	WITHOUT_CLASSIFICATION	1.7024135092574152E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998297586490742	WITHOUT_CLASSIFICATION	1.7024135092574152E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998804189964378	WITHOUT_CLASSIFICATION	1.1958100356218716E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998912128844857	WITHOUT_CLASSIFICATION	1.0878711551427223E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9989336717917517	WITHOUT_CLASSIFICATION	0.0010663282082482822	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9988247122822197	WITHOUT_CLASSIFICATION	0.00117528771778033	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9992871997456239	WITHOUT_CLASSIFICATION	7.128002543760145E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996716233230081	WITHOUT_CLASSIFICATION	3.283766769918676E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999879857697381	WITHOUT_CLASSIFICATION	1.2014230261873842E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999824616991061	WITHOUT_CLASSIFICATION	1.753830089391042E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999864394726357	WITHOUT_CLASSIFICATION	1.3560527364214214E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999726744609361	WITHOUT_CLASSIFICATION	2.732553906389186E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9945682298306493	WITHOUT_CLASSIFICATION	0.005431770169350619	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998878013807941	WITHOUT_CLASSIFICATION	1.1219861920591626E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999967022798907	WITHOUT_CLASSIFICATION	3.2977201092851585E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9981038247209366	WITHOUT_CLASSIFICATION	0.0018961752790633785	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999879857697381	WITHOUT_CLASSIFICATION	1.2014230261873842E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999926234865488	WITHOUT_CLASSIFICATION	7.376513451134483E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999546948670883	WITHOUT_CLASSIFICATION	4.530513291170017E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999546948670883	WITHOUT_CLASSIFICATION	4.530513291170017E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9983481197058781	WITHOUT_CLASSIFICATION	0.0016518802941219808	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995593269171	WITHOUT_CLASSIFICATION	4.4067308283091036E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9996506944016437	WITHOUT_CLASSIFICATION	3.493055983564121E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997566046985175	WITHOUT_CLASSIFICATION	2.433953014826773E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997566046985175	WITHOUT_CLASSIFICATION	2.433953014826773E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999975903868401	WITHOUT_CLASSIFICATION	2.4096131599412867E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999744716328173	WITHOUT_CLASSIFICATION	2.5528367182696266E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999744716328173	WITHOUT_CLASSIFICATION	2.5528367182696266E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9988771224001137	WITHOUT_CLASSIFICATION	0.0011228775998862344	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999927473097568	WITHOUT_CLASSIFICATION	7.252690243034469E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999949299240833	WITHOUT_CLASSIFICATION	5.070075916720201E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999889427153343	WITHOUT_CLASSIFICATION	1.1057284665762292E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999881130494579	WITHOUT_CLASSIFICATION	1.188695054205248E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.809023278553939	WITHOUT_CLASSIFICATION	0.1909767214460611	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999798664213639	WITHOUT_CLASSIFICATION	2.0133578636085426E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999791965040928	WITHOUT_CLASSIFICATION	2.0803495907172772E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999257726265105	WITHOUT_CLASSIFICATION	7.422737348941597E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999576826534584	WITHOUT_CLASSIFICATION	4.231734654153196E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999990364373484	WITHOUT_CLASSIFICATION	9.635626515783856E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999071448259121	WITHOUT_CLASSIFICATION	9.285517408779121E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998886984600251	WITHOUT_CLASSIFICATION	1.1130153997475078E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.99967386097412	WITHOUT_CLASSIFICATION	3.2613902588000303E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999881234560682	WITHOUT_CLASSIFICATION	1.1876543931753404E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9996629585275943	WITHOUT_CLASSIFICATION	3.370414724055631E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999170654571242	WITHOUT_CLASSIFICATION	8.293454287573956E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997901363439741	WITHOUT_CLASSIFICATION	2.098636560258882E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999949299240833	WITHOUT_CLASSIFICATION	5.070075916720201E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9993699385885086	WITHOUT_CLASSIFICATION	6.300614114912634E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9998334832883955	WITHOUT_CLASSIFICATION	1.6651671160443541E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999885926363603	WITHOUT_CLASSIFICATION	1.140736363966024E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999881130494579	WITHOUT_CLASSIFICATION	1.188695054205248E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997901363439741	WITHOUT_CLASSIFICATION	2.098636560258882E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9993699385885086	WITHOUT_CLASSIFICATION	6.300614114912634E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999885926363603	WITHOUT_CLASSIFICATION	1.140736363966024E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998689465191842	WITHOUT_CLASSIFICATION	1.310534808158504E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998689465191842	WITHOUT_CLASSIFICATION	1.310534808158504E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9995361836553368	WITHOUT_CLASSIFICATION	4.6381634466315894E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9981566051851652	WITHOUT_CLASSIFICATION	0.0018433948148347979	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999991692478254	WITHOUT_CLASSIFICATION	8.307521746742137E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999599870011623	WITHOUT_CLASSIFICATION	4.0012998837681635E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9979951816605683	WITHOUT_CLASSIFICATION	0.0020048183394317143	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999550306918258	WITHOUT_CLASSIFICATION	4.4969308174169386E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9980179572928269	WITHOUT_CLASSIFICATION	0.001982042707173094	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9993605424803392	WITHOUT_CLASSIFICATION	6.394575196607234E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999550306918258	WITHOUT_CLASSIFICATION	4.4969308174169386E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999893829882783	WITHOUT_CLASSIFICATION	1.0617011721645217E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9993244241685901	WITHOUT_CLASSIFICATION	6.755758314097841E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997901363439741	WITHOUT_CLASSIFICATION	2.098636560258882E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998476917249824	WITHOUT_CLASSIFICATION	1.5230827501750503E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999456074560961	WITHOUT_CLASSIFICATION	5.439254390394222E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9971928964143354	WITHOUT_CLASSIFICATION	0.002807103585664527	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999038055612164	WITHOUT_CLASSIFICATION	9.619443878369686E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999482415874058	WITHOUT_CLASSIFICATION	5.1758412594132425E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999991716558684	WITHOUT_CLASSIFICATION	8.283441317142156E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999804808357051	WITHOUT_CLASSIFICATION	1.951916429490886E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9976626628670024	WITHOUT_CLASSIFICATION	0.002337337132997534	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997103792187462	WITHOUT_CLASSIFICATION	2.896207812538173E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994354967711976	WITHOUT_CLASSIFICATION	5.645032288023716E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9997517358099016	WITHOUT_CLASSIFICATION	2.4826419009835193E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999071448259121	WITHOUT_CLASSIFICATION	9.285517408779121E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999134865381307	WITHOUT_CLASSIFICATION	8.651346186932171E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999192885143074	WITHOUT_CLASSIFICATION	8.071148569265118E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9992777419434369	WITHOUT_CLASSIFICATION	7.222580565630155E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9997528611002285	WITHOUT_CLASSIFICATION	2.4713889977150377E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9997537672150777	WITHOUT_CLASSIFICATION	2.4623278492233273E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999931440119812	WITHOUT_CLASSIFICATION	6.855988018796684E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999675843977	WITHOUT_CLASSIFICATION	3.241560243938569E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999879553476223	WITHOUT_CLASSIFICATION	1.2044652377657438E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9896015473064791	WITHOUT_CLASSIFICATION	0.010398452693520986	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996536359568016	WITHOUT_CLASSIFICATION	3.46364043198533E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9790084254504785	WITHOUT_CLASSIFICATION	0.020991574549521528	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9790084254504785	WITHOUT_CLASSIFICATION	0.020991574549521528	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996858891636415	WITHOUT_CLASSIFICATION	3.14110836358516E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999214343726875	WITHOUT_CLASSIFICATION	7.856562731254627E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9996618659307551	WITHOUT_CLASSIFICATION	3.3813406924489614E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999117897183859	WITHOUT_CLASSIFICATION	8.821028161414968E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994983094012293	WITHOUT_CLASSIFICATION	5.016905987706828E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9986707298250658	WITHOUT_CLASSIFICATION	0.0013292701749342318	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999807477805086	WITHOUT_CLASSIFICATION	1.9252219491366307E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9893254608665923	WITHOUT_CLASSIFICATION	0.010674539133407547	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999049063736897	WITHOUT_CLASSIFICATION	9.509362631030674E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996063667160893	WITHOUT_CLASSIFICATION	3.936332839108007E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998041313545379	WITHOUT_CLASSIFICATION	1.958686454621792E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999721622870465	WITHOUT_CLASSIFICATION	2.7837712953510276E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9954995546112204	WITHOUT_CLASSIFICATION	0.004500445388779606	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495425082756	WITHOUT_CLASSIFICATION	5.045749172441662E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997904278610258	WITHOUT_CLASSIFICATION	2.095721389741669E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999937619644425	WITHOUT_CLASSIFICATION	6.2380355575079355E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997007696476	WITHOUT_CLASSIFICATION	2.9923035237093555E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9997651411471207	WITHOUT_CLASSIFICATION	2.3485885287919276E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999431705928468	WITHOUT_CLASSIFICATION	5.6829407153190104E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999901387041195	WITHOUT_CLASSIFICATION	9.861295880532478E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999901387041195	WITHOUT_CLASSIFICATION	9.861295880532478E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9980801391133165	WITHOUT_CLASSIFICATION	0.0019198608866835784	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9980801391133165	WITHOUT_CLASSIFICATION	0.0019198608866835784	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9896015473064791	WITHOUT_CLASSIFICATION	0.010398452693520986	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9984880935702218	WITHOUT_CLASSIFICATION	0.0015119064297781364	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993993816939192	WITHOUT_CLASSIFICATION	6.006183060808034E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9992477300422677	WITHOUT_CLASSIFICATION	7.52269957732211E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993993816939192	WITHOUT_CLASSIFICATION	6.006183060808034E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9992477300422677	WITHOUT_CLASSIFICATION	7.52269957732211E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999219479911223	WITHOUT_CLASSIFICATION	7.805200887770753E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999928333919238	WITHOUT_CLASSIFICATION	7.166608076222372E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999561124669406	WITHOUT_CLASSIFICATION	4.388753305944293E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999993786747943	WITHOUT_CLASSIFICATION	6.213252058047385E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9893041889574343	WITHOUT_CLASSIFICATION	0.010695811042565787	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.998996570503195	WITHOUT_CLASSIFICATION	0.0010034294968049324	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.998970150202931	WITHOUT_CLASSIFICATION	0.001029849797068964	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9981849065635295	WITHOUT_CLASSIFICATION	0.0018150934364704766	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999327580998211	WITHOUT_CLASSIFICATION	6.724190017882941E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999984856296573	WITHOUT_CLASSIFICATION	1.5143703426534618E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9996582959911735	WITHOUT_CLASSIFICATION	3.417040088265281E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999979392288618	WITHOUT_CLASSIFICATION	2.060771138179485E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999951173405693	WITHOUT_CLASSIFICATION	4.8826594306294466E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9994596891006504	WITHOUT_CLASSIFICATION	5.403108993495228E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9994596891006504	WITHOUT_CLASSIFICATION	5.403108993495228E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998949529597262	WITHOUT_CLASSIFICATION	1.0504704027370875E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998949529597262	WITHOUT_CLASSIFICATION	1.0504704027370875E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999897962099941	WITHOUT_CLASSIFICATION	1.0203790005950848E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999219479911223	WITHOUT_CLASSIFICATION	7.805200887770753E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9942739899103974	WITHOUT_CLASSIFICATION	0.005726010089602617	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999642693363459	WITHOUT_CLASSIFICATION	3.5730663654118495E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9923451780792951	WITHOUT_CLASSIFICATION	0.0076548219207049515	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999082486453492	WITHOUT_CLASSIFICATION	9.175135465072762E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945917793143876	WITHOUT_CLASSIFICATION	0.005408220685612425	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999219479911223	WITHOUT_CLASSIFICATION	7.805200887770753E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999082486453492	WITHOUT_CLASSIFICATION	9.175135465072762E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945917793143876	WITHOUT_CLASSIFICATION	0.005408220685612425	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999392467170907	WITHOUT_CLASSIFICATION	6.075328290928735E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9996369170356086	WITHOUT_CLASSIFICATION	3.6308296439142314E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998473704898205	WITHOUT_CLASSIFICATION	1.526295101794854E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999219479911223	WITHOUT_CLASSIFICATION	7.805200887770753E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999219479911223	WITHOUT_CLASSIFICATION	7.805200887770753E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999543277570611	WITHOUT_CLASSIFICATION	4.56722429389424E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999532931290401	WITHOUT_CLASSIFICATION	4.6706870959916394E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9997119897231722	WITHOUT_CLASSIFICATION	2.880102768277898E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.99999486479999	WITHOUT_CLASSIFICATION	5.1352000101108286E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996360219814278	WITHOUT_CLASSIFICATION	3.6397801857224833E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999994515631337	WITHOUT_CLASSIFICATION	5.484368663027288E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9990515491229045	WITHOUT_CLASSIFICATION	9.484508770954757E-4	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999563700137983	WITHOUT_CLASSIFICATION	4.3629986201726354E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999725005328721	WITHOUT_CLASSIFICATION	2.7499467127947345E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9996836250626919	WITHOUT_CLASSIFICATION	3.1637493730799925E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9985914153607784	WITHOUT_CLASSIFICATION	0.0014085846392215564	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9980638793376775	WITHOUT_CLASSIFICATION	0.001936120662322488	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999992818930575	WITHOUT_CLASSIFICATION	7.181069425015421E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9997280208869799	WITHOUT_CLASSIFICATION	2.7197911302019194E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997769221837978	WITHOUT_CLASSIFICATION	2.2307781620223077E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999975045972072	WITHOUT_CLASSIFICATION	2.495402792824237E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998698429145196	WITHOUT_CLASSIFICATION	1.3015708548033252E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9995584626563326	WITHOUT_CLASSIFICATION	4.415373436672917E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9988224187118724	WITHOUT_CLASSIFICATION	0.0011775812881275889	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9992477300422677	WITHOUT_CLASSIFICATION	7.52269957732211E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9977860371068462	WITHOUT_CLASSIFICATION	0.0022139628931536924	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998698429145196	WITHOUT_CLASSIFICATION	1.3015708548033252E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9733669520602005	WITHOUT_CLASSIFICATION	0.026633047939799544	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999695674810207	WITHOUT_CLASSIFICATION	3.0432518979318185E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9907469563472794	WITHOUT_CLASSIFICATION	0.009253043652720555	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998021119479054	WITHOUT_CLASSIFICATION	1.9788805209464586E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999976649244282	WITHOUT_CLASSIFICATION	2.3350755718039357E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999079387097698	WITHOUT_CLASSIFICATION	9.20612902303166E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998967198484785	WITHOUT_CLASSIFICATION	1.0328015152145458E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999762323085465	WITHOUT_CLASSIFICATION	2.37676914534707E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999843064634598	WITHOUT_CLASSIFICATION	1.5693536540269486E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999872173696231	WITHOUT_CLASSIFICATION	1.2782630376746473E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998728149195222	WITHOUT_CLASSIFICATION	1.271850804777733E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998735432232954	WITHOUT_CLASSIFICATION	1.264567767046684E-4	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979707745768	WITHOUT_CLASSIFICATION	2.029225423194646E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9995309866184617	WITHOUT_CLASSIFICATION	4.690133815382275E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9953134422918036	WITHOUT_CLASSIFICATION	0.004686557708196324	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9964554277221626	WITHOUT_CLASSIFICATION	0.0035445722778374264	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998528113291928	WITHOUT_CLASSIFICATION	1.47188670807195E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999967105535843	WITHOUT_CLASSIFICATION	3.2894464156989683E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9961384996887567	WITHOUT_CLASSIFICATION	0.0038615003112433114	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999842202744891	WITHOUT_CLASSIFICATION	1.577972551094865E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986733814880813	WITHOUT_CLASSIFICATION	0.001326618511918658	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993448155911976	WITHOUT_CLASSIFICATION	6.551844088024162E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983199898865102	WITHOUT_CLASSIFICATION	0.001680010113489736	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999036088740237	WITHOUT_CLASSIFICATION	9.639112597636121E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980383240152702	WITHOUT_CLASSIFICATION	0.001961675984729855	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9995552789989162	WITHOUT_CLASSIFICATION	4.447210010838052E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997892475055118	WITHOUT_CLASSIFICATION	2.1075249448829415E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988232043665574	WITHOUT_CLASSIFICATION	0.0011767956334426568	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989078221517594	WITHOUT_CLASSIFICATION	0.0010921778482405264	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972048842635884	WITHOUT_CLASSIFICATION	0.0027951157364115788	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9924068576621659	WITHOUT_CLASSIFICATION	0.007593142337834145	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979222198286045	WITHOUT_CLASSIFICATION	0.002077780171395564	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975400468980676	WITHOUT_CLASSIFICATION	0.0024599531019324455	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999767830005165	WITHOUT_CLASSIFICATION	2.321699948344195E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998754025400961	WITHOUT_CLASSIFICATION	1.2459745990397954E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7791640293680274	IMPLEMENTATION	0.22083597063197266	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999846333451453	WITHOUT_CLASSIFICATION	1.536665485468266E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999984896964708	WITHOUT_CLASSIFICATION	1.5103035291350344E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988289851273536	WITHOUT_CLASSIFICATION	0.001171014872646454	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9980954360534845	WITHOUT_CLASSIFICATION	0.0019045639465154916	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996917191388781	WITHOUT_CLASSIFICATION	3.0828086112185684E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999392467170907	WITHOUT_CLASSIFICATION	6.075328290928735E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9996666405592899	WITHOUT_CLASSIFICATION	3.333594407101272E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9996796614744242	WITHOUT_CLASSIFICATION	3.2033852557576204E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999204323811229	WITHOUT_CLASSIFICATION	7.956761887714962E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999290848902148	WITHOUT_CLASSIFICATION	7.091510978516607E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9996624728436899	WITHOUT_CLASSIFICATION	3.375271563100874E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999681376210673	WITHOUT_CLASSIFICATION	3.186237893269595E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.998320504496376	WITHOUT_CLASSIFICATION	0.0016794955036239156	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998826415797023	WITHOUT_CLASSIFICATION	1.1735842029761617E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995762742586441	WITHOUT_CLASSIFICATION	4.237257413558535E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998398009878121	WITHOUT_CLASSIFICATION	1.6019901218784527E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999033686968948	WITHOUT_CLASSIFICATION	9.663130310530166E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999876138090003	WITHOUT_CLASSIFICATION	1.2386190999711443E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9994401749135304	WITHOUT_CLASSIFICATION	5.59825086469561E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9997013826331973	WITHOUT_CLASSIFICATION	2.986173668026676E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999214675076931	WITHOUT_CLASSIFICATION	7.853249230695685E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998617434274983	WITHOUT_CLASSIFICATION	1.3825657250171738E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997207176502978	WITHOUT_CLASSIFICATION	2.792823497022256E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999143522552051	WITHOUT_CLASSIFICATION	8.564774479493048E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999794138584261	WITHOUT_CLASSIFICATION	2.0586141573899636E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999653616481108	WITHOUT_CLASSIFICATION	3.463835188914981E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999211045863543	WITHOUT_CLASSIFICATION	7.889541364568634E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995082403666299	WITHOUT_CLASSIFICATION	4.917596333700287E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9972235813192895	WITHOUT_CLASSIFICATION	0.0027764186807104707	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999984241330158	WITHOUT_CLASSIFICATION	1.5758669841964743E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998103195717714	WITHOUT_CLASSIFICATION	1.8968042822872737E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988289851273536	WITHOUT_CLASSIFICATION	0.001171014872646454	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9994060121386098	WITHOUT_CLASSIFICATION	5.939878613902491E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999981292052933	WITHOUT_CLASSIFICATION	1.8707947067311053E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996997218100142	WITHOUT_CLASSIFICATION	3.002781899857898E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999846333451453	WITHOUT_CLASSIFICATION	1.536665485468266E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998744881315772	WITHOUT_CLASSIFICATION	1.255118684227851E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999463507604992	WITHOUT_CLASSIFICATION	5.3649239500788994E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998916216837985	WITHOUT_CLASSIFICATION	1.0837831620147222E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999972796151585	WITHOUT_CLASSIFICATION	2.7203848414218442E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997382726569127	WITHOUT_CLASSIFICATION	2.6172734308731123E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999459234191661	WITHOUT_CLASSIFICATION	5.4076580833949394E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997528158399517	WITHOUT_CLASSIFICATION	2.4718416004836644E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998941746818095	WITHOUT_CLASSIFICATION	1.0582531819044476E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998670472961723	WITHOUT_CLASSIFICATION	1.3295270382772693E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9977347026656669	WITHOUT_CLASSIFICATION	0.0022652973343331153	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999981318479102	WITHOUT_CLASSIFICATION	1.8681520897899231E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999907219003485	WITHOUT_CLASSIFICATION	9.278099651537386E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999392467170907	WITHOUT_CLASSIFICATION	6.075328290928735E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999845636002999	WITHOUT_CLASSIFICATION	1.5436399700144892E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999330951503326	WITHOUT_CLASSIFICATION	6.690484966739416E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999504206902827	WITHOUT_CLASSIFICATION	4.957930971731503E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999833625162781	WITHOUT_CLASSIFICATION	1.663748372193985E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997398654150219	WITHOUT_CLASSIFICATION	2.6013458497802216E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997359478070377	WITHOUT_CLASSIFICATION	2.640521929623083E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999945226521285	WITHOUT_CLASSIFICATION	5.4773478715054284E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998222748812337	WITHOUT_CLASSIFICATION	1.7772511876637618E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999896952322603	WITHOUT_CLASSIFICATION	1.0304767739644614E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992845355261035	WITHOUT_CLASSIFICATION	7.154644738965382E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9982056733071458	WITHOUT_CLASSIFICATION	0.0017943266928541887	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9995200320397366	WITHOUT_CLASSIFICATION	4.799679602634876E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999846333451453	WITHOUT_CLASSIFICATION	1.536665485468266E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988289851273536	WITHOUT_CLASSIFICATION	0.001171014872646454	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999399045571125	WITHOUT_CLASSIFICATION	6.009544288750678E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9990080651887994	WITHOUT_CLASSIFICATION	9.919348112006677E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9939758286949795	WITHOUT_CLASSIFICATION	0.006024171305020482	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988289851273536	WITHOUT_CLASSIFICATION	0.001171014872646454	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999818881193897	WITHOUT_CLASSIFICATION	1.8111880610295506E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999833625162781	WITHOUT_CLASSIFICATION	1.663748372193985E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997179426076696	WITHOUT_CLASSIFICATION	2.8205739233048266E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997321266225895	WITHOUT_CLASSIFICATION	2.678733774104981E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999957046924421	WITHOUT_CLASSIFICATION	4.295307557838494E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999459234191661	WITHOUT_CLASSIFICATION	5.4076580833949394E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997528158399517	WITHOUT_CLASSIFICATION	2.4718416004836644E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998941746818095	WITHOUT_CLASSIFICATION	1.0582531819044476E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999774252611885	WITHOUT_CLASSIFICATION	2.257473881149988E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9998490600013792	WITHOUT_CLASSIFICATION	1.5093999862074263E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9997144092946738	WITHOUT_CLASSIFICATION	2.855907053261353E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999978057290313	WITHOUT_CLASSIFICATION	2.1942709686875142E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999544383840887	WITHOUT_CLASSIFICATION	4.5561615911193296E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988289851273536	WITHOUT_CLASSIFICATION	0.001171014872646454	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998670472961723	WITHOUT_CLASSIFICATION	1.3295270382772693E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9977347026656669	WITHOUT_CLASSIFICATION	0.0022652973343331153	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218239593306	WITHOUT_CLASSIFICATION	7.817604066945221E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996405219776099	WITHOUT_CLASSIFICATION	3.5947802239019825E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998881204881005	WITHOUT_CLASSIFICATION	1.1187951189941303E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999983789759239	WITHOUT_CLASSIFICATION	1.6210240761067078E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9992280105420573	WITHOUT_CLASSIFICATION	7.71989457942607E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999966249543527	WITHOUT_CLASSIFICATION	3.375045647256627E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998081303799368	WITHOUT_CLASSIFICATION	1.9186962006310045E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999435691955862	WITHOUT_CLASSIFICATION	5.6430804413733344E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999569220770527	WITHOUT_CLASSIFICATION	4.307792294729646E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980383240152702	WITHOUT_CLASSIFICATION	0.001961675984729855	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989078221517594	WITHOUT_CLASSIFICATION	0.0010921778482405264	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999800537922235	WITHOUT_CLASSIFICATION	1.9946207776431807E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999331475436931	WITHOUT_CLASSIFICATION	6.685245630690337E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982123585714525	WITHOUT_CLASSIFICATION	0.0017876414285474336	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9901739422704741	WITHOUT_CLASSIFICATION	0.009826057729525845	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972048842635884	WITHOUT_CLASSIFICATION	0.0027951157364115788	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979172577083758	WITHOUT_CLASSIFICATION	0.0020827422916241604	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999211045863543	WITHOUT_CLASSIFICATION	7.889541364568634E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999875940009167	WITHOUT_CLASSIFICATION	1.2405999083306102E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999585000099147	WITHOUT_CLASSIFICATION	4.149999008527318E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999762218503522	WITHOUT_CLASSIFICATION	2.3778149647857347E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999797359054153	WITHOUT_CLASSIFICATION	2.026409458466558E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999995250180553	WITHOUT_CLASSIFICATION	4.749819446591994E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9992534141164362	WITHOUT_CLASSIFICATION	7.465858835636808E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999415741478037	WITHOUT_CLASSIFICATION	5.842585219620996E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998967198484785	WITHOUT_CLASSIFICATION	1.0328015152145458E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9992935466027938	WITHOUT_CLASSIFICATION	7.064533972062098E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9994625576981115	WITHOUT_CLASSIFICATION	5.374423018885348E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999503367895444	WITHOUT_CLASSIFICATION	4.96632104555997E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999312190031658	WITHOUT_CLASSIFICATION	6.878099683412757E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999726838743829	WITHOUT_CLASSIFICATION	2.7316125617150075E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9986308506650129	WITHOUT_CLASSIFICATION	0.0013691493349870375	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447655661535	WITHOUT_CLASSIFICATION	1.5523443384638538E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999771252356674	WITHOUT_CLASSIFICATION	2.287476433261111E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999892855163196	WITHOUT_CLASSIFICATION	1.0714483680298564E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998717855301924	WITHOUT_CLASSIFICATION	1.282144698076451E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999493331249494	WITHOUT_CLASSIFICATION	5.0666875050510085E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999397349196655	WITHOUT_CLASSIFICATION	6.026508033455711E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99985936968328	WITHOUT_CLASSIFICATION	1.4063031672001435E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999758777642114	WITHOUT_CLASSIFICATION	2.4122235788614735E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996822320104786	WITHOUT_CLASSIFICATION	3.177679895213724E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998633795301061	WITHOUT_CLASSIFICATION	1.366204698939523E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99985936968328	WITHOUT_CLASSIFICATION	1.4063031672001435E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999814298544756	WITHOUT_CLASSIFICATION	1.857014552441415E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999734405050684	WITHOUT_CLASSIFICATION	2.6559494931553777E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998287827197062	WITHOUT_CLASSIFICATION	1.7121728029378835E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999957127182164	WITHOUT_CLASSIFICATION	4.287281783588233E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999855652969892	WITHOUT_CLASSIFICATION	1.4434703010806875E-4	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9998890914831509	WITHOUT_CLASSIFICATION	1.1090851684911039E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998248302745176	WITHOUT_CLASSIFICATION	1.7516972548223158E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998624211982821	WITHOUT_CLASSIFICATION	1.3757880171791652E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998624211982821	WITHOUT_CLASSIFICATION	1.3757880171791652E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999385950056793	WITHOUT_CLASSIFICATION	6.140499432068713E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999295108527706	WITHOUT_CLASSIFICATION	7.048914722942258E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998019143258831	WITHOUT_CLASSIFICATION	1.980856741169989E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.99993728176341	WITHOUT_CLASSIFICATION	6.271823659002266E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998440615834	WITHOUT_CLASSIFICATION	1.5593841658931836E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9993528678826032	WITHOUT_CLASSIFICATION	6.471321173967308E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999993029965256	WITHOUT_CLASSIFICATION	6.970034744374832E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999836909373153	WITHOUT_CLASSIFICATION	1.630906268468526E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998893644044202	WITHOUT_CLASSIFICATION	1.1063559557982499E-4	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999331398598843	WITHOUT_CLASSIFICATION	6.686014011570516E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999513782420923	WITHOUT_CLASSIFICATION	4.8621757907706093E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999686628982312	WITHOUT_CLASSIFICATION	3.1337101768897334E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9995776083206506	WITHOUT_CLASSIFICATION	4.2239167934942723E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8128673777152003	WITHOUT_CLASSIFICATION	0.18713262228479963	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9972444182510496	WITHOUT_CLASSIFICATION	0.0027555817489503375	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999168251616363	WITHOUT_CLASSIFICATION	8.317483836373369E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999079257518522	WITHOUT_CLASSIFICATION	9.207424814777476E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9915471486355482	WITHOUT_CLASSIFICATION	0.00845285136445173	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995002780503751	WITHOUT_CLASSIFICATION	4.997219496248879E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999412699707234	WITHOUT_CLASSIFICATION	5.8730029276612617E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999893412135894	WITHOUT_CLASSIFICATION	1.0658786410704711E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999374124496567	WITHOUT_CLASSIFICATION	6.258755034323053E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9992944217086727	WITHOUT_CLASSIFICATION	7.055782913272777E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999963789110883	WITHOUT_CLASSIFICATION	3.621088911760577E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999542122252613	WITHOUT_CLASSIFICATION	4.578777473866274E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996787819230598	WITHOUT_CLASSIFICATION	3.2121807694020097E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.996437143784438	WITHOUT_CLASSIFICATION	0.003562856215561921	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9995456810799863	WITHOUT_CLASSIFICATION	4.5431892001367586E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9965094499129779	WITHOUT_CLASSIFICATION	0.0034905500870221766	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9992921023392392	WITHOUT_CLASSIFICATION	7.078976607608164E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999442798251313	WITHOUT_CLASSIFICATION	5.572017486873929E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9993874499742317	WITHOUT_CLASSIFICATION	6.125500257682496E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998197663264992	WITHOUT_CLASSIFICATION	1.8023367350073947E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998614904052756	WITHOUT_CLASSIFICATION	1.385095947242738E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998518764278052	WITHOUT_CLASSIFICATION	1.48123572194878E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9997609987405625	WITHOUT_CLASSIFICATION	2.390012594376035E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999150966149454	WITHOUT_CLASSIFICATION	8.490338505461362E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9963458212525693	WITHOUT_CLASSIFICATION	0.0036541787474306526	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999435369597077	WITHOUT_CLASSIFICATION	5.646304029235677E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999316014826927	WITHOUT_CLASSIFICATION	6.839851730736131E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998316674321496	WITHOUT_CLASSIFICATION	1.6833256785032022E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999392467170907	WITHOUT_CLASSIFICATION	6.075328290928735E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999392467170907	WITHOUT_CLASSIFICATION	6.075328290928735E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999513196909061	WITHOUT_CLASSIFICATION	4.868030909382256E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999964197624833	WITHOUT_CLASSIFICATION	3.580237516599742E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999627189867145	WITHOUT_CLASSIFICATION	3.728101328546356E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999982788710589	WITHOUT_CLASSIFICATION	1.7211289411904215E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999977977570286	WITHOUT_CLASSIFICATION	2.20224297140247E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999334577981579	WITHOUT_CLASSIFICATION	6.654220184211744E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9993777605588056	WITHOUT_CLASSIFICATION	6.222394411943752E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9981049720420303	WITHOUT_CLASSIFICATION	0.0018950279579697034	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999594615083409	WITHOUT_CLASSIFICATION	4.0538491659063096E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.99969668945182	WITHOUT_CLASSIFICATION	3.0331054818004253E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996364876734416	WITHOUT_CLASSIFICATION	3.6351232655832956E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999897613065656	WITHOUT_CLASSIFICATION	1.0238693434529628E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9993009875189912	WITHOUT_CLASSIFICATION	6.990124810088146E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996701117779538	WITHOUT_CLASSIFICATION	3.298882220461563E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9988803640466738	WITHOUT_CLASSIFICATION	0.0011196359533261718	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9988589668552904	WITHOUT_CLASSIFICATION	0.0011410331447095747	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998106178887005	WITHOUT_CLASSIFICATION	1.8938211129936153E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9996055623862903	WITHOUT_CLASSIFICATION	3.944376137096874E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9996433437029533	WITHOUT_CLASSIFICATION	3.566562970466474E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999967259475978	WITHOUT_CLASSIFICATION	3.27405240219265E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9996055623862903	WITHOUT_CLASSIFICATION	3.944376137096874E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999808766424458	WITHOUT_CLASSIFICATION	1.9123357554147914E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999957216360221	WITHOUT_CLASSIFICATION	4.278363977821053E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9992433817436196	WITHOUT_CLASSIFICATION	7.566182563804165E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9993358085488799	WITHOUT_CLASSIFICATION	6.641914511200486E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9991448622904759	WITHOUT_CLASSIFICATION	8.551377095241125E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999958596933514	WITHOUT_CLASSIFICATION	4.140306648640233E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999111537652103	WITHOUT_CLASSIFICATION	8.884623478970436E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999459431492057	WITHOUT_CLASSIFICATION	5.405685079436922E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999874508135624	WITHOUT_CLASSIFICATION	1.2549186437599852E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999997743054634	WITHOUT_CLASSIFICATION	2.256945366012625E-6	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998501808985868	WITHOUT_CLASSIFICATION	1.4981910141319223E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9979679561881979	WITHOUT_CLASSIFICATION	0.002032043811802147	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999007883143469	WITHOUT_CLASSIFICATION	9.92116856531274E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9977064721307212	WITHOUT_CLASSIFICATION	0.0022935278692787953	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9991224132014618	WITHOUT_CLASSIFICATION	8.775867985381758E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9968607048026576	WITHOUT_CLASSIFICATION	0.0031392951973424044	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999158912011052	WITHOUT_CLASSIFICATION	8.410879889475103E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9940386669036795	WITHOUT_CLASSIFICATION	0.005961333096320611	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9996691329936521	WITHOUT_CLASSIFICATION	3.3086700634789843E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999631401253719	WITHOUT_CLASSIFICATION	3.685987462803535E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999709066905483	WITHOUT_CLASSIFICATION	2.9093309451637367E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9908223733310136	WITHOUT_CLASSIFICATION	0.009177626668986442	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9210027322290535	WITHOUT_CLASSIFICATION	0.0789972677709465	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9992414769520412	WITHOUT_CLASSIFICATION	7.585230479587786E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9980495289224158	WITHOUT_CLASSIFICATION	0.0019504710775842297	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9976255347446299	WITHOUT_CLASSIFICATION	0.0023744652553700308	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998386001485677	WITHOUT_CLASSIFICATION	1.613998514322239E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9986308506650129	WITHOUT_CLASSIFICATION	0.0013691493349870375	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.998604278180104	WITHOUT_CLASSIFICATION	0.0013957218198960798	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999970099261913	WITHOUT_CLASSIFICATION	2.9900738085902255E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.8948319048877955	WITHOUT_CLASSIFICATION	0.10516809511220448	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998734224305014	WITHOUT_CLASSIFICATION	1.2657756949854135E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999967370807715	WITHOUT_CLASSIFICATION	3.262919228374012E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9979637613814469	WITHOUT_CLASSIFICATION	0.0020362386185530054	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9931963681595988	WITHOUT_CLASSIFICATION	0.006803631840401168	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999613027165405	WITHOUT_CLASSIFICATION	3.869728345941344E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999393227785961	WITHOUT_CLASSIFICATION	6.067722140383373E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999396896399244	WITHOUT_CLASSIFICATION	6.031036007556391E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999585009532502	WITHOUT_CLASSIFICATION	4.1499046749842594E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998830728051521	WITHOUT_CLASSIFICATION	1.1692719484793679E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9979081434981344	WITHOUT_CLASSIFICATION	0.0020918565018655795	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9983159462705913	WITHOUT_CLASSIFICATION	0.0016840537294086578	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998299357863288	WITHOUT_CLASSIFICATION	1.7006421367111638E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9996082938544605	WITHOUT_CLASSIFICATION	3.9170614553957656E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999729672118378	WITHOUT_CLASSIFICATION	2.703278816209063E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998224863093973	WITHOUT_CLASSIFICATION	1.7751369060260586E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999964201769596	WITHOUT_CLASSIFICATION	3.5798230404584394E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998057001519234	WITHOUT_CLASSIFICATION	1.9429984807656862E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998320954039333	WITHOUT_CLASSIFICATION	1.6790459606669784E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998496208901566	WITHOUT_CLASSIFICATION	1.503791098433671E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999365177779073	WITHOUT_CLASSIFICATION	6.348222209266955E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995300601592466	WITHOUT_CLASSIFICATION	4.699398407534697E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9992799421369969	WITHOUT_CLASSIFICATION	7.200578630032316E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9996107952477776	WITHOUT_CLASSIFICATION	3.8920475222234825E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999913188271797	WITHOUT_CLASSIFICATION	8.68117282030536E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9987835720097715	WITHOUT_CLASSIFICATION	0.0012164279902284894	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9925174786562619	WITHOUT_CLASSIFICATION	0.007482521343738029	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410134586403	WITHOUT_CLASSIFICATION	1.5898654135974532E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994950898685013	WITHOUT_CLASSIFICATION	5.049101314986675E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998868590945679	WITHOUT_CLASSIFICATION	1.1314090543220346E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999928840265205	WITHOUT_CLASSIFICATION	7.11597347951343E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999331358224982	WITHOUT_CLASSIFICATION	6.686417750181312E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999939642247357	WITHOUT_CLASSIFICATION	6.035775264208077E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9945839976834062	WITHOUT_CLASSIFICATION	0.00541600231659379	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996785460272063	WITHOUT_CLASSIFICATION	3.214539727936875E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998522913519506	WITHOUT_CLASSIFICATION	1.4770864804926792E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996785460272063	WITHOUT_CLASSIFICATION	3.214539727936875E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998950237092421	WITHOUT_CLASSIFICATION	1.0497629075785321E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999985672673354	WITHOUT_CLASSIFICATION	1.4327326645921561E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999179330958256	WITHOUT_CLASSIFICATION	8.206690417440674E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999793910316619	WITHOUT_CLASSIFICATION	2.0608968338050664E-5	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999714702843694	WITHOUT_CLASSIFICATION	2.8529715630642494E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.99995786018225	WITHOUT_CLASSIFICATION	4.2139817750135325E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999089696195104	WITHOUT_CLASSIFICATION	9.103038048974216E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999496812955887	WITHOUT_CLASSIFICATION	5.03187044112628E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999894198736805	WITHOUT_CLASSIFICATION	1.0580126319502011E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9404789445786734	WITHOUT_CLASSIFICATION	0.05952105542132652	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9993304289654954	WITHOUT_CLASSIFICATION	6.69571034504622E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9976964875985219	WITHOUT_CLASSIFICATION	0.002303512401478083	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999764429536622	WITHOUT_CLASSIFICATION	2.3557046337784176E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999947126292225	WITHOUT_CLASSIFICATION	5.287370777593624E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7717256936203566	WITHOUT_CLASSIFICATION	0.22827430637964338	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9990629689360037	WITHOUT_CLASSIFICATION	9.370310639963244E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999193410310311	WITHOUT_CLASSIFICATION	8.065896896891087E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999193410310311	WITHOUT_CLASSIFICATION	8.065896896891087E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996956890010621	WITHOUT_CLASSIFICATION	3.043109989378836E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998088392755369	WITHOUT_CLASSIFICATION	1.9116072446306314E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999988311659844	WITHOUT_CLASSIFICATION	1.1688340154967382E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999900777372113	WITHOUT_CLASSIFICATION	9.922262788602904E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999920543155093	WITHOUT_CLASSIFICATION	7.945684490793037E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995528562974	WITHOUT_CLASSIFICATION	4.4714370261558093E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9985673459148743	WITHOUT_CLASSIFICATION	0.0014326540851257049	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999764476716948	WITHOUT_CLASSIFICATION	2.3552328305118908E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9997888920449453	WITHOUT_CLASSIFICATION	2.1110795505475214E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999789338882434	WITHOUT_CLASSIFICATION	2.106611175659848E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999991301469727	WITHOUT_CLASSIFICATION	8.698530273761477E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999950640086469	WITHOUT_CLASSIFICATION	4.9359913531147816E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998587801711691	WITHOUT_CLASSIFICATION	1.4121982883091337E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999966481518865	WITHOUT_CLASSIFICATION	3.351848113429645E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9994582763497425	WITHOUT_CLASSIFICATION	5.417236502575253E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999679749578785	WITHOUT_CLASSIFICATION	3.202504212149985E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999948590897101	WITHOUT_CLASSIFICATION	5.140910289992504E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9975102164444871	WITHOUT_CLASSIFICATION	0.002489783555512852	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9985126792214959	WITHOUT_CLASSIFICATION	0.0014873207785041985	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999863892156485	WITHOUT_CLASSIFICATION	1.361078435149724E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999885506576414	WITHOUT_CLASSIFICATION	1.1449342358630437E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9994969851973856	WITHOUT_CLASSIFICATION	5.030148026144015E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9992774388309494	WITHOUT_CLASSIFICATION	7.22561169050655E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9996786934433978	WITHOUT_CLASSIFICATION	3.2130655660224177E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9998821291423509	WITHOUT_CLASSIFICATION	1.1787085764913688E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999985837531415	WITHOUT_CLASSIFICATION	1.416246858523022E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998400560943813	WITHOUT_CLASSIFICATION	1.599439056187884E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994928751793165	WITHOUT_CLASSIFICATION	5.071248206834548E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9984947455072782	WITHOUT_CLASSIFICATION	0.001505254492721779	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999848571392358	WITHOUT_CLASSIFICATION	1.5142860764246555E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998921010907353	WITHOUT_CLASSIFICATION	1.0789890926473336E-4	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999839635537984	WITHOUT_CLASSIFICATION	1.603644620169727E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992005912921804	WITHOUT_CLASSIFICATION	7.994087078195949E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9861205942771494	WITHOUT_CLASSIFICATION	0.01387940572285062	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9992823720514074	WITHOUT_CLASSIFICATION	7.176279485926247E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999872798080138	WITHOUT_CLASSIFICATION	1.2720191986266618E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999457195382881	WITHOUT_CLASSIFICATION	5.4280461711766044E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999940510857158	WITHOUT_CLASSIFICATION	5.948914284194715E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999988417391249	WITHOUT_CLASSIFICATION	1.158260875086574E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9975588648759263	WITHOUT_CLASSIFICATION	0.0024411351240736156	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999664422861876	WITHOUT_CLASSIFICATION	3.355771381246111E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998780117392704	WITHOUT_CLASSIFICATION	1.219882607297135E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9981025807128219	WITHOUT_CLASSIFICATION	0.0018974192871780832	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6478059301906199	WITHOUT_CLASSIFICATION	0.35219406980938006	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9929369055761309	WITHOUT_CLASSIFICATION	0.007063094423869128	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998602381262978	WITHOUT_CLASSIFICATION	1.3976187370230253E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999413044887508	WITHOUT_CLASSIFICATION	5.8695511249058164E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999865012472	WITHOUT_CLASSIFICATION	1.349875279339606E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998737450793161	WITHOUT_CLASSIFICATION	1.2625492068386434E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999952000873504	WITHOUT_CLASSIFICATION	4.799912649601584E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998780117392704	WITHOUT_CLASSIFICATION	1.219882607297135E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999710256512463	WITHOUT_CLASSIFICATION	2.8974348753696103E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996926666261332	WITHOUT_CLASSIFICATION	3.0733337386680695E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9987987242959457	WITHOUT_CLASSIFICATION	0.0012012757040542272	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9990744227448312	WITHOUT_CLASSIFICATION	9.255772551687786E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999818881193897	WITHOUT_CLASSIFICATION	1.8111880610295506E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999818881193897	WITHOUT_CLASSIFICATION	1.8111880610295506E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999983739450022	WITHOUT_CLASSIFICATION	1.626054997817472E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999902159871205	WITHOUT_CLASSIFICATION	9.784012879547375E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999969431412549	WITHOUT_CLASSIFICATION	3.056858745020646E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999775772193073	WITHOUT_CLASSIFICATION	2.242278069270037E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9992294265700917	WITHOUT_CLASSIFICATION	7.705734299082352E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999349718499483	WITHOUT_CLASSIFICATION	6.502815005173486E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999399168015598	WITHOUT_CLASSIFICATION	6.008319844015508E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997700154141226	WITHOUT_CLASSIFICATION	2.2998458587753653E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997503763881526	WITHOUT_CLASSIFICATION	2.4962361184742074E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9995261142939329	WITHOUT_CLASSIFICATION	4.738857060671344E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999798090111441	WITHOUT_CLASSIFICATION	2.0190988855834352E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9994933776237461	WITHOUT_CLASSIFICATION	5.066223762538444E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999280858403968	WITHOUT_CLASSIFICATION	7.191415960312281E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999770018818449	WITHOUT_CLASSIFICATION	2.299811815506988E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995211108124843	WITHOUT_CLASSIFICATION	4.788891875157501E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946933932462318	WITHOUT_CLASSIFICATION	0.005306606753768068	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999978651823295	WITHOUT_CLASSIFICATION	2.134817670487686E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9995015181720078	WITHOUT_CLASSIFICATION	4.984818279921272E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998026021495622	WITHOUT_CLASSIFICATION	1.9739785043782645E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9993815506595266	WITHOUT_CLASSIFICATION	6.184493404734955E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998463010675325	WITHOUT_CLASSIFICATION	1.5369893246744827E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999895649484469	WITHOUT_CLASSIFICATION	1.04350515530776E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9948231117132986	WITHOUT_CLASSIFICATION	0.005176888286701376	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9970191557997945	WITHOUT_CLASSIFICATION	0.0029808442002055417	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9992888694470219	WITHOUT_CLASSIFICATION	7.111305529781934E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999094834471556	WITHOUT_CLASSIFICATION	9.051655284436293E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999651237799	WITHOUT_CLASSIFICATION	3.4876220105602286E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999908556580509	WITHOUT_CLASSIFICATION	9.144341949226151E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999721106806272	WITHOUT_CLASSIFICATION	2.7889319372781605E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998451867452964	WITHOUT_CLASSIFICATION	1.548132547035961E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999908315951648	WITHOUT_CLASSIFICATION	9.168404835245135E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.998915482804615	WITHOUT_CLASSIFICATION	0.0010845171953850394	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999928104494955	WITHOUT_CLASSIFICATION	7.189550504410057E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999929941826524	WITHOUT_CLASSIFICATION	7.0058173475206104E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999260299603806	WITHOUT_CLASSIFICATION	7.397003961937451E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9916424824670638	WITHOUT_CLASSIFICATION	0.008357517532936199	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999991301469727	WITHOUT_CLASSIFICATION	8.698530273761477E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998237547673219	WITHOUT_CLASSIFICATION	1.7624523267824622E-4	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9992534141164362	WITHOUT_CLASSIFICATION	7.465858835636808E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999970719547558	WITHOUT_CLASSIFICATION	2.9280452441903625E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999760770779972	WITHOUT_CLASSIFICATION	2.392292200278439E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999949939391288	WITHOUT_CLASSIFICATION	5.006060871185322E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999908186688788	WITHOUT_CLASSIFICATION	9.181331121139128E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999702564275411	WITHOUT_CLASSIFICATION	2.9743572458890095E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999875690710558	WITHOUT_CLASSIFICATION	1.2430928944140987E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999869437639782	WITHOUT_CLASSIFICATION	1.3056236021813786E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999783478475723	WITHOUT_CLASSIFICATION	2.1652152427733276E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999790749410051	WITHOUT_CLASSIFICATION	2.0925058994907447E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9997053648162739	WITHOUT_CLASSIFICATION	2.94635183726008E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998033291384519	WITHOUT_CLASSIFICATION	1.9667086154814107E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999253356223655	WITHOUT_CLASSIFICATION	7.466437763446096E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998462342011487	WITHOUT_CLASSIFICATION	1.5376579885126762E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9998813201842082	WITHOUT_CLASSIFICATION	1.186798157918204E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999012724789514	WITHOUT_CLASSIFICATION	9.872752104856098E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999471170408195	WITHOUT_CLASSIFICATION	5.288295918057357E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996092632491066	WITHOUT_CLASSIFICATION	3.9073675089332276E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999922820405057	WITHOUT_CLASSIFICATION	7.717959494214084E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9987524058743816	WITHOUT_CLASSIFICATION	0.0012475941256183153	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9996181266762725	WITHOUT_CLASSIFICATION	3.818733237276107E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999731549541505	WITHOUT_CLASSIFICATION	2.6845045849482927E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979544703316273	WITHOUT_CLASSIFICATION	0.0020455296683726506	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984451107568768	WITHOUT_CLASSIFICATION	0.001554889243123213	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996255689504063	WITHOUT_CLASSIFICATION	3.744310495936349E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999661709590047	WITHOUT_CLASSIFICATION	3.3829040995300724E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999605734157231	WITHOUT_CLASSIFICATION	3.942658427690416E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998562116804699	WITHOUT_CLASSIFICATION	1.4378831953008747E-4	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999554206163461	WITHOUT_CLASSIFICATION	4.457938365386789E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999712767487772	WITHOUT_CLASSIFICATION	2.8723251222747072E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999148843363931	WITHOUT_CLASSIFICATION	8.511566360687296E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997172569655751	WITHOUT_CLASSIFICATION	2.827430344249591E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999462215317441	WITHOUT_CLASSIFICATION	5.377846825601159E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.99999643664766	WITHOUT_CLASSIFICATION	3.563352340050701E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999811689348652	WITHOUT_CLASSIFICATION	1.8831065134759036E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998974689688988	WITHOUT_CLASSIFICATION	1.0253103110113936E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999916812732257	WITHOUT_CLASSIFICATION	8.318726774385145E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999699409186248	WITHOUT_CLASSIFICATION	3.0059081375217564E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999981968059772	WITHOUT_CLASSIFICATION	1.8031940227909216E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999876390683194	WITHOUT_CLASSIFICATION	1.2360931680507625E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998142923035319	WITHOUT_CLASSIFICATION	1.8570769646816126E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999933121237758	WITHOUT_CLASSIFICATION	6.687876224195947E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999551252956	WITHOUT_CLASSIFICATION	4.487470440049962E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999266899328864	WITHOUT_CLASSIFICATION	7.331006711359998E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999907498025489	WITHOUT_CLASSIFICATION	9.250197451178779E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998303404446157	WITHOUT_CLASSIFICATION	1.6965955538423812E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998023902827129	WITHOUT_CLASSIFICATION	1.976097172871158E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999859549314545	WITHOUT_CLASSIFICATION	1.4045068545602947E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999897897791376	WITHOUT_CLASSIFICATION	1.0210220862448722E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999498622670677	WITHOUT_CLASSIFICATION	5.0137732932309026E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999818247803774	WITHOUT_CLASSIFICATION	1.8175219622598615E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979544703316273	WITHOUT_CLASSIFICATION	0.0020455296683726506	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999773539704637	WITHOUT_CLASSIFICATION	2.264602953633078E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9989898576318044	WITHOUT_CLASSIFICATION	0.0010101423681956375	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999917435710381	WITHOUT_CLASSIFICATION	8.256428961807644E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9975592799540346	WITHOUT_CLASSIFICATION	0.002440720045965349	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999818306769315	WITHOUT_CLASSIFICATION	1.8169323068420498E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998680279543117	WITHOUT_CLASSIFICATION	1.3197204568820021E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996161770157973	WITHOUT_CLASSIFICATION	3.838229842026856E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997087212295	WITHOUT_CLASSIFICATION	2.912787705904901E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999968482401981	WITHOUT_CLASSIFICATION	3.151759801910806E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999548947429326	WITHOUT_CLASSIFICATION	4.510525706734496E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997730380699675	WITHOUT_CLASSIFICATION	2.2696193003248597E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992822608707834	WITHOUT_CLASSIFICATION	7.177391292165074E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999897899937481	WITHOUT_CLASSIFICATION	1.0210006251852713E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999419149949695	WITHOUT_CLASSIFICATION	5.808500503041994E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998950237092421	WITHOUT_CLASSIFICATION	1.0497629075785321E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999920881871094	WITHOUT_CLASSIFICATION	7.911812890654301E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999968110218422	WITHOUT_CLASSIFICATION	3.18897815785092E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999889349075347	WITHOUT_CLASSIFICATION	1.1065092465230039E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9998442897130154	WITHOUT_CLASSIFICATION	1.557102869846577E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999771920569733	WITHOUT_CLASSIFICATION	2.280794302660738E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988308175741952	WITHOUT_CLASSIFICATION	0.001169182425804742	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988308175741952	WITHOUT_CLASSIFICATION	0.001169182425804742	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9996678462550349	WITHOUT_CLASSIFICATION	3.3215374496510964E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999924767087799	WITHOUT_CLASSIFICATION	7.523291220087753E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999968868326035	WITHOUT_CLASSIFICATION	3.113167396497245E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999555531525727	WITHOUT_CLASSIFICATION	4.444684742743489E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999716208587733	WITHOUT_CLASSIFICATION	2.83791412266716E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999920172950097	WITHOUT_CLASSIFICATION	7.982704990275224E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9993350428559311	WITHOUT_CLASSIFICATION	6.649571440689041E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9977152970582116	WITHOUT_CLASSIFICATION	0.00228470294178843	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9977152970582116	WITHOUT_CLASSIFICATION	0.00228470294178843	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6088437898255777	IMPLEMENTATION	0.39115621017442215	WITHOUT_CLASSIFICATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999362563700128	WITHOUT_CLASSIFICATION	6.374362998720692E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999957208649026	WITHOUT_CLASSIFICATION	4.279135097428308E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998773987866727	WITHOUT_CLASSIFICATION	1.2260121332734712E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998773987866727	WITHOUT_CLASSIFICATION	1.2260121332734712E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998773987866727	WITHOUT_CLASSIFICATION	1.2260121332734712E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998701264278569	WITHOUT_CLASSIFICATION	1.298735721431661E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999886114631135	WITHOUT_CLASSIFICATION	1.1388536886572311E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9127787240236725	WITHOUT_CLASSIFICATION	0.08722127597632742	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999748502475676	WITHOUT_CLASSIFICATION	2.514975243242857E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999964210311725	WITHOUT_CLASSIFICATION	3.5789688274940375E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9990864042321652	WITHOUT_CLASSIFICATION	9.135957678347826E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999467678594813	WITHOUT_CLASSIFICATION	5.323214051871055E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9992083909621505	WITHOUT_CLASSIFICATION	7.916090378494177E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999819750067802	WITHOUT_CLASSIFICATION	1.802499321983974E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9996973063764955	WITHOUT_CLASSIFICATION	3.026936235045077E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999767572718643	WITHOUT_CLASSIFICATION	2.3242728135645184E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999562726064063	WITHOUT_CLASSIFICATION	4.3727393593734824E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999526136929003	WITHOUT_CLASSIFICATION	4.73863070996231E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999995397393164	WITHOUT_CLASSIFICATION	4.6026068357983535E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999897455660095	WITHOUT_CLASSIFICATION	1.0254433990411024E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998748911907169	WITHOUT_CLASSIFICATION	1.2510880928305143E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9993225178313052	WITHOUT_CLASSIFICATION	6.774821686948067E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988308175741952	WITHOUT_CLASSIFICATION	0.001169182425804742	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9995777175492777	WITHOUT_CLASSIFICATION	4.222824507223124E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.8331388494766538	WITHOUT_CLASSIFICATION	0.1668611505233462	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999964585692432	WITHOUT_CLASSIFICATION	3.54143075679871E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999594337597348	WITHOUT_CLASSIFICATION	4.056624026527217E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999753480050823	WITHOUT_CLASSIFICATION	2.46519949177189E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999911430705	WITHOUT_CLASSIFICATION	8.856929500394062E-8	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998421977999468	WITHOUT_CLASSIFICATION	1.5780220005315616E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998723466789169	WITHOUT_CLASSIFICATION	1.2765332108314318E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999964363571512	WITHOUT_CLASSIFICATION	3.5636428488583587E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999820113741383	WITHOUT_CLASSIFICATION	1.7988625861713327E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999996627924219	WITHOUT_CLASSIFICATION	3.372075781647952E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999996454001054	WITHOUT_CLASSIFICATION	3.545998945961666E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999951171159878	WITHOUT_CLASSIFICATION	4.882884012146092E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999848013101823	WITHOUT_CLASSIFICATION	1.5198689817589496E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9996722496560556	WITHOUT_CLASSIFICATION	3.277503439443106E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9890451537129996	WITHOUT_CLASSIFICATION	0.010954846287000379	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999853010377703	WITHOUT_CLASSIFICATION	1.4698962229764252E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999859004936815	WITHOUT_CLASSIFICATION	1.4099506318464038E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999791691292568	WITHOUT_CLASSIFICATION	2.0830870743169312E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999791691292568	WITHOUT_CLASSIFICATION	2.0830870743169312E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999381321485928	WITHOUT_CLASSIFICATION	6.186785140715135E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999955817027355	WITHOUT_CLASSIFICATION	4.418297264480705E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999202153640271	WITHOUT_CLASSIFICATION	7.978463597286581E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998984031716568	WITHOUT_CLASSIFICATION	1.0159682834325847E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998885257730366	WITHOUT_CLASSIFICATION	1.1147422696341797E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998476406408149	WITHOUT_CLASSIFICATION	1.523593591851334E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999419308699008	WITHOUT_CLASSIFICATION	5.8069130099268566E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998928699494776	WITHOUT_CLASSIFICATION	1.0713005052244994E-4	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999937682331094	WITHOUT_CLASSIFICATION	6.231766890600038E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999972400632493	WITHOUT_CLASSIFICATION	2.7599367507288597E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999327288834581	WITHOUT_CLASSIFICATION	6.727111654184322E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995016592214655	WITHOUT_CLASSIFICATION	4.983407785345476E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999916146131096	WITHOUT_CLASSIFICATION	8.385386890343493E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999956370771375	WITHOUT_CLASSIFICATION	4.362922862553379E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999911507935841	WITHOUT_CLASSIFICATION	8.849206415849277E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999637466370962	WITHOUT_CLASSIFICATION	3.6253362903763545E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997055037322	WITHOUT_CLASSIFICATION	2.944962678202427E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997055037322	WITHOUT_CLASSIFICATION	2.944962678202427E-7	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996847926160588	WITHOUT_CLASSIFICATION	3.1520738394116144E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999615497763	WITHOUT_CLASSIFICATION	3.8450223591357546E-8	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999895455975597	WITHOUT_CLASSIFICATION	1.045440244031388E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999894310248928	WITHOUT_CLASSIFICATION	1.0568975107151584E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999850750694539	WITHOUT_CLASSIFICATION	1.4924930546170106E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999769020253663	WITHOUT_CLASSIFICATION	2.3097974633719053E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9984971767532729	WITHOUT_CLASSIFICATION	0.001502823246727091	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999511488454913	WITHOUT_CLASSIFICATION	4.885115450863129E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999350526463464	WITHOUT_CLASSIFICATION	6.494735365366043E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999997657041598	WITHOUT_CLASSIFICATION	2.3429584023865884E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999379101686973	WITHOUT_CLASSIFICATION	6.208983130269013E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999511488454913	WITHOUT_CLASSIFICATION	4.885115450863129E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999502390208223	WITHOUT_CLASSIFICATION	4.976097917769995E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999172404961654	WITHOUT_CLASSIFICATION	8.275950383460974E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999521586120129	WITHOUT_CLASSIFICATION	4.7841387986976936E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999385304026436	WITHOUT_CLASSIFICATION	6.146959735643301E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999704139394	WITHOUT_CLASSIFICATION	2.9586060503297217E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999314771213382	WITHOUT_CLASSIFICATION	6.852287866172615E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9964155403635242	WITHOUT_CLASSIFICATION	0.003584459636475891	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999431563634944	WITHOUT_CLASSIFICATION	5.6843636505621746E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999910851286483	WITHOUT_CLASSIFICATION	8.914871351665219E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999615517824814	WITHOUT_CLASSIFICATION	3.844821751861377E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997459364516937	WITHOUT_CLASSIFICATION	2.5406354830634E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999756691359437	WITHOUT_CLASSIFICATION	2.4330864056325366E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996995050244737	WITHOUT_CLASSIFICATION	3.0049497552631446E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.998201275587334	WITHOUT_CLASSIFICATION	0.0017987244126659813	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998627998347696	WITHOUT_CLASSIFICATION	1.3720016523045684E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999577798594897	WITHOUT_CLASSIFICATION	4.222014051022485E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.99993110078066	WITHOUT_CLASSIFICATION	6.889921934000743E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9939749740672946	WITHOUT_CLASSIFICATION	0.006025025932705346	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9939749740672946	WITHOUT_CLASSIFICATION	0.006025025932705346	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9964155403635242	WITHOUT_CLASSIFICATION	0.003584459636475891	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9513347361350951	WITHOUT_CLASSIFICATION	0.0486652638649049	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998698265359419	WITHOUT_CLASSIFICATION	1.301734640580898E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9996970214370257	WITHOUT_CLASSIFICATION	3.0297856297426115E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999891750621938	WITHOUT_CLASSIFICATION	1.0824937806324937E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999922509084908	WITHOUT_CLASSIFICATION	7.749091509146406E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999121719625053	WITHOUT_CLASSIFICATION	8.782803749470939E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999810484660397	WITHOUT_CLASSIFICATION	1.895153396024585E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.99940595097645	WITHOUT_CLASSIFICATION	5.940490235500607E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999936946421937	WITHOUT_CLASSIFICATION	6.30535780631165E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999836635956754	WITHOUT_CLASSIFICATION	1.6336404324616418E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999529159365723	WITHOUT_CLASSIFICATION	4.708406342779415E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998156306589401	WITHOUT_CLASSIFICATION	1.8436934105992505E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995850123267881	WITHOUT_CLASSIFICATION	4.1498767321199593E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999840518663236	WITHOUT_CLASSIFICATION	1.594813367649452E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999540084450705	WITHOUT_CLASSIFICATION	4.5991554929424096E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999970722040687	WITHOUT_CLASSIFICATION	2.927795931117938E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999442631732	WITHOUT_CLASSIFICATION	5.573682681483359E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999990647719983	WITHOUT_CLASSIFICATION	9.352280016882533E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998957592363305	WITHOUT_CLASSIFICATION	1.0424076366958485E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998780990548026	WITHOUT_CLASSIFICATION	1.2190094519742373E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9991664555313882	WITHOUT_CLASSIFICATION	8.335444686118847E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999944575348523	WITHOUT_CLASSIFICATION	5.5424651477391E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9996894946773563	WITHOUT_CLASSIFICATION	3.1050532264365304E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999995606447579	WITHOUT_CLASSIFICATION	4.393552420929612E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999899683012403	WITHOUT_CLASSIFICATION	1.0031698759787932E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999701019260092	WITHOUT_CLASSIFICATION	2.9898073990755567E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999913255581107	WITHOUT_CLASSIFICATION	8.674441889347611E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998778214059673	WITHOUT_CLASSIFICATION	1.221785940327653E-4	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999717474324613	WITHOUT_CLASSIFICATION	2.8252567538713267E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999866073044482	WITHOUT_CLASSIFICATION	1.339269555178535E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999540084450705	WITHOUT_CLASSIFICATION	4.5991554929424096E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999922268393979	WITHOUT_CLASSIFICATION	7.773160602140636E-6	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999992863239356	WITHOUT_CLASSIFICATION	7.136760643442901E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999796342099686	WITHOUT_CLASSIFICATION	2.0365790031431295E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999013593512793	WITHOUT_CLASSIFICATION	9.864064872070751E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987812051316279	WITHOUT_CLASSIFICATION	0.001218794868372049	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999862839055556	WITHOUT_CLASSIFICATION	1.3716094444370861E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999543027092915	WITHOUT_CLASSIFICATION	4.569729070847452E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998999265201647	WITHOUT_CLASSIFICATION	1.0007347983534929E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9975837395807577	WITHOUT_CLASSIFICATION	0.002416260419242228	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9959224037455915	WITHOUT_CLASSIFICATION	0.004077596254408538	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999347946253935	WITHOUT_CLASSIFICATION	6.520537460646909E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999994794584174	WITHOUT_CLASSIFICATION	5.205415826590979E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9982213668584182	WITHOUT_CLASSIFICATION	0.0017786331415817296	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999861926590319	WITHOUT_CLASSIFICATION	1.3807340968123978E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998691638168398	WITHOUT_CLASSIFICATION	1.3083618316012257E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9960860796231801	WITHOUT_CLASSIFICATION	0.0039139203768198735	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995661855776	WITHOUT_CLASSIFICATION	4.338144223949293E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999970257460717	WITHOUT_CLASSIFICATION	2.974253928132522E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9975755581866964	WITHOUT_CLASSIFICATION	0.0024244418133035355	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.99998594940548	WITHOUT_CLASSIFICATION	1.4050594520013343E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999350526463464	WITHOUT_CLASSIFICATION	6.494735365366043E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999793085747297	WITHOUT_CLASSIFICATION	2.069142527027955E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999540084450705	WITHOUT_CLASSIFICATION	4.5991554929424096E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999603088898662	WITHOUT_CLASSIFICATION	3.969111013386836E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999882915243006	WITHOUT_CLASSIFICATION	1.1708475699351502E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999862776208515	WITHOUT_CLASSIFICATION	1.3722379148596879E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999856695066939	WITHOUT_CLASSIFICATION	1.4330493306043108E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999454719356725	WITHOUT_CLASSIFICATION	5.4528064327496065E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999759036896587	WITHOUT_CLASSIFICATION	2.4096310341272396E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999553374428845	WITHOUT_CLASSIFICATION	4.4662557115461274E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999893654072862	WITHOUT_CLASSIFICATION	1.063459271369287E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999931614394688	WITHOUT_CLASSIFICATION	6.83856053119963E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999905407977028	WITHOUT_CLASSIFICATION	9.459202297283888E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9979486879849362	WITHOUT_CLASSIFICATION	0.0020513120150639085	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999457129482765	WITHOUT_CLASSIFICATION	5.428705172339E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997675907285192	WITHOUT_CLASSIFICATION	2.3240927148080918E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997675907285192	WITHOUT_CLASSIFICATION	2.3240927148080918E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998239036315	WITHOUT_CLASSIFICATION	1.7609636854730235E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.991190298163098	WITHOUT_CLASSIFICATION	0.008809701836901968	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997637893076441	WITHOUT_CLASSIFICATION	2.3621069235587875E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999986798682239	WITHOUT_CLASSIFICATION	1.3201317760973213E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999987430902301	WITHOUT_CLASSIFICATION	1.2569097699610952E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998542755714471	WITHOUT_CLASSIFICATION	1.4572442855294038E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992180237648	WITHOUT_CLASSIFICATION	7.819762351204731E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999963078841936	WITHOUT_CLASSIFICATION	3.692115806533196E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999801744453658	WITHOUT_CLASSIFICATION	1.982555463423908E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9997684023550625	WITHOUT_CLASSIFICATION	2.3159764493754158E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996687343106186	WITHOUT_CLASSIFICATION	3.312656893813363E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996687343106186	WITHOUT_CLASSIFICATION	3.312656893813363E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999987871928991	WITHOUT_CLASSIFICATION	1.2128071009378116E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998484961033295	WITHOUT_CLASSIFICATION	1.5150389667041385E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999993413137663	WITHOUT_CLASSIFICATION	6.586862336932432E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996354498478873	WITHOUT_CLASSIFICATION	3.645501521126891E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991428583269	WITHOUT_CLASSIFICATION	8.571416730494912E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999701195556879	WITHOUT_CLASSIFICATION	2.9880444312040852E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999988131174015	WITHOUT_CLASSIFICATION	1.1868825984810463E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999955073625274	WITHOUT_CLASSIFICATION	4.492637472580465E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999911151401727	WITHOUT_CLASSIFICATION	8.88485982729012E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999875700993838	WITHOUT_CLASSIFICATION	1.242990061620544E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999476941987373	WITHOUT_CLASSIFICATION	5.23058012628221E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759777510586	WITHOUT_CLASSIFICATION	1.2402224894133608E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999843064634598	WITHOUT_CLASSIFICATION	1.5693536540269486E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999448278278841	WITHOUT_CLASSIFICATION	5.5172172115821886E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999502459763743	WITHOUT_CLASSIFICATION	4.975402362570127E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999852208115141	WITHOUT_CLASSIFICATION	1.4779188485960928E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992845355261035	WITHOUT_CLASSIFICATION	7.154644738965382E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9988224187118724	WITHOUT_CLASSIFICATION	0.0011775812881275889	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999198621661246	WITHOUT_CLASSIFICATION	8.013783387538833E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9996881096208912	WITHOUT_CLASSIFICATION	3.118903791088369E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9993815506595266	WITHOUT_CLASSIFICATION	6.184493404734955E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999826083123357	WITHOUT_CLASSIFICATION	1.739168766430447E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997789031344385	WITHOUT_CLASSIFICATION	2.210968655615806E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997205036561462	WITHOUT_CLASSIFICATION	2.794963438538024E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999565263170528	WITHOUT_CLASSIFICATION	4.347368294729111E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997542256732779	WITHOUT_CLASSIFICATION	2.4577432672222635E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998438818095536	WITHOUT_CLASSIFICATION	0.0015611819044639996	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999872940327262	WITHOUT_CLASSIFICATION	1.2705967273850476E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9993317190381743	WITHOUT_CLASSIFICATION	6.682809618256406E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982123585714525	WITHOUT_CLASSIFICATION	0.0017876414285474336	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9976712861506164	WITHOUT_CLASSIFICATION	0.0023287138493836446	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999885148281102	WITHOUT_CLASSIFICATION	1.1485171889860158E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999992746487285	WITHOUT_CLASSIFICATION	7.253512715070339E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999339462777052	WITHOUT_CLASSIFICATION	6.605372229493259E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998424866159108	WITHOUT_CLASSIFICATION	0.0015751338408920088	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998510768775144	WITHOUT_CLASSIFICATION	1.4892312248556845E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999694937303283	WITHOUT_CLASSIFICATION	3.050626967170221E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999561822590255	WITHOUT_CLASSIFICATION	4.3817740974447656E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998922033376537	WITHOUT_CLASSIFICATION	1.0779666234625081E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999946619614912	WITHOUT_CLASSIFICATION	5.338038508766309E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999402249917266	WITHOUT_CLASSIFICATION	5.977500827336556E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9986031933639662	WITHOUT_CLASSIFICATION	0.0013968066360338302	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997478822147086	WITHOUT_CLASSIFICATION	2.521177852914496E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998738596442969	WITHOUT_CLASSIFICATION	1.26140355703076E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996495145162815	WITHOUT_CLASSIFICATION	3.504854837185432E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999994721176124	WITHOUT_CLASSIFICATION	5.278823876765561E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999962252886965	WITHOUT_CLASSIFICATION	3.774711303494717E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998523895173826	WITHOUT_CLASSIFICATION	1.476104826172604E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999961110740847	WITHOUT_CLASSIFICATION	3.888925915335162E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9997458444537322	WITHOUT_CLASSIFICATION	2.541555462677894E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999609591037275	WITHOUT_CLASSIFICATION	3.904089627246038E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999916839392025	WITHOUT_CLASSIFICATION	8.316060797563081E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996196628617227	WITHOUT_CLASSIFICATION	3.803371382773998E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9996138477895811	WITHOUT_CLASSIFICATION	3.8615221041891196E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996196628617227	WITHOUT_CLASSIFICATION	3.803371382773998E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999884511375385	WITHOUT_CLASSIFICATION	1.154886246142033E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998948090773614	WITHOUT_CLASSIFICATION	1.0519092263850714E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9991883741116923	WITHOUT_CLASSIFICATION	8.116258883078128E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999672461843212	WITHOUT_CLASSIFICATION	3.275381567868458E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999153916904238	WITHOUT_CLASSIFICATION	8.460830957622457E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9991883741116923	WITHOUT_CLASSIFICATION	8.116258883078128E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999972653510276	WITHOUT_CLASSIFICATION	2.7346489723479288E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998836825877944	WITHOUT_CLASSIFICATION	1.1631741220566773E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999752547652018	WITHOUT_CLASSIFICATION	2.4745234798328903E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999347341723782	WITHOUT_CLASSIFICATION	6.526582762179658E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999588446121087	WITHOUT_CLASSIFICATION	4.115538789124582E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999893035156537	WITHOUT_CLASSIFICATION	1.0696484346214246E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999702843765658	WITHOUT_CLASSIFICATION	2.971562343422462E-5	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5217690783941018	IMPLEMENTATION	0.47823092160589825	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999492284884464	WITHOUT_CLASSIFICATION	5.077151155360915E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999980553151099	WITHOUT_CLASSIFICATION	1.944684890087678E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999837123610321	WITHOUT_CLASSIFICATION	1.6287638967937495E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999690387967525	WITHOUT_CLASSIFICATION	3.0961203247478944E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997600925729	WITHOUT_CLASSIFICATION	2.3990742720584597E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999939991124062	WITHOUT_CLASSIFICATION	6.0008875938108815E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999329986027	WITHOUT_CLASSIFICATION	6.70013973796947E-8	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9992972561348569	WITHOUT_CLASSIFICATION	7.027438651432526E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999576179489282	WITHOUT_CLASSIFICATION	4.23820510717501E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998552968882051	WITHOUT_CLASSIFICATION	1.4470311179489958E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997879271190095	WITHOUT_CLASSIFICATION	2.120728809905086E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999993829292907	WITHOUT_CLASSIFICATION	6.170707093055905E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9996154101474654	WITHOUT_CLASSIFICATION	3.845898525346242E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.992736962698784	WITHOUT_CLASSIFICATION	0.00726303730121609	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9991762613793391	WITHOUT_CLASSIFICATION	8.237386206608651E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9913472563673129	WITHOUT_CLASSIFICATION	0.008652743632687046	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998466436581058	WITHOUT_CLASSIFICATION	1.5335634189424124E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999994212552	WITHOUT_CLASSIFICATION	5.787448724003457E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9994182978999298	WITHOUT_CLASSIFICATION	5.817021000703058E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9989078264946737	WITHOUT_CLASSIFICATION	0.001092173505326328	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9997010421637254	WITHOUT_CLASSIFICATION	2.98957836274624E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999095560915812	WITHOUT_CLASSIFICATION	9.04439084188021E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9994975523891805	WITHOUT_CLASSIFICATION	5.024476108195826E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9939758286949795	WITHOUT_CLASSIFICATION	0.006024171305020482	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999993829292907	WITHOUT_CLASSIFICATION	6.170707093055905E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999985327637083	WITHOUT_CLASSIFICATION	1.467236291671402E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998523588726065	WITHOUT_CLASSIFICATION	1.4764112739354792E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9993346060705791	WITHOUT_CLASSIFICATION	6.653939294208014E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9979587401892538	WITHOUT_CLASSIFICATION	0.002041259810746238	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999932969878625	WITHOUT_CLASSIFICATION	6.703012137528773E-6	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999980575901032	WITHOUT_CLASSIFICATION	1.942409896801098E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.99997933763384	WITHOUT_CLASSIFICATION	2.0662366159993672E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997879167077361	WITHOUT_CLASSIFICATION	2.1208329226386104E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999321737133622	WITHOUT_CLASSIFICATION	6.78262866379039E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9985218845285838	WITHOUT_CLASSIFICATION	0.001478115471416217	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999972352146472	WITHOUT_CLASSIFICATION	2.764785352736028E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999567135573257	WITHOUT_CLASSIFICATION	4.328644267422417E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999799703270951	WITHOUT_CLASSIFICATION	2.0029672904971738E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9997096583802173	WITHOUT_CLASSIFICATION	2.9034161978259423E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997196800924055	WITHOUT_CLASSIFICATION	2.803199075945301E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999917174515449	WITHOUT_CLASSIFICATION	8.28254845508249E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9770018611939706	WITHOUT_CLASSIFICATION	0.022998138806029463	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996920215134019	WITHOUT_CLASSIFICATION	3.079784865981955E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999596292968167	WITHOUT_CLASSIFICATION	4.0370703183296785E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999982067946202	WITHOUT_CLASSIFICATION	1.7932053797891198E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918542768823597	WITHOUT_CLASSIFICATION	0.00814572311764021	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918542768823597	WITHOUT_CLASSIFICATION	0.00814572311764021	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999976649244282	WITHOUT_CLASSIFICATION	2.3350755718039357E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918542768823597	WITHOUT_CLASSIFICATION	0.00814572311764021	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918542768823597	WITHOUT_CLASSIFICATION	0.00814572311764021	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9983934907419406	WITHOUT_CLASSIFICATION	0.0016065092580593503	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9994403443417722	WITHOUT_CLASSIFICATION	5.596556582278085E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998793421728351	WITHOUT_CLASSIFICATION	1.206578271648801E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998793421728351	WITHOUT_CLASSIFICATION	1.206578271648801E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999079387097698	WITHOUT_CLASSIFICATION	9.20612902303166E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998719319566018	WITHOUT_CLASSIFICATION	1.280680433981177E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9990360932525064	WITHOUT_CLASSIFICATION	9.639067474935249E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999990698049256	WITHOUT_CLASSIFICATION	9.301950743936947E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9988358420558467	WITHOUT_CLASSIFICATION	0.0011641579441532873	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9952548364734207	WITHOUT_CLASSIFICATION	0.004745163526579375	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9987166451244083	WITHOUT_CLASSIFICATION	0.001283354875591651	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9986261953916913	WITHOUT_CLASSIFICATION	0.001373804608308693	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9992469398789724	WITHOUT_CLASSIFICATION	7.530601210275352E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999758825219172	WITHOUT_CLASSIFICATION	2.4117478082793953E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9991239253277342	WITHOUT_CLASSIFICATION	8.760746722658624E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998459929723408	WITHOUT_CLASSIFICATION	1.5400702765910065E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999939642247357	WITHOUT_CLASSIFICATION	6.035775264208077E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996822728380286	WITHOUT_CLASSIFICATION	3.177271619714423E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9994433966087671	WITHOUT_CLASSIFICATION	5.566033912329201E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9985755346165349	WITHOUT_CLASSIFICATION	0.0014244653834651216	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999402982237866	WITHOUT_CLASSIFICATION	5.970177621340357E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9994959494111749	WITHOUT_CLASSIFICATION	5.040505888250379E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999939642247357	WITHOUT_CLASSIFICATION	6.035775264208077E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9996154101474654	WITHOUT_CLASSIFICATION	3.845898525346242E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9971742728195504	WITHOUT_CLASSIFICATION	0.0028257271804496783	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999758777642114	WITHOUT_CLASSIFICATION	2.4122235788614735E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99985936968328	WITHOUT_CLASSIFICATION	1.4063031672001435E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9970414270065594	WITHOUT_CLASSIFICATION	0.0029585729934405625	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999654007190746	WITHOUT_CLASSIFICATION	3.459928092539486E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9988708138705835	WITHOUT_CLASSIFICATION	0.0011291861294164482	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999609670296483	WITHOUT_CLASSIFICATION	3.903297035156292E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999533939107148	WITHOUT_CLASSIFICATION	4.660608928508467E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999962246451177	WITHOUT_CLASSIFICATION	3.775354882297684E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9983040226388077	WITHOUT_CLASSIFICATION	0.0016959773611922864	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999866792905607	WITHOUT_CLASSIFICATION	1.3320709439358078E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998677039118935	WITHOUT_CLASSIFICATION	1.322960881064577E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997807130471023	WITHOUT_CLASSIFICATION	2.1928695289780926E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.993871701621818	WITHOUT_CLASSIFICATION	0.006128298378181908	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999645471827344	WITHOUT_CLASSIFICATION	3.545281726553916E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9998487335106385	WITHOUT_CLASSIFICATION	1.5126648936155575E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997129994472307	WITHOUT_CLASSIFICATION	2.870005527692992E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999707764664365	WITHOUT_CLASSIFICATION	2.9223533563441125E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997784895435291	WITHOUT_CLASSIFICATION	2.2151045647091994E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999553305041031	WITHOUT_CLASSIFICATION	4.466949589693269E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9991182222805488	WITHOUT_CLASSIFICATION	8.817777194512711E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999981298872969	WITHOUT_CLASSIFICATION	1.870112703099418E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999533939107148	WITHOUT_CLASSIFICATION	4.660608928508467E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9981847439369632	WITHOUT_CLASSIFICATION	0.0018152560630367957	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9992067993433902	WITHOUT_CLASSIFICATION	7.932006566098636E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.997889750180162	WITHOUT_CLASSIFICATION	0.0021102498198379348	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999435691955862	WITHOUT_CLASSIFICATION	5.6430804413733344E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9981871473982644	WITHOUT_CLASSIFICATION	0.0018128526017355715	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9976678264194746	WITHOUT_CLASSIFICATION	0.0023321735805253508	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9975422747734344	WITHOUT_CLASSIFICATION	0.002457725226565638	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9976626628670024	WITHOUT_CLASSIFICATION	0.002337337132997534	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9955738506374988	WITHOUT_CLASSIFICATION	0.004426149362501207	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998847867395023	WITHOUT_CLASSIFICATION	1.1521326049757603E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999759022108701	WITHOUT_CLASSIFICATION	2.4097789129847137E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999955291756684	WITHOUT_CLASSIFICATION	4.470824331723689E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998843139380884	WITHOUT_CLASSIFICATION	1.1568606191153817E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999681910802646	WITHOUT_CLASSIFICATION	3.180891973542029E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996798416695479	WITHOUT_CLASSIFICATION	3.201583304520248E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998847867395023	WITHOUT_CLASSIFICATION	1.1521326049757603E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999902138065321	WITHOUT_CLASSIFICATION	9.786193467971668E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999938762347472	WITHOUT_CLASSIFICATION	6.123765252746162E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999412699707234	WITHOUT_CLASSIFICATION	5.8730029276612617E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999654957646993	WITHOUT_CLASSIFICATION	3.450423530071976E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9997527948643916	WITHOUT_CLASSIFICATION	2.472051356084676E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9978748385806103	WITHOUT_CLASSIFICATION	0.0021251614193897625	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999936433726874	WITHOUT_CLASSIFICATION	6.356627312592298E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999290862306246	WITHOUT_CLASSIFICATION	7.09137693753194E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998878013807941	WITHOUT_CLASSIFICATION	1.1219861920591626E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998989730890104	WITHOUT_CLASSIFICATION	0.0010102691098959756	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998989730890104	WITHOUT_CLASSIFICATION	0.0010102691098959756	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998989730890104	WITHOUT_CLASSIFICATION	0.0010102691098959756	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999719392726466	WITHOUT_CLASSIFICATION	2.8060727353311392E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999719392726466	WITHOUT_CLASSIFICATION	2.8060727353311392E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999911245780145	WITHOUT_CLASSIFICATION	8.875421985416891E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999936365969561	WITHOUT_CLASSIFICATION	6.363403044040519E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997009189496443	WITHOUT_CLASSIFICATION	2.9908105035564536E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9996364997719066	WITHOUT_CLASSIFICATION	3.6350022809335974E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9959205033863919	WITHOUT_CLASSIFICATION	0.00407949661360809	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998743464277846	WITHOUT_CLASSIFICATION	1.256535722153323E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276038074907	WITHOUT_CLASSIFICATION	7.239619250931654E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999958886285895	WITHOUT_CLASSIFICATION	4.111371410561445E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999139699356272	WITHOUT_CLASSIFICATION	8.603006437276816E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998743464277846	WITHOUT_CLASSIFICATION	1.256535722153323E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276038074907	WITHOUT_CLASSIFICATION	7.239619250931654E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999978779006286	WITHOUT_CLASSIFICATION	2.1220993714488113E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999745725174248	WITHOUT_CLASSIFICATION	2.5427482575264423E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999996412159667	WITHOUT_CLASSIFICATION	3.5878403329638205E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999972886072367	WITHOUT_CLASSIFICATION	2.7113927633561965E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995827221953252	WITHOUT_CLASSIFICATION	4.172778046748785E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.999925912540409	WITHOUT_CLASSIFICATION	7.408745959104279E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999095674865988	WITHOUT_CLASSIFICATION	9.043251340119522E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998134276978589	WITHOUT_CLASSIFICATION	1.8657230214112438E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.998964884310735	WITHOUT_CLASSIFICATION	0.0010351156892648655	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999825493689236	WITHOUT_CLASSIFICATION	1.745063107632227E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999722538988413	WITHOUT_CLASSIFICATION	2.7746101158684777E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997041988857298	WITHOUT_CLASSIFICATION	2.958011142701844E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997009541911122	WITHOUT_CLASSIFICATION	2.9904580888793835E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999510935213173	WITHOUT_CLASSIFICATION	4.890647868272654E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999485787347946	WITHOUT_CLASSIFICATION	5.142126520540655E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999806512505542	WITHOUT_CLASSIFICATION	1.9348749445853682E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999551931415831	WITHOUT_CLASSIFICATION	4.480685841690546E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9936304771926175	WITHOUT_CLASSIFICATION	0.006369522807382403	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999610118976621	WITHOUT_CLASSIFICATION	3.8988102338050056E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999826803604985	WITHOUT_CLASSIFICATION	1.7319639501442992E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.848166194583543	WITHOUT_CLASSIFICATION	0.15183380541645694	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773277338392	WITHOUT_CLASSIFICATION	1.2267226616082962E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999977759660521	WITHOUT_CLASSIFICATION	2.2240339478589086E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048746347835	WITHOUT_CLASSIFICATION	9.512536521646607E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998302272921837	WITHOUT_CLASSIFICATION	1.697727078163619E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996364876734416	WITHOUT_CLASSIFICATION	3.6351232655832956E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996364876734416	WITHOUT_CLASSIFICATION	3.6351232655832956E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999692309827808	WITHOUT_CLASSIFICATION	3.0769017219140335E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999453351623759	WITHOUT_CLASSIFICATION	5.46648376240617E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.997151154903042	WITHOUT_CLASSIFICATION	0.002848845096958124	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9990555961496399	WITHOUT_CLASSIFICATION	9.444038503600321E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999929906416645	WITHOUT_CLASSIFICATION	7.009358335500473E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999332767128252	WITHOUT_CLASSIFICATION	6.672328717487527E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999090273705585	WITHOUT_CLASSIFICATION	9.097262944151343E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9988589668552904	WITHOUT_CLASSIFICATION	0.0011410331447095747	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9971280219800449	WITHOUT_CLASSIFICATION	0.0028719780199551207	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998654821081052	WITHOUT_CLASSIFICATION	1.3451789189482545E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998969166127171	WITHOUT_CLASSIFICATION	1.0308338728292588E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999821584611129	WITHOUT_CLASSIFICATION	1.784153888709302E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999995389829283	WITHOUT_CLASSIFICATION	4.6101707181301605E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.998280412752263	WITHOUT_CLASSIFICATION	0.0017195872477369263	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999403221609579	WITHOUT_CLASSIFICATION	5.967783904218371E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998194991257255	WITHOUT_CLASSIFICATION	1.8050087427439552E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998969166127171	WITHOUT_CLASSIFICATION	1.0308338728292588E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998969166127171	WITHOUT_CLASSIFICATION	1.0308338728292588E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999802922466836	WITHOUT_CLASSIFICATION	1.9707753316369438E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999924749664779	WITHOUT_CLASSIFICATION	7.525033522051022E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9991640177889505	WITHOUT_CLASSIFICATION	8.359822110495451E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999891884945774	WITHOUT_CLASSIFICATION	1.0811505422660549E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999848013101823	WITHOUT_CLASSIFICATION	1.5198689817589496E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999485787347946	WITHOUT_CLASSIFICATION	5.142126520540655E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999548816318889	WITHOUT_CLASSIFICATION	4.5118368111105603E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999354243392641	WITHOUT_CLASSIFICATION	6.45756607358754E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999287867184969	WITHOUT_CLASSIFICATION	7.121328150301234E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999486725098111	WITHOUT_CLASSIFICATION	5.132749018891022E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999952520364669	WITHOUT_CLASSIFICATION	4.747963533124829E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999895180205569	WITHOUT_CLASSIFICATION	1.048197944310151E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999487013858805	WITHOUT_CLASSIFICATION	5.129861411949154E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999487013858805	WITHOUT_CLASSIFICATION	5.129861411949154E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999487013858805	WITHOUT_CLASSIFICATION	5.129861411949154E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999487013858805	WITHOUT_CLASSIFICATION	5.129861411949154E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110797561979	WITHOUT_CLASSIFICATION	8.892024380210277E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9996325880701791	WITHOUT_CLASSIFICATION	3.674119298209008E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763429900432	WITHOUT_CLASSIFICATION	1.2365700995674878E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999155866432411	WITHOUT_CLASSIFICATION	8.441335675894539E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999827141291158	WITHOUT_CLASSIFICATION	1.7285870884218715E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998882512734297	WITHOUT_CLASSIFICATION	1.117487265703413E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998853306716141	WITHOUT_CLASSIFICATION	1.146693283858177E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999306589519017	WITHOUT_CLASSIFICATION	6.934104809827658E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999904533559454	WITHOUT_CLASSIFICATION	9.54664405459068E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989725789082	WITHOUT_CLASSIFICATION	1.0274210917652964E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999041966270176	WITHOUT_CLASSIFICATION	9.58033729824286E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9983387099163095	WITHOUT_CLASSIFICATION	0.0016612900836905696	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998630633911895	WITHOUT_CLASSIFICATION	1.3693660881061975E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9875391794392582	WITHOUT_CLASSIFICATION	0.01246082056074185	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9985487183446091	WITHOUT_CLASSIFICATION	0.0014512816553908419	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9985487183446091	WITHOUT_CLASSIFICATION	0.0014512816553908419	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999840438788423	WITHOUT_CLASSIFICATION	1.5956121157711818E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999816602756147	WITHOUT_CLASSIFICATION	1.833972438522843E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997283235275	WITHOUT_CLASSIFICATION	2.7167647246864705E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998772612338391	WITHOUT_CLASSIFICATION	1.2273876616093545E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998772612338391	WITHOUT_CLASSIFICATION	1.2273876616093545E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999820115498318	WITHOUT_CLASSIFICATION	1.7988450168132163E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998989730890104	WITHOUT_CLASSIFICATION	0.0010102691098959756	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.998521878343584	WITHOUT_CLASSIFICATION	0.0014781216564160719	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999988496231406	WITHOUT_CLASSIFICATION	1.1503768593962273E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.99996398777058	WITHOUT_CLASSIFICATION	3.601222941989589E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997018412265636	WITHOUT_CLASSIFICATION	2.981587734364011E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997769221837978	WITHOUT_CLASSIFICATION	2.2307781620223077E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.99998393454493	WITHOUT_CLASSIFICATION	1.6065455070100343E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997220356593124	WITHOUT_CLASSIFICATION	2.779643406876808E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998146002068767	WITHOUT_CLASSIFICATION	1.8539979312325006E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998933671959389	WITHOUT_CLASSIFICATION	1.0663280406112852E-4	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999655696493497	WITHOUT_CLASSIFICATION	3.4430350650300246E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999720251290327	WITHOUT_CLASSIFICATION	2.7974870967305426E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999688638967739	WITHOUT_CLASSIFICATION	3.113610322613996E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999903011287	WITHOUT_CLASSIFICATION	9.698871251816094E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999987256476942	WITHOUT_CLASSIFICATION	1.2743523058318517E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997087768302	WITHOUT_CLASSIFICATION	2.912231698050924E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991539999182	WITHOUT_CLASSIFICATION	8.460000817901096E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999082712021493	WITHOUT_CLASSIFICATION	9.172879785071685E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998923673660679	WITHOUT_CLASSIFICATION	1.0763263393216527E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999869356636241	WITHOUT_CLASSIFICATION	1.3064336376045957E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9993745549428128	WITHOUT_CLASSIFICATION	6.254450571871742E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999665096438	WITHOUT_CLASSIFICATION	3.349035614721808E-8	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999729672118378	WITHOUT_CLASSIFICATION	2.703278816209063E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999977841379872	WITHOUT_CLASSIFICATION	2.215862012808062E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9996993217137389	WITHOUT_CLASSIFICATION	3.0067828626114426E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998787052389986	WITHOUT_CLASSIFICATION	1.2129476100146282E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.972032571809788	WITHOUT_CLASSIFICATION	0.027967428190212005	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999022192672894	WITHOUT_CLASSIFICATION	9.778073271059981E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946933932462318	WITHOUT_CLASSIFICATION	0.005306606753768068	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997234717829099	WITHOUT_CLASSIFICATION	2.765282170901852E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998315235672058	WITHOUT_CLASSIFICATION	1.684764327942102E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999068875357731	WITHOUT_CLASSIFICATION	9.311246422691246E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999976888750425	WITHOUT_CLASSIFICATION	2.3111249574673847E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999937866264985	WITHOUT_CLASSIFICATION	6.213373501489752E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9575897974116616	WITHOUT_CLASSIFICATION	0.042410202588338324	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999914821908837	WITHOUT_CLASSIFICATION	8.517809116244336E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999990548423503	WITHOUT_CLASSIFICATION	9.451576497983053E-7	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996013436058628	WITHOUT_CLASSIFICATION	3.986563941371214E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.999961618327638	WITHOUT_CLASSIFICATION	3.838167236190677E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999193410310311	WITHOUT_CLASSIFICATION	8.065896896891087E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999318804284762	WITHOUT_CLASSIFICATION	6.811957152377919E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999771360036178	WITHOUT_CLASSIFICATION	2.2863996382159066E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999369141973176	WITHOUT_CLASSIFICATION	6.308580268240277E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9985683066907788	WITHOUT_CLASSIFICATION	0.0014316933092212343	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999729089792994	WITHOUT_CLASSIFICATION	2.709102070059617E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9986646859492312	WITHOUT_CLASSIFICATION	0.0013353140507688308	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9987214475375313	WITHOUT_CLASSIFICATION	0.0012785524624685976	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998630143505743	WITHOUT_CLASSIFICATION	1.3698564942556178E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9919999740637621	WITHOUT_CLASSIFICATION	0.008000025936237873	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998291758179261	WITHOUT_CLASSIFICATION	1.708241820740637E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999795685544445	WITHOUT_CLASSIFICATION	2.04314455555372E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9986032006209185	WITHOUT_CLASSIFICATION	0.0013967993790815938	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999666767733878	WITHOUT_CLASSIFICATION	3.3323226612254616E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999787728108229	WITHOUT_CLASSIFICATION	2.122718917702167E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998388008289	WITHOUT_CLASSIFICATION	1.6119917106929754E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9995560727509216	WITHOUT_CLASSIFICATION	4.439272490784002E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999744134447521	WITHOUT_CLASSIFICATION	2.558655524797693E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999986900795994	WITHOUT_CLASSIFICATION	1.309920400639434E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999948196746017	WITHOUT_CLASSIFICATION	5.18032539839996E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999975462547702	WITHOUT_CLASSIFICATION	2.453745229758544E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9585669294855262	WITHOUT_CLASSIFICATION	0.041433070514473716	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997704748228372	WITHOUT_CLASSIFICATION	2.295251771627302E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999685224925637	WITHOUT_CLASSIFICATION	3.1477507436300997E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997795928868773	WITHOUT_CLASSIFICATION	2.2040711312267726E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999928329903673	WITHOUT_CLASSIFICATION	7.167009632709941E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998811212750729	WITHOUT_CLASSIFICATION	1.1887872492701243E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999987549111113	WITHOUT_CLASSIFICATION	1.2450888886235673E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9990311235836722	WITHOUT_CLASSIFICATION	9.688764163278477E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999866838436915	WITHOUT_CLASSIFICATION	1.331615630847605E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9996181059536415	WITHOUT_CLASSIFICATION	3.818940463584372E-4	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999737628906238	WITHOUT_CLASSIFICATION	2.623710937618251E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9972664859201917	WITHOUT_CLASSIFICATION	0.002733514079808356	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999550606737359	WITHOUT_CLASSIFICATION	4.493932626413078E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9990886494016133	WITHOUT_CLASSIFICATION	9.11350598386613E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.7953793959003037	IMPLEMENTATION	0.20462060409969635	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9992972561348569	WITHOUT_CLASSIFICATION	7.027438651432526E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9541009055923199	WITHOUT_CLASSIFICATION	0.04589909440768013	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9979625416854273	WITHOUT_CLASSIFICATION	0.002037458314572817	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9996822464922105	WITHOUT_CLASSIFICATION	3.177535077895264E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9996849680159974	WITHOUT_CLASSIFICATION	3.15031984002586E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9996393340960186	WITHOUT_CLASSIFICATION	3.606659039814353E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9972777966005484	WITHOUT_CLASSIFICATION	0.002722203399451673	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996732688808243	WITHOUT_CLASSIFICATION	3.2673111917575864E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9954070197717539	WITHOUT_CLASSIFICATION	0.004592980228246064	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9995310774786281	WITHOUT_CLASSIFICATION	4.689225213719572E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9990924906997075	WITHOUT_CLASSIFICATION	9.075093002925435E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998147741879493	WITHOUT_CLASSIFICATION	1.8522581205069713E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999935122294248	WITHOUT_CLASSIFICATION	6.487770575254934E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9976249919621131	WITHOUT_CLASSIFICATION	0.0023750080378870646	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999851094154673	WITHOUT_CLASSIFICATION	1.4890584532640156E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999240992233546	WITHOUT_CLASSIFICATION	7.590077664541786E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9997625089601447	WITHOUT_CLASSIFICATION	2.3749103985529245E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9996377474139316	WITHOUT_CLASSIFICATION	3.6225258606833067E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999764780343493	WITHOUT_CLASSIFICATION	2.352196565078132E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999764780343493	WITHOUT_CLASSIFICATION	2.352196565078132E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999479630613077	WITHOUT_CLASSIFICATION	5.203693869225312E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9946900082391739	WITHOUT_CLASSIFICATION	0.005309991760826148	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998744760205667	WITHOUT_CLASSIFICATION	1.2552397943331044E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999586397321625	WITHOUT_CLASSIFICATION	4.136026783762384E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998569411121432	WITHOUT_CLASSIFICATION	1.4305888785686574E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999148090071047	WITHOUT_CLASSIFICATION	8.519099289530378E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999984320818786	WITHOUT_CLASSIFICATION	1.5679181214098923E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999979366917202	WITHOUT_CLASSIFICATION	2.06330827976112E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8828052377599516	WITHOUT_CLASSIFICATION	0.11719476224004845	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999961769566944	WITHOUT_CLASSIFICATION	3.823043305525466E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999977403937059	WITHOUT_CLASSIFICATION	2.259606294146069E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9924811113129357	WITHOUT_CLASSIFICATION	0.007518888687064359	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999969651081011	WITHOUT_CLASSIFICATION	3.0348918987890997E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997036501473304	WITHOUT_CLASSIFICATION	2.963498526695561E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999905550635402	WITHOUT_CLASSIFICATION	9.444936459859368E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9696412421137218	IMPLEMENTATION	0.030358757886278193	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9696412421137218	IMPLEMENTATION	0.030358757886278193	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999495637700515	WITHOUT_CLASSIFICATION	5.0436229948455035E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999959928471186	WITHOUT_CLASSIFICATION	4.007152881396663E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998206787292649	WITHOUT_CLASSIFICATION	1.7932127073511697E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999358445180746	WITHOUT_CLASSIFICATION	6.415548192549528E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999860321794157	WITHOUT_CLASSIFICATION	1.3967820584280056E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998155730069164	WITHOUT_CLASSIFICATION	1.8442699308357632E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998155730069164	WITHOUT_CLASSIFICATION	1.8442699308357632E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999515007934139	WITHOUT_CLASSIFICATION	4.8499206586182606E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999436763498436	WITHOUT_CLASSIFICATION	5.632365015633176E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9989836058253441	WITHOUT_CLASSIFICATION	0.001016394174655863	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999985872	WITHOUT_CLASSIFICATION	1.4128424516507317E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999736116295579	WITHOUT_CLASSIFICATION	2.6388370442093854E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999984869592623	WITHOUT_CLASSIFICATION	1.5130407377062565E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9993225178313052	WITHOUT_CLASSIFICATION	6.774821686948067E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998185394413618	WITHOUT_CLASSIFICATION	1.8146055863816376E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999873069527667	WITHOUT_CLASSIFICATION	1.2693047233171303E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999551252956	WITHOUT_CLASSIFICATION	4.487470440049962E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9975592799540346	WITHOUT_CLASSIFICATION	0.002440720045965349	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999540554883474	WITHOUT_CLASSIFICATION	4.5944511652610456E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999647126813502	WITHOUT_CLASSIFICATION	3.528731864975755E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999502459763743	WITHOUT_CLASSIFICATION	4.975402362570127E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976630368184269	WITHOUT_CLASSIFICATION	0.0023369631815730037	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9994638759698001	WITHOUT_CLASSIFICATION	5.361240301998405E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999990421430716	WITHOUT_CLASSIFICATION	9.578569283918551E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9996306137869424	WITHOUT_CLASSIFICATION	3.6938621305768703E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999955882372834	WITHOUT_CLASSIFICATION	4.411762716600269E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999495225186485	WITHOUT_CLASSIFICATION	5.047748135143252E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9958486688929679	WITHOUT_CLASSIFICATION	0.004151331107032106	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994187691756754	WITHOUT_CLASSIFICATION	5.812308243247278E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999897081524662	WITHOUT_CLASSIFICATION	1.0291847533803328E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999380057849084	WITHOUT_CLASSIFICATION	6.199421509158857E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9841150195726278	WITHOUT_CLASSIFICATION	0.01588498042737212	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999942159877674	WITHOUT_CLASSIFICATION	5.784012232561112E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9997376794627862	WITHOUT_CLASSIFICATION	2.6232053721380835E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997055037322	WITHOUT_CLASSIFICATION	2.944962678202427E-7	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994566813428012	WITHOUT_CLASSIFICATION	5.433186571987175E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999897348696991	WITHOUT_CLASSIFICATION	1.0265130300898181E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9814486988019568	WITHOUT_CLASSIFICATION	0.0185513011980431	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9992830660840862	WITHOUT_CLASSIFICATION	7.16933915913834E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997872641478923	WITHOUT_CLASSIFICATION	2.1273585210764402E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9994307957201366	WITHOUT_CLASSIFICATION	5.692042798634114E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9998035455005964	WITHOUT_CLASSIFICATION	1.9645449940359542E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997902318906328	WITHOUT_CLASSIFICATION	2.09768109367177E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995679163636696	WITHOUT_CLASSIFICATION	4.3208363633033553E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997986270769628	WITHOUT_CLASSIFICATION	2.0137292303715177E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9996180097528591	WITHOUT_CLASSIFICATION	3.819902471409436E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.998909252367171	WITHOUT_CLASSIFICATION	0.0010907476328290875	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999546694964648	WITHOUT_CLASSIFICATION	4.5330503535152425E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999973162838868	WITHOUT_CLASSIFICATION	2.683716113114999E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9969767419750735	WITHOUT_CLASSIFICATION	0.003023258024926597	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997902318906328	WITHOUT_CLASSIFICATION	2.09768109367177E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995679163636696	WITHOUT_CLASSIFICATION	4.3208363633033553E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9996565724226344	WITHOUT_CLASSIFICATION	3.434275773655726E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9993404670297942	WITHOUT_CLASSIFICATION	6.595329702058417E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999950717987344	WITHOUT_CLASSIFICATION	4.9282012655911455E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999536062610758	WITHOUT_CLASSIFICATION	4.639373892423746E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999948053849512	WITHOUT_CLASSIFICATION	5.194615048796558E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9887546477624249	WITHOUT_CLASSIFICATION	0.011245352237575093	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997789948166123	WITHOUT_CLASSIFICATION	2.210051833877454E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999885087134023	WITHOUT_CLASSIFICATION	1.149128659774307E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999935961335104	WITHOUT_CLASSIFICATION	6.403866489576207E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.973383279163214	WITHOUT_CLASSIFICATION	0.026616720836786015	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999907643463118	WITHOUT_CLASSIFICATION	9.23565368812175E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.973383279163214	WITHOUT_CLASSIFICATION	0.026616720836786015	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999059902377827	WITHOUT_CLASSIFICATION	9.400976221732361E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9993277207912883	WITHOUT_CLASSIFICATION	6.722792087117373E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999059902377827	WITHOUT_CLASSIFICATION	9.400976221732361E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235397455082	WITHOUT_CLASSIFICATION	7.646025449182006E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999893794029893	WITHOUT_CLASSIFICATION	1.0620597010643265E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999347414766971	WITHOUT_CLASSIFICATION	6.525852330283934E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999347414766971	WITHOUT_CLASSIFICATION	6.525852330283934E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9993777605588056	WITHOUT_CLASSIFICATION	6.222394411943752E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9993836985443416	WITHOUT_CLASSIFICATION	6.163014556584053E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9993777605588056	WITHOUT_CLASSIFICATION	6.222394411943752E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995086360347164	WITHOUT_CLASSIFICATION	4.913639652835517E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9757252352846216	WITHOUT_CLASSIFICATION	0.02427476471537838	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9981745170130351	WITHOUT_CLASSIFICATION	0.0018254829869649137	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996572692039666	WITHOUT_CLASSIFICATION	3.42730796033526E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999885926363603	WITHOUT_CLASSIFICATION	1.140736363966024E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9981236899947125	WITHOUT_CLASSIFICATION	0.0018763100052875098	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999883824226592	WITHOUT_CLASSIFICATION	1.161757734084699E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9997311024405153	WITHOUT_CLASSIFICATION	2.688975594847254E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9992788252351308	WITHOUT_CLASSIFICATION	7.21174764869205E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999145753464098	WITHOUT_CLASSIFICATION	8.542465359011396E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998985829305481	WITHOUT_CLASSIFICATION	1.014170694518382E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999332147026867	WITHOUT_CLASSIFICATION	6.678529731333368E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999704686459422	WITHOUT_CLASSIFICATION	2.9531354057693875E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999236956953363	WITHOUT_CLASSIFICATION	7.630430466374594E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998688233673527	WITHOUT_CLASSIFICATION	1.311766326473311E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9992096074875918	WITHOUT_CLASSIFICATION	7.903925124081201E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9983828810390397	WITHOUT_CLASSIFICATION	0.0016171189609603426	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9991963764203847	WITHOUT_CLASSIFICATION	8.036235796153273E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9769679246890858	WITHOUT_CLASSIFICATION	0.023032075310914255	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9994466931374049	WITHOUT_CLASSIFICATION	5.533068625952039E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9996932267253973	WITHOUT_CLASSIFICATION	3.0677327460264047E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9926057231285805	WITHOUT_CLASSIFICATION	0.007394276871419493	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998002612777426	WITHOUT_CLASSIFICATION	1.997387222573614E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9981745170130351	WITHOUT_CLASSIFICATION	0.0018254829869649137	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999478620189832	WITHOUT_CLASSIFICATION	5.213798101680511E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9987986290580392	WITHOUT_CLASSIFICATION	0.001201370941960839	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9430028774495758	WITHOUT_CLASSIFICATION	0.05699712255042424	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9980779796326696	WITHOUT_CLASSIFICATION	0.0019220203673303163	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999789742189771	WITHOUT_CLASSIFICATION	2.1025781022922086E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9997853715494976	WITHOUT_CLASSIFICATION	2.146284505024171E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995086360347164	WITHOUT_CLASSIFICATION	4.913639652835517E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995086360347164	WITHOUT_CLASSIFICATION	4.913639652835517E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.997867441464912	WITHOUT_CLASSIFICATION	0.0021325585350880387	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999770229492857	WITHOUT_CLASSIFICATION	2.29770507143026E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9981082618189239	WITHOUT_CLASSIFICATION	0.0018917381810761122	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9985751894370106	WITHOUT_CLASSIFICATION	0.0014248105629894388	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9985141198270474	WITHOUT_CLASSIFICATION	0.0014858801729526092	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998102723701867	WITHOUT_CLASSIFICATION	1.8972762981332803E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999312938259185	WITHOUT_CLASSIFICATION	6.870617408156588E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997251180398	WITHOUT_CLASSIFICATION	2.748819602453737E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998006392938276	WITHOUT_CLASSIFICATION	1.9936070617247267E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999840708239115	WITHOUT_CLASSIFICATION	1.5929176088529303E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9992788252351308	WITHOUT_CLASSIFICATION	7.21174764869205E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9988049331818811	WITHOUT_CLASSIFICATION	0.0011950668181188796	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999840708239115	WITHOUT_CLASSIFICATION	1.5929176088529303E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997623436510489	WITHOUT_CLASSIFICATION	2.3765634895112544E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999960447421261	WITHOUT_CLASSIFICATION	3.9552578738973286E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998049176526506	WITHOUT_CLASSIFICATION	1.9508234734942975E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9528229273235056	WITHOUT_CLASSIFICATION	0.04717707267649438	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994517997625796	WITHOUT_CLASSIFICATION	5.482002374203573E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999996426986106	WITHOUT_CLASSIFICATION	3.573013894100319E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959320458593	WITHOUT_CLASSIFICATION	4.067954140613202E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999996284542	WITHOUT_CLASSIFICATION	3.715458134286804E-10	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.999711970090904	WITHOUT_CLASSIFICATION	2.8802990909611173E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998882809797616	WITHOUT_CLASSIFICATION	1.117190202383902E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999282606182064	WITHOUT_CLASSIFICATION	7.173938179363516E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9952594369340276	WITHOUT_CLASSIFICATION	0.004740563065972431	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999840708239115	WITHOUT_CLASSIFICATION	1.5929176088529303E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994517997625796	WITHOUT_CLASSIFICATION	5.482002374203573E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959320458593	WITHOUT_CLASSIFICATION	4.067954140613202E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999383665279242	WITHOUT_CLASSIFICATION	6.163347207579955E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9996877996578029	WITHOUT_CLASSIFICATION	3.1220034219720384E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999197016673058	WITHOUT_CLASSIFICATION	8.029833269417395E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9994291526170079	WITHOUT_CLASSIFICATION	5.708473829920516E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997567925434583	WITHOUT_CLASSIFICATION	2.4320745654162268E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997623436510489	WITHOUT_CLASSIFICATION	2.3765634895112544E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994174787573729	WITHOUT_CLASSIFICATION	5.825212426271522E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9981448899354116	WITHOUT_CLASSIFICATION	0.0018551100645883656	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992198515558297	WITHOUT_CLASSIFICATION	7.801484441702917E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.699229597886881	WITHOUT_CLASSIFICATION	0.3007704021131189	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6555997327141997	WITHOUT_CLASSIFICATION	0.34440026728580037	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9991260107612903	WITHOUT_CLASSIFICATION	8.739892387097586E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235397455082	WITHOUT_CLASSIFICATION	7.646025449182006E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878915202118	WITHOUT_CLASSIFICATION	1.2108479788144935E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999981273526576	WITHOUT_CLASSIFICATION	1.8726473424381916E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998685160350241	WITHOUT_CLASSIFICATION	1.314839649758177E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999914269782324	WITHOUT_CLASSIFICATION	8.573021767554504E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999954060073569	WITHOUT_CLASSIFICATION	4.59399264304755E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999231639892058	WITHOUT_CLASSIFICATION	7.683601079425897E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9996216801990683	WITHOUT_CLASSIFICATION	3.783198009316835E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999593670140982	WITHOUT_CLASSIFICATION	4.063298590185533E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9980793507824363	WITHOUT_CLASSIFICATION	0.001920649217563644	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999117722985449	WITHOUT_CLASSIFICATION	8.822770145512445E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9985091047531205	WITHOUT_CLASSIFICATION	0.0014908952468795135	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999649406570634	WITHOUT_CLASSIFICATION	3.5059342936599376E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999480948384862	WITHOUT_CLASSIFICATION	5.190516151384111E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997669908298816	WITHOUT_CLASSIFICATION	2.3300917011848693E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9997987756755358	WITHOUT_CLASSIFICATION	2.0122432446417383E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9940776676178193	WITHOUT_CLASSIFICATION	0.005922332382180729	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9968274024488688	WITHOUT_CLASSIFICATION	0.0031725975511311647	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999619564210993	WITHOUT_CLASSIFICATION	3.804357890066597E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9984835096261288	WITHOUT_CLASSIFICATION	0.0015164903738712153	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.997739496411216	WITHOUT_CLASSIFICATION	0.0022605035887840338	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999960171490768	WITHOUT_CLASSIFICATION	3.982850923174749E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999751908726519	WITHOUT_CLASSIFICATION	2.4809127348112323E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999495035877937	WITHOUT_CLASSIFICATION	5.049641220631058E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998791464820999	WITHOUT_CLASSIFICATION	1.2085351790019388E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9972744613805807	WITHOUT_CLASSIFICATION	0.0027255386194192164	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999461728445859	WITHOUT_CLASSIFICATION	5.382715541409648E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999636147326086	WITHOUT_CLASSIFICATION	3.6385267391404304E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999534015792926	WITHOUT_CLASSIFICATION	4.659842070738403E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999963341750967	WITHOUT_CLASSIFICATION	3.6658249033238435E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9997525924827073	WITHOUT_CLASSIFICATION	2.474075172926736E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7202144938561507	IMPLEMENTATION	0.2797855061438494	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9972116148086386	WITHOUT_CLASSIFICATION	0.002788385191361349	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.99964004909919	WITHOUT_CLASSIFICATION	3.599509008099725E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999924847738141	WITHOUT_CLASSIFICATION	7.515226186043447E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9761201534946576	WITHOUT_CLASSIFICATION	0.023879846505342306	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999803381157899	WITHOUT_CLASSIFICATION	1.9661884210123963E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999615517824814	WITHOUT_CLASSIFICATION	3.844821751861377E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999890987935673	WITHOUT_CLASSIFICATION	1.0901206432688044E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999793085747297	WITHOUT_CLASSIFICATION	2.069142527027955E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841555897873	WITHOUT_CLASSIFICATION	1.5844410212743378E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999849355850295	WITHOUT_CLASSIFICATION	1.506441497050062E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999499411504803	WITHOUT_CLASSIFICATION	5.005884951967302E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997846658491297	WITHOUT_CLASSIFICATION	2.1533415087022324E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999849355850295	WITHOUT_CLASSIFICATION	1.506441497050062E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841555897873	WITHOUT_CLASSIFICATION	1.5844410212743378E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999499411504803	WITHOUT_CLASSIFICATION	5.005884951967302E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999770073679775	WITHOUT_CLASSIFICATION	2.2992632022595642E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999804339749672	WITHOUT_CLASSIFICATION	1.9566025032883615E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9963185699815045	WITHOUT_CLASSIFICATION	0.0036814300184956133	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999962800463366	WITHOUT_CLASSIFICATION	3.719953663393438E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999120100767	WITHOUT_CLASSIFICATION	8.798992329982834E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7299103159821857	WITHOUT_CLASSIFICATION	0.2700896840178144	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9898518747230377	WITHOUT_CLASSIFICATION	0.010148125276962272	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999847359272952	WITHOUT_CLASSIFICATION	1.5264072704868474E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999875247723775	WITHOUT_CLASSIFICATION	1.2475227622408732E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999815784936625	WITHOUT_CLASSIFICATION	1.8421506337500573E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9993997172179844	WITHOUT_CLASSIFICATION	6.002827820156465E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999808470952333	WITHOUT_CLASSIFICATION	1.9152904766747087E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9992227477753836	WITHOUT_CLASSIFICATION	7.772522246163964E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997879880922143	WITHOUT_CLASSIFICATION	2.120119077858677E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999941870664785	WITHOUT_CLASSIFICATION	5.8129335215064315E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999959535718347	WITHOUT_CLASSIFICATION	4.0464281653011024E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999448427585488	WITHOUT_CLASSIFICATION	5.5157241451214946E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999951458095866	WITHOUT_CLASSIFICATION	4.854190413488847E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997709116083012	WITHOUT_CLASSIFICATION	2.2908839169886525E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9996898729817051	WITHOUT_CLASSIFICATION	3.101270182948212E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.99798725942039	WITHOUT_CLASSIFICATION	0.0020127405796099857	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9998566476093388	WITHOUT_CLASSIFICATION	1.433523906612462E-4	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9992188547158217	WITHOUT_CLASSIFICATION	7.811452841782691E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997731787813419	WITHOUT_CLASSIFICATION	2.2682121865811827E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996828569119359	WITHOUT_CLASSIFICATION	3.1714308806411257E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996828569119359	WITHOUT_CLASSIFICATION	3.1714308806411257E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997889534993811	WITHOUT_CLASSIFICATION	2.11046500618776E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997889534993811	WITHOUT_CLASSIFICATION	2.11046500618776E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9987396053686831	WITHOUT_CLASSIFICATION	0.0012603946313168013	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999448427585488	WITHOUT_CLASSIFICATION	5.5157241451214946E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997279342816392	WITHOUT_CLASSIFICATION	2.720657183608243E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999475897892652	WITHOUT_CLASSIFICATION	5.241021073486209E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9995520707086574	WITHOUT_CLASSIFICATION	4.479292913426055E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9995520707086574	WITHOUT_CLASSIFICATION	4.479292913426055E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9997989487314696	WITHOUT_CLASSIFICATION	2.0105126853047747E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9990531446126533	WITHOUT_CLASSIFICATION	9.46855387346681E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9984931994942706	WITHOUT_CLASSIFICATION	0.00150680050572935	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9997922329187973	WITHOUT_CLASSIFICATION	2.0776708120275313E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998411682693177	WITHOUT_CLASSIFICATION	1.5883173068238147E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999569680739139	WITHOUT_CLASSIFICATION	4.3031926086098936E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998547804017017	WITHOUT_CLASSIFICATION	1.4521959829830929E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998454418913141	WITHOUT_CLASSIFICATION	1.5455810868585522E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9996449051821729	WITHOUT_CLASSIFICATION	3.5509481782716506E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999970826100849	WITHOUT_CLASSIFICATION	2.917389915089704E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9996728588067958	WITHOUT_CLASSIFICATION	3.2714119320428675E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.999502214049863	WITHOUT_CLASSIFICATION	4.977859501370895E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996870028359987	WITHOUT_CLASSIFICATION	3.129971640012995E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.998876545311089	WITHOUT_CLASSIFICATION	0.0011234546889109494	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9560335910645037	WITHOUT_CLASSIFICATION	0.04396640893549624	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998457822118991	WITHOUT_CLASSIFICATION	1.5421778810080118E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882879328014	WITHOUT_CLASSIFICATION	1.1712067198596442E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9992954112487984	WITHOUT_CLASSIFICATION	7.045887512016431E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9783592660505374	WITHOUT_CLASSIFICATION	0.02164073394946268	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999993228223797	WITHOUT_CLASSIFICATION	6.771776203479943E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9989560490859178	WITHOUT_CLASSIFICATION	0.001043950914082149	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999822920530204	WITHOUT_CLASSIFICATION	1.7707946979631472E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998359308484316	WITHOUT_CLASSIFICATION	1.6406915156832381E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999990735430798	WITHOUT_CLASSIFICATION	9.264569201159136E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992822608707834	WITHOUT_CLASSIFICATION	7.177391292165074E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998562250842745	WITHOUT_CLASSIFICATION	1.4377491572549348E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999619564210993	WITHOUT_CLASSIFICATION	3.804357890066597E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998835404713544	WITHOUT_CLASSIFICATION	1.1645952864554496E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999989383625233	WITHOUT_CLASSIFICATION	1.061637476628292E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998899244824424	WITHOUT_CLASSIFICATION	1.1007551755761984E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998739366658204	WITHOUT_CLASSIFICATION	1.2606333417964206E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.998968695295025	WITHOUT_CLASSIFICATION	0.0010313047049750636	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.998968695295025	WITHOUT_CLASSIFICATION	0.0010313047049750636	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999953832489228	WITHOUT_CLASSIFICATION	4.6167510771940165E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9996508770697415	WITHOUT_CLASSIFICATION	3.491229302584797E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9993484811341042	WITHOUT_CLASSIFICATION	6.515188658958261E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9993484811341042	WITHOUT_CLASSIFICATION	6.515188658958261E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987812051316279	WITHOUT_CLASSIFICATION	0.001218794868372049	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998709255223491	WITHOUT_CLASSIFICATION	1.2907447765093358E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9885582662980292	WITHOUT_CLASSIFICATION	0.011441733701970798	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999848013101823	WITHOUT_CLASSIFICATION	1.5198689817589496E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9983040226388077	WITHOUT_CLASSIFICATION	0.0016959773611922864	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999847883843995	WITHOUT_CLASSIFICATION	1.521161560040793E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998912128844857	WITHOUT_CLASSIFICATION	1.0878711551427223E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999316503236753	WITHOUT_CLASSIFICATION	6.834967632471698E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999316503236753	WITHOUT_CLASSIFICATION	6.834967632471698E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996557043099458	WITHOUT_CLASSIFICATION	3.4429569005429923E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999983627962182	WITHOUT_CLASSIFICATION	1.6372037818022445E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999983627962182	WITHOUT_CLASSIFICATION	1.6372037818022445E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999475825564115	WITHOUT_CLASSIFICATION	5.241744358844587E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999480157572513	WITHOUT_CLASSIFICATION	5.198424274867417E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999919644108997	WITHOUT_CLASSIFICATION	8.035589100295177E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999790117829054	WITHOUT_CLASSIFICATION	2.0988217094611076E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999100314087038	WITHOUT_CLASSIFICATION	8.996859129619204E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999996906382712	WITHOUT_CLASSIFICATION	3.0936172874518023E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998809153494712	WITHOUT_CLASSIFICATION	1.1908465052870983E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9995617093029014	WITHOUT_CLASSIFICATION	4.3829069709849284E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9956336768104039	WITHOUT_CLASSIFICATION	0.004366323189596024	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998934905500015	WITHOUT_CLASSIFICATION	1.0650944999854538E-4	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9602182345345825	WITHOUT_CLASSIFICATION	0.03978176546541743	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999562799158039	WITHOUT_CLASSIFICATION	4.3720084196154106E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997333673447029	WITHOUT_CLASSIFICATION	2.666326552970898E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9983600339311409	WITHOUT_CLASSIFICATION	0.0016399660688591084	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.99926133045333	WITHOUT_CLASSIFICATION	7.386695466700597E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9985906649457355	WITHOUT_CLASSIFICATION	0.001409335054264533	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999410858268944	WITHOUT_CLASSIFICATION	5.891417310556828E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9987200940015686	WITHOUT_CLASSIFICATION	0.0012799059984314898	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999525979671993	WITHOUT_CLASSIFICATION	4.740203280071074E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9951995095410098	WITHOUT_CLASSIFICATION	0.00480049045899026	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998277059367378	WITHOUT_CLASSIFICATION	1.722940632621875E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985028508200446	WITHOUT_CLASSIFICATION	0.0014971491799553552	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999990101796716	WITHOUT_CLASSIFICATION	9.898203283520725E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.7782995022855536	IMPLEMENTATION	0.22170049771444644	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999992154976644	WITHOUT_CLASSIFICATION	7.845023355999518E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985028508200446	WITHOUT_CLASSIFICATION	0.0014971491799553552	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8204250089213616	WITHOUT_CLASSIFICATION	0.17957499107863834	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999311242909782	WITHOUT_CLASSIFICATION	6.887570902188247E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999979249253916	WITHOUT_CLASSIFICATION	2.0750746083206795E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999562253896197	WITHOUT_CLASSIFICATION	4.3774610380206595E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999924502284295	WITHOUT_CLASSIFICATION	7.549771570393656E-6	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9993928315853274	WITHOUT_CLASSIFICATION	6.071684146726524E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999913747238193	WITHOUT_CLASSIFICATION	8.625276180792096E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999550991870231	WITHOUT_CLASSIFICATION	4.490081297683478E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920036566983	WITHOUT_CLASSIFICATION	7.996343301708602E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999971218219328	WITHOUT_CLASSIFICATION	2.8781780671435107E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920036566983	WITHOUT_CLASSIFICATION	7.996343301708602E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999933230290747	WITHOUT_CLASSIFICATION	6.676970925202011E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998395469745941	WITHOUT_CLASSIFICATION	1.604530254058686E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5460681204036255	IMPLEMENTATION	0.45393187959637454	WITHOUT_CLASSIFICATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999976836805936	WITHOUT_CLASSIFICATION	2.316319406397725E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999268150897077	WITHOUT_CLASSIFICATION	7.31849102922653E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999953830085162	WITHOUT_CLASSIFICATION	4.616991483807418E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999138007908953	WITHOUT_CLASSIFICATION	8.619920910470094E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999955686406132	WITHOUT_CLASSIFICATION	4.431359386789858E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999138007908953	WITHOUT_CLASSIFICATION	8.619920910470094E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999025205543823	WITHOUT_CLASSIFICATION	9.747944561763413E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999969487446082	WITHOUT_CLASSIFICATION	3.051255391796898E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999241795278556	WITHOUT_CLASSIFICATION	7.582047214439409E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999986145780946	WITHOUT_CLASSIFICATION	1.385421905453967E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999953830085162	WITHOUT_CLASSIFICATION	4.616991483807418E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999955686406132	WITHOUT_CLASSIFICATION	4.431359386789858E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999025205543823	WITHOUT_CLASSIFICATION	9.747944561763413E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995128211990737	WITHOUT_CLASSIFICATION	4.871788009263645E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9983362539395904	WITHOUT_CLASSIFICATION	0.0016637460604096632	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9989595335335413	WITHOUT_CLASSIFICATION	0.0010404664664587563	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9986315580380554	WITHOUT_CLASSIFICATION	0.001368441961944561	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9992703830512408	WITHOUT_CLASSIFICATION	7.296169487591172E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998618815018501	WITHOUT_CLASSIFICATION	1.3811849815004745E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882879328014	WITHOUT_CLASSIFICATION	1.1712067198596442E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999969487446082	WITHOUT_CLASSIFICATION	3.051255391796898E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9779517871778531	WITHOUT_CLASSIFICATION	0.022048212822146862	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9992808337443818	WITHOUT_CLASSIFICATION	7.191662556183083E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999923575333455	WITHOUT_CLASSIFICATION	7.642466654501979E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882879328014	WITHOUT_CLASSIFICATION	1.1712067198596442E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9996952808617835	WITHOUT_CLASSIFICATION	3.047191382164701E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882879328014	WITHOUT_CLASSIFICATION	1.1712067198596442E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999923750695525	WITHOUT_CLASSIFICATION	7.624930447498575E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997542256732779	WITHOUT_CLASSIFICATION	2.4577432672222635E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9971849984388286	WITHOUT_CLASSIFICATION	0.0028150015611715087	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9989957951160409	WITHOUT_CLASSIFICATION	0.0010042048839591228	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999885148281102	WITHOUT_CLASSIFICATION	1.1485171889860158E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9996624449914173	WITHOUT_CLASSIFICATION	3.3755500858257683E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997620402072508	WITHOUT_CLASSIFICATION	2.379597927491273E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999706834624112	WITHOUT_CLASSIFICATION	2.931653758873178E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9995292661554069	WITHOUT_CLASSIFICATION	4.7073384459300283E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998233480561757	WITHOUT_CLASSIFICATION	1.7665194382436504E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999786113356897	WITHOUT_CLASSIFICATION	2.1388664310221567E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998233480561757	WITHOUT_CLASSIFICATION	1.7665194382436504E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9943188965057274	WITHOUT_CLASSIFICATION	0.0056811034942725845	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9982554634923507	WITHOUT_CLASSIFICATION	0.0017445365076492005	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999949618213857	WITHOUT_CLASSIFICATION	5.038178614311136E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999950529435798	WITHOUT_CLASSIFICATION	4.947056420208305E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.99999520532288	WITHOUT_CLASSIFICATION	4.7946771199975114E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999640667945442	WITHOUT_CLASSIFICATION	3.5933205455784225E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999990121926009	WITHOUT_CLASSIFICATION	9.878073990698528E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999917142903119	WITHOUT_CLASSIFICATION	8.285709688260706E-6	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996210192049687	WITHOUT_CLASSIFICATION	3.7898079503120727E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996210192049687	WITHOUT_CLASSIFICATION	3.7898079503120727E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999716803149589	WITHOUT_CLASSIFICATION	2.8319685041149418E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999934324190305	WITHOUT_CLASSIFICATION	6.567580969531404E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999988808151379	WITHOUT_CLASSIFICATION	1.1191848621365825E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9994318394266563	WITHOUT_CLASSIFICATION	5.681605733437266E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999836048652395	WITHOUT_CLASSIFICATION	1.639513476049706E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9994982526860758	WITHOUT_CLASSIFICATION	5.017473139240688E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999979274145613	WITHOUT_CLASSIFICATION	2.0725854387658853E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.994702495624772	WITHOUT_CLASSIFICATION	0.00529750437522812	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999609591037275	WITHOUT_CLASSIFICATION	3.904089627246038E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996687458449947	WITHOUT_CLASSIFICATION	3.3125415500539227E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9954810006455682	WITHOUT_CLASSIFICATION	0.004518999354431798	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.998609384690067	WITHOUT_CLASSIFICATION	0.00139061530993307	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998871697630367	WITHOUT_CLASSIFICATION	1.1283023696332269E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999672461843212	WITHOUT_CLASSIFICATION	3.275381567868458E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993453317071997	WITHOUT_CLASSIFICATION	6.546682928002003E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9950916303380835	WITHOUT_CLASSIFICATION	0.0049083696619165226	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9950916303380835	WITHOUT_CLASSIFICATION	0.0049083696619165226	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999537860960664	WITHOUT_CLASSIFICATION	4.6213903933537776E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999706834624112	WITHOUT_CLASSIFICATION	2.931653758873178E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9982225782416104	WITHOUT_CLASSIFICATION	0.001777421758389667	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999609482226144	WITHOUT_CLASSIFICATION	3.905177738560204E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997048090363628	WITHOUT_CLASSIFICATION	2.951909636371729E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999926510748817	WITHOUT_CLASSIFICATION	7.348925118293313E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9995394194239546	WITHOUT_CLASSIFICATION	4.605805760452771E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999459774469603	WITHOUT_CLASSIFICATION	5.40225530397337E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998330763544407	WITHOUT_CLASSIFICATION	1.6692364555929363E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9997816281726596	WITHOUT_CLASSIFICATION	2.1837182734029472E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999137425202	WITHOUT_CLASSIFICATION	8.625747972642821E-8	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999824885885099	WITHOUT_CLASSIFICATION	1.7511411490061374E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999999112693063	WITHOUT_CLASSIFICATION	8.873069370802545E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9974434015438012	WITHOUT_CLASSIFICATION	0.0025565984561989157	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9995310444819637	WITHOUT_CLASSIFICATION	4.6895551803633823E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999958018588276	WITHOUT_CLASSIFICATION	4.198141172390193E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999863378598817	WITHOUT_CLASSIFICATION	1.366214011820573E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999338622940521	WITHOUT_CLASSIFICATION	6.613770594784526E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999711149492072	WITHOUT_CLASSIFICATION	2.888505079284064E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999577132596194	WITHOUT_CLASSIFICATION	4.228674038071137E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999867599974338	WITHOUT_CLASSIFICATION	1.3240002566128173E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995002943706951	WITHOUT_CLASSIFICATION	4.997056293049639E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999040662835137	WITHOUT_CLASSIFICATION	9.59337164864103E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999985267072027	WITHOUT_CLASSIFICATION	1.4732927973665516E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999998785863076	WITHOUT_CLASSIFICATION	1.2141369239210028E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9994362859997177	WITHOUT_CLASSIFICATION	5.637140002822875E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.921620249996119	WITHOUT_CLASSIFICATION	0.07837975000388102	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9995933514525619	WITHOUT_CLASSIFICATION	4.066485474380741E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.997667723961485	WITHOUT_CLASSIFICATION	0.0023322760385150413	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998743464277846	WITHOUT_CLASSIFICATION	1.256535722153323E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998787329100048	WITHOUT_CLASSIFICATION	1.2126708999510698E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999208994334368	WITHOUT_CLASSIFICATION	7.910056656323864E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999465507281563	WITHOUT_CLASSIFICATION	5.344927184372976E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994973894266274	WITHOUT_CLASSIFICATION	5.02610573372599E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9994645739399198	WITHOUT_CLASSIFICATION	5.35426060080158E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999686374560655	WITHOUT_CLASSIFICATION	3.136254393446304E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983418116950359	WITHOUT_CLASSIFICATION	0.0016581883049641105	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983418116950359	WITHOUT_CLASSIFICATION	0.0016581883049641105	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998717445401343	WITHOUT_CLASSIFICATION	1.2825545986567508E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999833964409147	WITHOUT_CLASSIFICATION	1.6603559085295346E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999955069144706	WITHOUT_CLASSIFICATION	4.4930855294037395E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999955069144706	WITHOUT_CLASSIFICATION	4.4930855294037395E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999441914012014	WITHOUT_CLASSIFICATION	5.580859879859973E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9986261953916913	WITHOUT_CLASSIFICATION	0.001373804608308693	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9997841837845641	WITHOUT_CLASSIFICATION	2.1581621543585795E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999981111711003	WITHOUT_CLASSIFICATION	1.8888288997190036E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999206742357157	WITHOUT_CLASSIFICATION	7.932576428419008E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999850625598259	WITHOUT_CLASSIFICATION	1.4937440174172273E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999850625598259	WITHOUT_CLASSIFICATION	1.4937440174172273E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999465555575979	WITHOUT_CLASSIFICATION	5.344444240217316E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9995086360347164	WITHOUT_CLASSIFICATION	4.913639652835517E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9996559022730214	WITHOUT_CLASSIFICATION	3.4409772697861454E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9996559022730214	WITHOUT_CLASSIFICATION	3.4409772697861454E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999003512925446	WITHOUT_CLASSIFICATION	9.964870745534144E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999142151234746	WITHOUT_CLASSIFICATION	8.57848765254441E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999883669070392	WITHOUT_CLASSIFICATION	1.1633092960906261E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999280056278647	WITHOUT_CLASSIFICATION	7.199437213532276E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999986020018061	WITHOUT_CLASSIFICATION	1.3979981939291895E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.99965217208467	WITHOUT_CLASSIFICATION	3.4782791533000893E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999533159241367	WITHOUT_CLASSIFICATION	4.66840758632898E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9996567474529305	WITHOUT_CLASSIFICATION	3.432525470694985E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999629207669074	WITHOUT_CLASSIFICATION	3.707923309249514E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999833151723092	WITHOUT_CLASSIFICATION	1.6684827690721454E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9980796982983771	WITHOUT_CLASSIFICATION	0.0019203017016229057	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.8624037697240138	WITHOUT_CLASSIFICATION	0.13759623027598622	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.656587195104239	IMPLEMENTATION	0.3434128048957609	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999992266663596	WITHOUT_CLASSIFICATION	7.733336404083537E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9996671808854749	WITHOUT_CLASSIFICATION	3.328191145251408E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999909407763501	WITHOUT_CLASSIFICATION	9.059223649838597E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999290603715136	WITHOUT_CLASSIFICATION	7.093962848635292E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.994078690803874	WITHOUT_CLASSIFICATION	0.0059213091961260265	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9954663457074865	WITHOUT_CLASSIFICATION	0.004533654292513493	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.99929529919685	WITHOUT_CLASSIFICATION	7.047008031500511E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9981341709222764	WITHOUT_CLASSIFICATION	0.001865829077723622	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995914349244137	WITHOUT_CLASSIFICATION	4.085650755862286E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9949301477941876	WITHOUT_CLASSIFICATION	0.005069852205812428	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999593451815558	WITHOUT_CLASSIFICATION	4.065481844419496E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999313567020283	WITHOUT_CLASSIFICATION	6.864329797174355E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999904622440451	WITHOUT_CLASSIFICATION	9.537755954927109E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999978266889525	WITHOUT_CLASSIFICATION	2.173311047502679E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999954454200256	WITHOUT_CLASSIFICATION	4.554579974366084E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999722538988413	WITHOUT_CLASSIFICATION	2.7746101158684777E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999551931415831	WITHOUT_CLASSIFICATION	4.480685841690546E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999895147081204	WITHOUT_CLASSIFICATION	1.0485291879607383E-4	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999980775984579	WITHOUT_CLASSIFICATION	1.9224015421011308E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998957352543976	WITHOUT_CLASSIFICATION	1.0426474560248987E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994972830197162	WITHOUT_CLASSIFICATION	5.027169802837801E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999883049017556	WITHOUT_CLASSIFICATION	1.169509824440437E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999940013247166	WITHOUT_CLASSIFICATION	5.998675283386483E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999938501520363	WITHOUT_CLASSIFICATION	6.149847963635301E-6	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999626116041285	WITHOUT_CLASSIFICATION	3.738839587151199E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9997579324294072	WITHOUT_CLASSIFICATION	2.4206757059275086E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9998767034049827	WITHOUT_CLASSIFICATION	1.232965950172059E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9996903786500324	WITHOUT_CLASSIFICATION	3.09621349967666E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9996666543327124	WITHOUT_CLASSIFICATION	3.333456672876092E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9998638004170891	WITHOUT_CLASSIFICATION	1.3619958291079398E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998937509997823	WITHOUT_CLASSIFICATION	1.0624900021769653E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9910244175587221	WITHOUT_CLASSIFICATION	0.008975582441277993	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998021400415047	WITHOUT_CLASSIFICATION	1.978599584952651E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999292072313548	WITHOUT_CLASSIFICATION	7.079276864517317E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9993079416346877	WITHOUT_CLASSIFICATION	6.920583653122472E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6173961351468095	WITHOUT_CLASSIFICATION	0.38260386485319037	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999596412594792	WITHOUT_CLASSIFICATION	4.035874052072377E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999611109313661	WITHOUT_CLASSIFICATION	3.8889068633884295E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999580430807606	WITHOUT_CLASSIFICATION	4.195691923947115E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999702569733862	WITHOUT_CLASSIFICATION	2.9743026613920597E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999521942764944	WITHOUT_CLASSIFICATION	4.78057235054676E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999177886625225	WITHOUT_CLASSIFICATION	8.221133747753165E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999845325552247	WITHOUT_CLASSIFICATION	1.546744477526723E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9988552021189032	WITHOUT_CLASSIFICATION	0.0011447978810968577	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9988552021189032	WITHOUT_CLASSIFICATION	0.0011447978810968577	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999832650625	WITHOUT_CLASSIFICATION	1.6734937584192066E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998446357678226	WITHOUT_CLASSIFICATION	1.553642321774807E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999990430215496	WITHOUT_CLASSIFICATION	9.56978450385097E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999963721078574	WITHOUT_CLASSIFICATION	3.6278921424488424E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999911206898132	WITHOUT_CLASSIFICATION	8.879310186739639E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999041944909416	WITHOUT_CLASSIFICATION	9.580550905834087E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999948111367262	WITHOUT_CLASSIFICATION	5.188863273904065E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999983475537941	WITHOUT_CLASSIFICATION	1.6524462058112124E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999947966973273	WITHOUT_CLASSIFICATION	5.2033026728177885E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999978971091223	WITHOUT_CLASSIFICATION	2.102890877621296E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999871666158	WITHOUT_CLASSIFICATION	1.2833384199993176E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996422337457824	WITHOUT_CLASSIFICATION	3.577662542176309E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997436947231	WITHOUT_CLASSIFICATION	2.5630527698072795E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999224498091192	WITHOUT_CLASSIFICATION	7.755019088076997E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996798416695479	WITHOUT_CLASSIFICATION	3.201583304520248E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996798416695479	WITHOUT_CLASSIFICATION	3.201583304520248E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999927473097568	WITHOUT_CLASSIFICATION	7.252690243034469E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998698048933706	WITHOUT_CLASSIFICATION	1.3019510662943022E-4	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998083230449991	WITHOUT_CLASSIFICATION	1.9167695500080164E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999992699933329	WITHOUT_CLASSIFICATION	7.300066670973733E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998847867395023	WITHOUT_CLASSIFICATION	1.1521326049757603E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110049218631	WITHOUT_CLASSIFICATION	8.899507813693182E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999517738206577	WITHOUT_CLASSIFICATION	4.822617934228636E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999796691546802	WITHOUT_CLASSIFICATION	2.033084531991031E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998477810643371	WITHOUT_CLASSIFICATION	1.5221893566293984E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9981040968909702	WITHOUT_CLASSIFICATION	0.0018959031090296954	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9966091913640733	WITHOUT_CLASSIFICATION	0.0033908086359265644	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9990377640381266	WITHOUT_CLASSIFICATION	9.622359618733522E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999961591138935	WITHOUT_CLASSIFICATION	3.840886106493245E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9995899848098456	WITHOUT_CLASSIFICATION	4.1001519015438785E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998829594672464	WITHOUT_CLASSIFICATION	1.1704053275361346E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9994060121386098	WITHOUT_CLASSIFICATION	5.939878613902491E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999957046924421	WITHOUT_CLASSIFICATION	4.295307557838494E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999996546696975	WITHOUT_CLASSIFICATION	3.4533030244787097E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999940067421719	WITHOUT_CLASSIFICATION	5.9932578280974546E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999977050785576	WITHOUT_CLASSIFICATION	2.294921442450502E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999053759193	WITHOUT_CLASSIFICATION	9.4624080699547E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999971557409182	WITHOUT_CLASSIFICATION	2.844259081736084E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999401435564506	WITHOUT_CLASSIFICATION	5.9856443549494914E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998134276978589	WITHOUT_CLASSIFICATION	1.8657230214112438E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9936327422620873	WITHOUT_CLASSIFICATION	0.006367257737912729	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999857779444265	WITHOUT_CLASSIFICATION	1.4222055573506713E-4	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9948039549839008	WITHOUT_CLASSIFICATION	0.005196045016099046	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998620039695081	WITHOUT_CLASSIFICATION	1.3799603049199566E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999911834093602	WITHOUT_CLASSIFICATION	8.8165906398681E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9998974711743064	WITHOUT_CLASSIFICATION	1.025288256935847E-4	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999473536984932	WITHOUT_CLASSIFICATION	5.264630150675395E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999926737728942	WITHOUT_CLASSIFICATION	7.326227105838569E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9907077602214265	WITHOUT_CLASSIFICATION	0.009292239778573606	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9981328556291728	WITHOUT_CLASSIFICATION	0.0018671443708273361	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994997780148089	WITHOUT_CLASSIFICATION	5.002219851910505E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999978795892854	WITHOUT_CLASSIFICATION	2.120410714604248E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999980711747553	WITHOUT_CLASSIFICATION	1.9288252447442186E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998868017568169	WITHOUT_CLASSIFICATION	1.1319824318312322E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999758431282	WITHOUT_CLASSIFICATION	2.4156871811634455E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991530696066453	WITHOUT_CLASSIFICATION	8.469303933547793E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991530696066453	WITHOUT_CLASSIFICATION	8.469303933547793E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999944894874508	WITHOUT_CLASSIFICATION	5.51051254917343E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999972149038499	WITHOUT_CLASSIFICATION	2.7850961501023085E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997384033839112	WITHOUT_CLASSIFICATION	2.6159661608879354E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999690272089703	WITHOUT_CLASSIFICATION	3.097279102972892E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8489227793112606	WITHOUT_CLASSIFICATION	0.15107722068873933	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999629864049965	WITHOUT_CLASSIFICATION	3.701359500355891E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.99984967721376	WITHOUT_CLASSIFICATION	1.5032278624001246E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9983907448352899	WITHOUT_CLASSIFICATION	0.001609255164710115	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999930099710295	WITHOUT_CLASSIFICATION	6.990028970553755E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698447634229	WITHOUT_CLASSIFICATION	3.015523657710164E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998969166127171	WITHOUT_CLASSIFICATION	1.0308338728292588E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999983115815203	WITHOUT_CLASSIFICATION	1.6884184797866679E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999981483903807	WITHOUT_CLASSIFICATION	1.8516096193004856E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9955968793712714	WITHOUT_CLASSIFICATION	0.0044031206287285995	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9998938019075326	WITHOUT_CLASSIFICATION	1.0619809246736362E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999850764998596	WITHOUT_CLASSIFICATION	1.4923500140388576E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999959376386809	WITHOUT_CLASSIFICATION	4.062361319056744E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999782821139597	WITHOUT_CLASSIFICATION	2.1717886040359964E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999066836459991	WITHOUT_CLASSIFICATION	9.33163540009219E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999985338544054	WITHOUT_CLASSIFICATION	1.4661455946054338E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9892364841579573	WITHOUT_CLASSIFICATION	0.010763515842042728	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9995131491895577	WITHOUT_CLASSIFICATION	4.8685081044229844E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9973946256246157	WITHOUT_CLASSIFICATION	0.002605374375384225	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998906148351707	WITHOUT_CLASSIFICATION	1.0938516482934312E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999597606397495	WITHOUT_CLASSIFICATION	4.023936025064999E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995264686041031	WITHOUT_CLASSIFICATION	4.7353139589677886E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999695119442861	WITHOUT_CLASSIFICATION	3.048805571396895E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9990784764515563	WITHOUT_CLASSIFICATION	9.215235484435459E-4	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999505087656563	WITHOUT_CLASSIFICATION	4.949123434370363E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9995579858228104	WITHOUT_CLASSIFICATION	4.420141771896188E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999984806988397	WITHOUT_CLASSIFICATION	1.5193011603205543E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999995348837107	WITHOUT_CLASSIFICATION	4.651162891726632E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999905407977028	WITHOUT_CLASSIFICATION	9.459202297283888E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999999971507084	WITHOUT_CLASSIFICATION	2.849291596324446E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998552968882051	WITHOUT_CLASSIFICATION	1.4470311179489958E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999977740761217	WITHOUT_CLASSIFICATION	2.2259238784007907E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999963590321578	WITHOUT_CLASSIFICATION	3.6409678423741814E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997971017587709	WITHOUT_CLASSIFICATION	2.0289824122907236E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.99903840891498	WITHOUT_CLASSIFICATION	9.615910850199024E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999796966251949	WITHOUT_CLASSIFICATION	2.0303374804989442E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999995467656242	WITHOUT_CLASSIFICATION	4.532343758173027E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999917861385746	WITHOUT_CLASSIFICATION	8.213861425307873E-6	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999421870977869	WITHOUT_CLASSIFICATION	5.781290221309605E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999777865828676	WITHOUT_CLASSIFICATION	2.2213417132420424E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9879718207130439	WITHOUT_CLASSIFICATION	0.012028179286956106	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998056462489	WITHOUT_CLASSIFICATION	1.9435375107274233E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997436947231	WITHOUT_CLASSIFICATION	2.5630527698072795E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999599784308913	WITHOUT_CLASSIFICATION	4.002156910871166E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999996346010969	WITHOUT_CLASSIFICATION	3.653989031094337E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9982797905032037	WITHOUT_CLASSIFICATION	0.0017202094967962887	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999979940928617	WITHOUT_CLASSIFICATION	2.0059071382963366E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997936880386	WITHOUT_CLASSIFICATION	2.0631196136956266E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999150986533913	WITHOUT_CLASSIFICATION	8.490134660855737E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999966780529757	WITHOUT_CLASSIFICATION	3.321947024314659E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.6796986383278912	IMPLEMENTATION	0.32030136167210876	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989725789082	WITHOUT_CLASSIFICATION	1.0274210917652964E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9994626716131106	WITHOUT_CLASSIFICATION	5.373283868892796E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9992880946443168	WITHOUT_CLASSIFICATION	7.119053556831481E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999596292968167	WITHOUT_CLASSIFICATION	4.0370703183296785E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999907685657311	WITHOUT_CLASSIFICATION	9.231434268798603E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9903127137897618	WITHOUT_CLASSIFICATION	0.00968728621023816	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999241988115387	WITHOUT_CLASSIFICATION	7.580118846121506E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999095476750902	WITHOUT_CLASSIFICATION	9.045232490979676E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9945256057186764	WITHOUT_CLASSIFICATION	0.005474394281323529	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999834326885492	WITHOUT_CLASSIFICATION	1.656731145087069E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999241988115387	WITHOUT_CLASSIFICATION	7.580118846121506E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.6381361484291362	WITHOUT_CLASSIFICATION	0.36186385157086376	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9993934524267173	WITHOUT_CLASSIFICATION	6.065475732827424E-4	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999994759088451	WITHOUT_CLASSIFICATION	5.240911549008302E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9998100303643508	WITHOUT_CLASSIFICATION	1.899696356491542E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996267315487773	WITHOUT_CLASSIFICATION	3.732684512226474E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999077938147616	WITHOUT_CLASSIFICATION	9.220618523851104E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999985785446454	WITHOUT_CLASSIFICATION	1.421455354629384E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.997580412850568	WITHOUT_CLASSIFICATION	0.0024195871494320765	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999980142380634	WITHOUT_CLASSIFICATION	1.9857619365714293E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993981584598023	WITHOUT_CLASSIFICATION	6.018415401976103E-4	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9992691182345111	WITHOUT_CLASSIFICATION	7.308817654889355E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8964445097833775	WITHOUT_CLASSIFICATION	0.10355549021662248	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997544906811574	WITHOUT_CLASSIFICATION	2.4550931884263197E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9943900015876675	WITHOUT_CLASSIFICATION	0.005609998412332447	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9966697829180372	WITHOUT_CLASSIFICATION	0.0033302170819627763	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995002943706951	WITHOUT_CLASSIFICATION	4.997056293049639E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999974277534797	WITHOUT_CLASSIFICATION	2.5722465202866757E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999884238648505	WITHOUT_CLASSIFICATION	1.1576135149489157E-5	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994746890066684	WITHOUT_CLASSIFICATION	5.25310993331631E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9984576535023997	WITHOUT_CLASSIFICATION	0.0015423464976002353	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9978644878807525	WITHOUT_CLASSIFICATION	0.002135512119247395	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999511647810471	WITHOUT_CLASSIFICATION	4.883521895289292E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9897754039969583	WITHOUT_CLASSIFICATION	0.010224596003041661	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999982559974	WITHOUT_CLASSIFICATION	1.7440026919343794E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999818482772278	WITHOUT_CLASSIFICATION	1.815172277214996E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999830847871037	WITHOUT_CLASSIFICATION	1.6915212896256478E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.99626160159287	WITHOUT_CLASSIFICATION	0.003738398407129904	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998933671959389	WITHOUT_CLASSIFICATION	1.0663280406112852E-4	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9100119404326674	WITHOUT_CLASSIFICATION	0.08998805956733262	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9990910648211797	WITHOUT_CLASSIFICATION	9.089351788201824E-4	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999559368180266	WITHOUT_CLASSIFICATION	4.406318197343203E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997399557698837	WITHOUT_CLASSIFICATION	2.6004423011624563E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999606220307258	WITHOUT_CLASSIFICATION	3.937796927409307E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999995971610347	WITHOUT_CLASSIFICATION	4.028389652978452E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999850009274386	WITHOUT_CLASSIFICATION	1.4999072561365787E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995084859837	WITHOUT_CLASSIFICATION	4.915140162665026E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999789712041	WITHOUT_CLASSIFICATION	2.1028795910972755E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996131814530405	WITHOUT_CLASSIFICATION	3.868185469595715E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999285402442457	WITHOUT_CLASSIFICATION	7.145975575434327E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9954070197717539	WITHOUT_CLASSIFICATION	0.004592980228246064	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998963485434281	WITHOUT_CLASSIFICATION	1.0365145657184999E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998963485434281	WITHOUT_CLASSIFICATION	1.0365145657184999E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999148090071047	WITHOUT_CLASSIFICATION	8.519099289530378E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999961769566944	WITHOUT_CLASSIFICATION	3.823043305525466E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999358445180746	WITHOUT_CLASSIFICATION	6.415548192549528E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.502432231787048	IMPLEMENTATION	0.49756776821295196	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999848013101823	WITHOUT_CLASSIFICATION	1.5198689817589496E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999848013101823	WITHOUT_CLASSIFICATION	1.5198689817589496E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9997537293195684	WITHOUT_CLASSIFICATION	2.462706804316103E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976630368184269	WITHOUT_CLASSIFICATION	0.0023369631815730037	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999879572943866	WITHOUT_CLASSIFICATION	1.2042705613289372E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9958486688929679	WITHOUT_CLASSIFICATION	0.004151331107032106	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.963900839758691	WITHOUT_CLASSIFICATION	0.03609916024130908	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999717106267579	WITHOUT_CLASSIFICATION	2.8289373242110297E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999928728176144	WITHOUT_CLASSIFICATION	7.127182385595328E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999922668593137	WITHOUT_CLASSIFICATION	7.733140686301009E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999988183990811	WITHOUT_CLASSIFICATION	1.1816009188945337E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654842554182	WITHOUT_CLASSIFICATION	3.4515744581833605E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654842554182	WITHOUT_CLASSIFICATION	3.4515744581833605E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9991254687625702	WITHOUT_CLASSIFICATION	8.745312374297702E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996622739630985	WITHOUT_CLASSIFICATION	3.3772603690148756E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.999711970090904	WITHOUT_CLASSIFICATION	2.8802990909611173E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9993880709546327	WITHOUT_CLASSIFICATION	6.119290453674194E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998145215723068	WITHOUT_CLASSIFICATION	1.8547842769325756E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878915202118	WITHOUT_CLASSIFICATION	1.2108479788144935E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737957194929	WITHOUT_CLASSIFICATION	1.262042805071991E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999980672406704	WITHOUT_CLASSIFICATION	1.9327593295667045E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995513252085926	WITHOUT_CLASSIFICATION	4.486747914074813E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9995068379444659	WITHOUT_CLASSIFICATION	4.931620555340637E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999816920446825	WITHOUT_CLASSIFICATION	1.8307955317552173E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993981584598023	WITHOUT_CLASSIFICATION	6.018415401976103E-4	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999632308937505	WITHOUT_CLASSIFICATION	3.676910624941335E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994014775231638	WITHOUT_CLASSIFICATION	5.98522476836169E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999984658041157	WITHOUT_CLASSIFICATION	1.5341958843287464E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.999821240219377	WITHOUT_CLASSIFICATION	1.78759780623023E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999476774952917	WITHOUT_CLASSIFICATION	5.232250470830999E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9992810226786888	WITHOUT_CLASSIFICATION	7.189773213111022E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999414887788038	WITHOUT_CLASSIFICATION	5.851122119620377E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999293295892269	WITHOUT_CLASSIFICATION	7.067041077310207E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9976625320685745	WITHOUT_CLASSIFICATION	0.002337467931425512	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9951398037294154	WITHOUT_CLASSIFICATION	0.0048601962705845944	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9951398037294154	WITHOUT_CLASSIFICATION	0.0048601962705845944	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9985028508200446	WITHOUT_CLASSIFICATION	0.0014971491799553552	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999955906860784	WITHOUT_CLASSIFICATION	4.409313921656271E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.998077907266533	WITHOUT_CLASSIFICATION	0.0019220927334669504	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9992929553005986	WITHOUT_CLASSIFICATION	7.070446994013307E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9995484534283858	WITHOUT_CLASSIFICATION	4.515465716141454E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998357041648929	WITHOUT_CLASSIFICATION	1.6429583510720096E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999976836805936	WITHOUT_CLASSIFICATION	2.316319406397725E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999849960274	WITHOUT_CLASSIFICATION	1.5003972643492307E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995128211990737	WITHOUT_CLASSIFICATION	4.871788009263645E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998430921545107	WITHOUT_CLASSIFICATION	1.5690784548918089E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882879328014	WITHOUT_CLASSIFICATION	1.1712067198596442E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9994773396018329	WITHOUT_CLASSIFICATION	5.226603981670899E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999813200665435	WITHOUT_CLASSIFICATION	1.8679933456473283E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999906403577296	WITHOUT_CLASSIFICATION	9.359642270401326E-5	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999971143694485	WITHOUT_CLASSIFICATION	2.8856305515977354E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999814121090962	WITHOUT_CLASSIFICATION	1.8587890903807086E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999806786376452	WITHOUT_CLASSIFICATION	1.93213623548408E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997518563639047	WITHOUT_CLASSIFICATION	2.481436360952115E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9977927054390668	WITHOUT_CLASSIFICATION	0.002207294560933096	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999962166692374	WITHOUT_CLASSIFICATION	3.783330762625484E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999966384605367	WITHOUT_CLASSIFICATION	3.361539463295837E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999699649519	WITHOUT_CLASSIFICATION	3.003504811485637E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999883669070392	WITHOUT_CLASSIFICATION	1.1633092960906261E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999993878038449	WITHOUT_CLASSIFICATION	6.121961551859852E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999410440092857	WITHOUT_CLASSIFICATION	5.895599071428168E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999410440092857	WITHOUT_CLASSIFICATION	5.895599071428168E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9975364619832734	WITHOUT_CLASSIFICATION	0.00246353801672664	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9899373137860533	WITHOUT_CLASSIFICATION	0.010062686213946766	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999901835320564	WITHOUT_CLASSIFICATION	9.816467943613312E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998935848584711	WITHOUT_CLASSIFICATION	1.0641514152895998E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999837372386774	WITHOUT_CLASSIFICATION	1.6262761322647826E-5	IMPLEMENTATION
