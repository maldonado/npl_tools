// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9984816230352995	WITHOUT_CLASSIFICATION	0.0015183769647005101	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9984816230352995	WITHOUT_CLASSIFICATION	0.0015183769647005101	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9847275720440829	WITHOUT_CLASSIFICATION	0.015272427955917111	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9884480670342416	WITHOUT_CLASSIFICATION	0.011551932965758393	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9385600145563242	WITHOUT_CLASSIFICATION	0.06143998544367573	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9179643135094685	IMPLEMENTATION	0.08203568649053157	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9897082060203944	WITHOUT_CLASSIFICATION	0.010291793979605585	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7145055218297223	IMPLEMENTATION	0.2854944781702778	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9797944922567358	WITHOUT_CLASSIFICATION	0.020205507743264305	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9461370464662182	WITHOUT_CLASSIFICATION	0.05386295353378181	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999528841537482	WITHOUT_CLASSIFICATION	4.7115846251937854E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8887694264102454	WITHOUT_CLASSIFICATION	0.11123057358975454	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9577541893974919	WITHOUT_CLASSIFICATION	0.042245810602508066	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9577541893974919	WITHOUT_CLASSIFICATION	0.042245810602508066	IMPLEMENTATION
/**	IMPLEMENTATION	0.5049512865046891	IMPLEMENTATION	0.4950487134953109	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6203050729539619	IMPLEMENTATION	0.37969492704603824	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999981132453718	IMPLEMENTATION	1.886754628195444E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.5620677223351882	WITHOUT_CLASSIFICATION	0.4379322776648119	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999691120228571	WITHOUT_CLASSIFICATION	3.088797714299043E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9316037432387588	WITHOUT_CLASSIFICATION	0.0683962567612411	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9445827639603446	WITHOUT_CLASSIFICATION	0.05541723603965552	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9994334984516958	WITHOUT_CLASSIFICATION	5.665015483041761E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9919459052551305	WITHOUT_CLASSIFICATION	0.008054094744869476	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7375952860548847	WITHOUT_CLASSIFICATION	0.26240471394511533	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7375952860548847	WITHOUT_CLASSIFICATION	0.26240471394511533	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7538416957768632	WITHOUT_CLASSIFICATION	0.2461583042231367	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9700478931270247	WITHOUT_CLASSIFICATION	0.029952106872975337	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.7314060654247452	IMPLEMENTATION	0.26859393457525493	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9870863775726024	WITHOUT_CLASSIFICATION	0.012913622427397532	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9137092000680628	IMPLEMENTATION	0.0862907999319372	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9917721027230417	WITHOUT_CLASSIFICATION	0.00822789727695837	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9727710677799195	WITHOUT_CLASSIFICATION	0.027228932220080517	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998047786437976	WITHOUT_CLASSIFICATION	1.9522135620243008E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8859352795599608	WITHOUT_CLASSIFICATION	0.11406472044003925	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.6700866757724977	IMPLEMENTATION	0.3299133242275022	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9323645845000204	WITHOUT_CLASSIFICATION	0.06763541549997962	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9493844294264331	IMPLEMENTATION	0.05061557057356694	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.974321867877508	WITHOUT_CLASSIFICATION	0.02567813212249202	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9916698545191853	WITHOUT_CLASSIFICATION	0.00833014548081471	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9263482163831975	IMPLEMENTATION	0.07365178361680241	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9263482163831975	IMPLEMENTATION	0.07365178361680241	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5931813757744653	WITHOUT_CLASSIFICATION	0.4068186242255348	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999465309835733	WITHOUT_CLASSIFICATION	5.346901642660791E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9973360966432414	WITHOUT_CLASSIFICATION	0.002663903356758608	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9954392311299759	IMPLEMENTATION	0.004560768870024039	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9554207836947385	WITHOUT_CLASSIFICATION	0.04457921630526151	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.8936546114196	WITHOUT_CLASSIFICATION	0.10634538858039996	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.992985434898449	WITHOUT_CLASSIFICATION	0.00701456510155091	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9997712531276297	WITHOUT_CLASSIFICATION	2.2874687237031552E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9887751695705235	WITHOUT_CLASSIFICATION	0.01122483042947644	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9977932621889131	WITHOUT_CLASSIFICATION	0.0022067378110869652	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.5759171814723167	WITHOUT_CLASSIFICATION	0.4240828185276832	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9492842584279829	WITHOUT_CLASSIFICATION	0.05071574157201707	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9452329490360749	WITHOUT_CLASSIFICATION	0.05476705096392518	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9327342704829186	WITHOUT_CLASSIFICATION	0.06726572951708147	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9727710677799195	WITHOUT_CLASSIFICATION	0.027228932220080517	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9327342704829186	WITHOUT_CLASSIFICATION	0.06726572951708147	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9838527226909801	IMPLEMENTATION	0.016147277309019884	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.7564282155510271	IMPLEMENTATION	0.24357178444897287	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9327342704829186	WITHOUT_CLASSIFICATION	0.06726572951708147	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999974955750947	WITHOUT_CLASSIFICATION	2.5044249053133978E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999974955750947	WITHOUT_CLASSIFICATION	2.5044249053133978E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9983199812610343	IMPLEMENTATION	0.0016800187389657691	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9962727660567094	WITHOUT_CLASSIFICATION	0.0037272339432905654	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997363321694844	WITHOUT_CLASSIFICATION	2.6366783051556987E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999782292744586	WITHOUT_CLASSIFICATION	2.177072554138328E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998276231698425	WITHOUT_CLASSIFICATION	1.7237683015745338E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999969597123262	WITHOUT_CLASSIFICATION	3.0402876738023538E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999969597123262	WITHOUT_CLASSIFICATION	3.0402876738023538E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999967062196606	WITHOUT_CLASSIFICATION	3.293780339409616E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998563843503911	WITHOUT_CLASSIFICATION	1.4361564960891566E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999433897315401	WITHOUT_CLASSIFICATION	5.661026845989648E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999612913449449	WITHOUT_CLASSIFICATION	3.870865505507192E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999991444779774	WITHOUT_CLASSIFICATION	8.555220225191175E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999991444779774	WITHOUT_CLASSIFICATION	8.555220225191175E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999821089366054	WITHOUT_CLASSIFICATION	1.7891063394644984E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994914878509151	WITHOUT_CLASSIFICATION	5.08512149084941E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999218033604172	WITHOUT_CLASSIFICATION	7.819663958271385E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999128149411097	WITHOUT_CLASSIFICATION	8.718505889019564E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999973076208634	WITHOUT_CLASSIFICATION	2.692379136576417E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854808627077	WITHOUT_CLASSIFICATION	1.4519137292300713E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999755257784508	WITHOUT_CLASSIFICATION	2.44742215492047E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992160559954294	WITHOUT_CLASSIFICATION	7.839440045705509E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995961972569144	WITHOUT_CLASSIFICATION	4.0380274308557596E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999929083379947	WITHOUT_CLASSIFICATION	7.09166200531595E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9998280399395382	WITHOUT_CLASSIFICATION	1.7196006046179445E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999871675969062	WITHOUT_CLASSIFICATION	1.2832403093861926E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997743414107807	WITHOUT_CLASSIFICATION	2.2565858921922202E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998884667117889	WITHOUT_CLASSIFICATION	1.1153328821112146E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9771487888469873	WITHOUT_CLASSIFICATION	0.02285121115301269	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049512865046891	IMPLEMENTATION	0.4950487134953109	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049512865046891	IMPLEMENTATION	0.4950487134953109	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999567813435694	WITHOUT_CLASSIFICATION	4.321865643061134E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997343435019707	WITHOUT_CLASSIFICATION	2.656564980293614E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999753926282529	WITHOUT_CLASSIFICATION	2.4607371747226593E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998280863687439	WITHOUT_CLASSIFICATION	1.719136312560746E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999297337529628	WITHOUT_CLASSIFICATION	7.026624703720694E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998438192902165	WITHOUT_CLASSIFICATION	1.5618070978354697E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9988495034200278	WITHOUT_CLASSIFICATION	0.0011504965799722566	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997403543525238	WITHOUT_CLASSIFICATION	2.596456474761602E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9977583424483731	WITHOUT_CLASSIFICATION	0.0022416575516268473	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9977583424483731	WITHOUT_CLASSIFICATION	0.0022416575516268473	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9987960457253803	WITHOUT_CLASSIFICATION	0.001203954274619726	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.6312407669288841	WITHOUT_CLASSIFICATION	0.368759233071116	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998715852092537	WITHOUT_CLASSIFICATION	1.2841479074624418E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997503298046103	WITHOUT_CLASSIFICATION	2.4967019538978683E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999657173646076	WITHOUT_CLASSIFICATION	3.4282635392307225E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999946860217803	WITHOUT_CLASSIFICATION	5.3139782197722765E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9962014801800191	WITHOUT_CLASSIFICATION	0.00379851981998098	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998977431814017	WITHOUT_CLASSIFICATION	1.0225681859827984E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9948863613395201	WITHOUT_CLASSIFICATION	0.005113638660479887	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.999583472811712	WITHOUT_CLASSIFICATION	4.1652718828799997E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998771346208559	WITHOUT_CLASSIFICATION	1.2286537914404897E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9995944546534861	WITHOUT_CLASSIFICATION	4.055453465139604E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999849695135517	WITHOUT_CLASSIFICATION	1.5030486448288914E-4	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9981653011637514	WITHOUT_CLASSIFICATION	0.0018346988362487374	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999851691181131	WITHOUT_CLASSIFICATION	1.4830881886947932E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999847736769688	WITHOUT_CLASSIFICATION	1.522632303111825E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999317866125393	WITHOUT_CLASSIFICATION	6.821338746059225E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999758367444009	WITHOUT_CLASSIFICATION	2.4163255599021554E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999944026394423	WITHOUT_CLASSIFICATION	5.597360557702662E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999588491770428	WITHOUT_CLASSIFICATION	4.115082295722237E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999435259758259	WITHOUT_CLASSIFICATION	5.6474024174069385E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999911717673226	WITHOUT_CLASSIFICATION	8.828232677365504E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997878209137078	WITHOUT_CLASSIFICATION	2.1217908629228425E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9992427294840117	WITHOUT_CLASSIFICATION	7.572705159882247E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7959458480750121	IMPLEMENTATION	0.20405415192498785	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9992889435306982	WITHOUT_CLASSIFICATION	7.110564693017616E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999722417023077	WITHOUT_CLASSIFICATION	2.775829769225254E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9983271820112172	WITHOUT_CLASSIFICATION	0.0016728179887828306	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999987644276366	WITHOUT_CLASSIFICATION	1.2355723634117838E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999909141562472	WITHOUT_CLASSIFICATION	9.085843752891245E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9978538471154871	WITHOUT_CLASSIFICATION	0.002146152884513036	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999577880113248	WITHOUT_CLASSIFICATION	4.221198867511882E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999970125849507	WITHOUT_CLASSIFICATION	2.9874150492523064E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999245335735598	WITHOUT_CLASSIFICATION	7.546642644010665E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999872021441316	WITHOUT_CLASSIFICATION	1.2797855868492602E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999985068394109	WITHOUT_CLASSIFICATION	1.4931605891159173E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999245335735598	WITHOUT_CLASSIFICATION	7.546642644010665E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9956125000164892	WITHOUT_CLASSIFICATION	0.004387499983510795	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998083921175912	WITHOUT_CLASSIFICATION	1.916078824086424E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9994707737841583	WITHOUT_CLASSIFICATION	5.292262158418259E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999064109073459	WITHOUT_CLASSIFICATION	9.358909265408787E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999272379599832	WITHOUT_CLASSIFICATION	7.276204001679954E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999272379599832	WITHOUT_CLASSIFICATION	7.276204001679954E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9977583424483731	WITHOUT_CLASSIFICATION	0.0022416575516268473	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999954056836572	WITHOUT_CLASSIFICATION	4.594316342861774E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999945177612144	WITHOUT_CLASSIFICATION	5.482238785591276E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9997667511197249	WITHOUT_CLASSIFICATION	2.3324888027512547E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999821338548547	WITHOUT_CLASSIFICATION	1.7866145145402416E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998684085672521	WITHOUT_CLASSIFICATION	1.315914327478262E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9974822528194056	WITHOUT_CLASSIFICATION	0.002517747180594343	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999887222546519	WITHOUT_CLASSIFICATION	1.1277745348115872E-4	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999818376875779	WITHOUT_CLASSIFICATION	1.816231242217781E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999585002199498	WITHOUT_CLASSIFICATION	4.149978005012289E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999585002199498	WITHOUT_CLASSIFICATION	4.149978005012289E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998589115663906	WITHOUT_CLASSIFICATION	1.410884336092879E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998538529865464	WITHOUT_CLASSIFICATION	1.4614701345374233E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999973188585169	WITHOUT_CLASSIFICATION	2.6811414830969978E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999585002199498	WITHOUT_CLASSIFICATION	4.149978005012289E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998589115663906	WITHOUT_CLASSIFICATION	1.410884336092879E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998589115663906	WITHOUT_CLASSIFICATION	1.410884336092879E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999946907563553	WITHOUT_CLASSIFICATION	5.309243644657539E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9997923717552035	WITHOUT_CLASSIFICATION	2.0762824479650038E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998534901976	WITHOUT_CLASSIFICATION	1.465098024969044E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999840882944784	WITHOUT_CLASSIFICATION	1.5911705521619734E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990115674543805	WITHOUT_CLASSIFICATION	9.88432545619551E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990115674543805	WITHOUT_CLASSIFICATION	9.88432545619551E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999053947445793	WITHOUT_CLASSIFICATION	9.460525542072983E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9982481741633009	WITHOUT_CLASSIFICATION	0.0017518258366990647	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999588992599843	WITHOUT_CLASSIFICATION	4.110074001578986E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999968100676059	WITHOUT_CLASSIFICATION	3.189932394246044E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999968100676059	WITHOUT_CLASSIFICATION	3.189932394246044E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999356626167598	WITHOUT_CLASSIFICATION	6.433738324020517E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9971902996251951	WITHOUT_CLASSIFICATION	0.002809700374804872	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998227430599563	WITHOUT_CLASSIFICATION	1.772569400436648E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999002481514	WITHOUT_CLASSIFICATION	9.975184860349399E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999892954786047	WITHOUT_CLASSIFICATION	1.0704521395194914E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998256352865321	WITHOUT_CLASSIFICATION	1.7436471346784406E-4	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999593679932641	WITHOUT_CLASSIFICATION	4.0632006735895267E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995091156279764	WITHOUT_CLASSIFICATION	4.908843720235675E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998227430599563	WITHOUT_CLASSIFICATION	1.772569400436648E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9986813483895159	WITHOUT_CLASSIFICATION	0.0013186516104839866	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999882363837524	WITHOUT_CLASSIFICATION	1.1763616247592377E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999882363837524	WITHOUT_CLASSIFICATION	1.1763616247592377E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999994153656612	WITHOUT_CLASSIFICATION	5.846343387807169E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999579435496505	WITHOUT_CLASSIFICATION	4.205645034947509E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912649254845869	WITHOUT_CLASSIFICATION	0.008735074515413076	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9996716880323794	WITHOUT_CLASSIFICATION	3.283119676206379E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9995089467356713	WITHOUT_CLASSIFICATION	4.910532643287453E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9988712844167479	WITHOUT_CLASSIFICATION	0.0011287155832520686	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998492480033242	WITHOUT_CLASSIFICATION	1.5075199667586979E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9992002487253002	WITHOUT_CLASSIFICATION	7.997512746998101E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993484444251	WITHOUT_CLASSIFICATION	6.515555749465383E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993484444251	WITHOUT_CLASSIFICATION	6.515555749465383E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997363321694844	WITHOUT_CLASSIFICATION	2.6366783051556987E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9998911962298235	WITHOUT_CLASSIFICATION	1.0880377017651535E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999083518303877	WITHOUT_CLASSIFICATION	9.164816961225355E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999006183058339	WITHOUT_CLASSIFICATION	9.938169416607509E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9997992574723821	WITHOUT_CLASSIFICATION	2.0074252761795867E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9997089596400884	WITHOUT_CLASSIFICATION	2.9104035991159055E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999098723713086	WITHOUT_CLASSIFICATION	9.012762869148887E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999869343167644	WITHOUT_CLASSIFICATION	1.3065683235571556E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999861685893259	WITHOUT_CLASSIFICATION	1.3831410674162872E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998985838526057	WITHOUT_CLASSIFICATION	1.0141614739435694E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9997089596400884	WITHOUT_CLASSIFICATION	2.9104035991159055E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999689544008183	WITHOUT_CLASSIFICATION	3.104559918164151E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9994003624161836	WITHOUT_CLASSIFICATION	5.996375838163991E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998077587826243	WITHOUT_CLASSIFICATION	1.922412173757825E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999326586148501	WITHOUT_CLASSIFICATION	6.734138514986371E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999664905715605	WITHOUT_CLASSIFICATION	3.350942843950304E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999969597123262	WITHOUT_CLASSIFICATION	3.0402876738023538E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9980419179719863	WITHOUT_CLASSIFICATION	0.0019580820280137496	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9995318203668327	WITHOUT_CLASSIFICATION	4.681796331671573E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999213032854766	WITHOUT_CLASSIFICATION	7.8696714523408E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999521934673062	WITHOUT_CLASSIFICATION	4.7806532693718816E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.999594331582604	WITHOUT_CLASSIFICATION	4.0566841739598906E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999500345287208	WITHOUT_CLASSIFICATION	4.996547127931899E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999764476404255	WITHOUT_CLASSIFICATION	2.3552359574440316E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999584417500254	WITHOUT_CLASSIFICATION	4.155824997457859E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9957538455659469	WITHOUT_CLASSIFICATION	0.004246154434053037	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999885812968172	WITHOUT_CLASSIFICATION	1.1418703182817714E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999861685893259	WITHOUT_CLASSIFICATION	1.3831410674162872E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.999594331582604	WITHOUT_CLASSIFICATION	4.0566841739598906E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999967062196606	WITHOUT_CLASSIFICATION	3.293780339409616E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998093447937412	WITHOUT_CLASSIFICATION	1.9065520625888486E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998584244882927	WITHOUT_CLASSIFICATION	1.415755117073465E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999129576324395	WITHOUT_CLASSIFICATION	8.704236756046927E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9996074311636729	WITHOUT_CLASSIFICATION	3.925688363271532E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998791415439391	WITHOUT_CLASSIFICATION	1.2085845606094567E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999265446439896	WITHOUT_CLASSIFICATION	7.345535601044878E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998288304505245	WITHOUT_CLASSIFICATION	1.7116954947544232E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998288304505245	WITHOUT_CLASSIFICATION	1.7116954947544232E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999978696279186	WITHOUT_CLASSIFICATION	2.130372081387983E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999939514151676	WITHOUT_CLASSIFICATION	6.048584832406938E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999802085540465	WITHOUT_CLASSIFICATION	1.9791445953477865E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9998579865388995	WITHOUT_CLASSIFICATION	1.4201346110046656E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998691358291051	WITHOUT_CLASSIFICATION	1.3086417089495456E-4	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999482274625819	WITHOUT_CLASSIFICATION	5.17725374179601E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999678075447878	WITHOUT_CLASSIFICATION	3.2192455212245915E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998563843503911	WITHOUT_CLASSIFICATION	1.4361564960891566E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999672501150206	WITHOUT_CLASSIFICATION	3.2749884979371484E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999672501150206	WITHOUT_CLASSIFICATION	3.2749884979371484E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999672501150206	WITHOUT_CLASSIFICATION	3.2749884979371484E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999493556480649	WITHOUT_CLASSIFICATION	5.064435193516673E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999672501150206	WITHOUT_CLASSIFICATION	3.2749884979371484E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999553934683517	WITHOUT_CLASSIFICATION	4.4606531648156244E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999906100866802	WITHOUT_CLASSIFICATION	9.389913319752405E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999860397890347	WITHOUT_CLASSIFICATION	1.3960210965308848E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999861685893259	WITHOUT_CLASSIFICATION	1.3831410674162872E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.999594331582604	WITHOUT_CLASSIFICATION	4.0566841739598906E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.999594331582604	WITHOUT_CLASSIFICATION	4.0566841739598906E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.999638427644591	WITHOUT_CLASSIFICATION	3.6157235540901174E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9995340532739753	WITHOUT_CLASSIFICATION	4.6594672602470993E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999656379972617	WITHOUT_CLASSIFICATION	3.436200273832139E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999612913449449	WITHOUT_CLASSIFICATION	3.870865505507192E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999612913449449	WITHOUT_CLASSIFICATION	3.870865505507192E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9926909736562681	WITHOUT_CLASSIFICATION	0.007309026343731907	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999950936639741	WITHOUT_CLASSIFICATION	4.906336025864355E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999910285110724	WITHOUT_CLASSIFICATION	8.971488927706148E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999870299898609	WITHOUT_CLASSIFICATION	1.2970010139092724E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999934705525861	WITHOUT_CLASSIFICATION	6.529447413924113E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999859139603443	WITHOUT_CLASSIFICATION	1.4086039655700665E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999991444779774	WITHOUT_CLASSIFICATION	8.555220225191175E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999854221680706	WITHOUT_CLASSIFICATION	1.4577831929333024E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999854221680706	WITHOUT_CLASSIFICATION	1.4577831929333024E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999821089366054	WITHOUT_CLASSIFICATION	1.7891063394644984E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999821089366054	WITHOUT_CLASSIFICATION	1.7891063394644984E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9997953784349449	WITHOUT_CLASSIFICATION	2.0462156505504894E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9997953784349449	WITHOUT_CLASSIFICATION	2.0462156505504894E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998517352415617	WITHOUT_CLASSIFICATION	1.482647584383705E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998517352415617	WITHOUT_CLASSIFICATION	1.482647584383705E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999612913449449	WITHOUT_CLASSIFICATION	3.870865505507192E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999991444779774	WITHOUT_CLASSIFICATION	8.555220225191175E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999854221680706	WITHOUT_CLASSIFICATION	1.4577831929333024E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999854221680706	WITHOUT_CLASSIFICATION	1.4577831929333024E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999821089366054	WITHOUT_CLASSIFICATION	1.7891063394644984E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9997953784349449	WITHOUT_CLASSIFICATION	2.0462156505504894E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9997953784349449	WITHOUT_CLASSIFICATION	2.0462156505504894E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998517352415617	WITHOUT_CLASSIFICATION	1.482647584383705E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998473601717863	WITHOUT_CLASSIFICATION	1.5263982821374098E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9988029676754712	WITHOUT_CLASSIFICATION	0.00119703232452886	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9985639812544757	WITHOUT_CLASSIFICATION	0.0014360187455243307	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9993298581454879	WITHOUT_CLASSIFICATION	6.701418545120025E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.999560987199382	WITHOUT_CLASSIFICATION	4.390128006179506E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.999985302783962	WITHOUT_CLASSIFICATION	1.46972160380095E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997841448376186	WITHOUT_CLASSIFICATION	2.1585516238143302E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999958720128836	WITHOUT_CLASSIFICATION	4.127987116374607E-6	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999729292600423	WITHOUT_CLASSIFICATION	2.707073995765207E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9938238562863688	WITHOUT_CLASSIFICATION	0.006176143713631213	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998754934475701	WITHOUT_CLASSIFICATION	1.2450655242991632E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999628522387848	WITHOUT_CLASSIFICATION	3.714776121511057E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9977583424483731	WITHOUT_CLASSIFICATION	0.0022416575516268473	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.999985302783962	WITHOUT_CLASSIFICATION	1.46972160380095E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999992493285293	WITHOUT_CLASSIFICATION	7.506714706975432E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991320489888966	WITHOUT_CLASSIFICATION	8.679510111033849E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991320489888966	WITHOUT_CLASSIFICATION	8.679510111033849E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9980296879980581	WITHOUT_CLASSIFICATION	0.001970312001941932	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999992333822272	WITHOUT_CLASSIFICATION	7.666177729192402E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9996771359138285	WITHOUT_CLASSIFICATION	3.228640861715606E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997561231585107	WITHOUT_CLASSIFICATION	2.438768414892071E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997561231585107	WITHOUT_CLASSIFICATION	2.438768414892071E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999973076208634	WITHOUT_CLASSIFICATION	2.692379136576417E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999803953839588	WITHOUT_CLASSIFICATION	1.960461604119911E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999803953839588	WITHOUT_CLASSIFICATION	1.960461604119911E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9982933314491782	WITHOUT_CLASSIFICATION	0.001706668550821733	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999892569220646	WITHOUT_CLASSIFICATION	1.0743077935437726E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999929083379947	WITHOUT_CLASSIFICATION	7.09166200531595E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.99998657416323	WITHOUT_CLASSIFICATION	1.3425836769883438E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854808627077	WITHOUT_CLASSIFICATION	1.4519137292300713E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8123883745894922	WITHOUT_CLASSIFICATION	0.1876116254105078	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999755081536909	WITHOUT_CLASSIFICATION	2.449184630910665E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999380074020204	WITHOUT_CLASSIFICATION	6.199259797960278E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998873293790547	WITHOUT_CLASSIFICATION	1.126706209453886E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999951372626501	WITHOUT_CLASSIFICATION	4.862737349901948E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999992643058448	WITHOUT_CLASSIFICATION	7.356941552308157E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998884667117889	WITHOUT_CLASSIFICATION	1.1153328821112146E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998216409548928	WITHOUT_CLASSIFICATION	1.7835904510720015E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9996050019796467	WITHOUT_CLASSIFICATION	3.9499802035325524E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999855054958345	WITHOUT_CLASSIFICATION	1.4494504165525753E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9995896014197392	WITHOUT_CLASSIFICATION	4.103985802608429E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999023824468996	WITHOUT_CLASSIFICATION	9.761755310038522E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997472267326504	WITHOUT_CLASSIFICATION	2.5277326734963367E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999929083379947	WITHOUT_CLASSIFICATION	7.09166200531595E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9992756104973114	WITHOUT_CLASSIFICATION	7.243895026884853E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9997093085125102	WITHOUT_CLASSIFICATION	2.906914874898089E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999860539785087	WITHOUT_CLASSIFICATION	1.394602149123652E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854808627077	WITHOUT_CLASSIFICATION	1.4519137292300713E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997472267326504	WITHOUT_CLASSIFICATION	2.5277326734963367E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9992756104973114	WITHOUT_CLASSIFICATION	7.243895026884853E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999860539785087	WITHOUT_CLASSIFICATION	1.394602149123652E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998367579915268	WITHOUT_CLASSIFICATION	1.6324200847329462E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998367579915268	WITHOUT_CLASSIFICATION	1.6324200847329462E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9992287579328445	WITHOUT_CLASSIFICATION	7.712420671554817E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9977270955741594	WITHOUT_CLASSIFICATION	0.0022729044258405716	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999982155039305	WITHOUT_CLASSIFICATION	1.784496069481396E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.999953129687652	WITHOUT_CLASSIFICATION	4.687031234795685E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9963604036277113	WITHOUT_CLASSIFICATION	0.0036395963722886814	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999446667068983	WITHOUT_CLASSIFICATION	5.5333293101626723E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9977607045218359	WITHOUT_CLASSIFICATION	0.002239295478164111	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9989160122739983	WITHOUT_CLASSIFICATION	0.0010839877260016978	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999446667068983	WITHOUT_CLASSIFICATION	5.5333293101626723E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999871675969062	WITHOUT_CLASSIFICATION	1.2832403093861926E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999183881742797	WITHOUT_CLASSIFICATION	8.161182572029106E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997472267326504	WITHOUT_CLASSIFICATION	2.5277326734963367E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999102524166362	WITHOUT_CLASSIFICATION	8.974758336383791E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9998958046180765	WITHOUT_CLASSIFICATION	1.0419538192352414E-4	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9967983485199434	WITHOUT_CLASSIFICATION	0.0032016514800566566	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9998723905637594	WITHOUT_CLASSIFICATION	1.276094362406571E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999956691410938	WITHOUT_CLASSIFICATION	4.330858906203051E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999987466370832	WITHOUT_CLASSIFICATION	1.2533629167532574E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999749437474609	WITHOUT_CLASSIFICATION	2.505625253914796E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.997277441785016	WITHOUT_CLASSIFICATION	0.0027225582149839975	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9995958680977758	WITHOUT_CLASSIFICATION	4.041319022241879E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9993166187485085	WITHOUT_CLASSIFICATION	6.833812514914392E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996982789010236	WITHOUT_CLASSIFICATION	3.0172109897644273E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998884667117889	WITHOUT_CLASSIFICATION	1.1153328821112146E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.999899579500901	WITHOUT_CLASSIFICATION	1.0042049909891495E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999803888678147	WITHOUT_CLASSIFICATION	1.9611132185305992E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9990445672332705	WITHOUT_CLASSIFICATION	9.554327667294452E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9996977733297779	WITHOUT_CLASSIFICATION	3.022266702220691E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9996988517208224	WITHOUT_CLASSIFICATION	3.011482791776345E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999024079553905	WITHOUT_CLASSIFICATION	9.759204460943569E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999375120656	WITHOUT_CLASSIFICATION	6.248793439871501E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999824919484712	WITHOUT_CLASSIFICATION	1.7508051528763873E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9897550848335577	WITHOUT_CLASSIFICATION	0.010244915166442306	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9995930539998327	WITHOUT_CLASSIFICATION	4.069460001673487E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9777259542545477	WITHOUT_CLASSIFICATION	0.022274045745452328	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9777259542545477	WITHOUT_CLASSIFICATION	0.022274045745452328	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996389511177848	WITHOUT_CLASSIFICATION	3.6104888221521726E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998939238487142	WITHOUT_CLASSIFICATION	1.060761512858268E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9995625241473302	WITHOUT_CLASSIFICATION	4.374758526698327E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999894580399833	WITHOUT_CLASSIFICATION	1.0541960016688666E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994178606735618	WITHOUT_CLASSIFICATION	5.821393264382286E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9985468351780256	WITHOUT_CLASSIFICATION	0.0014531648219743801	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999432395828717	WITHOUT_CLASSIFICATION	5.676041712833893E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9767992088137517	WITHOUT_CLASSIFICATION	0.023200791186248296	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998906211905272	WITHOUT_CLASSIFICATION	1.0937880947280791E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999562899486589	WITHOUT_CLASSIFICATION	4.371005134109335E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998975991402819	WITHOUT_CLASSIFICATION	1.0240085971807244E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9996889702142547	WITHOUT_CLASSIFICATION	3.110297857453274E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9937871926057136	WITHOUT_CLASSIFICATION	0.006212807394286423	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937260514984	WITHOUT_CLASSIFICATION	6.273948501599522E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997456834191941	WITHOUT_CLASSIFICATION	2.543165808058874E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999951229404241	WITHOUT_CLASSIFICATION	4.877059575901813E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999996599123983	WITHOUT_CLASSIFICATION	3.400876017475431E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9995174705791162	WITHOUT_CLASSIFICATION	4.8252942088385326E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999127797015709	WITHOUT_CLASSIFICATION	8.722029842905203E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999869530748792	WITHOUT_CLASSIFICATION	1.3046925120860779E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999869530748792	WITHOUT_CLASSIFICATION	1.3046925120860779E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9977302902062034	WITHOUT_CLASSIFICATION	0.002269709793796507	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9977302902062034	WITHOUT_CLASSIFICATION	0.002269709793796507	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9897550848335577	WITHOUT_CLASSIFICATION	0.010244915166442306	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9984257648861176	WITHOUT_CLASSIFICATION	0.0015742351138823764	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994040327793237	WITHOUT_CLASSIFICATION	5.959672206763985E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991427488413362	WITHOUT_CLASSIFICATION	8.572511586636582E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994040327793237	WITHOUT_CLASSIFICATION	5.959672206763985E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991427488413362	WITHOUT_CLASSIFICATION	8.572511586636582E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999146182217948	WITHOUT_CLASSIFICATION	8.538177820518512E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999916505564616	WITHOUT_CLASSIFICATION	8.34944353851847E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999562249539599	WITHOUT_CLASSIFICATION	4.377504604020581E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.999999292602703	WITHOUT_CLASSIFICATION	7.073972968827058E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9880603830134376	WITHOUT_CLASSIFICATION	0.011939616986562478	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9988502812085025	WITHOUT_CLASSIFICATION	0.0011497187914974202	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9982056579965546	WITHOUT_CLASSIFICATION	0.0017943420034455088	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9976336253978731	WITHOUT_CLASSIFICATION	0.0023663746021268263	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999441182866093	WITHOUT_CLASSIFICATION	5.588171339061015E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999964370640712	WITHOUT_CLASSIFICATION	3.562935928940757E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9995404304456497	WITHOUT_CLASSIFICATION	4.5956955435029706E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999911997556211	WITHOUT_CLASSIFICATION	8.800244378960267E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999927430830395	WITHOUT_CLASSIFICATION	7.256916960509543E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9985423259135034	WITHOUT_CLASSIFICATION	0.0014576740864964523	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9985423259135034	WITHOUT_CLASSIFICATION	0.0014576740864964523	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998758766774001	WITHOUT_CLASSIFICATION	1.2412332259985004E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998758766774001	WITHOUT_CLASSIFICATION	1.2412332259985004E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999851167049169	WITHOUT_CLASSIFICATION	1.4883295083042751E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999146182217948	WITHOUT_CLASSIFICATION	8.538177820518512E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9908956966090339	WITHOUT_CLASSIFICATION	0.009104303390966073	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999524512219308	WITHOUT_CLASSIFICATION	4.754877806918759E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9924819823897796	WITHOUT_CLASSIFICATION	0.0075180176102203605	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998981323578346	WITHOUT_CLASSIFICATION	1.0186764216524723E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9943472885177812	WITHOUT_CLASSIFICATION	0.005652711482218714	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999146182217948	WITHOUT_CLASSIFICATION	8.538177820518512E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998981323578346	WITHOUT_CLASSIFICATION	1.0186764216524723E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9943472885177812	WITHOUT_CLASSIFICATION	0.005652711482218714	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9991411267018907	WITHOUT_CLASSIFICATION	8.588732981092998E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9995697060124391	WITHOUT_CLASSIFICATION	4.3029398756089585E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997539510807845	WITHOUT_CLASSIFICATION	2.4604891921556387E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999146182217948	WITHOUT_CLASSIFICATION	8.538177820518512E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999146182217948	WITHOUT_CLASSIFICATION	8.538177820518512E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999427539167088	WITHOUT_CLASSIFICATION	5.724608329115826E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999422853807692	WITHOUT_CLASSIFICATION	5.771461923061331E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999497404464504	WITHOUT_CLASSIFICATION	5.025955354959404E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999993141020148	WITHOUT_CLASSIFICATION	6.85897985197611E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996228417538299	WITHOUT_CLASSIFICATION	3.7715824617012627E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999931768871763	WITHOUT_CLASSIFICATION	6.823112823733785E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9985136487302504	WITHOUT_CLASSIFICATION	0.0014863512697496123	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999510305675915	WITHOUT_CLASSIFICATION	4.8969432408435675E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999968962511489	WITHOUT_CLASSIFICATION	3.1037488510970046E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9996291330437796	WITHOUT_CLASSIFICATION	3.7086695622043966E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9990972934899669	WITHOUT_CLASSIFICATION	9.027065100332227E-4	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9959375554264507	WITHOUT_CLASSIFICATION	0.004062444573549335	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999990446943722	WITHOUT_CLASSIFICATION	9.553056278008803E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999662539427483	WITHOUT_CLASSIFICATION	3.3746057251703756E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998405084583291	WITHOUT_CLASSIFICATION	1.5949154167087517E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989829356266	WITHOUT_CLASSIFICATION	1.0170643733573067E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998280863687439	WITHOUT_CLASSIFICATION	1.719136312560746E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999470704209763	WITHOUT_CLASSIFICATION	5.292957902369507E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9985895372398579	WITHOUT_CLASSIFICATION	0.001410462760142095	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9991427488413362	WITHOUT_CLASSIFICATION	8.572511586636582E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9977382205258201	WITHOUT_CLASSIFICATION	0.00226177947417999	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998280863687439	WITHOUT_CLASSIFICATION	1.719136312560746E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9658356010404222	WITHOUT_CLASSIFICATION	0.0341643989595778	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999306620173064	WITHOUT_CLASSIFICATION	6.93379826935591E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9913828709479244	WITHOUT_CLASSIFICATION	0.00861712905207556	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9997541416454192	WITHOUT_CLASSIFICATION	2.4585835458087123E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999692476832072	WITHOUT_CLASSIFICATION	3.07523167927623E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998910530268318	WITHOUT_CLASSIFICATION	1.0894697316822341E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997953856609539	WITHOUT_CLASSIFICATION	2.0461433904602158E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999388742430908	WITHOUT_CLASSIFICATION	6.112575690911856E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999761925278996	WITHOUT_CLASSIFICATION	2.3807472100401846E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999834826000774	WITHOUT_CLASSIFICATION	1.6517399922592304E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998287893021727	WITHOUT_CLASSIFICATION	1.7121069782738215E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998134318455678	WITHOUT_CLASSIFICATION	1.86568154432274E-4	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636965388615	WITHOUT_CLASSIFICATION	3.6303461138431003E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994418331764356	WITHOUT_CLASSIFICATION	5.581668235643686E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9954425137918996	WITHOUT_CLASSIFICATION	0.004557486208100435	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9949223898898588	WITHOUT_CLASSIFICATION	0.005077610110141211	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998275213687614	WITHOUT_CLASSIFICATION	1.724786312385652E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999905698397468	WITHOUT_CLASSIFICATION	9.43016025327012E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9926151618449028	WITHOUT_CLASSIFICATION	0.007384838155097164	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999831911731312	WITHOUT_CLASSIFICATION	1.680882686882041E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984653464793807	WITHOUT_CLASSIFICATION	0.0015346535206194143	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992104365808904	WITHOUT_CLASSIFICATION	7.895634191096357E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981119934842516	WITHOUT_CLASSIFICATION	0.0018880065157483158	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998783731371839	WITHOUT_CLASSIFICATION	1.2162686281608823E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978310988584836	WITHOUT_CLASSIFICATION	0.00216890114151639	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9994250165454759	WITHOUT_CLASSIFICATION	5.749834545241998E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997405331865665	WITHOUT_CLASSIFICATION	2.594668134334431E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984140771319726	WITHOUT_CLASSIFICATION	0.0015859228680272987	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985345026403553	WITHOUT_CLASSIFICATION	0.0014654973596448294	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968637480678395	WITHOUT_CLASSIFICATION	0.003136251932160473	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9930480734682451	WITHOUT_CLASSIFICATION	0.006951926531754943	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976833951130972	WITHOUT_CLASSIFICATION	0.002316604886902841	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972842154857987	WITHOUT_CLASSIFICATION	0.0027157845142012755	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999682661123359	WITHOUT_CLASSIFICATION	3.1733887664085515E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998426519657532	WITHOUT_CLASSIFICATION	1.5734803424684413E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7536170173031298	IMPLEMENTATION	0.24638298269687012	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978374927103	WITHOUT_CLASSIFICATION	2.162507289699021E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999997058727051	WITHOUT_CLASSIFICATION	2.94127294900079E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988354525891698	WITHOUT_CLASSIFICATION	0.001164547410830169	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9977483648931796	WITHOUT_CLASSIFICATION	0.002251635106820325	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9995697143551633	WITHOUT_CLASSIFICATION	4.3028564483680703E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9991411267018907	WITHOUT_CLASSIFICATION	8.588732981092998E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995947725268426	WITHOUT_CLASSIFICATION	4.052274731573499E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999617896095697	WITHOUT_CLASSIFICATION	3.821039043030735E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999051164958342	WITHOUT_CLASSIFICATION	9.488350416568597E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999143978464604	WITHOUT_CLASSIFICATION	8.560215353961201E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999598020481225	WITHOUT_CLASSIFICATION	4.019795187755264E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9986826357371745	WITHOUT_CLASSIFICATION	0.001317364262825461	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998804929089269	WITHOUT_CLASSIFICATION	1.1950709107315063E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995865714963497	WITHOUT_CLASSIFICATION	4.1342850365035376E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998009629582278	WITHOUT_CLASSIFICATION	1.9903704177203483E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998838804568527	WITHOUT_CLASSIFICATION	1.1611954314737944E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998436869711895	WITHOUT_CLASSIFICATION	1.5631302881042862E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9991299635582013	WITHOUT_CLASSIFICATION	8.700364417985948E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9993395560986351	WITHOUT_CLASSIFICATION	6.604439013649232E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999100257189494	WITHOUT_CLASSIFICATION	8.99742810505706E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998405509416239	WITHOUT_CLASSIFICATION	1.594490583760385E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996339829287744	WITHOUT_CLASSIFICATION	3.660170712257133E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999023917212251	WITHOUT_CLASSIFICATION	9.760827877484619E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999733896780598	WITHOUT_CLASSIFICATION	2.6610321940138947E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999448159029652	WITHOUT_CLASSIFICATION	5.5184097034702016E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999911528000495	WITHOUT_CLASSIFICATION	8.847199950506177E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9994138570662539	WITHOUT_CLASSIFICATION	5.861429337461962E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9987591830406214	WITHOUT_CLASSIFICATION	0.0012408169593786063	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999998156322695	WITHOUT_CLASSIFICATION	1.8436773050675894E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997812584017374	WITHOUT_CLASSIFICATION	2.1874159826266965E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988354525891698	WITHOUT_CLASSIFICATION	0.001164547410830169	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999554404886915	WITHOUT_CLASSIFICATION	4.4559511308495743E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999998189020261	WITHOUT_CLASSIFICATION	1.810979738946176E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996446483600512	WITHOUT_CLASSIFICATION	3.553516399488791E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978374927103	WITHOUT_CLASSIFICATION	2.162507289699021E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998420694570918	WITHOUT_CLASSIFICATION	1.5793054290831637E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999267198900468	WITHOUT_CLASSIFICATION	7.328010995326587E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998149622987819	WITHOUT_CLASSIFICATION	1.850377012181572E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999964141548753	WITHOUT_CLASSIFICATION	3.5858451247270404E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996445146265779	WITHOUT_CLASSIFICATION	3.554853734221341E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999311414237504	WITHOUT_CLASSIFICATION	6.885857624960233E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997061240402921	WITHOUT_CLASSIFICATION	2.9387595970782333E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999862063837062	WITHOUT_CLASSIFICATION	1.3793616293791757E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998348364724966	WITHOUT_CLASSIFICATION	1.651635275034862E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9975051952917218	WITHOUT_CLASSIFICATION	0.0024948047082782965	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999997276693613	WITHOUT_CLASSIFICATION	2.723306386992326E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.99998945350329	WITHOUT_CLASSIFICATION	1.0546496709872155E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9991411267018907	WITHOUT_CLASSIFICATION	8.588732981092998E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999782591843731	WITHOUT_CLASSIFICATION	2.1740815626912853E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999088149377928	WITHOUT_CLASSIFICATION	9.118506220718209E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998406101970737	WITHOUT_CLASSIFICATION	1.5938980292624767E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999735329496361	WITHOUT_CLASSIFICATION	2.6467050363982227E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9995041937883319	WITHOUT_CLASSIFICATION	4.958062116682383E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999801752503818	WITHOUT_CLASSIFICATION	1.9824749618195644E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999371034215794	WITHOUT_CLASSIFICATION	6.28965784206902E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.99976748701393	WITHOUT_CLASSIFICATION	2.3251298606993858E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999887724291403	WITHOUT_CLASSIFICATION	1.1227570859584233E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992160559954294	WITHOUT_CLASSIFICATION	7.839440045705509E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9978753736554871	WITHOUT_CLASSIFICATION	0.0021246263445130085	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999438314529525	WITHOUT_CLASSIFICATION	5.616854704749935E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978374927103	WITHOUT_CLASSIFICATION	2.162507289699021E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988354525891698	WITHOUT_CLASSIFICATION	0.001164547410830169	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999093571743712	WITHOUT_CLASSIFICATION	9.064282562874864E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.998634056588569	WITHOUT_CLASSIFICATION	0.0013659434114310733	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.994774549046164	WITHOUT_CLASSIFICATION	0.005225450953835893	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988354525891698	WITHOUT_CLASSIFICATION	0.001164547410830169	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999792312492315	WITHOUT_CLASSIFICATION	2.076875076849108E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999735329496361	WITHOUT_CLASSIFICATION	2.6467050363982227E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9995932679820372	WITHOUT_CLASSIFICATION	4.0673201796281535E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9996106487000724	WITHOUT_CLASSIFICATION	3.89351299927669E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999962589397514	WITHOUT_CLASSIFICATION	3.741060248511901E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999311414237504	WITHOUT_CLASSIFICATION	6.885857624960233E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997061240402921	WITHOUT_CLASSIFICATION	2.9387595970782333E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999862063837062	WITHOUT_CLASSIFICATION	1.3793616293791757E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999162453057577	WITHOUT_CLASSIFICATION	8.375469424233155E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9995386683815641	WITHOUT_CLASSIFICATION	4.613316184358815E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996465734619953	WITHOUT_CLASSIFICATION	3.5342653800477626E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.99999678037286	WITHOUT_CLASSIFICATION	3.2196271400196925E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9998650632070105	WITHOUT_CLASSIFICATION	1.349367929895383E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9988354525891698	WITHOUT_CLASSIFICATION	0.001164547410830169	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998348364724966	WITHOUT_CLASSIFICATION	1.651635275034862E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9975051952917218	WITHOUT_CLASSIFICATION	0.0024948047082782965	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998722429628718	WITHOUT_CLASSIFICATION	1.2775703712807152E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995830400334048	WITHOUT_CLASSIFICATION	4.1695996659526607E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998782789321023	WITHOUT_CLASSIFICATION	1.2172106789762771E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999795277189444	WITHOUT_CLASSIFICATION	2.0472281055637185E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9986160357006476	WITHOUT_CLASSIFICATION	0.0013839642993525093	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999906151506445	WITHOUT_CLASSIFICATION	9.384849355525177E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996645335476068	WITHOUT_CLASSIFICATION	3.3546645239318056E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999268788027676	WITHOUT_CLASSIFICATION	7.31211972323818E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999835232194439	WITHOUT_CLASSIFICATION	1.647678055608833E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978310988584836	WITHOUT_CLASSIFICATION	0.00216890114151639	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985345026403553	WITHOUT_CLASSIFICATION	0.0014654973596448294	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999273903203941	WITHOUT_CLASSIFICATION	7.260967960578266E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999916439497833	WITHOUT_CLASSIFICATION	8.356050216700853E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980028304598711	WITHOUT_CLASSIFICATION	0.0019971695401287946	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9953367641796358	WITHOUT_CLASSIFICATION	0.004663235820364221	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968637480678395	WITHOUT_CLASSIFICATION	0.003136251932160473	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976749484779699	WITHOUT_CLASSIFICATION	0.0023250515220301256	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999911528000495	WITHOUT_CLASSIFICATION	8.847199950506177E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999811926808776	WITHOUT_CLASSIFICATION	1.880731912245271E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999388755243156	WITHOUT_CLASSIFICATION	6.112447568444781E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999962393294841	WITHOUT_CLASSIFICATION	3.760670515888762E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999858647897255	WITHOUT_CLASSIFICATION	1.4135210274514693E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999992037001333	WITHOUT_CLASSIFICATION	7.962998666529911E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9990966861583968	WITHOUT_CLASSIFICATION	9.033138416032778E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999335358165778	WITHOUT_CLASSIFICATION	6.646418342213648E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997953856609539	WITHOUT_CLASSIFICATION	2.0461433904602158E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9992316884963818	WITHOUT_CLASSIFICATION	7.683115036183255E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998310022059026	WITHOUT_CLASSIFICATION	1.689977940974017E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999357291430286	WITHOUT_CLASSIFICATION	6.427085697130729E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999092135892423	WITHOUT_CLASSIFICATION	9.078641075761178E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999631195212527	WITHOUT_CLASSIFICATION	3.6880478747281564E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9983681348032558	WITHOUT_CLASSIFICATION	0.0016318651967442155	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998041398580377	WITHOUT_CLASSIFICATION	1.958601419623236E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997022958616345	WITHOUT_CLASSIFICATION	2.97704138365527E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999867428213284	WITHOUT_CLASSIFICATION	1.32571786716489E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998466144629722	WITHOUT_CLASSIFICATION	1.5338553702788304E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999383154892153	WITHOUT_CLASSIFICATION	6.168451078473572E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999102958994396	WITHOUT_CLASSIFICATION	8.970410056037617E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997884248499216	WITHOUT_CLASSIFICATION	2.1157515007837627E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998884966631704	WITHOUT_CLASSIFICATION	1.1150333682961378E-4	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996083737941934	WITHOUT_CLASSIFICATION	3.9162620580666686E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998343168285695	WITHOUT_CLASSIFICATION	1.656831714305685E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997884248499216	WITHOUT_CLASSIFICATION	2.1157515007837627E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999736496150458	WITHOUT_CLASSIFICATION	2.6350384954297328E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999661442068922	WITHOUT_CLASSIFICATION	3.3855793107748076E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998204136450652	WITHOUT_CLASSIFICATION	1.7958635493480965E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999469539091194	WITHOUT_CLASSIFICATION	5.304609088053443E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997954525978424	WITHOUT_CLASSIFICATION	2.0454740215747563E-4	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.99987611264111	WITHOUT_CLASSIFICATION	1.2388735888994854E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9997928279806715	WITHOUT_CLASSIFICATION	2.0717201932854475E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999768587237153	WITHOUT_CLASSIFICATION	2.314127628469968E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999768587237153	WITHOUT_CLASSIFICATION	2.314127628469968E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999262854659817	WITHOUT_CLASSIFICATION	7.371453401831575E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999903031205775	WITHOUT_CLASSIFICATION	9.696879422505382E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997889913122964	WITHOUT_CLASSIFICATION	2.110086877036809E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998665585293705	WITHOUT_CLASSIFICATION	1.3344147062963293E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998784466664	WITHOUT_CLASSIFICATION	1.2155333359758963E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9993637658003338	WITHOUT_CLASSIFICATION	6.362341996661874E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999996315369309	WITHOUT_CLASSIFICATION	3.6846306903070184E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999725408920404	WITHOUT_CLASSIFICATION	2.745910795968736E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.99990214402544	WITHOUT_CLASSIFICATION	9.785597456003183E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999624120664458	WITHOUT_CLASSIFICATION	3.758793355419797E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9994855612384782	WITHOUT_CLASSIFICATION	5.144387615218493E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999759571928358	WITHOUT_CLASSIFICATION	2.4042807164111097E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998552029031544	WITHOUT_CLASSIFICATION	1.447970968455623E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8532304371606944	WITHOUT_CLASSIFICATION	0.1467695628393056	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9967211490522127	WITHOUT_CLASSIFICATION	0.003278850947787416	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998981521884581	WITHOUT_CLASSIFICATION	1.0184781154190376E-4	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998715776020736	WITHOUT_CLASSIFICATION	1.284223979263393E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9860851216786661	WITHOUT_CLASSIFICATION	0.01391487832133382	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9992862311216796	WITHOUT_CLASSIFICATION	7.137688783204303E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999077402330036	WITHOUT_CLASSIFICATION	9.225976699639614E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999823908546576	WITHOUT_CLASSIFICATION	1.7609145342429427E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999074665200746	WITHOUT_CLASSIFICATION	9.253347992549075E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9990778478327985	WITHOUT_CLASSIFICATION	9.221521672015656E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999936437425487	WITHOUT_CLASSIFICATION	6.356257451337607E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999320198412062	WITHOUT_CLASSIFICATION	6.79801587937611E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996833162037472	WITHOUT_CLASSIFICATION	3.1668379625282084E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9958503319647132	WITHOUT_CLASSIFICATION	0.004149668035286856	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9993151759598624	WITHOUT_CLASSIFICATION	6.848240401375417E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.99562210799804	WITHOUT_CLASSIFICATION	0.004377892001960031	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9991735645048674	WITHOUT_CLASSIFICATION	8.2643549513269E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999142542306992	WITHOUT_CLASSIFICATION	8.574576930078747E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9990653657072126	WITHOUT_CLASSIFICATION	9.346342927872781E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997402176871818	WITHOUT_CLASSIFICATION	2.5978231281814174E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9997953282239788	WITHOUT_CLASSIFICATION	2.0467177602135633E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998125685282819	WITHOUT_CLASSIFICATION	1.874314717181521E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.99967637359381	WITHOUT_CLASSIFICATION	3.236264061900848E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999129184340515	WITHOUT_CLASSIFICATION	8.708156594858261E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9947600949633656	WITHOUT_CLASSIFICATION	0.005239905036634439	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999179217026136	WITHOUT_CLASSIFICATION	8.20782973863035E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9995901467425989	WITHOUT_CLASSIFICATION	4.0985325740106596E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997534470966227	WITHOUT_CLASSIFICATION	2.465529033773501E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9991411267018907	WITHOUT_CLASSIFICATION	8.588732981092998E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9991411267018907	WITHOUT_CLASSIFICATION	8.588732981092998E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999481430316967	WITHOUT_CLASSIFICATION	5.1856968303353826E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999968078622357	WITHOUT_CLASSIFICATION	3.1921377642081656E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999368710897135	WITHOUT_CLASSIFICATION	6.312891028646815E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999985845867262	WITHOUT_CLASSIFICATION	1.4154132737726705E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999757775604035	WITHOUT_CLASSIFICATION	2.4222439596613678E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999216893010469	WITHOUT_CLASSIFICATION	7.831069895310954E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9992449943788839	WITHOUT_CLASSIFICATION	7.550056211159828E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9980941843417651	WITHOUT_CLASSIFICATION	0.0019058156582348975	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998554159743945	WITHOUT_CLASSIFICATION	1.445840256055266E-4	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996581337766267	WITHOUT_CLASSIFICATION	3.4186622337323616E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994746524771744	WITHOUT_CLASSIFICATION	5.253475228256397E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999706502193019	WITHOUT_CLASSIFICATION	2.934978069809804E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9991254683680584	WITHOUT_CLASSIFICATION	8.745316319415467E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995490481175096	WITHOUT_CLASSIFICATION	4.509518824904238E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9987567794232312	WITHOUT_CLASSIFICATION	0.0012432205767687536	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9982300887028627	WITHOUT_CLASSIFICATION	0.0017699112971373018	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9995406709701696	WITHOUT_CLASSIFICATION	4.593290298303467E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9994323577297629	WITHOUT_CLASSIFICATION	5.676422702369751E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9995758462261513	WITHOUT_CLASSIFICATION	4.241537738488077E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999946884455463	WITHOUT_CLASSIFICATION	5.311554453681727E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9994323577297629	WITHOUT_CLASSIFICATION	5.676422702369751E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999747458525486	WITHOUT_CLASSIFICATION	2.5254147451361514E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999935169998505	WITHOUT_CLASSIFICATION	6.483000149493134E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999420171137734	WITHOUT_CLASSIFICATION	5.798288622659821E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995729838246866	WITHOUT_CLASSIFICATION	4.270161753134281E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9989543171384997	WITHOUT_CLASSIFICATION	0.0010456828615002646	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999929972909933	WITHOUT_CLASSIFICATION	7.0027090067016005E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998810695809124	WITHOUT_CLASSIFICATION	1.189304190876951E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999233244013456	WITHOUT_CLASSIFICATION	7.66755986544048E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998413451823209	WITHOUT_CLASSIFICATION	1.58654817679186E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999948024533211	WITHOUT_CLASSIFICATION	5.197546678821887E-6	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9997779211453959	WITHOUT_CLASSIFICATION	2.2207885460409112E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9975598876721827	WITHOUT_CLASSIFICATION	0.0024401123278172876	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998821853470388	WITHOUT_CLASSIFICATION	1.1781465296129766E-4	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9949176039409241	WITHOUT_CLASSIFICATION	0.0050823960590758825	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.99874338199786	WITHOUT_CLASSIFICATION	0.0012566180021401304	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9932344812299029	WITHOUT_CLASSIFICATION	0.00676551877009715	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999222201565067	WITHOUT_CLASSIFICATION	7.777984349331556E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9937368039131304	WITHOUT_CLASSIFICATION	0.0062631960868695805	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9996035890384265	WITHOUT_CLASSIFICATION	3.9641096157339766E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999478797135338	WITHOUT_CLASSIFICATION	5.212028646615254E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999665034282984	WITHOUT_CLASSIFICATION	3.349657170161093E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.993422149233327	WITHOUT_CLASSIFICATION	0.006577850766673129	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9011511502603504	WITHOUT_CLASSIFICATION	0.09884884973964962	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9996724302101923	WITHOUT_CLASSIFICATION	3.275697898076927E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9977424979944083	WITHOUT_CLASSIFICATION	0.002257502005591754	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9909533983064222	WITHOUT_CLASSIFICATION	0.009046601693577856	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997041297453678	WITHOUT_CLASSIFICATION	2.9587025463216886E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9983681348032558	WITHOUT_CLASSIFICATION	0.0016318651967442155	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9981915270670924	WITHOUT_CLASSIFICATION	0.0018084729329076637	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999958959181149	WITHOUT_CLASSIFICATION	4.1040818851617186E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.8876416785119012	WITHOUT_CLASSIFICATION	0.11235832148809875	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.999848815177743	WITHOUT_CLASSIFICATION	1.5118482225697955E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999945392727729	WITHOUT_CLASSIFICATION	5.460727227107821E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9975335931359383	WITHOUT_CLASSIFICATION	0.0024664068640617752	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9892832739864489	WITHOUT_CLASSIFICATION	0.010716726013551205	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999394458340979	WITHOUT_CLASSIFICATION	6.0554165902074735E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999330670012644	WITHOUT_CLASSIFICATION	6.693299873563855E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999335165201835	WITHOUT_CLASSIFICATION	6.648347981651953E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999193259942655	WITHOUT_CLASSIFICATION	8.067400573448496E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999885250321342	WITHOUT_CLASSIFICATION	1.1474967865794383E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9988276238768218	WITHOUT_CLASSIFICATION	0.0011723761231781883	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9979460098090854	WITHOUT_CLASSIFICATION	0.0020539901909146646	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9997042691066946	WITHOUT_CLASSIFICATION	2.9573089330538714E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9995567756277538	WITHOUT_CLASSIFICATION	4.4322437224621593E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999506535131062	WITHOUT_CLASSIFICATION	4.934648689387028E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997411210680747	WITHOUT_CLASSIFICATION	2.588789319253302E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999953891568539	WITHOUT_CLASSIFICATION	4.610843146099705E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9997448251480621	WITHOUT_CLASSIFICATION	2.551748519378693E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997559382144647	WITHOUT_CLASSIFICATION	2.4406178553531288E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995810115409292	WITHOUT_CLASSIFICATION	4.189884590708217E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999930375059861	WITHOUT_CLASSIFICATION	6.962494013900191E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995094568431354	WITHOUT_CLASSIFICATION	4.905431568646014E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.999235642986433	WITHOUT_CLASSIFICATION	7.643570135670031E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9994908234045896	WITHOUT_CLASSIFICATION	5.091765954102926E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999838933562288	WITHOUT_CLASSIFICATION	1.6106643771178453E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9989762319201174	WITHOUT_CLASSIFICATION	0.0010237680798825342	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9864840032676324	WITHOUT_CLASSIFICATION	0.01351599673236748	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998059426309258	WITHOUT_CLASSIFICATION	1.9405736907412773E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992116659206228	WITHOUT_CLASSIFICATION	7.88334079377223E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998707358532473	WITHOUT_CLASSIFICATION	1.292641467526272E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999962152494034	WITHOUT_CLASSIFICATION	3.784750596625622E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99990600552322	WITHOUT_CLASSIFICATION	9.399447677995735E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999863410146234	WITHOUT_CLASSIFICATION	1.3658985376555862E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9909966331044077	WITHOUT_CLASSIFICATION	0.009003366895592332	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9995093833619345	WITHOUT_CLASSIFICATION	4.906166380653792E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998172880375561	WITHOUT_CLASSIFICATION	1.8271196244387612E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9995093833619345	WITHOUT_CLASSIFICATION	4.906166380653792E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999867909616946	WITHOUT_CLASSIFICATION	1.3209038305404916E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999820313785984	WITHOUT_CLASSIFICATION	1.7968621401493173E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9998979237508604	WITHOUT_CLASSIFICATION	1.0207624913951726E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999995408575862	WITHOUT_CLASSIFICATION	4.591424138009362E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999970415826158	WITHOUT_CLASSIFICATION	2.9584173842033562E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999831573432834	WITHOUT_CLASSIFICATION	1.684265671664117E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998891024298947	WITHOUT_CLASSIFICATION	1.1089757010530074E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999932885094842	WITHOUT_CLASSIFICATION	6.711490515789338E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998828846388956	WITHOUT_CLASSIFICATION	1.1711536110442112E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.97583668551753	WITHOUT_CLASSIFICATION	0.02416331448247002	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9989050752447537	WITHOUT_CLASSIFICATION	0.0010949247552463387	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.99601303903923	WITHOUT_CLASSIFICATION	0.003986960960770044	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996891276902163	WITHOUT_CLASSIFICATION	3.1087230978358996E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999986910635175	WITHOUT_CLASSIFICATION	1.3089364824947914E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.5887528076066302	IMPLEMENTATION	0.4112471923933699	WITHOUT_CLASSIFICATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.998599135351692	WITHOUT_CLASSIFICATION	0.0014008646483080727	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999009180555675	WITHOUT_CLASSIFICATION	9.908194443253132E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999009180555675	WITHOUT_CLASSIFICATION	9.908194443253132E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996581337766267	WITHOUT_CLASSIFICATION	3.4186622337323616E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9996190745151037	WITHOUT_CLASSIFICATION	3.809254848963035E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999997564881926	WITHOUT_CLASSIFICATION	2.4351180740274548E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999762241818388	WITHOUT_CLASSIFICATION	2.377581816120607E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999868628001207	WITHOUT_CLASSIFICATION	1.3137199879317597E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999987084841241	WITHOUT_CLASSIFICATION	1.2915158758871841E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9975011892816287	WITHOUT_CLASSIFICATION	0.002498810718371313	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999638823589562	WITHOUT_CLASSIFICATION	3.6117641043903784E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9997874676270699	WITHOUT_CLASSIFICATION	2.125323729299966E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999638268459408	WITHOUT_CLASSIFICATION	3.617315405918902E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999984173655752	WITHOUT_CLASSIFICATION	1.5826344248649863E-6	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999413477536733	WITHOUT_CLASSIFICATION	5.865224632672586E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998389243011839	WITHOUT_CLASSIFICATION	1.6107569881605233E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999921903188491	WITHOUT_CLASSIFICATION	7.809681150939532E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9991689152072586	WITHOUT_CLASSIFICATION	8.310847927414181E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9991033559636353	WITHOUT_CLASSIFICATION	8.966440363647349E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999933690062937	WITHOUT_CLASSIFICATION	6.630993706373836E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9972326435821259	WITHOUT_CLASSIFICATION	0.002767356417874021	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9983595544730494	WITHOUT_CLASSIFICATION	0.0016404455269506083	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999761667775332	WITHOUT_CLASSIFICATION	2.3833222466865947E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999808997360604	WITHOUT_CLASSIFICATION	1.9100263939620397E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9992304881752184	WITHOUT_CLASSIFICATION	7.695118247814498E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.998907585971876	WITHOUT_CLASSIFICATION	0.0010924140281239508	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999706435049087	WITHOUT_CLASSIFICATION	2.9356495091306277E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9998258042718212	WITHOUT_CLASSIFICATION	1.7419572817876865E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999975090051832	WITHOUT_CLASSIFICATION	2.4909948168584656E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997956581385214	WITHOUT_CLASSIFICATION	2.0434186147865566E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993728166749161	WITHOUT_CLASSIFICATION	6.271833250840581E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9977923035587978	WITHOUT_CLASSIFICATION	0.002207696441202211	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999832276827514	WITHOUT_CLASSIFICATION	1.6772317248673798E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997957606734154	WITHOUT_CLASSIFICATION	2.0423932658451659E-4	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999751269631341	WITHOUT_CLASSIFICATION	2.487303686592125E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9991371586870721	WITHOUT_CLASSIFICATION	8.628413129279004E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9894926512981161	WITHOUT_CLASSIFICATION	0.01050734870188374	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9990269194834569	WITHOUT_CLASSIFICATION	9.730805165432182E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999783716882068	WITHOUT_CLASSIFICATION	2.1628311793155947E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999268477333312	WITHOUT_CLASSIFICATION	7.315226666880334E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999916927971355	WITHOUT_CLASSIFICATION	8.30720286444719E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999983391311538	WITHOUT_CLASSIFICATION	1.6608688462650249E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.998892487160123	WITHOUT_CLASSIFICATION	0.0011075128398769926	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999948040174871	WITHOUT_CLASSIFICATION	5.195982512894078E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999845967365587	WITHOUT_CLASSIFICATION	1.5403263441301633E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9977772845179699	WITHOUT_CLASSIFICATION	0.0022227154820301316	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6960676433140666	WITHOUT_CLASSIFICATION	0.3039323566859334	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9935634563123484	WITHOUT_CLASSIFICATION	0.006436543687651544	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998048361944144	WITHOUT_CLASSIFICATION	1.9516380558567539E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999373571743786	WITHOUT_CLASSIFICATION	6.264282562135878E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997788878517	WITHOUT_CLASSIFICATION	2.211121481507243E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998151966401012	WITHOUT_CLASSIFICATION	1.8480335989886406E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999414662971793	WITHOUT_CLASSIFICATION	5.85337028207157E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999845967365587	WITHOUT_CLASSIFICATION	1.5403263441301633E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999614633567385	WITHOUT_CLASSIFICATION	3.853664326146344E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9995914951042558	WITHOUT_CLASSIFICATION	4.0850489574424545E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9978914795088258	WITHOUT_CLASSIFICATION	0.0021085204911741734	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9988216154330214	WITHOUT_CLASSIFICATION	0.0011783845669785633	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999792312492315	WITHOUT_CLASSIFICATION	2.076875076849108E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999792312492315	WITHOUT_CLASSIFICATION	2.076875076849108E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999975345769295	WITHOUT_CLASSIFICATION	2.4654230704523734E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.99998713628423	WITHOUT_CLASSIFICATION	1.2863715769932064E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999980142951354	WITHOUT_CLASSIFICATION	1.9857048646921354E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9996899292567608	WITHOUT_CLASSIFICATION	3.100707432392481E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989630361291427	WITHOUT_CLASSIFICATION	0.0010369638708572092	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999318476191391	WITHOUT_CLASSIFICATION	6.815238086091259E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999267017707544	WITHOUT_CLASSIFICATION	7.329822924563898E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997091128985943	WITHOUT_CLASSIFICATION	2.908871014057456E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996211712296423	WITHOUT_CLASSIFICATION	3.788287703577181E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9994174745798634	WITHOUT_CLASSIFICATION	5.825254201365837E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999692898923285	WITHOUT_CLASSIFICATION	3.071010767158323E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9993744248001852	WITHOUT_CLASSIFICATION	6.255751998147656E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999221716253441	WITHOUT_CLASSIFICATION	7.782837465586367E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999571291981778	WITHOUT_CLASSIFICATION	4.287080182216368E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999511304948364	WITHOUT_CLASSIFICATION	4.886950516360491E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946751555055268	WITHOUT_CLASSIFICATION	0.005324844494473246	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999497615959729	WITHOUT_CLASSIFICATION	5.023840402703061E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9994206531053021	WITHOUT_CLASSIFICATION	5.793468946978359E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999499242009788	WITHOUT_CLASSIFICATION	5.00757990211957E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9992841776656626	WITHOUT_CLASSIFICATION	7.158223343374839E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997970130839822	WITHOUT_CLASSIFICATION	2.0298691601786299E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999722809881696	WITHOUT_CLASSIFICATION	2.7719011830481595E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9924395460853955	WITHOUT_CLASSIFICATION	0.007560453914604384	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9948264489664392	WITHOUT_CLASSIFICATION	0.005173551033560826	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9984559402452898	WITHOUT_CLASSIFICATION	0.0015440597547102038	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999924515566037	WITHOUT_CLASSIFICATION	7.548443396294046E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999996574148481	WITHOUT_CLASSIFICATION	3.4258515191144693E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999874120934282	WITHOUT_CLASSIFICATION	1.2587906571750577E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999391424634902	WITHOUT_CLASSIFICATION	6.085753650974217E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993117909396038	WITHOUT_CLASSIFICATION	6.882090603963176E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999874120934282	WITHOUT_CLASSIFICATION	1.2587906571750577E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9979293073304399	WITHOUT_CLASSIFICATION	0.00207069266955999	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999906566193467	WITHOUT_CLASSIFICATION	9.343380653169026E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999909225353584	WITHOUT_CLASSIFICATION	9.077464641624727E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999876538021961	WITHOUT_CLASSIFICATION	1.2346197803894972E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9794068324138447	WITHOUT_CLASSIFICATION	0.020593167586155287	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999984173655752	WITHOUT_CLASSIFICATION	1.5826344248649863E-6	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9997830066955519	WITHOUT_CLASSIFICATION	2.1699330444809593E-4	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9990966861583968	WITHOUT_CLASSIFICATION	9.033138416032778E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999558570229949	WITHOUT_CLASSIFICATION	4.4142977005122474E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999605411666054	WITHOUT_CLASSIFICATION	3.945883339467181E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999941048652259	WITHOUT_CLASSIFICATION	5.8951347740748335E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999848324545324	WITHOUT_CLASSIFICATION	1.5167545467656092E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9994684559451653	WITHOUT_CLASSIFICATION	5.315440548347682E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999869113714694	WITHOUT_CLASSIFICATION	1.3088628530646538E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999757059153397	WITHOUT_CLASSIFICATION	2.4294084660294845E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999743241103732	WITHOUT_CLASSIFICATION	2.5675889626683373E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9996953665193078	WITHOUT_CLASSIFICATION	3.046334806921776E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9994643978699924	WITHOUT_CLASSIFICATION	5.356021300076196E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997564730265607	WITHOUT_CLASSIFICATION	2.435269734393449E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999134251797992	WITHOUT_CLASSIFICATION	8.657482020074065E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998110571274372	WITHOUT_CLASSIFICATION	1.8894287256276374E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999901788608026	WITHOUT_CLASSIFICATION	9.82113919739362E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999222189349158	WITHOUT_CLASSIFICATION	7.778106508422003E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999277531338974	WITHOUT_CLASSIFICATION	7.224686610266623E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9994849756266978	WITHOUT_CLASSIFICATION	5.150243733022247E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999864478666735	WITHOUT_CLASSIFICATION	1.3552133326558112E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9982695644723043	WITHOUT_CLASSIFICATION	0.0017304355276956775	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9995094089710068	WITHOUT_CLASSIFICATION	4.90591028993086E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999663033893172	WITHOUT_CLASSIFICATION	3.3696610682858046E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974724743417385	WITHOUT_CLASSIFICATION	0.0025275256582614892	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982481894554606	WITHOUT_CLASSIFICATION	0.0017518105445394434	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9995620523309947	WITHOUT_CLASSIFICATION	4.379476690051686E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999534065335549	WITHOUT_CLASSIFICATION	4.659346644510412E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999563896071116	WITHOUT_CLASSIFICATION	4.361039288845137E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9997594668502897	WITHOUT_CLASSIFICATION	2.405331497101793E-4	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999385094362082	WITHOUT_CLASSIFICATION	6.149056379182144E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999687527335186	WITHOUT_CLASSIFICATION	3.124726648152305E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998385254257861	WITHOUT_CLASSIFICATION	1.6147457421388292E-4	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9995531240184021	WITHOUT_CLASSIFICATION	4.4687598159792545E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998964107737331	WITHOUT_CLASSIFICATION	1.035892262668483E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999930401579369	WITHOUT_CLASSIFICATION	6.959842063161805E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999707619249668	WITHOUT_CLASSIFICATION	2.9238075033164073E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998512429165937	WITHOUT_CLASSIFICATION	1.4875708340639053E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999845368931856	WITHOUT_CLASSIFICATION	1.546310681445632E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999655586363206	WITHOUT_CLASSIFICATION	3.444136367932186E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999664148565818	WITHOUT_CLASSIFICATION	3.358514341823566E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999783892564268	WITHOUT_CLASSIFICATION	2.1610743573263764E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9997613675070364	WITHOUT_CLASSIFICATION	2.3863249296353153E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999405470684541	WITHOUT_CLASSIFICATION	5.945293154582862E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999902264770724	WITHOUT_CLASSIFICATION	9.773522927567052E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998755941428907	WITHOUT_CLASSIFICATION	1.2440585710929214E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999788256765008	WITHOUT_CLASSIFICATION	2.117432349920606E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997709243445028	WITHOUT_CLASSIFICATION	2.29075655497186E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997578136647459	WITHOUT_CLASSIFICATION	2.4218633525410893E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999800235996439	WITHOUT_CLASSIFICATION	1.9976400356056E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999838407520416	WITHOUT_CLASSIFICATION	1.615924795831601E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998888931465446	WITHOUT_CLASSIFICATION	1.1110685345543983E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9996395030210621	WITHOUT_CLASSIFICATION	3.604969789379241E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974724743417385	WITHOUT_CLASSIFICATION	0.0025275256582614892	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999637679122768	WITHOUT_CLASSIFICATION	3.6232087723093595E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9991349118541724	WITHOUT_CLASSIFICATION	8.6508814582767E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999894124715683	WITHOUT_CLASSIFICATION	1.058752843169731E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9990362630544706	WITHOUT_CLASSIFICATION	9.637369455293937E-4	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999555500256163	WITHOUT_CLASSIFICATION	4.444997438370726E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998433405291763	WITHOUT_CLASSIFICATION	1.5665947082364016E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995890824376987	WITHOUT_CLASSIFICATION	4.1091756230131305E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999992707235986	WITHOUT_CLASSIFICATION	7.292764013885175E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999964742844863	WITHOUT_CLASSIFICATION	3.5257155135830964E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.99993916925933	WITHOUT_CLASSIFICATION	6.083074067009966E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9996846641875857	WITHOUT_CLASSIFICATION	3.153358124143102E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9991179339447828	WITHOUT_CLASSIFICATION	8.8206605521718E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999837861491117	WITHOUT_CLASSIFICATION	1.6213850888374464E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999179996051955	WITHOUT_CLASSIFICATION	8.200039480446171E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999867909616946	WITHOUT_CLASSIFICATION	1.3209038305404916E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999912848917818	WITHOUT_CLASSIFICATION	8.71510821815211E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999947938435353	WITHOUT_CLASSIFICATION	5.206156464722519E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999874889033196	WITHOUT_CLASSIFICATION	1.2511096680439761E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9998081179142055	WITHOUT_CLASSIFICATION	1.9188208579440933E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999709192009573	WITHOUT_CLASSIFICATION	2.908079904270579E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986309953484456	WITHOUT_CLASSIFICATION	0.001369004651554421	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986309953484456	WITHOUT_CLASSIFICATION	0.001369004651554421	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9995231744439541	WITHOUT_CLASSIFICATION	4.768255560459222E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999889829150361	WITHOUT_CLASSIFICATION	1.1017084963863771E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999936814140466	WITHOUT_CLASSIFICATION	6.318585953406834E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999533324893922	WITHOUT_CLASSIFICATION	4.666751060785145E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999593755049151	WITHOUT_CLASSIFICATION	4.062449508480612E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999936185825882	WITHOUT_CLASSIFICATION	6.381417411761275E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9993953354426437	WITHOUT_CLASSIFICATION	6.046645573563302E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963529606994087	WITHOUT_CLASSIFICATION	0.003647039300591215	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963529606994087	WITHOUT_CLASSIFICATION	0.003647039300591215	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6515318051345699	IMPLEMENTATION	0.34846819486542996	WITHOUT_CLASSIFICATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999246241417558	WITHOUT_CLASSIFICATION	7.537585824423229E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999944753470247	WITHOUT_CLASSIFICATION	5.524652975416901E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998541725616799	WITHOUT_CLASSIFICATION	1.4582743832014676E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998541725616799	WITHOUT_CLASSIFICATION	1.4582743832014676E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998541725616799	WITHOUT_CLASSIFICATION	1.4582743832014676E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998045500299279	WITHOUT_CLASSIFICATION	1.954499700721532E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999862451465961	WITHOUT_CLASSIFICATION	1.3754853403903654E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.8118772204131831	WITHOUT_CLASSIFICATION	0.18812277958681686	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999376696917397	WITHOUT_CLASSIFICATION	6.233030826032237E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999938888955496	WITHOUT_CLASSIFICATION	6.111104450406544E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9987286044643491	WITHOUT_CLASSIFICATION	0.0012713955356509134	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998481012413096	WITHOUT_CLASSIFICATION	1.5189875869036168E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995465064862118	WITHOUT_CLASSIFICATION	4.53493513788203E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999793599283943	WITHOUT_CLASSIFICATION	2.0640071605825665E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999763014434223	WITHOUT_CLASSIFICATION	2.3698556577707502E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999488088466596	WITHOUT_CLASSIFICATION	5.119115334048166E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999904760647184	WITHOUT_CLASSIFICATION	9.523935281619511E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999994408626185	WITHOUT_CLASSIFICATION	5.591373814350505E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999855067299019	WITHOUT_CLASSIFICATION	1.4493270098038113E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998795916240037	WITHOUT_CLASSIFICATION	1.2040837599632934E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9995764900355658	WITHOUT_CLASSIFICATION	4.23509964434095E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986309953484456	WITHOUT_CLASSIFICATION	0.001369004651554421	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999678165441177	WITHOUT_CLASSIFICATION	3.21834558823017E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.8957887707203973	WITHOUT_CLASSIFICATION	0.10421122927960275	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999004697445769	WITHOUT_CLASSIFICATION	9.953025542309244E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999529408018342	WITHOUT_CLASSIFICATION	4.705919816584129E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999723172045827	WITHOUT_CLASSIFICATION	2.7682795417421782E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999903995879	WITHOUT_CLASSIFICATION	9.600412093705733E-8	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998124453708513	WITHOUT_CLASSIFICATION	1.8755462914855206E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999041709616681	WITHOUT_CLASSIFICATION	9.582903833197997E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999956164656969	WITHOUT_CLASSIFICATION	4.383534303137413E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999810198981851	WITHOUT_CLASSIFICATION	1.8980101814962095E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999992276767117	WITHOUT_CLASSIFICATION	7.723232883405714E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999955950447761	WITHOUT_CLASSIFICATION	4.404955223968981E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999929824224062	WITHOUT_CLASSIFICATION	7.017577593835894E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999825178213981	WITHOUT_CLASSIFICATION	1.7482178601897685E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9996244377097258	WITHOUT_CLASSIFICATION	3.7556229027419164E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9889022905076548	WITHOUT_CLASSIFICATION	0.011097709492345122	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999736044868833	WITHOUT_CLASSIFICATION	2.6395513116615373E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999781174985392	WITHOUT_CLASSIFICATION	2.188250146083884E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999762342647045	WITHOUT_CLASSIFICATION	2.3765735295474807E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999762342647045	WITHOUT_CLASSIFICATION	2.3765735295474807E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999003056290792	WITHOUT_CLASSIFICATION	9.969437092094248E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999945929177797	WITHOUT_CLASSIFICATION	5.407082220222634E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998964685123354	WITHOUT_CLASSIFICATION	1.0353148766455889E-4	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998647670061882	WITHOUT_CLASSIFICATION	1.3523299381178742E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998665944857905	WITHOUT_CLASSIFICATION	1.3340551420944774E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9997983228751188	WITHOUT_CLASSIFICATION	2.0167712488112344E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999189399955327	WITHOUT_CLASSIFICATION	8.106000446723038E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.99991549258441	WITHOUT_CLASSIFICATION	8.450741558995039E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999219227949827	WITHOUT_CLASSIFICATION	7.807720501732678E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999951645279793	WITHOUT_CLASSIFICATION	4.835472020619158E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999073117462804	WITHOUT_CLASSIFICATION	9.268825371950903E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994222309806353	WITHOUT_CLASSIFICATION	5.777690193647771E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999838049806383	WITHOUT_CLASSIFICATION	1.6195019361652855E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999927407016407	WITHOUT_CLASSIFICATION	7.259298359284618E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999851461336137	WITHOUT_CLASSIFICATION	1.4853866386224072E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999398061280411	WITHOUT_CLASSIFICATION	6.019387195896244E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993225185118	WITHOUT_CLASSIFICATION	6.774814882387115E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993225185118	WITHOUT_CLASSIFICATION	6.774814882387115E-7	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996480593602634	WITHOUT_CLASSIFICATION	3.5194063973658166E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999204508047	WITHOUT_CLASSIFICATION	7.954919540323918E-8	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999862166824581	WITHOUT_CLASSIFICATION	1.3783317541941868E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999862166824581	WITHOUT_CLASSIFICATION	1.3783317541941868E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999786804401773	WITHOUT_CLASSIFICATION	2.1319559822630944E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999781974818182	WITHOUT_CLASSIFICATION	2.1802518181952854E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.998470042711067	WITHOUT_CLASSIFICATION	0.0015299572889330786	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999279906465313	WITHOUT_CLASSIFICATION	7.200935346876516E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997955497554024	WITHOUT_CLASSIFICATION	2.0445024459758354E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996517849183	WITHOUT_CLASSIFICATION	3.482150816216213E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999714806689938	WITHOUT_CLASSIFICATION	2.851933100628471E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999279906465313	WITHOUT_CLASSIFICATION	7.200935346876516E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999019304072443	WITHOUT_CLASSIFICATION	9.806959275571636E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990134606547203	WITHOUT_CLASSIFICATION	9.865393452797764E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999270200360506	WITHOUT_CLASSIFICATION	7.297996394939896E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998969962250449	WITHOUT_CLASSIFICATION	1.0300377495508048E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999672246562	WITHOUT_CLASSIFICATION	3.277534375717557E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999918424808643	WITHOUT_CLASSIFICATION	8.157519135699097E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9942733586039342	WITHOUT_CLASSIFICATION	0.005726641396065744	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999353225389078	WITHOUT_CLASSIFICATION	6.467746109215822E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.99998405230727	WITHOUT_CLASSIFICATION	1.5947692729936908E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999419618861917	WITHOUT_CLASSIFICATION	5.803811380830908E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996763328781629	WITHOUT_CLASSIFICATION	3.2366712183700097E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999656632699904	WITHOUT_CLASSIFICATION	3.433673000966583E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996900054917949	WITHOUT_CLASSIFICATION	3.099945082052005E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9993851524626562	WITHOUT_CLASSIFICATION	6.148475373437945E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998404976862302	WITHOUT_CLASSIFICATION	1.5950231376977E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999506806886559	WITHOUT_CLASSIFICATION	4.931931134421018E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998662970985409	WITHOUT_CLASSIFICATION	1.3370290145913287E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9938975281229884	WITHOUT_CLASSIFICATION	0.006102471877011612	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9938975281229884	WITHOUT_CLASSIFICATION	0.006102471877011612	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9942733586039342	WITHOUT_CLASSIFICATION	0.005726641396065744	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9234055200584822	WITHOUT_CLASSIFICATION	0.0765944799415178	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999871625572323	WITHOUT_CLASSIFICATION	1.2837442767699698E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999517405940699	WITHOUT_CLASSIFICATION	4.825940593010116E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999868642135288	WITHOUT_CLASSIFICATION	1.3135786471254179E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999893404251702	WITHOUT_CLASSIFICATION	1.0659574829735799E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999882363837524	WITHOUT_CLASSIFICATION	1.1763616247592377E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999672788517643	WITHOUT_CLASSIFICATION	3.272114823569936E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9993206244899491	WITHOUT_CLASSIFICATION	6.793755100508586E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999113840060547	WITHOUT_CLASSIFICATION	8.861599394537408E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999875163439308	WITHOUT_CLASSIFICATION	1.248365606932608E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999484883188187	WITHOUT_CLASSIFICATION	5.1511681181367635E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998082526809218	WITHOUT_CLASSIFICATION	1.9174731907825E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.99945584457731	WITHOUT_CLASSIFICATION	5.441554226899868E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999797220416292	WITHOUT_CLASSIFICATION	2.0277958370836025E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999379896785542	WITHOUT_CLASSIFICATION	6.201032144576546E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999963574354176	WITHOUT_CLASSIFICATION	3.642564582413851E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999298684047	WITHOUT_CLASSIFICATION	7.01315952947589E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999890024201842	WITHOUT_CLASSIFICATION	1.0997579815826126E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998744142799856	WITHOUT_CLASSIFICATION	1.2558572001435662E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998132471625594	WITHOUT_CLASSIFICATION	1.8675283744067802E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9987562702596683	WITHOUT_CLASSIFICATION	0.0012437297403317391	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999937386916254	WITHOUT_CLASSIFICATION	6.261308374573237E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995876142153824	WITHOUT_CLASSIFICATION	4.1238578461759575E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999994029755313	WITHOUT_CLASSIFICATION	5.970244687012054E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999892640364937	WITHOUT_CLASSIFICATION	1.073596350634048E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999405741713056	WITHOUT_CLASSIFICATION	5.9425828694370416E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999892672542895	WITHOUT_CLASSIFICATION	1.0732745710482222E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999057200935926	WITHOUT_CLASSIFICATION	9.427990640748144E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999310347420981	WITHOUT_CLASSIFICATION	6.896525790189656E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998258398817638	WITHOUT_CLASSIFICATION	1.7416011823623154E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999379896785542	WITHOUT_CLASSIFICATION	6.201032144576546E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999888984653087	WITHOUT_CLASSIFICATION	1.1101534691225214E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999988826172425	WITHOUT_CLASSIFICATION	1.1173827576280897E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999716951346526	WITHOUT_CLASSIFICATION	2.830486534745226E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998838141146336	WITHOUT_CLASSIFICATION	1.1618588536652181E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9980306029320047	WITHOUT_CLASSIFICATION	0.0019693970679952482	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999745972311391	WITHOUT_CLASSIFICATION	2.5402768860840786E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999419335952637	WITHOUT_CLASSIFICATION	5.806640473633563E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999435067234995	WITHOUT_CLASSIFICATION	5.64932765005192E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9979445709046824	WITHOUT_CLASSIFICATION	0.0020554290953177	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9946676546168751	WITHOUT_CLASSIFICATION	0.005332345383124829	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999312811298198	WITHOUT_CLASSIFICATION	6.871887018020686E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999992520194527	WITHOUT_CLASSIFICATION	7.479805471782074E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9941722544527242	WITHOUT_CLASSIFICATION	0.00582774554727576	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999843712688382	WITHOUT_CLASSIFICATION	1.5628731161746792E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997868670716153	WITHOUT_CLASSIFICATION	2.1313292838456849E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9946611422444029	WITHOUT_CLASSIFICATION	0.005338857755597116	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994951071265	WITHOUT_CLASSIFICATION	5.048928734080332E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999952916457627	WITHOUT_CLASSIFICATION	4.708354237284145E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9974447122013215	WITHOUT_CLASSIFICATION	0.002555287798678442	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999800424812709	WITHOUT_CLASSIFICATION	1.9957518729081298E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997955497554024	WITHOUT_CLASSIFICATION	2.0445024459758354E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999927018682944	WITHOUT_CLASSIFICATION	7.298131705639251E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999379896785542	WITHOUT_CLASSIFICATION	6.201032144576546E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999356263946558	WITHOUT_CLASSIFICATION	6.437360534416638E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999846421104921	WITHOUT_CLASSIFICATION	1.535788950786795E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999847563137029	WITHOUT_CLASSIFICATION	1.5243686297079958E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999846682837632	WITHOUT_CLASSIFICATION	1.533171623677407E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999377538269657	WITHOUT_CLASSIFICATION	6.224617303436781E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999894799667985	WITHOUT_CLASSIFICATION	1.052003320152888E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999663752583436	WITHOUT_CLASSIFICATION	3.362474165639019E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999822024669759	WITHOUT_CLASSIFICATION	1.7797533024119738E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999223184081316	WITHOUT_CLASSIFICATION	7.768159186833844E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999948442339995	WITHOUT_CLASSIFICATION	5.155766000454958E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9978049487963786	WITHOUT_CLASSIFICATION	0.0021950512036213853	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999334995105075	WITHOUT_CLASSIFICATION	6.65004894924759E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997407972778322	WITHOUT_CLASSIFICATION	2.592027221678827E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997407972778322	WITHOUT_CLASSIFICATION	2.592027221678827E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998072581592	WITHOUT_CLASSIFICATION	1.9274184082519048E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9919588490666381	WITHOUT_CLASSIFICATION	0.008041150933361954	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9994561621880906	WITHOUT_CLASSIFICATION	5.438378119092647E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999988839877453	WITHOUT_CLASSIFICATION	1.1160122546626626E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999985146186875	WITHOUT_CLASSIFICATION	1.4853813125066152E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999860024453628	WITHOUT_CLASSIFICATION	1.3997554637192934E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992589426197	WITHOUT_CLASSIFICATION	7.410573803536352E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999964261260991	WITHOUT_CLASSIFICATION	3.573873900933436E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999793362961598	WITHOUT_CLASSIFICATION	2.0663703840283875E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9996675777804641	WITHOUT_CLASSIFICATION	3.324222195359083E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9994965017099295	WITHOUT_CLASSIFICATION	5.034982900705348E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9994965017099295	WITHOUT_CLASSIFICATION	5.034982900705348E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999984067878539	WITHOUT_CLASSIFICATION	1.5932121460952038E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997741025778438	WITHOUT_CLASSIFICATION	2.2589742215623968E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999991023425324	WITHOUT_CLASSIFICATION	8.976574675246136E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996586287153151	WITHOUT_CLASSIFICATION	3.4137128468491847E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999988083998159	WITHOUT_CLASSIFICATION	1.191600184074363E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999552657342526	WITHOUT_CLASSIFICATION	4.473426574740014E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.99999761006527	WITHOUT_CLASSIFICATION	2.3899347301198647E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999928402329623	WITHOUT_CLASSIFICATION	7.159767037775699E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999878335648171	WITHOUT_CLASSIFICATION	1.2166435182959965E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999847640070043	WITHOUT_CLASSIFICATION	1.5235992995746103E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998229788401672	WITHOUT_CLASSIFICATION	1.770211598328467E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433870125629	WITHOUT_CLASSIFICATION	1.566129874370467E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999761925278996	WITHOUT_CLASSIFICATION	2.3807472100401846E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999325232743745	WITHOUT_CLASSIFICATION	6.747672562544478E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999356626167598	WITHOUT_CLASSIFICATION	6.433738324020517E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999795577901414	WITHOUT_CLASSIFICATION	2.0442209858628473E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992160559954294	WITHOUT_CLASSIFICATION	7.839440045705509E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9985895372398579	WITHOUT_CLASSIFICATION	0.001410462760142095	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998693067752099	WITHOUT_CLASSIFICATION	1.3069322478998874E-4	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999423760865614	WITHOUT_CLASSIFICATION	5.762391343862505E-5	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9992841776656626	WITHOUT_CLASSIFICATION	7.158223343374839E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999960773735299	WITHOUT_CLASSIFICATION	3.922626470067322E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997405295395588	WITHOUT_CLASSIFICATION	2.594704604411503E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991992645568291	WITHOUT_CLASSIFICATION	8.007354431709806E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998709710561476	WITHOUT_CLASSIFICATION	1.290289438524111E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999618926513186	WITHOUT_CLASSIFICATION	3.810734868140682E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980729273579443	WITHOUT_CLASSIFICATION	0.0019270726420557345	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999697863673694	WITHOUT_CLASSIFICATION	3.0213632630649554E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9992444424639199	WITHOUT_CLASSIFICATION	7.55557536080072E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980028304598711	WITHOUT_CLASSIFICATION	0.0019971695401287946	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9974237509737752	WITHOUT_CLASSIFICATION	0.0025762490262248167	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999983112286926	WITHOUT_CLASSIFICATION	1.6887713074053648E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999988902042253	WITHOUT_CLASSIFICATION	1.1097957748100262E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999200859700474	WITHOUT_CLASSIFICATION	7.99140299525183E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982439537724337	WITHOUT_CLASSIFICATION	0.0017560462275663282	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998395538492277	WITHOUT_CLASSIFICATION	1.6044615077223605E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999697161953435	WITHOUT_CLASSIFICATION	3.0283804656481655E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999449252458931	WITHOUT_CLASSIFICATION	5.5074754106999917E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998793856049515	WITHOUT_CLASSIFICATION	1.2061439504853273E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999888086138361	WITHOUT_CLASSIFICATION	1.1191386163989356E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999413337136867	WITHOUT_CLASSIFICATION	5.866628631333904E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.998310026632337	WITHOUT_CLASSIFICATION	0.0016899733676630708	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9996612823996845	WITHOUT_CLASSIFICATION	3.3871760031539835E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998403060770724	WITHOUT_CLASSIFICATION	1.5969392292747596E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996332966912465	WITHOUT_CLASSIFICATION	3.6670330875352813E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999993258468762	WITHOUT_CLASSIFICATION	6.74153123674195E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999620898793227	WITHOUT_CLASSIFICATION	3.791012067728252E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998274125467372	WITHOUT_CLASSIFICATION	1.7258745326278053E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999953081409098	WITHOUT_CLASSIFICATION	4.691859090339096E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9996744411279899	WITHOUT_CLASSIFICATION	3.255588720101874E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999434436415228	WITHOUT_CLASSIFICATION	5.6556358477186444E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999911211498409	WITHOUT_CLASSIFICATION	8.878850159028727E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9995487810002286	WITHOUT_CLASSIFICATION	4.512189997714193E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9995671069198228	WITHOUT_CLASSIFICATION	4.3289308017721166E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9995487810002286	WITHOUT_CLASSIFICATION	4.512189997714193E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999947680317155	WITHOUT_CLASSIFICATION	5.23196828444758E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998874159925354	WITHOUT_CLASSIFICATION	1.12584007464616E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9982176951376964	WITHOUT_CLASSIFICATION	0.0017823048623035046	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999958920906564	WITHOUT_CLASSIFICATION	4.107909343597975E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998980329824643	WITHOUT_CLASSIFICATION	1.0196701753582655E-4	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9982176951376964	WITHOUT_CLASSIFICATION	0.0017823048623035046	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999945938477737	WITHOUT_CLASSIFICATION	5.406152226244247E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998938787328996	WITHOUT_CLASSIFICATION	1.0612126710042062E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999457126566903	WITHOUT_CLASSIFICATION	5.4287343309824556E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997431564095675	WITHOUT_CLASSIFICATION	2.5684359043252804E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999298972893998	WITHOUT_CLASSIFICATION	7.010271060006425E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999986716468088	WITHOUT_CLASSIFICATION	1.3283531911951327E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999972828907366	WITHOUT_CLASSIFICATION	2.7171092633941057E-5	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7959596881456387	WITHOUT_CLASSIFICATION	0.20404031185436125	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9995717889745434	WITHOUT_CLASSIFICATION	4.2821102545658265E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999740883976177	WITHOUT_CLASSIFICATION	2.5911602382297228E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999953389235199	WITHOUT_CLASSIFICATION	4.661076480105829E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999648781596889	WITHOUT_CLASSIFICATION	3.5121840311058995E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997348069808	WITHOUT_CLASSIFICATION	2.651930191545018E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999322256206483	WITHOUT_CLASSIFICATION	6.77743793516494E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999722885041	WITHOUT_CLASSIFICATION	2.771149589700425E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9991296769036069	WITHOUT_CLASSIFICATION	8.703230963931947E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999678915353984	WITHOUT_CLASSIFICATION	3.2108464601546307E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997472948089854	WITHOUT_CLASSIFICATION	2.5270519101465845E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997330042904606	WITHOUT_CLASSIFICATION	2.669957095394172E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992031173447	WITHOUT_CLASSIFICATION	7.968826552990868E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9995557051917416	WITHOUT_CLASSIFICATION	4.4429480825844517E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9939532348755159	WITHOUT_CLASSIFICATION	0.0060467651244841825	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9990239548561389	WITHOUT_CLASSIFICATION	9.76045143861051E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9910984523884125	WITHOUT_CLASSIFICATION	0.008901547611587422	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997423286290212	WITHOUT_CLASSIFICATION	2.576713709787739E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999981566442	WITHOUT_CLASSIFICATION	1.8433557408159251E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9993435078761863	WITHOUT_CLASSIFICATION	6.564921238137503E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.998399029867512	WITHOUT_CLASSIFICATION	0.0016009701324881315	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9996668615831089	WITHOUT_CLASSIFICATION	3.3313841689115687E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999069042592751	WITHOUT_CLASSIFICATION	9.309574072489451E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9994167797119141	WITHOUT_CLASSIFICATION	5.83220288085872E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.994774549046164	WITHOUT_CLASSIFICATION	0.005225450953835893	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992031173447	WITHOUT_CLASSIFICATION	7.968826552990868E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999980007032261	WITHOUT_CLASSIFICATION	1.99929677397036E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998317603432588	WITHOUT_CLASSIFICATION	1.6823965674106882E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9988861229555576	WITHOUT_CLASSIFICATION	0.0011138770444424312	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9973340394301277	WITHOUT_CLASSIFICATION	0.002665960569872275	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999919115864682	WITHOUT_CLASSIFICATION	8.088413531899739E-6	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999970974000556	WITHOUT_CLASSIFICATION	2.9025999443979003E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999674956193632	WITHOUT_CLASSIFICATION	3.2504380636835486E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997329870654985	WITHOUT_CLASSIFICATION	2.670129345014808E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999344971070334	WITHOUT_CLASSIFICATION	6.55028929665552E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9980780370234363	WITHOUT_CLASSIFICATION	0.0019219629765636849	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999995729879763	WITHOUT_CLASSIFICATION	4.270120237026362E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999505672298845	WITHOUT_CLASSIFICATION	4.943277011542067E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999727874716512	WITHOUT_CLASSIFICATION	2.7212528348885004E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996513499551442	WITHOUT_CLASSIFICATION	3.4865004485580515E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996947319790501	WITHOUT_CLASSIFICATION	3.0526802094987224E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999898791608958	WITHOUT_CLASSIFICATION	1.0120839104237077E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9782436424839441	WITHOUT_CLASSIFICATION	0.021756357516055813	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996619100493768	WITHOUT_CLASSIFICATION	3.380899506232845E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996644930266526	WITHOUT_CLASSIFICATION	3.3550697334738637E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999766661486029	WITHOUT_CLASSIFICATION	2.3333851397096787E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9914834626837089	WITHOUT_CLASSIFICATION	0.008516537316291112	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9914834626837089	WITHOUT_CLASSIFICATION	0.008516537316291112	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999692476832072	WITHOUT_CLASSIFICATION	3.07523167927623E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9914834626837089	WITHOUT_CLASSIFICATION	0.008516537316291112	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9914834626837089	WITHOUT_CLASSIFICATION	0.008516537316291112	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9984425626750415	WITHOUT_CLASSIFICATION	0.001557437324958468	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9988008655923202	WITHOUT_CLASSIFICATION	0.0011991344076797501	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998415601782857	WITHOUT_CLASSIFICATION	1.5843982171430382E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998415601782857	WITHOUT_CLASSIFICATION	1.5843982171430382E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998910530268318	WITHOUT_CLASSIFICATION	1.0894697316822341E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998491919379033	WITHOUT_CLASSIFICATION	1.5080806209662997E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9987219756683463	WITHOUT_CLASSIFICATION	0.0012780243316536394	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999964039399349	WITHOUT_CLASSIFICATION	3.596060065036429E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.99866701998259	WITHOUT_CLASSIFICATION	0.0013329800174100626	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9953214751532332	WITHOUT_CLASSIFICATION	0.004678524846766782	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9984332219373118	WITHOUT_CLASSIFICATION	0.0015667780626881257	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9983051415953929	WITHOUT_CLASSIFICATION	0.0016948584046070968	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9992952303435233	WITHOUT_CLASSIFICATION	7.047696564766553E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997730733110504	WITHOUT_CLASSIFICATION	2.2692668894958354E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9989871309500916	WITHOUT_CLASSIFICATION	0.0010128690499083763	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997515082966285	WITHOUT_CLASSIFICATION	2.4849170337145097E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999863410146234	WITHOUT_CLASSIFICATION	1.3658985376555862E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996274846350922	WITHOUT_CLASSIFICATION	3.725153649077266E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999230708064052	WITHOUT_CLASSIFICATION	7.692919359478431E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9984105847935008	WITHOUT_CLASSIFICATION	0.0015894152064991477	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9987005454794131	WITHOUT_CLASSIFICATION	0.0012994545205868666	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9993915583363363	WITHOUT_CLASSIFICATION	6.084416636636425E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999863410146234	WITHOUT_CLASSIFICATION	1.3658985376555862E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9995557051917416	WITHOUT_CLASSIFICATION	4.4429480825844517E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9961836691945276	WITHOUT_CLASSIFICATION	0.0038163308054724285	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998884966631704	WITHOUT_CLASSIFICATION	1.1150333682961378E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997884248499216	WITHOUT_CLASSIFICATION	2.1157515007837627E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9961528373492268	WITHOUT_CLASSIFICATION	0.003847162650773171	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999472293077948	WITHOUT_CLASSIFICATION	5.277069220521508E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9988885480271464	WITHOUT_CLASSIFICATION	0.0011114519728536222	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999483448398873	WITHOUT_CLASSIFICATION	5.1655160112769525E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999455465789515	WITHOUT_CLASSIFICATION	5.445342104850523E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999513971011995	WITHOUT_CLASSIFICATION	4.860289880042206E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9978227500247595	WITHOUT_CLASSIFICATION	0.0021772499752405012	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999725551041366	WITHOUT_CLASSIFICATION	2.744489586334208E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998237201585211	WITHOUT_CLASSIFICATION	1.762798414789035E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999706842236022	WITHOUT_CLASSIFICATION	2.9315776397796926E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9892184990788254	WITHOUT_CLASSIFICATION	0.010781500921174587	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999985356904717	WITHOUT_CLASSIFICATION	1.4643095282889438E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999778449188842	WITHOUT_CLASSIFICATION	2.2155081115798723E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9994609352119626	WITHOUT_CLASSIFICATION	5.390647880374255E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999665918024373	WITHOUT_CLASSIFICATION	3.34081975627492E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997206941800995	WITHOUT_CLASSIFICATION	2.793058199005417E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999947838667758	WITHOUT_CLASSIFICATION	5.216133224201568E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9989974791077091	WITHOUT_CLASSIFICATION	0.0010025208922908482	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999971648406798	WITHOUT_CLASSIFICATION	2.8351593203049854E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999455465789515	WITHOUT_CLASSIFICATION	5.445342104850523E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9978658185809617	WITHOUT_CLASSIFICATION	0.002134181419038257	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9990778932886627	WITHOUT_CLASSIFICATION	9.22106711337326E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9970859596004835	WITHOUT_CLASSIFICATION	0.0029140403995165784	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999268788027676	WITHOUT_CLASSIFICATION	7.31211972323818E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.997921964271187	WITHOUT_CLASSIFICATION	0.002078035728813113	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9972848504998983	WITHOUT_CLASSIFICATION	0.0027151495001016728	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9973929557863439	WITHOUT_CLASSIFICATION	0.002607044213656025	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.997277441785016	WITHOUT_CLASSIFICATION	0.0027225582149839975	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9949938134226635	WITHOUT_CLASSIFICATION	0.0050061865773364704	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999879041164834	WITHOUT_CLASSIFICATION	1.2095883516601514E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999347498344099	WITHOUT_CLASSIFICATION	6.525016559015568E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999864538354503	WITHOUT_CLASSIFICATION	1.3546164549626488E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9997990959174105	WITHOUT_CLASSIFICATION	2.0090408258962358E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999613383137039	WITHOUT_CLASSIFICATION	3.8661686296114266E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995123789706283	WITHOUT_CLASSIFICATION	4.8762102937174715E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999879041164834	WITHOUT_CLASSIFICATION	1.2095883516601514E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999886458829758	WITHOUT_CLASSIFICATION	1.1354117024376112E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999900575210591	WITHOUT_CLASSIFICATION	9.942478940867616E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999077402330036	WITHOUT_CLASSIFICATION	9.225976699639614E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999516642740984	WITHOUT_CLASSIFICATION	4.833572590168131E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9996976674353834	WITHOUT_CLASSIFICATION	3.023325646167134E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9977001268819468	WITHOUT_CLASSIFICATION	0.002299873118053255	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998850546998864	WITHOUT_CLASSIFICATION	1.1494530011365245E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998881724453604	WITHOUT_CLASSIFICATION	1.1182755463953013E-4	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998754934475701	WITHOUT_CLASSIFICATION	1.2450655242991632E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988365496709296	WITHOUT_CLASSIFICATION	0.001163450329070347	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988365496709296	WITHOUT_CLASSIFICATION	0.001163450329070347	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988365496709296	WITHOUT_CLASSIFICATION	0.001163450329070347	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999666018039856	WITHOUT_CLASSIFICATION	3.3398196014443535E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999666018039856	WITHOUT_CLASSIFICATION	3.3398196014443535E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999907603277576	WITHOUT_CLASSIFICATION	9.239672242502588E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999912190288662	WITHOUT_CLASSIFICATION	8.780971133722576E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9996410925648784	WITHOUT_CLASSIFICATION	3.5890743512157966E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9995755833159372	WITHOUT_CLASSIFICATION	4.2441668406286684E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9948264023015049	WITHOUT_CLASSIFICATION	0.005173597698495094	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998406689721387	WITHOUT_CLASSIFICATION	1.5933102786131855E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910071227328	WITHOUT_CLASSIFICATION	8.992877267201317E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999906021823282	WITHOUT_CLASSIFICATION	9.397817671856539E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99989508992965	WITHOUT_CLASSIFICATION	1.0491007034996766E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998406689721387	WITHOUT_CLASSIFICATION	1.5933102786131855E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910071227328	WITHOUT_CLASSIFICATION	8.992877267201317E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999961040110176	WITHOUT_CLASSIFICATION	3.895988982418815E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999504512873102	WITHOUT_CLASSIFICATION	4.9548712689736674E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999951143559689	WITHOUT_CLASSIFICATION	4.885644031111537E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999937878840455	WITHOUT_CLASSIFICATION	6.2121159546054925E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995568437654854	WITHOUT_CLASSIFICATION	4.431562345145655E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999109703074359	WITHOUT_CLASSIFICATION	8.902969256409043E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.99988693976529	WITHOUT_CLASSIFICATION	1.130602347100399E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999438656034239	WITHOUT_CLASSIFICATION	5.613439657619875E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9991291545323371	WITHOUT_CLASSIFICATION	8.708454676628284E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999775980814268	WITHOUT_CLASSIFICATION	2.24019185732209E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999431299576684	WITHOUT_CLASSIFICATION	5.6870042331621386E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996648945837315	WITHOUT_CLASSIFICATION	3.351054162684444E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998776006483697	WITHOUT_CLASSIFICATION	1.2239935163014967E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999445533366502	WITHOUT_CLASSIFICATION	5.5446663349695246E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999762084542157	WITHOUT_CLASSIFICATION	2.3791545784315786E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999728288232677	WITHOUT_CLASSIFICATION	2.7171176732369365E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999274237490011	WITHOUT_CLASSIFICATION	7.257625099883405E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9911169424182794	WITHOUT_CLASSIFICATION	0.008883057581720536	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999434742737446	WITHOUT_CLASSIFICATION	5.6525726255257096E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999868450491345	WITHOUT_CLASSIFICATION	1.3154950865523746E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.932676149845162	WITHOUT_CLASSIFICATION	0.06732385015483801	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998455370822467	WITHOUT_CLASSIFICATION	1.5446291775332382E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999983826113416	WITHOUT_CLASSIFICATION	1.6173886584671015E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998512615549691	WITHOUT_CLASSIFICATION	1.4873844503099026E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997638371046069	WITHOUT_CLASSIFICATION	2.3616289539310956E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994746524771744	WITHOUT_CLASSIFICATION	5.253475228256397E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994746524771744	WITHOUT_CLASSIFICATION	5.253475228256397E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999632840403501	WITHOUT_CLASSIFICATION	3.671595964993905E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999352536356452	WITHOUT_CLASSIFICATION	6.474636435482067E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9963502584923791	WITHOUT_CLASSIFICATION	0.003649741507620838	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9991193473665017	WITHOUT_CLASSIFICATION	8.806526334983819E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999910453514819	WITHOUT_CLASSIFICATION	8.954648518208286E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999199877190924	WITHOUT_CLASSIFICATION	8.00122809075567E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9998892786499676	WITHOUT_CLASSIFICATION	1.1072135003241194E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9982300887028627	WITHOUT_CLASSIFICATION	0.0017699112971373018	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.996337830755325	WITHOUT_CLASSIFICATION	0.0036621692446750322	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999510972926863	WITHOUT_CLASSIFICATION	4.890270731380892E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999104764447229	WITHOUT_CLASSIFICATION	8.952355527716662E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999780292409818	WITHOUT_CLASSIFICATION	2.197075901821257E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999992940610775	WITHOUT_CLASSIFICATION	7.059389224173927E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9985957039517773	WITHOUT_CLASSIFICATION	0.0014042960482227452	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9998659582522716	WITHOUT_CLASSIFICATION	1.3404174772842887E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997687151266134	WITHOUT_CLASSIFICATION	2.3128487338648908E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999104764447229	WITHOUT_CLASSIFICATION	8.952355527716662E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999104764447229	WITHOUT_CLASSIFICATION	8.952355527716662E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999843941797442	WITHOUT_CLASSIFICATION	1.560582025579366E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999896242303038	WITHOUT_CLASSIFICATION	1.0375769696213044E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995791417465286	WITHOUT_CLASSIFICATION	4.2085825347135147E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999878301590935	WITHOUT_CLASSIFICATION	1.2169840906491407E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999825178213981	WITHOUT_CLASSIFICATION	1.7482178601897685E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999762084542157	WITHOUT_CLASSIFICATION	2.3791545784315786E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9996310978084577	WITHOUT_CLASSIFICATION	3.6890219154232E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999225209372399	WITHOUT_CLASSIFICATION	7.747906276013393E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999147544148977	WITHOUT_CLASSIFICATION	8.524558510224063E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993639551723447	WITHOUT_CLASSIFICATION	6.360448276553226E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999915578796421	WITHOUT_CLASSIFICATION	8.44212035792229E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737664422035	WITHOUT_CLASSIFICATION	1.2623355779658438E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999341426634465	WITHOUT_CLASSIFICATION	6.585733655348944E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999341426634465	WITHOUT_CLASSIFICATION	6.585733655348944E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999341426634465	WITHOUT_CLASSIFICATION	6.585733655348944E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999341426634465	WITHOUT_CLASSIFICATION	6.585733655348944E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879805227585	WITHOUT_CLASSIFICATION	1.1201947724151811E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9990522162550658	WITHOUT_CLASSIFICATION	9.477837449341403E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437349614543	WITHOUT_CLASSIFICATION	1.5626503854571398E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999146018846048	WITHOUT_CLASSIFICATION	8.539811539525613E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999808141047509	WITHOUT_CLASSIFICATION	1.9185895249022487E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998497335293025	WITHOUT_CLASSIFICATION	1.5026647069745682E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999891472966529	WITHOUT_CLASSIFICATION	1.0852703347088066E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999055712036312	WITHOUT_CLASSIFICATION	9.442879636876088E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999871884272898	WITHOUT_CLASSIFICATION	1.281157271004958E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999990120158707	WITHOUT_CLASSIFICATION	9.879841292889554E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998807378373324	WITHOUT_CLASSIFICATION	1.1926216266759535E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9981880740357406	WITHOUT_CLASSIFICATION	0.0018119259642592849	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999839050617368	WITHOUT_CLASSIFICATION	1.6094938263212097E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9846796357203216	WITHOUT_CLASSIFICATION	0.015320364279678478	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9980510829918323	WITHOUT_CLASSIFICATION	0.001948917008167666	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9980510829918323	WITHOUT_CLASSIFICATION	0.001948917008167666	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999149887562139	WITHOUT_CLASSIFICATION	8.501124378605699E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999892861431415	WITHOUT_CLASSIFICATION	1.071385685838686E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999996991633805	WITHOUT_CLASSIFICATION	3.0083661952380105E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998452896627286	WITHOUT_CLASSIFICATION	1.5471033727144134E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998452896627286	WITHOUT_CLASSIFICATION	1.5471033727144134E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999817977540769	WITHOUT_CLASSIFICATION	1.8202245923145932E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988365496709296	WITHOUT_CLASSIFICATION	0.001163450329070347	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9982070401683552	WITHOUT_CLASSIFICATION	0.0017929598316448075	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999830888400656	WITHOUT_CLASSIFICATION	1.691115993437521E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999400270526846	WITHOUT_CLASSIFICATION	5.997294731536166E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9996660514621893	WITHOUT_CLASSIFICATION	3.339485378107493E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998405084583291	WITHOUT_CLASSIFICATION	1.5949154167087517E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999768214037896	WITHOUT_CLASSIFICATION	2.317859621037108E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999591061247352	WITHOUT_CLASSIFICATION	4.089387526480515E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998033159615896	WITHOUT_CLASSIFICATION	1.9668403841039195E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999368788689272	WITHOUT_CLASSIFICATION	6.312113107275675E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999376044050782	WITHOUT_CLASSIFICATION	6.239559492184722E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999418805148217	WITHOUT_CLASSIFICATION	5.811948517839461E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999578481755245	WITHOUT_CLASSIFICATION	4.21518244754597E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999812167174	WITHOUT_CLASSIFICATION	1.878328257638494E-8	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999998515263398	WITHOUT_CLASSIFICATION	1.4847366019218842E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996872783893	WITHOUT_CLASSIFICATION	3.1272161075886113E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999969154400608	WITHOUT_CLASSIFICATION	3.0845599391813185E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998779475672074	WITHOUT_CLASSIFICATION	1.2205243279258858E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999888177167864	WITHOUT_CLASSIFICATION	1.118228321360109E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999804408514401	WITHOUT_CLASSIFICATION	1.9559148559872307E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9992900556755849	WITHOUT_CLASSIFICATION	7.099443244150725E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999453258158	WITHOUT_CLASSIFICATION	5.467418423509733E-8	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999506535131062	WITHOUT_CLASSIFICATION	4.934648689387028E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999977789624628	WITHOUT_CLASSIFICATION	2.2210375372075045E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9995836730487493	WITHOUT_CLASSIFICATION	4.1632695125063605E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998891880338333	WITHOUT_CLASSIFICATION	1.1081196616669807E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9795925671803986	WITHOUT_CLASSIFICATION	0.02040743281960144	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9960211759739249	WITHOUT_CLASSIFICATION	0.003978824026075035	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946751555055268	WITHOUT_CLASSIFICATION	0.005324844494473246	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9995411877665761	WITHOUT_CLASSIFICATION	4.588122334238751E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999618654087782	WITHOUT_CLASSIFICATION	3.813459122178849E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998877111130428	WITHOUT_CLASSIFICATION	1.1228888695731127E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999971375539705	WITHOUT_CLASSIFICATION	2.86244602953727E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999373641816678	WITHOUT_CLASSIFICATION	6.26358183322067E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9876159426280942	WITHOUT_CLASSIFICATION	0.012384057371905803	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999907870664101	WITHOUT_CLASSIFICATION	9.212933589929474E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999981100917837	WITHOUT_CLASSIFICATION	1.8899082162586388E-6	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9995350479960002	WITHOUT_CLASSIFICATION	4.649520039997688E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999452880420784	WITHOUT_CLASSIFICATION	5.471195792159016E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999009180555675	WITHOUT_CLASSIFICATION	9.908194443253132E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.99990833300711	WITHOUT_CLASSIFICATION	9.166699288999685E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999715488132055	WITHOUT_CLASSIFICATION	2.8451186794471932E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999023523517503	WITHOUT_CLASSIFICATION	9.764764824968613E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.997822465421346	WITHOUT_CLASSIFICATION	0.0021775345786539287	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996720711341553	WITHOUT_CLASSIFICATION	3.2792886584476737E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9984560424095367	WITHOUT_CLASSIFICATION	0.001543957590463224	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9973436960813107	WITHOUT_CLASSIFICATION	0.002656303918689248	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9997541095420126	WITHOUT_CLASSIFICATION	2.458904579872909E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9939484055717246	WITHOUT_CLASSIFICATION	0.0060515944282754286	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9997035244676971	WITHOUT_CLASSIFICATION	2.964755323029133E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999739735796851	WITHOUT_CLASSIFICATION	2.6026420314876722E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9984212156754653	WITHOUT_CLASSIFICATION	0.0015787843245348091	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999549073247604	WITHOUT_CLASSIFICATION	4.5092675239575274E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999966693279559	WITHOUT_CLASSIFICATION	3.330672044104454E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999996699850396	WITHOUT_CLASSIFICATION	3.3001496037119405E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9994126957719051	WITHOUT_CLASSIFICATION	5.87304228094963E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999706868818371	WITHOUT_CLASSIFICATION	2.9313118162870312E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999988237854168	WITHOUT_CLASSIFICATION	1.1762145831587248E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999925353047688	WITHOUT_CLASSIFICATION	7.464695231102845E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999967753408062	WITHOUT_CLASSIFICATION	3.2246591937280946E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.958614034401887	WITHOUT_CLASSIFICATION	0.041385965598113035	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9995289878120193	WITHOUT_CLASSIFICATION	4.710121879807406E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999694975962806	WITHOUT_CLASSIFICATION	3.0502403719307205E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997969004838722	WITHOUT_CLASSIFICATION	2.0309951612776167E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999211065331746	WITHOUT_CLASSIFICATION	7.889346682545132E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998217965721516	WITHOUT_CLASSIFICATION	1.782034278483716E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999978233467851	WITHOUT_CLASSIFICATION	2.1766532149902838E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9989082183919943	WITHOUT_CLASSIFICATION	0.0010917816080056994	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999856567777659	WITHOUT_CLASSIFICATION	1.434322223414389E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9991771204864516	WITHOUT_CLASSIFICATION	8.228795135483832E-4	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999490125609402	WITHOUT_CLASSIFICATION	5.0987439059865753E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9949571913282984	WITHOUT_CLASSIFICATION	0.005042808671701538	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998556655890878	WITHOUT_CLASSIFICATION	1.4433441091213765E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9987734261566191	WITHOUT_CLASSIFICATION	0.001226573843380868	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8007657394213885	IMPLEMENTATION	0.19923426057861143	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9991296769036069	WITHOUT_CLASSIFICATION	8.703230963931947E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9764456398171079	WITHOUT_CLASSIFICATION	0.023554360182892226	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9948156336350678	WITHOUT_CLASSIFICATION	0.005184366364932215	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9996247511694002	WITHOUT_CLASSIFICATION	3.752488305998392E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9996109995342373	WITHOUT_CLASSIFICATION	3.8900046576280264E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999662458362911	WITHOUT_CLASSIFICATION	3.375416370889863E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9982671949350908	WITHOUT_CLASSIFICATION	0.0017328050649092232	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999651998981465	WITHOUT_CLASSIFICATION	3.4800101853510196E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9946187812847994	WITHOUT_CLASSIFICATION	0.005381218715200544	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9994234352666734	WITHOUT_CLASSIFICATION	5.765647333264959E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9990181144630205	WITHOUT_CLASSIFICATION	9.818855369794432E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999638699515389	WITHOUT_CLASSIFICATION	3.613004846110284E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999906809196143	WITHOUT_CLASSIFICATION	9.319080385674019E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9969188849563683	WITHOUT_CLASSIFICATION	0.0030811150436316657	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999806444997785	WITHOUT_CLASSIFICATION	1.9355500221495536E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999001802122865	WITHOUT_CLASSIFICATION	9.981978771349316E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9997396470941848	WITHOUT_CLASSIFICATION	2.603529058151537E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.999540389168292	WITHOUT_CLASSIFICATION	4.596108317080449E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999567129571438	WITHOUT_CLASSIFICATION	4.3287042856146455E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999567129571438	WITHOUT_CLASSIFICATION	4.3287042856146455E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999457003180297	WITHOUT_CLASSIFICATION	5.429968197035882E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9942572304050815	WITHOUT_CLASSIFICATION	0.005742769594918383	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998403128748574	WITHOUT_CLASSIFICATION	1.5968712514257322E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999302659548448	WITHOUT_CLASSIFICATION	6.973404515527261E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999419728929844	WITHOUT_CLASSIFICATION	5.802710701565938E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999196348298345	WITHOUT_CLASSIFICATION	8.03651701654865E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999859821398274	WITHOUT_CLASSIFICATION	1.4017860172621976E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999980335933719	WITHOUT_CLASSIFICATION	1.9664066281206703E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8629637098383123	WITHOUT_CLASSIFICATION	0.13703629016168775	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999935422734725	WITHOUT_CLASSIFICATION	6.45772652755741E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999974918571641	WITHOUT_CLASSIFICATION	2.508142835798182E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9936989848976148	WITHOUT_CLASSIFICATION	0.006301015102385192	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99999752648273	WITHOUT_CLASSIFICATION	2.4735172699352455E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9993659536931484	WITHOUT_CLASSIFICATION	6.340463068516116E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999849257235247	WITHOUT_CLASSIFICATION	1.5074276475402051E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9615183972284199	IMPLEMENTATION	0.03848160277158008	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9615183972284199	IMPLEMENTATION	0.03848160277158008	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999360459011517	WITHOUT_CLASSIFICATION	6.395409884838426E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999936147233371	WITHOUT_CLASSIFICATION	6.385276662892512E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9995079746637265	WITHOUT_CLASSIFICATION	4.920253362734973E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998951533879915	WITHOUT_CLASSIFICATION	1.0484661200846868E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999841819919554	WITHOUT_CLASSIFICATION	1.581800804463813E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997736274510373	WITHOUT_CLASSIFICATION	2.2637254896269683E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997736274510373	WITHOUT_CLASSIFICATION	2.2637254896269683E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999163303302511	WITHOUT_CLASSIFICATION	8.366966974891887E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998275509297908	WITHOUT_CLASSIFICATION	1.7244907020921133E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9988071861810963	WITHOUT_CLASSIFICATION	0.0011928138189036713	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999979835	WITHOUT_CLASSIFICATION	2.016579548837211E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9997353142330991	WITHOUT_CLASSIFICATION	2.6468576690085046E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999658993830657	WITHOUT_CLASSIFICATION	3.410061693431363E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9995764900355658	WITHOUT_CLASSIFICATION	4.23509964434095E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997818331056808	WITHOUT_CLASSIFICATION	2.1816689431934902E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999798212414179	WITHOUT_CLASSIFICATION	2.0178758582074156E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999902264770724	WITHOUT_CLASSIFICATION	9.773522927567052E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9990362630544706	WITHOUT_CLASSIFICATION	9.637369455293937E-4	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998844519766272	WITHOUT_CLASSIFICATION	1.1554802337267863E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999605214420577	WITHOUT_CLASSIFICATION	3.9478557942383115E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999356626167598	WITHOUT_CLASSIFICATION	6.433738324020517E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9972049724837386	WITHOUT_CLASSIFICATION	0.0027950275162613764	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9993528893834667	WITHOUT_CLASSIFICATION	6.47110616533339E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999908929893943	WITHOUT_CLASSIFICATION	9.107010605720328E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9995964373618326	WITHOUT_CLASSIFICATION	4.0356263816740504E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999477209440848	WITHOUT_CLASSIFICATION	5.22790559151237E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999401953798688	WITHOUT_CLASSIFICATION	5.9804620131249213E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.995471246030977	WITHOUT_CLASSIFICATION	0.004528753969022894	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9991847626961413	WITHOUT_CLASSIFICATION	8.15237303858673E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998741185702904	WITHOUT_CLASSIFICATION	1.258814297095581E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999147420726902	WITHOUT_CLASSIFICATION	8.525792730983299E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9818384573845524	WITHOUT_CLASSIFICATION	0.01816154261544756	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999864362113932	WITHOUT_CLASSIFICATION	1.356378860692817E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999572020082141	WITHOUT_CLASSIFICATION	4.2797991785900824E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993225185118	WITHOUT_CLASSIFICATION	6.774814882387115E-7	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9993199158375068	WITHOUT_CLASSIFICATION	6.800841624932053E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999818007297074	WITHOUT_CLASSIFICATION	1.8199270292536206E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9655385277244682	WITHOUT_CLASSIFICATION	0.03446147227553173	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9991096600305825	WITHOUT_CLASSIFICATION	8.903399694173817E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9996890239384677	WITHOUT_CLASSIFICATION	3.109760615323508E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9991991889351421	WITHOUT_CLASSIFICATION	8.00811064857726E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9997070888690978	WITHOUT_CLASSIFICATION	2.929111309021872E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997473900641037	WITHOUT_CLASSIFICATION	2.52609935896298E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993604105042951	WITHOUT_CLASSIFICATION	6.395894957049286E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996802504393297	WITHOUT_CLASSIFICATION	3.1974956067037566E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9995121132826134	WITHOUT_CLASSIFICATION	4.87886717386668E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9987283681784838	WITHOUT_CLASSIFICATION	0.0012716318215161893	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999397277945651	WITHOUT_CLASSIFICATION	6.0272205434987836E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999991351477918	WITHOUT_CLASSIFICATION	8.648522082106995E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9966941250286918	WITHOUT_CLASSIFICATION	0.003305874971308159	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997473900641037	WITHOUT_CLASSIFICATION	2.52609935896298E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993604105042951	WITHOUT_CLASSIFICATION	6.395894957049286E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9996424337203028	WITHOUT_CLASSIFICATION	3.575662796971194E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9992875498020592	WITHOUT_CLASSIFICATION	7.124501979408488E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999927075300119	WITHOUT_CLASSIFICATION	7.292469988067437E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999040157692297	WITHOUT_CLASSIFICATION	9.598423077034663E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999930142239841	WITHOUT_CLASSIFICATION	6.985776015763564E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9905380948258999	WITHOUT_CLASSIFICATION	0.00946190517410005	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996434282175947	WITHOUT_CLASSIFICATION	3.565717824053245E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999859673985324	WITHOUT_CLASSIFICATION	1.4032601467581897E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999896840061003	WITHOUT_CLASSIFICATION	1.031599389957098E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9957987790098335	WITHOUT_CLASSIFICATION	0.004201220990166499	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999885169503515	WITHOUT_CLASSIFICATION	1.1483049648380539E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9957987790098335	WITHOUT_CLASSIFICATION	0.004201220990166499	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999528157183818	WITHOUT_CLASSIFICATION	4.718428161822337E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9992020864501521	WITHOUT_CLASSIFICATION	7.979135498479643E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999528157183818	WITHOUT_CLASSIFICATION	4.718428161822337E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998841342092036	WITHOUT_CLASSIFICATION	1.1586579079630823E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999846847522231	WITHOUT_CLASSIFICATION	1.53152477767916E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999230369218494	WITHOUT_CLASSIFICATION	7.696307815068746E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999230369218494	WITHOUT_CLASSIFICATION	7.696307815068746E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9992449943788839	WITHOUT_CLASSIFICATION	7.550056211159828E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9992537349145377	WITHOUT_CLASSIFICATION	7.462650854623103E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9992449943788839	WITHOUT_CLASSIFICATION	7.550056211159828E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994253191652186	WITHOUT_CLASSIFICATION	5.746808347813939E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9595572219976328	WITHOUT_CLASSIFICATION	0.0404427780023672	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9977993413963616	WITHOUT_CLASSIFICATION	0.0022006586036383887	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995128371169558	WITHOUT_CLASSIFICATION	4.87162883044222E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999860539785087	WITHOUT_CLASSIFICATION	1.394602149123652E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9978106679287435	WITHOUT_CLASSIFICATION	0.0021893320712565055	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999880694496702	WITHOUT_CLASSIFICATION	1.1930550329862703E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.999669146403055	WITHOUT_CLASSIFICATION	3.3085359694489725E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9990433965468487	WITHOUT_CLASSIFICATION	9.566034531512775E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998834032752653	WITHOUT_CLASSIFICATION	1.1659672473472465E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998632866950511	WITHOUT_CLASSIFICATION	1.3671330494882883E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998937454211604	WITHOUT_CLASSIFICATION	1.0625457883969052E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999659548488438	WITHOUT_CLASSIFICATION	3.404515115614453E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999117270084252	WITHOUT_CLASSIFICATION	8.827299157479559E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997773155278025	WITHOUT_CLASSIFICATION	2.2268447219746885E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9990121153594426	WITHOUT_CLASSIFICATION	9.87884640557481E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.998035639388979	WITHOUT_CLASSIFICATION	0.001964360611020986	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9992440042367157	WITHOUT_CLASSIFICATION	7.559957632843145E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9752378068905918	WITHOUT_CLASSIFICATION	0.02476219310940828	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9993412228208521	WITHOUT_CLASSIFICATION	6.587771791479112E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9996534998589757	WITHOUT_CLASSIFICATION	3.465001410243047E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9808035669060208	WITHOUT_CLASSIFICATION	0.019196433093979188	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9996299214820391	WITHOUT_CLASSIFICATION	3.700785179608761E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9977993413963616	WITHOUT_CLASSIFICATION	0.0022006586036383887	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999400857569234	WITHOUT_CLASSIFICATION	5.9914243076712515E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9983295013236159	WITHOUT_CLASSIFICATION	0.0016704986763840656	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9480083630062683	WITHOUT_CLASSIFICATION	0.051991636993731626	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9977261049033666	WITHOUT_CLASSIFICATION	0.0022738950966333864	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.99997348227103	WITHOUT_CLASSIFICATION	2.65177289699971E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9997192419735162	WITHOUT_CLASSIFICATION	2.8075802648378986E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994253191652186	WITHOUT_CLASSIFICATION	5.746808347813939E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994253191652186	WITHOUT_CLASSIFICATION	5.746808347813939E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9976792866850451	WITHOUT_CLASSIFICATION	0.002320713314954833	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9997112387736956	WITHOUT_CLASSIFICATION	2.8876122630438887E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9977681484881946	WITHOUT_CLASSIFICATION	0.002231851511805435	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9984077359102638	WITHOUT_CLASSIFICATION	0.001592264089736166	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9984802558709176	WITHOUT_CLASSIFICATION	0.00151974412908243	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997372600471679	WITHOUT_CLASSIFICATION	2.627399528320465E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998491276434558	WITHOUT_CLASSIFICATION	1.5087235654430659E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999995065043535	WITHOUT_CLASSIFICATION	4.934956464275904E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997405557979938	WITHOUT_CLASSIFICATION	2.5944420200623005E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999773687266208	WITHOUT_CLASSIFICATION	2.2631273379225132E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9990433965468487	WITHOUT_CLASSIFICATION	9.566034531512775E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9986018667509136	WITHOUT_CLASSIFICATION	0.0013981332490864036	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999773687266208	WITHOUT_CLASSIFICATION	2.2631273379225132E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997120123591382	WITHOUT_CLASSIFICATION	2.8798764086181177E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999904645993482	WITHOUT_CLASSIFICATION	9.535400651893726E-6	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999759480796014	WITHOUT_CLASSIFICATION	2.4051920398607008E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9404544764997267	WITHOUT_CLASSIFICATION	0.059545523500273416	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999452269085586	WITHOUT_CLASSIFICATION	5.47730914413962E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999956850823158	WITHOUT_CLASSIFICATION	4.3149176841806105E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999932438704283	WITHOUT_CLASSIFICATION	6.756129571744217E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999988857536	WITHOUT_CLASSIFICATION	1.1142463164600298E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9996491924813815	WITHOUT_CLASSIFICATION	3.508075186184008E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998762665248871	WITHOUT_CLASSIFICATION	1.237334751127955E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998955927265808	WITHOUT_CLASSIFICATION	1.0440727341913979E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9935243410865772	WITHOUT_CLASSIFICATION	0.0064756589134228135	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999773687266208	WITHOUT_CLASSIFICATION	2.2631273379225132E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999452269085586	WITHOUT_CLASSIFICATION	5.47730914413962E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999932438704283	WITHOUT_CLASSIFICATION	6.756129571744217E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9992544677515112	WITHOUT_CLASSIFICATION	7.455322484888233E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9990990870994415	WITHOUT_CLASSIFICATION	9.009129005585053E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999049106787314	WITHOUT_CLASSIFICATION	9.508932126856145E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9991915565169607	WITHOUT_CLASSIFICATION	8.084434830394122E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997332287405455	WITHOUT_CLASSIFICATION	2.6677125945454515E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997120123591382	WITHOUT_CLASSIFICATION	2.8798764086181177E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9993399478303822	WITHOUT_CLASSIFICATION	6.600521696177116E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9980325094245379	WITHOUT_CLASSIFICATION	0.001967490575462105	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990336584487153	WITHOUT_CLASSIFICATION	9.66341551284772E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.6659796781140812	WITHOUT_CLASSIFICATION	0.3340203218859188	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6093284173568487	WITHOUT_CLASSIFICATION	0.3906715826431513	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9989699600463491	WITHOUT_CLASSIFICATION	0.0010300399536509633	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998841342092036	WITHOUT_CLASSIFICATION	1.1586579079630823E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762281675025	WITHOUT_CLASSIFICATION	2.3771832497467582E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999974785594754	WITHOUT_CLASSIFICATION	2.5214405245439054E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998753970994099	WITHOUT_CLASSIFICATION	1.246029005901663E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.99999075874902	WITHOUT_CLASSIFICATION	9.24125097989961E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999947529621586	WITHOUT_CLASSIFICATION	5.24703784148316E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999089808573576	WITHOUT_CLASSIFICATION	9.1019142642375E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9995534859149237	WITHOUT_CLASSIFICATION	4.465140850763533E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999481318657015	WITHOUT_CLASSIFICATION	5.186813429841059E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9977279420380724	WITHOUT_CLASSIFICATION	0.002272057961927632	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998945553572351	WITHOUT_CLASSIFICATION	1.0544464276483878E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9955734740154452	WITHOUT_CLASSIFICATION	0.004426525984554803	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999531283590145	WITHOUT_CLASSIFICATION	4.687164098562547E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999157441085305	WITHOUT_CLASSIFICATION	8.425589146953472E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997076890842632	WITHOUT_CLASSIFICATION	2.9231091573682296E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9997450697849508	WITHOUT_CLASSIFICATION	2.5493021504916733E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9955808479351607	WITHOUT_CLASSIFICATION	0.0044191520648393864	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.99657459282744	WITHOUT_CLASSIFICATION	0.0034254071725599152	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998709475082899	WITHOUT_CLASSIFICATION	1.2905249171006638E-4	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9982686350231053	WITHOUT_CLASSIFICATION	0.00173136497689469	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9970581225064586	WITHOUT_CLASSIFICATION	0.0029418774935414185	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999908835907446	WITHOUT_CLASSIFICATION	9.116409255307207E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999765195174264	WITHOUT_CLASSIFICATION	2.3480482573599928E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9993339995829502	WITHOUT_CLASSIFICATION	6.660004170498319E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999853191162056	WITHOUT_CLASSIFICATION	1.4680883794398566E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9954206737686073	WITHOUT_CLASSIFICATION	0.0045793262313926445	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9992793314037651	WITHOUT_CLASSIFICATION	7.206685962349361E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999576138713574	WITHOUT_CLASSIFICATION	4.238612864264062E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999484906746741	WITHOUT_CLASSIFICATION	5.1509325325960755E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999953872169162	WITHOUT_CLASSIFICATION	4.6127830837877684E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9996425606263417	WITHOUT_CLASSIFICATION	3.57439373658282E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.752021519472684	IMPLEMENTATION	0.24797848052731605	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9974529554677192	WITHOUT_CLASSIFICATION	0.0025470445322807868	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995069795722187	WITHOUT_CLASSIFICATION	4.930204277812478E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999873634347897	WITHOUT_CLASSIFICATION	1.263656521032915E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9727710677799195	WITHOUT_CLASSIFICATION	0.027228932220080517	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999802675662663	WITHOUT_CLASSIFICATION	1.97324337335968E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999419618861917	WITHOUT_CLASSIFICATION	5.803811380830908E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999863808352358	WITHOUT_CLASSIFICATION	1.361916476422609E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999927018682944	WITHOUT_CLASSIFICATION	7.298131705639251E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999980794847899	WITHOUT_CLASSIFICATION	1.9205152100926536E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9995392890253373	WITHOUT_CLASSIFICATION	4.607109746627044E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998489113384095	WITHOUT_CLASSIFICATION	1.5108866159045894E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996663561052773	WITHOUT_CLASSIFICATION	3.336438947227847E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9995392890253373	WITHOUT_CLASSIFICATION	4.607109746627044E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999980794847899	WITHOUT_CLASSIFICATION	1.9205152100926536E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998489113384095	WITHOUT_CLASSIFICATION	1.5108866159045894E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999157405758093	WITHOUT_CLASSIFICATION	8.425942419071223E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999972136501491	WITHOUT_CLASSIFICATION	2.7863498509125656E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9954913135241942	WITHOUT_CLASSIFICATION	0.004508686475805889	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999563259229226	WITHOUT_CLASSIFICATION	4.367407707728136E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998524602768	WITHOUT_CLASSIFICATION	1.4753972320658695E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7083643336808085	WITHOUT_CLASSIFICATION	0.2916356663191915	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9841605937488918	WITHOUT_CLASSIFICATION	0.01583940625110827	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999814182739011	WITHOUT_CLASSIFICATION	1.8581726098871286E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999720859130111	WITHOUT_CLASSIFICATION	2.7914086988846594E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9996426329720725	WITHOUT_CLASSIFICATION	3.573670279275464E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9989692879431372	WITHOUT_CLASSIFICATION	0.0010307120568628495	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999741008685974	WITHOUT_CLASSIFICATION	2.5899131402585838E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.998997645157319	WITHOUT_CLASSIFICATION	0.0010023548426809823	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997581946014422	WITHOUT_CLASSIFICATION	2.4180539855772143E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999889723930596	WITHOUT_CLASSIFICATION	1.1027606940290605E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998703765667761	WITHOUT_CLASSIFICATION	1.2962343322377406E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999284693979859	WITHOUT_CLASSIFICATION	7.153060201412926E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999930170303145	WITHOUT_CLASSIFICATION	6.982969685489049E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999592347148178	WITHOUT_CLASSIFICATION	4.0765285182199493E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9996479792193699	WITHOUT_CLASSIFICATION	3.5202078063009885E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9969393874817035	WITHOUT_CLASSIFICATION	0.0030606125182964876	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9998113922966743	WITHOUT_CLASSIFICATION	1.8860770332565784E-4	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9989520573197537	WITHOUT_CLASSIFICATION	0.0010479426802462602	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9994648257999627	WITHOUT_CLASSIFICATION	5.351742000373318E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996401321380213	WITHOUT_CLASSIFICATION	3.598678619786698E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996401321380213	WITHOUT_CLASSIFICATION	3.598678619786698E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997328825931414	WITHOUT_CLASSIFICATION	2.671174068585661E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997328825931414	WITHOUT_CLASSIFICATION	2.671174068585661E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9986543077718554	WITHOUT_CLASSIFICATION	0.00134569222814464	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999284693979859	WITHOUT_CLASSIFICATION	7.153060201412926E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997487038208449	WITHOUT_CLASSIFICATION	2.5129617915507915E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999387079427592	WITHOUT_CLASSIFICATION	6.129205724074969E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994957780751196	WITHOUT_CLASSIFICATION	5.042219248804055E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994957780751196	WITHOUT_CLASSIFICATION	5.042219248804055E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9997077255721505	WITHOUT_CLASSIFICATION	2.9227442784944264E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9984154290670563	WITHOUT_CLASSIFICATION	0.001584570932943627	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9978487099282124	WITHOUT_CLASSIFICATION	0.0021512900717875973	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9997076203249242	WITHOUT_CLASSIFICATION	2.923796750757747E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997585357323528	WITHOUT_CLASSIFICATION	2.4146426764706216E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9998824022521128	WITHOUT_CLASSIFICATION	1.1759774788711407E-4	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998141594587836	WITHOUT_CLASSIFICATION	1.8584054121643633E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997812971303324	WITHOUT_CLASSIFICATION	2.1870286966753485E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9995797462892626	WITHOUT_CLASSIFICATION	4.2025371073746757E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999925005524027	WITHOUT_CLASSIFICATION	7.4994475973041385E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9996246671313289	WITHOUT_CLASSIFICATION	3.753328686710853E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9993828700482523	WITHOUT_CLASSIFICATION	6.171299517475598E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996405821950107	WITHOUT_CLASSIFICATION	3.59417804989195E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9986827492367205	WITHOUT_CLASSIFICATION	0.0013172507632795178	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9418865224287362	WITHOUT_CLASSIFICATION	0.0581134775712638	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997978247352927	WITHOUT_CLASSIFICATION	2.0217526470734412E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852416060458	WITHOUT_CLASSIFICATION	1.4758393954201815E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9994366672935509	WITHOUT_CLASSIFICATION	5.633327064490466E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9832429503584247	WITHOUT_CLASSIFICATION	0.016757049641575282	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999994869001448	WITHOUT_CLASSIFICATION	5.130998551058481E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9982286154352079	WITHOUT_CLASSIFICATION	0.0017713845647921844	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999828523501971	WITHOUT_CLASSIFICATION	1.7147649802867608E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997728227408359	WITHOUT_CLASSIFICATION	2.2717725916402483E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999992817737227	WITHOUT_CLASSIFICATION	7.18226277308442E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9991179339447828	WITHOUT_CLASSIFICATION	8.8206605521718E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997754013006804	WITHOUT_CLASSIFICATION	2.2459869931965718E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998709475082899	WITHOUT_CLASSIFICATION	1.2905249171006638E-4	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998365166322586	WITHOUT_CLASSIFICATION	1.6348336774142075E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999987201821798	WITHOUT_CLASSIFICATION	1.2798178201230329E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999863049636656	WITHOUT_CLASSIFICATION	1.3695036334398532E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999840359840948	WITHOUT_CLASSIFICATION	1.5964015905205485E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9987194633123733	WITHOUT_CLASSIFICATION	0.0012805366876267967	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9987194633123733	WITHOUT_CLASSIFICATION	0.0012805366876267967	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999294655616187	WITHOUT_CLASSIFICATION	7.053443838130959E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9994504176525241	WITHOUT_CLASSIFICATION	5.49582347476046E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9991172096663995	WITHOUT_CLASSIFICATION	8.827903336005341E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9991172096663995	WITHOUT_CLASSIFICATION	8.827903336005341E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9980306029320047	WITHOUT_CLASSIFICATION	0.0019693970679952482	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998489691784908	WITHOUT_CLASSIFICATION	1.5103082150915893E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9855433819210513	WITHOUT_CLASSIFICATION	0.014456618078948665	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999825178213981	WITHOUT_CLASSIFICATION	1.7482178601897685E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9978227500247595	WITHOUT_CLASSIFICATION	0.0021772499752405012	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999977564100415	WITHOUT_CLASSIFICATION	2.243589958499522E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998473601717863	WITHOUT_CLASSIFICATION	1.5263982821374098E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999089625874901	WITHOUT_CLASSIFICATION	9.103741251003061E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999089625874901	WITHOUT_CLASSIFICATION	9.103741251003061E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998785044450165	WITHOUT_CLASSIFICATION	1.2149555498357528E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999793773283431	WITHOUT_CLASSIFICATION	2.0622671656871962E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999793773283431	WITHOUT_CLASSIFICATION	2.0622671656871962E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999339868754111	WITHOUT_CLASSIFICATION	6.601312458879843E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999381840714787	WITHOUT_CLASSIFICATION	6.181592852130298E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999069350499957	WITHOUT_CLASSIFICATION	9.306495000429764E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999761538665121	WITHOUT_CLASSIFICATION	2.38461334878962E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9989198748344668	WITHOUT_CLASSIFICATION	0.0010801251655332522	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999993720782528	WITHOUT_CLASSIFICATION	6.279217471615252E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999842921299576	WITHOUT_CLASSIFICATION	1.5707870042406486E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999523448297754	WITHOUT_CLASSIFICATION	4.765517022459988E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9954555878211311	WITHOUT_CLASSIFICATION	0.004544412178868876	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996814798153566	WITHOUT_CLASSIFICATION	3.1852018464343924E-4	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9428219514982065	WITHOUT_CLASSIFICATION	0.057178048501793595	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999928117503673	WITHOUT_CLASSIFICATION	7.188249632696859E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9996450345258724	WITHOUT_CLASSIFICATION	3.5496547412751443E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9980779213448124	WITHOUT_CLASSIFICATION	0.0019220786551875611	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9990617154416507	WITHOUT_CLASSIFICATION	9.382845583494144E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9985905136813293	WITHOUT_CLASSIFICATION	0.0014094863186706389	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998850611180677	WITHOUT_CLASSIFICATION	1.1493888193234476E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9986686084874488	WITHOUT_CLASSIFICATION	0.0013313915125512561	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999192495273143	WITHOUT_CLASSIFICATION	8.075047268575123E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9937380976358676	WITHOUT_CLASSIFICATION	0.006261902364132384	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.99979200707803	WITHOUT_CLASSIFICATION	2.0799292197000316E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9978745799639681	WITHOUT_CLASSIFICATION	0.0021254200360318687	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999987655881519	WITHOUT_CLASSIFICATION	1.234411848104979E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.7878570412350325	IMPLEMENTATION	0.21214295876496753	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999925952795186	WITHOUT_CLASSIFICATION	7.404720481473444E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9978745799639681	WITHOUT_CLASSIFICATION	0.0021254200360318687	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9679719535071757	WITHOUT_CLASSIFICATION	0.03202804649282429	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999289890247941	WITHOUT_CLASSIFICATION	7.101097520588397E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999995623131327	WITHOUT_CLASSIFICATION	4.37686867306357E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999926177751597	WITHOUT_CLASSIFICATION	7.3822248403054E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999949853727742	WITHOUT_CLASSIFICATION	5.014627225856766E-6	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9993151611669334	WITHOUT_CLASSIFICATION	6.848388330664677E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999826106050265	WITHOUT_CLASSIFICATION	1.738939497361301E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999454237847675	WITHOUT_CLASSIFICATION	5.4576215232629774E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999964891026315	WITHOUT_CLASSIFICATION	3.510897368502464E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999972205184332	WITHOUT_CLASSIFICATION	2.7794815667961683E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999964891026315	WITHOUT_CLASSIFICATION	3.510897368502464E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999902113985648	WITHOUT_CLASSIFICATION	9.788601435112935E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998405780883239	WITHOUT_CLASSIFICATION	1.5942191167608538E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.6194213139750585	IMPLEMENTATION	0.38057868602494144	WITHOUT_CLASSIFICATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999707053008302	WITHOUT_CLASSIFICATION	2.929469916983605E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999712058931649	WITHOUT_CLASSIFICATION	2.879410683515915E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999943856062559	WITHOUT_CLASSIFICATION	5.614393744091024E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998918746440113	WITHOUT_CLASSIFICATION	1.081253559886896E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999499883147346	WITHOUT_CLASSIFICATION	5.0011685265266345E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998918746440113	WITHOUT_CLASSIFICATION	1.081253559886896E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998437720220154	WITHOUT_CLASSIFICATION	1.5622797798465766E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999940163932338	WITHOUT_CLASSIFICATION	5.9836067661905966E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999221103607995	WITHOUT_CLASSIFICATION	7.788963920062338E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999981861670387	WITHOUT_CLASSIFICATION	1.813832961307798E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999943856062559	WITHOUT_CLASSIFICATION	5.614393744091024E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999499883147346	WITHOUT_CLASSIFICATION	5.0011685265266345E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998437720220154	WITHOUT_CLASSIFICATION	1.5622797798465766E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9991512705576976	WITHOUT_CLASSIFICATION	8.487294423023648E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9980571040139244	WITHOUT_CLASSIFICATION	0.0019428959860754843	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9988246582957887	WITHOUT_CLASSIFICATION	0.0011753417042113519	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9983484123950055	WITHOUT_CLASSIFICATION	0.0016515876049945214	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9993499640744111	WITHOUT_CLASSIFICATION	6.500359255889163E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998519114996844	WITHOUT_CLASSIFICATION	1.4808850031560188E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852416060458	WITHOUT_CLASSIFICATION	1.4758393954201815E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999940163932338	WITHOUT_CLASSIFICATION	5.9836067661905966E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9644360049661652	WITHOUT_CLASSIFICATION	0.0355639950338347	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991022678447264	WITHOUT_CLASSIFICATION	8.977321552735359E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999103610550271	WITHOUT_CLASSIFICATION	8.963894497295695E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852416060458	WITHOUT_CLASSIFICATION	1.4758393954201815E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9995988384952867	WITHOUT_CLASSIFICATION	4.0116150471316176E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852416060458	WITHOUT_CLASSIFICATION	1.4758393954201815E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998989174473909	WITHOUT_CLASSIFICATION	1.010825526091169E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999618926513186	WITHOUT_CLASSIFICATION	3.810734868140682E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9977116603972604	WITHOUT_CLASSIFICATION	0.0022883396027396693	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9990020652255129	WITHOUT_CLASSIFICATION	9.979347744870496E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999983112286926	WITHOUT_CLASSIFICATION	1.6887713074053648E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9995886656016114	WITHOUT_CLASSIFICATION	4.1133439838859226E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999732576324193	WITHOUT_CLASSIFICATION	2.674236758070728E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999619666375096	WITHOUT_CLASSIFICATION	3.803336249041245E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9993577608778674	WITHOUT_CLASSIFICATION	6.422391221326266E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9997707250782505	WITHOUT_CLASSIFICATION	2.292749217496163E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999972050702944	WITHOUT_CLASSIFICATION	2.794929705584524E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9997707250782505	WITHOUT_CLASSIFICATION	2.292749217496163E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9934669533742831	WITHOUT_CLASSIFICATION	0.006533046625716834	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9979261304396698	WITHOUT_CLASSIFICATION	0.002073869560330074	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999926439501889	WITHOUT_CLASSIFICATION	7.356049811054227E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999943430450299	WITHOUT_CLASSIFICATION	5.656954970018478E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999899787834241	WITHOUT_CLASSIFICATION	1.0021216575920439E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.99989151233302	WITHOUT_CLASSIFICATION	1.0848766698011711E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999986178600161	WITHOUT_CLASSIFICATION	1.3821399839888E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999872432319575	WITHOUT_CLASSIFICATION	1.2756768042442446E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994784302305768	WITHOUT_CLASSIFICATION	5.215697694231978E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994784302305768	WITHOUT_CLASSIFICATION	5.215697694231978E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999673125642871	WITHOUT_CLASSIFICATION	3.268743571294786E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999991949974497	WITHOUT_CLASSIFICATION	8.050025503011545E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.99999830798636	WITHOUT_CLASSIFICATION	1.6920136399930636E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9989423193437559	WITHOUT_CLASSIFICATION	0.001057680656244174	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997717950998303	WITHOUT_CLASSIFICATION	2.2820490016978184E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999928314199745	WITHOUT_CLASSIFICATION	7.168580025501508E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9939957089603408	WITHOUT_CLASSIFICATION	0.006004291039659153	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999434436415228	WITHOUT_CLASSIFICATION	5.6556358477186444E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9995759218362652	WITHOUT_CLASSIFICATION	4.240781637347297E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9958096311812631	WITHOUT_CLASSIFICATION	0.004190368818736944	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.998396603546923	WITHOUT_CLASSIFICATION	0.0016033964530771108	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998602717176157	WITHOUT_CLASSIFICATION	1.397282823842785E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999958920906564	WITHOUT_CLASSIFICATION	4.107909343597975E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992367049730161	WITHOUT_CLASSIFICATION	7.632950269839757E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.993957183400093	WITHOUT_CLASSIFICATION	0.0060428165999070246	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.993957183400093	WITHOUT_CLASSIFICATION	0.0060428165999070246	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999244427914126	WITHOUT_CLASSIFICATION	7.555720858746754E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999619666375096	WITHOUT_CLASSIFICATION	3.803336249041245E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9982902111010846	WITHOUT_CLASSIFICATION	0.0017097888989152758	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9994986478206705	WITHOUT_CLASSIFICATION	5.013521793295464E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996683955698289	WITHOUT_CLASSIFICATION	3.316044301711157E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999989601047841	WITHOUT_CLASSIFICATION	1.039895215905007E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9994555257262756	WITHOUT_CLASSIFICATION	5.444742737243895E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999427579918203	WITHOUT_CLASSIFICATION	5.724200817965501E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997961728614436	WITHOUT_CLASSIFICATION	2.0382713855643785E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9997529574525739	WITHOUT_CLASSIFICATION	2.470425474260764E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998563380293	WITHOUT_CLASSIFICATION	1.4366197059287325E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999954499559949	WITHOUT_CLASSIFICATION	4.5500440051042475E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999977785659148	WITHOUT_CLASSIFICATION	2.221434085224262E-6	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.992832059441765	WITHOUT_CLASSIFICATION	0.007167940558235008	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9994752911672228	WITHOUT_CLASSIFICATION	5.247088327772016E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999908697438098	WITHOUT_CLASSIFICATION	9.130256190167468E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999662836947334	WITHOUT_CLASSIFICATION	3.371630526652042E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999363075227339	WITHOUT_CLASSIFICATION	6.36924772660667E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999144311322478	WITHOUT_CLASSIFICATION	8.556886775226004E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999232348951383	WITHOUT_CLASSIFICATION	7.676510486167083E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999970089346102	WITHOUT_CLASSIFICATION	2.9910653898019536E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9993437807708119	WITHOUT_CLASSIFICATION	6.562192291881227E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998799942520474	WITHOUT_CLASSIFICATION	1.2000574795253259E-4	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.99999765750412	WITHOUT_CLASSIFICATION	2.3424958800003044E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999984233937603	WITHOUT_CLASSIFICATION	1.5766062396222344E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9990546948111182	WITHOUT_CLASSIFICATION	9.453051888817768E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9353231223348615	WITHOUT_CLASSIFICATION	0.06467687766513855	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9995549436340869	WITHOUT_CLASSIFICATION	4.4505636591313577E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9971099332710028	WITHOUT_CLASSIFICATION	0.002890066728997209	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998406689721387	WITHOUT_CLASSIFICATION	1.5933102786131855E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998473417294151	WITHOUT_CLASSIFICATION	1.5265827058479097E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999067009854452	WITHOUT_CLASSIFICATION	9.329901455469981E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999328506060039	WITHOUT_CLASSIFICATION	6.714939399606813E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9992628741836579	WITHOUT_CLASSIFICATION	7.371258163421088E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991345287945556	WITHOUT_CLASSIFICATION	8.654712054444339E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999581763067655	WITHOUT_CLASSIFICATION	4.18236932343776E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988018276482514	WITHOUT_CLASSIFICATION	0.0011981723517485072	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988018276482514	WITHOUT_CLASSIFICATION	0.0011981723517485072	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998101400221272	WITHOUT_CLASSIFICATION	1.8985997787282795E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999762657856245	WITHOUT_CLASSIFICATION	2.3734214375460644E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999467794084388	WITHOUT_CLASSIFICATION	5.3220591561294086E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999467794084388	WITHOUT_CLASSIFICATION	5.3220591561294086E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999370241920578	WITHOUT_CLASSIFICATION	6.29758079421583E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9983051415953929	WITHOUT_CLASSIFICATION	0.0016948584046070968	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9996589471618152	WITHOUT_CLASSIFICATION	3.410528381847709E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999954214399835	WITHOUT_CLASSIFICATION	4.578560016433705E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999899251262069	WITHOUT_CLASSIFICATION	1.0074873793105944E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999851396752049	WITHOUT_CLASSIFICATION	1.4860324795070315E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999851396752049	WITHOUT_CLASSIFICATION	1.4860324795070315E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999371617662955	WITHOUT_CLASSIFICATION	6.283823370441549E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9994253191652186	WITHOUT_CLASSIFICATION	5.746808347813939E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9995789959474669	WITHOUT_CLASSIFICATION	4.210040525330141E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9995789959474669	WITHOUT_CLASSIFICATION	4.210040525330141E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9998728021528733	WITHOUT_CLASSIFICATION	1.2719784712673736E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999909463543146	WITHOUT_CLASSIFICATION	9.053645685392072E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999845641528318	WITHOUT_CLASSIFICATION	1.5435847168222154E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999083096866375	WITHOUT_CLASSIFICATION	9.169031336259553E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999980191235345	WITHOUT_CLASSIFICATION	1.980876465487414E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9995621333639829	WITHOUT_CLASSIFICATION	4.3786663601708E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999144011216262	WITHOUT_CLASSIFICATION	8.559887837370667E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9996374901907752	WITHOUT_CLASSIFICATION	3.6250980922487847E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.999944659333115	WITHOUT_CLASSIFICATION	5.534066688507097E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999717692616605	WITHOUT_CLASSIFICATION	2.8230738339476868E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9979925075871224	WITHOUT_CLASSIFICATION	0.0020074924128776124	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9385544143807905	WITHOUT_CLASSIFICATION	0.06144558561920942	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.7043167260837817	IMPLEMENTATION	0.2956832739162183	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999882925553586	WITHOUT_CLASSIFICATION	1.1707444641476546E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9995929201342357	WITHOUT_CLASSIFICATION	4.0707986576428017E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999852614310443	WITHOUT_CLASSIFICATION	1.4738568955829778E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999202617728226	WITHOUT_CLASSIFICATION	7.973822717750573E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9972203226112365	WITHOUT_CLASSIFICATION	0.0027796773887635738	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9957297421371999	WITHOUT_CLASSIFICATION	0.004270257862800025	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999179739693739	WITHOUT_CLASSIFICATION	8.202603062610552E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9979301049410401	WITHOUT_CLASSIFICATION	0.00206989505895986	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9994799261021753	WITHOUT_CLASSIFICATION	5.200738978247516E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9950378493817853	WITHOUT_CLASSIFICATION	0.004962150618214664	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9994637069685588	WITHOUT_CLASSIFICATION	5.362930314411796E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999183730378761	WITHOUT_CLASSIFICATION	8.16269621239981E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999881477760576	WITHOUT_CLASSIFICATION	1.1852223942378746E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999746874654505	WITHOUT_CLASSIFICATION	2.5312534549446686E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999940775662244	WITHOUT_CLASSIFICATION	5.922433775668169E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999431299576684	WITHOUT_CLASSIFICATION	5.6870042331621386E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999274237490011	WITHOUT_CLASSIFICATION	7.257625099883405E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999493235218653	WITHOUT_CLASSIFICATION	5.0676478134679806E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999485604483115	WITHOUT_CLASSIFICATION	5.143955168861038E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998028761089776	WITHOUT_CLASSIFICATION	1.9712389102238056E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994163599490287	WITHOUT_CLASSIFICATION	5.836400509713187E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998580668833597	WITHOUT_CLASSIFICATION	1.41933116640217E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999933930684368	WITHOUT_CLASSIFICATION	6.606931563164513E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999979325412464	WITHOUT_CLASSIFICATION	2.0674587535944093E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999480822023208	WITHOUT_CLASSIFICATION	5.191779767932319E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999698605995593	WITHOUT_CLASSIFICATION	3.013940044069143E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9998520210215783	WITHOUT_CLASSIFICATION	1.479789784216496E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9996104205818108	WITHOUT_CLASSIFICATION	3.895794181891883E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9995961985691232	WITHOUT_CLASSIFICATION	4.03801430876816E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9998097507970303	WITHOUT_CLASSIFICATION	1.9024920296974098E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998929510563181	WITHOUT_CLASSIFICATION	1.070489436818576E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.997067358951957	WITHOUT_CLASSIFICATION	0.0029326410480429907	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997458301896943	WITHOUT_CLASSIFICATION	2.5416981030568187E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999371298590158	WITHOUT_CLASSIFICATION	6.287014098418578E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9990262306136258	WITHOUT_CLASSIFICATION	9.737693863742107E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6295381059735655	WITHOUT_CLASSIFICATION	0.3704618940264344	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999594151078611	WITHOUT_CLASSIFICATION	4.058489213880849E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999534359890369	WITHOUT_CLASSIFICATION	4.656401096301848E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999944886601746	WITHOUT_CLASSIFICATION	5.511339825403288E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999582776960207	WITHOUT_CLASSIFICATION	4.1722303979229095E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999391432469157	WITHOUT_CLASSIFICATION	6.085675308437888E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999060907174747	WITHOUT_CLASSIFICATION	9.39092825253007E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999552153978434	WITHOUT_CLASSIFICATION	4.478460215665153E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9976952817067565	WITHOUT_CLASSIFICATION	0.002304718293243465	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9976952817067565	WITHOUT_CLASSIFICATION	0.002304718293243465	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999542284743	WITHOUT_CLASSIFICATION	4.577152565424416E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998969654507001	WITHOUT_CLASSIFICATION	1.0303454929987474E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999982395189878	WITHOUT_CLASSIFICATION	1.7604810122115692E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999949279395591	WITHOUT_CLASSIFICATION	5.072060440969648E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999891283462076	WITHOUT_CLASSIFICATION	1.0871653792523036E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999082961089162	WITHOUT_CLASSIFICATION	9.170389108387941E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999972096162195	WITHOUT_CLASSIFICATION	2.7903837804327966E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999951551910766	WITHOUT_CLASSIFICATION	4.8448089234096176E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999934386178012	WITHOUT_CLASSIFICATION	6.561382198772441E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999963724930243	WITHOUT_CLASSIFICATION	3.6275069757533066E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999891885606979	WITHOUT_CLASSIFICATION	1.0811439302127697E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996206987503079	WITHOUT_CLASSIFICATION	3.7930124969200304E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996574160136	WITHOUT_CLASSIFICATION	3.4258398637236563E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998867506651845	WITHOUT_CLASSIFICATION	1.1324933481550641E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995123789706283	WITHOUT_CLASSIFICATION	4.8762102937174715E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995123789706283	WITHOUT_CLASSIFICATION	4.8762102937174715E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999892569220646	WITHOUT_CLASSIFICATION	1.0743077935437726E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998324867009868	WITHOUT_CLASSIFICATION	1.6751329901326455E-4	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997627503084072	WITHOUT_CLASSIFICATION	2.3724969159281576E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999991318855153	WITHOUT_CLASSIFICATION	8.68114484697988E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999879041164834	WITHOUT_CLASSIFICATION	1.2095883516601514E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998807033347357	WITHOUT_CLASSIFICATION	1.1929666526442142E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999416448377436	WITHOUT_CLASSIFICATION	5.8355162256392044E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999190806594715	WITHOUT_CLASSIFICATION	8.091934052846249E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999764286613561	WITHOUT_CLASSIFICATION	2.3571338643906166E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9965362861720098	WITHOUT_CLASSIFICATION	0.003463713827990212	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9945933232858645	WITHOUT_CLASSIFICATION	0.005406676714135638	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9988384775836793	WITHOUT_CLASSIFICATION	0.0011615224163208087	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999996933267758	WITHOUT_CLASSIFICATION	3.0667322420141603E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999575506015258	WITHOUT_CLASSIFICATION	4.2449398474198567E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998462809362114	WITHOUT_CLASSIFICATION	1.5371906378860075E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999554404886915	WITHOUT_CLASSIFICATION	4.4559511308495743E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999962589397514	WITHOUT_CLASSIFICATION	3.741060248511901E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999986983525585	WITHOUT_CLASSIFICATION	1.3016474415710338E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999001771156746	WITHOUT_CLASSIFICATION	9.982288432536552E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999973514305188	WITHOUT_CLASSIFICATION	2.648569481144085E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998543124364	WITHOUT_CLASSIFICATION	1.456875635205599E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999966144176117	WITHOUT_CLASSIFICATION	3.385582388348314E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999266845026483	WITHOUT_CLASSIFICATION	7.331549735172244E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999438656034239	WITHOUT_CLASSIFICATION	5.613439657619875E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9864023533638666	WITHOUT_CLASSIFICATION	0.013597646636133331	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9994283259966508	WITHOUT_CLASSIFICATION	5.716740033492107E-4	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9974906183188775	WITHOUT_CLASSIFICATION	0.0025093816811223987	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999778808453894	WITHOUT_CLASSIFICATION	2.211915461059176E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999803669233939	WITHOUT_CLASSIFICATION	1.9633076606115636E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999903489914217	WITHOUT_CLASSIFICATION	9.651008578293387E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9998617679158551	WITHOUT_CLASSIFICATION	1.382320841448976E-4	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999861995369316	WITHOUT_CLASSIFICATION	1.3800463068510378E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9777436473470539	WITHOUT_CLASSIFICATION	0.022256352652946135	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9979726568380528	WITHOUT_CLASSIFICATION	0.0020273431619472707	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9988469213475011	WITHOUT_CLASSIFICATION	0.001153078652498958	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999649440052146	WITHOUT_CLASSIFICATION	3.5055994785454636E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999980037723305	WITHOUT_CLASSIFICATION	1.9962276695568373E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998707076223562	WITHOUT_CLASSIFICATION	1.292923776437924E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999571611408	WITHOUT_CLASSIFICATION	4.2838859280781624E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992237497530205	WITHOUT_CLASSIFICATION	7.762502469794365E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992237497530205	WITHOUT_CLASSIFICATION	7.762502469794365E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999812483706869	WITHOUT_CLASSIFICATION	1.8751629313094668E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999957420312443	WITHOUT_CLASSIFICATION	4.257968755745695E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999587099653611	WITHOUT_CLASSIFICATION	4.1290034638961336E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999580227975801	WITHOUT_CLASSIFICATION	4.197720241996401E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.7457440532623555	WITHOUT_CLASSIFICATION	0.2542559467376444	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999953187432524	WITHOUT_CLASSIFICATION	4.681256747604193E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997364904960144	WITHOUT_CLASSIFICATION	2.63509503985538E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9979125020817418	WITHOUT_CLASSIFICATION	0.002087497918258222	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999988050486178	WITHOUT_CLASSIFICATION	1.1949513821960145E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996404288500604	WITHOUT_CLASSIFICATION	3.5957114993967004E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999104764447229	WITHOUT_CLASSIFICATION	8.952355527716662E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999976330821764	WITHOUT_CLASSIFICATION	2.3669178235946304E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999977496526828	WITHOUT_CLASSIFICATION	2.250347317171275E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9926150847808871	WITHOUT_CLASSIFICATION	0.007384915219112959	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9998803575886894	WITHOUT_CLASSIFICATION	1.1964241131053762E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999998719027642	WITHOUT_CLASSIFICATION	1.2809723579176487E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999994016948381	WITHOUT_CLASSIFICATION	5.983051619122048E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999694315463088	WITHOUT_CLASSIFICATION	3.056845369111918E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998159658482128	WITHOUT_CLASSIFICATION	1.8403415178735614E-4	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999965700991782	WITHOUT_CLASSIFICATION	3.429900821891507E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9783597392463781	WITHOUT_CLASSIFICATION	0.02164026075362198	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9994991103469839	WITHOUT_CLASSIFICATION	5.008896530160245E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9963195202915411	WITHOUT_CLASSIFICATION	0.00368047970845889	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998539632059857	WITHOUT_CLASSIFICATION	1.460367940143911E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999733941889989	WITHOUT_CLASSIFICATION	2.6605811001080897E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995502295740748	WITHOUT_CLASSIFICATION	4.4977042592517333E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999567577801779	WITHOUT_CLASSIFICATION	4.324221982218759E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9989037189464052	WITHOUT_CLASSIFICATION	0.0010962810535947848	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999343778457527	WITHOUT_CLASSIFICATION	6.56221542473855E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9991756579385475	WITHOUT_CLASSIFICATION	8.243420614525615E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999964715595924	WITHOUT_CLASSIFICATION	3.5284404076840885E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999994363865184	WITHOUT_CLASSIFICATION	5.636134815257814E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999948442339995	WITHOUT_CLASSIFICATION	5.155766000454958E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999998979529433	WITHOUT_CLASSIFICATION	1.0204705669350975E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997472948089854	WITHOUT_CLASSIFICATION	2.5270519101465845E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999970734219393	WITHOUT_CLASSIFICATION	2.9265780607347495E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999949441131317	WITHOUT_CLASSIFICATION	5.0558868682894925E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999393216875374	WITHOUT_CLASSIFICATION	6.067831246264807E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9986769471049572	WITHOUT_CLASSIFICATION	0.0013230528950426749	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999765540807483	WITHOUT_CLASSIFICATION	2.344591925170721E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999988939358103	WITHOUT_CLASSIFICATION	1.1060641896304374E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999809270909419	WITHOUT_CLASSIFICATION	1.9072909058063868E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998939602282831	WITHOUT_CLASSIFICATION	1.0603977171678588E-4	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999164637008461	WITHOUT_CLASSIFICATION	8.353629915388573E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.984350271254088	WITHOUT_CLASSIFICATION	0.015649728745911858	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999684024546	WITHOUT_CLASSIFICATION	3.1597545398097265E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996574160136	WITHOUT_CLASSIFICATION	3.4258398637236563E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999141013115477	WITHOUT_CLASSIFICATION	8.589868845228242E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995961662134	WITHOUT_CLASSIFICATION	4.0383378661065486E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9985539197643388	WITHOUT_CLASSIFICATION	0.0014460802356612153	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999963853407059	WITHOUT_CLASSIFICATION	3.6146592941237937E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997450449871	WITHOUT_CLASSIFICATION	2.5495501289849715E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999066674103826	WITHOUT_CLASSIFICATION	9.333258961739989E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999680761736371	WITHOUT_CLASSIFICATION	3.192382636290347E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9529580673286845	IMPLEMENTATION	0.047041932671315616	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999990120158707	WITHOUT_CLASSIFICATION	9.879841292889554E-7	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9993815730352127	WITHOUT_CLASSIFICATION	6.184269647872526E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9995465043762501	WITHOUT_CLASSIFICATION	4.534956237498133E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996644930266526	WITHOUT_CLASSIFICATION	3.3550697334738637E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999926552700585	WITHOUT_CLASSIFICATION	7.344729941412414E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9923246795078055	WITHOUT_CLASSIFICATION	0.0076753204921945	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999885095576553	WITHOUT_CLASSIFICATION	1.1490442344688363E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9988812225539714	WITHOUT_CLASSIFICATION	0.0011187774460286158	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9905171241697694	WITHOUT_CLASSIFICATION	0.009482875830230567	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999764287600323	WITHOUT_CLASSIFICATION	2.357123996771433E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999885095576553	WITHOUT_CLASSIFICATION	1.1490442344688363E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.6941569508670553	WITHOUT_CLASSIFICATION	0.30584304913294463	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9995195712095496	WITHOUT_CLASSIFICATION	4.8042879045048754E-4	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999911935207535	WITHOUT_CLASSIFICATION	8.806479246510049E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997693373906751	WITHOUT_CLASSIFICATION	2.306626093248813E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996385266719588	WITHOUT_CLASSIFICATION	3.614733280411519E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999011491359049	WITHOUT_CLASSIFICATION	9.885086409518573E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999991118910104	WITHOUT_CLASSIFICATION	8.881089894966042E-7	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998387328650686	WITHOUT_CLASSIFICATION	1.6126713493138612E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999974822623797	WITHOUT_CLASSIFICATION	2.5177376202256493E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9989800768495334	WITHOUT_CLASSIFICATION	0.001019923150466639	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9991971671376576	WITHOUT_CLASSIFICATION	8.028328623423807E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8581381274880382	WITHOUT_CLASSIFICATION	0.14186187251196178	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999746231438525	WITHOUT_CLASSIFICATION	2.5376856147501007E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9941228526217566	WITHOUT_CLASSIFICATION	0.00587714737824333	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.995938949681207	WITHOUT_CLASSIFICATION	0.004061050318793105	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9993437807708119	WITHOUT_CLASSIFICATION	6.562192291881227E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999937277361283	WITHOUT_CLASSIFICATION	6.2722638717700825E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999853722659852	WITHOUT_CLASSIFICATION	1.4627734014781404E-5	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9993537331014182	WITHOUT_CLASSIFICATION	6.462668985818512E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9986604756906873	WITHOUT_CLASSIFICATION	0.0013395243093127147	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9974997973871944	WITHOUT_CLASSIFICATION	0.002500202612805626	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998905722301088	WITHOUT_CLASSIFICATION	1.0942776989118814E-4	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9880930134976581	WITHOUT_CLASSIFICATION	0.011906986502341956	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999978442805	WITHOUT_CLASSIFICATION	2.1557194166840124E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999734149242304	WITHOUT_CLASSIFICATION	2.6585075769608948E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999733779925543	WITHOUT_CLASSIFICATION	2.6622007445746117E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9940080435978764	WITHOUT_CLASSIFICATION	0.005991956402123669	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999368788689272	WITHOUT_CLASSIFICATION	6.312113107275675E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.730552525059565	WITHOUT_CLASSIFICATION	0.26944747494043503	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9990049529271977	WITHOUT_CLASSIFICATION	9.95047072802334E-4	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999536825327884	WITHOUT_CLASSIFICATION	4.631746721168004E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998044872724124	WITHOUT_CLASSIFICATION	1.9551272758756727E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999661999224988	WITHOUT_CLASSIFICATION	3.380007750117626E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999946399116791	WITHOUT_CLASSIFICATION	5.360088320802478E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999813937410035	WITHOUT_CLASSIFICATION	1.8606258996589696E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999096445573	WITHOUT_CLASSIFICATION	9.035544270119002E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.99999931137045	WITHOUT_CLASSIFICATION	6.886295500051147E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999370760300196	WITHOUT_CLASSIFICATION	6.292396998039512E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999202801069217	WITHOUT_CLASSIFICATION	7.971989307827794E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9946187812847994	WITHOUT_CLASSIFICATION	0.005381218715200544	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998124872412614	WITHOUT_CLASSIFICATION	1.8751275873857113E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998124872412614	WITHOUT_CLASSIFICATION	1.8751275873857113E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999196348298345	WITHOUT_CLASSIFICATION	8.03651701654865E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999935422734725	WITHOUT_CLASSIFICATION	6.45772652755741E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998951533879915	WITHOUT_CLASSIFICATION	1.0484661200846868E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049512865046891	IMPLEMENTATION	0.4950487134953109	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999825178213981	WITHOUT_CLASSIFICATION	1.7482178601897685E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999825178213981	WITHOUT_CLASSIFICATION	1.7482178601897685E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9997175387251184	WITHOUT_CLASSIFICATION	2.824612748816775E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9972049724837386	WITHOUT_CLASSIFICATION	0.0027950275162613764	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999852587481102	WITHOUT_CLASSIFICATION	1.4741251889916457E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.995471246030977	WITHOUT_CLASSIFICATION	0.004528753969022894	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9680513203549764	WITHOUT_CLASSIFICATION	0.031948679645023625	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999683457840819	WITHOUT_CLASSIFICATION	3.165421591808674E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998837735647927	WITHOUT_CLASSIFICATION	1.162264352072064E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999008240284624	WITHOUT_CLASSIFICATION	9.917597153774572E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999855864486772	WITHOUT_CLASSIFICATION	1.4413551322726092E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371187265347	WITHOUT_CLASSIFICATION	6.288127346530733E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371187265347	WITHOUT_CLASSIFICATION	6.288127346530733E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9989415135962714	WITHOUT_CLASSIFICATION	0.0010584864037285612	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995885757927951	WITHOUT_CLASSIFICATION	4.114242072048159E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9996491924813815	WITHOUT_CLASSIFICATION	3.508075186184008E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9992566569351039	WITHOUT_CLASSIFICATION	7.43343064896009E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9995724107592007	WITHOUT_CLASSIFICATION	4.275892407993232E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762281675025	WITHOUT_CLASSIFICATION	2.3771832497467582E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998402712014737	WITHOUT_CLASSIFICATION	1.5972879852629336E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999997149307907	WITHOUT_CLASSIFICATION	2.850692093082017E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9993609425010251	WITHOUT_CLASSIFICATION	6.390574989748263E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998528940237054	WITHOUT_CLASSIFICATION	1.471059762945011E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999542876938404	WITHOUT_CLASSIFICATION	4.571230615953901E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9989800768495334	WITHOUT_CLASSIFICATION	0.001019923150466639	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999930443605521	WITHOUT_CLASSIFICATION	6.955639447814697E-6	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9993904808843883	WITHOUT_CLASSIFICATION	6.095191156116702E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999978327817057	WITHOUT_CLASSIFICATION	2.167218294263851E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997813188465196	WITHOUT_CLASSIFICATION	2.186811534804068E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999336397049182	WITHOUT_CLASSIFICATION	6.636029508179805E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9991161127306167	WITHOUT_CLASSIFICATION	8.838872693831502E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9992848676746401	WITHOUT_CLASSIFICATION	7.151323253598602E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9992743244730031	WITHOUT_CLASSIFICATION	7.256755269968089E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9973709789632996	WITHOUT_CLASSIFICATION	0.002629021036700403	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9954879453437292	WITHOUT_CLASSIFICATION	0.004512054656270798	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9954879453437292	WITHOUT_CLASSIFICATION	0.004512054656270798	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9978745799639681	WITHOUT_CLASSIFICATION	0.0021254200360318687	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999915920854304	WITHOUT_CLASSIFICATION	8.40791456959294E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9977259075172397	WITHOUT_CLASSIFICATION	0.0022740924827603175	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9990059389548499	WITHOUT_CLASSIFICATION	9.940610451500608E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9994707737841583	WITHOUT_CLASSIFICATION	5.292262158418259E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998405219691434	WITHOUT_CLASSIFICATION	1.5947803085656498E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999707053008302	WITHOUT_CLASSIFICATION	2.929469916983605E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999628295393	WITHOUT_CLASSIFICATION	3.717046071525155E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9991512705576976	WITHOUT_CLASSIFICATION	8.487294423023648E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997503298046103	WITHOUT_CLASSIFICATION	2.4967019538978683E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852416060458	WITHOUT_CLASSIFICATION	1.4758393954201815E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9995222027857735	WITHOUT_CLASSIFICATION	4.777972142264727E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999978258440506	WITHOUT_CLASSIFICATION	2.1741559493948107E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999849695135517	WITHOUT_CLASSIFICATION	1.5030486448288914E-4	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999973938860462	WITHOUT_CLASSIFICATION	2.6061139537175915E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997878209137078	WITHOUT_CLASSIFICATION	2.1217908629228425E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999736173196732	WITHOUT_CLASSIFICATION	2.6382680326825544E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9992427294840117	WITHOUT_CLASSIFICATION	7.572705159882247E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9979289035817362	WITHOUT_CLASSIFICATION	0.0020710964182636595	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999963899613904	WITHOUT_CLASSIFICATION	3.6100386096269445E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999947966317106	WITHOUT_CLASSIFICATION	5.2033682893997774E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999803158347	WITHOUT_CLASSIFICATION	1.9684165376872115E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999845641528318	WITHOUT_CLASSIFICATION	1.5435847168222154E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998602746428	WITHOUT_CLASSIFICATION	1.3972535713725466E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999272379599832	WITHOUT_CLASSIFICATION	7.276204001679954E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999272379599832	WITHOUT_CLASSIFICATION	7.276204001679954E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9971902996251951	WITHOUT_CLASSIFICATION	0.002809700374804872	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912649254845869	WITHOUT_CLASSIFICATION	0.008735074515413076	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999922447197569	WITHOUT_CLASSIFICATION	7.755280243143693E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999038599544537	WITHOUT_CLASSIFICATION	9.614004554624215E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999798311621838	WITHOUT_CLASSIFICATION	2.0168837816117492E-5	IMPLEMENTATION
