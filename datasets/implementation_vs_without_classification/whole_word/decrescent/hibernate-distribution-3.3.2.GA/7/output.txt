// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993552157764384	WITHOUT_CLASSIFICATION	6.447842235616223E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993552157764384	WITHOUT_CLASSIFICATION	6.447842235616223E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.977898664821127	WITHOUT_CLASSIFICATION	0.022101335178872923	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9897672042829642	WITHOUT_CLASSIFICATION	0.010232795717035847	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9675863961833535	WITHOUT_CLASSIFICATION	0.032413603816646534	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9507303065023072	IMPLEMENTATION	0.049269693497692786	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9996149552397741	WITHOUT_CLASSIFICATION	3.8504476022599606E-4	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7104391330284876	IMPLEMENTATION	0.28956086697151234	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9861186133420057	WITHOUT_CLASSIFICATION	0.013881386657994257	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9536982282214692	WITHOUT_CLASSIFICATION	0.04630177177853076	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999121040752036	WITHOUT_CLASSIFICATION	8.789592479640426E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8522180059676804	WITHOUT_CLASSIFICATION	0.1477819940323196	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9602022659949696	WITHOUT_CLASSIFICATION	0.039797734005030345	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9602022659949696	WITHOUT_CLASSIFICATION	0.039797734005030345	IMPLEMENTATION
/**	IMPLEMENTATION	0.5188595734534857	WITHOUT_CLASSIFICATION	0.48114042654651423	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6362520364202497	IMPLEMENTATION	0.36374796357975026	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999957475475534	IMPLEMENTATION	4.252452446606728E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.7435599487971212	WITHOUT_CLASSIFICATION	0.2564400512028788	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999936043991695	WITHOUT_CLASSIFICATION	6.3956008305673275E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9707839189138832	WITHOUT_CLASSIFICATION	0.029216081086116855	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9085209232871299	WITHOUT_CLASSIFICATION	0.0914790767128701	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9963149410305466	WITHOUT_CLASSIFICATION	0.003685058969453318	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9440954749626103	WITHOUT_CLASSIFICATION	0.05590452503738985	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8573912308468612	WITHOUT_CLASSIFICATION	0.14260876915313878	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8573912308468612	WITHOUT_CLASSIFICATION	0.14260876915313878	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7866985824671814	WITHOUT_CLASSIFICATION	0.2133014175328185	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9374777407079478	WITHOUT_CLASSIFICATION	0.06252225929205228	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.8371945454542802	IMPLEMENTATION	0.1628054545457198	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.984310890979318	WITHOUT_CLASSIFICATION	0.015689109020681994	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.6040645784482354	IMPLEMENTATION	0.3959354215517646	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.977273072171169	WITHOUT_CLASSIFICATION	0.02272692782883102	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.978427085962372	WITHOUT_CLASSIFICATION	0.021572914037627913	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998127013707031	WITHOUT_CLASSIFICATION	1.8729862929694024E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9806811462957413	WITHOUT_CLASSIFICATION	0.019318853704258634	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9168884038721257	IMPLEMENTATION	0.08311159612787429	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9693738508423128	WITHOUT_CLASSIFICATION	0.030626149157687264	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9515551436635403	IMPLEMENTATION	0.04844485633645975	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9758786197109934	WITHOUT_CLASSIFICATION	0.024121380289006556	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.990455964926136	WITHOUT_CLASSIFICATION	0.009544035073863966	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9699597851132458	IMPLEMENTATION	0.030040214886754197	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9699597851132458	IMPLEMENTATION	0.030040214886754197	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5983024885196839	WITHOUT_CLASSIFICATION	0.4016975114803161	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999372719156718	WITHOUT_CLASSIFICATION	6.272808432819524E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9979946355791137	WITHOUT_CLASSIFICATION	0.002005364420886262	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9988724245635258	IMPLEMENTATION	0.0011275754364743415	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.984232606226309	WITHOUT_CLASSIFICATION	0.01576739377369097	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9721007108557174	WITHOUT_CLASSIFICATION	0.027899289144282705	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9967198422545688	WITHOUT_CLASSIFICATION	0.003280157745431283	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998215517768111	WITHOUT_CLASSIFICATION	1.7844822318898593E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9908718343805173	WITHOUT_CLASSIFICATION	0.009128165619482778	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9958189127945949	WITHOUT_CLASSIFICATION	0.004181087205405117	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.8590757360785582	IMPLEMENTATION	0.14092426392144175	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.989605605119779	WITHOUT_CLASSIFICATION	0.0103943948802209	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.8973498828476218	WITHOUT_CLASSIFICATION	0.10265011715237822	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9320146978604181	WITHOUT_CLASSIFICATION	0.06798530213958179	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.978427085962372	WITHOUT_CLASSIFICATION	0.021572914037627913	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9320146978604181	WITHOUT_CLASSIFICATION	0.06798530213958179	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9995216688041467	IMPLEMENTATION	4.7833119585334046E-4	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6752631552273753	IMPLEMENTATION	0.3247368447726246	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9320146978604181	WITHOUT_CLASSIFICATION	0.06798530213958179	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999981157041581	WITHOUT_CLASSIFICATION	1.8842958419357107E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999981157041581	WITHOUT_CLASSIFICATION	1.8842958419357107E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999950173870101	IMPLEMENTATION	4.9826129897607296E-6	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9987814565590521	WITHOUT_CLASSIFICATION	0.0012185434409478129	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997798355922055	WITHOUT_CLASSIFICATION	2.2016440779448786E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999812707885846	WITHOUT_CLASSIFICATION	1.8729211415530766E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999658587248839	WITHOUT_CLASSIFICATION	3.414127511614834E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999882488510793	WITHOUT_CLASSIFICATION	1.1751148920709377E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999882488510793	WITHOUT_CLASSIFICATION	1.1751148920709377E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999985027819122	WITHOUT_CLASSIFICATION	1.4972180878675905E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999929353009025	WITHOUT_CLASSIFICATION	7.064699097507332E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999973957431052	WITHOUT_CLASSIFICATION	2.604256894795353E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999424224823149	WITHOUT_CLASSIFICATION	5.757751768503902E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995458112468	WITHOUT_CLASSIFICATION	4.541887531721621E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995458112468	WITHOUT_CLASSIFICATION	4.541887531721621E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999917830524627	WITHOUT_CLASSIFICATION	8.216947537341772E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9995750424245741	WITHOUT_CLASSIFICATION	4.249575754259934E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999572797407447	WITHOUT_CLASSIFICATION	4.272025925531428E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999948421093178	WITHOUT_CLASSIFICATION	5.1578906821957186E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988932135091	WITHOUT_CLASSIFICATION	1.1067864908753919E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999929432187403	WITHOUT_CLASSIFICATION	7.056781259771733E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999875002198421	WITHOUT_CLASSIFICATION	1.2499780157853348E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993424802953262	WITHOUT_CLASSIFICATION	6.575197046738525E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997459202994582	WITHOUT_CLASSIFICATION	2.5407970054180327E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999969855795992	WITHOUT_CLASSIFICATION	3.0144204008021396E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997449215104042	WITHOUT_CLASSIFICATION	2.5507848959582466E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997449215104042	WITHOUT_CLASSIFICATION	2.5507848959582466E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999391857030602	WITHOUT_CLASSIFICATION	6.081429693994482E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999935495073379	WITHOUT_CLASSIFICATION	6.45049266205149E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998489280931899	WITHOUT_CLASSIFICATION	1.510719068100021E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999422391124957	WITHOUT_CLASSIFICATION	5.77608875042386E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9886580811342921	WITHOUT_CLASSIFICATION	0.01134191886570797	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188595734534857	WITHOUT_CLASSIFICATION	0.48114042654651423	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188595734534857	WITHOUT_CLASSIFICATION	0.48114042654651423	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999934550636468	WITHOUT_CLASSIFICATION	6.544936353172256E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996400327280612	WITHOUT_CLASSIFICATION	3.5996727193874994E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999875936268421	WITHOUT_CLASSIFICATION	1.2406373157878434E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998975419059114	WITHOUT_CLASSIFICATION	1.024580940886847E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999664413665758	WITHOUT_CLASSIFICATION	3.355863342419956E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235900547744	WITHOUT_CLASSIFICATION	7.640994522560824E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995273919733118	WITHOUT_CLASSIFICATION	4.726080266882215E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9998671469523112	WITHOUT_CLASSIFICATION	1.328530476887802E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9984871988587262	WITHOUT_CLASSIFICATION	0.0015128011412737202	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9984871988587262	WITHOUT_CLASSIFICATION	0.0015128011412737202	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999260699383332	WITHOUT_CLASSIFICATION	7.393006166681944E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9022979960841354	WITHOUT_CLASSIFICATION	0.09770200391586467	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999360548621783	WITHOUT_CLASSIFICATION	6.394513782162876E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999586128093377	WITHOUT_CLASSIFICATION	4.1387190662256276E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999913527434047	WITHOUT_CLASSIFICATION	8.647256595314692E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999951460185253	WITHOUT_CLASSIFICATION	4.853981474712315E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9988329217181734	WITHOUT_CLASSIFICATION	0.0011670782818266137	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999016269432407	WITHOUT_CLASSIFICATION	9.837305675920036E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9992291827095476	WITHOUT_CLASSIFICATION	7.708172904523677E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997578367442352	WITHOUT_CLASSIFICATION	2.4216325576476686E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9994908159466309	WITHOUT_CLASSIFICATION	5.091840533691614E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997486670473819	WITHOUT_CLASSIFICATION	2.5133295261806977E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999990389786536	WITHOUT_CLASSIFICATION	9.610213463909304E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992256914383452	WITHOUT_CLASSIFICATION	7.743085616548313E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999893463639463	WITHOUT_CLASSIFICATION	1.0653636053623492E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999973683058831	WITHOUT_CLASSIFICATION	2.631694116848495E-6	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999676293285207	WITHOUT_CLASSIFICATION	3.2370671479342666E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999917425045559	WITHOUT_CLASSIFICATION	8.257495444176317E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999881563892904	WITHOUT_CLASSIFICATION	1.1843610709601416E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999920131904914	WITHOUT_CLASSIFICATION	7.986809508574962E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999507864559886	WITHOUT_CLASSIFICATION	4.921354401138135E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999978019995429	WITHOUT_CLASSIFICATION	2.1980004570009443E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998844886960827	WITHOUT_CLASSIFICATION	1.1551130391724795E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998648926236227	WITHOUT_CLASSIFICATION	1.3510737637732504E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6960822918750003	IMPLEMENTATION	0.3039177081249997	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.99975417913235	WITHOUT_CLASSIFICATION	2.458208676500224E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999672895218552	WITHOUT_CLASSIFICATION	3.271047814475823E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9894727086524445	WITHOUT_CLASSIFICATION	0.010527291347555437	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999978673527136	WITHOUT_CLASSIFICATION	2.1326472865667653E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999984659901103	WITHOUT_CLASSIFICATION	1.5340098897124598E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9998754009861114	WITHOUT_CLASSIFICATION	1.2459901388866718E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999809949590593	WITHOUT_CLASSIFICATION	1.9005040940620423E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999995345229146	WITHOUT_CLASSIFICATION	4.654770854002102E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999940719070298	WITHOUT_CLASSIFICATION	5.928092970161051E-6	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999908676932041	WITHOUT_CLASSIFICATION	9.132306795866486E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997017244825	WITHOUT_CLASSIFICATION	2.982755174367537E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999940719070298	WITHOUT_CLASSIFICATION	5.928092970161051E-6	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9988144521631915	WITHOUT_CLASSIFICATION	0.0011855478368084575	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998888473831894	WITHOUT_CLASSIFICATION	1.1115261681064861E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997471700491322	WITHOUT_CLASSIFICATION	2.528299508678313E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999589094211929	WITHOUT_CLASSIFICATION	4.109057880699201E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468772446098	WITHOUT_CLASSIFICATION	5.3122755390075975E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468772446098	WITHOUT_CLASSIFICATION	5.3122755390075975E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9984892602978809	WITHOUT_CLASSIFICATION	0.0015107397021191828	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993369983371	WITHOUT_CLASSIFICATION	6.630016629596121E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999973197078106	WITHOUT_CLASSIFICATION	2.680292189361181E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998799129894751	WITHOUT_CLASSIFICATION	1.2008701052484843E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999969041828236	WITHOUT_CLASSIFICATION	3.095817176384134E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999362567931223	WITHOUT_CLASSIFICATION	6.374320687774599E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9976943440157241	WITHOUT_CLASSIFICATION	0.0023056559842759344	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999677945276033	WITHOUT_CLASSIFICATION	3.2205472396702635E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999992103330126	WITHOUT_CLASSIFICATION	7.896669874067324E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999878370204347	WITHOUT_CLASSIFICATION	1.2162979565350953E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999878370204347	WITHOUT_CLASSIFICATION	1.2162979565350953E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999205679008902	WITHOUT_CLASSIFICATION	7.943209910978732E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999115825864995	WITHOUT_CLASSIFICATION	8.841741350055922E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999888260003799	WITHOUT_CLASSIFICATION	1.1173999620226107E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999878370204347	WITHOUT_CLASSIFICATION	1.2162979565350953E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999205679008902	WITHOUT_CLASSIFICATION	7.943209910978732E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999205679008902	WITHOUT_CLASSIFICATION	7.943209910978732E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999975668501471	WITHOUT_CLASSIFICATION	2.4331498530041364E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998975749601889	WITHOUT_CLASSIFICATION	1.0242503981100395E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999566450551	WITHOUT_CLASSIFICATION	4.335494489030113E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999961755611255	WITHOUT_CLASSIFICATION	3.8244388744884275E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999235116913612	WITHOUT_CLASSIFICATION	7.648830863880652E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999235116913612	WITHOUT_CLASSIFICATION	7.648830863880652E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999742424002913	WITHOUT_CLASSIFICATION	2.57575997087139E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992922320175538	WITHOUT_CLASSIFICATION	7.077679824461927E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999836807917148	WITHOUT_CLASSIFICATION	1.6319208285186452E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990177445968	WITHOUT_CLASSIFICATION	9.82255403219194E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990177445968	WITHOUT_CLASSIFICATION	9.82255403219194E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9996469768461078	WITHOUT_CLASSIFICATION	3.530231538922889E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994252041631808	WITHOUT_CLASSIFICATION	5.747958368193082E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999738242873971	WITHOUT_CLASSIFICATION	2.617571260284738E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999853720699	WITHOUT_CLASSIFICATION	1.4627930121089687E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999822696911371	WITHOUT_CLASSIFICATION	1.7730308862802177E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998887036457145	WITHOUT_CLASSIFICATION	1.1129635428552156E-4	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998440710819666	WITHOUT_CLASSIFICATION	1.5592891803336808E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9997515149184644	WITHOUT_CLASSIFICATION	2.4848508153559284E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999738242873971	WITHOUT_CLASSIFICATION	2.617571260284738E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9992474985041077	WITHOUT_CLASSIFICATION	7.525014958922391E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999150577192115	WITHOUT_CLASSIFICATION	8.494228078841841E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999150577192115	WITHOUT_CLASSIFICATION	8.494228078841841E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999987926643	WITHOUT_CLASSIFICATION	1.2073356999994228E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999921734849029	WITHOUT_CLASSIFICATION	7.826515097227278E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9943446152798189	WITHOUT_CLASSIFICATION	0.005655384720181154	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998792355488189	WITHOUT_CLASSIFICATION	1.2076445118110849E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997647922274983	WITHOUT_CLASSIFICATION	2.35207772501698E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9993106170606684	WITHOUT_CLASSIFICATION	6.89382939331648E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998894375837474	WITHOUT_CLASSIFICATION	1.1056241625258046E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998787207142069	WITHOUT_CLASSIFICATION	1.2127928579314517E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990414471984	WITHOUT_CLASSIFICATION	9.58552801582821E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990414471984	WITHOUT_CLASSIFICATION	9.58552801582821E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997798355922055	WITHOUT_CLASSIFICATION	2.2016440779448786E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999588306546272	WITHOUT_CLASSIFICATION	4.1169345372833683E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999404563236598	WITHOUT_CLASSIFICATION	5.9543676340151516E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999659671503783	WITHOUT_CLASSIFICATION	3.403284962168677E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999198380926172	WITHOUT_CLASSIFICATION	8.016190738277895E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998135482943569	WITHOUT_CLASSIFICATION	1.8645170564315713E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999969471230434	WITHOUT_CLASSIFICATION	3.052876956592529E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999934544208138	WITHOUT_CLASSIFICATION	6.545579186206548E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999933207943198	WITHOUT_CLASSIFICATION	6.679205680234261E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999449497869729	WITHOUT_CLASSIFICATION	5.50502130271541E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9998135482943569	WITHOUT_CLASSIFICATION	1.8645170564315713E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999866374891778	WITHOUT_CLASSIFICATION	1.3362510822291435E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998201389259556	WITHOUT_CLASSIFICATION	1.798610740444093E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999228821080255	WITHOUT_CLASSIFICATION	7.71178919744087E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999599475692894	WITHOUT_CLASSIFICATION	4.005243071052801E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999932267847584	WITHOUT_CLASSIFICATION	6.7732152415155885E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999882488510793	WITHOUT_CLASSIFICATION	1.1751148920709377E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998120769860217	WITHOUT_CLASSIFICATION	1.8792301397840206E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999758362690175	WITHOUT_CLASSIFICATION	2.4163730982501265E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999746404116744	WITHOUT_CLASSIFICATION	2.5359588325645334E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999970775709652	WITHOUT_CLASSIFICATION	2.922429034803981E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997491504980713	WITHOUT_CLASSIFICATION	2.508495019286152E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999752564917397	WITHOUT_CLASSIFICATION	2.4743508260376823E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999881401556694	WITHOUT_CLASSIFICATION	1.1859844330652298E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999656282963441	WITHOUT_CLASSIFICATION	3.437170365590077E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9981150771499574	WITHOUT_CLASSIFICATION	0.0018849228500426305	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999966440141078	WITHOUT_CLASSIFICATION	3.3559858922060295E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999933207943198	WITHOUT_CLASSIFICATION	6.679205680234261E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997491504980713	WITHOUT_CLASSIFICATION	2.508495019286152E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999985027819122	WITHOUT_CLASSIFICATION	1.4972180878675905E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999612755502142	WITHOUT_CLASSIFICATION	3.8724449785945594E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999288200160928	WITHOUT_CLASSIFICATION	7.11799839072338E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999971236069564	WITHOUT_CLASSIFICATION	2.8763930436052805E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997541807078822	WITHOUT_CLASSIFICATION	2.4581929211779457E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999667875472635	WITHOUT_CLASSIFICATION	3.321245273652944E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999259544822175	WITHOUT_CLASSIFICATION	7.404551778243039E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998423537932694	WITHOUT_CLASSIFICATION	1.576462067307015E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998423537932694	WITHOUT_CLASSIFICATION	1.576462067307015E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999958470297224	WITHOUT_CLASSIFICATION	4.152970277559663E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999955915781712	WITHOUT_CLASSIFICATION	4.40842182880849E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999839498436759	WITHOUT_CLASSIFICATION	1.6050156324122704E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999155269945103	WITHOUT_CLASSIFICATION	8.447300548978E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999695812459675	WITHOUT_CLASSIFICATION	3.0418754032470596E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999625987860848	WITHOUT_CLASSIFICATION	3.740121391520838E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999890795569504	WITHOUT_CLASSIFICATION	1.0920443049588098E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999929353009025	WITHOUT_CLASSIFICATION	7.064699097507332E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999627674199473	WITHOUT_CLASSIFICATION	3.723258005275078E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999627674199473	WITHOUT_CLASSIFICATION	3.723258005275078E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999627674199473	WITHOUT_CLASSIFICATION	3.723258005275078E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999617246707558	WITHOUT_CLASSIFICATION	3.8275329244066305E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999627674199473	WITHOUT_CLASSIFICATION	3.723258005275078E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999526334187253	WITHOUT_CLASSIFICATION	4.7366581274680075E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999961939738004	WITHOUT_CLASSIFICATION	3.8060261996650555E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999889196553556	WITHOUT_CLASSIFICATION	1.1080344644305644E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999933207943198	WITHOUT_CLASSIFICATION	6.679205680234261E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997491504980713	WITHOUT_CLASSIFICATION	2.508495019286152E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997491504980713	WITHOUT_CLASSIFICATION	2.508495019286152E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9996206956807862	WITHOUT_CLASSIFICATION	3.79304319213769E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9996315999529923	WITHOUT_CLASSIFICATION	3.6840004700773273E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999741174550606	WITHOUT_CLASSIFICATION	2.5882544939385253E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999424224823149	WITHOUT_CLASSIFICATION	5.757751768503902E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999424224823149	WITHOUT_CLASSIFICATION	5.757751768503902E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9928157125974543	WITHOUT_CLASSIFICATION	0.007184287402545692	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999921914650421	WITHOUT_CLASSIFICATION	7.808534957841727E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999962429741519	WITHOUT_CLASSIFICATION	3.757025848018964E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999938019717184	WITHOUT_CLASSIFICATION	6.198028281623331E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999963882273255	WITHOUT_CLASSIFICATION	3.6117726744225844E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999930593203359	WITHOUT_CLASSIFICATION	6.9406796640721336E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995458112468	WITHOUT_CLASSIFICATION	4.541887531721621E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999929551605317	WITHOUT_CLASSIFICATION	7.044839468346798E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999929551605317	WITHOUT_CLASSIFICATION	7.044839468346798E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999917830524627	WITHOUT_CLASSIFICATION	8.216947537341772E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999917830524627	WITHOUT_CLASSIFICATION	8.216947537341772E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989606086513313	WITHOUT_CLASSIFICATION	0.0010393913486686868	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989606086513313	WITHOUT_CLASSIFICATION	0.0010393913486686868	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999255744425504	WITHOUT_CLASSIFICATION	7.44255574496587E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999255744425504	WITHOUT_CLASSIFICATION	7.44255574496587E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999424224823149	WITHOUT_CLASSIFICATION	5.757751768503902E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995458112468	WITHOUT_CLASSIFICATION	4.541887531721621E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999929551605317	WITHOUT_CLASSIFICATION	7.044839468346798E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999929551605317	WITHOUT_CLASSIFICATION	7.044839468346798E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999917830524627	WITHOUT_CLASSIFICATION	8.216947537341772E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989606086513313	WITHOUT_CLASSIFICATION	0.0010393913486686868	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9989606086513313	WITHOUT_CLASSIFICATION	0.0010393913486686868	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999255744425504	WITHOUT_CLASSIFICATION	7.44255574496587E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998821032222027	WITHOUT_CLASSIFICATION	1.1789677779717298E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9991506471141691	WITHOUT_CLASSIFICATION	8.493528858309076E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9990871819246641	WITHOUT_CLASSIFICATION	9.128180753360758E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9994310819718135	WITHOUT_CLASSIFICATION	5.689180281865024E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997973398950812	WITHOUT_CLASSIFICATION	2.0266010491863388E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999928827713958	WITHOUT_CLASSIFICATION	7.117228604254884E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999977907116263	WITHOUT_CLASSIFICATION	2.209288373699488E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999671183582474	WITHOUT_CLASSIFICATION	3.2881641752669526E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999501882978602	WITHOUT_CLASSIFICATION	4.9811702139698496E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9993739003777311	WITHOUT_CLASSIFICATION	6.260996222689114E-4	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999128322671205	WITHOUT_CLASSIFICATION	8.716773287964552E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999764983393353	WITHOUT_CLASSIFICATION	2.3501660664722742E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9984892602978809	WITHOUT_CLASSIFICATION	0.0015107397021191828	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999928827713958	WITHOUT_CLASSIFICATION	7.117228604254884E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999962369572071	WITHOUT_CLASSIFICATION	3.7630427930698132E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999220365544251	WITHOUT_CLASSIFICATION	7.796344557484651E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999220365544251	WITHOUT_CLASSIFICATION	7.796344557484651E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9987179794175097	WITHOUT_CLASSIFICATION	0.0012820205824902572	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995640850172	WITHOUT_CLASSIFICATION	4.3591498281005277E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998967662448688	WITHOUT_CLASSIFICATION	1.0323375513110931E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998097748810848	WITHOUT_CLASSIFICATION	1.9022511891522427E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998097748810848	WITHOUT_CLASSIFICATION	1.9022511891522427E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988932135091	WITHOUT_CLASSIFICATION	1.1067864908753919E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999522654533874	WITHOUT_CLASSIFICATION	4.773454661248084E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999522654533874	WITHOUT_CLASSIFICATION	4.773454661248084E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9995315255193606	WITHOUT_CLASSIFICATION	4.684744806393577E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999957956122975	WITHOUT_CLASSIFICATION	4.204387702575351E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999969855795992	WITHOUT_CLASSIFICATION	3.0144204008021396E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999933498747585	WITHOUT_CLASSIFICATION	6.650125241510536E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999929432187403	WITHOUT_CLASSIFICATION	7.056781259771733E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8159234221247396	WITHOUT_CLASSIFICATION	0.18407657787526038	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999874955137235	WITHOUT_CLASSIFICATION	1.2504486276461507E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999870363001965	WITHOUT_CLASSIFICATION	1.296369980356839E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999531501918837	WITHOUT_CLASSIFICATION	4.684980811639537E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999804798241193	WITHOUT_CLASSIFICATION	1.9520175880669752E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999997245352121	WITHOUT_CLASSIFICATION	2.754647878110996E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999422391124957	WITHOUT_CLASSIFICATION	5.77608875042386E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999822902283757	WITHOUT_CLASSIFICATION	1.7709771624211686E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997553323451946	WITHOUT_CLASSIFICATION	2.446676548053408E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999929354662336	WITHOUT_CLASSIFICATION	7.064533766444573E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997441400641282	WITHOUT_CLASSIFICATION	2.55859935871884E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999479822945062	WITHOUT_CLASSIFICATION	5.20177054938095E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998282068279463	WITHOUT_CLASSIFICATION	1.7179317205372687E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999969855795992	WITHOUT_CLASSIFICATION	3.0144204008021396E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9995260356932547	WITHOUT_CLASSIFICATION	4.7396430674535416E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999037247233251	WITHOUT_CLASSIFICATION	9.627527667498214E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999932668151285	WITHOUT_CLASSIFICATION	6.733184871601147E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999929432187403	WITHOUT_CLASSIFICATION	7.056781259771733E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998282068279463	WITHOUT_CLASSIFICATION	1.7179317205372687E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9995260356932547	WITHOUT_CLASSIFICATION	4.7396430674535416E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999932668151285	WITHOUT_CLASSIFICATION	6.733184871601147E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999121534930204	WITHOUT_CLASSIFICATION	8.784650697959563E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999121534930204	WITHOUT_CLASSIFICATION	8.784650697959563E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997449215104042	WITHOUT_CLASSIFICATION	2.5507848959582466E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.999439001109724	WITHOUT_CLASSIFICATION	5.609988902760134E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9985059234594771	WITHOUT_CLASSIFICATION	0.001494076540522916	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999994341663627	WITHOUT_CLASSIFICATION	5.658336373765318E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999612664899274	WITHOUT_CLASSIFICATION	3.873351007249808E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9984325668096943	WITHOUT_CLASSIFICATION	0.001567433190305773	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999840285565612	WITHOUT_CLASSIFICATION	1.5971443438857188E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9989439227882924	WITHOUT_CLASSIFICATION	0.0010560772117076047	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9993157740912886	WITHOUT_CLASSIFICATION	6.842259087114591E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999840285565612	WITHOUT_CLASSIFICATION	1.5971443438857188E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999935495073379	WITHOUT_CLASSIFICATION	6.45049266205149E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9981111983502027	WITHOUT_CLASSIFICATION	0.0018888016497972313	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999929202672332	WITHOUT_CLASSIFICATION	7.079732766853486E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998282068279463	WITHOUT_CLASSIFICATION	1.7179317205372687E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999933544062744	WITHOUT_CLASSIFICATION	6.645593725598296E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999737660814657	WITHOUT_CLASSIFICATION	2.6233918534328E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9960660906753042	WITHOUT_CLASSIFICATION	0.00393390932469583	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999246467295796	WITHOUT_CLASSIFICATION	7.535327042039375E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999455646059341	WITHOUT_CLASSIFICATION	5.443539406602807E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999994865411765	WITHOUT_CLASSIFICATION	5.134588234842233E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999781669714886	WITHOUT_CLASSIFICATION	2.183302851151704E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9979952694363957	WITHOUT_CLASSIFICATION	0.0020047305636042533	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997726723410787	WITHOUT_CLASSIFICATION	2.2732765892116813E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995502970485467	WITHOUT_CLASSIFICATION	4.4970295145333155E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998116230771201	WITHOUT_CLASSIFICATION	1.8837692287988243E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999422391124957	WITHOUT_CLASSIFICATION	5.77608875042386E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999416000333635	WITHOUT_CLASSIFICATION	5.839996663647649E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999496055492297	WITHOUT_CLASSIFICATION	5.0394450770310644E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9994657006632195	WITHOUT_CLASSIFICATION	5.34299336780516E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998276919328714	WITHOUT_CLASSIFICATION	1.7230806712862723E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998700193810195	WITHOUT_CLASSIFICATION	1.2998061898058E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999962378307849	WITHOUT_CLASSIFICATION	3.762169215104605E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999632731387	WITHOUT_CLASSIFICATION	3.6726861355536085E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999817166472363	WITHOUT_CLASSIFICATION	1.8283352763587785E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9935791053220163	WITHOUT_CLASSIFICATION	0.006420894677983705	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997731216369918	WITHOUT_CLASSIFICATION	2.2687836300810995E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9824171350148944	WITHOUT_CLASSIFICATION	0.01758286498510568	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9824171350148944	WITHOUT_CLASSIFICATION	0.01758286498510568	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997819479565803	WITHOUT_CLASSIFICATION	2.1805204341988747E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999967314609469	WITHOUT_CLASSIFICATION	3.268539053108654E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999823947982017	WITHOUT_CLASSIFICATION	1.7605201798288745E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999487198198291	WITHOUT_CLASSIFICATION	5.1280180170953966E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996664280603185	WITHOUT_CLASSIFICATION	3.335719396814946E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9990967078866281	WITHOUT_CLASSIFICATION	9.0329211337186E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999886837766148	WITHOUT_CLASSIFICATION	1.1316223385350514E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.997778005417796	WITHOUT_CLASSIFICATION	0.0022219945822039362	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999502510841045	WITHOUT_CLASSIFICATION	4.974891589550384E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996773747891124	WITHOUT_CLASSIFICATION	3.226252108876314E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999209836753259	WITHOUT_CLASSIFICATION	7.901632467413334E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9997795980302154	WITHOUT_CLASSIFICATION	2.2040196978457264E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9962606612467179	WITHOUT_CLASSIFICATION	0.0037393387532821134	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999688405199015	WITHOUT_CLASSIFICATION	3.115948009849311E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995190620013972	WITHOUT_CLASSIFICATION	4.8093799860290736E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999925748076599	WITHOUT_CLASSIFICATION	7.42519234012426E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998841319953	WITHOUT_CLASSIFICATION	1.158680048319781E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999437283858306	WITHOUT_CLASSIFICATION	5.6271614169519967E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999839081485953	WITHOUT_CLASSIFICATION	1.6091851404791472E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999941169339993	WITHOUT_CLASSIFICATION	5.8830660007142656E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999941169339993	WITHOUT_CLASSIFICATION	5.8830660007142656E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9984612021284593	WITHOUT_CLASSIFICATION	0.0015387978715407557	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9984612021284593	WITHOUT_CLASSIFICATION	0.0015387978715407557	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9935791053220163	WITHOUT_CLASSIFICATION	0.006420894677983705	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9988575178344092	WITHOUT_CLASSIFICATION	0.0011424821655908323	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.997019317843372	WITHOUT_CLASSIFICATION	0.0029806821566279607	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994519763926237	WITHOUT_CLASSIFICATION	5.480236073763989E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.997019317843372	WITHOUT_CLASSIFICATION	0.0029806821566279607	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994519763926237	WITHOUT_CLASSIFICATION	5.480236073763989E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997233509837178	WITHOUT_CLASSIFICATION	2.7664901628224277E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999926553069807	WITHOUT_CLASSIFICATION	7.344693019388073E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999579713511031	WITHOUT_CLASSIFICATION	4.202864889683424E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999994766127903	WITHOUT_CLASSIFICATION	5.233872096226486E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9951177917128101	WITHOUT_CLASSIFICATION	0.004882208287189855	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9994526720900637	WITHOUT_CLASSIFICATION	5.473279099363295E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9995550281765668	WITHOUT_CLASSIFICATION	4.4497182343321577E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9992880499694796	WITHOUT_CLASSIFICATION	7.119500305203113E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999803841084356	WITHOUT_CLASSIFICATION	1.9615891564437936E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999989294921608	WITHOUT_CLASSIFICATION	1.07050783917858E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998670265924868	WITHOUT_CLASSIFICATION	1.329734075132413E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997674860277	WITHOUT_CLASSIFICATION	2.3251397219985337E-7	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999995365134597	WITHOUT_CLASSIFICATION	4.634865402999024E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998166131900613	WITHOUT_CLASSIFICATION	1.8338680993871086E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998166131900613	WITHOUT_CLASSIFICATION	1.8338680993871086E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999433547420402	WITHOUT_CLASSIFICATION	5.664525795990243E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999433547420402	WITHOUT_CLASSIFICATION	5.664525795990243E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999925733716568	WITHOUT_CLASSIFICATION	7.426628343142267E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997233509837178	WITHOUT_CLASSIFICATION	2.7664901628224277E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9975968182417545	WITHOUT_CLASSIFICATION	0.0024031817582455366	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999841468167312	WITHOUT_CLASSIFICATION	1.5853183268791116E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9940675876319138	WITHOUT_CLASSIFICATION	0.005932412368086124	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999910066089564	WITHOUT_CLASSIFICATION	8.993391043605555E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986596858375374	WITHOUT_CLASSIFICATION	0.0013403141624626195	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997233509837178	WITHOUT_CLASSIFICATION	2.7664901628224277E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999910066089564	WITHOUT_CLASSIFICATION	8.993391043605555E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986596858375374	WITHOUT_CLASSIFICATION	0.0013403141624626195	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9996856838289503	WITHOUT_CLASSIFICATION	3.1431617104965353E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997479886802328	WITHOUT_CLASSIFICATION	2.520113197671743E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998648385591786	WITHOUT_CLASSIFICATION	1.351614408213265E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997233509837178	WITHOUT_CLASSIFICATION	2.7664901628224277E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997233509837178	WITHOUT_CLASSIFICATION	2.7664901628224277E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999643154595943	WITHOUT_CLASSIFICATION	3.568454040570735E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999606487771042	WITHOUT_CLASSIFICATION	3.935122289583913E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999853289192117	WITHOUT_CLASSIFICATION	1.4671080788298505E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999968801413541	WITHOUT_CLASSIFICATION	3.119858645798747E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998347692832724	WITHOUT_CLASSIFICATION	1.652307167276179E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999975825676428	WITHOUT_CLASSIFICATION	2.4174323572325473E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9995337621047895	WITHOUT_CLASSIFICATION	4.66237895210531E-4	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999782780395645	WITHOUT_CLASSIFICATION	2.1721960435461387E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999791608419254	WITHOUT_CLASSIFICATION	2.0839158074622292E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9997989997340696	WITHOUT_CLASSIFICATION	2.010002659304081E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9981972859677921	WITHOUT_CLASSIFICATION	0.0018027140322078924	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9988736957262072	WITHOUT_CLASSIFICATION	0.001126304273792816	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999986729205228	WITHOUT_CLASSIFICATION	1.3270794772393029E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999628140176218	WITHOUT_CLASSIFICATION	3.718598237819624E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680898310478	WITHOUT_CLASSIFICATION	1.3191016895220135E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999983460160761	WITHOUT_CLASSIFICATION	1.6539839239665215E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998975419059114	WITHOUT_CLASSIFICATION	1.024580940886847E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998527482573707	WITHOUT_CLASSIFICATION	1.4725174262934063E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9994042949671671	WITHOUT_CLASSIFICATION	5.957050328328871E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9994519763926237	WITHOUT_CLASSIFICATION	5.480236073763989E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9980596290224342	WITHOUT_CLASSIFICATION	0.0019403709775658912	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998975419059114	WITHOUT_CLASSIFICATION	1.024580940886847E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9990156121294939	WITHOUT_CLASSIFICATION	9.843878705061593E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999914367642545	WITHOUT_CLASSIFICATION	8.563235745607437E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9828544258947883	WITHOUT_CLASSIFICATION	0.017145574105211656	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998365348044025	WITHOUT_CLASSIFICATION	1.6346519559760767E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985386558751691	WITHOUT_CLASSIFICATION	0.0014613441248308595	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999657687259497	WITHOUT_CLASSIFICATION	3.423127405045258E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999151178001134	WITHOUT_CLASSIFICATION	8.488219988657058E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998881167887307	WITHOUT_CLASSIFICATION	1.1188321126926448E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999831971047702	WITHOUT_CLASSIFICATION	1.680289522978027E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999903466204135	WITHOUT_CLASSIFICATION	9.65337958644026E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999789146876785	WITHOUT_CLASSIFICATION	2.1085312321435298E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999452260394889	WITHOUT_CLASSIFICATION	5.477396051104751E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998986457759285	WITHOUT_CLASSIFICATION	1.013542240715619E-4	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863249335602	WITHOUT_CLASSIFICATION	1.3675066439703608E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997054381049921	WITHOUT_CLASSIFICATION	2.945618950078097E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9959071773247808	WITHOUT_CLASSIFICATION	0.004092822675219133	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9987602078713671	WITHOUT_CLASSIFICATION	0.0012397921286328422	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999221651810251	WITHOUT_CLASSIFICATION	7.78348189750063E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999997537691769	WITHOUT_CLASSIFICATION	2.462308230927469E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9975829437157928	WITHOUT_CLASSIFICATION	0.0024170562842072358	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999962365012061	WITHOUT_CLASSIFICATION	3.7634987938977424E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979021218961244	WITHOUT_CLASSIFICATION	0.00209787810387552	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987244652094116	WITHOUT_CLASSIFICATION	0.0012755347905884366	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987953012793437	WITHOUT_CLASSIFICATION	0.0012046987206562683	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489345019055	WITHOUT_CLASSIFICATION	5.1065498094527985E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984395169667092	WITHOUT_CLASSIFICATION	0.0015604830332908287	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998619665227615	WITHOUT_CLASSIFICATION	1.3803347723850024E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999319503036272	WITHOUT_CLASSIFICATION	6.804969637279088E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999026177258617	WITHOUT_CLASSIFICATION	9.738227413830547E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991200428313667	WITHOUT_CLASSIFICATION	8.799571686333154E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979436862917581	WITHOUT_CLASSIFICATION	0.0020563137082418304	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959510623388124	WITHOUT_CLASSIFICATION	0.004048937661187583	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998374703172425	WITHOUT_CLASSIFICATION	0.0016252968275749927	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982068076905521	WITHOUT_CLASSIFICATION	0.0017931923094478422	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999983726783781	WITHOUT_CLASSIFICATION	1.6273216218950518E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999233265508172	WITHOUT_CLASSIFICATION	7.66734491828039E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.6825510481722502	IMPLEMENTATION	0.3174489518277498	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999933713905731	WITHOUT_CLASSIFICATION	6.628609426855688E-6	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999979545992992	WITHOUT_CLASSIFICATION	2.045400700802766E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993106808356469	WITHOUT_CLASSIFICATION	6.893191643530616E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9984735283518338	WITHOUT_CLASSIFICATION	0.0015264716481661847	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997901195411567	WITHOUT_CLASSIFICATION	2.0988045884334772E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9996856838289503	WITHOUT_CLASSIFICATION	3.1431617104965353E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999746166306992	WITHOUT_CLASSIFICATION	2.538336930080561E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997543270287846	WITHOUT_CLASSIFICATION	2.456729712152685E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999949677133808	WITHOUT_CLASSIFICATION	5.032286619194763E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999638757170295	WITHOUT_CLASSIFICATION	3.612428297046702E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997454357272678	WITHOUT_CLASSIFICATION	2.545642727322364E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999959611086989	WITHOUT_CLASSIFICATION	4.038891301101462E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9984952800385906	WITHOUT_CLASSIFICATION	0.0015047199614094827	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999120008061053	WITHOUT_CLASSIFICATION	8.799919389461692E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997351263262276	WITHOUT_CLASSIFICATION	2.6487367377239925E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225540230725	WITHOUT_CLASSIFICATION	7.744597692739577E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549515086001	WITHOUT_CLASSIFICATION	4.5048491399834574E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999926613373667	WITHOUT_CLASSIFICATION	7.338662633303914E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999241698214762	WITHOUT_CLASSIFICATION	7.583017852381065E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9996703506803227	WITHOUT_CLASSIFICATION	3.2964931967717503E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999926668623091	WITHOUT_CLASSIFICATION	7.333137690894175E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999599652288564	WITHOUT_CLASSIFICATION	4.003477114349324E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998878872229082	WITHOUT_CLASSIFICATION	1.1211277709177653E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998001645142506	WITHOUT_CLASSIFICATION	1.9983548574948796E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999372582762858	WITHOUT_CLASSIFICATION	6.274172371426013E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999775230729698	WITHOUT_CLASSIFICATION	2.2476927030204018E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999755150004234	WITHOUT_CLASSIFICATION	2.4484999576567735E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999539681774177	WITHOUT_CLASSIFICATION	4.6031822582392575E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999177857962611	WITHOUT_CLASSIFICATION	8.221420373892545E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9987645767842127	WITHOUT_CLASSIFICATION	0.0012354232157873225	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999988838233265	WITHOUT_CLASSIFICATION	1.116176673455809E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999042882153775	WITHOUT_CLASSIFICATION	9.571178462255789E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993106808356469	WITHOUT_CLASSIFICATION	6.893191643530616E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9993009137094306	WITHOUT_CLASSIFICATION	6.990862905693384E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999959188311379	WITHOUT_CLASSIFICATION	4.08116886212234E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998473512453238	WITHOUT_CLASSIFICATION	1.5264875467634252E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999933713905731	WITHOUT_CLASSIFICATION	6.628609426855688E-6	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999222359532481	WITHOUT_CLASSIFICATION	7.776404675190264E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999662276923181	WITHOUT_CLASSIFICATION	3.377230768187944E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999478443908886	WITHOUT_CLASSIFICATION	5.215560911142539E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999976916213628	WITHOUT_CLASSIFICATION	2.3083786371395513E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998120398928358	WITHOUT_CLASSIFICATION	1.8796010716411155E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999714942755182	WITHOUT_CLASSIFICATION	2.8505724481821268E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998319447520811	WITHOUT_CLASSIFICATION	1.6805524791890908E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999350569965719	WITHOUT_CLASSIFICATION	6.49430034280632E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999245586455542	WITHOUT_CLASSIFICATION	7.544135444581329E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999244474442663	WITHOUT_CLASSIFICATION	7.555255573370381E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998778146316	WITHOUT_CLASSIFICATION	1.221853684289485E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999993668434032	WITHOUT_CLASSIFICATION	6.331565967948119E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9996856838289503	WITHOUT_CLASSIFICATION	3.1431617104965353E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999933351426097	WITHOUT_CLASSIFICATION	6.6648573902153625E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999602869701586	WITHOUT_CLASSIFICATION	3.971302984144549E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999965971317087	WITHOUT_CLASSIFICATION	3.402868291294306E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999854358976498	WITHOUT_CLASSIFICATION	1.4564102350272512E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998992226576408	WITHOUT_CLASSIFICATION	1.0077734235927365E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998292219299789	WITHOUT_CLASSIFICATION	1.7077807002107445E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999587789099698	WITHOUT_CLASSIFICATION	4.1221090030287645E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999840316876335	WITHOUT_CLASSIFICATION	1.5968312366505835E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999908309940202	WITHOUT_CLASSIFICATION	9.169005979762062E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993424802953262	WITHOUT_CLASSIFICATION	6.575197046738525E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9985772319800565	WITHOUT_CLASSIFICATION	0.0014227680199433612	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996883511927148	WITHOUT_CLASSIFICATION	3.116488072851761E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999933713905731	WITHOUT_CLASSIFICATION	6.628609426855688E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993106808356469	WITHOUT_CLASSIFICATION	6.893191643530616E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998251897733997	WITHOUT_CLASSIFICATION	1.7481022660034628E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9994305635402144	WITHOUT_CLASSIFICATION	5.694364597855455E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9954953672501186	WITHOUT_CLASSIFICATION	0.004504632749881388	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993106808356469	WITHOUT_CLASSIFICATION	6.893191643530616E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999858107574401	WITHOUT_CLASSIFICATION	1.4189242559855747E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999854358976498	WITHOUT_CLASSIFICATION	1.4564102350272512E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9995939121486604	WITHOUT_CLASSIFICATION	4.06087851339617E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999918315140173	WITHOUT_CLASSIFICATION	8.168485982702727E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999942477289735	WITHOUT_CLASSIFICATION	5.752271026525622E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999714942755182	WITHOUT_CLASSIFICATION	2.8505724481821268E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998319447520811	WITHOUT_CLASSIFICATION	1.6805524791890908E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999350569965719	WITHOUT_CLASSIFICATION	6.49430034280632E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999705402493043	WITHOUT_CLASSIFICATION	2.945975069558205E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999181455603298	WITHOUT_CLASSIFICATION	8.185443967019605E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998213202548859	WITHOUT_CLASSIFICATION	1.7867974511411987E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999953533621014	WITHOUT_CLASSIFICATION	4.646637898604298E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999227153220028	WITHOUT_CLASSIFICATION	7.728467799721547E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993106808356469	WITHOUT_CLASSIFICATION	6.893191643530616E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999245586455542	WITHOUT_CLASSIFICATION	7.544135444581329E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999244474442663	WITHOUT_CLASSIFICATION	7.555255573370381E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640861119405	WITHOUT_CLASSIFICATION	3.591388805948806E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630573620843	WITHOUT_CLASSIFICATION	1.369426379158452E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999195432712593	WITHOUT_CLASSIFICATION	8.045672874060934E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999920956400321	WITHOUT_CLASSIFICATION	7.904359967932328E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9987075200058062	WITHOUT_CLASSIFICATION	0.0012924799941937421	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999972558767809	WITHOUT_CLASSIFICATION	2.744123219057244E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999107097262773	WITHOUT_CLASSIFICATION	8.929027372272945E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999642050879474	WITHOUT_CLASSIFICATION	3.579491205260807E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999748751097288	WITHOUT_CLASSIFICATION	2.512489027121577E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984395169667092	WITHOUT_CLASSIFICATION	0.0015604830332908287	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991200428313667	WITHOUT_CLASSIFICATION	8.799571686333154E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999822123756367	WITHOUT_CLASSIFICATION	1.7787624363381357E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999652889859074	WITHOUT_CLASSIFICATION	3.4711014092676746E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985413696025366	WITHOUT_CLASSIFICATION	0.0014586303974634142	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9964436987434137	WITHOUT_CLASSIFICATION	0.0035563012565863112	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979436862917581	WITHOUT_CLASSIFICATION	0.0020563137082418304	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983726430178571	WITHOUT_CLASSIFICATION	0.00162735698214289	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999539681774177	WITHOUT_CLASSIFICATION	4.6031822582392575E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999393662931906	WITHOUT_CLASSIFICATION	6.063370680929915E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999833529273722	WITHOUT_CLASSIFICATION	1.6647072627834077E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999798838865107	WITHOUT_CLASSIFICATION	2.0116113489339073E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999816341546424	WITHOUT_CLASSIFICATION	1.8365845357621602E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999996269574004	WITHOUT_CLASSIFICATION	3.7304259959681557E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9994715295321306	WITHOUT_CLASSIFICATION	5.284704678693273E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999634290239123	WITHOUT_CLASSIFICATION	3.6570976087560364E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998881167887307	WITHOUT_CLASSIFICATION	1.1188321126926448E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9994746777097265	WITHOUT_CLASSIFICATION	5.253222902735672E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996564791073824	WITHOUT_CLASSIFICATION	3.43520892617484E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999724813242241	WITHOUT_CLASSIFICATION	2.7518675775852E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999787708598651	WITHOUT_CLASSIFICATION	2.122914013483155E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999854715959	WITHOUT_CLASSIFICATION	1.4528404100082939E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9989836627983089	WITHOUT_CLASSIFICATION	0.0010163372016911982	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999167102632288	WITHOUT_CLASSIFICATION	8.328973677122015E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998941722741731	WITHOUT_CLASSIFICATION	1.0582772582691292E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999867370248026	WITHOUT_CLASSIFICATION	1.3262975197395128E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996584661279516	WITHOUT_CLASSIFICATION	3.415338720483644E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999713373614638	WITHOUT_CLASSIFICATION	2.8662638536262562E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999653483406442	WITHOUT_CLASSIFICATION	3.465165935576055E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998840956956624	WITHOUT_CLASSIFICATION	1.1590430433755912E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999757122659467	WITHOUT_CLASSIFICATION	2.4287734053327084E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997149014570733	WITHOUT_CLASSIFICATION	2.8509854292662376E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999025848316688	WITHOUT_CLASSIFICATION	9.741516833125901E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998840956956624	WITHOUT_CLASSIFICATION	1.1590430433755912E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999878101440661	WITHOUT_CLASSIFICATION	1.2189855933903762E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999889292101173	WITHOUT_CLASSIFICATION	1.1070789882726533E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204335254135	WITHOUT_CLASSIFICATION	7.956647458648257E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999702669852264	WITHOUT_CLASSIFICATION	2.973301477351923E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999485605592928	WITHOUT_CLASSIFICATION	5.143944070710631E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999588538773104	WITHOUT_CLASSIFICATION	4.1146122689556664E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998740591072557	WITHOUT_CLASSIFICATION	1.2594089274440182E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998985018718372	WITHOUT_CLASSIFICATION	1.01498128162827E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998985018718372	WITHOUT_CLASSIFICATION	1.01498128162827E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999831274357958	WITHOUT_CLASSIFICATION	1.6872564204174364E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999579372795647	WITHOUT_CLASSIFICATION	4.20627204353539E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999072347195669	WITHOUT_CLASSIFICATION	9.276528043312243E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999727980854968	WITHOUT_CLASSIFICATION	2.7201914503211E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999402265991	WITHOUT_CLASSIFICATION	5.97734008952616E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997623532657566	WITHOUT_CLASSIFICATION	2.3764673424333656E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999991483091352	WITHOUT_CLASSIFICATION	8.516908647952722E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999885464172191	WITHOUT_CLASSIFICATION	1.1453582780909436E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999798552640197	WITHOUT_CLASSIFICATION	2.0144735980344362E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999879132635198	WITHOUT_CLASSIFICATION	1.208673648027893E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997896136563659	WITHOUT_CLASSIFICATION	2.1038634363411413E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999917978554755	WITHOUT_CLASSIFICATION	8.202144524364881E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998681212175066	WITHOUT_CLASSIFICATION	1.3187878249342546E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.6694139570876072	WITHOUT_CLASSIFICATION	0.3305860429123928	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9988956162469369	WITHOUT_CLASSIFICATION	0.0011043837530630238	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999595732971625	WITHOUT_CLASSIFICATION	4.042670283752421E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999291729241622	WITHOUT_CLASSIFICATION	7.082707583778351E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9964288145556143	WITHOUT_CLASSIFICATION	0.0035711854443857757	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9993911693979266	WITHOUT_CLASSIFICATION	6.088306020734555E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999642606272313	WITHOUT_CLASSIFICATION	3.573937276869076E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999882855287593	WITHOUT_CLASSIFICATION	1.171447124075676E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999647525280485	WITHOUT_CLASSIFICATION	3.524747195147602E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9996598455117036	WITHOUT_CLASSIFICATION	3.401544882962851E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999957091425092	WITHOUT_CLASSIFICATION	4.290857490809604E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999746284536232	WITHOUT_CLASSIFICATION	2.53715463769378E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997618588192877	WITHOUT_CLASSIFICATION	2.3814118071224322E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9960339851702549	WITHOUT_CLASSIFICATION	0.0039660148297450725	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9990560877643015	WITHOUT_CLASSIFICATION	9.439122356984444E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9919841703330081	WITHOUT_CLASSIFICATION	0.008015829666991858	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9994458268802919	WITHOUT_CLASSIFICATION	5.541731197079978E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999784607328925	WITHOUT_CLASSIFICATION	2.1539267107535764E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9995805031513354	WITHOUT_CLASSIFICATION	4.1949684866458874E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998888871525048	WITHOUT_CLASSIFICATION	1.1111284749519088E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999225260914404	WITHOUT_CLASSIFICATION	7.747390855957951E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998346325233843	WITHOUT_CLASSIFICATION	1.653674766156879E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.999803054093781	WITHOUT_CLASSIFICATION	1.969459062189225E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999402180071126	WITHOUT_CLASSIFICATION	5.978199288735375E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9979068428121912	WITHOUT_CLASSIFICATION	0.002093157187808745	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999408475681583	WITHOUT_CLASSIFICATION	5.915243184172079E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999707773105406	WITHOUT_CLASSIFICATION	2.922268945932485E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9996268968459184	WITHOUT_CLASSIFICATION	3.7310315408157937E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9996856838289503	WITHOUT_CLASSIFICATION	3.1431617104965353E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9996856838289503	WITHOUT_CLASSIFICATION	3.1431617104965353E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999417283852735	WITHOUT_CLASSIFICATION	5.827161472656919E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999982131620613	WITHOUT_CLASSIFICATION	1.7868379387290234E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999859206673767	WITHOUT_CLASSIFICATION	1.4079332623313665E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999979682373702	WITHOUT_CLASSIFICATION	2.031762629834683E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999882204557483	WITHOUT_CLASSIFICATION	1.1779544251694924E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999730997493256	WITHOUT_CLASSIFICATION	2.6900250674445855E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9996022702401081	WITHOUT_CLASSIFICATION	3.977297598920136E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9992973278571082	WITHOUT_CLASSIFICATION	7.026721428917635E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999832579753637	WITHOUT_CLASSIFICATION	1.6742024636292314E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9997809921421873	WITHOUT_CLASSIFICATION	2.1900785781263604E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997568999086005	WITHOUT_CLASSIFICATION	2.4310009139945154E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999982905623964	WITHOUT_CLASSIFICATION	1.7094376035276577E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995521698175698	WITHOUT_CLASSIFICATION	4.4783018243024216E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998363940888496	WITHOUT_CLASSIFICATION	1.6360591115032716E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9990217748084667	WITHOUT_CLASSIFICATION	9.78225191533275E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9992155388489082	WITHOUT_CLASSIFICATION	7.844611510918704E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9997905431042434	WITHOUT_CLASSIFICATION	2.094568957566041E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998401097608114	WITHOUT_CLASSIFICATION	1.5989023918860178E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9998156532932361	WITHOUT_CLASSIFICATION	1.8434670676387545E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999992652928669	WITHOUT_CLASSIFICATION	7.347071331206813E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998401097608114	WITHOUT_CLASSIFICATION	1.5989023918860178E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999867356534642	WITHOUT_CLASSIFICATION	1.326434653588415E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.999998075733663	WITHOUT_CLASSIFICATION	1.9242663370606354E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996471538592007	WITHOUT_CLASSIFICATION	3.5284614079940575E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9996385629763401	WITHOUT_CLASSIFICATION	3.6143702365985125E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9993348423311496	WITHOUT_CLASSIFICATION	6.651576688503343E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999975389243879	WITHOUT_CLASSIFICATION	2.461075612018128E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999946924969301	WITHOUT_CLASSIFICATION	5.307503069894627E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998843705220619	WITHOUT_CLASSIFICATION	1.1562947793797013E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999234301482962	WITHOUT_CLASSIFICATION	7.656985170376792E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996077211871	WITHOUT_CLASSIFICATION	3.9227881285569724E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999861031210556	WITHOUT_CLASSIFICATION	1.3896878944345785E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9990554016938639	WITHOUT_CLASSIFICATION	9.445983061361117E-4	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999198132185755	WITHOUT_CLASSIFICATION	8.018678142441525E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9970145394679395	WITHOUT_CLASSIFICATION	0.002985460532060471	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9996421503998189	WITHOUT_CLASSIFICATION	3.5784960018109366E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.996471148386686	WITHOUT_CLASSIFICATION	0.003528851613314001	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999323124155164	WITHOUT_CLASSIFICATION	6.768758448364396E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9955055588128738	WITHOUT_CLASSIFICATION	0.004494441187126262	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9997660968846925	WITHOUT_CLASSIFICATION	2.339031153074461E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999971823498111	WITHOUT_CLASSIFICATION	2.8176501888971788E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999794132659614	WITHOUT_CLASSIFICATION	2.0586734038640305E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.99576965000716	WITHOUT_CLASSIFICATION	0.004230349992839953	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.8954271588875332	WITHOUT_CLASSIFICATION	0.1045728411124668	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999915629268891	WITHOUT_CLASSIFICATION	8.437073110905343E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9986319724366355	WITHOUT_CLASSIFICATION	0.001368027563364529	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9978960212839929	WITHOUT_CLASSIFICATION	0.0021039787160070746	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998776067151698	WITHOUT_CLASSIFICATION	1.2239328483028706E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9989836627983089	WITHOUT_CLASSIFICATION	0.0010163372016911982	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999465654097021	WITHOUT_CLASSIFICATION	5.343459029789825E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999984606690366	WITHOUT_CLASSIFICATION	1.5393309633809666E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9250369097156182	WITHOUT_CLASSIFICATION	0.07496309028438174	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.99990579725611	WITHOUT_CLASSIFICATION	9.420274389007237E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999968667307862	WITHOUT_CLASSIFICATION	3.1332692137019012E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9985332657895056	WITHOUT_CLASSIFICATION	0.0014667342104942532	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9792169357739948	WITHOUT_CLASSIFICATION	0.02078306422600525	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999918017003565	WITHOUT_CLASSIFICATION	8.198299643497267E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999477638376082	WITHOUT_CLASSIFICATION	5.223616239177847E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999947999143465	WITHOUT_CLASSIFICATION	5.200085653507987E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999924469272066	WITHOUT_CLASSIFICATION	7.55307279332472E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.99988793414108	WITHOUT_CLASSIFICATION	1.1206585892000206E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9989530396175114	WITHOUT_CLASSIFICATION	0.0010469603824885963	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9987369965233226	WITHOUT_CLASSIFICATION	0.001263003476677291	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999117236351885	WITHOUT_CLASSIFICATION	8.827636481147681E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997212355798448	WITHOUT_CLASSIFICATION	2.787644201551677E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999887848976393	WITHOUT_CLASSIFICATION	1.121510236074815E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9996177402916144	WITHOUT_CLASSIFICATION	3.8225970838550263E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999930005168027	WITHOUT_CLASSIFICATION	6.999483197304137E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999891566154497	WITHOUT_CLASSIFICATION	1.0843384550306843E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996439940143987	WITHOUT_CLASSIFICATION	3.5600598560118466E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.99993188767724	WITHOUT_CLASSIFICATION	6.81123227600748E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998325217771753	WITHOUT_CLASSIFICATION	1.674782228248145E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997361405307584	WITHOUT_CLASSIFICATION	2.638594692414766E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9994764920851515	WITHOUT_CLASSIFICATION	5.235079148483649E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998581927407523	WITHOUT_CLASSIFICATION	1.4180725924771816E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999971189098282	WITHOUT_CLASSIFICATION	2.881090171814453E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9988531399717386	WITHOUT_CLASSIFICATION	0.001146860028261343	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9979483895609972	WITHOUT_CLASSIFICATION	0.002051610439002816	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999213380178625	WITHOUT_CLASSIFICATION	7.866198213741888E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998572355016736	WITHOUT_CLASSIFICATION	1.4276449832633105E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999246591804486	WITHOUT_CLASSIFICATION	7.534081955144007E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999973780437093	WITHOUT_CLASSIFICATION	2.6219562906521172E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999593449546604	WITHOUT_CLASSIFICATION	4.065504533950022E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999958049459275	WITHOUT_CLASSIFICATION	4.195054072525192E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9869077644940442	WITHOUT_CLASSIFICATION	0.013092235505955806	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996966770192174	WITHOUT_CLASSIFICATION	3.033229807826026E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923266229847	WITHOUT_CLASSIFICATION	7.673377015306072E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996966770192174	WITHOUT_CLASSIFICATION	3.033229807826026E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999408027930624	WITHOUT_CLASSIFICATION	5.919720693759858E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999867061440586	WITHOUT_CLASSIFICATION	1.3293855941336248E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999818327782751	WITHOUT_CLASSIFICATION	1.8167221724851902E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999950460542567	WITHOUT_CLASSIFICATION	4.9539457432310136E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999932220971564	WITHOUT_CLASSIFICATION	6.777902843660548E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999756561497216	WITHOUT_CLASSIFICATION	2.4343850278287795E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999418265286929	WITHOUT_CLASSIFICATION	5.817347130705847E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999979189318546	WITHOUT_CLASSIFICATION	2.0810681453906974E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998359072832527	WITHOUT_CLASSIFICATION	1.640927167473488E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9281623828292895	WITHOUT_CLASSIFICATION	0.07183761717071045	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999591799242188	WITHOUT_CLASSIFICATION	4.082007578118964E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9991285440077489	WITHOUT_CLASSIFICATION	8.714559922511211E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998683395031172	WITHOUT_CLASSIFICATION	1.3166049688293117E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999958161447007	WITHOUT_CLASSIFICATION	4.183855299357007E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9506187426126138	WITHOUT_CLASSIFICATION	0.049381257387386114	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996971792097605	WITHOUT_CLASSIFICATION	3.0282079023943723E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999050830785061	WITHOUT_CLASSIFICATION	9.491692149379706E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999050830785061	WITHOUT_CLASSIFICATION	9.491692149379706E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997803745909704	WITHOUT_CLASSIFICATION	2.1962540902970254E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998772896053383	WITHOUT_CLASSIFICATION	1.2271039466164597E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999995265739853	WITHOUT_CLASSIFICATION	4.73426014732331E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999800695349684	WITHOUT_CLASSIFICATION	1.993046503161526E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999961644763249	WITHOUT_CLASSIFICATION	3.835523675117454E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999426823161	WITHOUT_CLASSIFICATION	5.731768389687184E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9979364611751469	WITHOUT_CLASSIFICATION	0.0020635388248530515	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999559422541455	WITHOUT_CLASSIFICATION	4.405774585455341E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999019334074064	WITHOUT_CLASSIFICATION	9.806659259369665E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999816214787518	WITHOUT_CLASSIFICATION	1.8378521248143802E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996843783335	WITHOUT_CLASSIFICATION	3.1562166654155843E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9995968888652704	WITHOUT_CLASSIFICATION	4.0311113472962865E-4	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998962510950901	WITHOUT_CLASSIFICATION	1.0374890490999031E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999998593179155	WITHOUT_CLASSIFICATION	1.4068208451113117E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998046847450314	WITHOUT_CLASSIFICATION	1.9531525496862255E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999812348066784	WITHOUT_CLASSIFICATION	1.876519332160842E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999882672246568	WITHOUT_CLASSIFICATION	1.1732775343215769E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9949462537390962	WITHOUT_CLASSIFICATION	0.005053746260903769	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9993485318523635	WITHOUT_CLASSIFICATION	6.5146814763655E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999952855574518	WITHOUT_CLASSIFICATION	4.71444254818084E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999935016398261	WITHOUT_CLASSIFICATION	6.49836017384383E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9993928557009285	WITHOUT_CLASSIFICATION	6.071442990714947E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9993072278356235	WITHOUT_CLASSIFICATION	6.927721643764835E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9916146174564308	WITHOUT_CLASSIFICATION	0.008385382543569141	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9998363032276273	WITHOUT_CLASSIFICATION	1.6369677237278608E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999992485996452	WITHOUT_CLASSIFICATION	7.514003548793311E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999233303434156	WITHOUT_CLASSIFICATION	7.666965658434482E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997109093359804	WITHOUT_CLASSIFICATION	2.8909066401958E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9987887232556321	WITHOUT_CLASSIFICATION	0.0012112767443679068	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999878316133419	WITHOUT_CLASSIFICATION	1.216838665800137E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999404633999893	WITHOUT_CLASSIFICATION	5.9536600010699654E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999973300622891	WITHOUT_CLASSIFICATION	2.66993771090607E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993250496595469	WITHOUT_CLASSIFICATION	6.749503404531548E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9832345805516771	WITHOUT_CLASSIFICATION	0.016765419448322896	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993516761018931	WITHOUT_CLASSIFICATION	6.483238981068073E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999911743925639	WITHOUT_CLASSIFICATION	8.825607436164574E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999448689955863	WITHOUT_CLASSIFICATION	5.5131004413577506E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999970889779698	WITHOUT_CLASSIFICATION	2.911022030213504E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999992453046264	WITHOUT_CLASSIFICATION	7.546953736097066E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9993033067553835	WITHOUT_CLASSIFICATION	6.966932446166591E-4	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999815400763944	WITHOUT_CLASSIFICATION	1.8459923605646127E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999282626139446	WITHOUT_CLASSIFICATION	7.173738605528628E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9984716758769252	WITHOUT_CLASSIFICATION	0.001528324123074888	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.5022215090000092	IMPLEMENTATION	0.4977784909999908	WITHOUT_CLASSIFICATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9942864072058917	WITHOUT_CLASSIFICATION	0.005713592794108342	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999024102150444	WITHOUT_CLASSIFICATION	9.758978495547764E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999554578825015	WITHOUT_CLASSIFICATION	4.4542117498427933E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996743876747	WITHOUT_CLASSIFICATION	3.2561232535436823E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998997156464416	WITHOUT_CLASSIFICATION	1.0028435355838642E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999832847406138	WITHOUT_CLASSIFICATION	1.6715259386107938E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999282626139446	WITHOUT_CLASSIFICATION	7.173738605528628E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999980978756558	WITHOUT_CLASSIFICATION	1.90212434419516E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997869696513106	WITHOUT_CLASSIFICATION	2.1303034868936892E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999678319998735	WITHOUT_CLASSIFICATION	3.2168000126496705E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9991407350605918	WITHOUT_CLASSIFICATION	8.592649394082418E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999858107574401	WITHOUT_CLASSIFICATION	1.4189242559855747E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999858107574401	WITHOUT_CLASSIFICATION	1.4189242559855747E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999987283461635	WITHOUT_CLASSIFICATION	1.2716538364708094E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999923729433584	WITHOUT_CLASSIFICATION	7.627056641517349E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999985241420551	WITHOUT_CLASSIFICATION	1.4758579447355876E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999605167098966	WITHOUT_CLASSIFICATION	3.9483290103394406E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996462016978783	WITHOUT_CLASSIFICATION	3.537983021216444E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999735003919281	WITHOUT_CLASSIFICATION	2.6499608071886956E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999354843539204	WITHOUT_CLASSIFICATION	6.451564607953255E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998593203636094	WITHOUT_CLASSIFICATION	1.4067963639069145E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997753718322171	WITHOUT_CLASSIFICATION	2.2462816778284964E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996142153406073	WITHOUT_CLASSIFICATION	3.8578465939263426E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999850182011822	WITHOUT_CLASSIFICATION	1.4981798817751312E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997636892470863	WITHOUT_CLASSIFICATION	2.3631075291359848E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999203532542544	WITHOUT_CLASSIFICATION	7.964674574565235E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999973629794231	WITHOUT_CLASSIFICATION	2.6370205768947623E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996257700643089	WITHOUT_CLASSIFICATION	3.742299356911177E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9979592950008505	WITHOUT_CLASSIFICATION	0.0020407049991496137	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999771158417068	WITHOUT_CLASSIFICATION	2.288415829324762E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996727368437623	WITHOUT_CLASSIFICATION	3.2726315623764186E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9997496247943718	WITHOUT_CLASSIFICATION	2.5037520562817367E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9995791793198958	WITHOUT_CLASSIFICATION	4.2082068010408316E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998773560949729	WITHOUT_CLASSIFICATION	1.226439050271418E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999860149914439	WITHOUT_CLASSIFICATION	1.3985008555988912E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9670903498557134	WITHOUT_CLASSIFICATION	0.032909650144286616	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9918248166753509	WITHOUT_CLASSIFICATION	0.008175183324649124	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9995360412199737	WITHOUT_CLASSIFICATION	4.639587800261588E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999518617513969	WITHOUT_CLASSIFICATION	4.8138248603012754E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999345376448	WITHOUT_CLASSIFICATION	6.546235520469268E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999998171680612	WITHOUT_CLASSIFICATION	1.8283193880064958E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999950320443433	WITHOUT_CLASSIFICATION	4.9679556567054164E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997280912851881	WITHOUT_CLASSIFICATION	2.719087148119514E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999981677916568	WITHOUT_CLASSIFICATION	1.832208343131642E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993416115092415	WITHOUT_CLASSIFICATION	6.58388490758462E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999801889664449	WITHOUT_CLASSIFICATION	1.981103355500519E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999985091941908	WITHOUT_CLASSIFICATION	1.4908058092046431E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999116910545411	WITHOUT_CLASSIFICATION	8.830894545883223E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9975812129064145	WITHOUT_CLASSIFICATION	0.0024187870935854436	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996843783335	WITHOUT_CLASSIFICATION	3.1562166654155843E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999904270215019	WITHOUT_CLASSIFICATION	9.57297849808874E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9994715295321306	WITHOUT_CLASSIFICATION	5.284704678693273E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999758373974441	WITHOUT_CLASSIFICATION	2.4162602555893903E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999908266012002	WITHOUT_CLASSIFICATION	9.173398799788116E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999977763564804	WITHOUT_CLASSIFICATION	2.2236435196186286E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999957412269519	WITHOUT_CLASSIFICATION	4.258773048083501E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999781897931522	WITHOUT_CLASSIFICATION	2.1810206847804037E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999936297325692	WITHOUT_CLASSIFICATION	6.3702674308439875E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999958376403427	WITHOUT_CLASSIFICATION	4.162359657277743E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999933174856088	WITHOUT_CLASSIFICATION	6.682514391124391E-6	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9995187124447715	WITHOUT_CLASSIFICATION	4.8128755522839164E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.999747754031439	WITHOUT_CLASSIFICATION	2.5224596856097357E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999827016596154	WITHOUT_CLASSIFICATION	1.7298340384592752E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999594197696174	WITHOUT_CLASSIFICATION	4.058023038253083E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.99988988708442	WITHOUT_CLASSIFICATION	1.1011291558012794E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999005727164667	WITHOUT_CLASSIFICATION	9.942728353333325E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9998989344567256	WITHOUT_CLASSIFICATION	1.0106554327436948E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999938684359186	WITHOUT_CLASSIFICATION	6.131564081406746E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996812412739179	WITHOUT_CLASSIFICATION	3.187587260821171E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999956525825816	WITHOUT_CLASSIFICATION	4.347417418491785E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9990873909671286	WITHOUT_CLASSIFICATION	9.126090328713212E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997236133839064	WITHOUT_CLASSIFICATION	2.763866160935857E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999813782194866	WITHOUT_CLASSIFICATION	1.86217805134101E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972066447115057	WITHOUT_CLASSIFICATION	0.002793355288494356	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992586293101049	WITHOUT_CLASSIFICATION	7.41370689895052E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998095809153152	WITHOUT_CLASSIFICATION	1.9041908468466067E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998164475131853	WITHOUT_CLASSIFICATION	1.8355248681468605E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999941723100015	WITHOUT_CLASSIFICATION	5.827689998503077E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999614006525119	WITHOUT_CLASSIFICATION	3.859934748816459E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997613165463392	WITHOUT_CLASSIFICATION	2.3868345366088802E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999986010845215	WITHOUT_CLASSIFICATION	1.39891547850202E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999610820521918	WITHOUT_CLASSIFICATION	3.8917947808100295E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9979045109144293	WITHOUT_CLASSIFICATION	0.0020954890855706962	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999213635809815	WITHOUT_CLASSIFICATION	7.863641901850858E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999992252798406	WITHOUT_CLASSIFICATION	7.747201593316154E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999877988393946	WITHOUT_CLASSIFICATION	1.2201160605304149E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999942045388637	WITHOUT_CLASSIFICATION	5.795461136297401E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999945897124245	WITHOUT_CLASSIFICATION	5.410287575557986E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998732180017194	WITHOUT_CLASSIFICATION	1.2678199828073758E-4	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999961049476428	WITHOUT_CLASSIFICATION	3.895052357268986E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999698100084717	WITHOUT_CLASSIFICATION	3.018999152818687E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999398259823365	WITHOUT_CLASSIFICATION	6.017401766342744E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999335591675457	WITHOUT_CLASSIFICATION	6.644083245430936E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999995958617007	WITHOUT_CLASSIFICATION	4.0413829930720245E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999678633677612	WITHOUT_CLASSIFICATION	3.213663223879332E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999977488347598	WITHOUT_CLASSIFICATION	2.2511652401936773E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998492264433388	WITHOUT_CLASSIFICATION	1.50773556661085E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998609692019422	WITHOUT_CLASSIFICATION	1.390307980578474E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999944248007181	WITHOUT_CLASSIFICATION	5.575199281841486E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999920290127473	WITHOUT_CLASSIFICATION	7.970987252713266E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999877906001673	WITHOUT_CLASSIFICATION	1.2209399832770768E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999537432005279	WITHOUT_CLASSIFICATION	4.625679947209526E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972066447115057	WITHOUT_CLASSIFICATION	0.002793355288494356	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999802045115855	WITHOUT_CLASSIFICATION	1.979548841446812E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9995890917274909	WITHOUT_CLASSIFICATION	4.1090827250911746E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999957216955594	WITHOUT_CLASSIFICATION	4.2783044405964E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.997634067951586	WITHOUT_CLASSIFICATION	0.002365932048413983	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9995911162987209	WITHOUT_CLASSIFICATION	4.0888370127911374E-4	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999306889144258	WITHOUT_CLASSIFICATION	6.931108557406509E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998042577328553	WITHOUT_CLASSIFICATION	1.9574226714466422E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999991899267879	WITHOUT_CLASSIFICATION	8.100732119525261E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999971015556159	WITHOUT_CLASSIFICATION	2.8984443841498453E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999195456407272	WITHOUT_CLASSIFICATION	8.045435927285847E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997022274102794	WITHOUT_CLASSIFICATION	2.977725897206653E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995344478230387	WITHOUT_CLASSIFICATION	4.6555217696134894E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999935008650233	WITHOUT_CLASSIFICATION	6.499134976735798E-6	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999627662318398	WITHOUT_CLASSIFICATION	3.723376816019098E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999408027930624	WITHOUT_CLASSIFICATION	5.919720693759858E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999974419268971	WITHOUT_CLASSIFICATION	2.5580731029489392E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999954883824367	WITHOUT_CLASSIFICATION	4.511617563342392E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999935919986312	WITHOUT_CLASSIFICATION	6.408001368663331E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.999928388945534	WITHOUT_CLASSIFICATION	7.161105446597787E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999027721782158	WITHOUT_CLASSIFICATION	9.722782178425269E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996877024430395	WITHOUT_CLASSIFICATION	3.1229755696055375E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996877024430395	WITHOUT_CLASSIFICATION	3.1229755696055375E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997405714101074	WITHOUT_CLASSIFICATION	2.59428589892559E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999961768646479	WITHOUT_CLASSIFICATION	3.823135352109909E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999866492879818	WITHOUT_CLASSIFICATION	1.3350712018206538E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999701728040025	WITHOUT_CLASSIFICATION	2.9827195997579428E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999842439070633	WITHOUT_CLASSIFICATION	1.575609293668213E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999850110197588	WITHOUT_CLASSIFICATION	1.4988980241293483E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9995437106302646	WITHOUT_CLASSIFICATION	4.5628936973537965E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.998728622738794	WITHOUT_CLASSIFICATION	0.0012713772612059848	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.998728622738794	WITHOUT_CLASSIFICATION	0.0012713772612059848	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6174691830304211	WITHOUT_CLASSIFICATION	0.38253081696957897	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999633991307908	WITHOUT_CLASSIFICATION	3.660086920918961E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999981007983911	WITHOUT_CLASSIFICATION	1.8992016087762624E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999273725663412	WITHOUT_CLASSIFICATION	7.26274336587916E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999273725663412	WITHOUT_CLASSIFICATION	7.26274336587916E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999273725663412	WITHOUT_CLASSIFICATION	7.26274336587916E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999480884592417	WITHOUT_CLASSIFICATION	5.191154075838605E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999669234365538	WITHOUT_CLASSIFICATION	3.307656344617475E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9927274071880045	WITHOUT_CLASSIFICATION	0.007272592811995566	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999922663353559	WITHOUT_CLASSIFICATION	7.733664644082032E-6	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999970778518753	WITHOUT_CLASSIFICATION	2.9221481247393056E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9993887153080634	WITHOUT_CLASSIFICATION	6.112846919366886E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999900579035612	WITHOUT_CLASSIFICATION	9.94209643872401E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999684551261659	WITHOUT_CLASSIFICATION	3.154487383409655E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999986775691003	WITHOUT_CLASSIFICATION	1.3224308997003034E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9997665247559304	WITHOUT_CLASSIFICATION	2.3347524406949887E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999431673503397	WITHOUT_CLASSIFICATION	5.683264966038519E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999721313091121	WITHOUT_CLASSIFICATION	2.7868690887905674E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999770089642626	WITHOUT_CLASSIFICATION	2.299103573738853E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999991379448961	WITHOUT_CLASSIFICATION	8.620551039013706E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999955457851015	WITHOUT_CLASSIFICATION	4.454214898458398E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999241859037848	WITHOUT_CLASSIFICATION	7.58140962151237E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998003546369194	WITHOUT_CLASSIFICATION	1.9964536308055564E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996877024430395	WITHOUT_CLASSIFICATION	3.1229755696055375E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996402262187644	WITHOUT_CLASSIFICATION	3.5977378123559577E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9565758254636304	WITHOUT_CLASSIFICATION	0.043424174536369625	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999824084497692	WITHOUT_CLASSIFICATION	1.7591550230878534E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999717371037822	WITHOUT_CLASSIFICATION	2.8262896217776988E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999813701621081	WITHOUT_CLASSIFICATION	1.862983789197465E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999592048322	WITHOUT_CLASSIFICATION	4.079516776923462E-8	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999351569114878	WITHOUT_CLASSIFICATION	6.484308851214714E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999113563403348	WITHOUT_CLASSIFICATION	8.864365966529721E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999932987845792	WITHOUT_CLASSIFICATION	6.7012154207852E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999934983178036	WITHOUT_CLASSIFICATION	6.501682196395019E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999075854212	WITHOUT_CLASSIFICATION	9.24145787500565E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999983066016146	WITHOUT_CLASSIFICATION	1.693398385422783E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999968343680676	WITHOUT_CLASSIFICATION	3.1656319324066754E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999992619827504	WITHOUT_CLASSIFICATION	7.380172495990753E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999766029858256	WITHOUT_CLASSIFICATION	2.3397014174389674E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9437765302014691	WITHOUT_CLASSIFICATION	0.05622346979853092	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999895547207389	WITHOUT_CLASSIFICATION	1.0445279261072984E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999872822873498	WITHOUT_CLASSIFICATION	1.2717712650111588E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999852535673833	WITHOUT_CLASSIFICATION	1.4746432616804443E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999852535673833	WITHOUT_CLASSIFICATION	1.4746432616804443E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.99996415859424	WITHOUT_CLASSIFICATION	3.584140575989259E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999930495720609	WITHOUT_CLASSIFICATION	6.950427939137288E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999621476614483	WITHOUT_CLASSIFICATION	3.785233855176772E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999189589317358	WITHOUT_CLASSIFICATION	8.104106826421344E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999364732565001	WITHOUT_CLASSIFICATION	6.352674349992385E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999059192085542	WITHOUT_CLASSIFICATION	9.408079144570167E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999580711989998	WITHOUT_CLASSIFICATION	4.192880100013822E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999923540327457	WITHOUT_CLASSIFICATION	7.645967254373983E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999763622210438	WITHOUT_CLASSIFICATION	2.3637778956138793E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999991819454551	WITHOUT_CLASSIFICATION	8.180545448110135E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999513911719984	WITHOUT_CLASSIFICATION	4.860882800167025E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995987929628829	WITHOUT_CLASSIFICATION	4.0120703711721235E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999934760032878	WITHOUT_CLASSIFICATION	6.523996712253225E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999975434143411	WITHOUT_CLASSIFICATION	2.456585658919882E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999931927495451	WITHOUT_CLASSIFICATION	6.807250454875047E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999876004396041	WITHOUT_CLASSIFICATION	1.2399560395861481E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999183636039	WITHOUT_CLASSIFICATION	8.163639604588205E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999183636039	WITHOUT_CLASSIFICATION	8.163639604588205E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.998899539292912	WITHOUT_CLASSIFICATION	0.0011004607070880831	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999994722335456	WITHOUT_CLASSIFICATION	5.277664543695898E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999946664344027	WITHOUT_CLASSIFICATION	5.333565597357185E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999946349190052	WITHOUT_CLASSIFICATION	5.365080994807593E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999864749079386	WITHOUT_CLASSIFICATION	1.3525092061427258E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999923973659471	WITHOUT_CLASSIFICATION	7.602634052806784E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.998544454269293	WITHOUT_CLASSIFICATION	0.0014555457307069977	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999592539505248	WITHOUT_CLASSIFICATION	4.074604947527761E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999638288427405	WITHOUT_CLASSIFICATION	3.6171157259567364E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998209952031	WITHOUT_CLASSIFICATION	1.790047969505585E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999407248416263	WITHOUT_CLASSIFICATION	5.9275158373556095E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999592539505248	WITHOUT_CLASSIFICATION	4.074604947527761E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9997793132033721	WITHOUT_CLASSIFICATION	2.2068679662776646E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9995919282676651	WITHOUT_CLASSIFICATION	4.08071732334923E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999705956259951	WITHOUT_CLASSIFICATION	2.940437400494493E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999707442519672	WITHOUT_CLASSIFICATION	2.9255748032805562E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999652437501	WITHOUT_CLASSIFICATION	3.475624999137341E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9998968937024098	WITHOUT_CLASSIFICATION	1.0310629759026112E-4	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9973809880552995	WITHOUT_CLASSIFICATION	0.002619011944700507	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999860034762675	WITHOUT_CLASSIFICATION	1.3996523732433045E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999968919190318	WITHOUT_CLASSIFICATION	3.1080809680596086E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996657621246319	WITHOUT_CLASSIFICATION	3.342378753680196E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995026202732197	WITHOUT_CLASSIFICATION	4.973797267802727E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999921279548603	WITHOUT_CLASSIFICATION	7.872045139705164E-6	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998114641898906	WITHOUT_CLASSIFICATION	1.8853581010933986E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9994863244383905	WITHOUT_CLASSIFICATION	5.136755616096328E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999084648044342	WITHOUT_CLASSIFICATION	9.153519556574292E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999878780806902	WITHOUT_CLASSIFICATION	1.212191930983415E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999619222417263	WITHOUT_CLASSIFICATION	3.807775827365609E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9937563515107821	WITHOUT_CLASSIFICATION	0.006243648489217938	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9937563515107821	WITHOUT_CLASSIFICATION	0.006243648489217938	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9973809880552995	WITHOUT_CLASSIFICATION	0.002619011944700507	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9922302877384346	WITHOUT_CLASSIFICATION	0.007769712261565328	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999638692124312	WITHOUT_CLASSIFICATION	3.6130787568841063E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999925985000685	WITHOUT_CLASSIFICATION	7.401499931496322E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999930426191168	WITHOUT_CLASSIFICATION	6.9573808832571E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999946716944278	WITHOUT_CLASSIFICATION	5.328305572287566E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999150577192115	WITHOUT_CLASSIFICATION	8.494228078841841E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999868717567412	WITHOUT_CLASSIFICATION	1.3128243258928607E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997077084099824	WITHOUT_CLASSIFICATION	2.9229159001758446E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999585700175891	WITHOUT_CLASSIFICATION	4.142998241086691E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999892612262963	WITHOUT_CLASSIFICATION	1.0738773703678502E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999913605601416	WITHOUT_CLASSIFICATION	8.639439858409005E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999278910105599	WITHOUT_CLASSIFICATION	7.210898944012823E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998086637883821	WITHOUT_CLASSIFICATION	1.9133621161797392E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999960984740426	WITHOUT_CLASSIFICATION	3.90152595739108E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999372871380027	WITHOUT_CLASSIFICATION	6.27128619973351E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999964653608194	WITHOUT_CLASSIFICATION	3.534639180478281E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999347586234	WITHOUT_CLASSIFICATION	6.524137672053249E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999941894924544	WITHOUT_CLASSIFICATION	5.810507545574276E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999375553425628	WITHOUT_CLASSIFICATION	6.244465743717305E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999457257312081	WITHOUT_CLASSIFICATION	5.427426879189031E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997014892615919	WITHOUT_CLASSIFICATION	2.9851073840818024E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999963665679293	WITHOUT_CLASSIFICATION	3.633432070804162E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9997517995060671	WITHOUT_CLASSIFICATION	2.482004939329236E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999911406568988	WITHOUT_CLASSIFICATION	8.859343101211123E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999984796821637	WITHOUT_CLASSIFICATION	1.5203178363104698E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999838269042726	WITHOUT_CLASSIFICATION	1.617309572733252E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999962521750249	WITHOUT_CLASSIFICATION	3.7478249751058503E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999766097239053	WITHOUT_CLASSIFICATION	2.3390276094677653E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999926156107296	WITHOUT_CLASSIFICATION	7.384389270338052E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999449599350294	WITHOUT_CLASSIFICATION	5.50400649705265E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999372871380027	WITHOUT_CLASSIFICATION	6.27128619973351E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999994782930166	WITHOUT_CLASSIFICATION	5.217069834018197E-6	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997065919599	WITHOUT_CLASSIFICATION	2.9340804010504264E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.99999227174322	WITHOUT_CLASSIFICATION	7.728256779956301E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.99995520348625	WITHOUT_CLASSIFICATION	4.479651375003711E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997137052931445	WITHOUT_CLASSIFICATION	2.8629470685553936E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999962351040274	WITHOUT_CLASSIFICATION	3.764895972572749E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999642491744334	WITHOUT_CLASSIFICATION	3.575082556672379E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999637041687973	WITHOUT_CLASSIFICATION	3.629583120262842E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9909783667351814	WITHOUT_CLASSIFICATION	0.009021633264818649	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.997927677644319	WITHOUT_CLASSIFICATION	0.0020723223556810277	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999269690279807	WITHOUT_CLASSIFICATION	7.303097201932797E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999998778529275	WITHOUT_CLASSIFICATION	1.221470724307723E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994581847148046	WITHOUT_CLASSIFICATION	5.418152851954651E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999862650648096	WITHOUT_CLASSIFICATION	1.3734935190367005E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999623470511956	WITHOUT_CLASSIFICATION	3.7652948804445084E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9992355679629795	WITHOUT_CLASSIFICATION	7.644320370204223E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996621628413	WITHOUT_CLASSIFICATION	3.3783715864229717E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999982871764854	WITHOUT_CLASSIFICATION	1.7128235145723682E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9983362128066933	WITHOUT_CLASSIFICATION	0.0016637871933066263	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999901926282824	WITHOUT_CLASSIFICATION	9.807371717634183E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999638288427405	WITHOUT_CLASSIFICATION	3.6171157259567364E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999622176910155	WITHOUT_CLASSIFICATION	3.778230898445598E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999372871380027	WITHOUT_CLASSIFICATION	6.27128619973351E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999782247735859	WITHOUT_CLASSIFICATION	2.177522641413296E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999993814526694	WITHOUT_CLASSIFICATION	6.185473305986806E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999825898490723	WITHOUT_CLASSIFICATION	1.7410150927741182E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999823983601963	WITHOUT_CLASSIFICATION	1.7601639803667338E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999508898455824	WITHOUT_CLASSIFICATION	4.911015441748991E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999988970256473	WITHOUT_CLASSIFICATION	1.1029743526925883E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999573841964614	WITHOUT_CLASSIFICATION	4.261580353858233E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999956806650412	WITHOUT_CLASSIFICATION	4.319334958800313E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999915823228156	WITHOUT_CLASSIFICATION	8.417677184401413E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999884777421841	WITHOUT_CLASSIFICATION	1.1522257815925436E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9988457519474673	WITHOUT_CLASSIFICATION	0.0011542480525328224	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999711744401111	WITHOUT_CLASSIFICATION	2.882555988888676E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997109099559341	WITHOUT_CLASSIFICATION	2.890900440658973E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997109099559341	WITHOUT_CLASSIFICATION	2.890900440658973E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998565702567	WITHOUT_CLASSIFICATION	1.4342974324062719E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9949173980440921	WITHOUT_CLASSIFICATION	0.005082601955907956	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998985323757716	WITHOUT_CLASSIFICATION	1.0146762422845827E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999997589494719	WITHOUT_CLASSIFICATION	2.410505281438934E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999992005140701	WITHOUT_CLASSIFICATION	7.994859299131336E-7	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999252196310074	WITHOUT_CLASSIFICATION	7.478036899260424E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995630417206	WITHOUT_CLASSIFICATION	4.369582794881298E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999949720153051	WITHOUT_CLASSIFICATION	5.027984694888509E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999662303546636	WITHOUT_CLASSIFICATION	3.3769645336454076E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999826957843931	WITHOUT_CLASSIFICATION	1.730421560688569E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9997586642248669	WITHOUT_CLASSIFICATION	2.4133577513318249E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997586642248669	WITHOUT_CLASSIFICATION	2.4133577513318249E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999762120213	WITHOUT_CLASSIFICATION	2.3787978648480342E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999710515025348	WITHOUT_CLASSIFICATION	2.8948497465177018E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994296884547	WITHOUT_CLASSIFICATION	5.703115452211255E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998030793033009	WITHOUT_CLASSIFICATION	1.9692069669896675E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991199005588	WITHOUT_CLASSIFICATION	8.800994411043984E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999946557934281	WITHOUT_CLASSIFICATION	5.344206571973949E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999993341846145	WITHOUT_CLASSIFICATION	6.658153853523256E-7	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999990357072109	WITHOUT_CLASSIFICATION	9.64292789143922E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999919217615729	WITHOUT_CLASSIFICATION	8.078238427092942E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999932073141903	WITHOUT_CLASSIFICATION	6.792685809707052E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999316698052461	WITHOUT_CLASSIFICATION	6.833019475389865E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237422305906	WITHOUT_CLASSIFICATION	7.625776940954608E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999903466204135	WITHOUT_CLASSIFICATION	9.65337958644026E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999620929366979	WITHOUT_CLASSIFICATION	3.790706330204133E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996469768461078	WITHOUT_CLASSIFICATION	3.530231538922889E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999934970031917	WITHOUT_CLASSIFICATION	6.502996808209267E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993424802953262	WITHOUT_CLASSIFICATION	6.575197046738525E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9994042949671671	WITHOUT_CLASSIFICATION	5.957050328328871E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999010155114589	WITHOUT_CLASSIFICATION	9.898448854108051E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9944099322401443	WITHOUT_CLASSIFICATION	0.005590067759855762	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9995791793198958	WITHOUT_CLASSIFICATION	4.2082068010408316E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999766486490191	WITHOUT_CLASSIFICATION	2.3351350980836297E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995870412466937	WITHOUT_CLASSIFICATION	4.129587533062471E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9993185247328153	WITHOUT_CLASSIFICATION	6.814752671845997E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999724919036923	WITHOUT_CLASSIFICATION	2.7508096307758245E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998753568722937	WITHOUT_CLASSIFICATION	1.2464312770631923E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998627837741953	WITHOUT_CLASSIFICATION	0.0013721622580470441	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999965586189106	WITHOUT_CLASSIFICATION	3.4413810894923986E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9994866976821842	WITHOUT_CLASSIFICATION	5.133023178158064E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985413696025366	WITHOUT_CLASSIFICATION	0.0014586303974634142	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9979766879551206	WITHOUT_CLASSIFICATION	0.002023312044879394	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999646302821834	WITHOUT_CLASSIFICATION	3.5369717816570784E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999992734960315	WITHOUT_CLASSIFICATION	7.265039685618538E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999563483157592	WITHOUT_CLASSIFICATION	4.365168424071495E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987522675878067	WITHOUT_CLASSIFICATION	0.0012477324121933566	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998953858216512	WITHOUT_CLASSIFICATION	1.046141783488166E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999864002126593	WITHOUT_CLASSIFICATION	1.3599787340690003E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999764292210431	WITHOUT_CLASSIFICATION	2.357077895684504E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999266104363647	WITHOUT_CLASSIFICATION	7.338956363530603E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999957582866666	WITHOUT_CLASSIFICATION	4.2417133333346716E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999784923820608	WITHOUT_CLASSIFICATION	2.1507617939251966E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9987162430709282	WITHOUT_CLASSIFICATION	0.0012837569290717996	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997846758477675	WITHOUT_CLASSIFICATION	2.153241522323904E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999227541051805	WITHOUT_CLASSIFICATION	7.724589481951961E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998434036454741	WITHOUT_CLASSIFICATION	1.5659635452592758E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996959536532	WITHOUT_CLASSIFICATION	3.040463467348556E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999667538152928	WITHOUT_CLASSIFICATION	3.324618470725244E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999299368014006	WITHOUT_CLASSIFICATION	7.006319859936591E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99999552876267	WITHOUT_CLASSIFICATION	4.4712373300481015E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999881551945148	WITHOUT_CLASSIFICATION	1.1844805485188622E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999643203692838	WITHOUT_CLASSIFICATION	3.5679630716180755E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999966569418511	WITHOUT_CLASSIFICATION	3.3430581488364823E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998794464949188	WITHOUT_CLASSIFICATION	1.2055350508116309E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998093310315919	WITHOUT_CLASSIFICATION	1.9066896840805184E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998794464949188	WITHOUT_CLASSIFICATION	1.2055350508116309E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999293012559674	WITHOUT_CLASSIFICATION	7.069874403260586E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999639808932417	WITHOUT_CLASSIFICATION	3.601910675828758E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997597440526198	WITHOUT_CLASSIFICATION	2.402559473801968E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999990531311194	WITHOUT_CLASSIFICATION	9.468688806121912E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999763955659862	WITHOUT_CLASSIFICATION	2.3604434013906526E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997597440526198	WITHOUT_CLASSIFICATION	2.402559473801968E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999980543172261	WITHOUT_CLASSIFICATION	1.9456827738874287E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999229344018138	WITHOUT_CLASSIFICATION	7.706559818630954E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999992682487058	WITHOUT_CLASSIFICATION	7.3175129419352235E-6	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999569917161389	WITHOUT_CLASSIFICATION	4.300828386110336E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999966923598378	WITHOUT_CLASSIFICATION	3.307640162192043E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999859444508199	WITHOUT_CLASSIFICATION	1.405554918005101E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999992286329098	WITHOUT_CLASSIFICATION	7.7136709021067E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7766453169248008	WITHOUT_CLASSIFICATION	0.22335468307519918	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997551917941253	WITHOUT_CLASSIFICATION	2.4480820587467327E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999966697626214	WITHOUT_CLASSIFICATION	3.330237378613103E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999985110970201	WITHOUT_CLASSIFICATION	1.4889029799072716E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998990634171927	WITHOUT_CLASSIFICATION	1.0093658280726759E-4	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999980436780698	WITHOUT_CLASSIFICATION	1.956321930204452E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999748689282251	WITHOUT_CLASSIFICATION	2.5131071774890678E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999704428222	WITHOUT_CLASSIFICATION	2.955717787736457E-8	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9995409019548616	WITHOUT_CLASSIFICATION	4.5909804513844866E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999989197617962	WITHOUT_CLASSIFICATION	1.0802382038083444E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999930807505692	WITHOUT_CLASSIFICATION	6.919249430806857E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998573208647141	WITHOUT_CLASSIFICATION	1.4267913528596317E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999990973950827	WITHOUT_CLASSIFICATION	9.02604917158256E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999232840506749	WITHOUT_CLASSIFICATION	7.671594932516058E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9953388701224993	WITHOUT_CLASSIFICATION	0.004661129877500585	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994208296421513	WITHOUT_CLASSIFICATION	5.791703578486674E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9941419430273049	WITHOUT_CLASSIFICATION	0.005858056972695241	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998670251542561	WITHOUT_CLASSIFICATION	1.3297484574395824E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999659522	WITHOUT_CLASSIFICATION	3.404773861020448E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998139123258722	WITHOUT_CLASSIFICATION	1.8608767412775745E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9990334931343422	WITHOUT_CLASSIFICATION	9.665068656577791E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998038761706113	WITHOUT_CLASSIFICATION	1.9612382938868916E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999192206801668	WITHOUT_CLASSIFICATION	8.077931983318291E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996659971860063	WITHOUT_CLASSIFICATION	3.34002813993636E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9954953672501186	WITHOUT_CLASSIFICATION	0.004504632749881388	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999990973950827	WITHOUT_CLASSIFICATION	9.02604917158256E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999989943693438	WITHOUT_CLASSIFICATION	1.0056306562321747E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999110306738648	WITHOUT_CLASSIFICATION	8.896932613516043E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9989035066681871	WITHOUT_CLASSIFICATION	0.0010964933318129626	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.99819578883456	WITHOUT_CLASSIFICATION	0.0018042111654401067	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999903167676585	WITHOUT_CLASSIFICATION	9.683232341529454E-6	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999806149052151	WITHOUT_CLASSIFICATION	1.938509478494915E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999679518644273	WITHOUT_CLASSIFICATION	3.204813557279242E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998573166399471	WITHOUT_CLASSIFICATION	1.4268336005293446E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998097980117553	WITHOUT_CLASSIFICATION	1.9020198824460548E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9992561609874371	WITHOUT_CLASSIFICATION	7.438390125630146E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999975323688545	WITHOUT_CLASSIFICATION	2.467631145568313E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999793027961726	WITHOUT_CLASSIFICATION	2.0697203827328427E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999797421843525	WITHOUT_CLASSIFICATION	2.025781564747296E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998776949136065	WITHOUT_CLASSIFICATION	1.223050863936106E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999769213369041	WITHOUT_CLASSIFICATION	2.3078663095900306E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999764829897757	WITHOUT_CLASSIFICATION	2.3517010224349337E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9843741727540566	WITHOUT_CLASSIFICATION	0.01562582724594339	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998437679857597	WITHOUT_CLASSIFICATION	1.562320142402608E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9981363418404259	WITHOUT_CLASSIFICATION	0.0018636581595741805	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999990159840339	WITHOUT_CLASSIFICATION	9.840159660933514E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918280159259069	WITHOUT_CLASSIFICATION	0.008171984074093103	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918280159259069	WITHOUT_CLASSIFICATION	0.008171984074093103	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999657687259497	WITHOUT_CLASSIFICATION	3.423127405045258E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918280159259069	WITHOUT_CLASSIFICATION	0.008171984074093103	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918280159259069	WITHOUT_CLASSIFICATION	0.008171984074093103	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993708790028409	WITHOUT_CLASSIFICATION	6.291209971589485E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998932982571361	WITHOUT_CLASSIFICATION	1.0670174286386864E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999245850572067	WITHOUT_CLASSIFICATION	7.541494279331662E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999245850572067	WITHOUT_CLASSIFICATION	7.541494279331662E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999151178001134	WITHOUT_CLASSIFICATION	8.488219988657058E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998891503192527	WITHOUT_CLASSIFICATION	1.1084968074715303E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995321734832469	WITHOUT_CLASSIFICATION	4.678265167531707E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999995050904951	WITHOUT_CLASSIFICATION	4.949095049186645E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9989873785211647	WITHOUT_CLASSIFICATION	0.0010126214788352534	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9966441175593759	WITHOUT_CLASSIFICATION	0.003355882440624173	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9972024579278489	WITHOUT_CLASSIFICATION	0.0027975420721511627	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9981590357807348	WITHOUT_CLASSIFICATION	0.0018409642192651822	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9995206350171966	WITHOUT_CLASSIFICATION	4.79364982803384E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998855681650017	WITHOUT_CLASSIFICATION	1.1443183499815972E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9993655719448633	WITHOUT_CLASSIFICATION	6.344280551367341E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999929022595961	WITHOUT_CLASSIFICATION	7.097740403909378E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999958049459275	WITHOUT_CLASSIFICATION	4.195054072525192E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999177998100915	WITHOUT_CLASSIFICATION	8.220018990849964E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9992250036982956	WITHOUT_CLASSIFICATION	7.74996301704472E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9991493125417277	WITHOUT_CLASSIFICATION	8.50687458272423E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9992877347816667	WITHOUT_CLASSIFICATION	7.122652183333543E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9996839816132279	WITHOUT_CLASSIFICATION	3.1601838677210403E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999958049459275	WITHOUT_CLASSIFICATION	4.195054072525192E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999232840506749	WITHOUT_CLASSIFICATION	7.671594932516058E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9980034470073191	WITHOUT_CLASSIFICATION	0.001996552992680769	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999757122659467	WITHOUT_CLASSIFICATION	2.4287734053327084E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998840956956624	WITHOUT_CLASSIFICATION	1.1590430433755912E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9976227075535086	WITHOUT_CLASSIFICATION	0.0023772924464914185	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999234207926502	WITHOUT_CLASSIFICATION	7.657920734981252E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9992578417289203	WITHOUT_CLASSIFICATION	7.421582710795829E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998350767657956	WITHOUT_CLASSIFICATION	1.6492323420428607E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999724243743524	WITHOUT_CLASSIFICATION	2.757562564756832E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999858368157635	WITHOUT_CLASSIFICATION	1.4163184236580403E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9987452129799957	WITHOUT_CLASSIFICATION	0.0012547870200043517	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999942221421053	WITHOUT_CLASSIFICATION	5.777857894615755E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999536157696326	WITHOUT_CLASSIFICATION	4.6384230367441094E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998062694639649	WITHOUT_CLASSIFICATION	1.9373053603505256E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9968360679608936	WITHOUT_CLASSIFICATION	0.0031639320391064593	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999711030747644	WITHOUT_CLASSIFICATION	2.889692523563151E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999460027200787	WITHOUT_CLASSIFICATION	5.3997279921341055E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9996498036498679	WITHOUT_CLASSIFICATION	3.501963501320222E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999839777591115	WITHOUT_CLASSIFICATION	1.602224088841014E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9996793965680701	WITHOUT_CLASSIFICATION	3.2060343192982674E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999655612806466	WITHOUT_CLASSIFICATION	3.4438719353263545E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9993968372578949	WITHOUT_CLASSIFICATION	6.031627421051124E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999978064178044	WITHOUT_CLASSIFICATION	2.193582195554173E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999724243743524	WITHOUT_CLASSIFICATION	2.757562564756832E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9986763712401375	WITHOUT_CLASSIFICATION	0.0013236287598624493	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9995378851439437	WITHOUT_CLASSIFICATION	4.621148560562678E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9989510813718335	WITHOUT_CLASSIFICATION	0.001048918628166524	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999642050879474	WITHOUT_CLASSIFICATION	3.579491205260807E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9985450066657331	WITHOUT_CLASSIFICATION	0.0014549933342668893	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9979981091749496	WITHOUT_CLASSIFICATION	0.002001890825050469	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9979850842132588	WITHOUT_CLASSIFICATION	0.0020149157867412277	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9979952694363957	WITHOUT_CLASSIFICATION	0.0020047305636042533	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9955127387994596	WITHOUT_CLASSIFICATION	0.004487261200540456	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999336428547695	WITHOUT_CLASSIFICATION	6.635714523050869E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998496337856322	WITHOUT_CLASSIFICATION	1.5036621436778522E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999962377463844	WITHOUT_CLASSIFICATION	3.762253615674777E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999360169512849	WITHOUT_CLASSIFICATION	6.398304871507622E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999903479706067	WITHOUT_CLASSIFICATION	9.652029393304468E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998700378105306	WITHOUT_CLASSIFICATION	1.2996218946944362E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999336428547695	WITHOUT_CLASSIFICATION	6.635714523050869E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999906551093561	WITHOUT_CLASSIFICATION	9.344890643816421E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999950562280985	WITHOUT_CLASSIFICATION	4.943771901458332E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999642606272313	WITHOUT_CLASSIFICATION	3.573937276869076E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999847164669674	WITHOUT_CLASSIFICATION	1.5283533032547726E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.999827657521825	WITHOUT_CLASSIFICATION	1.7234247817510585E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9932694859217074	WITHOUT_CLASSIFICATION	0.006730514078292576	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999692342234066	WITHOUT_CLASSIFICATION	3.0765776593491866E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390044484697	WITHOUT_CLASSIFICATION	6.099555153027533E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999128322671205	WITHOUT_CLASSIFICATION	8.716773287964552E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992674534461027	WITHOUT_CLASSIFICATION	7.325465538973211E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992674534461027	WITHOUT_CLASSIFICATION	7.325465538973211E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992674534461027	WITHOUT_CLASSIFICATION	7.325465538973211E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999826625946423	WITHOUT_CLASSIFICATION	1.7337405357616976E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999826625946423	WITHOUT_CLASSIFICATION	1.7337405357616976E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999991027923594	WITHOUT_CLASSIFICATION	8.972076405998744E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999932980860684	WITHOUT_CLASSIFICATION	6.7019139316001076E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.999761683816793	WITHOUT_CLASSIFICATION	2.3831618320705567E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9997581388346516	WITHOUT_CLASSIFICATION	2.418611653483421E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9830219501426868	WITHOUT_CLASSIFICATION	0.016978049857313257	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999234873185013	WITHOUT_CLASSIFICATION	7.651268149869161E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653338504146	WITHOUT_CLASSIFICATION	3.46661495853073E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999991196598954	WITHOUT_CLASSIFICATION	8.803401046584207E-7	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998705501532633	WITHOUT_CLASSIFICATION	1.2944984673666496E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999234873185013	WITHOUT_CLASSIFICATION	7.651268149869161E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653338504146	WITHOUT_CLASSIFICATION	3.46661495853073E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999993452849129	WITHOUT_CLASSIFICATION	6.547150871778087E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999920714016822	WITHOUT_CLASSIFICATION	7.928598317689971E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999972402137765	WITHOUT_CLASSIFICATION	2.759786223561071E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.99999889885953	WITHOUT_CLASSIFICATION	1.1011404699819287E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9996978346922334	WITHOUT_CLASSIFICATION	3.0216530776660475E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999567202269081	WITHOUT_CLASSIFICATION	4.327977309195558E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999444675385426	WITHOUT_CLASSIFICATION	5.553246145750132E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999805148898242	WITHOUT_CLASSIFICATION	1.948511017574835E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998927207020747	WITHOUT_CLASSIFICATION	1.0727929792523613E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9984680633991322	WITHOUT_CLASSIFICATION	0.0015319366008678579	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999881051701774	WITHOUT_CLASSIFICATION	1.1894829822444102E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999707110751068	WITHOUT_CLASSIFICATION	2.928892489321549E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997923505104681	WITHOUT_CLASSIFICATION	2.0764948953179343E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9994921526277151	WITHOUT_CLASSIFICATION	5.078473722849287E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999693913006241	WITHOUT_CLASSIFICATION	3.0608699375842574E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997657142664221	WITHOUT_CLASSIFICATION	2.342857335778197E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999992149458202	WITHOUT_CLASSIFICATION	7.850541797937238E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991761183074163	WITHOUT_CLASSIFICATION	8.238816925837753E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.986186280728232	WITHOUT_CLASSIFICATION	0.013813719271767883	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999907885682351	WITHOUT_CLASSIFICATION	9.211431764989213E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999959892091085	WITHOUT_CLASSIFICATION	4.0107908915360565E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9392783470931968	WITHOUT_CLASSIFICATION	0.06072165290680308	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225476433328	WITHOUT_CLASSIFICATION	7.74523566671569E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999243618970617	WITHOUT_CLASSIFICATION	7.563810293825808E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999966421157984	WITHOUT_CLASSIFICATION	3.3578842016929706E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99992838008207	WITHOUT_CLASSIFICATION	7.161991793004252E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937178457853	WITHOUT_CLASSIFICATION	6.282154214707436E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997568999086005	WITHOUT_CLASSIFICATION	2.4310009139945154E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997568999086005	WITHOUT_CLASSIFICATION	2.4310009139945154E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999693867442722	WITHOUT_CLASSIFICATION	3.0613255727722764E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999104804549174	WITHOUT_CLASSIFICATION	8.951954508266696E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9980516380212047	WITHOUT_CLASSIFICATION	0.001948361978795376	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9993997120257925	WITHOUT_CLASSIFICATION	6.002879742074835E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999958692927489	WITHOUT_CLASSIFICATION	4.1307072511643916E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999594728796445	WITHOUT_CLASSIFICATION	4.052712035562494E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999398785005795	WITHOUT_CLASSIFICATION	6.012149942042751E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9992155388489082	WITHOUT_CLASSIFICATION	7.844611510918704E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9975819811129332	WITHOUT_CLASSIFICATION	0.0024180188870668497	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999526525823742	WITHOUT_CLASSIFICATION	4.734741762578163E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999156034562073	WITHOUT_CLASSIFICATION	8.439654379264772E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999049580536121	WITHOUT_CLASSIFICATION	9.504194638794558E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998451901079	WITHOUT_CLASSIFICATION	1.5480989215203638E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9991164452256975	WITHOUT_CLASSIFICATION	8.835547743023885E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999735966729427	WITHOUT_CLASSIFICATION	2.640332705717877E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9988008041439453	WITHOUT_CLASSIFICATION	0.0011991958560546535	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999156034562073	WITHOUT_CLASSIFICATION	8.439654379264772E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999156034562073	WITHOUT_CLASSIFICATION	8.439654379264772E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998772091049044	WITHOUT_CLASSIFICATION	1.2279089509553944E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999887226380885	WITHOUT_CLASSIFICATION	1.1277361911594567E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9993383823619033	WITHOUT_CLASSIFICATION	6.616176380966689E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999872442605102	WITHOUT_CLASSIFICATION	1.275573948968286E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999992619827504	WITHOUT_CLASSIFICATION	7.380172495990753E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997657142664221	WITHOUT_CLASSIFICATION	2.342857335778197E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997995109718409	WITHOUT_CLASSIFICATION	2.004890281590015E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999626457874158	WITHOUT_CLASSIFICATION	3.7354212584150426E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999862022225587	WITHOUT_CLASSIFICATION	1.3797777441305139E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997783961749845	WITHOUT_CLASSIFICATION	2.216038250155141E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999933145037144	WITHOUT_CLASSIFICATION	6.685496285482466E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999434160373619	WITHOUT_CLASSIFICATION	5.658396263807163E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999948901194279	WITHOUT_CLASSIFICATION	5.109880572092418E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999948901194279	WITHOUT_CLASSIFICATION	5.109880572092418E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999948901194279	WITHOUT_CLASSIFICATION	5.109880572092418E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999948901194279	WITHOUT_CLASSIFICATION	5.109880572092418E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451179803988	WITHOUT_CLASSIFICATION	5.4882019601140305E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997038145776969	WITHOUT_CLASSIFICATION	2.961854223030958E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923334690635	WITHOUT_CLASSIFICATION	7.666530936501261E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999677560058123	WITHOUT_CLASSIFICATION	3.2243994187705505E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999906315073639	WITHOUT_CLASSIFICATION	9.368492636083901E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999327253048867	WITHOUT_CLASSIFICATION	6.727469511326963E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510710874826	WITHOUT_CLASSIFICATION	4.8928912517451206E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999753840307987	WITHOUT_CLASSIFICATION	2.4615969201312198E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.999994490402382	WITHOUT_CLASSIFICATION	5.509597617997324E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999997065545305	WITHOUT_CLASSIFICATION	2.934454695037196E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999379251392039	WITHOUT_CLASSIFICATION	6.207486079612122E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9992768021587729	WITHOUT_CLASSIFICATION	7.231978412271775E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999149958680169	WITHOUT_CLASSIFICATION	8.500413198313224E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9934484769816764	WITHOUT_CLASSIFICATION	0.006551523018323598	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9995911490834475	WITHOUT_CLASSIFICATION	4.088509165526232E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9995911490834475	WITHOUT_CLASSIFICATION	4.088509165526232E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999978478609466	WITHOUT_CLASSIFICATION	2.1521390533942705E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999838191180968	WITHOUT_CLASSIFICATION	1.6180881903198497E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997660611752	WITHOUT_CLASSIFICATION	2.3393882479095157E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235615649013	WITHOUT_CLASSIFICATION	7.643843509877851E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235615649013	WITHOUT_CLASSIFICATION	7.643843509877851E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999887436332886	WITHOUT_CLASSIFICATION	1.1256366711387683E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992674534461027	WITHOUT_CLASSIFICATION	7.325465538973211E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9874554301720417	WITHOUT_CLASSIFICATION	0.012544569827958289	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999990943672464	WITHOUT_CLASSIFICATION	9.05632753594256E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999896916953817	WITHOUT_CLASSIFICATION	1.0308304618346883E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998468241437569	WITHOUT_CLASSIFICATION	1.531758562429842E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680898310478	WITHOUT_CLASSIFICATION	1.3191016895220135E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999944115073277	WITHOUT_CLASSIFICATION	5.588492672314598E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997419596411703	WITHOUT_CLASSIFICATION	2.5804035882968126E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998528644214323	WITHOUT_CLASSIFICATION	1.471355785677034E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999476739157263	WITHOUT_CLASSIFICATION	5.232608427388342E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999787269587638	WITHOUT_CLASSIFICATION	2.127304123620676E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999839755319632	WITHOUT_CLASSIFICATION	1.6024468036888872E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999823028720177	WITHOUT_CLASSIFICATION	1.769712798233027E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999932755972	WITHOUT_CLASSIFICATION	6.724402892816707E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996554433792	WITHOUT_CLASSIFICATION	3.445566208335169E-7	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998531318685	WITHOUT_CLASSIFICATION	1.4686813144141758E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999563297453	WITHOUT_CLASSIFICATION	4.3670254696563853E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999288655801111	WITHOUT_CLASSIFICATION	7.113441988885813E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999896023316237	WITHOUT_CLASSIFICATION	1.0397668376298267E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999927035284635	WITHOUT_CLASSIFICATION	7.29647153647578E-6	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998077962304683	WITHOUT_CLASSIFICATION	1.9220376953170423E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999653077669	WITHOUT_CLASSIFICATION	3.469223306868278E-8	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999887848976393	WITHOUT_CLASSIFICATION	1.121510236074815E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998205898445	WITHOUT_CLASSIFICATION	1.7941015554532563E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998963394236043	WITHOUT_CLASSIFICATION	1.0366057639562968E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998806601332006	WITHOUT_CLASSIFICATION	1.19339866799301E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9757731758367717	WITHOUT_CLASSIFICATION	0.024226824163228376	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995663343249449	WITHOUT_CLASSIFICATION	4.3366567505517004E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9979592950008505	WITHOUT_CLASSIFICATION	0.0020407049991496137	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997717226734343	WITHOUT_CLASSIFICATION	2.282773265657007E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999950996998086	WITHOUT_CLASSIFICATION	4.900300191400365E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.999945176902102	WITHOUT_CLASSIFICATION	5.4823097897873964E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999991086236899	WITHOUT_CLASSIFICATION	8.913763100236367E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999651378520497	WITHOUT_CLASSIFICATION	3.486214795032371E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9805298149272837	WITHOUT_CLASSIFICATION	0.019470185072716258	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999934787268647	WITHOUT_CLASSIFICATION	6.521273135192266E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999994024828938	WITHOUT_CLASSIFICATION	5.975171062552946E-7	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997431179896807	WITHOUT_CLASSIFICATION	2.5688201031926237E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.999970994056937	WITHOUT_CLASSIFICATION	2.9005943063086354E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999050830785061	WITHOUT_CLASSIFICATION	9.491692149379706E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999448983505762	WITHOUT_CLASSIFICATION	5.510164942388871E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999880914446181	WITHOUT_CLASSIFICATION	1.1908555381873444E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999561243945637	WITHOUT_CLASSIFICATION	4.387560543627934E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9991120937639655	WITHOUT_CLASSIFICATION	8.879062360344855E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998093794536608	WITHOUT_CLASSIFICATION	1.906205463391727E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9991972308653619	WITHOUT_CLASSIFICATION	8.027691346380088E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9993298590882834	WITHOUT_CLASSIFICATION	6.701409117165384E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998704392509653	WITHOUT_CLASSIFICATION	1.295607490346269E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.99587024929742	WITHOUT_CLASSIFICATION	0.004129750702580042	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998990020997967	WITHOUT_CLASSIFICATION	1.0099790020328315E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999775918502776	WITHOUT_CLASSIFICATION	2.240814972243941E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999096524207093	WITHOUT_CLASSIFICATION	9.034757929068738E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999699874919608	WITHOUT_CLASSIFICATION	3.0012508039169093E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999986785538344	WITHOUT_CLASSIFICATION	1.3214461656050259E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999951205867	WITHOUT_CLASSIFICATION	4.879413296320488E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998088713642798	WITHOUT_CLASSIFICATION	1.9112863572027207E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999851942398207	WITHOUT_CLASSIFICATION	1.480576017929836E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999965567525553	WITHOUT_CLASSIFICATION	3.4432474447070007E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999509943310662	WITHOUT_CLASSIFICATION	4.900566893380356E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999987310343313	WITHOUT_CLASSIFICATION	1.2689656687115575E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.971218169661593	WITHOUT_CLASSIFICATION	0.028781830338406904	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997066282333386	WITHOUT_CLASSIFICATION	2.9337176666153304E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998366902120444	WITHOUT_CLASSIFICATION	1.6330978795560516E-4	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999101062954487	WITHOUT_CLASSIFICATION	8.989370455117539E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999217570025185	WITHOUT_CLASSIFICATION	7.824299748158848E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999933440995206	WITHOUT_CLASSIFICATION	6.655900479460345E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999996632605224	WITHOUT_CLASSIFICATION	3.367394776846878E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999109247511743	WITHOUT_CLASSIFICATION	8.907524882570813E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999876185707277	WITHOUT_CLASSIFICATION	1.238142927227957E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9998617138382639	WITHOUT_CLASSIFICATION	1.3828616173613384E-4	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999780522240169	WITHOUT_CLASSIFICATION	2.1947775983136815E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9981083002431415	WITHOUT_CLASSIFICATION	0.0018916997568585792	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999861111457219	WITHOUT_CLASSIFICATION	1.38888542780053E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9989734490343761	WITHOUT_CLASSIFICATION	0.0010265509656239603	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6271098101790311	IMPLEMENTATION	0.372890189820969	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9995409019548616	WITHOUT_CLASSIFICATION	4.5909804513844866E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9816243569600722	WITHOUT_CLASSIFICATION	0.018375643039927777	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999038167672778	WITHOUT_CLASSIFICATION	9.618323272220894E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9998682489947415	WITHOUT_CLASSIFICATION	1.3175100525862428E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.999716982923469	WITHOUT_CLASSIFICATION	2.83017076531093E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998515995367685	WITHOUT_CLASSIFICATION	1.484004632314713E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9983611503621812	WITHOUT_CLASSIFICATION	0.0016388496378188027	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998960021030769	WITHOUT_CLASSIFICATION	1.0399789692299411E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9983129519502835	WITHOUT_CLASSIFICATION	0.0016870480497164684	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9996855031622952	WITHOUT_CLASSIFICATION	3.1449683770483366E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9992547256875812	WITHOUT_CLASSIFICATION	7.452743124188311E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999313637654631	WITHOUT_CLASSIFICATION	6.863623453691795E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999842160276042	WITHOUT_CLASSIFICATION	1.5783972395752475E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9987272702475588	WITHOUT_CLASSIFICATION	0.001272729752441207	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999883966397911	WITHOUT_CLASSIFICATION	1.1603360208804364E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999949886099756	WITHOUT_CLASSIFICATION	5.0113900243863145E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9997475539113779	WITHOUT_CLASSIFICATION	2.52446088622044E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9997123949131381	WITHOUT_CLASSIFICATION	2.8760508686192306E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999865043114933	WITHOUT_CLASSIFICATION	1.3495688506697934E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999865043114933	WITHOUT_CLASSIFICATION	1.3495688506697934E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999272698016256	WITHOUT_CLASSIFICATION	7.273019837436076E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9984650646774317	WITHOUT_CLASSIFICATION	0.0015349353225683044	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999260038052493	WITHOUT_CLASSIFICATION	7.39961947506496E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999926823026214	WITHOUT_CLASSIFICATION	7.317697378661975E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998316946288701	WITHOUT_CLASSIFICATION	1.683053711299819E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999202333117773	WITHOUT_CLASSIFICATION	7.976668822275864E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999881683105546	WITHOUT_CLASSIFICATION	1.1831689445462867E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999995552180349	WITHOUT_CLASSIFICATION	4.447819651424277E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.951527668088953	WITHOUT_CLASSIFICATION	0.04847233191104716	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999979555576123	WITHOUT_CLASSIFICATION	2.044442387756031E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999985236978777	WITHOUT_CLASSIFICATION	1.4763021222627352E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9948977428047749	WITHOUT_CLASSIFICATION	0.005102257195225017	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999961995058795	WITHOUT_CLASSIFICATION	3.800494120600522E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998097175149149	WITHOUT_CLASSIFICATION	1.9028248508505584E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999953114191432	WITHOUT_CLASSIFICATION	4.6885808568213885E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9724991299518451	IMPLEMENTATION	0.027500870048154963	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9724991299518451	IMPLEMENTATION	0.027500870048154963	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999828633328403	WITHOUT_CLASSIFICATION	1.7136667159705963E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999998300366569	WITHOUT_CLASSIFICATION	1.699633430995083E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999878254304531	WITHOUT_CLASSIFICATION	1.2174569546901682E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999491883696756	WITHOUT_CLASSIFICATION	5.0811630324455315E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999797443484211	WITHOUT_CLASSIFICATION	2.0255651578934798E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998867058724279	WITHOUT_CLASSIFICATION	1.1329412757210056E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998867058724279	WITHOUT_CLASSIFICATION	1.1329412757210056E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999836230198516	WITHOUT_CLASSIFICATION	1.63769801484203E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999826724896701	WITHOUT_CLASSIFICATION	1.732751032996623E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9990693634844364	WITHOUT_CLASSIFICATION	9.306365155635038E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999999998085	WITHOUT_CLASSIFICATION	1.915065976679599E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999284151405016	WITHOUT_CLASSIFICATION	7.158485949840886E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999924759522715	WITHOUT_CLASSIFICATION	7.524047728514813E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998003546369194	WITHOUT_CLASSIFICATION	1.9964536308055564E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999180419341702	WITHOUT_CLASSIFICATION	8.195806582976905E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999808293147898	WITHOUT_CLASSIFICATION	1.9170685210141378E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999995958617007	WITHOUT_CLASSIFICATION	4.0413829930720245E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.997634067951586	WITHOUT_CLASSIFICATION	0.002365932048413983	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999814554501856	WITHOUT_CLASSIFICATION	1.854454981445383E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999745208378457	WITHOUT_CLASSIFICATION	2.5479162154370417E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996469768461078	WITHOUT_CLASSIFICATION	3.530231538922889E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983124609472009	WITHOUT_CLASSIFICATION	0.0016875390527989604	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9996523931743936	WITHOUT_CLASSIFICATION	3.476068256064465E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997325196138298	WITHOUT_CLASSIFICATION	2.674803861702005E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997274031806873	WITHOUT_CLASSIFICATION	2.725968193126966E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999727729304593	WITHOUT_CLASSIFICATION	2.7227069540712336E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999644630437023	WITHOUT_CLASSIFICATION	3.553695629764291E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9896938531942598	WITHOUT_CLASSIFICATION	0.01030614680574027	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992438576093209	WITHOUT_CLASSIFICATION	7.561423906790569E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999443218854654	WITHOUT_CLASSIFICATION	5.5678114534636906E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999746441105601	WITHOUT_CLASSIFICATION	2.535588943975959E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9956288260845977	WITHOUT_CLASSIFICATION	0.004371173915402315	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999947209447043	WITHOUT_CLASSIFICATION	5.279055295692265E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999729860477004	WITHOUT_CLASSIFICATION	2.7013952299598297E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999183636039	WITHOUT_CLASSIFICATION	8.163639604588205E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994594639264913	WITHOUT_CLASSIFICATION	5.405360735086636E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9984629609853658	WITHOUT_CLASSIFICATION	0.0015370390146342693	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999994559543576	WITHOUT_CLASSIFICATION	5.4404564241010054E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9740982198323858	WITHOUT_CLASSIFICATION	0.025901780167614227	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999444139856334	WITHOUT_CLASSIFICATION	5.55860143666084E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998911518134341	WITHOUT_CLASSIFICATION	1.0884818656590773E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9996399821653441	WITHOUT_CLASSIFICATION	3.600178346559575E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999370959668006	WITHOUT_CLASSIFICATION	6.290403319945605E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998282734206675	WITHOUT_CLASSIFICATION	1.717265793324413E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999713687135987	WITHOUT_CLASSIFICATION	2.863128640129949E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9995295178342146	WITHOUT_CLASSIFICATION	4.704821657853871E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9997580786111414	WITHOUT_CLASSIFICATION	2.4192138885864535E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9992310770033813	WITHOUT_CLASSIFICATION	7.689229966187558E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999841302542599	WITHOUT_CLASSIFICATION	1.586974574007391E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998055430044	WITHOUT_CLASSIFICATION	1.944569956785454E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9969025484546515	WITHOUT_CLASSIFICATION	0.003097451545348466	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998282734206675	WITHOUT_CLASSIFICATION	1.717265793324413E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999713687135987	WITHOUT_CLASSIFICATION	2.863128640129949E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9995482893293703	WITHOUT_CLASSIFICATION	4.517106706296543E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9995371735685442	WITHOUT_CLASSIFICATION	4.628264314558586E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999993566213617	WITHOUT_CLASSIFICATION	6.433786382562827E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999373898402341	WITHOUT_CLASSIFICATION	6.261015976583783E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999956890403839	WITHOUT_CLASSIFICATION	4.310959615973191E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9922464887333088	WITHOUT_CLASSIFICATION	0.007753511266691168	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997025753608301	WITHOUT_CLASSIFICATION	2.974246391699261E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999939417769991	WITHOUT_CLASSIFICATION	6.0582230009272845E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999967875654292	WITHOUT_CLASSIFICATION	3.212434570724889E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9255537656023902	WITHOUT_CLASSIFICATION	0.07444623439760985	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999795093086751	WITHOUT_CLASSIFICATION	2.0490691324890676E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9255537656023902	WITHOUT_CLASSIFICATION	0.07444623439760985	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999349348354386	WITHOUT_CLASSIFICATION	6.506516456143172E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995795379302482	WITHOUT_CLASSIFICATION	4.204620697518268E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999349348354386	WITHOUT_CLASSIFICATION	6.506516456143172E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999959847603129	WITHOUT_CLASSIFICATION	4.015239687109417E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999863193709894	WITHOUT_CLASSIFICATION	1.3680629010737425E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999584658595188	WITHOUT_CLASSIFICATION	4.1534140481186E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999584658595188	WITHOUT_CLASSIFICATION	4.1534140481186E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9996022702401081	WITHOUT_CLASSIFICATION	3.977297598920136E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996053421547522	WITHOUT_CLASSIFICATION	3.946578452478225E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9996022702401081	WITHOUT_CLASSIFICATION	3.977297598920136E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996707980301185	WITHOUT_CLASSIFICATION	3.29201969881457E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9869694127423948	WITHOUT_CLASSIFICATION	0.013030587257605187	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9985410316264224	WITHOUT_CLASSIFICATION	0.001458968373577676	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9997670097409195	WITHOUT_CLASSIFICATION	2.3299025908054104E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999932668151285	WITHOUT_CLASSIFICATION	6.733184871601147E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9984733973454187	WITHOUT_CLASSIFICATION	0.001526602654581235	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999555447414639	WITHOUT_CLASSIFICATION	4.4455258536092966E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9997824902497303	WITHOUT_CLASSIFICATION	2.1750975026967167E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998425144031142	WITHOUT_CLASSIFICATION	1.5748559688580357E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999719476602216	WITHOUT_CLASSIFICATION	2.805233977839627E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999658374184792	WITHOUT_CLASSIFICATION	3.416258152075513E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999443662235818	WITHOUT_CLASSIFICATION	5.563377641808326E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999968989310605	WITHOUT_CLASSIFICATION	3.1010689395058546E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999499295302976	WITHOUT_CLASSIFICATION	5.0070469702425886E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999857277503639	WITHOUT_CLASSIFICATION	1.427224963609505E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9994509297977038	WITHOUT_CLASSIFICATION	5.49070202296303E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9985953371040233	WITHOUT_CLASSIFICATION	0.0014046628959767727	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.998657391774146	WITHOUT_CLASSIFICATION	0.0013426082258539214	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9799691660752737	WITHOUT_CLASSIFICATION	0.020030833924726335	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998435474569927	WITHOUT_CLASSIFICATION	1.5645254300724148E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999137621280475	WITHOUT_CLASSIFICATION	8.623787195254654E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9950801932989554	WITHOUT_CLASSIFICATION	0.004919806701044568	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999615054249747	WITHOUT_CLASSIFICATION	3.849457502530586E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9985410316264224	WITHOUT_CLASSIFICATION	0.001458968373577676	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999642056331441	WITHOUT_CLASSIFICATION	3.579436685587883E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9990911642389878	WITHOUT_CLASSIFICATION	9.088357610121273E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9531308262203149	WITHOUT_CLASSIFICATION	0.04686917377968514	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9986936284722483	WITHOUT_CLASSIFICATION	0.0013063715277516928	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999751397650474	WITHOUT_CLASSIFICATION	2.486023495264936E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998363848691947	WITHOUT_CLASSIFICATION	1.636151308053506E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996707980301185	WITHOUT_CLASSIFICATION	3.29201969881457E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996707980301185	WITHOUT_CLASSIFICATION	3.29201969881457E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9983796923563244	WITHOUT_CLASSIFICATION	0.0016203076436755318	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998267127959212	WITHOUT_CLASSIFICATION	1.7328720407884055E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.999830993014025	WITHOUT_CLASSIFICATION	1.69006985975034E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9990352490189864	WITHOUT_CLASSIFICATION	9.647509810137163E-4	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9975174891491179	WITHOUT_CLASSIFICATION	0.0024825108508822057	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997559756536908	WITHOUT_CLASSIFICATION	2.4402434630931526E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999817584910625	WITHOUT_CLASSIFICATION	1.8241508937516293E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997605924613	WITHOUT_CLASSIFICATION	2.39407538653167E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998813798658338	WITHOUT_CLASSIFICATION	1.1862013416614728E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999910749200721	WITHOUT_CLASSIFICATION	8.92507992787935E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998425144031142	WITHOUT_CLASSIFICATION	1.5748559688580357E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9989673382606533	WITHOUT_CLASSIFICATION	0.0010326617393466141	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999910749200721	WITHOUT_CLASSIFICATION	8.92507992787935E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998342176496515	WITHOUT_CLASSIFICATION	1.6578235034855603E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999456775391184	WITHOUT_CLASSIFICATION	5.43224608814609E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998772965775069	WITHOUT_CLASSIFICATION	1.227034224930734E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9514689465415515	WITHOUT_CLASSIFICATION	0.04853105345844855	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996153942008998	WITHOUT_CLASSIFICATION	3.846057991001553E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999971439130828	WITHOUT_CLASSIFICATION	2.8560869171260617E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999973866015266	WITHOUT_CLASSIFICATION	2.6133984733478287E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999996179156	WITHOUT_CLASSIFICATION	3.8208441422685233E-10	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997654315982409	WITHOUT_CLASSIFICATION	2.3456840175899252E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999272441560365	WITHOUT_CLASSIFICATION	7.275584396350075E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998645791250027	WITHOUT_CLASSIFICATION	1.3542087499735837E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9943748997364455	WITHOUT_CLASSIFICATION	0.005625100263554521	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999910749200721	WITHOUT_CLASSIFICATION	8.92507992787935E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996153942008998	WITHOUT_CLASSIFICATION	3.846057991001553E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999973866015266	WITHOUT_CLASSIFICATION	2.6133984733478287E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996342194944557	WITHOUT_CLASSIFICATION	3.657805055443315E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9993597207971143	WITHOUT_CLASSIFICATION	6.402792028857659E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999364340104958	WITHOUT_CLASSIFICATION	6.356598950417053E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999706160388718	WITHOUT_CLASSIFICATION	2.938396112820147E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997925387658841	WITHOUT_CLASSIFICATION	2.0746123411579184E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997449215104042	WITHOUT_CLASSIFICATION	2.5507848959582466E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998342176496515	WITHOUT_CLASSIFICATION	1.6578235034855603E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995983500394527	WITHOUT_CLASSIFICATION	4.016499605472951E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9981152123006989	WITHOUT_CLASSIFICATION	0.001884787699301084	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992506921316859	WITHOUT_CLASSIFICATION	7.49307868313996E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.7671972326583907	WITHOUT_CLASSIFICATION	0.2328027673416093	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.7499645062681866	WITHOUT_CLASSIFICATION	0.2500354937318135	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9993055125340093	WITHOUT_CLASSIFICATION	6.94487465990581E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999959847603129	WITHOUT_CLASSIFICATION	4.015239687109417E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918338463952	WITHOUT_CLASSIFICATION	8.166153604668936E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999992811710878	WITHOUT_CLASSIFICATION	7.188289122404811E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998106515682716	WITHOUT_CLASSIFICATION	1.8934843172830061E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999869137294112	WITHOUT_CLASSIFICATION	1.3086270588933001E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999929278835641	WITHOUT_CLASSIFICATION	7.072116435871543E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999634453519382	WITHOUT_CLASSIFICATION	3.655464806184157E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9996836706157167	WITHOUT_CLASSIFICATION	3.1632938428325557E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999853024580271	WITHOUT_CLASSIFICATION	1.4697541972905074E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997449215104042	WITHOUT_CLASSIFICATION	2.5507848959582466E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9984775587143926	WITHOUT_CLASSIFICATION	0.0015224412856074407	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999450811527034	WITHOUT_CLASSIFICATION	5.491884729654403E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9987297508827301	WITHOUT_CLASSIFICATION	0.001270249117269915	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999903181775008	WITHOUT_CLASSIFICATION	9.681822499137542E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999783647715473	WITHOUT_CLASSIFICATION	2.1635228452762718E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9993777586379933	WITHOUT_CLASSIFICATION	6.22241362006673E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998695367835416	WITHOUT_CLASSIFICATION	1.3046321645840688E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9959856349053244	WITHOUT_CLASSIFICATION	0.004014365094675481	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9970893340573184	WITHOUT_CLASSIFICATION	0.0029106659426815676	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999899509099924	WITHOUT_CLASSIFICATION	1.0049090007599733E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9979289057558652	WITHOUT_CLASSIFICATION	0.002071094244134873	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9981082743833933	WITHOUT_CLASSIFICATION	0.0018917256166066632	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999814472379717	WITHOUT_CLASSIFICATION	1.8552762028410246E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999928749305653	WITHOUT_CLASSIFICATION	7.125069434682431E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9996565999278565	WITHOUT_CLASSIFICATION	3.4340007214360175E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999692286359425	WITHOUT_CLASSIFICATION	3.0771364057597254E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9973277273069242	WITHOUT_CLASSIFICATION	0.0026722726930757837	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9995684088922845	WITHOUT_CLASSIFICATION	4.3159110771556763E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999798253597049	WITHOUT_CLASSIFICATION	2.0174640295103776E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999706570278611	WITHOUT_CLASSIFICATION	2.9342972138825227E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999978083030642	WITHOUT_CLASSIFICATION	2.1916969358075427E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998707875215956	WITHOUT_CLASSIFICATION	1.292124784043334E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.836794703696242	IMPLEMENTATION	0.16320529630375802	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9989074213561377	WITHOUT_CLASSIFICATION	0.00109257864386232	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999835934416108	WITHOUT_CLASSIFICATION	1.6406558389217048E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999967422907213	WITHOUT_CLASSIFICATION	3.2577092787251336E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.978427085962372	WITHOUT_CLASSIFICATION	0.021572914037627913	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999857341091976	WITHOUT_CLASSIFICATION	1.426589080234835E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996657621246319	WITHOUT_CLASSIFICATION	3.342378753680196E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999937639787206	WITHOUT_CLASSIFICATION	6.236021279369689E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999622176910155	WITHOUT_CLASSIFICATION	3.778230898445598E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999876798418582	WITHOUT_CLASSIFICATION	1.2320158141729443E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9998897672783321	WITHOUT_CLASSIFICATION	1.1023272166790347E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999691993667252	WITHOUT_CLASSIFICATION	3.080063327480947E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9994928006825564	WITHOUT_CLASSIFICATION	5.071993174436185E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9998897672783321	WITHOUT_CLASSIFICATION	1.1023272166790347E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999876798418582	WITHOUT_CLASSIFICATION	1.2320158141729443E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999691993667252	WITHOUT_CLASSIFICATION	3.080063327480947E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999846019501057	WITHOUT_CLASSIFICATION	1.539804989425697E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999374171886071	WITHOUT_CLASSIFICATION	6.258281139292666E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9984419892299691	WITHOUT_CLASSIFICATION	0.0015580107700310082	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999781136444078	WITHOUT_CLASSIFICATION	2.188635559218024E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999058068704	WITHOUT_CLASSIFICATION	9.419312968211899E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6817589967435534	WITHOUT_CLASSIFICATION	0.31824100325644666	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9881295985624962	WITHOUT_CLASSIFICATION	0.011870401437503857	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998738100955943	WITHOUT_CLASSIFICATION	1.2618990440575788E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999913453680915	WITHOUT_CLASSIFICATION	8.654631908466377E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998479523410313	WITHOUT_CLASSIFICATION	1.520476589687536E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9994979748477478	WITHOUT_CLASSIFICATION	5.020251522521118E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999594569076697	WITHOUT_CLASSIFICATION	4.0543092330207764E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993878884382716	WITHOUT_CLASSIFICATION	6.121115617283629E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998682916232358	WITHOUT_CLASSIFICATION	1.3170837676414985E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999976823450669	WITHOUT_CLASSIFICATION	2.317654933078778E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999816693935585	WITHOUT_CLASSIFICATION	1.833060644157296E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999558248701079	WITHOUT_CLASSIFICATION	4.417512989216551E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999990652312415	WITHOUT_CLASSIFICATION	9.347687585406514E-7	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998668192407273	WITHOUT_CLASSIFICATION	1.331807592727541E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9984227175498555	WITHOUT_CLASSIFICATION	0.0015772824501445583	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9981241601175683	WITHOUT_CLASSIFICATION	0.0018758398824316816	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999947467779517	WITHOUT_CLASSIFICATION	5.2532220482978254E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9991372522298724	WITHOUT_CLASSIFICATION	8.62747770127529E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999832463205951	WITHOUT_CLASSIFICATION	1.6753679404891142E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.998362125534582	WITHOUT_CLASSIFICATION	0.0016378744654179744	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.998362125534582	WITHOUT_CLASSIFICATION	0.0016378744654179744	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998480785734244	WITHOUT_CLASSIFICATION	1.5192142657561713E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998480785734244	WITHOUT_CLASSIFICATION	1.5192142657561713E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9975174018566598	WITHOUT_CLASSIFICATION	0.002482598143340166	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999558248701079	WITHOUT_CLASSIFICATION	4.417512989216551E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9992646225730308	WITHOUT_CLASSIFICATION	7.35377426969168E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999200764975031	WITHOUT_CLASSIFICATION	7.992350249686668E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996901451703966	WITHOUT_CLASSIFICATION	3.098548296033784E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996901451703966	WITHOUT_CLASSIFICATION	3.098548296033784E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998216128492247	WITHOUT_CLASSIFICATION	1.783871507753006E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9993032600001422	WITHOUT_CLASSIFICATION	6.967399998577709E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997102189517787	WITHOUT_CLASSIFICATION	2.8978104822129227E-4	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998655694571059	WITHOUT_CLASSIFICATION	1.3443054289415934E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999954083805872	WITHOUT_CLASSIFICATION	4.5916194127879853E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999998428039771	WITHOUT_CLASSIFICATION	1.5719602288901131E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998707179682709	WITHOUT_CLASSIFICATION	1.2928203172910067E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999123519834936	WITHOUT_CLASSIFICATION	8.764801650634153E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9997839371214541	WITHOUT_CLASSIFICATION	2.1606287854579006E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999980113284826	WITHOUT_CLASSIFICATION	1.9886715173922686E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9997728491259872	WITHOUT_CLASSIFICATION	2.2715087401282513E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996973167271568	WITHOUT_CLASSIFICATION	3.0268327284323904E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997757011982326	WITHOUT_CLASSIFICATION	2.2429880176743912E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9990259989483337	WITHOUT_CLASSIFICATION	9.740010516663579E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9700004344085188	WITHOUT_CLASSIFICATION	0.02999956559148124	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999262550310113	WITHOUT_CLASSIFICATION	7.374496898863457E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300188749101	WITHOUT_CLASSIFICATION	6.998112508992E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999455336893811	WITHOUT_CLASSIFICATION	5.44663106188884E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9803908972570776	WITHOUT_CLASSIFICATION	0.019609102742922394	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999964409315965	WITHOUT_CLASSIFICATION	3.55906840347655E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999049496420019	WITHOUT_CLASSIFICATION	9.505035799811791E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999895619983594	WITHOUT_CLASSIFICATION	1.0438001640714542E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998895977819152	WITHOUT_CLASSIFICATION	1.1040221808482276E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999991462674808	WITHOUT_CLASSIFICATION	8.537325192681364E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995344478230387	WITHOUT_CLASSIFICATION	4.6555217696134894E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997970085971237	WITHOUT_CLASSIFICATION	2.029914028761616E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999899509099924	WITHOUT_CLASSIFICATION	1.0049090007599733E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998943997774293	WITHOUT_CLASSIFICATION	1.0560022257069713E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999938115796604	WITHOUT_CLASSIFICATION	6.1884203396404875E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999930529966045	WITHOUT_CLASSIFICATION	6.947003395499682E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999227436506741	WITHOUT_CLASSIFICATION	7.725634932586391E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9993643880585846	WITHOUT_CLASSIFICATION	6.356119414154306E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9993643880585846	WITHOUT_CLASSIFICATION	6.356119414154306E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999715426179894	WITHOUT_CLASSIFICATION	2.8457382010650725E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.999683060525726	WITHOUT_CLASSIFICATION	3.169394742740162E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9996299264768457	WITHOUT_CLASSIFICATION	3.700735231542734E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9996299264768457	WITHOUT_CLASSIFICATION	3.700735231542734E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997137052931445	WITHOUT_CLASSIFICATION	2.8629470685553936E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999466396834166	WITHOUT_CLASSIFICATION	5.336031658334567E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9940664970676197	WITHOUT_CLASSIFICATION	0.005933502932380283	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999992619827504	WITHOUT_CLASSIFICATION	7.380172495990753E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9987452129799957	WITHOUT_CLASSIFICATION	0.0012547870200043517	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999886462934185	WITHOUT_CLASSIFICATION	1.1353706581439344E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998821032222027	WITHOUT_CLASSIFICATION	1.1789677779717298E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999685982812081	WITHOUT_CLASSIFICATION	3.140171879184457E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999685982812081	WITHOUT_CLASSIFICATION	3.140171879184457E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996792255201716	WITHOUT_CLASSIFICATION	3.2077447982827365E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999927759518596	WITHOUT_CLASSIFICATION	7.224048140404041E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999927759518596	WITHOUT_CLASSIFICATION	7.224048140404041E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999814347300583	WITHOUT_CLASSIFICATION	1.8565269941697412E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999732283194148	WITHOUT_CLASSIFICATION	2.677168058514952E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999642955795698	WITHOUT_CLASSIFICATION	3.570442043025179E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999922621063674	WITHOUT_CLASSIFICATION	7.737893632606182E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9995649328914079	WITHOUT_CLASSIFICATION	4.3506710859199767E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999965021365402	WITHOUT_CLASSIFICATION	3.4978634598863278E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999356446365788	WITHOUT_CLASSIFICATION	6.435536342116383E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998772192682244	WITHOUT_CLASSIFICATION	1.227807317755444E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9958008279560607	WITHOUT_CLASSIFICATION	0.004199172043939354	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999060665048767	WITHOUT_CLASSIFICATION	9.393349512335442E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.905620724504139	WITHOUT_CLASSIFICATION	0.09437927549586106	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985386558751691	WITHOUT_CLASSIFICATION	0.0014613441248308595	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985386558751691	WITHOUT_CLASSIFICATION	0.0014613441248308595	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985386558751691	WITHOUT_CLASSIFICATION	0.0014613441248308595	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985386558751691	WITHOUT_CLASSIFICATION	0.0014613441248308595	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999680125379768	WITHOUT_CLASSIFICATION	3.1987462023154135E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998263773451521	WITHOUT_CLASSIFICATION	1.7362265484789115E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9988070172762763	WITHOUT_CLASSIFICATION	0.0011929827237237393	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9994423115634249	WITHOUT_CLASSIFICATION	5.57688436575131E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9993233863881748	WITHOUT_CLASSIFICATION	6.766136118252574E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999754244786687	WITHOUT_CLASSIFICATION	2.4575521331290706E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9991227638091378	WITHOUT_CLASSIFICATION	8.772361908621824E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998852249527799	WITHOUT_CLASSIFICATION	1.1477504722014533E-4	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9968542082442577	WITHOUT_CLASSIFICATION	0.003145791755742248	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.999873285218744	WITHOUT_CLASSIFICATION	1.267147812560675E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996605882078545	WITHOUT_CLASSIFICATION	3.394117921455322E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999997085327911	WITHOUT_CLASSIFICATION	2.9146720886805163E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.6241308863377262	IMPLEMENTATION	0.37586911366227377	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999699985826068	WITHOUT_CLASSIFICATION	3.0001417393248907E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996605882078545	WITHOUT_CLASSIFICATION	3.394117921455322E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9133165539274383	WITHOUT_CLASSIFICATION	0.08668344607256184	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999272819978496	WITHOUT_CLASSIFICATION	7.271800215035195E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987127411344	WITHOUT_CLASSIFICATION	1.2872588655528625E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999740299946369	WITHOUT_CLASSIFICATION	2.5970005363015845E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999888397359332	WITHOUT_CLASSIFICATION	1.116026406676644E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9995380275075697	WITHOUT_CLASSIFICATION	4.619724924303973E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999921301109654	WITHOUT_CLASSIFICATION	7.869889034546454E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999570719864919	WITHOUT_CLASSIFICATION	4.292801350819777E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952972236323	WITHOUT_CLASSIFICATION	4.702776367687189E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999976398922016	WITHOUT_CLASSIFICATION	2.360107798424517E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952972236323	WITHOUT_CLASSIFICATION	4.702776367687189E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999949865495329	WITHOUT_CLASSIFICATION	5.013450467080601E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998870538824446	WITHOUT_CLASSIFICATION	1.1294611755540074E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.6368496092620876	WITHOUT_CLASSIFICATION	0.36315039073791244	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999800706606501	WITHOUT_CLASSIFICATION	1.9929339349940426E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999322064645605	WITHOUT_CLASSIFICATION	6.779353543950806E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993229641682	WITHOUT_CLASSIFICATION	6.77035831870339E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999501006892536	WITHOUT_CLASSIFICATION	4.989931074651036E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999986520069967	WITHOUT_CLASSIFICATION	1.3479930032904511E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999501006892536	WITHOUT_CLASSIFICATION	4.989931074651036E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999681542876674	WITHOUT_CLASSIFICATION	3.184571233251221E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999854939769653	WITHOUT_CLASSIFICATION	1.4506023034771876E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.999944168418382	WITHOUT_CLASSIFICATION	5.583158161809798E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999997768168176	WITHOUT_CLASSIFICATION	2.2318318240324704E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993229641682	WITHOUT_CLASSIFICATION	6.77035831870339E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999986520069967	WITHOUT_CLASSIFICATION	1.3479930032904511E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999681542876674	WITHOUT_CLASSIFICATION	3.184571233251221E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9994985573187312	WITHOUT_CLASSIFICATION	5.014426812689091E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9986853762637299	WITHOUT_CLASSIFICATION	0.0013146237362701078	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9992201047759983	WITHOUT_CLASSIFICATION	7.798952240016863E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9989421772298714	WITHOUT_CLASSIFICATION	0.0010578227701285542	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999471485523946	WITHOUT_CLASSIFICATION	5.285144760540498E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999317115587197	WITHOUT_CLASSIFICATION	6.828844128030846E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300188749101	WITHOUT_CLASSIFICATION	6.998112508992E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999854939769653	WITHOUT_CLASSIFICATION	1.4506023034771876E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.991400988684769	WITHOUT_CLASSIFICATION	0.008599011315230966	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997008195952873	WITHOUT_CLASSIFICATION	2.991804047126426E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999679151394709	WITHOUT_CLASSIFICATION	3.208486052902534E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300188749101	WITHOUT_CLASSIFICATION	6.998112508992E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998182251624748	WITHOUT_CLASSIFICATION	1.8177483752518045E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300188749101	WITHOUT_CLASSIFICATION	6.998112508992E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999762064863372	WITHOUT_CLASSIFICATION	2.379351366277353E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998753568722937	WITHOUT_CLASSIFICATION	1.2464312770631923E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9972388227531976	WITHOUT_CLASSIFICATION	0.0027611772468024206	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9993797371469874	WITHOUT_CLASSIFICATION	6.20262853012741E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999646302821834	WITHOUT_CLASSIFICATION	3.5369717816570784E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997444888241458	WITHOUT_CLASSIFICATION	2.555111758541886E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998720062913861	WITHOUT_CLASSIFICATION	1.2799370861397175E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999813027059591	WITHOUT_CLASSIFICATION	1.869729404093828E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9995078463218874	WITHOUT_CLASSIFICATION	4.921536781127126E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998940243086671	WITHOUT_CLASSIFICATION	1.0597569133277082E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999191067767713	WITHOUT_CLASSIFICATION	8.089322322867063E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998940243086671	WITHOUT_CLASSIFICATION	1.0597569133277082E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9969518623992258	WITHOUT_CLASSIFICATION	0.0030481376007740744	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.998594046341169	WITHOUT_CLASSIFICATION	0.0014059536588309246	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999907731866872	WITHOUT_CLASSIFICATION	9.226813312879927E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999926949723342	WITHOUT_CLASSIFICATION	7.305027665783698E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999972559781173	WITHOUT_CLASSIFICATION	2.7440218826321694E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999783762516768	WITHOUT_CLASSIFICATION	2.162374832313329E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995364816401	WITHOUT_CLASSIFICATION	4.63518359823429E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999836548766293	WITHOUT_CLASSIFICATION	1.634512337071565E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997643520935893	WITHOUT_CLASSIFICATION	2.3564790641072527E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997643520935893	WITHOUT_CLASSIFICATION	2.3564790641072527E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999840102260285	WITHOUT_CLASSIFICATION	1.598977397157207E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999863286998355	WITHOUT_CLASSIFICATION	1.367130016447381E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999995125959774	WITHOUT_CLASSIFICATION	4.874040226525082E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995184324772566	WITHOUT_CLASSIFICATION	4.8156752274340116E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999626027750199	WITHOUT_CLASSIFICATION	3.739722498010748E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996691534716966	WITHOUT_CLASSIFICATION	3.308465283034471E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999975293936098	WITHOUT_CLASSIFICATION	2.4706063903535187E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.996929112063478	WITHOUT_CLASSIFICATION	0.0030708879365219173	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999643203692838	WITHOUT_CLASSIFICATION	3.5679630716180755E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999782710637463	WITHOUT_CLASSIFICATION	2.17289362536992E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9959817453954396	WITHOUT_CLASSIFICATION	0.004018254604560394	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989598314358836	WITHOUT_CLASSIFICATION	0.0010401685641163914	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998655340938524	WITHOUT_CLASSIFICATION	1.344659061475761E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999990531311194	WITHOUT_CLASSIFICATION	9.468688806121912E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996467837063624	WITHOUT_CLASSIFICATION	3.532162936375925E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9968897496254018	WITHOUT_CLASSIFICATION	0.003110250374598255	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9968897496254018	WITHOUT_CLASSIFICATION	0.003110250374598255	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999626256031757	WITHOUT_CLASSIFICATION	3.737439682427664E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999813027059591	WITHOUT_CLASSIFICATION	1.869729404093828E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9984463357636086	WITHOUT_CLASSIFICATION	0.001553664236391296	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9995986281810016	WITHOUT_CLASSIFICATION	4.013718189984213E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998198795464048	WITHOUT_CLASSIFICATION	1.8012045359525007E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999956779075775	WITHOUT_CLASSIFICATION	4.322092422623436E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997892729327305	WITHOUT_CLASSIFICATION	2.1072706726951964E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999573508443218	WITHOUT_CLASSIFICATION	4.264915567821723E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999762313271428	WITHOUT_CLASSIFICATION	2.3768672857263355E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998648660774737	WITHOUT_CLASSIFICATION	1.3513392252627587E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9997447067869422	WITHOUT_CLASSIFICATION	2.552932130578458E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998853410987	WITHOUT_CLASSIFICATION	1.1465890128967594E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999968259968636	WITHOUT_CLASSIFICATION	3.174003136489116E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996074343106	WITHOUT_CLASSIFICATION	3.9256568931716604E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9914993444479078	WITHOUT_CLASSIFICATION	0.008500655552092203	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999674086004813	WITHOUT_CLASSIFICATION	3.259139951870557E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999984192377674	WITHOUT_CLASSIFICATION	1.5807622324488739E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999966289624347	WITHOUT_CLASSIFICATION	3.371037565271885E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998991777017371	WITHOUT_CLASSIFICATION	1.0082229826288159E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999782065866554	WITHOUT_CLASSIFICATION	2.1793413344635174E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999669654384563	WITHOUT_CLASSIFICATION	3.3034561543608057E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999924631936296	WITHOUT_CLASSIFICATION	7.53680637036487E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999420618243924	WITHOUT_CLASSIFICATION	5.793817560760589E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999630779660439	WITHOUT_CLASSIFICATION	3.692203395610093E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999983405702602	WITHOUT_CLASSIFICATION	1.6594297398848305E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999990580982301	WITHOUT_CLASSIFICATION	9.419017699074411E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9994283091515866	WITHOUT_CLASSIFICATION	5.716908484133975E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9396900994424803	WITHOUT_CLASSIFICATION	0.060309900557519676	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997517336085663	WITHOUT_CLASSIFICATION	2.482663914337106E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9980644445698665	WITHOUT_CLASSIFICATION	0.001935555430133444	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999234873185013	WITHOUT_CLASSIFICATION	7.651268149869161E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999250198459133	WITHOUT_CLASSIFICATION	7.498015408665404E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999668500537583	WITHOUT_CLASSIFICATION	3.314994624175568E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999708408253131	WITHOUT_CLASSIFICATION	2.915917468685371E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999089449584833	WITHOUT_CLASSIFICATION	9.105504151673493E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996405720343786	WITHOUT_CLASSIFICATION	3.5942796562138325E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999802829696013	WITHOUT_CLASSIFICATION	1.9717030398697697E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998515905281915	WITHOUT_CLASSIFICATION	1.4840947180852772E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998515905281915	WITHOUT_CLASSIFICATION	1.4840947180852772E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999083442648042	WITHOUT_CLASSIFICATION	9.165573519576138E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999895224176503	WITHOUT_CLASSIFICATION	1.0477582349739604E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999967998047356	WITHOUT_CLASSIFICATION	3.200195264394045E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999967998047356	WITHOUT_CLASSIFICATION	3.200195264394045E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999699620962991	WITHOUT_CLASSIFICATION	3.0037903700837596E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9981590357807348	WITHOUT_CLASSIFICATION	0.0018409642192651822	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999352392787378	WITHOUT_CLASSIFICATION	6.476072126211828E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999889460768042	WITHOUT_CLASSIFICATION	1.1053923195906516E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999495521194987	WITHOUT_CLASSIFICATION	5.044788050134977E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999887545398236	WITHOUT_CLASSIFICATION	1.1245460176388455E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999887545398236	WITHOUT_CLASSIFICATION	1.1245460176388455E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999875647882426	WITHOUT_CLASSIFICATION	1.2435211757418538E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996707980301185	WITHOUT_CLASSIFICATION	3.29201969881457E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997396459176304	WITHOUT_CLASSIFICATION	2.6035408236954453E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997396459176304	WITHOUT_CLASSIFICATION	2.6035408236954453E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9996528640941755	WITHOUT_CLASSIFICATION	3.4713590582445824E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999660105669262	WITHOUT_CLASSIFICATION	3.398943307376634E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996606047120777	WITHOUT_CLASSIFICATION	3.3939528792226566E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999603085791406	WITHOUT_CLASSIFICATION	3.969142085931848E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999999606433159	WITHOUT_CLASSIFICATION	3.9356684099946735E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997383505398025	WITHOUT_CLASSIFICATION	2.6164946019756726E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999594370012629	WITHOUT_CLASSIFICATION	4.056299873716294E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.999859750259856	WITHOUT_CLASSIFICATION	1.4024974014396037E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999808530599493	WITHOUT_CLASSIFICATION	1.914694005067732E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999989701754898	WITHOUT_CLASSIFICATION	1.0298245102019891E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9991620022398993	WITHOUT_CLASSIFICATION	8.379977601007817E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9703613941290872	WITHOUT_CLASSIFICATION	0.029638605870912726	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.5906944854265441	IMPLEMENTATION	0.4093055145734559	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999999347497538	WITHOUT_CLASSIFICATION	6.525024620697713E-7	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9997459763932158	WITHOUT_CLASSIFICATION	2.540236067842615E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999803578071161	WITHOUT_CLASSIFICATION	1.9642192883817106E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998530562044229	WITHOUT_CLASSIFICATION	1.469437955771398E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9915250935065913	WITHOUT_CLASSIFICATION	0.00847490649340855	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9987143923919336	WITHOUT_CLASSIFICATION	0.0012856076080664317	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999714336706707	WITHOUT_CLASSIFICATION	2.8566329329309545E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993648599192815	WITHOUT_CLASSIFICATION	6.35140080718523E-4	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9996306993323046	WITHOUT_CLASSIFICATION	3.693006676953299E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9975003043433474	WITHOUT_CLASSIFICATION	0.0024996956566525745	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998730487800609	WITHOUT_CLASSIFICATION	1.2695121993922616E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999571351164193	WITHOUT_CLASSIFICATION	4.2864883580758E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.999991458480157	WITHOUT_CLASSIFICATION	8.541519842990088E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999852548300312	WITHOUT_CLASSIFICATION	1.474516996893134E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999988159588277	WITHOUT_CLASSIFICATION	1.1840411722699315E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999707110751068	WITHOUT_CLASSIFICATION	2.928892489321549E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991761183074163	WITHOUT_CLASSIFICATION	8.238816925837753E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999730089283962	WITHOUT_CLASSIFICATION	2.6991071603787847E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999939141489892	WITHOUT_CLASSIFICATION	6.085851010754795E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999240665555437	WITHOUT_CLASSIFICATION	7.5933444456257E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996658714756911	WITHOUT_CLASSIFICATION	3.341285243089374E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999936949309637	WITHOUT_CLASSIFICATION	6.305069036298524E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999963723172237	WITHOUT_CLASSIFICATION	3.6276827762148764E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999934274320046	WITHOUT_CLASSIFICATION	6.572567995431584E-6	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999785480330367	WITHOUT_CLASSIFICATION	2.1451966963404067E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998251516291342	WITHOUT_CLASSIFICATION	1.7484837086578377E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999046621622041	WITHOUT_CLASSIFICATION	9.533783779599711E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998523574925023	WITHOUT_CLASSIFICATION	1.4764250749767905E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997536712453005	WITHOUT_CLASSIFICATION	2.4632875469952106E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999065939639722	WITHOUT_CLASSIFICATION	9.34060360279061E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999618338905282	WITHOUT_CLASSIFICATION	3.8166109471766464E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9964596737574639	WITHOUT_CLASSIFICATION	0.0035403262425359938	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997984320467688	WITHOUT_CLASSIFICATION	2.0156795323122566E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999356732804611	WITHOUT_CLASSIFICATION	6.432671953893616E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997295025936521	WITHOUT_CLASSIFICATION	2.7049740634789643E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6081199754700581	WITHOUT_CLASSIFICATION	0.39188002452994175	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999674678610417	WITHOUT_CLASSIFICATION	3.253213895831317E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999825146975365	WITHOUT_CLASSIFICATION	1.7485302463537668E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999990893816143	WITHOUT_CLASSIFICATION	9.106183856970478E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999848668159557	WITHOUT_CLASSIFICATION	1.5133184044404016E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999604327081193	WITHOUT_CLASSIFICATION	3.9567291880738894E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998659547770116	WITHOUT_CLASSIFICATION	1.3404522298855593E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999999336623285	WITHOUT_CLASSIFICATION	6.63376715112581E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996747140109418	WITHOUT_CLASSIFICATION	3.25285989058133E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996747140109418	WITHOUT_CLASSIFICATION	3.25285989058133E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999998161955	WITHOUT_CLASSIFICATION	1.8380450548472852E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998144830035096	WITHOUT_CLASSIFICATION	1.8551699649037648E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999993635871863	WITHOUT_CLASSIFICATION	6.3641281357687E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999997857108854	WITHOUT_CLASSIFICATION	2.14289114594638E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999939084298624	WITHOUT_CLASSIFICATION	6.091570137602677E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999817888131217	WITHOUT_CLASSIFICATION	1.8211186878373137E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999802039263729	WITHOUT_CLASSIFICATION	1.979607362711181E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999609127633	WITHOUT_CLASSIFICATION	3.9087236705169947E-7	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999932589927298	WITHOUT_CLASSIFICATION	6.741007270155824E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999946207153052	WITHOUT_CLASSIFICATION	5.379284694808411E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9997731772402193	WITHOUT_CLASSIFICATION	2.268227597807339E-4	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9997027068307089	WITHOUT_CLASSIFICATION	2.972931692910641E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998634764575	WITHOUT_CLASSIFICATION	1.3652354243350862E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999413673508698	WITHOUT_CLASSIFICATION	5.86326491301096E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998700378105306	WITHOUT_CLASSIFICATION	1.2996218946944362E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998700378105306	WITHOUT_CLASSIFICATION	1.2996218946944362E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999957956122975	WITHOUT_CLASSIFICATION	4.204387702575351E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999025742578183	WITHOUT_CLASSIFICATION	9.742574218173414E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999006790754548	WITHOUT_CLASSIFICATION	9.932092454522608E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999941043085573	WITHOUT_CLASSIFICATION	5.895691442813188E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999336428547695	WITHOUT_CLASSIFICATION	6.635714523050869E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999468050640357	WITHOUT_CLASSIFICATION	5.319493596444071E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999666725427933	WITHOUT_CLASSIFICATION	3.332745720668527E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999987052341727	WITHOUT_CLASSIFICATION	1.2947658273057066E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999757246193869	WITHOUT_CLASSIFICATION	2.4275380613143996E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.994997446148714	WITHOUT_CLASSIFICATION	0.0050025538512859374	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9982728049124978	WITHOUT_CLASSIFICATION	0.001727195087502172	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9993462064990951	WITHOUT_CLASSIFICATION	6.537935009049373E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999959152057621	WITHOUT_CLASSIFICATION	4.084794237866487E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997164975722201	WITHOUT_CLASSIFICATION	2.835024277799549E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998725809223176	WITHOUT_CLASSIFICATION	1.2741907768242818E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9993009137094306	WITHOUT_CLASSIFICATION	6.990862905693384E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999942477289735	WITHOUT_CLASSIFICATION	5.752271026525622E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999996948359627	WITHOUT_CLASSIFICATION	3.051640372922599E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999678355120476	WITHOUT_CLASSIFICATION	3.2164487952434506E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999961075078662	WITHOUT_CLASSIFICATION	3.89249213382733E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998504405256	WITHOUT_CLASSIFICATION	1.4955947432627116E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999985151508374	WITHOUT_CLASSIFICATION	1.4848491626120956E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999687769622245	WITHOUT_CLASSIFICATION	3.122303777543763E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998927207020747	WITHOUT_CLASSIFICATION	1.0727929792523613E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9989488702751157	WITHOUT_CLASSIFICATION	0.0010511297248843319	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999195585745453	WITHOUT_CLASSIFICATION	8.044142545474476E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996303441654982	WITHOUT_CLASSIFICATION	3.696558345018343E-4	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999919773091005	WITHOUT_CLASSIFICATION	8.022690899501735E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999924688303656	WITHOUT_CLASSIFICATION	7.531169634363647E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999346469093345	WITHOUT_CLASSIFICATION	6.535309066545397E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999886555341222	WITHOUT_CLASSIFICATION	1.1344465877835386E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999973873534967	WITHOUT_CLASSIFICATION	2.612646503222072E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9920150774029055	WITHOUT_CLASSIFICATION	0.007984922597094496	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.997469825219676	WITHOUT_CLASSIFICATION	0.0025301747803239353	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997100062721728	WITHOUT_CLASSIFICATION	2.899937278272534E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999684518360055	WITHOUT_CLASSIFICATION	3.154816399457031E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999980071160943	WITHOUT_CLASSIFICATION	1.9928839056422004E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999244574238745	WITHOUT_CLASSIFICATION	7.554257612555998E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999661501476	WITHOUT_CLASSIFICATION	3.3849852395367663E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993525392686722	WITHOUT_CLASSIFICATION	6.47460731327769E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993525392686722	WITHOUT_CLASSIFICATION	6.47460731327769E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999982254941459	WITHOUT_CLASSIFICATION	1.7745058541131064E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999022116468843	WITHOUT_CLASSIFICATION	9.778835311570263E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9989548792031075	WITHOUT_CLASSIFICATION	0.001045120796892429	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999781795435132	WITHOUT_CLASSIFICATION	2.1820456486806886E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9754028740409563	WITHOUT_CLASSIFICATION	0.024597125959043675	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999830173038583	WITHOUT_CLASSIFICATION	1.6982696141640438E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999560653430019	WITHOUT_CLASSIFICATION	4.3934656998063236E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9987434147985799	WITHOUT_CLASSIFICATION	0.0012565852014200574	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999909497849395	WITHOUT_CLASSIFICATION	9.050215060480632E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484535140731	WITHOUT_CLASSIFICATION	1.5154648592677363E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999156034562073	WITHOUT_CLASSIFICATION	8.439654379264772E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999988776303891	WITHOUT_CLASSIFICATION	1.1223696108320885E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999998077409574	WITHOUT_CLASSIFICATION	1.9225904259428573E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9858345825908609	WITHOUT_CLASSIFICATION	0.01416541740913912	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999738001200249	WITHOUT_CLASSIFICATION	2.619987997511151E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999878345089522	WITHOUT_CLASSIFICATION	1.2165491047774973E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999989675455581	WITHOUT_CLASSIFICATION	1.0324544419106484E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999795177697955	WITHOUT_CLASSIFICATION	2.0482230204522076E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999931465908007	WITHOUT_CLASSIFICATION	6.853409199310848E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998456073659	WITHOUT_CLASSIFICATION	1.5439263411569726E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9764326792325013	WITHOUT_CLASSIFICATION	0.02356732076749874	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9976447172226054	WITHOUT_CLASSIFICATION	0.002355282777394564	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999267799580706	WITHOUT_CLASSIFICATION	7.322004192941147E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999394710122336	WITHOUT_CLASSIFICATION	6.052898776648477E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999036922514049	WITHOUT_CLASSIFICATION	9.63077485951656E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999158484769686	WITHOUT_CLASSIFICATION	8.415152303133702E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999768985715516	WITHOUT_CLASSIFICATION	2.3101428448395673E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9959244863291495	WITHOUT_CLASSIFICATION	0.004075513670850492	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999683417493119	WITHOUT_CLASSIFICATION	3.165825068804891E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997547210623852	WITHOUT_CLASSIFICATION	2.4527893761484273E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995830012451	WITHOUT_CLASSIFICATION	4.1699875474462986E-7	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999980038692118	WITHOUT_CLASSIFICATION	1.9961307881419734E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999884777421841	WITHOUT_CLASSIFICATION	1.1522257815925436E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999419523641	WITHOUT_CLASSIFICATION	5.8047635868427144E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999930807505692	WITHOUT_CLASSIFICATION	6.919249430806857E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999993657580261	WITHOUT_CLASSIFICATION	6.342419739896911E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999976646546643	WITHOUT_CLASSIFICATION	2.3353453357336484E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997126114943338	WITHOUT_CLASSIFICATION	2.8738850566633017E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9991057632074734	WITHOUT_CLASSIFICATION	8.942367925266556E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999613160261775	WITHOUT_CLASSIFICATION	3.868397382244138E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999986698982873	WITHOUT_CLASSIFICATION	1.3301017125959925E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999877355327336	WITHOUT_CLASSIFICATION	1.226446726640905E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999720160089979	WITHOUT_CLASSIFICATION	2.798399100207397E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999727177485579	WITHOUT_CLASSIFICATION	2.7282251441998933E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9915826881948228	WITHOUT_CLASSIFICATION	0.008417311805177258	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999998710615233	WITHOUT_CLASSIFICATION	1.2893847669489667E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998634764575	WITHOUT_CLASSIFICATION	1.3652354243350862E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999716862356187	WITHOUT_CLASSIFICATION	2.8313764381358873E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995451632386	WITHOUT_CLASSIFICATION	4.548367614501057E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9976056352527736	WITHOUT_CLASSIFICATION	0.002394364747226487	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999994219666236	WITHOUT_CLASSIFICATION	5.780333764085789E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999159436553	WITHOUT_CLASSIFICATION	8.405634465438365E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999528477643392	WITHOUT_CLASSIFICATION	4.715223566078702E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998820778305307	WITHOUT_CLASSIFICATION	1.179221694692842E-4	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7404153920237431	WITHOUT_CLASSIFICATION	0.2595846079762569	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999997065545305	WITHOUT_CLASSIFICATION	2.934454695037196E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995021837341251	WITHOUT_CLASSIFICATION	4.978162658748779E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999157034693127	WITHOUT_CLASSIFICATION	8.429653068732433E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9981363418404259	WITHOUT_CLASSIFICATION	0.0018636581595741805	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999920046167587	WITHOUT_CLASSIFICATION	7.995383241300066E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9929927652404185	WITHOUT_CLASSIFICATION	0.007007234759581587	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999601802574067	WITHOUT_CLASSIFICATION	3.981974259322959E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999437608869629	WITHOUT_CLASSIFICATION	5.623911303709603E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9976786907559886	WITHOUT_CLASSIFICATION	0.0023213092440113625	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999768468473507	WITHOUT_CLASSIFICATION	2.315315264927106E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999601802574067	WITHOUT_CLASSIFICATION	3.981974259322959E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.6067306462499272	WITHOUT_CLASSIFICATION	0.3932693537500729	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.99904812230046	WITHOUT_CLASSIFICATION	9.518776995399243E-4	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999888754840225	WITHOUT_CLASSIFICATION	1.112451597747694E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9994699523030607	WITHOUT_CLASSIFICATION	5.300476969393087E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997824341010162	WITHOUT_CLASSIFICATION	2.1756589898373378E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999331446519893	WITHOUT_CLASSIFICATION	6.685534801062323E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999998847053514	WITHOUT_CLASSIFICATION	1.1529464859076872E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9993841697604191	WITHOUT_CLASSIFICATION	6.158302395808138E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999982403910052	WITHOUT_CLASSIFICATION	1.75960899489049E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9986888536626848	WITHOUT_CLASSIFICATION	0.0013111463373152944	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995886239338609	WITHOUT_CLASSIFICATION	4.113760661390367E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8683081783120327	WITHOUT_CLASSIFICATION	0.1316918216879674	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997657217018561	WITHOUT_CLASSIFICATION	2.3427829814387621E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9953468175655913	WITHOUT_CLASSIFICATION	0.004653182434408703	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9989130422918678	WITHOUT_CLASSIFICATION	0.0010869577081322466	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999420618243924	WITHOUT_CLASSIFICATION	5.793817560760589E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999956337369688	WITHOUT_CLASSIFICATION	4.366263031181035E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999994776367362	WITHOUT_CLASSIFICATION	5.223632637972228E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999825412575238	WITHOUT_CLASSIFICATION	1.7458742476201674E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9973285354215092	WITHOUT_CLASSIFICATION	0.0026714645784907906	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9992386019332387	WITHOUT_CLASSIFICATION	7.613980667613784E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999884052328524	WITHOUT_CLASSIFICATION	1.1594767147521104E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9859097172725975	WITHOUT_CLASSIFICATION	0.01409028272740251	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999998161895	WITHOUT_CLASSIFICATION	1.8381057764102855E-10	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999890612962169	WITHOUT_CLASSIFICATION	1.093870378313853E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999803630884262	WITHOUT_CLASSIFICATION	1.9636911573885488E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9876590700417195	WITHOUT_CLASSIFICATION	0.012340929958280499	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999476739157263	WITHOUT_CLASSIFICATION	5.232608427388342E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9954635729689993	WITHOUT_CLASSIFICATION	0.004536427031000717	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9969183616331019	WITHOUT_CLASSIFICATION	0.0030816383668980955	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999641239336234	WITHOUT_CLASSIFICATION	3.587606637650272E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998809361360288	WITHOUT_CLASSIFICATION	1.1906386397112435E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999801178648	WITHOUT_CLASSIFICATION	1.988213519997412E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999980473295792	WITHOUT_CLASSIFICATION	1.952670420680444E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999998627745471	WITHOUT_CLASSIFICATION	1.3722545289169938E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998453271239	WITHOUT_CLASSIFICATION	1.5467287596144044E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999995508874833	WITHOUT_CLASSIFICATION	4.4911251675118905E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997143526627842	WITHOUT_CLASSIFICATION	2.8564733721581277E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999396176875281	WITHOUT_CLASSIFICATION	6.038231247188227E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9983129519502835	WITHOUT_CLASSIFICATION	0.0016870480497164684	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999075563972157	WITHOUT_CLASSIFICATION	9.244360278421658E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999075563972157	WITHOUT_CLASSIFICATION	9.244360278421658E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999202333117773	WITHOUT_CLASSIFICATION	7.976668822275864E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999979555576123	WITHOUT_CLASSIFICATION	2.044442387756031E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999491883696756	WITHOUT_CLASSIFICATION	5.0811630324455315E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188595734534857	WITHOUT_CLASSIFICATION	0.48114042654651423	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999992619827504	WITHOUT_CLASSIFICATION	7.380172495990753E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999992619827504	WITHOUT_CLASSIFICATION	7.380172495990753E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9998226763177356	WITHOUT_CLASSIFICATION	1.7732368226438082E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983124609472009	WITHOUT_CLASSIFICATION	0.0016875390527989604	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999928775480741	WITHOUT_CLASSIFICATION	7.1224519259521506E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9896938531942598	WITHOUT_CLASSIFICATION	0.01030614680574027	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9791256269656288	WITHOUT_CLASSIFICATION	0.02087437303437116	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999641212864439	WITHOUT_CLASSIFICATION	3.5878713556202594E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997377035228205	WITHOUT_CLASSIFICATION	2.6229647717938566E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999135026641846	WITHOUT_CLASSIFICATION	8.649733581547471E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999991371534582	WITHOUT_CLASSIFICATION	8.628465417932205E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750536000345	WITHOUT_CLASSIFICATION	2.4946399965508438E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750536000345	WITHOUT_CLASSIFICATION	2.4946399965508438E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999393191032222	WITHOUT_CLASSIFICATION	6.068089677778977E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997438047096611	WITHOUT_CLASSIFICATION	2.561952903389284E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997654315982409	WITHOUT_CLASSIFICATION	2.3456840175899252E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9996696202071043	WITHOUT_CLASSIFICATION	3.303797928957212E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998596089216287	WITHOUT_CLASSIFICATION	1.4039107837115407E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918338463952	WITHOUT_CLASSIFICATION	8.166153604668936E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225472473652	WITHOUT_CLASSIFICATION	7.74527526347691E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999977611625915	WITHOUT_CLASSIFICATION	2.2388374084767684E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999897979729989	WITHOUT_CLASSIFICATION	1.0202027001114866E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997842148841284	WITHOUT_CLASSIFICATION	2.1578511587152233E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999970789159836	WITHOUT_CLASSIFICATION	2.921084016404578E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9986888536626848	WITHOUT_CLASSIFICATION	0.0013111463373152944	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.99997086581946	WITHOUT_CLASSIFICATION	2.9134180539892978E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994855561641474	WITHOUT_CLASSIFICATION	5.144438358526376E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999994779771387	WITHOUT_CLASSIFICATION	5.22022861239808E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998574596637663	WITHOUT_CLASSIFICATION	1.4254033623366344E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996018127367267	WITHOUT_CLASSIFICATION	3.9818726327326694E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999534032393242	WITHOUT_CLASSIFICATION	4.659676067579963E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9994813638047882	WITHOUT_CLASSIFICATION	5.186361952116221E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9992257161521798	WITHOUT_CLASSIFICATION	7.742838478201906E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9985024323949072	WITHOUT_CLASSIFICATION	0.0014975676050927166	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970645245044756	WITHOUT_CLASSIFICATION	0.0029354754955243315	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970645245044756	WITHOUT_CLASSIFICATION	0.0029354754955243315	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996605882078545	WITHOUT_CLASSIFICATION	3.394117921455322E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999942929163281	WITHOUT_CLASSIFICATION	5.707083671903203E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9984600707539378	WITHOUT_CLASSIFICATION	0.0015399292460621702	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995634934415832	WITHOUT_CLASSIFICATION	4.365065584167251E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997471700491322	WITHOUT_CLASSIFICATION	2.528299508678313E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998322029357605	WITHOUT_CLASSIFICATION	1.67797064239565E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999800706606501	WITHOUT_CLASSIFICATION	1.9929339349940426E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999995872872	WITHOUT_CLASSIFICATION	4.127128458945569E-10	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9994985573187312	WITHOUT_CLASSIFICATION	5.014426812689091E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999586128093377	WITHOUT_CLASSIFICATION	4.1387190662256276E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300188749101	WITHOUT_CLASSIFICATION	6.998112508992E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997079421330081	WITHOUT_CLASSIFICATION	2.9205786699185756E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999989272073067	WITHOUT_CLASSIFICATION	1.0727926932967103E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999990389786536	WITHOUT_CLASSIFICATION	9.610213463909304E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999978920910584	WITHOUT_CLASSIFICATION	2.1079089416713586E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998844886960827	WITHOUT_CLASSIFICATION	1.1551130391724795E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999484259323453	WITHOUT_CLASSIFICATION	5.157406765466358E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998648926236227	WITHOUT_CLASSIFICATION	1.3510737637732504E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9984926705270117	WITHOUT_CLASSIFICATION	0.0015073294729883214	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999994712156014	WITHOUT_CLASSIFICATION	5.287843985419033E-7	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999687493415903	WITHOUT_CLASSIFICATION	3.1250658409736705E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999397728024	WITHOUT_CLASSIFICATION	6.022719756273726E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996606047120777	WITHOUT_CLASSIFICATION	3.3939528792226566E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999892142518029	WITHOUT_CLASSIFICATION	1.0785748197190883E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468772446098	WITHOUT_CLASSIFICATION	5.3122755390075975E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468772446098	WITHOUT_CLASSIFICATION	5.3122755390075975E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994252041631808	WITHOUT_CLASSIFICATION	5.747958368193082E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9943446152798189	WITHOUT_CLASSIFICATION	0.005655384720181154	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999959077927375	WITHOUT_CLASSIFICATION	4.092207262498199E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999590930646982	WITHOUT_CLASSIFICATION	4.090693530190561E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999908970426853	WITHOUT_CLASSIFICATION	9.102957314774905E-6	IMPLEMENTATION
