// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993586854725597	WITHOUT_CLASSIFICATION	6.413145274403168E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993586854725597	WITHOUT_CLASSIFICATION	6.413145274403168E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9852263233965096	WITHOUT_CLASSIFICATION	0.014773676603490358	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9909284909363862	WITHOUT_CLASSIFICATION	0.009071509063613774	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9693700333533544	WITHOUT_CLASSIFICATION	0.030629966646645586	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9474567273325037	IMPLEMENTATION	0.052543272667496324	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9994255997343229	WITHOUT_CLASSIFICATION	5.744002656770318E-4	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7235035485514851	IMPLEMENTATION	0.27649645144851487	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9819721730015919	WITHOUT_CLASSIFICATION	0.01802782699840815	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.946215751722317	WITHOUT_CLASSIFICATION	0.05378424827768303	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999380544216935	WITHOUT_CLASSIFICATION	6.194557830657337E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8580096732699184	WITHOUT_CLASSIFICATION	0.1419903267300816	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9584720309485013	WITHOUT_CLASSIFICATION	0.0415279690514987	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9584720309485013	WITHOUT_CLASSIFICATION	0.0415279690514987	IMPLEMENTATION
/**	IMPLEMENTATION	0.5049108362147416	WITHOUT_CLASSIFICATION	0.4950891637852583	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.634737092400182	IMPLEMENTATION	0.36526290759981794	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999963961994945	IMPLEMENTATION	3.603800505513001E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.7216790220990704	WITHOUT_CLASSIFICATION	0.27832097790092963	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999869217127015	WITHOUT_CLASSIFICATION	1.307828729839194E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9789877254505923	WITHOUT_CLASSIFICATION	0.021012274549407614	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9220762263237008	WITHOUT_CLASSIFICATION	0.07792377367629921	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9954284081932883	WITHOUT_CLASSIFICATION	0.0045715918067117415	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9504259685188942	WITHOUT_CLASSIFICATION	0.049574031481105736	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8281272134187996	WITHOUT_CLASSIFICATION	0.17187278658120048	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8281272134187996	WITHOUT_CLASSIFICATION	0.17187278658120048	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7887307118058124	WITHOUT_CLASSIFICATION	0.21126928819418758	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9614003660440644	WITHOUT_CLASSIFICATION	0.03859963395593566	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.6483126391610228	IMPLEMENTATION	0.3516873608389773	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9807346649019444	WITHOUT_CLASSIFICATION	0.0192653350980555	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.5565756506768048	IMPLEMENTATION	0.4434243493231952	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9941649614513257	WITHOUT_CLASSIFICATION	0.005835038548674296	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9765485735803606	WITHOUT_CLASSIFICATION	0.023451426419639418	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997350982523293	WITHOUT_CLASSIFICATION	2.6490174767064285E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9695556302153843	WITHOUT_CLASSIFICATION	0.03044436978461564	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9401399477928529	IMPLEMENTATION	0.05986005220714698	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9487475891686795	WITHOUT_CLASSIFICATION	0.051252410831320525	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.955781202639144	IMPLEMENTATION	0.04421879736085602	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9765566137721702	WITHOUT_CLASSIFICATION	0.02344338622782973	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9883914911869698	WITHOUT_CLASSIFICATION	0.011608508813030181	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.972581295082844	IMPLEMENTATION	0.02741870491715605	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.972581295082844	IMPLEMENTATION	0.02741870491715605	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.6212080042198671	WITHOUT_CLASSIFICATION	0.378791995780133	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999282239695089	WITHOUT_CLASSIFICATION	7.177603049110633E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.998801338463022	WITHOUT_CLASSIFICATION	0.001198661536978083	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9987586963256422	IMPLEMENTATION	0.0012413036743579055	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9844305828496066	WITHOUT_CLASSIFICATION	0.01556941715039333	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9687724343871363	WITHOUT_CLASSIFICATION	0.03122756561286362	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9949550552692243	WITHOUT_CLASSIFICATION	0.005044944730775589	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998001799191102	WITHOUT_CLASSIFICATION	1.9982008088984004E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9904729260876904	WITHOUT_CLASSIFICATION	0.00952707391230945	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9967713338768602	WITHOUT_CLASSIFICATION	0.0032286661231398163	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.8448305543794759	IMPLEMENTATION	0.15516944562052418	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9886977003784607	WITHOUT_CLASSIFICATION	0.011302299621539282	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.8637422489328315	WITHOUT_CLASSIFICATION	0.13625775106716845	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9326858717097596	WITHOUT_CLASSIFICATION	0.06731412829024043	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9765485735803606	WITHOUT_CLASSIFICATION	0.023451426419639418	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9326858717097596	WITHOUT_CLASSIFICATION	0.06731412829024043	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9989875158195664	IMPLEMENTATION	0.0010124841804337271	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6549092220260239	IMPLEMENTATION	0.34509077797397625	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9326858717097596	WITHOUT_CLASSIFICATION	0.06731412829024043	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999986987887092	WITHOUT_CLASSIFICATION	1.3012112907924571E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999986987887092	WITHOUT_CLASSIFICATION	1.3012112907924571E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999649460637589	IMPLEMENTATION	3.5053936241155144E-5	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9976059885819046	WITHOUT_CLASSIFICATION	0.0023940114180953857	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998242267716874	WITHOUT_CLASSIFICATION	1.757732283125482E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999762597778079	WITHOUT_CLASSIFICATION	2.3740222192055177E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999576825652534	WITHOUT_CLASSIFICATION	4.2317434746596614E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999911525702998	WITHOUT_CLASSIFICATION	8.84742970021052E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999911525702998	WITHOUT_CLASSIFICATION	8.84742970021052E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999979347508934	WITHOUT_CLASSIFICATION	2.0652491066234927E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999116389427604	WITHOUT_CLASSIFICATION	8.836105723972461E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999623836564828	WITHOUT_CLASSIFICATION	3.7616343517168324E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999459967529952	WITHOUT_CLASSIFICATION	5.400324700483547E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993737401522	WITHOUT_CLASSIFICATION	6.262598477070832E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993737401522	WITHOUT_CLASSIFICATION	6.262598477070832E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999871161996697	WITHOUT_CLASSIFICATION	1.2883800330327127E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9995797741437724	WITHOUT_CLASSIFICATION	4.202258562275461E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999492258866857	WITHOUT_CLASSIFICATION	5.0774113314411686E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999389907683007	WITHOUT_CLASSIFICATION	6.100923169921378E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999963396152382	WITHOUT_CLASSIFICATION	3.6603847618049797E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999901304479133	WITHOUT_CLASSIFICATION	9.869552086643667E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999820076093309	WITHOUT_CLASSIFICATION	1.7992390669074977E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992473584688164	WITHOUT_CLASSIFICATION	7.526415311835913E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997125622135894	WITHOUT_CLASSIFICATION	2.874377864106395E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999969789447591	WITHOUT_CLASSIFICATION	3.0210552407857594E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997116133686369	WITHOUT_CLASSIFICATION	2.883866313631718E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997116133686369	WITHOUT_CLASSIFICATION	2.883866313631718E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999076015673436	WITHOUT_CLASSIFICATION	9.239843265643125E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999991006481455	WITHOUT_CLASSIFICATION	8.993518544984973E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999850291399431	WITHOUT_CLASSIFICATION	1.497086005690115E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999315494667208	WITHOUT_CLASSIFICATION	6.84505332791671E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9793071364207379	WITHOUT_CLASSIFICATION	0.02069286357926219	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049108362147416	WITHOUT_CLASSIFICATION	0.4950891637852583	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049108362147416	WITHOUT_CLASSIFICATION	0.4950891637852583	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999913767979326	WITHOUT_CLASSIFICATION	8.623202067302263E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9995496236144522	WITHOUT_CLASSIFICATION	4.503763855478552E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999865624419937	WITHOUT_CLASSIFICATION	1.3437558006279072E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023527184532	WITHOUT_CLASSIFICATION	9.764728154672122E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999625473313168	WITHOUT_CLASSIFICATION	3.74526686831946E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999052028767045	WITHOUT_CLASSIFICATION	9.479712329551138E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9994477655038897	WITHOUT_CLASSIFICATION	5.522344961103653E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9998003939247979	WITHOUT_CLASSIFICATION	1.9960607520214268E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9983640546736987	WITHOUT_CLASSIFICATION	0.0016359453263012716	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9983640546736987	WITHOUT_CLASSIFICATION	0.0016359453263012716	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992160421402694	WITHOUT_CLASSIFICATION	7.839578597305893E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9538377562431711	WITHOUT_CLASSIFICATION	0.04616224375682896	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999903794779878	WITHOUT_CLASSIFICATION	9.620522012199705E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999175532612307	WITHOUT_CLASSIFICATION	8.244673876930664E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999714333228596	WITHOUT_CLASSIFICATION	2.8566677140251298E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999970855169154	WITHOUT_CLASSIFICATION	2.914483084585466E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9984902196510127	WITHOUT_CLASSIFICATION	0.001509780348987195	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999189426851781	WITHOUT_CLASSIFICATION	8.105731482193773E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9981159401175985	WITHOUT_CLASSIFICATION	0.0018840598824014113	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9996567985142126	WITHOUT_CLASSIFICATION	3.432014857873821E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9995960168106115	WITHOUT_CLASSIFICATION	4.0398318938858203E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997163947969141	WITHOUT_CLASSIFICATION	2.836052030859498E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99997553422933	WITHOUT_CLASSIFICATION	2.4465770669919225E-5	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999477663270145	WITHOUT_CLASSIFICATION	5.223367298549091E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999923191532415	WITHOUT_CLASSIFICATION	7.680846758589054E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999940296393792	WITHOUT_CLASSIFICATION	5.970360620820555E-6	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999709895906506	WITHOUT_CLASSIFICATION	2.901040934943939E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999910618030029	WITHOUT_CLASSIFICATION	8.938196997070478E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999865118776594	WITHOUT_CLASSIFICATION	1.3488122340542628E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999908525843801	WITHOUT_CLASSIFICATION	9.14741561982225E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999548077362908	WITHOUT_CLASSIFICATION	4.5192263709177816E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999975247385312	WITHOUT_CLASSIFICATION	2.47526146869437E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998165029328354	WITHOUT_CLASSIFICATION	1.8349706716468668E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998191660286925	WITHOUT_CLASSIFICATION	1.8083397130749104E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6924922595325056	IMPLEMENTATION	0.30750774046749446	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9996810124128924	WITHOUT_CLASSIFICATION	3.189875871075696E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999846901477947	WITHOUT_CLASSIFICATION	1.53098522054095E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9980879565112063	WITHOUT_CLASSIFICATION	0.0019120434887936442	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999970044267532	WITHOUT_CLASSIFICATION	2.995573246688701E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999984802508675	WITHOUT_CLASSIFICATION	1.519749132492519E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9997903202292137	WITHOUT_CLASSIFICATION	2.0967977078631677E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999737021626868	WITHOUT_CLASSIFICATION	2.629783731321872E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999976478446554	WITHOUT_CLASSIFICATION	2.352155344745749E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999880276453553	WITHOUT_CLASSIFICATION	1.1972354644701742E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999910865743894	WITHOUT_CLASSIFICATION	8.913425610641746E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997893917972	WITHOUT_CLASSIFICATION	2.1060820283356578E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999880276453553	WITHOUT_CLASSIFICATION	1.1972354644701742E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.998417464069381	WITHOUT_CLASSIFICATION	0.0015825359306190709	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998632373830194	WITHOUT_CLASSIFICATION	1.367626169806291E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9996980514360796	WITHOUT_CLASSIFICATION	3.0194856392043435E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999487231755362	WITHOUT_CLASSIFICATION	5.1276824463678245E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468324890541	WITHOUT_CLASSIFICATION	5.316751094592369E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468324890541	WITHOUT_CLASSIFICATION	5.316751094592369E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9983644213948673	WITHOUT_CLASSIFICATION	0.0016355786051327928	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999991103681847	WITHOUT_CLASSIFICATION	8.896318152935264E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999976066880597	WITHOUT_CLASSIFICATION	2.3933119403735823E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998915499167282	WITHOUT_CLASSIFICATION	1.0845008327182498E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999962323108444	WITHOUT_CLASSIFICATION	3.767689155571396E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999359832673449	WITHOUT_CLASSIFICATION	6.401673265512623E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9984389579021539	WITHOUT_CLASSIFICATION	0.0015610420978462013	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999666644153162	WITHOUT_CLASSIFICATION	3.333558468379336E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999897464184169	WITHOUT_CLASSIFICATION	1.0253581583099759E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999773554256449	WITHOUT_CLASSIFICATION	2.2644574355087493E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999773554256449	WITHOUT_CLASSIFICATION	2.2644574355087493E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998998495201528	WITHOUT_CLASSIFICATION	1.0015047984729442E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998789575496538	WITHOUT_CLASSIFICATION	1.2104245034608303E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999848775092699	WITHOUT_CLASSIFICATION	1.5122490730099878E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999773554256449	WITHOUT_CLASSIFICATION	2.2644574355087493E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998998495201528	WITHOUT_CLASSIFICATION	1.0015047984729442E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998998495201528	WITHOUT_CLASSIFICATION	1.0015047984729442E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999966834498486	WITHOUT_CLASSIFICATION	3.3165501513971965E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998644502710666	WITHOUT_CLASSIFICATION	1.3554972893339512E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999673927998	WITHOUT_CLASSIFICATION	3.260720011201747E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999950480868488	WITHOUT_CLASSIFICATION	4.95191315113745E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991324521122552	WITHOUT_CLASSIFICATION	8.67547887744836E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991324521122552	WITHOUT_CLASSIFICATION	8.67547887744836E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999652691078638	WITHOUT_CLASSIFICATION	3.473089213626497E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992189952429841	WITHOUT_CLASSIFICATION	7.810047570159127E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999791418831909	WITHOUT_CLASSIFICATION	2.085811680908194E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999988317032525	WITHOUT_CLASSIFICATION	1.168296747468874E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999988317032525	WITHOUT_CLASSIFICATION	1.168296747468874E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9995939220463238	WITHOUT_CLASSIFICATION	4.060779536762456E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985954630463089	WITHOUT_CLASSIFICATION	0.0014045369536912263	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999431366012723	WITHOUT_CLASSIFICATION	5.686339872768507E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999826182795	WITHOUT_CLASSIFICATION	1.7381720447310883E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999908857374729	WITHOUT_CLASSIFICATION	9.114262527198132E-6	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999159791896736	WITHOUT_CLASSIFICATION	8.402081032640766E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998733319382208	WITHOUT_CLASSIFICATION	1.2666806177915723E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9996628784405147	WITHOUT_CLASSIFICATION	3.371215594852201E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999431366012723	WITHOUT_CLASSIFICATION	5.686339872768507E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9992007771003224	WITHOUT_CLASSIFICATION	7.992228996775972E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999034191299064	WITHOUT_CLASSIFICATION	9.658087009359753E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999034191299064	WITHOUT_CLASSIFICATION	9.658087009359753E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999602544382	WITHOUT_CLASSIFICATION	3.974556178387357E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999856665492568	WITHOUT_CLASSIFICATION	1.4333450743229936E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9914762421058798	WITHOUT_CLASSIFICATION	0.008523757894120155	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998751828810812	WITHOUT_CLASSIFICATION	1.2481711891880703E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9996795980725324	WITHOUT_CLASSIFICATION	3.2040192746756997E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9992679076831474	WITHOUT_CLASSIFICATION	7.320923168525201E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998930681549896	WITHOUT_CLASSIFICATION	1.0693184501046812E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998314963842975	WITHOUT_CLASSIFICATION	1.6850361570246107E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994262803725	WITHOUT_CLASSIFICATION	5.737196273514735E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994262803725	WITHOUT_CLASSIFICATION	5.737196273514735E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998242267716874	WITHOUT_CLASSIFICATION	1.757732283125482E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999527387818697	WITHOUT_CLASSIFICATION	4.726121813032821E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.99993139489935	WITHOUT_CLASSIFICATION	6.860510064999093E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999495042138846	WITHOUT_CLASSIFICATION	5.049578611546049E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999125680571544	WITHOUT_CLASSIFICATION	8.743194284558285E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999770526499781	WITHOUT_CLASSIFICATION	2.2947350021900552E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999618705515849	WITHOUT_CLASSIFICATION	3.812944841501045E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999908058450243	WITHOUT_CLASSIFICATION	9.194154975759018E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999907475412267	WITHOUT_CLASSIFICATION	9.252458773250494E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999316427517264	WITHOUT_CLASSIFICATION	6.83572482735969E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.999770526499781	WITHOUT_CLASSIFICATION	2.2947350021900552E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999715312348173	WITHOUT_CLASSIFICATION	2.8468765182778914E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.99964419036151	WITHOUT_CLASSIFICATION	3.5580963848996636E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999917073492792	WITHOUT_CLASSIFICATION	8.292650720796227E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999535054943538	WITHOUT_CLASSIFICATION	4.64945056462584E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999988485961571	WITHOUT_CLASSIFICATION	1.1514038428976142E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999911525702998	WITHOUT_CLASSIFICATION	8.84742970021052E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995171995960143	WITHOUT_CLASSIFICATION	4.8280040398581764E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997326188420421	WITHOUT_CLASSIFICATION	2.67381157957917E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999667951600971	WITHOUT_CLASSIFICATION	3.320483990290057E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999630862640034	WITHOUT_CLASSIFICATION	3.691373599660239E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997129541912662	WITHOUT_CLASSIFICATION	2.8704580873386204E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999681420026477	WITHOUT_CLASSIFICATION	3.185799735230595E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999847542728936	WITHOUT_CLASSIFICATION	1.5245727106470082E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999708591680925	WITHOUT_CLASSIFICATION	2.914083190764168E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9960632014126953	WITHOUT_CLASSIFICATION	0.003936798587304613	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.999993947065847	WITHOUT_CLASSIFICATION	6.0529341529188845E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999907475412267	WITHOUT_CLASSIFICATION	9.252458773250494E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997129541912662	WITHOUT_CLASSIFICATION	2.8704580873386204E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999979347508934	WITHOUT_CLASSIFICATION	2.0652491066234927E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999295383163115	WITHOUT_CLASSIFICATION	7.046168368859104E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999111018221166	WITHOUT_CLASSIFICATION	8.889817788335905E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999447111309899	WITHOUT_CLASSIFICATION	5.528886901006485E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997258727409284	WITHOUT_CLASSIFICATION	2.741272590715937E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999584663687522	WITHOUT_CLASSIFICATION	4.1533631247861407E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999240372444906	WITHOUT_CLASSIFICATION	7.596275550936923E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998389029556194	WITHOUT_CLASSIFICATION	1.6109704438067878E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998389029556194	WITHOUT_CLASSIFICATION	1.6109704438067878E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999917946046886	WITHOUT_CLASSIFICATION	8.205395311407906E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999586757142824	WITHOUT_CLASSIFICATION	4.1324285717581646E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999823347157991	WITHOUT_CLASSIFICATION	1.7665284200923362E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999033963104124	WITHOUT_CLASSIFICATION	9.66036895876004E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999442710255892	WITHOUT_CLASSIFICATION	5.57289744108065E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999580122117186	WITHOUT_CLASSIFICATION	4.1987788281284936E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999884311741771	WITHOUT_CLASSIFICATION	1.1568825822751233E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999116389427604	WITHOUT_CLASSIFICATION	8.836105723972461E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999670163682394	WITHOUT_CLASSIFICATION	3.298363176072146E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999670163682394	WITHOUT_CLASSIFICATION	3.298363176072146E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999670163682394	WITHOUT_CLASSIFICATION	3.298363176072146E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999607272311316	WITHOUT_CLASSIFICATION	3.927276886830151E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999670163682394	WITHOUT_CLASSIFICATION	3.298363176072146E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999954829502732	WITHOUT_CLASSIFICATION	4.517049726803349E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999944725018708	WITHOUT_CLASSIFICATION	5.527498129140249E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898995246179	WITHOUT_CLASSIFICATION	1.010047538203257E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999907475412267	WITHOUT_CLASSIFICATION	9.252458773250494E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997129541912662	WITHOUT_CLASSIFICATION	2.8704580873386204E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997129541912662	WITHOUT_CLASSIFICATION	2.8704580873386204E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9997215440121638	WITHOUT_CLASSIFICATION	2.784559878362181E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9996246949968679	WITHOUT_CLASSIFICATION	3.7530500313211716E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999781999626648	WITHOUT_CLASSIFICATION	2.1800037335241078E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999459967529952	WITHOUT_CLASSIFICATION	5.400324700483547E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999459967529952	WITHOUT_CLASSIFICATION	5.400324700483547E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9924948498076293	WITHOUT_CLASSIFICATION	0.007505150192370755	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999929871337692	WITHOUT_CLASSIFICATION	7.012866230912732E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999946116410686	WITHOUT_CLASSIFICATION	5.3883589313498375E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999914980676526	WITHOUT_CLASSIFICATION	8.501932347334828E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999971657955292	WITHOUT_CLASSIFICATION	2.8342044707665223E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999903086372073	WITHOUT_CLASSIFICATION	9.691362792669225E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993737401522	WITHOUT_CLASSIFICATION	6.262598477070832E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999901051577678	WITHOUT_CLASSIFICATION	9.894842232184164E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999901051577678	WITHOUT_CLASSIFICATION	9.894842232184164E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999871161996697	WITHOUT_CLASSIFICATION	1.2883800330327127E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999871161996697	WITHOUT_CLASSIFICATION	1.2883800330327127E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9996562651212036	WITHOUT_CLASSIFICATION	3.4373487879632054E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9996562651212036	WITHOUT_CLASSIFICATION	3.4373487879632054E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999078921346157	WITHOUT_CLASSIFICATION	9.210786538426563E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999078921346157	WITHOUT_CLASSIFICATION	9.210786538426563E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999459967529952	WITHOUT_CLASSIFICATION	5.400324700483547E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999993737401522	WITHOUT_CLASSIFICATION	6.262598477070832E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999901051577678	WITHOUT_CLASSIFICATION	9.894842232184164E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999901051577678	WITHOUT_CLASSIFICATION	9.894842232184164E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999871161996697	WITHOUT_CLASSIFICATION	1.2883800330327127E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9996562651212036	WITHOUT_CLASSIFICATION	3.4373487879632054E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9996562651212036	WITHOUT_CLASSIFICATION	3.4373487879632054E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999078921346157	WITHOUT_CLASSIFICATION	9.210786538426563E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999291965374386	WITHOUT_CLASSIFICATION	7.080346256147288E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9992253245253598	WITHOUT_CLASSIFICATION	7.746754746401889E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.99905034272654	WITHOUT_CLASSIFICATION	9.496572734599806E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9994991101955518	WITHOUT_CLASSIFICATION	5.008898044481748E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997606754574	WITHOUT_CLASSIFICATION	2.3932454259998931E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999900332387899	WITHOUT_CLASSIFICATION	9.966761210079749E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999627812391721	WITHOUT_CLASSIFICATION	3.721876082788914E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999874559873064	WITHOUT_CLASSIFICATION	1.2544012693584403E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999651860784249	WITHOUT_CLASSIFICATION	3.48139215751544E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9992012396858753	WITHOUT_CLASSIFICATION	7.987603141248048E-4	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998995391097396	WITHOUT_CLASSIFICATION	1.0046089026040614E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999731732069768	WITHOUT_CLASSIFICATION	2.6826793023221933E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9983644213948673	WITHOUT_CLASSIFICATION	0.0016355786051327928	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999900332387899	WITHOUT_CLASSIFICATION	9.966761210079749E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999954348507277	WITHOUT_CLASSIFICATION	4.565149272242694E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998888180723229	WITHOUT_CLASSIFICATION	1.1118192767701191E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998888180723229	WITHOUT_CLASSIFICATION	1.1118192767701191E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9983520272036168	WITHOUT_CLASSIFICATION	0.0016479727963831367	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995872318587	WITHOUT_CLASSIFICATION	4.1276814130874043E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999035087365241	WITHOUT_CLASSIFICATION	9.649126347581435E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996930941520445	WITHOUT_CLASSIFICATION	3.069058479555121E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996930941520445	WITHOUT_CLASSIFICATION	3.069058479555121E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999963396152382	WITHOUT_CLASSIFICATION	3.6603847618049797E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999850107619288	WITHOUT_CLASSIFICATION	1.4989238071194046E-4	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999850107619288	WITHOUT_CLASSIFICATION	1.4989238071194046E-4	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998053793760596	WITHOUT_CLASSIFICATION	1.9462062394025084E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999995484162096	WITHOUT_CLASSIFICATION	4.515837903862889E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999969789447591	WITHOUT_CLASSIFICATION	3.0210552407857594E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999907116280736	WITHOUT_CLASSIFICATION	9.288371926404024E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999901304479133	WITHOUT_CLASSIFICATION	9.869552086643667E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.7870267952826172	WITHOUT_CLASSIFICATION	0.2129732047173828	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999820004534238	WITHOUT_CLASSIFICATION	1.7999546576273037E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999843672993799	WITHOUT_CLASSIFICATION	1.5632700620096937E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999473049621153	WITHOUT_CLASSIFICATION	5.269503788462428E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999708022798567	WITHOUT_CLASSIFICATION	2.9197720143295313E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999995420896247	WITHOUT_CLASSIFICATION	4.579103753096109E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999315494667208	WITHOUT_CLASSIFICATION	6.84505332791671E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999427865048006	WITHOUT_CLASSIFICATION	5.721349519937846E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999720037918574	WITHOUT_CLASSIFICATION	2.799620814259533E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999901252145649	WITHOUT_CLASSIFICATION	9.874785435102263E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997106674204892	WITHOUT_CLASSIFICATION	2.893325795108812E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999389312523228	WITHOUT_CLASSIFICATION	6.106874767723121E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998099982014995	WITHOUT_CLASSIFICATION	1.9000179850061432E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999969789447591	WITHOUT_CLASSIFICATION	3.0210552407857594E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9994547611904859	WITHOUT_CLASSIFICATION	5.452388095140881E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999032634374821	WITHOUT_CLASSIFICATION	9.673656251778608E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999904765705676	WITHOUT_CLASSIFICATION	9.523429432444667E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999901304479133	WITHOUT_CLASSIFICATION	9.869552086643667E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998099982014995	WITHOUT_CLASSIFICATION	1.9000179850061432E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9994547611904859	WITHOUT_CLASSIFICATION	5.452388095140881E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999904765705676	WITHOUT_CLASSIFICATION	9.523429432444667E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998928831432866	WITHOUT_CLASSIFICATION	1.0711685671339221E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998928831432866	WITHOUT_CLASSIFICATION	1.0711685671339221E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997116133686369	WITHOUT_CLASSIFICATION	2.883866313631718E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9994286547406134	WITHOUT_CLASSIFICATION	5.713452593866936E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.998388753061726	WITHOUT_CLASSIFICATION	0.0016112469382739884	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999994155853131	WITHOUT_CLASSIFICATION	5.844146867860742E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999567930140282	WITHOUT_CLASSIFICATION	4.320698597177016E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.998091792899417	WITHOUT_CLASSIFICATION	0.0019082071005830608	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999781537420074	WITHOUT_CLASSIFICATION	2.1846257992712626E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9988412692055043	WITHOUT_CLASSIFICATION	0.0011587307944956485	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9992701172179193	WITHOUT_CLASSIFICATION	7.298827820806514E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999781537420074	WITHOUT_CLASSIFICATION	2.1846257992712626E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999991006481455	WITHOUT_CLASSIFICATION	8.993518544984973E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9978867394534122	WITHOUT_CLASSIFICATION	0.002113260546587772	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998099982014995	WITHOUT_CLASSIFICATION	1.9000179850061432E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999263432558874	WITHOUT_CLASSIFICATION	7.365674411260522E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999759533930468	WITHOUT_CLASSIFICATION	2.4046606953282376E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9957056097125796	WITHOUT_CLASSIFICATION	0.004294390287420407	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999149426860171	WITHOUT_CLASSIFICATION	8.505731398295496E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999212142685433	WITHOUT_CLASSIFICATION	7.878573145670022E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999994896228742	WITHOUT_CLASSIFICATION	5.103771257366678E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999837155285517	WITHOUT_CLASSIFICATION	1.6284471448349125E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9978963469612343	WITHOUT_CLASSIFICATION	0.002103653038765733	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997456885566037	WITHOUT_CLASSIFICATION	2.5431144339629625E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994771786248897	WITHOUT_CLASSIFICATION	5.228213751102622E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999784609824892	WITHOUT_CLASSIFICATION	2.1539017510799243E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999315494667208	WITHOUT_CLASSIFICATION	6.84505332791671E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999332360144023	WITHOUT_CLASSIFICATION	6.676398559772114E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999487631356674	WITHOUT_CLASSIFICATION	5.1236864332706856E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9993752921947402	WITHOUT_CLASSIFICATION	6.247078052598239E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999803632880247	WITHOUT_CLASSIFICATION	1.963671197529609E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998572242569068	WITHOUT_CLASSIFICATION	1.4277574309318916E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999945386755481	WITHOUT_CLASSIFICATION	5.4613244518961055E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999370792172	WITHOUT_CLASSIFICATION	6.2920782832413E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999900349448874	WITHOUT_CLASSIFICATION	9.965055112745492E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9909611917048434	WITHOUT_CLASSIFICATION	0.00903880829515653	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997381898985648	WITHOUT_CLASSIFICATION	2.6181010143527935E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9838113619574924	WITHOUT_CLASSIFICATION	0.016188638042507603	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9838113619574924	WITHOUT_CLASSIFICATION	0.016188638042507603	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997566279896769	WITHOUT_CLASSIFICATION	2.4337201032323389E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999556512342469	WITHOUT_CLASSIFICATION	4.434876575314236E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999770080966196	WITHOUT_CLASSIFICATION	2.2991903380403252E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999417719281771	WITHOUT_CLASSIFICATION	5.8228071822976114E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996282063088859	WITHOUT_CLASSIFICATION	3.717936911140925E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9989996455640169	WITHOUT_CLASSIFICATION	0.0010003544359831048	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999860663591082	WITHOUT_CLASSIFICATION	1.3933640891654983E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9961020533370669	WITHOUT_CLASSIFICATION	0.0038979466629331266	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999399295668034	WITHOUT_CLASSIFICATION	6.0070433196641216E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996882760482377	WITHOUT_CLASSIFICATION	3.117239517621522E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999877994245115	WITHOUT_CLASSIFICATION	1.2200575488488581E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9995976068793283	WITHOUT_CLASSIFICATION	4.02393120671657E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.996248742357616	WITHOUT_CLASSIFICATION	0.0037512576423840423	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960091832503	WITHOUT_CLASSIFICATION	3.990816749701431E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999840092977096	WITHOUT_CLASSIFICATION	1.5990702290389586E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999985888244462	WITHOUT_CLASSIFICATION	1.4111755538051394E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999131902422	WITHOUT_CLASSIFICATION	8.680975780250562E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999137654831609	WITHOUT_CLASSIFICATION	8.62345168391649E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.99997522898485	WITHOUT_CLASSIFICATION	2.477101515000201E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999990907191107	WITHOUT_CLASSIFICATION	9.092808893105968E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999990907191107	WITHOUT_CLASSIFICATION	9.092808893105968E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9983302975163759	WITHOUT_CLASSIFICATION	0.0016697024836240615	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9983302975163759	WITHOUT_CLASSIFICATION	0.0016697024836240615	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9909611917048434	WITHOUT_CLASSIFICATION	0.00903880829515653	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9986854978044671	WITHOUT_CLASSIFICATION	0.0013145021955328002	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.996701146820053	WITHOUT_CLASSIFICATION	0.0032988531799470733	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9993933933502074	WITHOUT_CLASSIFICATION	6.066066497925275E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.996701146820053	WITHOUT_CLASSIFICATION	0.0032988531799470733	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9993933933502074	WITHOUT_CLASSIFICATION	6.066066497925275E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997117406068673	WITHOUT_CLASSIFICATION	2.882593931326804E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999945269431828	WITHOUT_CLASSIFICATION	5.473056817166411E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999955046231071	WITHOUT_CLASSIFICATION	4.495376892893952E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999992759421278	WITHOUT_CLASSIFICATION	7.240578720738918E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9936076492210951	WITHOUT_CLASSIFICATION	0.0063923507789049915	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9994575932385436	WITHOUT_CLASSIFICATION	5.42406761456351E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9994367654662256	WITHOUT_CLASSIFICATION	5.632345337744043E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9990625739389873	WITHOUT_CLASSIFICATION	9.374260610127196E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999632287248967	WITHOUT_CLASSIFICATION	3.677127510322231E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999989933737855	WITHOUT_CLASSIFICATION	1.0066262144240618E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997614134900089	WITHOUT_CLASSIFICATION	2.385865099911035E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999996806481132	WITHOUT_CLASSIFICATION	3.193518867317273E-7	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999926134769542	WITHOUT_CLASSIFICATION	7.386523045812797E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9997512859260226	WITHOUT_CLASSIFICATION	2.4871407397747175E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9997512859260226	WITHOUT_CLASSIFICATION	2.4871407397747175E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999234630268619	WITHOUT_CLASSIFICATION	7.653697313818123E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999234630268619	WITHOUT_CLASSIFICATION	7.653697313818123E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999940777102231	WITHOUT_CLASSIFICATION	5.922289776982756E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997117406068673	WITHOUT_CLASSIFICATION	2.882593931326804E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9954319522926849	WITHOUT_CLASSIFICATION	0.00456804770731514	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999836778847041	WITHOUT_CLASSIFICATION	1.632211529588265E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9945896784011581	WITHOUT_CLASSIFICATION	0.005410321598841988	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999319503574796	WITHOUT_CLASSIFICATION	6.804964252035067E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9983242817769912	WITHOUT_CLASSIFICATION	0.0016757182230088534	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997117406068673	WITHOUT_CLASSIFICATION	2.882593931326804E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999319503574796	WITHOUT_CLASSIFICATION	6.804964252035067E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9983242817769912	WITHOUT_CLASSIFICATION	0.0016757182230088534	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995261383834985	WITHOUT_CLASSIFICATION	4.7386161650161545E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997011345199649	WITHOUT_CLASSIFICATION	2.988654800350715E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999310430670134	WITHOUT_CLASSIFICATION	6.895693298659371E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997117406068673	WITHOUT_CLASSIFICATION	2.882593931326804E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997117406068673	WITHOUT_CLASSIFICATION	2.882593931326804E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999631084606049	WITHOUT_CLASSIFICATION	3.6891539395163195E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999622665532141	WITHOUT_CLASSIFICATION	3.773344678590546E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9998193986366894	WITHOUT_CLASSIFICATION	1.8060136331062785E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999963767623318	WITHOUT_CLASSIFICATION	3.623237668196507E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997739960161237	WITHOUT_CLASSIFICATION	2.2600398387622754E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999996584501864	WITHOUT_CLASSIFICATION	3.4154981359548525E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999572300877904	WITHOUT_CLASSIFICATION	4.276991220959391E-4	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999707075352889	WITHOUT_CLASSIFICATION	2.9292464711099083E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999790627862012	WITHOUT_CLASSIFICATION	2.0937213798767037E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9997935237079243	WITHOUT_CLASSIFICATION	2.0647629207575243E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9979471166536901	WITHOUT_CLASSIFICATION	0.002052883346310014	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9979460725577072	WITHOUT_CLASSIFICATION	0.002053927442292829	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999969404896173	WITHOUT_CLASSIFICATION	3.0595103826066194E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9995364739297407	WITHOUT_CLASSIFICATION	4.635260702592314E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998308528952103	WITHOUT_CLASSIFICATION	1.6914710478968306E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999966611524327	WITHOUT_CLASSIFICATION	3.338847567313401E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023527184532	WITHOUT_CLASSIFICATION	9.764728154672122E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998380994157947	WITHOUT_CLASSIFICATION	1.619005842053581E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9991231611080431	WITHOUT_CLASSIFICATION	8.768388919567656E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9993933933502074	WITHOUT_CLASSIFICATION	6.066066497925275E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9980763185672306	WITHOUT_CLASSIFICATION	0.001923681432769444	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023527184532	WITHOUT_CLASSIFICATION	9.764728154672122E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9976297232293887	WITHOUT_CLASSIFICATION	0.0023702767706113427	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999928075653679	WITHOUT_CLASSIFICATION	7.192434632014935E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9796826492375231	WITHOUT_CLASSIFICATION	0.020317350762476868	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998477117150899	WITHOUT_CLASSIFICATION	1.5228828490999885E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9984229777623895	WITHOUT_CLASSIFICATION	0.001577022237610469	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999884138848372	WITHOUT_CLASSIFICATION	1.158611516285963E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999910592974029	WITHOUT_CLASSIFICATION	8.940702597107465E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997619915803816	WITHOUT_CLASSIFICATION	2.380084196185166E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999802005507251	WITHOUT_CLASSIFICATION	1.9799449274916696E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999881563024765	WITHOUT_CLASSIFICATION	1.1843697523486334E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999731888077468	WITHOUT_CLASSIFICATION	2.6811192253146286E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999169917519353	WITHOUT_CLASSIFICATION	8.300824806482618E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999118570232078	WITHOUT_CLASSIFICATION	8.814297679209793E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839950216066	WITHOUT_CLASSIFICATION	1.6004978393381962E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996408869231515	WITHOUT_CLASSIFICATION	3.5911307684856185E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9962806172094841	WITHOUT_CLASSIFICATION	0.003719382790515968	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9977011352002517	WITHOUT_CLASSIFICATION	0.0022988647997482297	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999891478052316	WITHOUT_CLASSIFICATION	1.0852194768398071E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999973573768866	WITHOUT_CLASSIFICATION	2.642623113440246E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9975410396304257	WITHOUT_CLASSIFICATION	0.002458960369574222	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999684451371893	WITHOUT_CLASSIFICATION	3.1554862810676465E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973267008639473	WITHOUT_CLASSIFICATION	0.002673299136052843	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998307033958607	WITHOUT_CLASSIFICATION	0.001692966041392989	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982414044910008	WITHOUT_CLASSIFICATION	0.0017585955089990668	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247697897043	WITHOUT_CLASSIFICATION	7.523021029565731E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979007998758813	WITHOUT_CLASSIFICATION	0.0020992001241186887	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9997589190335314	WITHOUT_CLASSIFICATION	2.410809664685443E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999045277675543	WITHOUT_CLASSIFICATION	9.547223244559406E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986105459450282	WITHOUT_CLASSIFICATION	0.0013894540549718331	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987297397529293	WITHOUT_CLASSIFICATION	0.0012702602470707057	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968639696733009	WITHOUT_CLASSIFICATION	0.003136030326699031	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9957135579035187	WITHOUT_CLASSIFICATION	0.0042864420964814	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977996640186897	WITHOUT_CLASSIFICATION	0.0022003359813102543	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977518580640813	WITHOUT_CLASSIFICATION	0.002248141935918773	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999824344193652	WITHOUT_CLASSIFICATION	1.7565580634852755E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999045934661426	WITHOUT_CLASSIFICATION	9.540653385740907E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7889366477779074	IMPLEMENTATION	0.2110633522220925	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899388058272	WITHOUT_CLASSIFICATION	1.0061194172724243E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999971778254518	WITHOUT_CLASSIFICATION	2.822174548173412E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991882743499955	WITHOUT_CLASSIFICATION	8.117256500045543E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9983443895148775	WITHOUT_CLASSIFICATION	0.0016556104851225284	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997763200559932	WITHOUT_CLASSIFICATION	2.2367994400674523E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995261383834985	WITHOUT_CLASSIFICATION	4.7386161650161545E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997132600184772	WITHOUT_CLASSIFICATION	2.8673998152279424E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997234848689313	WITHOUT_CLASSIFICATION	2.765151310687638E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999409575678693	WITHOUT_CLASSIFICATION	5.9042432130783916E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999590278669998	WITHOUT_CLASSIFICATION	4.0972133000267504E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997116387283503	WITHOUT_CLASSIFICATION	2.883612716496809E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999658717469593	WITHOUT_CLASSIFICATION	3.4128253040685975E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.998365729103252	WITHOUT_CLASSIFICATION	0.0016342708967478916	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998892301449706	WITHOUT_CLASSIFICATION	1.1076985502955533E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997155069075728	WITHOUT_CLASSIFICATION	2.844930924271779E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035681394705	WITHOUT_CLASSIFICATION	9.643186052958159E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999425419702902	WITHOUT_CLASSIFICATION	5.74580297098504E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999208330811834	WITHOUT_CLASSIFICATION	7.916691881662812E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048977527685	WITHOUT_CLASSIFICATION	9.510224723154279E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9995952751265864	WITHOUT_CLASSIFICATION	4.047248734136336E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998949819598884	WITHOUT_CLASSIFICATION	1.0501804011164982E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999512273876036	WITHOUT_CLASSIFICATION	4.877261239654165E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998302601599911	WITHOUT_CLASSIFICATION	1.697398400088546E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997602414649215	WITHOUT_CLASSIFICATION	2.397585350786127E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999417036966592	WITHOUT_CLASSIFICATION	5.829630334083449E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999775193902926	WITHOUT_CLASSIFICATION	2.2480609707423545E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999710235213836	WITHOUT_CLASSIFICATION	2.897647861639053E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999266184124099	WITHOUT_CLASSIFICATION	7.338158759012675E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998597988020526	WITHOUT_CLASSIFICATION	1.4020119794748388E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9976130583172967	WITHOUT_CLASSIFICATION	0.0023869416827032317	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999983692393182	WITHOUT_CLASSIFICATION	1.6307606817759956E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998795324803083	WITHOUT_CLASSIFICATION	1.2046751969183615E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991882743499955	WITHOUT_CLASSIFICATION	8.117256500045543E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9994597885726696	WITHOUT_CLASSIFICATION	5.40211427330381E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999957757202638	WITHOUT_CLASSIFICATION	4.224279736226868E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998063271229448	WITHOUT_CLASSIFICATION	1.9367287705525705E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899388058272	WITHOUT_CLASSIFICATION	1.0061194172724243E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999032303889496	WITHOUT_CLASSIFICATION	9.676961105041285E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.999964085854984	WITHOUT_CLASSIFICATION	3.591414501600301E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999361697805211	WITHOUT_CLASSIFICATION	6.38302194788612E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999998171092961	WITHOUT_CLASSIFICATION	1.8289070390801937E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997477391759092	WITHOUT_CLASSIFICATION	2.5226082409077975E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999690640203595	WITHOUT_CLASSIFICATION	3.093597964051141E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998088522799946	WITHOUT_CLASSIFICATION	1.9114772000527902E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999181354220893	WITHOUT_CLASSIFICATION	8.186457791060105E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999044542017557	WITHOUT_CLASSIFICATION	9.554579824434358E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990163750759268	WITHOUT_CLASSIFICATION	9.836249240731886E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999996166179103	WITHOUT_CLASSIFICATION	3.833820897765829E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999936548774868	WITHOUT_CLASSIFICATION	6.345122513254652E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995261383834985	WITHOUT_CLASSIFICATION	4.7386161650161545E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999898933569915	WITHOUT_CLASSIFICATION	1.0106643008523688E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999607446199573	WITHOUT_CLASSIFICATION	3.925538004264136E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999593491795247	WITHOUT_CLASSIFICATION	4.0650820475306665E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999816974373875	WITHOUT_CLASSIFICATION	1.8302562612426094E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998677674433682	WITHOUT_CLASSIFICATION	1.3223255663179337E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999806814477345	WITHOUT_CLASSIFICATION	1.9318552265503447E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999626214180364	WITHOUT_CLASSIFICATION	3.7378581963739474E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997701859184187	WITHOUT_CLASSIFICATION	2.2981408158130416E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999906184576983	WITHOUT_CLASSIFICATION	9.381542301763891E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992473584688164	WITHOUT_CLASSIFICATION	7.526415311835913E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9984276359497151	WITHOUT_CLASSIFICATION	0.0015723640502850118	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996423822499386	WITHOUT_CLASSIFICATION	3.576177500613642E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899388058272	WITHOUT_CLASSIFICATION	1.0061194172724243E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991882743499955	WITHOUT_CLASSIFICATION	8.117256500045543E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997734966468481	WITHOUT_CLASSIFICATION	2.265033531518097E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9988140993747885	WITHOUT_CLASSIFICATION	0.0011859006252115285	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9962323186757366	WITHOUT_CLASSIFICATION	0.0037676813242633537	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991882743499955	WITHOUT_CLASSIFICATION	8.117256500045543E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999847199552314	WITHOUT_CLASSIFICATION	1.5280044768550215E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999816974373875	WITHOUT_CLASSIFICATION	1.8302562612426094E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9996412881886896	WITHOUT_CLASSIFICATION	3.5871181131036085E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998881901818398	WITHOUT_CLASSIFICATION	1.1180981816010984E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999966940900641	WITHOUT_CLASSIFICATION	3.305909935955904E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999690640203595	WITHOUT_CLASSIFICATION	3.093597964051141E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998088522799946	WITHOUT_CLASSIFICATION	1.9114772000527902E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999181354220893	WITHOUT_CLASSIFICATION	8.186457791060105E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999824171496714	WITHOUT_CLASSIFICATION	1.758285032852777E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999047293478991	WITHOUT_CLASSIFICATION	9.527065210092607E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9997301602133314	WITHOUT_CLASSIFICATION	2.698397866685986E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999930309451652	WITHOUT_CLASSIFICATION	6.969054834722843E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999414343962345	WITHOUT_CLASSIFICATION	5.8565603765477093E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991882743499955	WITHOUT_CLASSIFICATION	8.117256500045543E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999044542017557	WITHOUT_CLASSIFICATION	9.554579824434358E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990163750759268	WITHOUT_CLASSIFICATION	9.836249240731886E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759615123927	WITHOUT_CLASSIFICATION	2.403848760741325E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997700112569218	WITHOUT_CLASSIFICATION	2.2998874307815167E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998873623796345	WITHOUT_CLASSIFICATION	1.1263762036543441E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999989433048335	WITHOUT_CLASSIFICATION	1.056695166495796E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9988225595231263	WITHOUT_CLASSIFICATION	0.0011774404768736813	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999984099880387	WITHOUT_CLASSIFICATION	1.590011961220848E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998425864349377	WITHOUT_CLASSIFICATION	1.57413565062224E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999594332447409	WITHOUT_CLASSIFICATION	4.05667552591517E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999626101084343	WITHOUT_CLASSIFICATION	3.738989156566549E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979007998758813	WITHOUT_CLASSIFICATION	0.0020992001241186887	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987297397529293	WITHOUT_CLASSIFICATION	0.0012702602470707057	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999726661016358	WITHOUT_CLASSIFICATION	2.733389836419423E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999579818865569	WITHOUT_CLASSIFICATION	4.201811344314671E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981103389829119	WITHOUT_CLASSIFICATION	0.0018896610170880156	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9955909190314656	WITHOUT_CLASSIFICATION	0.004409080968534426	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968639696733009	WITHOUT_CLASSIFICATION	0.003136030326699031	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977963640787068	WITHOUT_CLASSIFICATION	0.0022036359212932286	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999266184124099	WITHOUT_CLASSIFICATION	7.338158759012675E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999717534496996	WITHOUT_CLASSIFICATION	2.824655030048847E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999741622615377	WITHOUT_CLASSIFICATION	2.5837738462391693E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999775635356876	WITHOUT_CLASSIFICATION	2.24364643123916E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999835034142183	WITHOUT_CLASSIFICATION	1.6496585781670985E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999992901578414	WITHOUT_CLASSIFICATION	7.098421585653892E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9993817264148273	WITHOUT_CLASSIFICATION	6.18273585172703E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999604064851949	WITHOUT_CLASSIFICATION	3.95935148050675E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997619915803816	WITHOUT_CLASSIFICATION	2.380084196185166E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9994363760279518	WITHOUT_CLASSIFICATION	5.636239720482731E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996958279126635	WITHOUT_CLASSIFICATION	3.041720873364953E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999642860555997	WITHOUT_CLASSIFICATION	3.571394440026361E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999732717084345	WITHOUT_CLASSIFICATION	2.67282915654606E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999772826770941	WITHOUT_CLASSIFICATION	2.271732290586451E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998890063694523	WITHOUT_CLASSIFICATION	0.0011099363054769822	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893065627176	WITHOUT_CLASSIFICATION	1.1069343728239776E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998632196499015	WITHOUT_CLASSIFICATION	1.3678035009840808E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999982242197131	WITHOUT_CLASSIFICATION	1.775780286891319E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997082830660882	WITHOUT_CLASSIFICATION	2.917169339118217E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999581055464872	WITHOUT_CLASSIFICATION	4.189445351276152E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999489621051187	WITHOUT_CLASSIFICATION	5.103789488122986E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998832551121212	WITHOUT_CLASSIFICATION	1.1674488787891939E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999757494614057	WITHOUT_CLASSIFICATION	2.4250538594338043E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997853323222977	WITHOUT_CLASSIFICATION	2.1466767770229352E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999079035812032	WITHOUT_CLASSIFICATION	9.209641879690298E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998832551121212	WITHOUT_CLASSIFICATION	1.1674488787891939E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999870930530411	WITHOUT_CLASSIFICATION	1.2906946958744537E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999869333934205	WITHOUT_CLASSIFICATION	1.3066606579528381E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999026152400652	WITHOUT_CLASSIFICATION	9.738475993491056E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999656179050196	WITHOUT_CLASSIFICATION	3.4382094980344414E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999091996223157	WITHOUT_CLASSIFICATION	9.080037768432397E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999483393525093	WITHOUT_CLASSIFICATION	5.1660647490738485E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998585388928602	WITHOUT_CLASSIFICATION	1.414611071397345E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998931965490526	WITHOUT_CLASSIFICATION	1.0680345094733073E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998931965490526	WITHOUT_CLASSIFICATION	1.0680345094733073E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999595910675977	WITHOUT_CLASSIFICATION	4.040893240226105E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999408035761042	WITHOUT_CLASSIFICATION	5.919642389594034E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998704421165666	WITHOUT_CLASSIFICATION	1.2955788343340182E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999516753062355	WITHOUT_CLASSIFICATION	4.8324693764379116E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999357391567	WITHOUT_CLASSIFICATION	6.426084331878376E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999764397918077	WITHOUT_CLASSIFICATION	2.3560208192295915E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999994709086303	WITHOUT_CLASSIFICATION	5.290913697006798E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999888882532902	WITHOUT_CLASSIFICATION	1.1111746709772027E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999774288058623	WITHOUT_CLASSIFICATION	2.2571194137728023E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999843074995416	WITHOUT_CLASSIFICATION	1.5692500458389785E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998983330213925	WITHOUT_CLASSIFICATION	1.0166697860739362E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999894138369552	WITHOUT_CLASSIFICATION	1.0586163044836038E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996554126195861	WITHOUT_CLASSIFICATION	3.445873804138819E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9140202481804162	WITHOUT_CLASSIFICATION	0.08597975181958377	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9987640036286561	WITHOUT_CLASSIFICATION	0.0012359963713438433	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999520284661623	WITHOUT_CLASSIFICATION	4.7971533837726423E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999314949563981	WITHOUT_CLASSIFICATION	6.850504360190027E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9934308989101066	WITHOUT_CLASSIFICATION	0.006569101089893396	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9993357669083505	WITHOUT_CLASSIFICATION	6.642330916495421E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999563074845293	WITHOUT_CLASSIFICATION	4.369251547072088E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999906674679805	WITHOUT_CLASSIFICATION	9.3325320194932E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999539175247252	WITHOUT_CLASSIFICATION	4.608247527486372E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9996604847266515	WITHOUT_CLASSIFICATION	3.3951527334845073E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999966306248433	WITHOUT_CLASSIFICATION	3.3693751567030945E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999687815870834	WITHOUT_CLASSIFICATION	3.121841291666211E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996007388327453	WITHOUT_CLASSIFICATION	3.992611672548065E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9966099039226841	WITHOUT_CLASSIFICATION	0.0033900960773159653	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9976024742877929	WITHOUT_CLASSIFICATION	0.0023975257122070947	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9966816999108296	WITHOUT_CLASSIFICATION	0.0033183000891704815	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993468577951266	WITHOUT_CLASSIFICATION	6.531422048735203E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999662326346732	WITHOUT_CLASSIFICATION	3.376736532682597E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.999507106677184	WITHOUT_CLASSIFICATION	4.928933228160007E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998666805363213	WITHOUT_CLASSIFICATION	1.3331946367867926E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999028169639205	WITHOUT_CLASSIFICATION	9.718303607959147E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998931957968465	WITHOUT_CLASSIFICATION	1.0680420315344946E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9997668325404163	WITHOUT_CLASSIFICATION	2.3316745958370104E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999469310884522	WITHOUT_CLASSIFICATION	5.30689115477463E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9956728278437698	WITHOUT_CLASSIFICATION	0.00432717215623033	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999921581417416	WITHOUT_CLASSIFICATION	7.841858258399809E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999603323926654	WITHOUT_CLASSIFICATION	3.966760733465547E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998574544870873	WITHOUT_CLASSIFICATION	1.4254551291281291E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995261383834985	WITHOUT_CLASSIFICATION	4.7386161650161545E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995261383834985	WITHOUT_CLASSIFICATION	4.7386161650161545E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999395582379332	WITHOUT_CLASSIFICATION	6.044176206670109E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999998720085491	WITHOUT_CLASSIFICATION	1.2799145090941672E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999754462349577	WITHOUT_CLASSIFICATION	2.455376504226675E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999986271765456	WITHOUT_CLASSIFICATION	1.372823454315543E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999867748033548	WITHOUT_CLASSIFICATION	1.3225196645219703E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.999954368196631	WITHOUT_CLASSIFICATION	4.563180336896471E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995059945947165	WITHOUT_CLASSIFICATION	4.940054052835919E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9991479409946312	WITHOUT_CLASSIFICATION	8.520590053688463E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999828182219518	WITHOUT_CLASSIFICATION	1.718177804815338E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9997642231341985	WITHOUT_CLASSIFICATION	2.3577686580139427E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999703020586119	WITHOUT_CLASSIFICATION	2.969794138808789E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999968253198273	WITHOUT_CLASSIFICATION	3.174680172830356E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994565216743897	WITHOUT_CLASSIFICATION	5.434783256103849E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997942478230439	WITHOUT_CLASSIFICATION	2.057521769560294E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9989863094154308	WITHOUT_CLASSIFICATION	0.0010136905845692448	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9989760063840459	WITHOUT_CLASSIFICATION	0.0010239936159541553	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998322158522497	WITHOUT_CLASSIFICATION	1.677841477503914E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998118376057097	WITHOUT_CLASSIFICATION	1.8816239429021348E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9996766602708734	WITHOUT_CLASSIFICATION	3.2333972912656583E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999983654442487	WITHOUT_CLASSIFICATION	1.6345557512376996E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998118376057097	WITHOUT_CLASSIFICATION	1.8816239429021348E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999909448406946	WITHOUT_CLASSIFICATION	9.055159305336033E-6	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999974870869192	WITHOUT_CLASSIFICATION	2.512913080849917E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9995315178134345	WITHOUT_CLASSIFICATION	4.684821865654635E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995441498225003	WITHOUT_CLASSIFICATION	4.5585017749971175E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9993369069712973	WITHOUT_CLASSIFICATION	6.630930287028413E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999953207892887	WITHOUT_CLASSIFICATION	4.6792107114124555E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999311881200512	WITHOUT_CLASSIFICATION	6.8811879948692E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998990949638598	WITHOUT_CLASSIFICATION	1.0090503614030369E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999048172176509	WITHOUT_CLASSIFICATION	9.518278234917263E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.99999929618212	WITHOUT_CLASSIFICATION	7.038178799569275E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999798493179015	WITHOUT_CLASSIFICATION	2.0150682098393943E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9988595633412891	WITHOUT_CLASSIFICATION	0.0011404366587108592	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999395356402517	WITHOUT_CLASSIFICATION	6.0464359748230706E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9972139313830539	WITHOUT_CLASSIFICATION	0.0027860686169460403	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9994231671177662	WITHOUT_CLASSIFICATION	5.768328822338108E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9966784065264973	WITHOUT_CLASSIFICATION	0.0033215934735026185	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999047593653495	WITHOUT_CLASSIFICATION	9.524063465055031E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9958465980773648	WITHOUT_CLASSIFICATION	0.004153401922635282	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9997508360942339	WITHOUT_CLASSIFICATION	2.4916390576603975E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999660992520366	WITHOUT_CLASSIFICATION	3.3900747963430596E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999780932190607	WITHOUT_CLASSIFICATION	2.1906780939163142E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9960960630066245	WITHOUT_CLASSIFICATION	0.0039039369933754715	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9188386462493296	WITHOUT_CLASSIFICATION	0.0811613537506704	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9998725909848256	WITHOUT_CLASSIFICATION	1.2740901517439338E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.998463869503918	WITHOUT_CLASSIFICATION	0.00153613049608197	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9977207600864446	WITHOUT_CLASSIFICATION	0.002279239913555396	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998889511819115	WITHOUT_CLASSIFICATION	1.1104881808855091E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998890063694523	WITHOUT_CLASSIFICATION	0.0011099363054769822	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9991039830805033	WITHOUT_CLASSIFICATION	8.960169194966141E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999984467147605	WITHOUT_CLASSIFICATION	1.5532852396430803E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9332373245490301	WITHOUT_CLASSIFICATION	0.06676267545096988	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998788624731457	WITHOUT_CLASSIFICATION	1.2113752685425414E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999979260196934	WITHOUT_CLASSIFICATION	2.0739803064969927E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9984069522923424	WITHOUT_CLASSIFICATION	0.0015930477076575265	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9850032285493493	WITHOUT_CLASSIFICATION	0.014996771450650719	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999828501143402	WITHOUT_CLASSIFICATION	1.714988565981678E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999558285279082	WITHOUT_CLASSIFICATION	4.417147209169799E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999561110069803	WITHOUT_CLASSIFICATION	4.38889930195744E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999921308803972	WITHOUT_CLASSIFICATION	7.869119602805784E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999865267233692	WITHOUT_CLASSIFICATION	1.34732766308152E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.998827433232436	WITHOUT_CLASSIFICATION	0.001172566767564075	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9986422218153526	WITHOUT_CLASSIFICATION	0.001357778184647485	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999846289299998	WITHOUT_CLASSIFICATION	1.5371070000197508E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997105310952987	WITHOUT_CLASSIFICATION	2.89468904701371E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999760145512202	WITHOUT_CLASSIFICATION	2.3985448779750424E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997245646724063	WITHOUT_CLASSIFICATION	2.7543532759361075E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999968347097691	WITHOUT_CLASSIFICATION	3.1652902309930906E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999807691387078	WITHOUT_CLASSIFICATION	1.9230861292203385E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997447782237384	WITHOUT_CLASSIFICATION	2.5522177626148947E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999887426774278	WITHOUT_CLASSIFICATION	1.1257322572195605E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997876897234707	WITHOUT_CLASSIFICATION	2.123102765292723E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996635354251225	WITHOUT_CLASSIFICATION	3.364645748774488E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9994178493665903	WITHOUT_CLASSIFICATION	5.821506334096689E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9997613948664554	WITHOUT_CLASSIFICATION	2.3860513354468366E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999994945616382	WITHOUT_CLASSIFICATION	5.054383617999064E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9987517257588586	WITHOUT_CLASSIFICATION	0.0012482742411413898	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9963599211585696	WITHOUT_CLASSIFICATION	0.0036400788414302173	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998666964734636	WITHOUT_CLASSIFICATION	1.333035265365301E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997788870305488	WITHOUT_CLASSIFICATION	2.2111296945110553E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059514501343	WITHOUT_CLASSIFICATION	9.404854986574558E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999989872363154	WITHOUT_CLASSIFICATION	1.0127636845873333E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999470167062705	WITHOUT_CLASSIFICATION	5.298329372960494E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999961148834593	WITHOUT_CLASSIFICATION	3.885116540695174E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9940999901885378	WITHOUT_CLASSIFICATION	0.005900009811462213	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997315603394232	WITHOUT_CLASSIFICATION	2.684396605767563E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998846895900196	WITHOUT_CLASSIFICATION	1.1531040998043916E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997315603394232	WITHOUT_CLASSIFICATION	2.684396605767563E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999214967401467	WITHOUT_CLASSIFICATION	7.850325985326543E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999905620737243	WITHOUT_CLASSIFICATION	9.437926275674089E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999796961589877	WITHOUT_CLASSIFICATION	2.0303841012215214E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99999498646875	WITHOUT_CLASSIFICATION	5.013531250104929E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999934115592932	WITHOUT_CLASSIFICATION	6.588440706837749E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999670681790405	WITHOUT_CLASSIFICATION	3.293182095948701E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999931667361072	WITHOUT_CLASSIFICATION	6.833263892809566E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999978330333506	WITHOUT_CLASSIFICATION	2.1669666493989724E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998918698381071	WITHOUT_CLASSIFICATION	1.0813016189295078E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.8755934176961807	WITHOUT_CLASSIFICATION	0.12440658230381921	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9991828638725745	WITHOUT_CLASSIFICATION	8.171361274254386E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9981493287339429	WITHOUT_CLASSIFICATION	0.0018506712660570513	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998301863172873	WITHOUT_CLASSIFICATION	1.69813682712675E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999974252050942	WITHOUT_CLASSIFICATION	2.574794905845442E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.8994980220207082	WITHOUT_CLASSIFICATION	0.10050197797929179	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9993993434537294	WITHOUT_CLASSIFICATION	6.00656546270628E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999020209653261	WITHOUT_CLASSIFICATION	9.797903467400669E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999020209653261	WITHOUT_CLASSIFICATION	9.797903467400669E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999763537192906	WITHOUT_CLASSIFICATION	2.3646280709387445E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998527112506609	WITHOUT_CLASSIFICATION	1.4728874933913992E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999993673573524	WITHOUT_CLASSIFICATION	6.326426476542884E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999815694900944	WITHOUT_CLASSIFICATION	1.843050990548216E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999995553507616	WITHOUT_CLASSIFICATION	4.446492383906499E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995047053756	WITHOUT_CLASSIFICATION	4.952946243694012E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9989540445619649	WITHOUT_CLASSIFICATION	0.0010459554380350825	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999579210179389	WITHOUT_CLASSIFICATION	4.207898206111181E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.999925292092859	WITHOUT_CLASSIFICATION	7.47079071409424E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999826519272415	WITHOUT_CLASSIFICATION	1.7348072758604792E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995588481286	WITHOUT_CLASSIFICATION	4.411518714505885E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999753307807102	WITHOUT_CLASSIFICATION	2.4669219289890537E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998625599505832	WITHOUT_CLASSIFICATION	1.3744004941688493E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999978493151854	WITHOUT_CLASSIFICATION	2.1506848146823958E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997422012524022	WITHOUT_CLASSIFICATION	2.5779874759778836E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9995981092645841	WITHOUT_CLASSIFICATION	4.0189073541574573E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999964859694881	WITHOUT_CLASSIFICATION	3.5140305119480742E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9976243109994809	WITHOUT_CLASSIFICATION	0.0023756890005191714	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9993961786655476	WITHOUT_CLASSIFICATION	6.03821334452349E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999945995291031	WITHOUT_CLASSIFICATION	5.40047089697727E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999924839218766	WITHOUT_CLASSIFICATION	7.516078123465216E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9991783827789131	WITHOUT_CLASSIFICATION	8.216172210868771E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9992458365151538	WITHOUT_CLASSIFICATION	7.541634848462947E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.989468738292143	WITHOUT_CLASSIFICATION	0.010531261707857068	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999182691962447	WITHOUT_CLASSIFICATION	8.173080375532448E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999991848507174	WITHOUT_CLASSIFICATION	8.151492826384446E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999097255323104	WITHOUT_CLASSIFICATION	9.027446768970865E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9996022529420883	WITHOUT_CLASSIFICATION	3.977470579117931E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9986807531587713	WITHOUT_CLASSIFICATION	0.0013192468412288399	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999878990718402	WITHOUT_CLASSIFICATION	1.2100928159780322E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999013059288243	WITHOUT_CLASSIFICATION	9.869407117575469E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999966729568149	WITHOUT_CLASSIFICATION	3.3270431849907973E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999321306938506	WITHOUT_CLASSIFICATION	6.78693061493984E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9895919447636549	WITHOUT_CLASSIFICATION	0.010408055236345094	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994558257795574	WITHOUT_CLASSIFICATION	5.441742204426691E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999909236969639	WITHOUT_CLASSIFICATION	9.076303036166001E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999954112579344	WITHOUT_CLASSIFICATION	4.588742065603676E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999951566707646	WITHOUT_CLASSIFICATION	4.843329235396088E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999990184444868	WITHOUT_CLASSIFICATION	9.81555513202704E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9988563688136288	WITHOUT_CLASSIFICATION	0.0011436311863711342	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999975101105655	WITHOUT_CLASSIFICATION	2.48988943449932E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999066547121013	WITHOUT_CLASSIFICATION	9.334528789874447E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9983442188737861	WITHOUT_CLASSIFICATION	0.0016557811262138153	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.5771729642114667	WITHOUT_CLASSIFICATION	0.42282703578853326	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9954016088055322	WITHOUT_CLASSIFICATION	0.004598391194467815	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999324378908676	WITHOUT_CLASSIFICATION	6.756210913236208E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999261184047376	WITHOUT_CLASSIFICATION	7.388159526238853E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998254463797	WITHOUT_CLASSIFICATION	1.7455362037914371E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998805049572089	WITHOUT_CLASSIFICATION	1.1949504279101392E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999799024996809	WITHOUT_CLASSIFICATION	2.0097500319067132E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999066547121013	WITHOUT_CLASSIFICATION	9.334528789874447E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999804326692312	WITHOUT_CLASSIFICATION	1.9567330768764162E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996429114779787	WITHOUT_CLASSIFICATION	3.5708852202133196E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995858128845316	WITHOUT_CLASSIFICATION	4.1418711546842085E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9991357701862612	WITHOUT_CLASSIFICATION	8.64229813738873E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999847199552314	WITHOUT_CLASSIFICATION	1.5280044768550215E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999847199552314	WITHOUT_CLASSIFICATION	1.5280044768550215E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999986286452632	WITHOUT_CLASSIFICATION	1.3713547366534292E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999933308899419	WITHOUT_CLASSIFICATION	6.6691100580885565E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999981255030312	WITHOUT_CLASSIFICATION	1.8744969687209112E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999283453656461	WITHOUT_CLASSIFICATION	7.165463435395501E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9993871360791842	WITHOUT_CLASSIFICATION	6.128639208157797E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999446419026454	WITHOUT_CLASSIFICATION	5.535809735469166E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999337828213827	WITHOUT_CLASSIFICATION	6.62171786172843E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998323344522815	WITHOUT_CLASSIFICATION	1.6766554771862415E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997426317545538	WITHOUT_CLASSIFICATION	2.573682454462009E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9995430590668467	WITHOUT_CLASSIFICATION	4.5694093315321515E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999813699938591	WITHOUT_CLASSIFICATION	1.863000614098119E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9996793858730707	WITHOUT_CLASSIFICATION	3.206141269292514E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999266908153537	WITHOUT_CLASSIFICATION	7.330918464634269E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999813464585401	WITHOUT_CLASSIFICATION	1.865354145992895E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995559496925457	WITHOUT_CLASSIFICATION	4.4405030745440843E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9977457600316731	WITHOUT_CLASSIFICATION	0.002254239968326964	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999801466338846	WITHOUT_CLASSIFICATION	1.9853366115456305E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999633413625697	WITHOUT_CLASSIFICATION	3.6658637430301715E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9997331398103396	WITHOUT_CLASSIFICATION	2.668601896603473E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9995182396953054	WITHOUT_CLASSIFICATION	4.8176030469467663E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998738362092476	WITHOUT_CLASSIFICATION	1.261637907522781E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999887881487044	WITHOUT_CLASSIFICATION	1.1211851295628518E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9826691463389503	WITHOUT_CLASSIFICATION	0.017330853661049632	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9931035233118195	WITHOUT_CLASSIFICATION	0.006896476688180533	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9995289846387427	WITHOUT_CLASSIFICATION	4.710153612572611E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999626335086165	WITHOUT_CLASSIFICATION	3.736649138346196E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999996247274954	WITHOUT_CLASSIFICATION	3.7527250466580054E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999963284298211	WITHOUT_CLASSIFICATION	3.6715701787823596E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999915946791628	WITHOUT_CLASSIFICATION	8.40532083730245E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999908170155681	WITHOUT_CLASSIFICATION	9.182984431908548E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999963188755346	WITHOUT_CLASSIFICATION	3.6811244653418637E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9990892331219781	WITHOUT_CLASSIFICATION	9.107668780220344E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999930425005935	WITHOUT_CLASSIFICATION	6.957499406430129E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999967538045427	WITHOUT_CLASSIFICATION	3.24619545744678E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999444030453385	WITHOUT_CLASSIFICATION	5.559695466143751E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9973428811790255	WITHOUT_CLASSIFICATION	0.0026571188209745613	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995588481286	WITHOUT_CLASSIFICATION	4.411518714505885E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999060297855609	WITHOUT_CLASSIFICATION	9.397021443916258E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993817264148273	WITHOUT_CLASSIFICATION	6.18273585172703E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999744570899721	WITHOUT_CLASSIFICATION	2.5542910027934913E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999982289741684	WITHOUT_CLASSIFICATION	1.7710258315984808E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999984678689116	WITHOUT_CLASSIFICATION	1.532131088480436E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999942088922726	WITHOUT_CLASSIFICATION	5.791107727384238E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9997908619095778	WITHOUT_CLASSIFICATION	2.091380904222583E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999936237348568	WITHOUT_CLASSIFICATION	6.3762651433068865E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999992649627332	WITHOUT_CLASSIFICATION	7.3503726680275586E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999923960371606	WITHOUT_CLASSIFICATION	7.603962839403713E-6	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9998051780051961	WITHOUT_CLASSIFICATION	1.9482199480403006E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9997298739993233	WITHOUT_CLASSIFICATION	2.7012600067660236E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997196533975813	WITHOUT_CLASSIFICATION	2.8034660241870016E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999500663347808	WITHOUT_CLASSIFICATION	4.9933665219231985E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998678967849072	WITHOUT_CLASSIFICATION	1.3210321509287115E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9998922208078793	WITHOUT_CLASSIFICATION	1.0777919212068275E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999051485323225	WITHOUT_CLASSIFICATION	9.485146767757736E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999566204437672	WITHOUT_CLASSIFICATION	4.33795562327785E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996781469454995	WITHOUT_CLASSIFICATION	3.218530545005122E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999945460095412	WITHOUT_CLASSIFICATION	5.453990458828412E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9990167216974384	WITHOUT_CLASSIFICATION	9.832783025615656E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9996733586733382	WITHOUT_CLASSIFICATION	3.2664132666183573E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999740628491253	WITHOUT_CLASSIFICATION	2.593715087473785E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969909681082563	WITHOUT_CLASSIFICATION	0.003009031891743714	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998851851217682	WITHOUT_CLASSIFICATION	0.0011481487823179334	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999652747746185	WITHOUT_CLASSIFICATION	3.472522538150842E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9997975576333427	WITHOUT_CLASSIFICATION	2.0244236665734402E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999910297406334	WITHOUT_CLASSIFICATION	8.97025936670403E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999397529451153	WITHOUT_CLASSIFICATION	6.0247054884744476E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997907039666057	WITHOUT_CLASSIFICATION	2.0929603339423696E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999755474742279	WITHOUT_CLASSIFICATION	2.4452525772084536E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999457528137506	WITHOUT_CLASSIFICATION	5.424718624943495E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996427193179434	WITHOUT_CLASSIFICATION	3.572806820565776E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999504318251075	WITHOUT_CLASSIFICATION	4.956817489259283E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999979642567626	WITHOUT_CLASSIFICATION	2.0357432374838687E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999849326293054	WITHOUT_CLASSIFICATION	1.5067370694432603E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999014026914872	WITHOUT_CLASSIFICATION	9.859730851283219E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999995174459073	WITHOUT_CLASSIFICATION	4.8255409270393495E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999851099131699	WITHOUT_CLASSIFICATION	1.489008683003684E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999908443045977	WITHOUT_CLASSIFICATION	9.155695402210751E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999903800667583	WITHOUT_CLASSIFICATION	9.619933241677402E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999105528586182	WITHOUT_CLASSIFICATION	8.944714138180084E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999434940181907	WITHOUT_CLASSIFICATION	5.6505981809344594E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999885073917407	WITHOUT_CLASSIFICATION	1.1492608259384498E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999495517343843	WITHOUT_CLASSIFICATION	5.0448265615701514E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999959564470251	WITHOUT_CLASSIFICATION	4.0435529748987236E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998560500153125	WITHOUT_CLASSIFICATION	1.4394998468736535E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999106369403578	WITHOUT_CLASSIFICATION	8.936305964222396E-5	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999906646719898	WITHOUT_CLASSIFICATION	9.335328010113108E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999956245307734	WITHOUT_CLASSIFICATION	4.375469226608491E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999795312474024	WITHOUT_CLASSIFICATION	2.0468752597645802E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999904401695603	WITHOUT_CLASSIFICATION	9.559830439692031E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969909681082563	WITHOUT_CLASSIFICATION	0.003009031891743714	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999822210244107	WITHOUT_CLASSIFICATION	1.7778975589236117E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9990208892875175	WITHOUT_CLASSIFICATION	9.791107124824863E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999929740389435	WITHOUT_CLASSIFICATION	7.025961056484833E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9974883437652459	WITHOUT_CLASSIFICATION	0.002511656234754217	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999728381728514	WITHOUT_CLASSIFICATION	2.716182714863942E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999010540870833	WITHOUT_CLASSIFICATION	9.894591291662792E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999764295089177	WITHOUT_CLASSIFICATION	2.35704910823179E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.99999981647584	WITHOUT_CLASSIFICATION	1.835241600484731E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999967985696366	WITHOUT_CLASSIFICATION	3.20143036344246E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999669061724282	WITHOUT_CLASSIFICATION	3.309382757180344E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9994966795315521	WITHOUT_CLASSIFICATION	5.033204684479092E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994438539351121	WITHOUT_CLASSIFICATION	5.561460648878713E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999915277909085	WITHOUT_CLASSIFICATION	8.472209091392825E-6	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999640756138688	WITHOUT_CLASSIFICATION	3.592438613122965E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999214967401467	WITHOUT_CLASSIFICATION	7.850325985326543E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999995271411837	WITHOUT_CLASSIFICATION	4.72858816307543E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999988097109428	WITHOUT_CLASSIFICATION	1.1902890572922946E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999922410239688	WITHOUT_CLASSIFICATION	7.758976031207796E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999032172219726	WITHOUT_CLASSIFICATION	9.678277802744487E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999742825445205	WITHOUT_CLASSIFICATION	2.5717455479503348E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996637690616537	WITHOUT_CLASSIFICATION	3.3623093834639426E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996637690616537	WITHOUT_CLASSIFICATION	3.3623093834639426E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997148829587167	WITHOUT_CLASSIFICATION	2.851170412833395E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999957288226919	WITHOUT_CLASSIFICATION	4.271177307993044E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999879832880906	WITHOUT_CLASSIFICATION	1.2016711909475794E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999690068801108	WITHOUT_CLASSIFICATION	3.0993119889217504E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999814644355215	WITHOUT_CLASSIFICATION	1.853556447856045E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999858448903752	WITHOUT_CLASSIFICATION	1.4155109624787146E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9994302453433218	WITHOUT_CLASSIFICATION	5.697546566782823E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988319841943017	WITHOUT_CLASSIFICATION	0.0011680158056982628	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988319841943017	WITHOUT_CLASSIFICATION	0.0011680158056982628	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.5247595868888372	WITHOUT_CLASSIFICATION	0.47524041311116283	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999564603458108	WITHOUT_CLASSIFICATION	4.3539654189189024E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999979520834648	WITHOUT_CLASSIFICATION	2.0479165353519827E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999089287974051	WITHOUT_CLASSIFICATION	9.107120259486438E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999089287974051	WITHOUT_CLASSIFICATION	9.107120259486438E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999089287974051	WITHOUT_CLASSIFICATION	9.107120259486438E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999524364457578	WITHOUT_CLASSIFICATION	4.756355424210624E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999934487939995	WITHOUT_CLASSIFICATION	6.551206000435177E-6	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9872057898930765	WITHOUT_CLASSIFICATION	0.01279421010692358	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999909155789126	WITHOUT_CLASSIFICATION	9.08442108749836E-6	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999972029177502	WITHOUT_CLASSIFICATION	2.7970822498348574E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999205350409088	WITHOUT_CLASSIFICATION	7.94649590911984E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999754483443378	WITHOUT_CLASSIFICATION	2.4551655662199514E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9984656776454531	WITHOUT_CLASSIFICATION	0.0015343223545468544	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999890007876754	WITHOUT_CLASSIFICATION	1.0999212324488431E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9997354492788942	WITHOUT_CLASSIFICATION	2.645507211057562E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999443925552256	WITHOUT_CLASSIFICATION	5.560744477436485E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999681471457832	WITHOUT_CLASSIFICATION	3.1852854216741706E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999766512576131	WITHOUT_CLASSIFICATION	2.3348742386841764E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999992468044134	WITHOUT_CLASSIFICATION	7.531955865652268E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999939225744945	WITHOUT_CLASSIFICATION	6.077425505515037E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999165553653192	WITHOUT_CLASSIFICATION	8.344463468073913E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996915892861656	WITHOUT_CLASSIFICATION	3.0841071383440734E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996637690616537	WITHOUT_CLASSIFICATION	3.3623093834639426E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9995756450786462	WITHOUT_CLASSIFICATION	4.243549213538112E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9390420121107571	WITHOUT_CLASSIFICATION	0.06095798788924301	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999737797983239	WITHOUT_CLASSIFICATION	2.6220201676131154E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999652180232452	WITHOUT_CLASSIFICATION	3.478197675470256E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999778514317167	WITHOUT_CLASSIFICATION	2.2148568283278794E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999601554969	WITHOUT_CLASSIFICATION	3.984450309488889E-8	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999018976457775	WITHOUT_CLASSIFICATION	9.810235422251245E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998941412324835	WITHOUT_CLASSIFICATION	1.058587675164425E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999950196689494	WITHOUT_CLASSIFICATION	4.980331050608045E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999913043705035	WITHOUT_CLASSIFICATION	8.695629496462563E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999145396192	WITHOUT_CLASSIFICATION	8.54603807659071E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999979308262567	WITHOUT_CLASSIFICATION	2.0691737433475857E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999952055887532	WITHOUT_CLASSIFICATION	4.79441124671246E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999890960109499	WITHOUT_CLASSIFICATION	1.0903989050104664E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9997379949777327	WITHOUT_CLASSIFICATION	2.6200502226723476E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9751232757088137	WITHOUT_CLASSIFICATION	0.02487672429118621	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999981280123932	WITHOUT_CLASSIFICATION	1.871987606812541E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999879245732272	WITHOUT_CLASSIFICATION	1.207542677274114E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999851325933306	WITHOUT_CLASSIFICATION	1.486740666946051E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999851325933306	WITHOUT_CLASSIFICATION	1.486740666946051E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999561722943668	WITHOUT_CLASSIFICATION	4.382770563301792E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999959246443785	WITHOUT_CLASSIFICATION	4.07535562149993E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999951616088427	WITHOUT_CLASSIFICATION	4.838391157304175E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999912933548239	WITHOUT_CLASSIFICATION	8.706645176108493E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999281694955514	WITHOUT_CLASSIFICATION	7.183050444853959E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999192514886851	WITHOUT_CLASSIFICATION	8.074851131484036E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999948555377253	WITHOUT_CLASSIFICATION	5.1444622746898026E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999844289085809	WITHOUT_CLASSIFICATION	1.557109141916566E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999952174867037	WITHOUT_CLASSIFICATION	4.782513296301904E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999990568927327	WITHOUT_CLASSIFICATION	9.431072672980259E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999479425477055	WITHOUT_CLASSIFICATION	5.205745229460125E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995573671539938	WITHOUT_CLASSIFICATION	4.4263284600615677E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.99999196711165	WITHOUT_CLASSIFICATION	8.032888350045806E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999966680215211	WITHOUT_CLASSIFICATION	3.3319784789321484E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999876724207526	WITHOUT_CLASSIFICATION	1.2327579247405752E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999800074513645	WITHOUT_CLASSIFICATION	1.99925486355201E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998511220297	WITHOUT_CLASSIFICATION	1.4887797028791215E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998511220297	WITHOUT_CLASSIFICATION	1.4887797028791215E-7	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998176670791594	WITHOUT_CLASSIFICATION	1.823329208405708E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997221906322	WITHOUT_CLASSIFICATION	2.778093678287419E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999922834854676	WITHOUT_CLASSIFICATION	7.716514532360949E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999922467278273	WITHOUT_CLASSIFICATION	7.753272172623784E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999900011411254	WITHOUT_CLASSIFICATION	9.998858874786422E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999859208311098	WITHOUT_CLASSIFICATION	1.4079168890133143E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9985597256622925	WITHOUT_CLASSIFICATION	0.0014402743377075484	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999497443816525	WITHOUT_CLASSIFICATION	5.025561834757417E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999560866567542	WITHOUT_CLASSIFICATION	4.3913343245767656E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999099918554	WITHOUT_CLASSIFICATION	9.000814453036641E-8	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999531988639722	WITHOUT_CLASSIFICATION	4.680113602784583E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999497443816525	WITHOUT_CLASSIFICATION	5.025561834757417E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999768310793953	WITHOUT_CLASSIFICATION	2.3168920604746802E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9992027369782391	WITHOUT_CLASSIFICATION	7.972630217608664E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999786432219573	WITHOUT_CLASSIFICATION	2.135677804271643E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999575553950955	WITHOUT_CLASSIFICATION	4.2444604904596515E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999972813859	WITHOUT_CLASSIFICATION	2.7186141040843037E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999586473764054	WITHOUT_CLASSIFICATION	4.135262359473628E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9972867217902015	WITHOUT_CLASSIFICATION	0.002713278209798605	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999673715288672	WITHOUT_CLASSIFICATION	3.262847113283364E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999954710973366	WITHOUT_CLASSIFICATION	4.528902663514715E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998400251053966	WITHOUT_CLASSIFICATION	1.599748946034366E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998247305125291	WITHOUT_CLASSIFICATION	1.7526948747091122E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999881029050421	WITHOUT_CLASSIFICATION	1.1897094957800654E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999777819287778	WITHOUT_CLASSIFICATION	2.2218071222200204E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.99857215511359	WITHOUT_CLASSIFICATION	0.0014278448864099662	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998348784454558	WITHOUT_CLASSIFICATION	1.651215545441497E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999880254782691	WITHOUT_CLASSIFICATION	1.1974521730870313E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999767013692961	WITHOUT_CLASSIFICATION	2.3298630703931186E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9932832977445624	WITHOUT_CLASSIFICATION	0.006716702255437558	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9932832977445624	WITHOUT_CLASSIFICATION	0.006716702255437558	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9972867217902015	WITHOUT_CLASSIFICATION	0.002713278209798605	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9888855649729625	WITHOUT_CLASSIFICATION	0.011114435027037392	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999644599583547	WITHOUT_CLASSIFICATION	3.5540041645277696E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998772989429513	WITHOUT_CLASSIFICATION	1.2270105704873544E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999903331970939	WITHOUT_CLASSIFICATION	9.66680290607603E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999927694411943	WITHOUT_CLASSIFICATION	7.230558805721653E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999034191299064	WITHOUT_CLASSIFICATION	9.658087009359753E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999812316305021	WITHOUT_CLASSIFICATION	1.8768369497848626E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9995803576955276	WITHOUT_CLASSIFICATION	4.1964230447254116E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999189398726961	WITHOUT_CLASSIFICATION	8.106012730388183E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999925064791861	WITHOUT_CLASSIFICATION	7.493520813904549E-6	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999040865326524	WITHOUT_CLASSIFICATION	9.59134673476738E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998608191554296	WITHOUT_CLASSIFICATION	1.3918084457048932E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997136548372165	WITHOUT_CLASSIFICATION	2.8634516278357625E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999402414007589	WITHOUT_CLASSIFICATION	5.9758599241098304E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999566970574949	WITHOUT_CLASSIFICATION	4.3302942505207634E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999952747841565	WITHOUT_CLASSIFICATION	4.725215843519009E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998579939546	WITHOUT_CLASSIFICATION	1.4200604544545615E-7	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999905146001745	WITHOUT_CLASSIFICATION	9.485399825416627E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999061410034075	WITHOUT_CLASSIFICATION	9.385899659253039E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998992684949009	WITHOUT_CLASSIFICATION	1.0073150509907275E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9996544928277529	WITHOUT_CLASSIFICATION	3.4550717224717176E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999964985491119	WITHOUT_CLASSIFICATION	3.501450888269941E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9997037227559928	WITHOUT_CLASSIFICATION	2.9627724400721267E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999942389585124	WITHOUT_CLASSIFICATION	5.761041487632732E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999902424057204	WITHOUT_CLASSIFICATION	9.75759427965725E-6	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999809407186375	WITHOUT_CLASSIFICATION	1.905928136245754E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999947161903017	WITHOUT_CLASSIFICATION	5.283809698251645E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999646033983649	WITHOUT_CLASSIFICATION	3.539660163513185E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999992756408423	WITHOUT_CLASSIFICATION	7.243591577029426E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999917870490178	WITHOUT_CLASSIFICATION	8.212950982209498E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999566970574949	WITHOUT_CLASSIFICATION	4.3302942505207634E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999919767894665	WITHOUT_CLASSIFICATION	8.023210533562427E-6	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998162224194	WITHOUT_CLASSIFICATION	1.8377758051803575E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999880000836423	WITHOUT_CLASSIFICATION	1.1999916357648404E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999214815885672	WITHOUT_CLASSIFICATION	7.851841143279958E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999616748544504	WITHOUT_CLASSIFICATION	3.832514554960456E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999958623593218	WITHOUT_CLASSIFICATION	4.137640678200367E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999576019700838	WITHOUT_CLASSIFICATION	4.239802991632575E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999296989229468	WITHOUT_CLASSIFICATION	7.03010770532369E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9972544892414678	WITHOUT_CLASSIFICATION	0.0027455107585321855	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9975178050062996	WITHOUT_CLASSIFICATION	0.002482194993700507	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999161386183515	WITHOUT_CLASSIFICATION	8.386138164844596E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999849352053	WITHOUT_CLASSIFICATION	1.506479469875963E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9993097458815162	WITHOUT_CLASSIFICATION	6.902541184838624E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999981806787079	WITHOUT_CLASSIFICATION	1.819321292094352E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999371150803033	WITHOUT_CLASSIFICATION	6.288491969675601E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9979447631188264	WITHOUT_CLASSIFICATION	0.002055236881173591	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997329319713	WITHOUT_CLASSIFICATION	2.670680287108457E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999986526752624	WITHOUT_CLASSIFICATION	1.347324737495826E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9977924785725414	WITHOUT_CLASSIFICATION	0.002207521427458641	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999885603857539	WITHOUT_CLASSIFICATION	1.1439614246087479E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999560866567542	WITHOUT_CLASSIFICATION	4.3913343245767656E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999625051588636	WITHOUT_CLASSIFICATION	3.7494841136431845E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999566970574949	WITHOUT_CLASSIFICATION	4.3302942505207634E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999737563655914	WITHOUT_CLASSIFICATION	2.624363440854031E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999991412640114	WITHOUT_CLASSIFICATION	8.587359885966532E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999853504048488	WITHOUT_CLASSIFICATION	1.4649595151179627E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999852023005826	WITHOUT_CLASSIFICATION	1.4797699417230969E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999546371101282	WITHOUT_CLASSIFICATION	4.5362889871827555E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999986696890911	WITHOUT_CLASSIFICATION	1.3303109089044765E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999773084420336	WITHOUT_CLASSIFICATION	2.269155796644552E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999941667978621	WITHOUT_CLASSIFICATION	5.833202137894586E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998714048123116	WITHOUT_CLASSIFICATION	1.2859518768844387E-4	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999923043693123	WITHOUT_CLASSIFICATION	7.695630687775995E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.998920922167138	WITHOUT_CLASSIFICATION	0.001079077832862043	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999929452756573	WITHOUT_CLASSIFICATION	7.054724342706529E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999824295308513	WITHOUT_CLASSIFICATION	1.757046914869203E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999824295308513	WITHOUT_CLASSIFICATION	1.757046914869203E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998517019503	WITHOUT_CLASSIFICATION	1.4829804965957086E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9950140190805119	WITHOUT_CLASSIFICATION	0.0049859809194881515	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997024763520765	WITHOUT_CLASSIFICATION	2.975236479234113E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999995577207985	WITHOUT_CLASSIFICATION	4.422792014737201E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999054098616	WITHOUT_CLASSIFICATION	9.4590138390669E-7	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999133516263503	WITHOUT_CLASSIFICATION	8.664837364970219E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995343368203	WITHOUT_CLASSIFICATION	4.6566317968572833E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999921286542292	WITHOUT_CLASSIFICATION	7.871345770870969E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999733620164075	WITHOUT_CLASSIFICATION	2.6637983592474476E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9997513805217888	WITHOUT_CLASSIFICATION	2.486194782111541E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996284116782573	WITHOUT_CLASSIFICATION	3.715883217427515E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996284116782573	WITHOUT_CLASSIFICATION	3.715883217427515E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.99999996172192	WITHOUT_CLASSIFICATION	3.8278079978755566E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999299152511292	WITHOUT_CLASSIFICATION	7.00847488708615E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995177491492	WITHOUT_CLASSIFICATION	4.822508508638254E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997746840970488	WITHOUT_CLASSIFICATION	2.2531590295105843E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991043767593	WITHOUT_CLASSIFICATION	8.956232406010488E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999992032192633	WITHOUT_CLASSIFICATION	7.967807367069628E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999991017295806	WITHOUT_CLASSIFICATION	8.982704194530503E-7	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999980044059775	WITHOUT_CLASSIFICATION	1.9955940224689235E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999902326268193	WITHOUT_CLASSIFICATION	9.767373180729977E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999914186900438	WITHOUT_CLASSIFICATION	8.581309956107785E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998950758175493	WITHOUT_CLASSIFICATION	1.0492418245070431E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051461204593	WITHOUT_CLASSIFICATION	9.485387954062655E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999881563024765	WITHOUT_CLASSIFICATION	1.1843697523486334E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999420752028049	WITHOUT_CLASSIFICATION	5.792479719517474E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995939220463238	WITHOUT_CLASSIFICATION	4.060779536762456E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999902210434278	WITHOUT_CLASSIFICATION	9.778956572110424E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9992473584688164	WITHOUT_CLASSIFICATION	7.526415311835913E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9991231611080431	WITHOUT_CLASSIFICATION	8.768388919567656E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999446684702555	WITHOUT_CLASSIFICATION	5.533152974438153E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.997281224174963	WITHOUT_CLASSIFICATION	0.0027187758250369187	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9995182396953054	WITHOUT_CLASSIFICATION	4.8176030469467663E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999772165920241	WITHOUT_CLASSIFICATION	2.2783407975851377E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996102733975509	WITHOUT_CLASSIFICATION	3.897266024490989E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9995482164929268	WITHOUT_CLASSIFICATION	4.517835070731236E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999693513932693	WITHOUT_CLASSIFICATION	3.064860673078163E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997703816591116	WITHOUT_CLASSIFICATION	2.296183408885173E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981874881370887	WITHOUT_CLASSIFICATION	0.0018125118629113042	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999940731725234	WITHOUT_CLASSIFICATION	5.926827476526683E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9994473778686898	WITHOUT_CLASSIFICATION	5.526221313102679E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981103389829119	WITHOUT_CLASSIFICATION	0.0018896610170880156	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9975226775692274	WITHOUT_CLASSIFICATION	0.002477322430772653	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999628825838637	WITHOUT_CLASSIFICATION	3.7117416136218485E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999989240286167	WITHOUT_CLASSIFICATION	1.0759713833220375E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999424292838769	WITHOUT_CLASSIFICATION	5.7570716123179954E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983237535143995	WITHOUT_CLASSIFICATION	0.0016762464856004823	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999299135853805	WITHOUT_CLASSIFICATION	7.008641461950661E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999825851004404	WITHOUT_CLASSIFICATION	1.7414899559630625E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999969036503202	WITHOUT_CLASSIFICATION	3.0963496798012384E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999155245242054	WITHOUT_CLASSIFICATION	8.447547579457902E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999971635618604	WITHOUT_CLASSIFICATION	2.8364381396376947E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999753719186544	WITHOUT_CLASSIFICATION	2.46280813456044E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9986203458396817	WITHOUT_CLASSIFICATION	0.0013796541603183388	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997626331903119	WITHOUT_CLASSIFICATION	2.373668096880847E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999903597121052	WITHOUT_CLASSIFICATION	9.640287894801626E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998504491318269	WITHOUT_CLASSIFICATION	1.4955086817318298E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996050524081	WITHOUT_CLASSIFICATION	3.9494759190113233E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999642824907119	WITHOUT_CLASSIFICATION	3.5717509288183156E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998480587146339	WITHOUT_CLASSIFICATION	1.5194128536610515E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999995369951275	WITHOUT_CLASSIFICATION	4.630048725025036E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998071517019584	WITHOUT_CLASSIFICATION	1.9284829804155288E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999620756682156	WITHOUT_CLASSIFICATION	3.792433178446698E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999949201813421	WITHOUT_CLASSIFICATION	5.079818657975671E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999762312339596	WITHOUT_CLASSIFICATION	2.3768766040395195E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997439709421249	WITHOUT_CLASSIFICATION	2.5602905787511216E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999762312339596	WITHOUT_CLASSIFICATION	2.3768766040395195E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999861411878254	WITHOUT_CLASSIFICATION	1.3858812174607592E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999312972080208	WITHOUT_CLASSIFICATION	6.870279197914347E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9996780784381045	WITHOUT_CLASSIFICATION	3.219215618955111E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999777214702346	WITHOUT_CLASSIFICATION	2.2278529765432103E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999945036250508	WITHOUT_CLASSIFICATION	5.496374949206274E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9996780784381045	WITHOUT_CLASSIFICATION	3.219215618955111E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999977594919602	WITHOUT_CLASSIFICATION	2.2405080396602554E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999130335094819	WITHOUT_CLASSIFICATION	8.696649051817785E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999896490113586	WITHOUT_CLASSIFICATION	1.0350988641454138E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.99922938901374	WITHOUT_CLASSIFICATION	7.706109862598682E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999647385657389	WITHOUT_CLASSIFICATION	3.526143426104588E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999804991272877	WITHOUT_CLASSIFICATION	1.950087271223982E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999763324253028	WITHOUT_CLASSIFICATION	2.3667574697195105E-5	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5616916357690969	WITHOUT_CLASSIFICATION	0.43830836423090314	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997547738688376	WITHOUT_CLASSIFICATION	2.4522613116240036E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999913701530796	WITHOUT_CLASSIFICATION	8.629846920351056E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999973422649967	WITHOUT_CLASSIFICATION	2.657735003255906E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999770913918722	WITHOUT_CLASSIFICATION	2.2908608127703324E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999989330296108	WITHOUT_CLASSIFICATION	1.0669703892104455E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999740704172362	WITHOUT_CLASSIFICATION	2.5929582763732357E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999785025666	WITHOUT_CLASSIFICATION	2.1497433397410792E-8	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9994531280693041	WITHOUT_CLASSIFICATION	5.468719306959134E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999837694464547	WITHOUT_CLASSIFICATION	1.6230553545262943E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998974406114597	WITHOUT_CLASSIFICATION	1.0255938854041828E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998293238357419	WITHOUT_CLASSIFICATION	1.7067616425805426E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999991159690836	WITHOUT_CLASSIFICATION	8.840309164454163E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999128887653546	WITHOUT_CLASSIFICATION	8.711123464536275E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9947875349090205	WITHOUT_CLASSIFICATION	0.005212465090979498	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9993300368739407	WITHOUT_CLASSIFICATION	6.699631260592169E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.993300683494872	WITHOUT_CLASSIFICATION	0.0066993165051279285	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997422040932901	WITHOUT_CLASSIFICATION	2.5779590670992525E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999510305	WITHOUT_CLASSIFICATION	4.8969523508687994E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9997629645688586	WITHOUT_CLASSIFICATION	2.370354311413726E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9991579650062229	WITHOUT_CLASSIFICATION	8.420349937771133E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998372802562191	WITHOUT_CLASSIFICATION	1.6271974378086754E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999264861951299	WITHOUT_CLASSIFICATION	7.351380487004947E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996276527935579	WITHOUT_CLASSIFICATION	3.7234720644215E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9962323186757366	WITHOUT_CLASSIFICATION	0.0037676813242633537	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999991159690836	WITHOUT_CLASSIFICATION	8.840309164454163E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999988128708449	WITHOUT_CLASSIFICATION	1.187129155116341E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999123519803748	WITHOUT_CLASSIFICATION	8.76480196251417E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9991537470341473	WITHOUT_CLASSIFICATION	8.462529658527941E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9979835853492521	WITHOUT_CLASSIFICATION	0.0020164146507479653	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999915398430536	WITHOUT_CLASSIFICATION	8.460156946510028E-6	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999913558487357	WITHOUT_CLASSIFICATION	8.644151264307614E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999835577121485	WITHOUT_CLASSIFICATION	1.6442287851513004E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998293155779989	WITHOUT_CLASSIFICATION	1.706844220010296E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998734132379276	WITHOUT_CLASSIFICATION	1.265867620725097E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9989203453161111	WITHOUT_CLASSIFICATION	0.0010796546838889288	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999967856276054	WITHOUT_CLASSIFICATION	3.214372394668356E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999724447326709	WITHOUT_CLASSIFICATION	2.7555267329178176E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999769647498109	WITHOUT_CLASSIFICATION	2.303525018904532E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999808983206878	WITHOUT_CLASSIFICATION	1.910167931219548E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999718147900192	WITHOUT_CLASSIFICATION	2.8185209980801924E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999832098239032	WITHOUT_CLASSIFICATION	1.679017609686774E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9815492910406554	WITHOUT_CLASSIFICATION	0.018450708959344628	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998348562049102	WITHOUT_CLASSIFICATION	1.6514379508968466E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994446253042079	WITHOUT_CLASSIFICATION	5.553746957921994E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999879791676654	WITHOUT_CLASSIFICATION	1.2020832334601282E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9910912846149862	WITHOUT_CLASSIFICATION	0.008908715385013751	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9910912846149862	WITHOUT_CLASSIFICATION	0.008908715385013751	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884138848372	WITHOUT_CLASSIFICATION	1.158611516285963E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9910912846149862	WITHOUT_CLASSIFICATION	0.008908715385013751	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9910912846149862	WITHOUT_CLASSIFICATION	0.008908715385013751	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9988156278939831	WITHOUT_CLASSIFICATION	0.0011843721060169146	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998124847641687	WITHOUT_CLASSIFICATION	1.8751523583130628E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999065010429058	WITHOUT_CLASSIFICATION	9.349895709422755E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999065010429058	WITHOUT_CLASSIFICATION	9.349895709422755E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999910592974029	WITHOUT_CLASSIFICATION	8.940702597107465E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999487024148324	WITHOUT_CLASSIFICATION	5.1297585167650345E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994971634539622	WITHOUT_CLASSIFICATION	5.028365460378657E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999997005723693	WITHOUT_CLASSIFICATION	2.9942763068566296E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9989385975566738	WITHOUT_CLASSIFICATION	0.00106140244332617	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9961746032124486	WITHOUT_CLASSIFICATION	0.003825396787551398	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9968163328295905	WITHOUT_CLASSIFICATION	0.0031836671704095665	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9986380341895768	WITHOUT_CLASSIFICATION	0.001361965810423195	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9994577335593163	WITHOUT_CLASSIFICATION	5.422664406835523E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998592498353019	WITHOUT_CLASSIFICATION	1.4075016469812393E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9993338771631776	WITHOUT_CLASSIFICATION	6.661228368224703E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999079877337536	WITHOUT_CLASSIFICATION	9.201226624641279E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999961148834593	WITHOUT_CLASSIFICATION	3.885116540695174E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9988825335986568	WITHOUT_CLASSIFICATION	0.0011174664013432574	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9994570827911515	WITHOUT_CLASSIFICATION	5.429172088484853E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9988764005277397	WITHOUT_CLASSIFICATION	0.0011235994722602618	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9995708519528956	WITHOUT_CLASSIFICATION	4.291480471044017E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9995294552251267	WITHOUT_CLASSIFICATION	4.7054477487332727E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999961148834593	WITHOUT_CLASSIFICATION	3.885116540695174E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999128887653546	WITHOUT_CLASSIFICATION	8.711123464536275E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9979731888391664	WITHOUT_CLASSIFICATION	0.0020268111608336423	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999757494614057	WITHOUT_CLASSIFICATION	2.4250538594338043E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998832551121212	WITHOUT_CLASSIFICATION	1.1674488787891939E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9973562246383649	WITHOUT_CLASSIFICATION	0.0026437753616350306	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999094817336929	WITHOUT_CLASSIFICATION	9.051826630708533E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9991446904206901	WITHOUT_CLASSIFICATION	8.553095793099347E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997846528689427	WITHOUT_CLASSIFICATION	2.1534713105718343E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999678324494612	WITHOUT_CLASSIFICATION	3.2167550538750885E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999750316317251	WITHOUT_CLASSIFICATION	2.496836827498576E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9985892566102205	WITHOUT_CLASSIFICATION	0.0014107433897795607	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999921382451314	WITHOUT_CLASSIFICATION	7.86175486865142E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999211513500026	WITHOUT_CLASSIFICATION	7.884864999740631E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998048690489683	WITHOUT_CLASSIFICATION	1.9513095103176165E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9936210392945674	WITHOUT_CLASSIFICATION	0.006378960705432696	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999738821505951	WITHOUT_CLASSIFICATION	2.611784940480238E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999935012382678	WITHOUT_CLASSIFICATION	6.498761732202806E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9995780963252715	WITHOUT_CLASSIFICATION	4.2190367472858084E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999771976906765	WITHOUT_CLASSIFICATION	2.2802309323547553E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995936654547807	WITHOUT_CLASSIFICATION	4.063345452193229E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999671643340634	WITHOUT_CLASSIFICATION	3.283566593669355E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999383923447544	WITHOUT_CLASSIFICATION	6.160765524560021E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999987976819869	WITHOUT_CLASSIFICATION	1.202318013190972E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999678324494612	WITHOUT_CLASSIFICATION	3.2167550538750885E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9984343043203522	WITHOUT_CLASSIFICATION	0.0015656956796477749	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9993236234807021	WITHOUT_CLASSIFICATION	6.763765192979663E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9983877231102171	WITHOUT_CLASSIFICATION	0.0016122768897829634	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999594332447409	WITHOUT_CLASSIFICATION	4.05667552591517E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.998451070432185	WITHOUT_CLASSIFICATION	0.0015489295678150488	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9978999696989861	WITHOUT_CLASSIFICATION	0.002100030301013911	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9971836481611597	WITHOUT_CLASSIFICATION	0.0028163518388402966	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9978963469612343	WITHOUT_CLASSIFICATION	0.002103653038765733	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.995550178966511	WITHOUT_CLASSIFICATION	0.004449821033489087	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999202887376916	WITHOUT_CLASSIFICATION	7.971126230846429E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999784131153395	WITHOUT_CLASSIFICATION	2.1586884660456883E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999946399131934	WITHOUT_CLASSIFICATION	5.3600868066207315E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999190257123208	WITHOUT_CLASSIFICATION	8.097428767919754E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999888119092503	WITHOUT_CLASSIFICATION	1.118809074964657E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998003469014518	WITHOUT_CLASSIFICATION	1.996530985483422E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999202887376916	WITHOUT_CLASSIFICATION	7.971126230846429E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999898334572075	WITHOUT_CLASSIFICATION	1.016654279247172E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999978385570536	WITHOUT_CLASSIFICATION	2.1614429463078854E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999563074845293	WITHOUT_CLASSIFICATION	4.369251547072088E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999845226293489	WITHOUT_CLASSIFICATION	1.5477370651140386E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9998035899764842	WITHOUT_CLASSIFICATION	1.9641002351579453E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9982065350929836	WITHOUT_CLASSIFICATION	0.0017934649070163405	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999445029610613	WITHOUT_CLASSIFICATION	5.549703893869643E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999326270637121	WITHOUT_CLASSIFICATION	6.737293628790074E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998995391097396	WITHOUT_CLASSIFICATION	1.0046089026040614E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999157735131981	WITHOUT_CLASSIFICATION	8.422648680189892E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999157735131981	WITHOUT_CLASSIFICATION	8.422648680189892E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999157735131981	WITHOUT_CLASSIFICATION	8.422648680189892E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999831771660166	WITHOUT_CLASSIFICATION	1.6822833983435983E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999831771660166	WITHOUT_CLASSIFICATION	1.6822833983435983E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999915696831573	WITHOUT_CLASSIFICATION	8.430316842693088E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999909408435776	WITHOUT_CLASSIFICATION	9.059156422464063E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997310136147789	WITHOUT_CLASSIFICATION	2.689863852210468E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9996241004308902	WITHOUT_CLASSIFICATION	3.758995691098074E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9839404747846769	WITHOUT_CLASSIFICATION	0.01605952521532307	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999046631423769	WITHOUT_CLASSIFICATION	9.533685762314001E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467359307774	WITHOUT_CLASSIFICATION	5.326406922251945E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999984939202016	WITHOUT_CLASSIFICATION	1.5060797984540093E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999379914787263	WITHOUT_CLASSIFICATION	6.200852127366847E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999046631423769	WITHOUT_CLASSIFICATION	9.533685762314001E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467359307774	WITHOUT_CLASSIFICATION	5.326406922251945E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999990659199883	WITHOUT_CLASSIFICATION	9.340800117270364E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999859302278465	WITHOUT_CLASSIFICATION	1.4069772153392055E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999971600199422	WITHOUT_CLASSIFICATION	2.83998005772305E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999982580204636	WITHOUT_CLASSIFICATION	1.7419795364389978E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9996871380218563	WITHOUT_CLASSIFICATION	3.128619781438201E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999582818698955	WITHOUT_CLASSIFICATION	4.171813010443231E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999354777407031	WITHOUT_CLASSIFICATION	6.452225929684061E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999732776258882	WITHOUT_CLASSIFICATION	2.6722374111864103E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999158958810123	WITHOUT_CLASSIFICATION	8.410411898772659E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9985360633790087	WITHOUT_CLASSIFICATION	0.001463936620991392	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999874442691228	WITHOUT_CLASSIFICATION	1.2555730877208963E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999808421147173	WITHOUT_CLASSIFICATION	1.9157885282809834E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997764171123275	WITHOUT_CLASSIFICATION	2.2358288767259518E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998151626023326	WITHOUT_CLASSIFICATION	1.8483739766732678E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999970117102202	WITHOUT_CLASSIFICATION	2.988289779806053E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997637700368553	WITHOUT_CLASSIFICATION	2.3622996314470263E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999909022301174	WITHOUT_CLASSIFICATION	9.097769882617945E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9994836772155266	WITHOUT_CLASSIFICATION	5.163227844735453E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9841824893890351	WITHOUT_CLASSIFICATION	0.01581751061096492	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999836616895014	WITHOUT_CLASSIFICATION	1.633831049862152E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999921992030123	WITHOUT_CLASSIFICATION	7.800796987653507E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.8985925410964212	WITHOUT_CLASSIFICATION	0.10140745890357876	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999057485952297	WITHOUT_CLASSIFICATION	9.425140477022748E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999983528945918	WITHOUT_CLASSIFICATION	1.6471054081925382E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999146236727783	WITHOUT_CLASSIFICATION	8.537632722168542E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244877754297	WITHOUT_CLASSIFICATION	7.551222457023063E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999703020586119	WITHOUT_CLASSIFICATION	2.969794138808789E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999703020586119	WITHOUT_CLASSIFICATION	2.969794138808789E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999735062690938	WITHOUT_CLASSIFICATION	2.6493730906170113E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999724739884315	WITHOUT_CLASSIFICATION	2.7526011568478638E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9980131985692551	WITHOUT_CLASSIFICATION	0.001986801430744924	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9991829975000234	WITHOUT_CLASSIFICATION	8.170024999765802E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999947790445353	WITHOUT_CLASSIFICATION	5.220955464722306E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999455379885842	WITHOUT_CLASSIFICATION	5.446201141565878E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999169356140752	WITHOUT_CLASSIFICATION	8.306438592477348E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9989760063840459	WITHOUT_CLASSIFICATION	0.0010239936159541553	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9971641039028117	WITHOUT_CLASSIFICATION	0.0028358960971882545	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999169586845919	WITHOUT_CLASSIFICATION	8.30413154082412E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999223129796813	WITHOUT_CLASSIFICATION	7.768702031872915E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999195716804774	WITHOUT_CLASSIFICATION	8.042831952258292E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998649404916	WITHOUT_CLASSIFICATION	1.3505950843906915E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9989453657955483	WITHOUT_CLASSIFICATION	0.0010546342044517544	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999972895355153	WITHOUT_CLASSIFICATION	2.7104644847129995E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997936991870492	WITHOUT_CLASSIFICATION	2.0630081295084157E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999223129796813	WITHOUT_CLASSIFICATION	7.768702031872915E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999223129796813	WITHOUT_CLASSIFICATION	7.768702031872915E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999975579505568	WITHOUT_CLASSIFICATION	2.4420494431983528E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999871033433366	WITHOUT_CLASSIFICATION	1.2896656663475869E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999540095960695	WITHOUT_CLASSIFICATION	4.599040393049954E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999874500943462	WITHOUT_CLASSIFICATION	1.254990565383006E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999890960109499	WITHOUT_CLASSIFICATION	1.0903989050104664E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997637700368553	WITHOUT_CLASSIFICATION	2.3622996314470263E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997063719085565	WITHOUT_CLASSIFICATION	2.936280914434815E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999562725428134	WITHOUT_CLASSIFICATION	4.37274571866857E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999836991845055	WITHOUT_CLASSIFICATION	1.630081549454611E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996798885367649	WITHOUT_CLASSIFICATION	3.2011146323506775E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999894934017021	WITHOUT_CLASSIFICATION	1.0506598297951744E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999289703421581	WITHOUT_CLASSIFICATION	7.102965784182022E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999496237785757	WITHOUT_CLASSIFICATION	5.037622142429526E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999496237785757	WITHOUT_CLASSIFICATION	5.037622142429526E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999496237785757	WITHOUT_CLASSIFICATION	5.037622142429526E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999496237785757	WITHOUT_CLASSIFICATION	5.037622142429526E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931269343108	WITHOUT_CLASSIFICATION	6.873065689187018E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997668010927832	WITHOUT_CLASSIFICATION	2.3319890721671714E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050493180971	WITHOUT_CLASSIFICATION	9.495068190283534E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999543888807302	WITHOUT_CLASSIFICATION	4.561111926980211E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999881700880049	WITHOUT_CLASSIFICATION	1.1829911995120138E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999132311158245	WITHOUT_CLASSIFICATION	8.6768884175465E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999421212439414	WITHOUT_CLASSIFICATION	5.7878756058512126E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999623720826321	WITHOUT_CLASSIFICATION	3.7627917367858026E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999937697966516	WITHOUT_CLASSIFICATION	6.230203348383077E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988880098271	WITHOUT_CLASSIFICATION	1.1119901729095387E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999216612477907	WITHOUT_CLASSIFICATION	7.833875220929657E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9993303737194512	WITHOUT_CLASSIFICATION	6.696262805488588E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999036570319859	WITHOUT_CLASSIFICATION	9.634296801399828E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.992425661941301	WITHOUT_CLASSIFICATION	0.00757433805869896	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9994084644671796	WITHOUT_CLASSIFICATION	5.915355328204073E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9994084644671796	WITHOUT_CLASSIFICATION	5.915355328204073E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999678264384341	WITHOUT_CLASSIFICATION	3.217356156591871E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999885216519236	WITHOUT_CLASSIFICATION	1.1478348076384367E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999917536747	WITHOUT_CLASSIFICATION	8.246325292782614E-8	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999053691548342	WITHOUT_CLASSIFICATION	9.463084516579059E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999053691548342	WITHOUT_CLASSIFICATION	9.463084516579059E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999838602317781	WITHOUT_CLASSIFICATION	1.6139768221897065E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999157735131981	WITHOUT_CLASSIFICATION	8.422648680189892E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9959323806292407	WITHOUT_CLASSIFICATION	0.00406761937075926	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999876947332195	WITHOUT_CLASSIFICATION	1.230526678062488E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999985024358955	WITHOUT_CLASSIFICATION	1.4975641045138037E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998080982311768	WITHOUT_CLASSIFICATION	1.919017688232038E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998308528952103	WITHOUT_CLASSIFICATION	1.6914710478968306E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999916415630462	WITHOUT_CLASSIFICATION	8.358436953700468E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996365206759604	WITHOUT_CLASSIFICATION	3.6347932403948485E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998597047503065	WITHOUT_CLASSIFICATION	1.402952496934573E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999119171093948	WITHOUT_CLASSIFICATION	8.808289060528734E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999703644642347	WITHOUT_CLASSIFICATION	2.9635535765266167E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999696975564598	WITHOUT_CLASSIFICATION	3.03024435401429E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999734886277838	WITHOUT_CLASSIFICATION	2.6511372216210857E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999965792437	WITHOUT_CLASSIFICATION	3.420756456335465E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995605152473	WITHOUT_CLASSIFICATION	4.394847527120497E-7	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997952705835	WITHOUT_CLASSIFICATION	2.0472941660357546E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995486205572	WITHOUT_CLASSIFICATION	4.5137944280323737E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999909286014456	WITHOUT_CLASSIFICATION	9.071398554417132E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999408511314252	WITHOUT_CLASSIFICATION	5.914886857476229E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999992469144071	WITHOUT_CLASSIFICATION	7.530855928984671E-6	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999780852516733	WITHOUT_CLASSIFICATION	2.1914748326693452E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999721988129	WITHOUT_CLASSIFICATION	2.78011870670375E-8	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999760145512202	WITHOUT_CLASSIFICATION	2.3985448779750424E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997426540328	WITHOUT_CLASSIFICATION	2.5734596728485066E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998753943388853	WITHOUT_CLASSIFICATION	1.2460566111465983E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999027856824216	WITHOUT_CLASSIFICATION	9.721431757827223E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9794473306312856	WITHOUT_CLASSIFICATION	0.020552669368714346	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995112902409451	WITHOUT_CLASSIFICATION	4.88709759054865E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9977457600316731	WITHOUT_CLASSIFICATION	0.002254239968326964	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9996667083152483	WITHOUT_CLASSIFICATION	3.3329168475171143E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999029912647118	WITHOUT_CLASSIFICATION	9.7008735288222E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999364107737111	WITHOUT_CLASSIFICATION	6.358922628888327E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999987796685197	WITHOUT_CLASSIFICATION	1.2203314803262877E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999598645431044	WITHOUT_CLASSIFICATION	4.0135456895749636E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9893233744329627	WITHOUT_CLASSIFICATION	0.010676625567037426	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999944851205589	WITHOUT_CLASSIFICATION	5.514879441175942E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996602768564	WITHOUT_CLASSIFICATION	3.397231436384889E-7	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997421014254003	WITHOUT_CLASSIFICATION	2.5789857459963144E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999720404712693	WITHOUT_CLASSIFICATION	2.7959528730660157E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999020209653261	WITHOUT_CLASSIFICATION	9.797903467400669E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999332680840943	WITHOUT_CLASSIFICATION	6.673191590565668E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999857408872579	WITHOUT_CLASSIFICATION	1.425911274223037E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999552293632206	WITHOUT_CLASSIFICATION	4.4770636779364433E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9990210549581956	WITHOUT_CLASSIFICATION	9.7894504180438E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999794255800612	WITHOUT_CLASSIFICATION	2.0574419938786166E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9990646516183124	WITHOUT_CLASSIFICATION	9.353483816877308E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999170972426511	WITHOUT_CLASSIFICATION	8.290275734888824E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.999879401637089	WITHOUT_CLASSIFICATION	1.2059836291092236E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9949458408177889	WITHOUT_CLASSIFICATION	0.005054159182211068	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998770353740458	WITHOUT_CLASSIFICATION	1.2296462595430758E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999838284133672	WITHOUT_CLASSIFICATION	1.6171586632803906E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9989370431280742	WITHOUT_CLASSIFICATION	0.0010629568719258528	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999746842852875	WITHOUT_CLASSIFICATION	2.5315714712529344E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999851234333818	WITHOUT_CLASSIFICATION	1.4876566618117614E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999224139898	WITHOUT_CLASSIFICATION	7.758601015757993E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9997549017087842	WITHOUT_CLASSIFICATION	2.450982912157645E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999844203474912	WITHOUT_CLASSIFICATION	1.5579652508810623E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999964985881131	WITHOUT_CLASSIFICATION	3.501411886780068E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999546262574394	WITHOUT_CLASSIFICATION	4.537374256070535E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999982870474988	WITHOUT_CLASSIFICATION	1.7129525011206697E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9671284266995531	WITHOUT_CLASSIFICATION	0.03287157330044683	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997126223475503	WITHOUT_CLASSIFICATION	2.8737765244971525E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.99994985565791	WITHOUT_CLASSIFICATION	5.014434208994424E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998175164440216	WITHOUT_CLASSIFICATION	1.8248355597831706E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999097338528395	WITHOUT_CLASSIFICATION	9.026614716049884E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999893267407075	WITHOUT_CLASSIFICATION	1.0673259292471813E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994663846453	WITHOUT_CLASSIFICATION	5.336153545883487E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9988736640748275	WITHOUT_CLASSIFICATION	0.001126335925172537	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999993794799414	WITHOUT_CLASSIFICATION	6.205200586014061E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9997962989567455	WITHOUT_CLASSIFICATION	2.0370104325451022E-4	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999687768270313	WITHOUT_CLASSIFICATION	3.122317296863714E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9978766809487776	WITHOUT_CLASSIFICATION	0.0021233190512224987	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999805496863974	WITHOUT_CLASSIFICATION	1.945031360255666E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9988182767714187	WITHOUT_CLASSIFICATION	0.0011817232285813227	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6413199816505281	IMPLEMENTATION	0.35868001834947194	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9994531280693041	WITHOUT_CLASSIFICATION	5.468719306959134E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9780539392731142	WITHOUT_CLASSIFICATION	0.021946060726885746	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988060062014428	WITHOUT_CLASSIFICATION	0.0011939937985571362	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9998683508507094	WITHOUT_CLASSIFICATION	1.316491492906933E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9997234804989952	WITHOUT_CLASSIFICATION	2.765195010048355E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997567604212416	WITHOUT_CLASSIFICATION	2.4323957875839613E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9981359905594294	WITHOUT_CLASSIFICATION	0.0018640094405706852	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999028021511092	WITHOUT_CLASSIFICATION	9.719784889088053E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9980461210075786	WITHOUT_CLASSIFICATION	0.0019538789924214207	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9996481090800042	WITHOUT_CLASSIFICATION	3.5189091999572754E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9993888635317394	WITHOUT_CLASSIFICATION	6.111364682605393E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999184798878885	WITHOUT_CLASSIFICATION	8.152011211150284E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999984239361487	WITHOUT_CLASSIFICATION	1.5760638513081683E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9985315123736261	WITHOUT_CLASSIFICATION	0.0014684876263738784	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999932021390937	WITHOUT_CLASSIFICATION	6.797860906286306E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999402258416622	WITHOUT_CLASSIFICATION	5.977415833783278E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998250753632939	WITHOUT_CLASSIFICATION	1.7492463670607726E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9996942800830639	WITHOUT_CLASSIFICATION	3.0571991693602464E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999800001343574	WITHOUT_CLASSIFICATION	1.999986564259698E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999800001343574	WITHOUT_CLASSIFICATION	1.999986564259698E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999279974955091	WITHOUT_CLASSIFICATION	7.200250449096245E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9975009043443953	WITHOUT_CLASSIFICATION	0.002499095655604702	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999059109310409	WITHOUT_CLASSIFICATION	9.408906895913959E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999856773697903	WITHOUT_CLASSIFICATION	1.4322630209739438E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998918165876889	WITHOUT_CLASSIFICATION	1.0818341231115984E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.99994130670054	WITHOUT_CLASSIFICATION	5.869329945996763E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999860373380097	WITHOUT_CLASSIFICATION	1.396266199017563E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999993348630315	WITHOUT_CLASSIFICATION	6.651369685116137E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.94839027014095	WITHOUT_CLASSIFICATION	0.05160972985904992	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999977386545681	WITHOUT_CLASSIFICATION	2.26134543198857E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999993691579989	WITHOUT_CLASSIFICATION	6.308420011453481E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9932095379000855	WITHOUT_CLASSIFICATION	0.0067904620999146275	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999975007992841	WITHOUT_CLASSIFICATION	2.4992007159802427E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998082254687344	WITHOUT_CLASSIFICATION	1.917745312655835E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999931933893761	WITHOUT_CLASSIFICATION	6.80661062381971E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9801283132924393	IMPLEMENTATION	0.019871686707560707	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9801283132924393	IMPLEMENTATION	0.019871686707560707	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999766538512678	WITHOUT_CLASSIFICATION	2.3346148732191544E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999977942230842	WITHOUT_CLASSIFICATION	2.2057769156790573E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998707201681821	WITHOUT_CLASSIFICATION	1.292798318179083E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999475524908616	WITHOUT_CLASSIFICATION	5.2447509138299156E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999895569548468	WITHOUT_CLASSIFICATION	1.0443045153163618E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999795413904756	WITHOUT_CLASSIFICATION	2.045860952440774E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999795413904756	WITHOUT_CLASSIFICATION	2.045860952440774E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999674609187131	WITHOUT_CLASSIFICATION	3.2539081286768604E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999799495969462	WITHOUT_CLASSIFICATION	2.005040305375882E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9994068688815002	WITHOUT_CLASSIFICATION	5.931311184999101E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999967049	WITHOUT_CLASSIFICATION	3.29499694375511E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998027913159424	WITHOUT_CLASSIFICATION	1.9720868405761786E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999872794696009	WITHOUT_CLASSIFICATION	1.2720530399224404E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996915892861656	WITHOUT_CLASSIFICATION	3.0841071383440734E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998762692646954	WITHOUT_CLASSIFICATION	1.237307353045629E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999706918745215	WITHOUT_CLASSIFICATION	2.9308125478426086E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999885073917407	WITHOUT_CLASSIFICATION	1.1492608259384498E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9974883437652459	WITHOUT_CLASSIFICATION	0.002511656234754217	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999657375625145	WITHOUT_CLASSIFICATION	3.426243748548155E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999969131738516	WITHOUT_CLASSIFICATION	3.086826148397052E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995939220463238	WITHOUT_CLASSIFICATION	4.060779536762456E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983021987552394	WITHOUT_CLASSIFICATION	0.0016978012447605509	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9996051119486027	WITHOUT_CLASSIFICATION	3.9488805139728555E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997471946362598	WITHOUT_CLASSIFICATION	2.5280536374013983E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997013256760343	WITHOUT_CLASSIFICATION	2.986743239655882E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999674671314618	WITHOUT_CLASSIFICATION	3.253286853815403E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999538591209092	WITHOUT_CLASSIFICATION	4.61408790908009E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9948349145858975	WITHOUT_CLASSIFICATION	0.0051650854141025455	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999125673581791	WITHOUT_CLASSIFICATION	8.743264182090228E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999299187732513	WITHOUT_CLASSIFICATION	7.008122674864366E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999676545119155	WITHOUT_CLASSIFICATION	3.234548808453492E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9936737929503598	WITHOUT_CLASSIFICATION	0.006326207049640197	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999970561920927	WITHOUT_CLASSIFICATION	2.943807907246978E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9994763877801527	WITHOUT_CLASSIFICATION	5.236122198473592E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998511220297	WITHOUT_CLASSIFICATION	1.4887797028791215E-7	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995442382233491	WITHOUT_CLASSIFICATION	4.55761776650853E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9983316901261805	WITHOUT_CLASSIFICATION	0.0016683098738194432	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999941081256225	WITHOUT_CLASSIFICATION	5.891874377499864E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9721543139430027	WITHOUT_CLASSIFICATION	0.027845686056997342	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9992745088838433	WITHOUT_CLASSIFICATION	7.254911161567247E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998693307298484	WITHOUT_CLASSIFICATION	1.306692701516963E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.999607395662813	WITHOUT_CLASSIFICATION	3.926043371870406E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999090896347334	WITHOUT_CLASSIFICATION	9.091036526664178E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998100519635941	WITHOUT_CLASSIFICATION	1.8994803640603417E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999690389208875	WITHOUT_CLASSIFICATION	3.0961079112509874E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9994503509112773	WITHOUT_CLASSIFICATION	5.496490887227759E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9997108080978347	WITHOUT_CLASSIFICATION	2.8919190216528345E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999152956011926	WITHOUT_CLASSIFICATION	8.470439880739738E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999765996148401	WITHOUT_CLASSIFICATION	2.3400385159928775E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999575711958	WITHOUT_CLASSIFICATION	4.2428804201459775E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9971757501413387	WITHOUT_CLASSIFICATION	0.0028242498586611856	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998100519635941	WITHOUT_CLASSIFICATION	1.8994803640603417E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999690389208875	WITHOUT_CLASSIFICATION	3.0961079112509874E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993892154065975	WITHOUT_CLASSIFICATION	6.107845934024882E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999485982137771	WITHOUT_CLASSIFICATION	5.140178622290624E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999990121179873	WITHOUT_CLASSIFICATION	9.878820126923707E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999568375709531	WITHOUT_CLASSIFICATION	4.316242904698622E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999995098846006	WITHOUT_CLASSIFICATION	4.901153993951712E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9855463873772671	WITHOUT_CLASSIFICATION	0.014453612622732941	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996280723643213	WITHOUT_CLASSIFICATION	3.7192763567875565E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999905078259492	WITHOUT_CLASSIFICATION	9.492174050868443E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999996269473802	WITHOUT_CLASSIFICATION	3.73052619786544E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9586520054187962	WITHOUT_CLASSIFICATION	0.041347994581203744	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998003141532307	WITHOUT_CLASSIFICATION	1.99685846769281E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9586520054187962	WITHOUT_CLASSIFICATION	0.041347994581203744	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999254442000501	WITHOUT_CLASSIFICATION	7.455579994981866E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994693894651363	WITHOUT_CLASSIFICATION	5.306105348636342E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999254442000501	WITHOUT_CLASSIFICATION	7.455579994981866E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467156454781	WITHOUT_CLASSIFICATION	5.328435452191097E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.99998410441037	WITHOUT_CLASSIFICATION	1.5895589630018103E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999443280916741	WITHOUT_CLASSIFICATION	5.567190832574432E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999443280916741	WITHOUT_CLASSIFICATION	5.567190832574432E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995059945947165	WITHOUT_CLASSIFICATION	4.940054052835919E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995108367260521	WITHOUT_CLASSIFICATION	4.891632739478448E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995059945947165	WITHOUT_CLASSIFICATION	4.940054052835919E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996340818691336	WITHOUT_CLASSIFICATION	3.6591813086634143E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9861200540392885	WITHOUT_CLASSIFICATION	0.013879945960711387	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9984218442181891	WITHOUT_CLASSIFICATION	0.0015781557818108334	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9997154794181325	WITHOUT_CLASSIFICATION	2.8452058186753166E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999904765705676	WITHOUT_CLASSIFICATION	9.523429432444667E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9983499829571018	WITHOUT_CLASSIFICATION	0.0016500170428983467	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999698446621791	WITHOUT_CLASSIFICATION	3.0155337820907802E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9997560230674553	WITHOUT_CLASSIFICATION	2.4397693254483825E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997843229738145	WITHOUT_CLASSIFICATION	2.1567702618547417E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999644904679595	WITHOUT_CLASSIFICATION	3.550953204040804E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999552707410836	WITHOUT_CLASSIFICATION	4.472925891644754E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999418959571408	WITHOUT_CLASSIFICATION	5.8104042859112335E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999690191428321	WITHOUT_CLASSIFICATION	3.098085716788895E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999425077531432	WITHOUT_CLASSIFICATION	5.749224685690235E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998611739538414	WITHOUT_CLASSIFICATION	1.388260461584667E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9993598565380462	WITHOUT_CLASSIFICATION	6.40143461953852E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9985118921897129	WITHOUT_CLASSIFICATION	0.0014881078102870903	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9992180243825047	WITHOUT_CLASSIFICATION	7.819756174952007E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9783007970593868	WITHOUT_CLASSIFICATION	0.021699202940613203	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996258764676283	WITHOUT_CLASSIFICATION	3.741235323715956E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998266992807123	WITHOUT_CLASSIFICATION	1.7330071928767677E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9956907215597095	WITHOUT_CLASSIFICATION	0.004309278440290425	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9995955799891182	WITHOUT_CLASSIFICATION	4.0442001088177514E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9984218442181891	WITHOUT_CLASSIFICATION	0.0015781557818108334	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999959807781248	WITHOUT_CLASSIFICATION	4.019221875198929E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9990293281328968	WITHOUT_CLASSIFICATION	9.706718671031911E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9519767870499986	WITHOUT_CLASSIFICATION	0.048023212950001525	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9983729035480158	WITHOUT_CLASSIFICATION	0.0016270964519843104	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999861331905431	WITHOUT_CLASSIFICATION	1.3866809456863634E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998505421580028	WITHOUT_CLASSIFICATION	1.4945784199709005E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996340818691336	WITHOUT_CLASSIFICATION	3.6591813086634143E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996340818691336	WITHOUT_CLASSIFICATION	3.6591813086634143E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9984485343667598	WITHOUT_CLASSIFICATION	0.0015514656332401811	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998411069992326	WITHOUT_CLASSIFICATION	1.5889300076734938E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997917738172766	WITHOUT_CLASSIFICATION	2.0822618272334914E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9990946017479573	WITHOUT_CLASSIFICATION	9.053982520426881E-4	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9975722468304872	WITHOUT_CLASSIFICATION	0.0024277531695128373	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998508226938652	WITHOUT_CLASSIFICATION	1.4917730613476994E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999780325316072	WITHOUT_CLASSIFICATION	2.1967468392797745E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997610474766	WITHOUT_CLASSIFICATION	2.3895252348655166E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998727702760708	WITHOUT_CLASSIFICATION	1.2722972392915406E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999858111137208	WITHOUT_CLASSIFICATION	1.4188886279216446E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997843229738145	WITHOUT_CLASSIFICATION	2.1567702618547417E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9989039027508735	WITHOUT_CLASSIFICATION	0.0010960972491265754	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999858111137208	WITHOUT_CLASSIFICATION	1.4188886279216446E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998105728073936	WITHOUT_CLASSIFICATION	1.894271926063794E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999405427111043	WITHOUT_CLASSIFICATION	5.9457288895801314E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998619863117321	WITHOUT_CLASSIFICATION	1.380136882679235E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9484019610434634	WITHOUT_CLASSIFICATION	0.051598038956536536	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994280405094644	WITHOUT_CLASSIFICATION	5.719594905355858E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999971530908904	WITHOUT_CLASSIFICATION	2.8469091096584967E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999968584811902	WITHOUT_CLASSIFICATION	3.1415188098984634E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999996096726	WITHOUT_CLASSIFICATION	3.903273935862449E-10	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997367389527057	WITHOUT_CLASSIFICATION	2.6326104729433006E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999168461428883	WITHOUT_CLASSIFICATION	8.315385711168864E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999367652049184	WITHOUT_CLASSIFICATION	6.323479508164103E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9952207294242632	WITHOUT_CLASSIFICATION	0.00477927057573683	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999858111137208	WITHOUT_CLASSIFICATION	1.4188886279216446E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994280405094644	WITHOUT_CLASSIFICATION	5.719594905355858E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999968584811902	WITHOUT_CLASSIFICATION	3.1415188098984634E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9995821809891121	WITHOUT_CLASSIFICATION	4.178190108878241E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994046864527036	WITHOUT_CLASSIFICATION	5.953135472964205E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999272700970862	WITHOUT_CLASSIFICATION	7.272990291381827E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9995892762775883	WITHOUT_CLASSIFICATION	4.1072372241168277E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997833538530461	WITHOUT_CLASSIFICATION	2.1664614695392402E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997116133686369	WITHOUT_CLASSIFICATION	2.883866313631718E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998105728073936	WITHOUT_CLASSIFICATION	1.894271926063794E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995395431231646	WITHOUT_CLASSIFICATION	4.604568768354095E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9979999239061993	WITHOUT_CLASSIFICATION	0.0020000760938006313	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9993384210863296	WITHOUT_CLASSIFICATION	6.615789136703541E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8089527695983881	WITHOUT_CLASSIFICATION	0.19104723040161195	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.7820290970892728	WITHOUT_CLASSIFICATION	0.2179709029107272	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.999257318808327	WITHOUT_CLASSIFICATION	7.426811916730964E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467156454781	WITHOUT_CLASSIFICATION	5.328435452191097E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932712036685	WITHOUT_CLASSIFICATION	6.728796331442725E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999990384707564	WITHOUT_CLASSIFICATION	9.615292434942932E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998296042914749	WITHOUT_CLASSIFICATION	1.7039570852503896E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999895217483381	WITHOUT_CLASSIFICATION	1.0478251662005829E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999994432237929	WITHOUT_CLASSIFICATION	5.567762070904248E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999559195669	WITHOUT_CLASSIFICATION	4.408043310001343E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9996784687122329	WITHOUT_CLASSIFICATION	3.2153128776715E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999796384359726	WITHOUT_CLASSIFICATION	2.0361564027396898E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997116133686369	WITHOUT_CLASSIFICATION	2.883866313631718E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9983302822132304	WITHOUT_CLASSIFICATION	0.0016697177867695478	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999355918668424	WITHOUT_CLASSIFICATION	6.440813315762436E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9986787166970228	WITHOUT_CLASSIFICATION	0.0013212833029772504	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999753966605965	WITHOUT_CLASSIFICATION	2.4603339403506325E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999661338290305	WITHOUT_CLASSIFICATION	3.3866170969425565E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.99928882722026	WITHOUT_CLASSIFICATION	7.11172779739902E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9997891517544938	WITHOUT_CLASSIFICATION	2.1084824550627137E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9964093482724399	WITHOUT_CLASSIFICATION	0.003590651727560259	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9970506727928333	WITHOUT_CLASSIFICATION	0.0029493272071667727	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999890518093675	WITHOUT_CLASSIFICATION	1.0948190632478132E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.998554107885954	WITHOUT_CLASSIFICATION	0.0014458921140459947	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.997919182742543	WITHOUT_CLASSIFICATION	0.0020808172574569572	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999759090915311	WITHOUT_CLASSIFICATION	2.409090846887723E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999851909186636	WITHOUT_CLASSIFICATION	1.4809081336431685E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9997924453804672	WITHOUT_CLASSIFICATION	2.07554619532915E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999645187781688	WITHOUT_CLASSIFICATION	3.548122183114367E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9967735959947033	WITHOUT_CLASSIFICATION	0.0032264040052967405	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997101916294947	WITHOUT_CLASSIFICATION	2.898083705053103E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999760869088712	WITHOUT_CLASSIFICATION	2.3913091128870044E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999716249922719	WITHOUT_CLASSIFICATION	2.8375007728099504E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999997754985916	WITHOUT_CLASSIFICATION	2.245014083939013E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998403631541819	WITHOUT_CLASSIFICATION	1.5963684581805996E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7233446635155171	IMPLEMENTATION	0.2766553364844828	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9988949983612113	WITHOUT_CLASSIFICATION	0.001105001638788697	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998077766393482	WITHOUT_CLASSIFICATION	1.922233606518715E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999953521261243	WITHOUT_CLASSIFICATION	4.647873875653822E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9765485735803606	WITHOUT_CLASSIFICATION	0.023451426419639418	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999880395916655	WITHOUT_CLASSIFICATION	1.1960408334444596E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998400251053966	WITHOUT_CLASSIFICATION	1.599748946034366E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999923922267157	WITHOUT_CLASSIFICATION	7.607773284403532E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999625051588636	WITHOUT_CLASSIFICATION	3.7494841136431845E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999883149375038	WITHOUT_CLASSIFICATION	1.1685062496237104E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999879636717316	WITHOUT_CLASSIFICATION	1.203632826840003E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999965445818833	WITHOUT_CLASSIFICATION	3.45541811670915E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999528502334653	WITHOUT_CLASSIFICATION	4.7149766534713224E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999879636717316	WITHOUT_CLASSIFICATION	1.203632826840003E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999883149375038	WITHOUT_CLASSIFICATION	1.1685062496237104E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999965445818833	WITHOUT_CLASSIFICATION	3.45541811670915E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999837618873927	WITHOUT_CLASSIFICATION	1.6238112607307775E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999981559774976	WITHOUT_CLASSIFICATION	1.8440225023981524E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9980250833616349	WITHOUT_CLASSIFICATION	0.0019749166383651205	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999744116728189	WITHOUT_CLASSIFICATION	2.5588327181140937E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999685557526	WITHOUT_CLASSIFICATION	3.14442474705911E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7565847031839131	WITHOUT_CLASSIFICATION	0.24341529681608698	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9878043976221785	WITHOUT_CLASSIFICATION	0.012195602377821494	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999944042810946	WITHOUT_CLASSIFICATION	5.595718905399151E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999967618018568	WITHOUT_CLASSIFICATION	3.238198143072786E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998415346956528	WITHOUT_CLASSIFICATION	1.5846530434705574E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999467786773346	WITHOUT_CLASSIFICATION	5.322132266539485E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999793598146239	WITHOUT_CLASSIFICATION	2.0640185375996246E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.99916691542384	WITHOUT_CLASSIFICATION	8.330845761600161E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998522478596593	WITHOUT_CLASSIFICATION	1.4775214034070527E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999931903321709	WITHOUT_CLASSIFICATION	6.8096678290511365E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999626289676764	WITHOUT_CLASSIFICATION	3.73710323237072E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999594887166071	WITHOUT_CLASSIFICATION	4.051128339295148E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999990001989217	WITHOUT_CLASSIFICATION	9.998010782242611E-7	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998905177509061	WITHOUT_CLASSIFICATION	1.0948224909389389E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.99965486322434	WITHOUT_CLASSIFICATION	3.451367756599026E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9978311382180193	WITHOUT_CLASSIFICATION	0.0021688617819807985	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999065573826782	WITHOUT_CLASSIFICATION	9.344261732169309E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9993111684784487	WITHOUT_CLASSIFICATION	6.8883152155125E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997945472543135	WITHOUT_CLASSIFICATION	2.0545274568646905E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996456478048703	WITHOUT_CLASSIFICATION	3.543521951296686E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996456478048703	WITHOUT_CLASSIFICATION	3.543521951296686E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997700949422386	WITHOUT_CLASSIFICATION	2.2990505776142447E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997700949422386	WITHOUT_CLASSIFICATION	2.2990505776142447E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9972708019616687	WITHOUT_CLASSIFICATION	0.0027291980383313094	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999594887166071	WITHOUT_CLASSIFICATION	4.051128339295148E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999142996571561	WITHOUT_CLASSIFICATION	8.570034284390355E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998861666830957	WITHOUT_CLASSIFICATION	1.1383331690434025E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996080222442597	WITHOUT_CLASSIFICATION	3.9197775574025304E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996080222442597	WITHOUT_CLASSIFICATION	3.9197775574025304E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9997796681767042	WITHOUT_CLASSIFICATION	2.2033182329582652E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994692884617152	WITHOUT_CLASSIFICATION	5.307115382848275E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996035434231842	WITHOUT_CLASSIFICATION	3.9645657681569785E-4	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998409260059857	WITHOUT_CLASSIFICATION	1.5907399401418322E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999362103799729	WITHOUT_CLASSIFICATION	6.378962002707262E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999971987810813	WITHOUT_CLASSIFICATION	2.801218918807235E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998828805884837	WITHOUT_CLASSIFICATION	1.171194115162934E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999175168988378	WITHOUT_CLASSIFICATION	8.24831011622757E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9997553902421382	WITHOUT_CLASSIFICATION	2.446097578617616E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999997513165008	WITHOUT_CLASSIFICATION	2.486834992016041E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.999708275737312	WITHOUT_CLASSIFICATION	2.9172426268791703E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996640108730415	WITHOUT_CLASSIFICATION	3.3598912695851366E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997553976904295	WITHOUT_CLASSIFICATION	2.446023095704673E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9989746793772536	WITHOUT_CLASSIFICATION	0.0010253206227464524	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9541295926948604	WITHOUT_CLASSIFICATION	0.04587040730513959	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998701241406543	WITHOUT_CLASSIFICATION	1.2987585934568597E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118390403988	WITHOUT_CLASSIFICATION	8.816095960118888E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999001487862994	WITHOUT_CLASSIFICATION	9.985121370060213E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9868681703902697	WITHOUT_CLASSIFICATION	0.013131829609730316	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999994507113006	WITHOUT_CLASSIFICATION	5.492886994608243E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9990981751218108	WITHOUT_CLASSIFICATION	9.018248781891669E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999879550003737	WITHOUT_CLASSIFICATION	1.2044999626204603E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998643784416831	WITHOUT_CLASSIFICATION	1.3562155831701954E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999994478592642	WITHOUT_CLASSIFICATION	5.521407357206616E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994438539351121	WITHOUT_CLASSIFICATION	5.561460648878713E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999380548146246	WITHOUT_CLASSIFICATION	6.194518537544896E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999890518093675	WITHOUT_CLASSIFICATION	1.0948190632478132E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999101492499394	WITHOUT_CLASSIFICATION	8.98507500606147E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999988719472431	WITHOUT_CLASSIFICATION	1.128052756940499E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991398043813	WITHOUT_CLASSIFICATION	8.601956186998088E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999036244979068	WITHOUT_CLASSIFICATION	9.637550209317033E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.999318412547609	WITHOUT_CLASSIFICATION	6.815874523910985E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.999318412547609	WITHOUT_CLASSIFICATION	6.815874523910985E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999604974278127	WITHOUT_CLASSIFICATION	3.950257218737758E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9996544274001866	WITHOUT_CLASSIFICATION	3.4557259981337577E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9995233424759115	WITHOUT_CLASSIFICATION	4.766575240886102E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9995233424759115	WITHOUT_CLASSIFICATION	4.766575240886102E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999616748544504	WITHOUT_CLASSIFICATION	3.832514554960456E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999355672339	WITHOUT_CLASSIFICATION	6.443276610003593E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9898851568295286	WITHOUT_CLASSIFICATION	0.010114843170471313	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999890960109499	WITHOUT_CLASSIFICATION	1.0903989050104664E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9985892566102205	WITHOUT_CLASSIFICATION	0.0014107433897795607	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999878449681107	WITHOUT_CLASSIFICATION	1.2155031889327594E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999291965374386	WITHOUT_CLASSIFICATION	7.080346256147288E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999429210588424	WITHOUT_CLASSIFICATION	5.70789411576047E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999429210588424	WITHOUT_CLASSIFICATION	5.70789411576047E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9997412275612277	WITHOUT_CLASSIFICATION	2.587724387722219E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999013450356	WITHOUT_CLASSIFICATION	9.865496440002054E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999013450356	WITHOUT_CLASSIFICATION	9.865496440002054E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999595825024624	WITHOUT_CLASSIFICATION	4.0417497537672055E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999678256528348	WITHOUT_CLASSIFICATION	3.217434716521636E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999930700718548	WITHOUT_CLASSIFICATION	6.929928145202121E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999845731808782	WITHOUT_CLASSIFICATION	1.5426819121858695E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9994474096533894	WITHOUT_CLASSIFICATION	5.525903466105916E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999999126911913	WITHOUT_CLASSIFICATION	8.730880871737237E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999913945962777	WITHOUT_CLASSIFICATION	8.60540372229366E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9997814239938294	WITHOUT_CLASSIFICATION	2.1857600617046033E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9957183158012939	WITHOUT_CLASSIFICATION	0.004281684198706026	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998979349387305	WITHOUT_CLASSIFICATION	1.0206506126957772E-4	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9676163239905782	WITHOUT_CLASSIFICATION	0.032383676009421804	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9984229777623895	WITHOUT_CLASSIFICATION	0.001577022237610469	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9984229777623895	WITHOUT_CLASSIFICATION	0.001577022237610469	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9984229777623895	WITHOUT_CLASSIFICATION	0.001577022237610469	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9984229777623895	WITHOUT_CLASSIFICATION	0.001577022237610469	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999535511360347	WITHOUT_CLASSIFICATION	4.644886396520971E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997549847004304	WITHOUT_CLASSIFICATION	2.450152995695025E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9985998309156482	WITHOUT_CLASSIFICATION	0.0014001690843518813	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9993538607656287	WITHOUT_CLASSIFICATION	6.461392343712225E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9989979520176948	WITHOUT_CLASSIFICATION	0.0010020479823052825	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999733168117776	WITHOUT_CLASSIFICATION	2.668318822239011E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9989832422475781	WITHOUT_CLASSIFICATION	0.0010167577524218723	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999748981218047	WITHOUT_CLASSIFICATION	2.5101878195360117E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9969650911553425	WITHOUT_CLASSIFICATION	0.0030349088446575806	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998669709352337	WITHOUT_CLASSIFICATION	1.3302906476624565E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993975536416896	WITHOUT_CLASSIFICATION	6.024463583105178E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999994298756052	WITHOUT_CLASSIFICATION	5.701243948608414E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.5598435837104171	IMPLEMENTATION	0.44015641628958296	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999692404216949	WITHOUT_CLASSIFICATION	3.0759578305061744E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993975536416896	WITHOUT_CLASSIFICATION	6.024463583105178E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.899375502564733	WITHOUT_CLASSIFICATION	0.10062449743526698	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999208610335032	WITHOUT_CLASSIFICATION	7.913896649674059E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999983052727103	WITHOUT_CLASSIFICATION	1.6947272896180103E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999974824847974	WITHOUT_CLASSIFICATION	2.5175152025957072E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999887641854224	WITHOUT_CLASSIFICATION	1.1235814577615665E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9994217320365093	WITHOUT_CLASSIFICATION	5.782679634906649E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999930210205757	WITHOUT_CLASSIFICATION	6.97897942423083E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999476942178271	WITHOUT_CLASSIFICATION	5.2305782172968194E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963134722831	WITHOUT_CLASSIFICATION	3.686527716850452E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999972355608105	WITHOUT_CLASSIFICATION	2.764439189406013E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963134722831	WITHOUT_CLASSIFICATION	3.686527716850452E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999927582550847	WITHOUT_CLASSIFICATION	7.2417449152196806E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998669126090812	WITHOUT_CLASSIFICATION	1.330873909187163E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.6423108434209107	WITHOUT_CLASSIFICATION	0.3576891565790894	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999774152204017	WITHOUT_CLASSIFICATION	2.2584779598305446E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999482596221956	WITHOUT_CLASSIFICATION	5.1740377804363074E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998937759821	WITHOUT_CLASSIFICATION	1.0622401790435976E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999384334321304	WITHOUT_CLASSIFICATION	6.156656786958988E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999842428948941	WITHOUT_CLASSIFICATION	1.575710510590679E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999384334321304	WITHOUT_CLASSIFICATION	6.156656786958988E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999403249493487	WITHOUT_CLASSIFICATION	5.9675050651266344E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999833809602398	WITHOUT_CLASSIFICATION	1.6619039760189246E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999455139283223	WITHOUT_CLASSIFICATION	5.448607167780483E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999998092798916	WITHOUT_CLASSIFICATION	1.9072010839282123E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998937759821	WITHOUT_CLASSIFICATION	1.0622401790435976E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999842428948941	WITHOUT_CLASSIFICATION	1.575710510590679E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999403249493487	WITHOUT_CLASSIFICATION	5.9675050651266344E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992752175143909	WITHOUT_CLASSIFICATION	7.24782485609189E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9985168089632652	WITHOUT_CLASSIFICATION	0.0014831910367347474	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9991641032195642	WITHOUT_CLASSIFICATION	8.358967804359085E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9988453077711287	WITHOUT_CLASSIFICATION	0.0011546922288713242	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999210353467418	WITHOUT_CLASSIFICATION	7.896465325820122E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999332746856218	WITHOUT_CLASSIFICATION	6.672531437815642E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118390403988	WITHOUT_CLASSIFICATION	8.816095960118888E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999833809602398	WITHOUT_CLASSIFICATION	1.6619039760189246E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9916267975728614	WITHOUT_CLASSIFICATION	0.008373202427138477	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996155275657717	WITHOUT_CLASSIFICATION	3.8447243422831787E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999650916223048	WITHOUT_CLASSIFICATION	3.490837769513381E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118390403988	WITHOUT_CLASSIFICATION	8.816095960118888E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997694401103542	WITHOUT_CLASSIFICATION	2.3055988964589482E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118390403988	WITHOUT_CLASSIFICATION	8.816095960118888E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999594485389892	WITHOUT_CLASSIFICATION	4.055146101085707E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997703816591116	WITHOUT_CLASSIFICATION	2.296183408885173E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.998069689252143	WITHOUT_CLASSIFICATION	0.00193031074785704	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9991762549421791	WITHOUT_CLASSIFICATION	8.237450578208327E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999628825838637	WITHOUT_CLASSIFICATION	3.7117416136218485E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997103313684306	WITHOUT_CLASSIFICATION	2.896686315693929E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997986460994542	WITHOUT_CLASSIFICATION	2.013539005456702E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999790010586158	WITHOUT_CLASSIFICATION	2.099894138425499E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9995840146987234	WITHOUT_CLASSIFICATION	4.15985301276596E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998801446985381	WITHOUT_CLASSIFICATION	1.1985530146174681E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999813694805355	WITHOUT_CLASSIFICATION	1.8630519464495246E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998801446985381	WITHOUT_CLASSIFICATION	1.1985530146174681E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9952143292009455	WITHOUT_CLASSIFICATION	0.004785670799054547	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9984808228176713	WITHOUT_CLASSIFICATION	0.0015191771823287515	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999912509200789	WITHOUT_CLASSIFICATION	8.749079921077645E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999937329751845	WITHOUT_CLASSIFICATION	6.267024815527201E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999978404788362	WITHOUT_CLASSIFICATION	2.1595211638248085E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999700584245244	WITHOUT_CLASSIFICATION	2.9941575475679747E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999991962730964	WITHOUT_CLASSIFICATION	8.037269035428999E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999918301517271	WITHOUT_CLASSIFICATION	8.169848272952463E-6	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.99965170020447	WITHOUT_CLASSIFICATION	3.4829979553002087E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.99965170020447	WITHOUT_CLASSIFICATION	3.4829979553002087E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999802582302192	WITHOUT_CLASSIFICATION	1.9741769780729776E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999894401112553	WITHOUT_CLASSIFICATION	1.055988874464917E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999994624374238	WITHOUT_CLASSIFICATION	5.37562576209466E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996773669059031	WITHOUT_CLASSIFICATION	3.226330940968301E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999563387679047	WITHOUT_CLASSIFICATION	4.3661232095305087E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996314020265272	WITHOUT_CLASSIFICATION	3.685979734727562E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999977513705396	WITHOUT_CLASSIFICATION	2.2486294603569703E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9967429498164869	WITHOUT_CLASSIFICATION	0.0032570501835131192	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999620756682156	WITHOUT_CLASSIFICATION	3.792433178446698E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997843726301816	WITHOUT_CLASSIFICATION	2.1562736981831342E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9961258758699589	WITHOUT_CLASSIFICATION	0.003874124130041191	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9986617157864426	WITHOUT_CLASSIFICATION	0.0013382842135573976	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9997961198538394	WITHOUT_CLASSIFICATION	2.0388014616045256E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999777214702346	WITHOUT_CLASSIFICATION	2.2278529765432103E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995970909052332	WITHOUT_CLASSIFICATION	4.0290909476676677E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.996160144694938	WITHOUT_CLASSIFICATION	0.003839855305061976	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.996160144694938	WITHOUT_CLASSIFICATION	0.003839855305061976	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999392538268611	WITHOUT_CLASSIFICATION	6.0746173138967557E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999790010586158	WITHOUT_CLASSIFICATION	2.099894138425499E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9987105250787531	WITHOUT_CLASSIFICATION	0.001289474921246947	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996545607660553	WITHOUT_CLASSIFICATION	3.454392339446378E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997553929222956	WITHOUT_CLASSIFICATION	2.446070777043521E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999945683704907	WITHOUT_CLASSIFICATION	5.431629509259431E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997118359553024	WITHOUT_CLASSIFICATION	2.881640446975586E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999427495443376	WITHOUT_CLASSIFICATION	5.725045566235194E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999568565409545	WITHOUT_CLASSIFICATION	4.3143459045444076E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998336943853284	WITHOUT_CLASSIFICATION	1.6630561467151315E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9998189104741733	WITHOUT_CLASSIFICATION	1.8108952582673442E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997789210756	WITHOUT_CLASSIFICATION	2.2107892432160243E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999996181564001	WITHOUT_CLASSIFICATION	3.818435998947022E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999995875952838	WITHOUT_CLASSIFICATION	4.124047161698621E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9980103710010841	WITHOUT_CLASSIFICATION	0.0019896289989157784	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9996434282884967	WITHOUT_CLASSIFICATION	3.5657171150326833E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999969600292478	WITHOUT_CLASSIFICATION	3.03997075223485E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999945995038788	WITHOUT_CLASSIFICATION	5.400496121217566E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999080375844337	WITHOUT_CLASSIFICATION	9.196241556631153E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999536735448918	WITHOUT_CLASSIFICATION	4.632645510827939E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999534192940642	WITHOUT_CLASSIFICATION	4.6580705935734156E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999988247068518	WITHOUT_CLASSIFICATION	1.1752931482071074E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995806875808049	WITHOUT_CLASSIFICATION	4.193124191951513E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999361402714285	WITHOUT_CLASSIFICATION	6.385972857149003E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999989195268437	WITHOUT_CLASSIFICATION	1.0804731563205887E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999990697692207	WITHOUT_CLASSIFICATION	9.302307792820356E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9992093332285052	WITHOUT_CLASSIFICATION	7.906667714947861E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9477704375947398	WITHOUT_CLASSIFICATION	0.05222956240526021	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9996989079374677	WITHOUT_CLASSIFICATION	3.0109206253224293E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9977894474330179	WITHOUT_CLASSIFICATION	0.0022105525669821207	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999046631423769	WITHOUT_CLASSIFICATION	9.533685762314001E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999070599472992	WITHOUT_CLASSIFICATION	9.29400527007577E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999964331127239	WITHOUT_CLASSIFICATION	3.566887276102987E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999729598974442	WITHOUT_CLASSIFICATION	2.7040102555771836E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998451884095058	WITHOUT_CLASSIFICATION	1.548115904941318E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997344470976443	WITHOUT_CLASSIFICATION	2.655529023556514E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999792596444553	WITHOUT_CLASSIFICATION	2.074035554467689E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996883948000458	WITHOUT_CLASSIFICATION	3.116051999541741E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996883948000458	WITHOUT_CLASSIFICATION	3.116051999541741E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998973499341542	WITHOUT_CLASSIFICATION	1.026500658456779E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999855673402853	WITHOUT_CLASSIFICATION	1.4432659714554617E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999703918636911	WITHOUT_CLASSIFICATION	2.9608136308870815E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999703918636911	WITHOUT_CLASSIFICATION	2.9608136308870815E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999534844939771	WITHOUT_CLASSIFICATION	4.651550602294918E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9986380341895768	WITHOUT_CLASSIFICATION	0.001361965810423195	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998054399236828	WITHOUT_CLASSIFICATION	1.945600763171635E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999982067179124	WITHOUT_CLASSIFICATION	1.7932820876194326E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999938538181462	WITHOUT_CLASSIFICATION	6.146181853791949E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999887398740275	WITHOUT_CLASSIFICATION	1.1260125972578395E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999887398740275	WITHOUT_CLASSIFICATION	1.1260125972578395E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999844349701336	WITHOUT_CLASSIFICATION	1.556502986652246E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996340818691336	WITHOUT_CLASSIFICATION	3.6591813086634143E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997057637273067	WITHOUT_CLASSIFICATION	2.9423627269339463E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997057637273067	WITHOUT_CLASSIFICATION	2.9423627269339463E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.999911901999421	WITHOUT_CLASSIFICATION	8.80980005789499E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999415454440143	WITHOUT_CLASSIFICATION	5.845455598572913E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997997320216081	WITHOUT_CLASSIFICATION	2.0026797839182254E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999697258921643	WITHOUT_CLASSIFICATION	3.0274107835851405E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999992626870188	WITHOUT_CLASSIFICATION	7.373129813003055E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997084605310527	WITHOUT_CLASSIFICATION	2.9153946894737675E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999969013888311	WITHOUT_CLASSIFICATION	3.098611168886156E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9998603693685916	WITHOUT_CLASSIFICATION	1.3963063140840442E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999721843653093	WITHOUT_CLASSIFICATION	2.7815634690579187E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999882739611862	WITHOUT_CLASSIFICATION	1.1726038813913656E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9987972462593259	WITHOUT_CLASSIFICATION	0.0012027537406742229	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9210107664938187	WITHOUT_CLASSIFICATION	0.07898923350618124	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.5488082328609006	IMPLEMENTATION	0.4511917671390995	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999980882310273	WITHOUT_CLASSIFICATION	1.9117689726469597E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.999713622937148	WITHOUT_CLASSIFICATION	2.8637706285199134E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999858889291391	WITHOUT_CLASSIFICATION	1.4111070860892254E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998800126010831	WITHOUT_CLASSIFICATION	1.1998739891691849E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9813977679279103	WITHOUT_CLASSIFICATION	0.018602232072089605	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9979570920828186	WITHOUT_CLASSIFICATION	0.002042907917181351	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9994396439479641	WITHOUT_CLASSIFICATION	5.603560520358547E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9987735374127658	WITHOUT_CLASSIFICATION	0.0012264625872342254	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997352896457039	WITHOUT_CLASSIFICATION	2.647103542960239E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.997102896754397	WITHOUT_CLASSIFICATION	0.0028971032456030898	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997923179080223	WITHOUT_CLASSIFICATION	2.076820919777091E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999424000390668	WITHOUT_CLASSIFICATION	5.759996093315134E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999901526600634	WITHOUT_CLASSIFICATION	9.847339936618899E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999820762568383	WITHOUT_CLASSIFICATION	1.7923743161647822E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999985038327452	WITHOUT_CLASSIFICATION	1.4961672546559567E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999808421147173	WITHOUT_CLASSIFICATION	1.9157885282809834E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9994836772155266	WITHOUT_CLASSIFICATION	5.163227844735453E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999469551926992	WITHOUT_CLASSIFICATION	5.3044807300753214E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999992668935632	WITHOUT_CLASSIFICATION	7.331064368021875E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999933437022363	WITHOUT_CLASSIFICATION	6.656297763703502E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996275047566716	WITHOUT_CLASSIFICATION	3.724952433283717E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999181163251354	WITHOUT_CLASSIFICATION	8.188367486463228E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999956840755849	WITHOUT_CLASSIFICATION	4.3159244150808855E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999944300679083	WITHOUT_CLASSIFICATION	5.569932091761821E-6	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999781329466817	WITHOUT_CLASSIFICATION	2.1867053318274792E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999807240082748	WITHOUT_CLASSIFICATION	1.927599172519655E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9998712133574859	WITHOUT_CLASSIFICATION	1.287866425141461E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998301147266988	WITHOUT_CLASSIFICATION	1.6988527330123097E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997219328868312	WITHOUT_CLASSIFICATION	2.78067113168836E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.999908297745093	WITHOUT_CLASSIFICATION	9.170225490692601E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999672416465287	WITHOUT_CLASSIFICATION	3.275835347127324E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9942651663666431	WITHOUT_CLASSIFICATION	0.005734833633356973	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997479079168893	WITHOUT_CLASSIFICATION	2.520920831106302E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999323672621341	WITHOUT_CLASSIFICATION	6.76327378658882E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999437211466701	WITHOUT_CLASSIFICATION	5.627885332991102E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6354024087074714	WITHOUT_CLASSIFICATION	0.36459759129252867	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999483005790688	WITHOUT_CLASSIFICATION	5.169942093118204E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999763940677795	WITHOUT_CLASSIFICATION	2.3605932220466062E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999811868738611	WITHOUT_CLASSIFICATION	1.8813126138906284E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999844543485982	WITHOUT_CLASSIFICATION	1.5545651401839385E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999552575796784	WITHOUT_CLASSIFICATION	4.4742420321613154E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998882946782648	WITHOUT_CLASSIFICATION	1.1170532173515162E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999993408951653	WITHOUT_CLASSIFICATION	6.591048347328278E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9995890896095377	WITHOUT_CLASSIFICATION	4.109103904622498E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9995890896095377	WITHOUT_CLASSIFICATION	4.109103904622498E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999961359534	WITHOUT_CLASSIFICATION	3.864046655183535E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998064189386565	WITHOUT_CLASSIFICATION	1.935810613435589E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999990578148356	WITHOUT_CLASSIFICATION	9.421851644463764E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999996093894678	WITHOUT_CLASSIFICATION	3.906105321887932E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999931007093564	WITHOUT_CLASSIFICATION	6.899290643608683E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999770133040992	WITHOUT_CLASSIFICATION	2.298669590091074E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999839801097722	WITHOUT_CLASSIFICATION	1.601989022786122E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997469578377	WITHOUT_CLASSIFICATION	2.530421623554548E-7	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999992732435592	WITHOUT_CLASSIFICATION	7.267564408009007E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999947850914421	WITHOUT_CLASSIFICATION	5.214908557769459E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998618854429657	WITHOUT_CLASSIFICATION	1.381145570342496E-4	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996613115610665	WITHOUT_CLASSIFICATION	3.3868843893357055E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997613010332	WITHOUT_CLASSIFICATION	2.386989668556796E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999239353278326	WITHOUT_CLASSIFICATION	7.606467216734715E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998003469014518	WITHOUT_CLASSIFICATION	1.996530985483422E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998003469014518	WITHOUT_CLASSIFICATION	1.996530985483422E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999995484162096	WITHOUT_CLASSIFICATION	4.515837903862889E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999213441369346	WITHOUT_CLASSIFICATION	7.865586306546179E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998749161140771	WITHOUT_CLASSIFICATION	1.2508388592294932E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999945179699623	WITHOUT_CLASSIFICATION	5.482030037666999E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999202887376916	WITHOUT_CLASSIFICATION	7.971126230846429E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311301439565	WITHOUT_CLASSIFICATION	6.886985604348551E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999587786485123	WITHOUT_CLASSIFICATION	4.1221351487670584E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999987546145732	WITHOUT_CLASSIFICATION	1.2453854267899845E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999131029012848	WITHOUT_CLASSIFICATION	8.689709871517658E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.987275236729677	WITHOUT_CLASSIFICATION	0.01272476327032298	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9975713606477351	WITHOUT_CLASSIFICATION	0.002428639352264992	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9993196449226189	WITHOUT_CLASSIFICATION	6.803550773810855E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999959087604066	WITHOUT_CLASSIFICATION	4.091239593398288E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999538154675629	WITHOUT_CLASSIFICATION	4.618453243708934E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998661171153569	WITHOUT_CLASSIFICATION	1.3388288464304856E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9994597885726696	WITHOUT_CLASSIFICATION	5.40211427330381E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999966940900641	WITHOUT_CLASSIFICATION	3.305909935955904E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994133622306	WITHOUT_CLASSIFICATION	5.866377693904461E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999954730922266	WITHOUT_CLASSIFICATION	4.5269077734015435E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999960945013654	WITHOUT_CLASSIFICATION	3.905498634579989E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998136922682	WITHOUT_CLASSIFICATION	1.8630773183641113E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999982237400914	WITHOUT_CLASSIFICATION	1.776259908616731E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999598365503366	WITHOUT_CLASSIFICATION	4.0163449663325294E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999158958810123	WITHOUT_CLASSIFICATION	8.410411898772659E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.998208784910504	WITHOUT_CLASSIFICATION	0.0017912150894960088	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998205250253774	WITHOUT_CLASSIFICATION	1.7947497462253754E-4	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9990183483463346	WITHOUT_CLASSIFICATION	9.816516536653862E-4	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999138335888135	WITHOUT_CLASSIFICATION	8.616641118655266E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999960894716152	WITHOUT_CLASSIFICATION	3.91052838485609E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999431489624226	WITHOUT_CLASSIFICATION	5.6851037577240285E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999869283227055	WITHOUT_CLASSIFICATION	1.3071677294409094E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999993464299203	WITHOUT_CLASSIFICATION	6.535700796974882E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9903274750744256	WITHOUT_CLASSIFICATION	0.00967252492557449	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.998992138820483	WITHOUT_CLASSIFICATION	0.0010078611795169843	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994767256232573	WITHOUT_CLASSIFICATION	5.232743767427412E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999801606075284	WITHOUT_CLASSIFICATION	1.983939247161416E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988509602095	WITHOUT_CLASSIFICATION	1.1490397905314925E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999059111568208	WITHOUT_CLASSIFICATION	9.408884317926626E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999921469688	WITHOUT_CLASSIFICATION	7.853031235976514E-9	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993576569513926	WITHOUT_CLASSIFICATION	6.423430486074149E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993576569513926	WITHOUT_CLASSIFICATION	6.423430486074149E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999971621742796	WITHOUT_CLASSIFICATION	2.83782572037644E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999400277337009	WITHOUT_CLASSIFICATION	5.997226629913897E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9996287581482382	WITHOUT_CLASSIFICATION	3.712418517618667E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999787215317876	WITHOUT_CLASSIFICATION	2.127846821244718E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9495101629315976	WITHOUT_CLASSIFICATION	0.050489837068402356	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999824442156017	WITHOUT_CLASSIFICATION	1.7555784398247385E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999466669492764	WITHOUT_CLASSIFICATION	5.333305072362722E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9988196728049075	WITHOUT_CLASSIFICATION	0.001180327195092575	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999948152879561	WITHOUT_CLASSIFICATION	5.18471204390417E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882329229894	WITHOUT_CLASSIFICATION	2.1176707701066702E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999223129796813	WITHOUT_CLASSIFICATION	7.768702031872915E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999993115791256	WITHOUT_CLASSIFICATION	6.884208744651203E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999985303260942	WITHOUT_CLASSIFICATION	1.4696739058124969E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9891241901439887	WITHOUT_CLASSIFICATION	0.010875809856011222	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999960777697897	WITHOUT_CLASSIFICATION	3.922230210303861E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999893304080651	WITHOUT_CLASSIFICATION	1.0669591934915086E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999978999214725	WITHOUT_CLASSIFICATION	2.1000785275508117E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999773168482845	WITHOUT_CLASSIFICATION	2.2683151715524126E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999784139429128	WITHOUT_CLASSIFICATION	2.158605708728896E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996713292174	WITHOUT_CLASSIFICATION	3.286707825209396E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9822539049730874	WITHOUT_CLASSIFICATION	0.017746095026912646	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999694395114012	WITHOUT_CLASSIFICATION	3.0560488598804206E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9988409346113971	WITHOUT_CLASSIFICATION	0.0011590653886028902	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999203406923837	WITHOUT_CLASSIFICATION	7.965930761635167E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999892343226804	WITHOUT_CLASSIFICATION	1.0765677319598287E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998666690388902	WITHOUT_CLASSIFICATION	1.333309611097944E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999771709719326	WITHOUT_CLASSIFICATION	2.282902806733941E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9964784550227824	WITHOUT_CLASSIFICATION	0.0035215449772176446	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999655625032595	WITHOUT_CLASSIFICATION	3.443749674053149E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9995356754714969	WITHOUT_CLASSIFICATION	4.643245285031208E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999991912769656	WITHOUT_CLASSIFICATION	8.087230343749288E-7	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999985225700773	WITHOUT_CLASSIFICATION	1.47742992271854E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999923043693123	WITHOUT_CLASSIFICATION	7.695630687775995E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999721793053	WITHOUT_CLASSIFICATION	2.7820694836810295E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998974406114597	WITHOUT_CLASSIFICATION	1.0255938854041828E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999992690056683	WITHOUT_CLASSIFICATION	7.309943317124758E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999962541564936	WITHOUT_CLASSIFICATION	3.745843506431339E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998358409396502	WITHOUT_CLASSIFICATION	1.6415906034983305E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9990662830719174	WITHOUT_CLASSIFICATION	9.337169280827929E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999597027311199	WITHOUT_CLASSIFICATION	4.0297268880098644E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993124030361	WITHOUT_CLASSIFICATION	6.875969638387864E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999857994038556	WITHOUT_CLASSIFICATION	1.420059614443575E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999804875726191	WITHOUT_CLASSIFICATION	1.9512427380832295E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999568611209576	WITHOUT_CLASSIFICATION	4.3138879042341914E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.987520621665125	WITHOUT_CLASSIFICATION	0.012479378334874927	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999992615045236	WITHOUT_CLASSIFICATION	7.384954764361451E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997613010332	WITHOUT_CLASSIFICATION	2.386989668556796E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999919401622559	WITHOUT_CLASSIFICATION	8.059837744067632E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999996078530832	WITHOUT_CLASSIFICATION	3.921469167682642E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9974852072930647	WITHOUT_CLASSIFICATION	0.0025147927069353606	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999997229155307	WITHOUT_CLASSIFICATION	2.7708446928148387E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997874318367	WITHOUT_CLASSIFICATION	2.1256816328465422E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999631910677875	WITHOUT_CLASSIFICATION	3.6808932212509765E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999389669387083	WITHOUT_CLASSIFICATION	6.103306129171438E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7232335839477738	WITHOUT_CLASSIFICATION	0.2767664160522261	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988880098271	WITHOUT_CLASSIFICATION	1.1119901729095387E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9994894886068134	WITHOUT_CLASSIFICATION	5.105113931865814E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9996348297748522	WITHOUT_CLASSIFICATION	3.6517022514788536E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994446253042079	WITHOUT_CLASSIFICATION	5.553746957921994E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999932002614377	WITHOUT_CLASSIFICATION	6.799738562419914E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9874685866027535	WITHOUT_CLASSIFICATION	0.012531413397246576	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471218415527	WITHOUT_CLASSIFICATION	5.2878158447359194E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9993242121987026	WITHOUT_CLASSIFICATION	6.757878012973391E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9953259464371539	WITHOUT_CLASSIFICATION	0.004674053562846102	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999842811768467	WITHOUT_CLASSIFICATION	1.5718823153319007E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471218415527	WITHOUT_CLASSIFICATION	5.2878158447359194E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.6892518665904899	WITHOUT_CLASSIFICATION	0.3107481334095102	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9989150593137451	WITHOUT_CLASSIFICATION	0.0010849406862548454	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.99997352183283	WITHOUT_CLASSIFICATION	2.6478167169979624E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997503150523773	WITHOUT_CLASSIFICATION	2.4968494762273887E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998148907019277	WITHOUT_CLASSIFICATION	1.8510929807220925E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999392533530015	WITHOUT_CLASSIFICATION	6.074664699842409E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999995099583094	WITHOUT_CLASSIFICATION	4.900416906253796E-7	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9993994746173589	WITHOUT_CLASSIFICATION	6.005253826411148E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999992105788613	WITHOUT_CLASSIFICATION	7.89421138551398E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9958033159201909	WITHOUT_CLASSIFICATION	0.004196684079809047	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9993389079285674	WITHOUT_CLASSIFICATION	6.610920714326087E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8708983875617933	WITHOUT_CLASSIFICATION	0.1291016124382067	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997177011883632	WITHOUT_CLASSIFICATION	2.822988116368034E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9933603242824264	WITHOUT_CLASSIFICATION	0.006639675717573587	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9984838791117518	WITHOUT_CLASSIFICATION	0.001516120888248067	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995806875808049	WITHOUT_CLASSIFICATION	4.193124191951513E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999974503410504	WITHOUT_CLASSIFICATION	2.5496589496322224E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999948489879437	WITHOUT_CLASSIFICATION	5.151012056283844E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997160634357395	WITHOUT_CLASSIFICATION	2.8393656426053276E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9986778207949458	WITHOUT_CLASSIFICATION	0.001322179205054133	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9992699802057158	WITHOUT_CLASSIFICATION	7.300197942841956E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999676956461702	WITHOUT_CLASSIFICATION	3.2304353829843735E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9907109751203594	WITHOUT_CLASSIFICATION	0.009289024879640617	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999994622848	WITHOUT_CLASSIFICATION	5.377152335981675E-10	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999896382527997	WITHOUT_CLASSIFICATION	1.0361747200298387E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999859640531998	WITHOUT_CLASSIFICATION	1.4035946800150553E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9856926389542225	WITHOUT_CLASSIFICATION	0.014307361045777501	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999119171093948	WITHOUT_CLASSIFICATION	8.808289060528734E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9838251808441631	WITHOUT_CLASSIFICATION	0.016174819155836885	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999197652366517	WITHOUT_CLASSIFICATION	8.023476334824818E-5	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999640667637035	WITHOUT_CLASSIFICATION	3.5933236296420435E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998703040380533	WITHOUT_CLASSIFICATION	1.296959619467132E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999775675992709	WITHOUT_CLASSIFICATION	2.2432400728986325E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999997639412111	WITHOUT_CLASSIFICATION	2.360587889014609E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999997961377498	WITHOUT_CLASSIFICATION	2.0386225020379263E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999860087402	WITHOUT_CLASSIFICATION	1.3991259791562923E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999724983322	WITHOUT_CLASSIFICATION	2.750166780292427E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996758408120415	WITHOUT_CLASSIFICATION	3.241591879585094E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999416327946926	WITHOUT_CLASSIFICATION	5.8367205307329404E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9980461210075786	WITHOUT_CLASSIFICATION	0.0019538789924214207	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999047181932023	WITHOUT_CLASSIFICATION	9.528180679781672E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999047181932023	WITHOUT_CLASSIFICATION	9.528180679781672E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.99994130670054	WITHOUT_CLASSIFICATION	5.869329945996763E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999977386545681	WITHOUT_CLASSIFICATION	2.26134543198857E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999475524908616	WITHOUT_CLASSIFICATION	5.2447509138299156E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5049108362147416	WITHOUT_CLASSIFICATION	0.4950891637852583	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999890960109499	WITHOUT_CLASSIFICATION	1.0903989050104664E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999890960109499	WITHOUT_CLASSIFICATION	1.0903989050104664E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9997567968328834	WITHOUT_CLASSIFICATION	2.432031671165529E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983021987552394	WITHOUT_CLASSIFICATION	0.0016978012447605509	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999990025343984	WITHOUT_CLASSIFICATION	9.974656016001856E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9948349145858975	WITHOUT_CLASSIFICATION	0.0051650854141025455	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9428348083387303	WITHOUT_CLASSIFICATION	0.057165191661269585	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999485040250231	WITHOUT_CLASSIFICATION	5.14959749768448E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997472516058424	WITHOUT_CLASSIFICATION	2.5274839415750244E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999223252828012	WITHOUT_CLASSIFICATION	7.767471719880684E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999988117354476	WITHOUT_CLASSIFICATION	1.1882645523818931E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689884559464	WITHOUT_CLASSIFICATION	3.101154405351472E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689884559464	WITHOUT_CLASSIFICATION	3.101154405351472E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9992990472592604	WITHOUT_CLASSIFICATION	7.009527407394908E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997102072897011	WITHOUT_CLASSIFICATION	2.897927102988581E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997367389527057	WITHOUT_CLASSIFICATION	2.6326104729433006E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995884017912479	WITHOUT_CLASSIFICATION	4.1159820875209227E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998797868706958	WITHOUT_CLASSIFICATION	1.2021312930427662E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932712036685	WITHOUT_CLASSIFICATION	6.728796331442725E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999035558191681	WITHOUT_CLASSIFICATION	9.644418083179194E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991587923657	WITHOUT_CLASSIFICATION	8.412076342466005E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999824279646274	WITHOUT_CLASSIFICATION	1.7572035372597603E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9996731441759609	WITHOUT_CLASSIFICATION	3.268558240392054E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999809174165416	WITHOUT_CLASSIFICATION	1.9082583458416338E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9958033159201909	WITHOUT_CLASSIFICATION	0.004196684079809047	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999630095723536	WITHOUT_CLASSIFICATION	3.699042764635241E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994907943927873	WITHOUT_CLASSIFICATION	5.092056072126262E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999994835356886	WITHOUT_CLASSIFICATION	5.164643113621273E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998326244562379	WITHOUT_CLASSIFICATION	1.673755437621523E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995387454447373	WITHOUT_CLASSIFICATION	4.61254555262771E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994433002551388	WITHOUT_CLASSIFICATION	5.566997448611322E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999524293184704	WITHOUT_CLASSIFICATION	4.757068152959732E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999137362588421	WITHOUT_CLASSIFICATION	8.626374115790321E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9979818742678576	WITHOUT_CLASSIFICATION	0.0020181257321425024	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983798003212148	WITHOUT_CLASSIFICATION	0.001620199678785311	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983798003212148	WITHOUT_CLASSIFICATION	0.001620199678785311	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993975536416896	WITHOUT_CLASSIFICATION	6.024463583105178E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999911227970704	WITHOUT_CLASSIFICATION	8.877202929548953E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9983287867518321	WITHOUT_CLASSIFICATION	0.001671213248167838	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994793196465868	WITHOUT_CLASSIFICATION	5.206803534132098E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9996980514360796	WITHOUT_CLASSIFICATION	3.0194856392043435E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998277122773495	WITHOUT_CLASSIFICATION	1.7228772265055308E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999774152204017	WITHOUT_CLASSIFICATION	2.2584779598305446E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999985930405	WITHOUT_CLASSIFICATION	1.4069595471952606E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992752175143909	WITHOUT_CLASSIFICATION	7.24782485609189E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999175532612307	WITHOUT_CLASSIFICATION	8.244673876930664E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118390403988	WITHOUT_CLASSIFICATION	8.816095960118888E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998631875060734	WITHOUT_CLASSIFICATION	1.3681249392661875E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999988950193713	WITHOUT_CLASSIFICATION	1.1049806287048243E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99997553422933	WITHOUT_CLASSIFICATION	2.4465770669919225E-5	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999973010825488	WITHOUT_CLASSIFICATION	2.6989174512456455E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998165029328354	WITHOUT_CLASSIFICATION	1.8349706716468668E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999935792246203	WITHOUT_CLASSIFICATION	6.420775379704761E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998191660286925	WITHOUT_CLASSIFICATION	1.8083397130749104E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9979484938988523	WITHOUT_CLASSIFICATION	0.0020515061011476612	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999996941284468	WITHOUT_CLASSIFICATION	3.058715531830912E-7	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999757615322108	WITHOUT_CLASSIFICATION	2.4238467789144034E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999973329445	WITHOUT_CLASSIFICATION	2.6670554959803327E-9	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997997320216081	WITHOUT_CLASSIFICATION	2.0026797839182254E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999997243276386	WITHOUT_CLASSIFICATION	2.756723613907594E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468324890541	WITHOUT_CLASSIFICATION	5.316751094592369E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999468324890541	WITHOUT_CLASSIFICATION	5.316751094592369E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985954630463089	WITHOUT_CLASSIFICATION	0.0014045369536912263	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9914762421058798	WITHOUT_CLASSIFICATION	0.008523757894120155	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999936032060506	WITHOUT_CLASSIFICATION	6.396793949418598E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999864791695797	WITHOUT_CLASSIFICATION	1.3520830420209786E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989022417297	WITHOUT_CLASSIFICATION	1.0977582702948446E-5	IMPLEMENTATION
