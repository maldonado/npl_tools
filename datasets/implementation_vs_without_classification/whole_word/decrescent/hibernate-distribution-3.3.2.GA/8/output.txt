// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9974723330655474	WITHOUT_CLASSIFICATION	0.002527666934452488	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9974723330655474	WITHOUT_CLASSIFICATION	0.002527666934452488	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9766288980915994	WITHOUT_CLASSIFICATION	0.02337110190840063	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9899172454564328	WITHOUT_CLASSIFICATION	0.010082754543567291	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9553275792026465	WITHOUT_CLASSIFICATION	0.04467242079735354	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.954847247204909	IMPLEMENTATION	0.045152752795091004	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9989990833821406	WITHOUT_CLASSIFICATION	0.001000916617859426	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7044246339935755	IMPLEMENTATION	0.29557536600642464	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9891395856819271	WITHOUT_CLASSIFICATION	0.010860414318072806	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.948328353527479	WITHOUT_CLASSIFICATION	0.051671646472520996	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998096900565704	WITHOUT_CLASSIFICATION	1.9030994342959746E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8460791696797448	WITHOUT_CLASSIFICATION	0.15392083032025522	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9548094772702638	WITHOUT_CLASSIFICATION	0.04519052272973631	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9548094772702638	WITHOUT_CLASSIFICATION	0.04519052272973631	IMPLEMENTATION
/**	IMPLEMENTATION	0.5319940438537513	WITHOUT_CLASSIFICATION	0.46800595614624885	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6568347708662194	IMPLEMENTATION	0.3431652291337805	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.999995695660644	IMPLEMENTATION	4.304339356088363E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.6679859897518492	WITHOUT_CLASSIFICATION	0.3320140102481508	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999560081063192	WITHOUT_CLASSIFICATION	4.3991893680665074E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9641331359110252	WITHOUT_CLASSIFICATION	0.035866864088974715	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9252976332657658	WITHOUT_CLASSIFICATION	0.0747023667342342	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9966163265209421	WITHOUT_CLASSIFICATION	0.0033836734790580157	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.939016047145469	WITHOUT_CLASSIFICATION	0.0609839528545309	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8843179367978286	WITHOUT_CLASSIFICATION	0.11568206320217145	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8843179367978286	WITHOUT_CLASSIFICATION	0.11568206320217145	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.6018376075150459	WITHOUT_CLASSIFICATION	0.3981623924849541	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9549894873525276	WITHOUT_CLASSIFICATION	0.04501051264747229	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9231943471173906	IMPLEMENTATION	0.07680565288260932	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9838539088026572	WITHOUT_CLASSIFICATION	0.01614609119734281	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.8436998845796116	IMPLEMENTATION	0.1563001154203884	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9798444389780062	WITHOUT_CLASSIFICATION	0.02015556102199376	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9799132943208837	WITHOUT_CLASSIFICATION	0.020086705679116326	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9994972896300341	WITHOUT_CLASSIFICATION	5.027103699658341E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9756935877736336	WITHOUT_CLASSIFICATION	0.024306412226366474	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8921724661561864	IMPLEMENTATION	0.10782753384381358	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9718882081943508	WITHOUT_CLASSIFICATION	0.02811179180564917	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9466911273856267	IMPLEMENTATION	0.053308872614373275	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9784303387205945	WITHOUT_CLASSIFICATION	0.021569661279405558	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9881704674617962	WITHOUT_CLASSIFICATION	0.011829532538203708	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8782911978425366	IMPLEMENTATION	0.12170880215746338	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8782911978425366	IMPLEMENTATION	0.12170880215746338	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.6329363670148792	IMPLEMENTATION	0.3670636329851208	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9998962599589668	WITHOUT_CLASSIFICATION	1.0374004103328786E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.997160514249655	WITHOUT_CLASSIFICATION	0.0028394857503450392	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9993089928351118	IMPLEMENTATION	6.910071648882585E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9684093424282141	WITHOUT_CLASSIFICATION	0.03159065757178587	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9738480435585473	WITHOUT_CLASSIFICATION	0.02615195644145274	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9948393958483214	WITHOUT_CLASSIFICATION	0.005160604151678636	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9995505399525765	WITHOUT_CLASSIFICATION	4.4946004742364075E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9975818882460973	WITHOUT_CLASSIFICATION	0.0024181117539027624	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9950535939375283	WITHOUT_CLASSIFICATION	0.0049464060624715795	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9439531999857863	IMPLEMENTATION	0.05604680001421379	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9503054955680049	WITHOUT_CLASSIFICATION	0.04969450443199522	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.6286393695120721	WITHOUT_CLASSIFICATION	0.3713606304879279	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9295193236831432	WITHOUT_CLASSIFICATION	0.07048067631685684	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.979909579389541	WITHOUT_CLASSIFICATION	0.020090420610458876	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9295193236831432	WITHOUT_CLASSIFICATION	0.07048067631685684	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9995205173010775	IMPLEMENTATION	4.7948269892258635E-4	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6308547017701297	IMPLEMENTATION	0.3691452982298703	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9295193236831432	WITHOUT_CLASSIFICATION	0.07048067631685684	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999926463838845	WITHOUT_CLASSIFICATION	7.353616115536115E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999926463838845	WITHOUT_CLASSIFICATION	7.353616115536115E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999831175384134	IMPLEMENTATION	1.6882461586666224E-5	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9973034951784249	WITHOUT_CLASSIFICATION	0.0026965048215751167	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997821480693762	WITHOUT_CLASSIFICATION	2.1785193062384854E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999865890283716	WITHOUT_CLASSIFICATION	1.3410971628527214E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999966097680593	WITHOUT_CLASSIFICATION	3.390231940698048E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999820606581975	WITHOUT_CLASSIFICATION	1.7939341802439737E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999820606581975	WITHOUT_CLASSIFICATION	1.7939341802439737E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999990203198846	WITHOUT_CLASSIFICATION	9.796801154474247E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999373593414568	WITHOUT_CLASSIFICATION	6.264065854331229E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999618277589093	WITHOUT_CLASSIFICATION	3.817224109063203E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999409302932099	WITHOUT_CLASSIFICATION	5.9069706790215635E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995931556341	WITHOUT_CLASSIFICATION	4.068443659141782E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995931556341	WITHOUT_CLASSIFICATION	4.068443659141782E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999920555451046	WITHOUT_CLASSIFICATION	7.944454895299498E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996571750883999	WITHOUT_CLASSIFICATION	3.4282491160011764E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999574471927597	WITHOUT_CLASSIFICATION	4.255280724041114E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999593535375655	WITHOUT_CLASSIFICATION	4.0646462434485754E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999987576001125	WITHOUT_CLASSIFICATION	1.242399887536851E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999933012862142	WITHOUT_CLASSIFICATION	6.698713785720563E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999889160454019	WITHOUT_CLASSIFICATION	1.1083954598154518E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993555306151662	WITHOUT_CLASSIFICATION	6.44469384833704E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999748773071618	WITHOUT_CLASSIFICATION	2.5122692838197867E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999963847193247	WITHOUT_CLASSIFICATION	3.615280675210672E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997473953686283	WITHOUT_CLASSIFICATION	2.5260463137158443E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997473953686283	WITHOUT_CLASSIFICATION	2.5260463137158443E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999983844283161	WITHOUT_CLASSIFICATION	1.6155716838970544E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999937847888007	WITHOUT_CLASSIFICATION	6.2152111992986036E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999074978390449	WITHOUT_CLASSIFICATION	9.250216095514695E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999542604768953	WITHOUT_CLASSIFICATION	4.5739523104652826E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9846130035950862	WITHOUT_CLASSIFICATION	0.015386996404913797	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5319940438537513	WITHOUT_CLASSIFICATION	0.46800595614624885	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5319940438537513	WITHOUT_CLASSIFICATION	0.46800595614624885	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999944986292715	WITHOUT_CLASSIFICATION	5.501370728533941E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996635849084279	WITHOUT_CLASSIFICATION	3.364150915721105E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999768350379201	WITHOUT_CLASSIFICATION	2.3164962079915775E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999030048821917	WITHOUT_CLASSIFICATION	9.699511780824415E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999703981507646	WITHOUT_CLASSIFICATION	2.960184923534722E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999465279682398	WITHOUT_CLASSIFICATION	5.347203176024877E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995915941517617	WITHOUT_CLASSIFICATION	4.084058482382507E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999569523174903	WITHOUT_CLASSIFICATION	4.304768250983174E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9987022488337445	WITHOUT_CLASSIFICATION	0.0012977511662555328	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9987022488337445	WITHOUT_CLASSIFICATION	0.0012977511662555328	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9994116360200019	WITHOUT_CLASSIFICATION	5.883639799980479E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.6869732006658346	WITHOUT_CLASSIFICATION	0.31302679933416544	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999312989879351	WITHOUT_CLASSIFICATION	6.870101206490168E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999710356745065	WITHOUT_CLASSIFICATION	2.8964325493493296E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999925906929144	WITHOUT_CLASSIFICATION	7.409307085698151E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999994959475859	WITHOUT_CLASSIFICATION	5.040524140915289E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9992519911062466	WITHOUT_CLASSIFICATION	7.480088937534952E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998770352688573	WITHOUT_CLASSIFICATION	1.2296473114265175E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999387565098133	WITHOUT_CLASSIFICATION	6.124349018670382E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997585233905394	WITHOUT_CLASSIFICATION	2.4147660946073342E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9995147534690635	WITHOUT_CLASSIFICATION	4.852465309364988E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.999751507701283	WITHOUT_CLASSIFICATION	2.484922987170567E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999990014806819	WITHOUT_CLASSIFICATION	9.985193180959942E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996440261818661	WITHOUT_CLASSIFICATION	3.5597381813384576E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999891459245768	WITHOUT_CLASSIFICATION	1.08540754232607E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999975756520566	WITHOUT_CLASSIFICATION	2.424347943437239E-6	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999655766491905	WITHOUT_CLASSIFICATION	3.4423350809524475E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999897381763059	WITHOUT_CLASSIFICATION	1.0261823694189698E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999891393565509	WITHOUT_CLASSIFICATION	1.0860643449169336E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999922721179896	WITHOUT_CLASSIFICATION	7.727882010422563E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999957695097416	WITHOUT_CLASSIFICATION	4.2304902584043746E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999984703738022	WITHOUT_CLASSIFICATION	1.5296261978452703E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999910221499624	WITHOUT_CLASSIFICATION	8.977850037593294E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999940168686262	WITHOUT_CLASSIFICATION	5.983131373794681E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8522399383073407	IMPLEMENTATION	0.14776006169265934	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998368047161483	WITHOUT_CLASSIFICATION	1.6319528385166807E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999614485979098	WITHOUT_CLASSIFICATION	3.855140209009651E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9936982224750813	WITHOUT_CLASSIFICATION	0.00630177752491867	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999951455966829	WITHOUT_CLASSIFICATION	4.8544033171052774E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999982579372914	WITHOUT_CLASSIFICATION	1.7420627085371545E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999876863673287	WITHOUT_CLASSIFICATION	1.2313632671300586E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999984802821353	WITHOUT_CLASSIFICATION	1.5197178646953869E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999948648614534	WITHOUT_CLASSIFICATION	5.135138546579848E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999940609181017	WITHOUT_CLASSIFICATION	5.93908189833647E-6	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999896379652703	WITHOUT_CLASSIFICATION	1.0362034729647633E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999990935283642	WITHOUT_CLASSIFICATION	9.06471635691951E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999940609181017	WITHOUT_CLASSIFICATION	5.93908189833647E-6	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9985591889233979	WITHOUT_CLASSIFICATION	0.001440811076602079	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9991941995786533	WITHOUT_CLASSIFICATION	8.058004213466342E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997325941719305	WITHOUT_CLASSIFICATION	2.674058280694798E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999589183787109	WITHOUT_CLASSIFICATION	4.108162128909876E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999624540401153	WITHOUT_CLASSIFICATION	3.754595988469256E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999624540401153	WITHOUT_CLASSIFICATION	3.754595988469256E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9987039535849075	WITHOUT_CLASSIFICATION	0.001296046415092598	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999389398445	WITHOUT_CLASSIFICATION	6.106015550398918E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999996260967696	WITHOUT_CLASSIFICATION	3.73903230405655E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998458744603361	WITHOUT_CLASSIFICATION	1.5412553966399122E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999965194647045	WITHOUT_CLASSIFICATION	3.480535295525116E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999404845361605	WITHOUT_CLASSIFICATION	5.951546383958318E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.997971560080758	WITHOUT_CLASSIFICATION	0.0020284399192419854	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999770408169634	WITHOUT_CLASSIFICATION	2.2959183036566913E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999929737265894	WITHOUT_CLASSIFICATION	7.0262734106933565E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999709501940883	WITHOUT_CLASSIFICATION	2.9049805911622775E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999709501940883	WITHOUT_CLASSIFICATION	2.9049805911622775E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999921836761517	WITHOUT_CLASSIFICATION	7.816323848306472E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999344814349039	WITHOUT_CLASSIFICATION	6.551856509614175E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999971660274312	WITHOUT_CLASSIFICATION	2.8339725688134202E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999709501940883	WITHOUT_CLASSIFICATION	2.9049805911622775E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999921836761517	WITHOUT_CLASSIFICATION	7.816323848306472E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999921836761517	WITHOUT_CLASSIFICATION	7.816323848306472E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999936292811793	WITHOUT_CLASSIFICATION	6.370718820727425E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999143709968604	WITHOUT_CLASSIFICATION	8.562900313956055E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999894632858	WITHOUT_CLASSIFICATION	1.0536714189269782E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999963596144695	WITHOUT_CLASSIFICATION	3.6403855304492283E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993357712140312	WITHOUT_CLASSIFICATION	6.642287859687827E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993357712140312	WITHOUT_CLASSIFICATION	6.642287859687827E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999808090274954	WITHOUT_CLASSIFICATION	1.9190972504520938E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994089546381815	WITHOUT_CLASSIFICATION	5.91045361818518E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999836442885865	WITHOUT_CLASSIFICATION	1.6355711413438347E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992570104586	WITHOUT_CLASSIFICATION	7.429895414787889E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992570104586	WITHOUT_CLASSIFICATION	7.429895414787889E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997323653626228	WITHOUT_CLASSIFICATION	2.6763463737719263E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998702497199079	WITHOUT_CLASSIFICATION	1.297502800920701E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999724982720783	WITHOUT_CLASSIFICATION	2.75017279215541E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999880753302	WITHOUT_CLASSIFICATION	1.1924669881653112E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999907260139507	WITHOUT_CLASSIFICATION	9.273986049307202E-6	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999211408889241	WITHOUT_CLASSIFICATION	7.88591110758353E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997821186972489	WITHOUT_CLASSIFICATION	2.1788130275122108E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9997707090869837	WITHOUT_CLASSIFICATION	2.2929091301628692E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999724982720783	WITHOUT_CLASSIFICATION	2.75017279215541E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9993223693045058	WITHOUT_CLASSIFICATION	6.776306954941565E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999215094349813	WITHOUT_CLASSIFICATION	7.849056501873097E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999215094349813	WITHOUT_CLASSIFICATION	7.849056501873097E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999649373649	WITHOUT_CLASSIFICATION	3.50626350793472E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999869653924338	WITHOUT_CLASSIFICATION	1.3034607566158233E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968452959260623	WITHOUT_CLASSIFICATION	0.0031547040739377846	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998638115080428	WITHOUT_CLASSIFICATION	1.3618849195727774E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999784042736141	WITHOUT_CLASSIFICATION	2.1595726385918205E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9993734153580878	WITHOUT_CLASSIFICATION	6.265846419122729E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998837983006094	WITHOUT_CLASSIFICATION	1.1620169939073601E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998745620091176	WITHOUT_CLASSIFICATION	1.254379908824349E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993070963653	WITHOUT_CLASSIFICATION	6.929036346248686E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993070963653	WITHOUT_CLASSIFICATION	6.929036346248686E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997821480693762	WITHOUT_CLASSIFICATION	2.1785193062384854E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999536620783795	WITHOUT_CLASSIFICATION	4.6337921620382184E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999382211818814	WITHOUT_CLASSIFICATION	6.177881811865292E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999626678304429	WITHOUT_CLASSIFICATION	3.733216955716267E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999126509462668	WITHOUT_CLASSIFICATION	8.734905373316963E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998173326309916	WITHOUT_CLASSIFICATION	1.8266736900834194E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999693596322511	WITHOUT_CLASSIFICATION	3.064036774897078E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999931932970224	WITHOUT_CLASSIFICATION	6.80670297765191E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999935676923257	WITHOUT_CLASSIFICATION	6.4323076743304054E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999470589095764	WITHOUT_CLASSIFICATION	5.294109042362922E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9998173326309916	WITHOUT_CLASSIFICATION	1.8266736900834194E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999933928845448	WITHOUT_CLASSIFICATION	6.607115455124539E-6	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999889732579908	WITHOUT_CLASSIFICATION	1.1026742009190308E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999236683188466	WITHOUT_CLASSIFICATION	7.633168115333623E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999566376203975	WITHOUT_CLASSIFICATION	4.3362379602337014E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999928993666212	WITHOUT_CLASSIFICATION	7.100633378837007E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999820606581975	WITHOUT_CLASSIFICATION	1.7939341802439737E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998588646476844	WITHOUT_CLASSIFICATION	1.411353523157476E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997476856830053	WITHOUT_CLASSIFICATION	2.5231431699465997E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999760224940819	WITHOUT_CLASSIFICATION	2.397750591811754E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999683169004431	WITHOUT_CLASSIFICATION	3.16830995569341E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997496693668163	WITHOUT_CLASSIFICATION	2.5033063318369975E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999770344864757	WITHOUT_CLASSIFICATION	2.2965513524289153E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999888868583273	WITHOUT_CLASSIFICATION	1.111314167271206E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999452288241607	WITHOUT_CLASSIFICATION	5.477117583939162E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986984066190183	WITHOUT_CLASSIFICATION	0.0013015933809817051	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999973665171977	WITHOUT_CLASSIFICATION	2.6334828023592258E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999935676923257	WITHOUT_CLASSIFICATION	6.4323076743304054E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997496693668163	WITHOUT_CLASSIFICATION	2.5033063318369975E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999990203198846	WITHOUT_CLASSIFICATION	9.796801154474247E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999686411224984	WITHOUT_CLASSIFICATION	3.135887750161863E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999308900813129	WITHOUT_CLASSIFICATION	6.910991868714848E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999778213666747	WITHOUT_CLASSIFICATION	2.21786333252293E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997815370570124	WITHOUT_CLASSIFICATION	2.1846294298751823E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999635493654107	WITHOUT_CLASSIFICATION	3.645063458936989E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999391727223486	WITHOUT_CLASSIFICATION	6.08272776513363E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998371470969193	WITHOUT_CLASSIFICATION	1.6285290308078225E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998371470969193	WITHOUT_CLASSIFICATION	1.6285290308078225E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999942846584442	WITHOUT_CLASSIFICATION	5.7153415557441305E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999455777208077	WITHOUT_CLASSIFICATION	5.442227919220642E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999988701474806	WITHOUT_CLASSIFICATION	1.1298525193942034E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999085201420532	WITHOUT_CLASSIFICATION	9.147985794674905E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999631164557647	WITHOUT_CLASSIFICATION	3.688354423531304E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999559501866327	WITHOUT_CLASSIFICATION	4.404981336729121E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999833305336631	WITHOUT_CLASSIFICATION	1.6669466336870005E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999373593414568	WITHOUT_CLASSIFICATION	6.264065854331229E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999586431043836	WITHOUT_CLASSIFICATION	4.1356895616417314E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999586431043836	WITHOUT_CLASSIFICATION	4.1356895616417314E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999586431043836	WITHOUT_CLASSIFICATION	4.1356895616417314E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999424390630648	WITHOUT_CLASSIFICATION	5.756093693519008E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999586431043836	WITHOUT_CLASSIFICATION	4.1356895616417314E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999953205632812	WITHOUT_CLASSIFICATION	4.6794367188026376E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999970173522225	WITHOUT_CLASSIFICATION	2.9826477775455435E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999902955334633	WITHOUT_CLASSIFICATION	9.70446653678439E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999935676923257	WITHOUT_CLASSIFICATION	6.4323076743304054E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997496693668163	WITHOUT_CLASSIFICATION	2.5033063318369975E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997496693668163	WITHOUT_CLASSIFICATION	2.5033063318369975E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999446380386612	WITHOUT_CLASSIFICATION	5.536196133880401E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9996592192525213	WITHOUT_CLASSIFICATION	3.4078074747863416E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9994941867715202	WITHOUT_CLASSIFICATION	5.058132284796917E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999648769058861	WITHOUT_CLASSIFICATION	3.51230941139198E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999409302932099	WITHOUT_CLASSIFICATION	5.9069706790215635E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999409302932099	WITHOUT_CLASSIFICATION	5.9069706790215635E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9938411262599909	WITHOUT_CLASSIFICATION	0.006158873740009139	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.99999242577185	WITHOUT_CLASSIFICATION	7.574228150003879E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.99999642065316	WITHOUT_CLASSIFICATION	3.5793468400806827E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999943406996731	WITHOUT_CLASSIFICATION	5.659300326994184E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999970268860715	WITHOUT_CLASSIFICATION	2.9731139284336577E-6	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999933978304167	WITHOUT_CLASSIFICATION	6.602169583218449E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995931556341	WITHOUT_CLASSIFICATION	4.068443659141782E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999933102685544	WITHOUT_CLASSIFICATION	6.689731445500184E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999933102685544	WITHOUT_CLASSIFICATION	6.689731445500184E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999920555451046	WITHOUT_CLASSIFICATION	7.944454895299498E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999920555451046	WITHOUT_CLASSIFICATION	7.944454895299498E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990629470544313	WITHOUT_CLASSIFICATION	9.370529455687419E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990629470544313	WITHOUT_CLASSIFICATION	9.370529455687419E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999338648722222	WITHOUT_CLASSIFICATION	6.613512777783103E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999338648722222	WITHOUT_CLASSIFICATION	6.613512777783103E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999409302932099	WITHOUT_CLASSIFICATION	5.9069706790215635E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999995931556341	WITHOUT_CLASSIFICATION	4.068443659141782E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999933102685544	WITHOUT_CLASSIFICATION	6.689731445500184E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999933102685544	WITHOUT_CLASSIFICATION	6.689731445500184E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999920555451046	WITHOUT_CLASSIFICATION	7.944454895299498E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990629470544313	WITHOUT_CLASSIFICATION	9.370529455687419E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9990629470544313	WITHOUT_CLASSIFICATION	9.370529455687419E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999338648722222	WITHOUT_CLASSIFICATION	6.613512777783103E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998327039575551	WITHOUT_CLASSIFICATION	1.672960424449136E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9992276236825904	WITHOUT_CLASSIFICATION	7.723763174095018E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9992098186400671	WITHOUT_CLASSIFICATION	7.901813599328819E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9995832724319859	WITHOUT_CLASSIFICATION	4.1672756801407635E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997973320170537	WITHOUT_CLASSIFICATION	2.0266798294629233E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999932480625069	WITHOUT_CLASSIFICATION	6.751937493084604E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999987530728464	WITHOUT_CLASSIFICATION	1.246927153589906E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999444782851088	WITHOUT_CLASSIFICATION	5.552171489117497E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999642710104744	WITHOUT_CLASSIFICATION	3.572898952556177E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9995829618401711	WITHOUT_CLASSIFICATION	4.1703815982875266E-4	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999240789099301	WITHOUT_CLASSIFICATION	7.592109006988213E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999785697818288	WITHOUT_CLASSIFICATION	2.1430218171222397E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9987039535849075	WITHOUT_CLASSIFICATION	0.001296046415092598	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999932480625069	WITHOUT_CLASSIFICATION	6.751937493084604E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999647617902021	WITHOUT_CLASSIFICATION	3.523820979801674E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999647617902021	WITHOUT_CLASSIFICATION	3.523820979801674E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999976284242253	WITHOUT_CLASSIFICATION	2.3715757747001954E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999178701792009	WITHOUT_CLASSIFICATION	8.212982079920855E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999178701792009	WITHOUT_CLASSIFICATION	8.212982079920855E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9988760123908036	WITHOUT_CLASSIFICATION	0.0011239876091964497	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999702688743	WITHOUT_CLASSIFICATION	2.9731125690865683E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999118751875253	WITHOUT_CLASSIFICATION	8.812481247469462E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998220328224614	WITHOUT_CLASSIFICATION	1.779671775385432E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998220328224614	WITHOUT_CLASSIFICATION	1.779671775385432E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999987576001125	WITHOUT_CLASSIFICATION	1.242399887536851E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999542163307056	WITHOUT_CLASSIFICATION	4.57836692944722E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999542163307056	WITHOUT_CLASSIFICATION	4.57836692944722E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999296979287617	WITHOUT_CLASSIFICATION	7.030207123830624E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999955194835256	WITHOUT_CLASSIFICATION	4.4805164744350335E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999963847193247	WITHOUT_CLASSIFICATION	3.615280675210672E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.999993638276609	WITHOUT_CLASSIFICATION	6.3617233909112625E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999933012862142	WITHOUT_CLASSIFICATION	6.698713785720563E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8099053388983337	WITHOUT_CLASSIFICATION	0.1900946611016664	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999889128502782	WITHOUT_CLASSIFICATION	1.108714972171821E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999870746948901	WITHOUT_CLASSIFICATION	1.2925305109780434E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999601306783319	WITHOUT_CLASSIFICATION	3.986932166809146E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999786439602167	WITHOUT_CLASSIFICATION	2.1356039783207548E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999560583955	WITHOUT_CLASSIFICATION	4.3941604424553894E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999542604768953	WITHOUT_CLASSIFICATION	4.5739523104652826E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999683631677505	WITHOUT_CLASSIFICATION	3.16368322495221E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997534694275987	WITHOUT_CLASSIFICATION	2.4653057240134194E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999932854125583	WITHOUT_CLASSIFICATION	6.714587441738489E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997465971722087	WITHOUT_CLASSIFICATION	2.5340282779123623E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999476798162448	WITHOUT_CLASSIFICATION	5.2320183755312934E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999448703528846	WITHOUT_CLASSIFICATION	5.5129647115411726E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998221445963745	WITHOUT_CLASSIFICATION	1.7785540362538397E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999963847193247	WITHOUT_CLASSIFICATION	3.615280675210672E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998631823921447	WITHOUT_CLASSIFICATION	1.368176078553638E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999064859852499	WITHOUT_CLASSIFICATION	9.351401475010894E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999935284422617	WITHOUT_CLASSIFICATION	6.471557738334936E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999933012862142	WITHOUT_CLASSIFICATION	6.698713785720563E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998221445963745	WITHOUT_CLASSIFICATION	1.7785540362538397E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998631823921447	WITHOUT_CLASSIFICATION	1.368176078553638E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999935284422617	WITHOUT_CLASSIFICATION	6.471557738334936E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999172867471161	WITHOUT_CLASSIFICATION	8.27132528838655E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999172867471161	WITHOUT_CLASSIFICATION	8.27132528838655E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997473953686283	WITHOUT_CLASSIFICATION	2.5260463137158443E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.999413526121582	WITHOUT_CLASSIFICATION	5.864738784179749E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9987089962928608	WITHOUT_CLASSIFICATION	0.0012910037071391207	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993088825301	WITHOUT_CLASSIFICATION	6.911174699333007E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999369412020553	WITHOUT_CLASSIFICATION	6.30587979447307E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9989594577131224	WITHOUT_CLASSIFICATION	0.0010405422868775404	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999781565668943	WITHOUT_CLASSIFICATION	2.184343310572392E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9997315320716708	WITHOUT_CLASSIFICATION	2.684679283292195E-4	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9991383129371018	WITHOUT_CLASSIFICATION	8.61687062898157E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999781565668943	WITHOUT_CLASSIFICATION	2.184343310572392E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999937847888007	WITHOUT_CLASSIFICATION	6.2152111992986036E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9987639418861184	WITHOUT_CLASSIFICATION	0.001236058113881549	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999932812768978	WITHOUT_CLASSIFICATION	6.718723102209528E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998221445963745	WITHOUT_CLASSIFICATION	1.7785540362538397E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999438793331316	WITHOUT_CLASSIFICATION	5.6120666868498754E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999723328961905	WITHOUT_CLASSIFICATION	2.7667103809574392E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9977382708757174	WITHOUT_CLASSIFICATION	0.0022617291242826012	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999334555477937	WITHOUT_CLASSIFICATION	6.654445220634552E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999578005278973	WITHOUT_CLASSIFICATION	4.219947210281791E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996381537696	WITHOUT_CLASSIFICATION	3.6184623041117654E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999863623590516	WITHOUT_CLASSIFICATION	1.3637640948383586E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.997805437889707	WITHOUT_CLASSIFICATION	0.002194562110292961	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997677822241481	WITHOUT_CLASSIFICATION	2.3221777585195004E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995838180893883	WITHOUT_CLASSIFICATION	4.161819106115802E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999446380386612	WITHOUT_CLASSIFICATION	5.536196133880401E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998208885321049	WITHOUT_CLASSIFICATION	1.791114678949765E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999542604768953	WITHOUT_CLASSIFICATION	4.5739523104652826E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999332084688922	WITHOUT_CLASSIFICATION	6.679153110771387E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999092308716905	WITHOUT_CLASSIFICATION	9.07691283094438E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9993944788040957	WITHOUT_CLASSIFICATION	6.055211959043345E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998219504170607	WITHOUT_CLASSIFICATION	1.7804958293929227E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998623708777544	WITHOUT_CLASSIFICATION	1.3762912224553507E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999705300481029	WITHOUT_CLASSIFICATION	2.9469951897071124E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999317152138	WITHOUT_CLASSIFICATION	6.828478612605899E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999667353297124	WITHOUT_CLASSIFICATION	3.326467028769435E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9934646462457254	WITHOUT_CLASSIFICATION	0.006535353754274546	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998011644865994	WITHOUT_CLASSIFICATION	1.988355134006899E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9896469728889662	WITHOUT_CLASSIFICATION	0.010353027111033825	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9896469728889662	WITHOUT_CLASSIFICATION	0.010353027111033825	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998001705186886	WITHOUT_CLASSIFICATION	1.9982948131142374E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999668059044798	WITHOUT_CLASSIFICATION	3.319409552007677E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999605672764232	WITHOUT_CLASSIFICATION	3.943272357670923E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999489521103028	WITHOUT_CLASSIFICATION	5.104788969723341E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997114459748125	WITHOUT_CLASSIFICATION	2.8855402518750345E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9991329103818282	WITHOUT_CLASSIFICATION	8.670896181718992E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.99998860090515	WITHOUT_CLASSIFICATION	1.1399094850053674E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9980943254914394	WITHOUT_CLASSIFICATION	0.0019056745085606055	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999528263581494	WITHOUT_CLASSIFICATION	4.7173641850537025E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999768267116186	WITHOUT_CLASSIFICATION	2.3173288381395197E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999225845666398	WITHOUT_CLASSIFICATION	7.741543336015385E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9996892729717861	WITHOUT_CLASSIFICATION	3.10727028213867E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9960488733379533	WITHOUT_CLASSIFICATION	0.003951126662046692	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753049472119	WITHOUT_CLASSIFICATION	2.4695052788113327E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996107043176032	WITHOUT_CLASSIFICATION	3.892956823968208E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999923280820875	WITHOUT_CLASSIFICATION	7.671917912480003E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999218974022	WITHOUT_CLASSIFICATION	7.810259776271431E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999568281460609	WITHOUT_CLASSIFICATION	4.3171853939072656E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999787042979812	WITHOUT_CLASSIFICATION	2.129570201886763E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.99999382398292	WITHOUT_CLASSIFICATION	6.176017079987984E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.99999382398292	WITHOUT_CLASSIFICATION	6.176017079987984E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9986779448079	WITHOUT_CLASSIFICATION	0.0013220551921000801	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9986779448079	WITHOUT_CLASSIFICATION	0.0013220551921000801	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9934646462457254	WITHOUT_CLASSIFICATION	0.006535353754274546	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9991872009400903	WITHOUT_CLASSIFICATION	8.127990599097683E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9968967879020998	WITHOUT_CLASSIFICATION	0.0031032120979002558	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994668799143391	WITHOUT_CLASSIFICATION	5.331200856608692E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9968967879020998	WITHOUT_CLASSIFICATION	0.0031032120979002558	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994668799143391	WITHOUT_CLASSIFICATION	5.331200856608692E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997803779503204	WITHOUT_CLASSIFICATION	2.1962204967969587E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999934404420795	WITHOUT_CLASSIFICATION	6.55955792046202E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999338074510229	WITHOUT_CLASSIFICATION	6.619254897712292E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999992179694349	WITHOUT_CLASSIFICATION	7.820305651207615E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.993834476347744	WITHOUT_CLASSIFICATION	0.006165523652256088	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9996206149487877	WITHOUT_CLASSIFICATION	3.7938505121236994E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996900304558425	WITHOUT_CLASSIFICATION	3.0996954415756195E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9995138369027604	WITHOUT_CLASSIFICATION	4.861630972396417E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999923431753525	WITHOUT_CLASSIFICATION	7.656824647548348E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999983749119903	WITHOUT_CLASSIFICATION	1.6250880097511625E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998845205589273	WITHOUT_CLASSIFICATION	1.1547944107272482E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999993493411791	WITHOUT_CLASSIFICATION	6.506588209502004E-7	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999942852563433	WITHOUT_CLASSIFICATION	5.714743656718823E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998731381280245	WITHOUT_CLASSIFICATION	1.268618719754481E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998731381280245	WITHOUT_CLASSIFICATION	1.268618719754481E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999664245808451	WITHOUT_CLASSIFICATION	3.3575419155020564E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999664245808451	WITHOUT_CLASSIFICATION	3.3575419155020564E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999951890265438	WITHOUT_CLASSIFICATION	4.810973456136467E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997803779503204	WITHOUT_CLASSIFICATION	2.1962204967969587E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9968059816641515	WITHOUT_CLASSIFICATION	0.0031940183358484765	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999826909413959	WITHOUT_CLASSIFICATION	1.7309058604112546E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9939493138156815	WITHOUT_CLASSIFICATION	0.00605068618431842	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999556455808992	WITHOUT_CLASSIFICATION	4.4354419100758305E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988509689698863	WITHOUT_CLASSIFICATION	0.0011490310301137225	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997803779503204	WITHOUT_CLASSIFICATION	2.1962204967969587E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999556455808992	WITHOUT_CLASSIFICATION	4.4354419100758305E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988509689698863	WITHOUT_CLASSIFICATION	0.0011490310301137225	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997684733862643	WITHOUT_CLASSIFICATION	2.3152661373582328E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997551105999991	WITHOUT_CLASSIFICATION	2.4488940000089605E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998347676233457	WITHOUT_CLASSIFICATION	1.6523237665432193E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997803779503204	WITHOUT_CLASSIFICATION	2.1962204967969587E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997803779503204	WITHOUT_CLASSIFICATION	2.1962204967969587E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999626182777299	WITHOUT_CLASSIFICATION	3.738172227009221E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999579059539258	WITHOUT_CLASSIFICATION	4.209404607419993E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9998665293602419	WITHOUT_CLASSIFICATION	1.334706397580068E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999968656955125	WITHOUT_CLASSIFICATION	3.134304487592577E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998573563900461	WITHOUT_CLASSIFICATION	1.426436099539492E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999985005718159	WITHOUT_CLASSIFICATION	1.4994281840187674E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9983639077168421	WITHOUT_CLASSIFICATION	0.00163609228315784	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999815804591698	WITHOUT_CLASSIFICATION	1.8419540830106164E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999980361789293	WITHOUT_CLASSIFICATION	1.9638210707087138E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9997741557847752	WITHOUT_CLASSIFICATION	2.258442152247967E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9989308994357831	WITHOUT_CLASSIFICATION	0.001069100564217022	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9952228460948748	WITHOUT_CLASSIFICATION	0.004777153905125261	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999962058735412	WITHOUT_CLASSIFICATION	3.7941264587504922E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993843541187617	WITHOUT_CLASSIFICATION	6.156458812383084E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898325026468	WITHOUT_CLASSIFICATION	1.01674973531978E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999966737106722	WITHOUT_CLASSIFICATION	3.326289327816157E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999030048821917	WITHOUT_CLASSIFICATION	9.699511780824415E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998600557661211	WITHOUT_CLASSIFICATION	1.3994423387877263E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.999595175942134	WITHOUT_CLASSIFICATION	4.048240578659805E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9994668799143391	WITHOUT_CLASSIFICATION	5.331200856608692E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.998354760563006	WITHOUT_CLASSIFICATION	0.0016452394369939856	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999030048821917	WITHOUT_CLASSIFICATION	9.699511780824415E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998360105100264	WITHOUT_CLASSIFICATION	1.639894899736605E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999833467947122	WITHOUT_CLASSIFICATION	1.665320528781893E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9887502240235877	WITHOUT_CLASSIFICATION	0.011249775976412364	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998751561192278	WITHOUT_CLASSIFICATION	1.2484388077217318E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9987360519973423	WITHOUT_CLASSIFICATION	0.0012639480026576614	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999705994426208	WITHOUT_CLASSIFICATION	2.9400557379328256E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998985203560997	WITHOUT_CLASSIFICATION	1.0147964390018074E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999886494439114	WITHOUT_CLASSIFICATION	1.1350556088585553E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999745243274849	WITHOUT_CLASSIFICATION	2.547567251505994E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999829949380676	WITHOUT_CLASSIFICATION	1.7005061932437146E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999918639812616	WITHOUT_CLASSIFICATION	8.136018738338575E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999537385010635	WITHOUT_CLASSIFICATION	4.626149893645477E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999373132533415	WITHOUT_CLASSIFICATION	6.26867466586113E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814117365199	WITHOUT_CLASSIFICATION	1.8588263480199063E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997729888341644	WITHOUT_CLASSIFICATION	2.2701116583552722E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9971176964095143	WITHOUT_CLASSIFICATION	0.002882303590485585	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9990047118033304	WITHOUT_CLASSIFICATION	9.952881966695918E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999228473639867	WITHOUT_CLASSIFICATION	7.715263601322158E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999959202677939	WITHOUT_CLASSIFICATION	4.079732206030835E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9986700714301792	WITHOUT_CLASSIFICATION	0.00132992856982083	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999627007309422	WITHOUT_CLASSIFICATION	3.729926905795379E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990358903030575	WITHOUT_CLASSIFICATION	9.641096969425251E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994641459877845	WITHOUT_CLASSIFICATION	5.358540122154762E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989931671834935	WITHOUT_CLASSIFICATION	0.0010068328165065141	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511932454468	WITHOUT_CLASSIFICATION	4.8806754553174574E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987443423167321	WITHOUT_CLASSIFICATION	0.0012556576832679224	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998716995401056	WITHOUT_CLASSIFICATION	1.2830045989444634E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999369067693911	WITHOUT_CLASSIFICATION	6.309323060893703E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991733455766704	WITHOUT_CLASSIFICATION	8.266544233296318E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992431469861381	WITHOUT_CLASSIFICATION	7.56853013861961E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987648529345716	WITHOUT_CLASSIFICATION	0.0012351470654282809	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958686571259913	WITHOUT_CLASSIFICATION	0.004131342874008728	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986995336265017	WITHOUT_CLASSIFICATION	0.001300466373498277	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985801685463583	WITHOUT_CLASSIFICATION	0.0014198314536416137	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999840898724837	WITHOUT_CLASSIFICATION	1.5910127516374093E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999320123311628	WITHOUT_CLASSIFICATION	6.798766883721025E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.51920537860605	IMPLEMENTATION	0.48079462139394996	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999894076368767	WITHOUT_CLASSIFICATION	1.0592363123256232E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999970403307754	WITHOUT_CLASSIFICATION	2.9596692245432674E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999501354516809	WITHOUT_CLASSIFICATION	4.986454831910154E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9986845854328592	WITHOUT_CLASSIFICATION	0.0013154145671408247	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998429791584724	WITHOUT_CLASSIFICATION	1.5702084152759572E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9997855317327817	WITHOUT_CLASSIFICATION	2.1446826721825053E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997485078976487	WITHOUT_CLASSIFICATION	2.5149210235129825E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997564737264142	WITHOUT_CLASSIFICATION	2.4352627358594853E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999486353616799	WITHOUT_CLASSIFICATION	5.1364638320225634E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999656133355194	WITHOUT_CLASSIFICATION	3.4386664480640696E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997478348117936	WITHOUT_CLASSIFICATION	2.5216518820639176E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999510283180769	WITHOUT_CLASSIFICATION	4.897168192319863E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9988008168901203	WITHOUT_CLASSIFICATION	0.0011991831098796103	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999423351233526	WITHOUT_CLASSIFICATION	5.766487664739765E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998194932497955	WITHOUT_CLASSIFICATION	1.8050675020453593E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931394100867	WITHOUT_CLASSIFICATION	6.8605899133099E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555455125243	WITHOUT_CLASSIFICATION	4.4454487475703505E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999460737650413	WITHOUT_CLASSIFICATION	5.392623495880223E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999326929944384	WITHOUT_CLASSIFICATION	6.730700556151602E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9996766056442945	WITHOUT_CLASSIFICATION	3.2339435570549475E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999949807146385	WITHOUT_CLASSIFICATION	5.019285361504302E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999962946182164	WITHOUT_CLASSIFICATION	3.7053817836002594E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998672954942174	WITHOUT_CLASSIFICATION	1.3270450578264527E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997912622220572	WITHOUT_CLASSIFICATION	2.0873777794280294E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999444198667562	WITHOUT_CLASSIFICATION	5.558013324374638E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999732007744132	WITHOUT_CLASSIFICATION	2.6799225586784857E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999790735796745	WITHOUT_CLASSIFICATION	2.0926420325383863E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999949095679189	WITHOUT_CLASSIFICATION	5.090432081098182E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998352580251517	WITHOUT_CLASSIFICATION	1.6474197484822963E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9985281575926419	WITHOUT_CLASSIFICATION	0.0014718424073581558	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999984313142466	WITHOUT_CLASSIFICATION	1.5686857534390375E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998303582994655	WITHOUT_CLASSIFICATION	1.69641700534429E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999501354516809	WITHOUT_CLASSIFICATION	4.986454831910154E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9987419921172707	WITHOUT_CLASSIFICATION	0.0012580078827292484	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999943597286235	WITHOUT_CLASSIFICATION	5.640271376604029E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998501071891827	WITHOUT_CLASSIFICATION	1.4989281081739122E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999894076368767	WITHOUT_CLASSIFICATION	1.0592363123256232E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999310420465228	WITHOUT_CLASSIFICATION	6.895795347712604E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999648202525518	WITHOUT_CLASSIFICATION	3.5179747448076356E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999532393919986	WITHOUT_CLASSIFICATION	4.6760608001302055E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999984525061708	WITHOUT_CLASSIFICATION	1.547493829163561E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999805553135157	WITHOUT_CLASSIFICATION	1.9444686484304747E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999787615870083	WITHOUT_CLASSIFICATION	2.123841299177806E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999844535719966	WITHOUT_CLASSIFICATION	1.5546428003388395E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999397481603476	WITHOUT_CLASSIFICATION	6.025183965249336E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999351146882823	WITHOUT_CLASSIFICATION	6.488531171774096E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9093004059306966	WITHOUT_CLASSIFICATION	0.0906995940693034	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999996890899878	WITHOUT_CLASSIFICATION	3.1091001220475207E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999900742594915	WITHOUT_CLASSIFICATION	9.925740508473614E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9997855317327817	WITHOUT_CLASSIFICATION	2.1446826721825053E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999893531010798	WITHOUT_CLASSIFICATION	1.064689892009056E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999752851632313	WITHOUT_CLASSIFICATION	2.4714836768672704E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999264330412341	WITHOUT_CLASSIFICATION	7.356695876593601E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999875023125814	WITHOUT_CLASSIFICATION	1.2497687418599764E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999116741631974	WITHOUT_CLASSIFICATION	8.832583680273512E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999908375189008	WITHOUT_CLASSIFICATION	9.162481099202293E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999967902668368	WITHOUT_CLASSIFICATION	3.209733163211588E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998939830916418	WITHOUT_CLASSIFICATION	1.0601690835818569E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999902949392947	WITHOUT_CLASSIFICATION	9.705060705262651E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993555306151662	WITHOUT_CLASSIFICATION	6.44469384833704E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9988600214545192	WITHOUT_CLASSIFICATION	0.0011399785454807238	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999749492540567	WITHOUT_CLASSIFICATION	2.5050745943308594E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999894076368767	WITHOUT_CLASSIFICATION	1.0592363123256232E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999501354516809	WITHOUT_CLASSIFICATION	4.986454831910154E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998364585861351	WITHOUT_CLASSIFICATION	1.635414138649082E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9992251625195187	WITHOUT_CLASSIFICATION	7.748374804814029E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9930908340583561	WITHOUT_CLASSIFICATION	0.006909165941643967	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999501354516809	WITHOUT_CLASSIFICATION	4.986454831910154E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999870939315654	WITHOUT_CLASSIFICATION	1.2906068434560229E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999875023125814	WITHOUT_CLASSIFICATION	1.2497687418599764E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997162552973211	WITHOUT_CLASSIFICATION	2.837447026788926E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999366110116883	WITHOUT_CLASSIFICATION	6.33889883117531E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999927605259168	WITHOUT_CLASSIFICATION	7.239474083283553E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999787615870083	WITHOUT_CLASSIFICATION	2.123841299177806E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999844535719966	WITHOUT_CLASSIFICATION	1.5546428003388395E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999397481603476	WITHOUT_CLASSIFICATION	6.025183965249336E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999852499056224	WITHOUT_CLASSIFICATION	1.4750094377515217E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9998618120040778	WITHOUT_CLASSIFICATION	1.3818799592221057E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999153594663767	WITHOUT_CLASSIFICATION	8.464053362344734E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999969674251852	WITHOUT_CLASSIFICATION	3.032574814763936E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999968435256178	WITHOUT_CLASSIFICATION	3.156474382211866E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999501354516809	WITHOUT_CLASSIFICATION	4.986454831910154E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999351146882823	WITHOUT_CLASSIFICATION	6.488531171774096E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9093004059306966	WITHOUT_CLASSIFICATION	0.0906995940693034	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720515481842	WITHOUT_CLASSIFICATION	2.794845181576661E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893130674662	WITHOUT_CLASSIFICATION	1.1068693253382711E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999435100592554	WITHOUT_CLASSIFICATION	5.648994074471362E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999993457369544	WITHOUT_CLASSIFICATION	6.5426304559515906E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9988729888999004	WITHOUT_CLASSIFICATION	0.0011270111000995806	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999975411352746	WITHOUT_CLASSIFICATION	2.4588647253177823E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999343044263582	WITHOUT_CLASSIFICATION	6.569557364169499E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999631103839199	WITHOUT_CLASSIFICATION	3.688961608000616E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999552256675687	WITHOUT_CLASSIFICATION	4.477433243132392E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999446380386612	WITHOUT_CLASSIFICATION	5.536196133880401E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987443423167321	WITHOUT_CLASSIFICATION	0.0012556576832679224	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992431469861381	WITHOUT_CLASSIFICATION	7.56853013861961E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999446380386612	WITHOUT_CLASSIFICATION	5.536196133880401E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999953584883168	WITHOUT_CLASSIFICATION	4.641511683211318E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999706560936438	WITHOUT_CLASSIFICATION	2.934390635626879E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988776933687799	WITHOUT_CLASSIFICATION	0.0011223066312201935	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9835781826893908	WITHOUT_CLASSIFICATION	0.016421817310609276	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9987069831822515	WITHOUT_CLASSIFICATION	0.0012930168177484938	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987648529345716	WITHOUT_CLASSIFICATION	0.0012351470654282809	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986967438800556	WITHOUT_CLASSIFICATION	0.0013032561199443906	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999949095679189	WITHOUT_CLASSIFICATION	5.090432081098182E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999196179022138	WITHOUT_CLASSIFICATION	8.038209778613629E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999850832171071	WITHOUT_CLASSIFICATION	1.4916782892956712E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999805387664655	WITHOUT_CLASSIFICATION	1.9461233534504332E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999785681258548	WITHOUT_CLASSIFICATION	2.143187414517105E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997141939864	WITHOUT_CLASSIFICATION	2.8580601368094893E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9995682956577177	WITHOUT_CLASSIFICATION	4.3170434228235815E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999724715546299	WITHOUT_CLASSIFICATION	2.7528445370170114E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999886494439114	WITHOUT_CLASSIFICATION	1.1350556088585553E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995330788434486	WITHOUT_CLASSIFICATION	4.6692115655153803E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9989984936312292	WITHOUT_CLASSIFICATION	0.0010015063687708896	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999599111625785	WITHOUT_CLASSIFICATION	4.0088837421406904E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999824872166991	WITHOUT_CLASSIFICATION	1.751278330085482E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999791711048716	WITHOUT_CLASSIFICATION	2.0828895128418627E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9990839195901695	WITHOUT_CLASSIFICATION	9.16080409830483E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923390109245	WITHOUT_CLASSIFICATION	7.660989075492033E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878764975974	WITHOUT_CLASSIFICATION	1.2123502402589263E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999800354288295	WITHOUT_CLASSIFICATION	1.99645711705053E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9994654808912274	WITHOUT_CLASSIFICATION	5.345191087725749E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999844557821314	WITHOUT_CLASSIFICATION	1.5544217868715692E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999811775179056	WITHOUT_CLASSIFICATION	1.882248209445613E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999063711568379	WITHOUT_CLASSIFICATION	9.362884316205011E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999795384351032	WITHOUT_CLASSIFICATION	2.0461564896737903E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997345267517382	WITHOUT_CLASSIFICATION	2.65473248261762E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999087796109735	WITHOUT_CLASSIFICATION	9.122038902651883E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999063711568379	WITHOUT_CLASSIFICATION	9.362884316205011E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999936628409637	WITHOUT_CLASSIFICATION	6.337159036284305E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999900870027006	WITHOUT_CLASSIFICATION	9.912997299351804E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999777071894	WITHOUT_CLASSIFICATION	1.0002229281059984E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999796936840888	WITHOUT_CLASSIFICATION	2.0306315911257615E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999705542332088	WITHOUT_CLASSIFICATION	2.9445766791124946E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999531537022355	WITHOUT_CLASSIFICATION	4.684629776462475E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998506160838129	WITHOUT_CLASSIFICATION	1.4938391618716515E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999023409138781	WITHOUT_CLASSIFICATION	9.765908612196563E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999023409138781	WITHOUT_CLASSIFICATION	9.765908612196563E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999910243602617	WITHOUT_CLASSIFICATION	8.975639738235754E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999606028604515	WITHOUT_CLASSIFICATION	3.9397139548550025E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999168023869176	WITHOUT_CLASSIFICATION	8.319761308232165E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999737388854834	WITHOUT_CLASSIFICATION	2.626111451664469E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999067156716	WITHOUT_CLASSIFICATION	9.328432837416268E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998164438607046	WITHOUT_CLASSIFICATION	1.8355613929549452E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999985874743395	WITHOUT_CLASSIFICATION	1.4125256606229294E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999885594850223	WITHOUT_CLASSIFICATION	1.144051497767716E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999724251503134	WITHOUT_CLASSIFICATION	2.757484968663624E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999798309912888	WITHOUT_CLASSIFICATION	2.0169008711135813E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998710933671348	WITHOUT_CLASSIFICATION	1.2890663286522298E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999984850724319	WITHOUT_CLASSIFICATION	1.5149275681068733E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998661377436815	WITHOUT_CLASSIFICATION	1.3386225631848234E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8525600870769725	WITHOUT_CLASSIFICATION	0.1474399129230275	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9990124676640585	WITHOUT_CLASSIFICATION	9.875323359414944E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999695103669103	WITHOUT_CLASSIFICATION	3.0489633089668054E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999496381176072	WITHOUT_CLASSIFICATION	5.0361882392834935E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9986843217011561	WITHOUT_CLASSIFICATION	0.001315678298844019	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9993915274674082	WITHOUT_CLASSIFICATION	6.084725325917501E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999666611049577	WITHOUT_CLASSIFICATION	3.333889504222004E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999896663495396	WITHOUT_CLASSIFICATION	1.0333650460452982E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999664405102091	WITHOUT_CLASSIFICATION	3.3559489790931285E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999714106099659	WITHOUT_CLASSIFICATION	2.858939003410116E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999964501015809	WITHOUT_CLASSIFICATION	3.5498984192371124E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999751611964469	WITHOUT_CLASSIFICATION	2.4838803553069338E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997857785961232	WITHOUT_CLASSIFICATION	2.142214038767097E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999389283203769	WITHOUT_CLASSIFICATION	6.107167962311147E-4	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994630188570145	WITHOUT_CLASSIFICATION	5.369811429855523E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9904491009470757	WITHOUT_CLASSIFICATION	0.009550899052924252	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993938601324839	WITHOUT_CLASSIFICATION	6.061398675161071E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999790369409218	WITHOUT_CLASSIFICATION	2.09630590780969E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9996239850058947	WITHOUT_CLASSIFICATION	3.760149941053064E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999120301802777	WITHOUT_CLASSIFICATION	8.796981972221342E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.999931220893003	WITHOUT_CLASSIFICATION	6.877910699691916E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998522209719136	WITHOUT_CLASSIFICATION	1.4777902808629098E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.999790992319424	WITHOUT_CLASSIFICATION	2.090076805758136E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9969698921471425	WITHOUT_CLASSIFICATION	0.003030107852857464	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9975858525669927	WITHOUT_CLASSIFICATION	0.002414147433007338	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999580876383926	WITHOUT_CLASSIFICATION	4.1912361607363405E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999391040486755	WITHOUT_CLASSIFICATION	6.0895951324564344E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9996385350411726	WITHOUT_CLASSIFICATION	3.6146495882731863E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997855317327817	WITHOUT_CLASSIFICATION	2.1446826721825053E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997855317327817	WITHOUT_CLASSIFICATION	2.1446826721825053E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999627666522484	WITHOUT_CLASSIFICATION	3.7233347751668195E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999989119467221	WITHOUT_CLASSIFICATION	1.0880532779239144E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999983647370493	WITHOUT_CLASSIFICATION	1.635262950713112E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999980676286008	WITHOUT_CLASSIFICATION	1.932371399259303E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999886060930149	WITHOUT_CLASSIFICATION	1.139390698511412E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999755310635808	WITHOUT_CLASSIFICATION	2.446893641914854E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999699319165349	WITHOUT_CLASSIFICATION	3.006808346508965E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9993831738483232	WITHOUT_CLASSIFICATION	6.168261516766932E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999735638145096	WITHOUT_CLASSIFICATION	2.6436185490390502E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998067686608794	WITHOUT_CLASSIFICATION	1.9323133912066187E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998124625593454	WITHOUT_CLASSIFICATION	1.875374406546327E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999986060966748	WITHOUT_CLASSIFICATION	1.3939033252311574E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996539138937822	WITHOUT_CLASSIFICATION	3.460861062178142E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998839845909179	WITHOUT_CLASSIFICATION	1.1601540908212223E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9990308310336623	WITHOUT_CLASSIFICATION	9.691689663377831E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9991528984114663	WITHOUT_CLASSIFICATION	8.4710158853373E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998719437326045	WITHOUT_CLASSIFICATION	1.280562673955721E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998267569927011	WITHOUT_CLASSIFICATION	1.7324300729902194E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9997010962621683	WITHOUT_CLASSIFICATION	2.989037378316791E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999987584960216	WITHOUT_CLASSIFICATION	1.2415039784015471E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998267569927011	WITHOUT_CLASSIFICATION	1.7324300729902194E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999861229550617	WITHOUT_CLASSIFICATION	1.3877044938184248E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.999998405605001	WITHOUT_CLASSIFICATION	1.5943949989967384E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997458022687084	WITHOUT_CLASSIFICATION	2.5419773129161635E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997386124047628	WITHOUT_CLASSIFICATION	2.613875952372173E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.999274443049166	WITHOUT_CLASSIFICATION	7.25556950833937E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999980580513592	WITHOUT_CLASSIFICATION	1.9419486407327485E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996423161115335	WITHOUT_CLASSIFICATION	3.5768388846655176E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999530408743066	WITHOUT_CLASSIFICATION	4.695912569337486E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998500577747262	WITHOUT_CLASSIFICATION	1.499422252737883E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999338443905492	WITHOUT_CLASSIFICATION	6.615560945081393E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999995164579868	WITHOUT_CLASSIFICATION	4.835420131542669E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999896908059228	WITHOUT_CLASSIFICATION	1.0309194077206287E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9993362060458454	WITHOUT_CLASSIFICATION	6.637939541545562E-4	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999275399492654	WITHOUT_CLASSIFICATION	7.246005073460481E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9963381408203131	WITHOUT_CLASSIFICATION	0.0036618591796868175	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998637275177604	WITHOUT_CLASSIFICATION	1.3627248223945244E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9960500909193524	WITHOUT_CLASSIFICATION	0.003949909080647638	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999499390633706	WITHOUT_CLASSIFICATION	5.006093662945836E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9992338073426376	WITHOUT_CLASSIFICATION	7.661926573624444E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9997939119139667	WITHOUT_CLASSIFICATION	2.0608808603324972E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999750364332409	WITHOUT_CLASSIFICATION	2.4963566759119756E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999804603775783	WITHOUT_CLASSIFICATION	1.953962242167723E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9978461090564157	WITHOUT_CLASSIFICATION	0.00215389094358424	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.6172890180788156	WITHOUT_CLASSIFICATION	0.3827109819211844	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9998412162995642	WITHOUT_CLASSIFICATION	1.5878370043579984E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9992851535249412	WITHOUT_CLASSIFICATION	7.148464750588598E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9984172080227932	WITHOUT_CLASSIFICATION	0.0015827919772068288	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999206372026805	WITHOUT_CLASSIFICATION	7.936279731944799E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9990839195901695	WITHOUT_CLASSIFICATION	9.16080409830483E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9995847679997366	WITHOUT_CLASSIFICATION	4.1523200026340385E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999998701792855	WITHOUT_CLASSIFICATION	1.298207145026364E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9573786270286856	WITHOUT_CLASSIFICATION	0.0426213729713144	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998987314892731	WITHOUT_CLASSIFICATION	1.0126851072694653E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999948292170715	WITHOUT_CLASSIFICATION	5.170782928494304E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9983759694729956	WITHOUT_CLASSIFICATION	0.0016240305270044547	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9913359089748709	WITHOUT_CLASSIFICATION	0.00866409102512908	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999935716092315	WITHOUT_CLASSIFICATION	6.428390768520505E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999701075341362	WITHOUT_CLASSIFICATION	2.9892465863784074E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999970280863143	WITHOUT_CLASSIFICATION	2.971913685702739E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999910971325652	WITHOUT_CLASSIFICATION	8.902867434710946E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998920867309342	WITHOUT_CLASSIFICATION	1.0791326906576745E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9994904864100339	WITHOUT_CLASSIFICATION	5.09513589966092E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9986550665871882	WITHOUT_CLASSIFICATION	0.0013449334128118149	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999666499743384	WITHOUT_CLASSIFICATION	3.335002566170912E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997037903901947	WITHOUT_CLASSIFICATION	2.962096098052473E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.99999042517212	WITHOUT_CLASSIFICATION	9.57482788002905E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997758393941163	WITHOUT_CLASSIFICATION	2.2416060588376487E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999951153006682	WITHOUT_CLASSIFICATION	4.884699331838315E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999519660132797	WITHOUT_CLASSIFICATION	4.8033986720293585E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997827054763687	WITHOUT_CLASSIFICATION	2.1729452363121433E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999263951387316	WITHOUT_CLASSIFICATION	7.360486126832315E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998540525517469	WITHOUT_CLASSIFICATION	1.4594744825309225E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997389336495033	WITHOUT_CLASSIFICATION	2.610663504966485E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9995950365572663	WITHOUT_CLASSIFICATION	4.049634427336539E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998619619009113	WITHOUT_CLASSIFICATION	1.3803809908869411E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999995893298547	WITHOUT_CLASSIFICATION	4.106701453030501E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9967607089223837	WITHOUT_CLASSIFICATION	0.003239291077616291	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9990434252829492	WITHOUT_CLASSIFICATION	9.56574717050891E-4	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999534603005338	WITHOUT_CLASSIFICATION	4.653969946624571E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998742699266118	WITHOUT_CLASSIFICATION	1.2573007338821172E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999286783252341	WITHOUT_CLASSIFICATION	7.132167476589645E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999968624329413	WITHOUT_CLASSIFICATION	3.1375670586540814E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999626127241168	WITHOUT_CLASSIFICATION	3.738727588325504E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999965747155917	WITHOUT_CLASSIFICATION	3.4252844083823446E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9885548836121356	WITHOUT_CLASSIFICATION	0.011445116387864378	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997032523978505	WITHOUT_CLASSIFICATION	2.9674760214941966E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999400065988402	WITHOUT_CLASSIFICATION	5.999340115989472E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9997032523978505	WITHOUT_CLASSIFICATION	2.9674760214941966E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998520370867894	WITHOUT_CLASSIFICATION	1.4796291321064956E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999846068396812	WITHOUT_CLASSIFICATION	1.539316031879971E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999817167566765	WITHOUT_CLASSIFICATION	1.8283243323581208E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999926787990759	WITHOUT_CLASSIFICATION	7.321200924110278E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999915949358579	WITHOUT_CLASSIFICATION	8.405064142023534E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999738803506286	WITHOUT_CLASSIFICATION	2.611964937131016E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999572712035754	WITHOUT_CLASSIFICATION	4.272879642462612E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999774463575962	WITHOUT_CLASSIFICATION	2.2553642403763555E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999105859952188	WITHOUT_CLASSIFICATION	8.941400478124325E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9616103730665307	WITHOUT_CLASSIFICATION	0.038389626933469284	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997100339442438	WITHOUT_CLASSIFICATION	2.899660557561182E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999284539286838	WITHOUT_CLASSIFICATION	7.154607131618459E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998952665358352	WITHOUT_CLASSIFICATION	1.0473346416495379E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999793213711256	WITHOUT_CLASSIFICATION	2.0678628874449827E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9699221773327048	WITHOUT_CLASSIFICATION	0.030077822667295206	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997205420414288	WITHOUT_CLASSIFICATION	2.7945795857117355E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999144908058903	WITHOUT_CLASSIFICATION	8.550919410965986E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999144908058903	WITHOUT_CLASSIFICATION	8.550919410965986E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997818468856642	WITHOUT_CLASSIFICATION	2.1815311433572335E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998575452265493	WITHOUT_CLASSIFICATION	1.42454773450732E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999995045975866	WITHOUT_CLASSIFICATION	4.954024133524691E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999833966475261	WITHOUT_CLASSIFICATION	1.6603352473827977E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999960611098363	WITHOUT_CLASSIFICATION	3.938890163666848E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999985556390824	WITHOUT_CLASSIFICATION	1.4443609176516408E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9961710378768852	WITHOUT_CLASSIFICATION	0.0038289621231148703	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999486929658414	WITHOUT_CLASSIFICATION	5.130703415864845E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9998827483321643	WITHOUT_CLASSIFICATION	1.1725166783572442E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999876625153886	WITHOUT_CLASSIFICATION	1.2337484611332238E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997488821329	WITHOUT_CLASSIFICATION	2.511178669892633E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9997840707945763	WITHOUT_CLASSIFICATION	2.159292054236544E-4	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999344500408288	WITHOUT_CLASSIFICATION	6.554995917116742E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999965560786255	WITHOUT_CLASSIFICATION	3.4439213746033445E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998574578083269	WITHOUT_CLASSIFICATION	1.4254219167315717E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9998499224112404	WITHOUT_CLASSIFICATION	1.5007758875969294E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999895018340995	WITHOUT_CLASSIFICATION	1.0498165900475623E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9965480693381509	WITHOUT_CLASSIFICATION	0.0034519306618492293	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9994730020006719	WITHOUT_CLASSIFICATION	5.269979993280289E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999960154625529	WITHOUT_CLASSIFICATION	3.984537447079152E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999931527475756	WITHOUT_CLASSIFICATION	6.847252424404488E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9994416732233524	WITHOUT_CLASSIFICATION	5.583267766476E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9993672370048369	WITHOUT_CLASSIFICATION	6.327629951630871E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9945710957275684	WITHOUT_CLASSIFICATION	0.005428904272431488	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.999908091490173	WITHOUT_CLASSIFICATION	9.190850982688136E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999990509640063	WITHOUT_CLASSIFICATION	9.49035993684756E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999929528642227	WITHOUT_CLASSIFICATION	7.047135777302492E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999848916489721	WITHOUT_CLASSIFICATION	1.510835102790511E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9989184356833484	WITHOUT_CLASSIFICATION	0.0010815643166516085	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999888892877806	WITHOUT_CLASSIFICATION	1.1110712219375424E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999574784866945	WITHOUT_CLASSIFICATION	4.2521513305624603E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999952131440957	WITHOUT_CLASSIFICATION	4.7868559043241375E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.99926688430679	WITHOUT_CLASSIFICATION	7.331156932099302E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9907150530291733	WITHOUT_CLASSIFICATION	0.009284946970826803	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993721183149135	WITHOUT_CLASSIFICATION	6.278816850866152E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999929140246517	WITHOUT_CLASSIFICATION	7.0859753482186E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999504982903014	WITHOUT_CLASSIFICATION	4.950170969871707E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999995988382863	WITHOUT_CLASSIFICATION	4.011617136938061E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999989197778292	WITHOUT_CLASSIFICATION	1.0802221708523534E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999349334034098	WITHOUT_CLASSIFICATION	6.506659659021297E-4	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999839406304202	WITHOUT_CLASSIFICATION	1.6059369579751568E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999372105235398	WITHOUT_CLASSIFICATION	6.278947646018637E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9986856493472479	WITHOUT_CLASSIFICATION	0.0013143506527521517	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.5742285700766541	WITHOUT_CLASSIFICATION	0.4257714299233458	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.997297151605084	WITHOUT_CLASSIFICATION	0.0027028483949159674	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.99992539344559	WITHOUT_CLASSIFICATION	7.460655441006133E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999596321716474	WITHOUT_CLASSIFICATION	4.0367828352539314E-5	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999995609706421	WITHOUT_CLASSIFICATION	4.3902935792504175E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999138267743921	WITHOUT_CLASSIFICATION	8.61732256079381E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999727287441067	WITHOUT_CLASSIFICATION	2.727125589323956E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999372105235398	WITHOUT_CLASSIFICATION	6.278947646018637E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999922984448063	WITHOUT_CLASSIFICATION	7.701555193755905E-6	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998243119474886	WITHOUT_CLASSIFICATION	1.7568805251142657E-4	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998827746266103	WITHOUT_CLASSIFICATION	1.1722537338961327E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9992633606637307	WITHOUT_CLASSIFICATION	7.3663933626934E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999870939315654	WITHOUT_CLASSIFICATION	1.2906068434560229E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999870939315654	WITHOUT_CLASSIFICATION	1.2906068434560229E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999987975541023	WITHOUT_CLASSIFICATION	1.20244589776991E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999937795386208	WITHOUT_CLASSIFICATION	6.220461379230244E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999977196276403	WITHOUT_CLASSIFICATION	2.280372359655038E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999940609782534	WITHOUT_CLASSIFICATION	5.939021746596057E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997217344695702	WITHOUT_CLASSIFICATION	2.7826553042985106E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999555398623711	WITHOUT_CLASSIFICATION	4.446013762884176E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999197760242251	WITHOUT_CLASSIFICATION	8.022397577485804E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998929213618257	WITHOUT_CLASSIFICATION	1.0707863817428884E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998447003727543	WITHOUT_CLASSIFICATION	1.5529962724575313E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999056590811848	WITHOUT_CLASSIFICATION	9.434091881524292E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999877284181722	WITHOUT_CLASSIFICATION	1.2271581827788963E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998051359875085	WITHOUT_CLASSIFICATION	1.9486401249145036E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999460765247348	WITHOUT_CLASSIFICATION	5.392347526521434E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999719599341331	WITHOUT_CLASSIFICATION	2.804006586688453E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996212099565804	WITHOUT_CLASSIFICATION	3.787900434196313E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9975067012436274	WITHOUT_CLASSIFICATION	0.0024932987563726925	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999947172179243	WITHOUT_CLASSIFICATION	5.282782075701266E-6	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998198374721984	WITHOUT_CLASSIFICATION	1.8016252780165716E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9997067112600705	WITHOUT_CLASSIFICATION	2.9328873992958023E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996787755604892	WITHOUT_CLASSIFICATION	3.212244395107909E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998294523892336	WITHOUT_CLASSIFICATION	1.7054761076630394E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999437812490183	WITHOUT_CLASSIFICATION	5.6218750981689544E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9481049178307867	WITHOUT_CLASSIFICATION	0.051895082169213444	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9924768746959968	WITHOUT_CLASSIFICATION	0.007523125304003298	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998362390960159	WITHOUT_CLASSIFICATION	1.6376090398412664E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999305393128621	WITHOUT_CLASSIFICATION	6.946068713785421E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999994896229448	WITHOUT_CLASSIFICATION	5.10377055113956E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999971073469436	WITHOUT_CLASSIFICATION	2.892653056376275E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999990961485867	WITHOUT_CLASSIFICATION	9.038514132875744E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9996758632705424	WITHOUT_CLASSIFICATION	3.2413672945758916E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999970990747945	WITHOUT_CLASSIFICATION	2.900925205583026E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993685314936512	WITHOUT_CLASSIFICATION	6.314685063487082E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999977199793081	WITHOUT_CLASSIFICATION	2.280020691900419E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999970603975245	WITHOUT_CLASSIFICATION	2.9396024755643806E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999323095222566	WITHOUT_CLASSIFICATION	6.76904777433815E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.998580722480553	WITHOUT_CLASSIFICATION	0.0014192775194470637	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997488821329	WITHOUT_CLASSIFICATION	2.511178669892633E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999341153163915	WITHOUT_CLASSIFICATION	6.588468360837704E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995682956577177	WITHOUT_CLASSIFICATION	4.3170434228235815E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999986808539499	WITHOUT_CLASSIFICATION	1.3191460501042843E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999879655768908	WITHOUT_CLASSIFICATION	1.2034423109220147E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999975900820324	WITHOUT_CLASSIFICATION	2.409917967581288E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999954145379909	WITHOUT_CLASSIFICATION	4.585462009138376E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999295161892908	WITHOUT_CLASSIFICATION	7.04838107091599E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999939688467757	WITHOUT_CLASSIFICATION	6.0311532242806065E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999961984290396	WITHOUT_CLASSIFICATION	3.8015709603822637E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999905111973393	WITHOUT_CLASSIFICATION	9.48880266067966E-6	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9996137983832393	WITHOUT_CLASSIFICATION	3.8620161676076564E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998058343445637	WITHOUT_CLASSIFICATION	1.9416565543622393E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998347718035593	WITHOUT_CLASSIFICATION	1.652281964407342E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999658608755209	WITHOUT_CLASSIFICATION	3.413912447920297E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999935496647431	WITHOUT_CLASSIFICATION	6.450335256905868E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999112561094609	WITHOUT_CLASSIFICATION	8.874389053913335E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999259162164081	WITHOUT_CLASSIFICATION	7.408378359186624E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996441429161237	WITHOUT_CLASSIFICATION	3.558570838762462E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999394682259102	WITHOUT_CLASSIFICATION	6.053177408969746E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997458496334314	WITHOUT_CLASSIFICATION	2.541503665686388E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999961815443336	WITHOUT_CLASSIFICATION	3.818455666400066E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995421665152892	WITHOUT_CLASSIFICATION	4.5783348471086356E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997176364283449	WITHOUT_CLASSIFICATION	2.823635716551585E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999865755411078	WITHOUT_CLASSIFICATION	1.3424458892139142E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981313458881573	WITHOUT_CLASSIFICATION	0.0018686541118427137	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992258660542859	WITHOUT_CLASSIFICATION	7.741339457141576E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998569748981881	WITHOUT_CLASSIFICATION	1.4302510181193426E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9996859728038607	WITHOUT_CLASSIFICATION	3.1402719613923445E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999944873819244	WITHOUT_CLASSIFICATION	5.512618075530177E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999971419806962	WITHOUT_CLASSIFICATION	2.8580193037981617E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998239720654315	WITHOUT_CLASSIFICATION	1.7602793456846338E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999758408463911	WITHOUT_CLASSIFICATION	2.4159153608890138E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999704176646679	WITHOUT_CLASSIFICATION	2.9582335332138094E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9980043523153804	WITHOUT_CLASSIFICATION	0.0019956476846195257	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998856122978051	WITHOUT_CLASSIFICATION	1.1438770219486202E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999987553157695	WITHOUT_CLASSIFICATION	1.244684230401213E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999800419695997	WITHOUT_CLASSIFICATION	1.99580304003175E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999442906088069	WITHOUT_CLASSIFICATION	5.5709391193144655E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999920998215094	WITHOUT_CLASSIFICATION	7.900178490602153E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999121734161616	WITHOUT_CLASSIFICATION	8.782658383847057E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999958190707382	WITHOUT_CLASSIFICATION	4.180929261805515E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999818393206029	WITHOUT_CLASSIFICATION	1.8160679397094704E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999964675255179	WITHOUT_CLASSIFICATION	3.5324744821146514E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999353370553542	WITHOUT_CLASSIFICATION	6.466294464581369E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999974448046353	WITHOUT_CLASSIFICATION	2.555195364612638E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999651933065915	WITHOUT_CLASSIFICATION	3.480669340846515E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999969834160876	WITHOUT_CLASSIFICATION	3.0165839123758464E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998685756738688	WITHOUT_CLASSIFICATION	1.3142432613118358E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999115654862504	WITHOUT_CLASSIFICATION	8.843451374954712E-5	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999931111880543	WITHOUT_CLASSIFICATION	6.8888119456235785E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999992611118857	WITHOUT_CLASSIFICATION	7.38888114310099E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999854206529794	WITHOUT_CLASSIFICATION	1.457934702066728E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999711026832105	WITHOUT_CLASSIFICATION	2.8897316789468414E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981313458881573	WITHOUT_CLASSIFICATION	0.0018686541118427137	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999829756594703	WITHOUT_CLASSIFICATION	1.7024340529685333E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9997120327630055	WITHOUT_CLASSIFICATION	2.879672369944774E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999956524269242	WITHOUT_CLASSIFICATION	4.347573075766565E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9979614543613355	WITHOUT_CLASSIFICATION	0.002038545638664535	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9998719146994565	WITHOUT_CLASSIFICATION	1.28085300543502E-4	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999305700148966	WITHOUT_CLASSIFICATION	6.942998510341102E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999807801384801	WITHOUT_CLASSIFICATION	1.9219861519901177E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993061435605	WITHOUT_CLASSIFICATION	6.938564394334422E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999981196578501	WITHOUT_CLASSIFICATION	1.8803421498896738E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999932258465755	WITHOUT_CLASSIFICATION	6.774153424501344E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999686796827459	WITHOUT_CLASSIFICATION	3.132031725409472E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996422820966672	WITHOUT_CLASSIFICATION	3.5771790333291077E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999948801623612	WITHOUT_CLASSIFICATION	5.11983763877214E-6	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999607666628425	WITHOUT_CLASSIFICATION	3.9233337157492E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998520370867894	WITHOUT_CLASSIFICATION	1.4796291321064956E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999973386059284	WITHOUT_CLASSIFICATION	2.6613940715825137E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999890608022622	WITHOUT_CLASSIFICATION	1.0939197737655156E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999926528286329	WITHOUT_CLASSIFICATION	7.347171367149976E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.999910839697986	WITHOUT_CLASSIFICATION	8.916030201401873E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999239432594593	WITHOUT_CLASSIFICATION	7.605674054063896E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997418213456811	WITHOUT_CLASSIFICATION	2.581786543189384E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997418213456811	WITHOUT_CLASSIFICATION	2.581786543189384E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998299011126421	WITHOUT_CLASSIFICATION	1.7009888735779367E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999969827613037	WITHOUT_CLASSIFICATION	3.0172386963541905E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999876971382864	WITHOUT_CLASSIFICATION	1.2302861713557421E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999710482575607	WITHOUT_CLASSIFICATION	2.89517424392409E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999484363628315	WITHOUT_CLASSIFICATION	5.156363716853854E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999558905075673	WITHOUT_CLASSIFICATION	4.410949243284735E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9987288947264499	WITHOUT_CLASSIFICATION	0.0012711052735502155	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9931892907733892	WITHOUT_CLASSIFICATION	0.006810709226610862	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9931892907733892	WITHOUT_CLASSIFICATION	0.006810709226610862	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6734361392498397	WITHOUT_CLASSIFICATION	0.32656386075016036	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999617489765283	WITHOUT_CLASSIFICATION	3.825102347161722E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999980690854459	WITHOUT_CLASSIFICATION	1.9309145541208717E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999366342445479	WITHOUT_CLASSIFICATION	6.336575545204523E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999366342445479	WITHOUT_CLASSIFICATION	6.336575545204523E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999366342445479	WITHOUT_CLASSIFICATION	6.336575545204523E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.99987551407458	WITHOUT_CLASSIFICATION	1.2448592542004097E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999529131941531	WITHOUT_CLASSIFICATION	4.70868058468937E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9921985047945933	WITHOUT_CLASSIFICATION	0.007801495205406747	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999864646950192	WITHOUT_CLASSIFICATION	1.3535304980824966E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999969274907089	WITHOUT_CLASSIFICATION	3.0725092910837658E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999691098626911	WITHOUT_CLASSIFICATION	3.089013730889772E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999951962673592	WITHOUT_CLASSIFICATION	4.803732640788707E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995009178207546	WITHOUT_CLASSIFICATION	4.990821792454979E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999893009629298	WITHOUT_CLASSIFICATION	1.0699037070200356E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9997700336125134	WITHOUT_CLASSIFICATION	2.299663874866192E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999629291256042	WITHOUT_CLASSIFICATION	3.707087439581595E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999711341797473	WITHOUT_CLASSIFICATION	2.886582025278067E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999589768908808	WITHOUT_CLASSIFICATION	4.102310911925902E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999986442395449	WITHOUT_CLASSIFICATION	1.355760455122763E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999953501354415	WITHOUT_CLASSIFICATION	4.649864558508864E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999389840802182	WITHOUT_CLASSIFICATION	6.1015919781935726E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998291159650946	WITHOUT_CLASSIFICATION	1.7088403490529737E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997418213456811	WITHOUT_CLASSIFICATION	2.581786543189384E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996492240120409	WITHOUT_CLASSIFICATION	3.507759879591563E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9769584974915079	WITHOUT_CLASSIFICATION	0.02304150250849217	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999597274658697	WITHOUT_CLASSIFICATION	4.027253413032371E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999714344985975	WITHOUT_CLASSIFICATION	2.8565501402539868E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999783846887987	WITHOUT_CLASSIFICATION	2.1615311201186235E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998962176407	WITHOUT_CLASSIFICATION	1.0378235921378331E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999308642331552	WITHOUT_CLASSIFICATION	6.913576684474674E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999941111242434	WITHOUT_CLASSIFICATION	5.888875756611047E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999956350927937	WITHOUT_CLASSIFICATION	4.364907206323339E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999989891368537	WITHOUT_CLASSIFICATION	1.010863146305085E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999999884366468	WITHOUT_CLASSIFICATION	1.1563353187489812E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999978867649937	WITHOUT_CLASSIFICATION	2.113235006262518E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999996685271998	WITHOUT_CLASSIFICATION	3.314728002077279E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999941985219515	WITHOUT_CLASSIFICATION	5.801478048551117E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9997633562637248	WITHOUT_CLASSIFICATION	2.366437362751949E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.7726908384301335	IMPLEMENTATION	0.22730916156986644	WITHOUT_CLASSIFICATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999993948013614	WITHOUT_CLASSIFICATION	6.051986386042033E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999893034856948	WITHOUT_CLASSIFICATION	1.069651430524519E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999887660705614	WITHOUT_CLASSIFICATION	1.1233929438590535E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999887660705614	WITHOUT_CLASSIFICATION	1.1233929438590535E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999659105484475	WITHOUT_CLASSIFICATION	3.408945155249923E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999936606955085	WITHOUT_CLASSIFICATION	6.339304491383766E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999964936170166	WITHOUT_CLASSIFICATION	3.5063829833905685E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999375281980784	WITHOUT_CLASSIFICATION	6.247180192170522E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999950262378429	WITHOUT_CLASSIFICATION	4.9737621571056596E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999165020894711	WITHOUT_CLASSIFICATION	8.349791052880893E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999600971803775	WITHOUT_CLASSIFICATION	3.990281962256106E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999901579715722	WITHOUT_CLASSIFICATION	9.84202842780763E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999696647569091	WITHOUT_CLASSIFICATION	3.0335243091003233E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999989263423867	WITHOUT_CLASSIFICATION	1.0736576132455304E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999954344505201	WITHOUT_CLASSIFICATION	4.565549479893085E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996898236866196	WITHOUT_CLASSIFICATION	3.10176313380424E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999942704151973	WITHOUT_CLASSIFICATION	5.7295848027266195E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999981141256938	WITHOUT_CLASSIFICATION	1.8858743060633926E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999971016807888	WITHOUT_CLASSIFICATION	2.8983192112894517E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999887396289195	WITHOUT_CLASSIFICATION	1.1260371080499545E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999919875039	WITHOUT_CLASSIFICATION	8.012496105428404E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999919875039	WITHOUT_CLASSIFICATION	8.012496105428404E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9992402132640139	WITHOUT_CLASSIFICATION	7.597867359861948E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999994877658506	WITHOUT_CLASSIFICATION	5.122341494590706E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999993867524856	WITHOUT_CLASSIFICATION	6.132475144064054E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999938277617427	WITHOUT_CLASSIFICATION	6.172238257241739E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.999988987532334	WITHOUT_CLASSIFICATION	1.1012467666075888E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999908802581998	WITHOUT_CLASSIFICATION	9.119741800176764E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9988954678522721	WITHOUT_CLASSIFICATION	0.0011045321477278858	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999686145518856	WITHOUT_CLASSIFICATION	3.138544811445265E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999329751228906	WITHOUT_CLASSIFICATION	6.702487710942376E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999827143294	WITHOUT_CLASSIFICATION	1.7285670587877184E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.99994567712501	WITHOUT_CLASSIFICATION	5.4322874989966366E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999686145518856	WITHOUT_CLASSIFICATION	3.138544811445265E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998276314729204	WITHOUT_CLASSIFICATION	1.723685270796449E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9988904640377329	WITHOUT_CLASSIFICATION	0.0011095359622671336	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999687918224661	WITHOUT_CLASSIFICATION	3.120817753378177E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.999969114068336	WITHOUT_CLASSIFICATION	3.0885931663969456E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999570092165	WITHOUT_CLASSIFICATION	4.2990783538240334E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999935576959573	WITHOUT_CLASSIFICATION	6.442304042691697E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9982979736995267	WITHOUT_CLASSIFICATION	0.0017020263004733451	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999852080212553	WITHOUT_CLASSIFICATION	1.4791978744785777E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999961551082942	WITHOUT_CLASSIFICATION	3.844891705790798E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997999458697046	WITHOUT_CLASSIFICATION	2.0005413029546476E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993704353270851	WITHOUT_CLASSIFICATION	6.295646729148017E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999926535802177	WITHOUT_CLASSIFICATION	7.3464197823623485E-6	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998304704847577	WITHOUT_CLASSIFICATION	1.6952951524232775E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9995343561782303	WITHOUT_CLASSIFICATION	4.656438217696936E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998967699199963	WITHOUT_CLASSIFICATION	1.0323008000372774E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999930669621006	WITHOUT_CLASSIFICATION	6.933037899384166E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999968733575934	WITHOUT_CLASSIFICATION	3.126642406595732E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9876248382909227	WITHOUT_CLASSIFICATION	0.012375161709077176	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9876248382909227	WITHOUT_CLASSIFICATION	0.012375161709077176	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9982979736995267	WITHOUT_CLASSIFICATION	0.0017020263004733451	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9861366722089802	WITHOUT_CLASSIFICATION	0.01386332779101986	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999670492412028	WITHOUT_CLASSIFICATION	3.295075879721137E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999330875040426	WITHOUT_CLASSIFICATION	6.69124959573881E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.99999338076896	WITHOUT_CLASSIFICATION	6.619231040042406E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999957030469184	WITHOUT_CLASSIFICATION	4.2969530815798475E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999215094349813	WITHOUT_CLASSIFICATION	7.849056501873097E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999879208727722	WITHOUT_CLASSIFICATION	1.2079127227640284E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998010858450335	WITHOUT_CLASSIFICATION	1.9891415496664625E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999954994102624	WITHOUT_CLASSIFICATION	4.500589737593912E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999747792002767	WITHOUT_CLASSIFICATION	2.522079972342879E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999408650448245	WITHOUT_CLASSIFICATION	5.913495517543347E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999407465344028	WITHOUT_CLASSIFICATION	5.925346559730116E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998027098560643	WITHOUT_CLASSIFICATION	1.9729014393560004E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999198723130204	WITHOUT_CLASSIFICATION	8.012768697964907E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999944489657327	WITHOUT_CLASSIFICATION	5.551034267313416E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999975847486425	WITHOUT_CLASSIFICATION	2.415251357439003E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998633404773	WITHOUT_CLASSIFICATION	1.366595227523056E-7	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.99999506277191	WITHOUT_CLASSIFICATION	4.937228089959226E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999477493338513	WITHOUT_CLASSIFICATION	5.225066614876073E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999323684202763	WITHOUT_CLASSIFICATION	6.763157972361542E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997161312060651	WITHOUT_CLASSIFICATION	2.838687939349717E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999983860914564	WITHOUT_CLASSIFICATION	1.6139085435280186E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9997508461100141	WITHOUT_CLASSIFICATION	2.491538899859661E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999921769358147	WITHOUT_CLASSIFICATION	7.823064185377375E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999770221095711	WITHOUT_CLASSIFICATION	2.2977890428894972E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999923957652865	WITHOUT_CLASSIFICATION	7.604234713406574E-6	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999937144012172	WITHOUT_CLASSIFICATION	6.2855987826743225E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999733385759394	WITHOUT_CLASSIFICATION	2.6661424060564517E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999990636596214	WITHOUT_CLASSIFICATION	9.363403786066417E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999498171664092	WITHOUT_CLASSIFICATION	5.0182833590811044E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999444822126913	WITHOUT_CLASSIFICATION	5.551778730863591E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999634861554912	WITHOUT_CLASSIFICATION	3.6513844508769726E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997085133794	WITHOUT_CLASSIFICATION	2.91486620677308E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999933630800637	WITHOUT_CLASSIFICATION	6.6369199363031E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999609170236474	WITHOUT_CLASSIFICATION	3.90829763525841E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997395082895996	WITHOUT_CLASSIFICATION	2.6049171040047115E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999968735037665	WITHOUT_CLASSIFICATION	3.1264962334970722E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999633880194079	WITHOUT_CLASSIFICATION	3.66119805921331E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999711621783688	WITHOUT_CLASSIFICATION	2.8837821631171738E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9926278646544523	WITHOUT_CLASSIFICATION	0.007372135345547701	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9990919396315582	WITHOUT_CLASSIFICATION	9.080603684418536E-4	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999400612603232	WITHOUT_CLASSIFICATION	5.993873967680209E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999992442261013	WITHOUT_CLASSIFICATION	7.557738986241677E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9990007586097333	WITHOUT_CLASSIFICATION	9.992413902666759E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999813953039307	WITHOUT_CLASSIFICATION	1.860469606930695E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999972019877309	WITHOUT_CLASSIFICATION	2.798012269106968E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9993454006064301	WITHOUT_CLASSIFICATION	6.545993935698652E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994898626156	WITHOUT_CLASSIFICATION	5.101373845018527E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999989527449931	WITHOUT_CLASSIFICATION	1.0472550069527282E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.998680680599682	WITHOUT_CLASSIFICATION	0.0013193194003180537	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999886082364096	WITHOUT_CLASSIFICATION	1.1391763590482406E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999329751228906	WITHOUT_CLASSIFICATION	6.702487710942376E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999044102474433	WITHOUT_CLASSIFICATION	9.558975255670648E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999944489657327	WITHOUT_CLASSIFICATION	5.551034267313416E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999026820503414	WITHOUT_CLASSIFICATION	9.731794965865987E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999935146500085	WITHOUT_CLASSIFICATION	6.485349991492678E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999843798479237	WITHOUT_CLASSIFICATION	1.5620152076363437E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999841761986741	WITHOUT_CLASSIFICATION	1.582380132591149E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999951680042124	WITHOUT_CLASSIFICATION	4.83199578760398E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999875660028398	WITHOUT_CLASSIFICATION	1.2433997160151557E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999654990065215	WITHOUT_CLASSIFICATION	3.4500993478467114E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999965165866551	WITHOUT_CLASSIFICATION	3.4834133450290405E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999149021976174	WITHOUT_CLASSIFICATION	8.509780238264138E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999896367215689	WITHOUT_CLASSIFICATION	1.0363278431056118E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9990984113693557	WITHOUT_CLASSIFICATION	9.015886306442645E-4	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999569344519793	WITHOUT_CLASSIFICATION	4.306554802061009E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998409281319156	WITHOUT_CLASSIFICATION	1.5907186808442717E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998409281319156	WITHOUT_CLASSIFICATION	1.5907186808442717E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997637024874	WITHOUT_CLASSIFICATION	2.362975125578888E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9952568275113578	WITHOUT_CLASSIFICATION	0.0047431724886422555	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999083147587319	WITHOUT_CLASSIFICATION	9.168524126809632E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999986523644612	WITHOUT_CLASSIFICATION	1.3476355388762945E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999980850547979	WITHOUT_CLASSIFICATION	1.914945202008002E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999259031955708	WITHOUT_CLASSIFICATION	7.409680442912962E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995097158942	WITHOUT_CLASSIFICATION	4.902841057411934E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999932445960269	WITHOUT_CLASSIFICATION	6.755403973152829E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999967114609101	WITHOUT_CLASSIFICATION	3.288539089903051E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998341530992892	WITHOUT_CLASSIFICATION	1.6584690071068348E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9997944693683644	WITHOUT_CLASSIFICATION	2.0553063163552952E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997944693683644	WITHOUT_CLASSIFICATION	2.0553063163552952E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999783187532	WITHOUT_CLASSIFICATION	2.1681246804838156E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999546513507334	WITHOUT_CLASSIFICATION	4.5348649266610134E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994866251711	WITHOUT_CLASSIFICATION	5.133748288555127E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998301396656026	WITHOUT_CLASSIFICATION	1.6986033439724004E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999990720741939	WITHOUT_CLASSIFICATION	9.279258059675251E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999944572482903	WITHOUT_CLASSIFICATION	5.5427517096617705E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999992560571014	WITHOUT_CLASSIFICATION	7.439428986067945E-7	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999982009185058	WITHOUT_CLASSIFICATION	1.7990814941471178E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999994962016126	WITHOUT_CLASSIFICATION	5.0379838739567975E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999920915757948	WITHOUT_CLASSIFICATION	7.908424205173993E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998935926916072	WITHOUT_CLASSIFICATION	1.0640730839283715E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324407392375	WITHOUT_CLASSIFICATION	6.75592607625589E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999829949380676	WITHOUT_CLASSIFICATION	1.7005061932437146E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999662437058249	WITHOUT_CLASSIFICATION	3.37562941752092E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997323653626228	WITHOUT_CLASSIFICATION	2.6763463737719263E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999894767419036	WITHOUT_CLASSIFICATION	1.0523258096353123E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9993555306151662	WITHOUT_CLASSIFICATION	6.44469384833704E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999595175942134	WITHOUT_CLASSIFICATION	4.048240578659805E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999860701211447	WITHOUT_CLASSIFICATION	1.3929878855303474E-4	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9912016917255674	WITHOUT_CLASSIFICATION	0.008798308274432549	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996787755604892	WITHOUT_CLASSIFICATION	3.212244395107909E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999699385161344	WITHOUT_CLASSIFICATION	3.0061483865697546E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996759931837108	WITHOUT_CLASSIFICATION	3.240068162891868E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9990511184591094	WITHOUT_CLASSIFICATION	9.488815408905002E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999425800749151	WITHOUT_CLASSIFICATION	5.741992508476428E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999072858602042	WITHOUT_CLASSIFICATION	9.271413979582012E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989122698302451	WITHOUT_CLASSIFICATION	0.0010877301697549595	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999963025016464	WITHOUT_CLASSIFICATION	3.697498353626936E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9995222898068068	WITHOUT_CLASSIFICATION	4.7771019319319214E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988776933687799	WITHOUT_CLASSIFICATION	0.0011223066312201935	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9979849011483453	WITHOUT_CLASSIFICATION	0.002015098851654838	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999649997113923	WITHOUT_CLASSIFICATION	3.5000288607680435E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999984259836765	WITHOUT_CLASSIFICATION	1.5740163235959219E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999592731804655	WITHOUT_CLASSIFICATION	4.072681953443327E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998970047723265	WITHOUT_CLASSIFICATION	0.001029952276735066	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999337286456432	WITHOUT_CLASSIFICATION	6.627135435674313E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999871266073955	WITHOUT_CLASSIFICATION	1.2873392604611904E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999787128402067	WITHOUT_CLASSIFICATION	2.1287159793281893E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999273870434231	WITHOUT_CLASSIFICATION	7.261295657693563E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999966906145097	WITHOUT_CLASSIFICATION	3.3093854904317968E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999981295142124	WITHOUT_CLASSIFICATION	1.8704857876100208E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9987278747337008	WITHOUT_CLASSIFICATION	0.0012721252662991748	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997889737217497	WITHOUT_CLASSIFICATION	2.1102627825032275E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999315176015416	WITHOUT_CLASSIFICATION	6.848239845840273E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996321726016928	WITHOUT_CLASSIFICATION	3.67827398307192E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997294007797	WITHOUT_CLASSIFICATION	2.705992202691598E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999596217407684	WITHOUT_CLASSIFICATION	4.0378259231561034E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999056830692749	WITHOUT_CLASSIFICATION	9.43169307250461E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999937397334401	WITHOUT_CLASSIFICATION	6.260266559903437E-6	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999545616490572	WITHOUT_CLASSIFICATION	4.543835094290571E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999762264489378	WITHOUT_CLASSIFICATION	2.3773551062102482E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999952857579402	WITHOUT_CLASSIFICATION	4.714242059806645E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998947914931189	WITHOUT_CLASSIFICATION	1.052085068810022E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998237919129979	WITHOUT_CLASSIFICATION	1.7620808700221467E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998947914931189	WITHOUT_CLASSIFICATION	1.052085068810022E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9997826835973067	WITHOUT_CLASSIFICATION	2.1731640269331565E-4	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999484456538845	WITHOUT_CLASSIFICATION	5.1554346115519405E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9986662750202552	WITHOUT_CLASSIFICATION	0.0013337249797448663	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.99998360045121	WITHOUT_CLASSIFICATION	1.639954879001315E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999602958841942	WITHOUT_CLASSIFICATION	3.97041158056826E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9986662750202552	WITHOUT_CLASSIFICATION	0.0013337249797448663	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999946371352052	WITHOUT_CLASSIFICATION	5.362864794765316E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997556382572572	WITHOUT_CLASSIFICATION	2.443617427427642E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999846809705113	WITHOUT_CLASSIFICATION	1.5319029488722323E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9995565627072113	WITHOUT_CLASSIFICATION	4.4343729278867967E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999965883457476	WITHOUT_CLASSIFICATION	3.4116542524029766E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999786977754207	WITHOUT_CLASSIFICATION	2.1302224579349434E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999934651258452	WITHOUT_CLASSIFICATION	6.534874154791767E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.667508723176622	WITHOUT_CLASSIFICATION	0.33249127682337803	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9996261284105209	WITHOUT_CLASSIFICATION	3.738715894791233E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999969239676726	WITHOUT_CLASSIFICATION	3.076032327374936E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999984831663814	WITHOUT_CLASSIFICATION	1.5168336185666358E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999335542084444	WITHOUT_CLASSIFICATION	6.644579155558637E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999971033984145	WITHOUT_CLASSIFICATION	2.896601585580107E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999746244738552	WITHOUT_CLASSIFICATION	2.5375526144818E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997009718778	WITHOUT_CLASSIFICATION	2.9902812215768864E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999646065848851	WITHOUT_CLASSIFICATION	3.5393415114905847E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999682884207372	WITHOUT_CLASSIFICATION	3.1711579262776345E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999611193869377	WITHOUT_CLASSIFICATION	3.8880613062245745E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998736500711222	WITHOUT_CLASSIFICATION	1.2634992887793425E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999994769551458	WITHOUT_CLASSIFICATION	5.230448542033689E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999349293509535	WITHOUT_CLASSIFICATION	6.507064904656392E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9970116971274509	WITHOUT_CLASSIFICATION	0.002988302872549216	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994244876785173	WITHOUT_CLASSIFICATION	5.755123214827884E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9956375790336138	WITHOUT_CLASSIFICATION	0.004362420966386126	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9986858890506264	WITHOUT_CLASSIFICATION	0.0013141109493736095	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999927545063726	WITHOUT_CLASSIFICATION	7.24549362740021E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999857083	WITHOUT_CLASSIFICATION	1.4291737355683608E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998639505734058	WITHOUT_CLASSIFICATION	1.3604942659419238E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9985695815337055	WITHOUT_CLASSIFICATION	0.0014304184662945077	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998148395209224	WITHOUT_CLASSIFICATION	1.8516047907748463E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9998900986088601	WITHOUT_CLASSIFICATION	1.0990139113984682E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9997110998478833	WITHOUT_CLASSIFICATION	2.88900152116599E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9930908340583561	WITHOUT_CLASSIFICATION	0.006909165941643967	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999994769551458	WITHOUT_CLASSIFICATION	5.230448542033689E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999990228426494	WITHOUT_CLASSIFICATION	9.771573506354407E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999333005304408	WITHOUT_CLASSIFICATION	6.66994695591371E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9990434822409613	WITHOUT_CLASSIFICATION	9.565177590385967E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9986367674497967	WITHOUT_CLASSIFICATION	0.0013632325502033137	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999829918178168	WITHOUT_CLASSIFICATION	1.700818218317385E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999722161528808	WITHOUT_CLASSIFICATION	2.778384711930778E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999691675415181	WITHOUT_CLASSIFICATION	3.0832458481964585E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998736468001803	WITHOUT_CLASSIFICATION	1.263531998197468E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998893897313296	WITHOUT_CLASSIFICATION	1.1061026867045226E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9993543619123783	WITHOUT_CLASSIFICATION	6.45638087621804E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999963746595273	WITHOUT_CLASSIFICATION	3.6253404726491306E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999776253126467	WITHOUT_CLASSIFICATION	2.237468735322683E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999796452398894	WITHOUT_CLASSIFICATION	2.0354760110626454E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998605653300163	WITHOUT_CLASSIFICATION	1.3943466998363982E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997733273731093	WITHOUT_CLASSIFICATION	2.2667262689057732E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999759794433973	WITHOUT_CLASSIFICATION	2.4020556602676025E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9858379261105741	WITHOUT_CLASSIFICATION	0.014162073889425917	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998903302399245	WITHOUT_CLASSIFICATION	1.0966976007551813E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982667023714267	WITHOUT_CLASSIFICATION	0.001733297628573422	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999990061779311	WITHOUT_CLASSIFICATION	9.938220688839931E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9922281908744216	WITHOUT_CLASSIFICATION	0.0077718091255784515	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9922281908744216	WITHOUT_CLASSIFICATION	0.0077718091255784515	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999705994426208	WITHOUT_CLASSIFICATION	2.9400557379328256E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9922281908744216	WITHOUT_CLASSIFICATION	0.0077718091255784515	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9922281908744216	WITHOUT_CLASSIFICATION	0.0077718091255784515	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9994764022894888	WITHOUT_CLASSIFICATION	5.235977105112249E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999394403935367	WITHOUT_CLASSIFICATION	6.0559606463319716E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999327523180577	WITHOUT_CLASSIFICATION	6.724768194221913E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999327523180577	WITHOUT_CLASSIFICATION	6.724768194221913E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998985203560997	WITHOUT_CLASSIFICATION	1.0147964390018074E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998437048648763	WITHOUT_CLASSIFICATION	1.562951351238526E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999579931503688	WITHOUT_CLASSIFICATION	4.200684963119403E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998251124924	WITHOUT_CLASSIFICATION	1.748875075200408E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9990008770730326	WITHOUT_CLASSIFICATION	9.99122926967313E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9975476194323091	WITHOUT_CLASSIFICATION	0.0024523805676909018	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9986522883238632	WITHOUT_CLASSIFICATION	0.0013477116761368329	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9984349784937003	WITHOUT_CLASSIFICATION	0.0015650215062997447	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9995952926222753	WITHOUT_CLASSIFICATION	4.0470737772470907E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999218480025468	WITHOUT_CLASSIFICATION	7.815199745315603E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9995301781751522	WITHOUT_CLASSIFICATION	4.6982182484781796E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999481029597473	WITHOUT_CLASSIFICATION	5.189704025267631E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999965747155917	WITHOUT_CLASSIFICATION	3.4252844083823446E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997248705966122	WITHOUT_CLASSIFICATION	2.7512940338784693E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9993645006716305	WITHOUT_CLASSIFICATION	6.354993283694734E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9994564637967175	WITHOUT_CLASSIFICATION	5.43536203282509E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999570723573406	WITHOUT_CLASSIFICATION	4.2927642659388487E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9996611228216195	WITHOUT_CLASSIFICATION	3.388771783806008E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999965747155917	WITHOUT_CLASSIFICATION	3.4252844083823446E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999349293509535	WITHOUT_CLASSIFICATION	6.507064904656392E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9983759687162153	WITHOUT_CLASSIFICATION	0.00162403128378465	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999795384351032	WITHOUT_CLASSIFICATION	2.0461564896737903E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999063711568379	WITHOUT_CLASSIFICATION	9.362884316205011E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.998462575197543	WITHOUT_CLASSIFICATION	0.0015374248024570014	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999478254281056	WITHOUT_CLASSIFICATION	5.217457189438637E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9993631220805783	WITHOUT_CLASSIFICATION	6.36877919421799E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998956605419512	WITHOUT_CLASSIFICATION	1.0433945804872299E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999699979233964	WITHOUT_CLASSIFICATION	3.0002076603602722E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999952969796144	WITHOUT_CLASSIFICATION	4.703020385534151E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9989351499349257	WITHOUT_CLASSIFICATION	0.0010648500650742646	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999939123934005	WITHOUT_CLASSIFICATION	6.087606599555638E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999696162324899	WITHOUT_CLASSIFICATION	3.0383767510111035E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999820341203645	WITHOUT_CLASSIFICATION	1.7965879635500496E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9976526462044212	WITHOUT_CLASSIFICATION	0.0023473537955788137	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999325094811105	WITHOUT_CLASSIFICATION	6.749051888947823E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999237942467464	WITHOUT_CLASSIFICATION	7.620575325359404E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997157775298695	WITHOUT_CLASSIFICATION	2.842224701303789E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999867415125631	WITHOUT_CLASSIFICATION	1.3258487437031907E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999830881797176	WITHOUT_CLASSIFICATION	1.6911820282385765E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999705672492069	WITHOUT_CLASSIFICATION	2.9432750793092294E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9990580503983426	WITHOUT_CLASSIFICATION	9.419496016574525E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999983387732834	WITHOUT_CLASSIFICATION	1.6612267166227128E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999699979233964	WITHOUT_CLASSIFICATION	3.0002076603602722E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9989401801678228	WITHOUT_CLASSIFICATION	0.0010598198321771905	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9995919357328145	WITHOUT_CLASSIFICATION	4.080642671855224E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9992790848744214	WITHOUT_CLASSIFICATION	7.209151255784533E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999631103839199	WITHOUT_CLASSIFICATION	3.688961608000616E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9987485078994313	WITHOUT_CLASSIFICATION	0.0012514921005687355	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9978081813617139	WITHOUT_CLASSIFICATION	0.0021918186382861027	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9978938585707336	WITHOUT_CLASSIFICATION	0.0021061414292663605	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.997805437889707	WITHOUT_CLASSIFICATION	0.002194562110292961	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9961560682684485	WITHOUT_CLASSIFICATION	0.0038439317315515377	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999496988531149	WITHOUT_CLASSIFICATION	5.030114688520911E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998448180214345	WITHOUT_CLASSIFICATION	1.551819785655262E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999958113817488	WITHOUT_CLASSIFICATION	4.1886182512999465E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99995388173996	WITHOUT_CLASSIFICATION	4.611826003985962E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998468814186495	WITHOUT_CLASSIFICATION	1.531185813505785E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999175928483914	WITHOUT_CLASSIFICATION	8.24071516086192E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999496988531149	WITHOUT_CLASSIFICATION	5.030114688520911E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999902009357221	WITHOUT_CLASSIFICATION	9.799064277773595E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999969577706834	WITHOUT_CLASSIFICATION	3.042229316468088E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999666611049577	WITHOUT_CLASSIFICATION	3.333889504222004E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999768158754038	WITHOUT_CLASSIFICATION	2.3184124596300444E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.999821918532177	WITHOUT_CLASSIFICATION	1.780814678230172E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9894956184667383	WITHOUT_CLASSIFICATION	0.010504381533261838	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999685568227168	WITHOUT_CLASSIFICATION	3.144317728324933E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816846191413	WITHOUT_CLASSIFICATION	1.8315380858706037E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999240789099301	WITHOUT_CLASSIFICATION	7.592109006988213E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994213959642544	WITHOUT_CLASSIFICATION	5.786040357456495E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994213959642544	WITHOUT_CLASSIFICATION	5.786040357456495E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994213959642544	WITHOUT_CLASSIFICATION	5.786040357456495E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999885577408409	WITHOUT_CLASSIFICATION	1.1442259159068959E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999885577408409	WITHOUT_CLASSIFICATION	1.1442259159068959E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999927159137756	WITHOUT_CLASSIFICATION	7.284086224430411E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999947769155345	WITHOUT_CLASSIFICATION	5.223084465454096E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997865077250359	WITHOUT_CLASSIFICATION	2.1349227496409023E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9997308791587873	WITHOUT_CLASSIFICATION	2.691208412126917E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9841505319767763	WITHOUT_CLASSIFICATION	0.015849468023223692	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999337951137204	WITHOUT_CLASSIFICATION	6.620488627963449E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652763236795	WITHOUT_CLASSIFICATION	3.4723676320457435E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999005248406	WITHOUT_CLASSIFICATION	9.947515940302161E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971386982556	WITHOUT_CLASSIFICATION	1.0286130174441396E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999337951137204	WITHOUT_CLASSIFICATION	6.620488627963449E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652763236795	WITHOUT_CLASSIFICATION	3.4723676320457435E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999993245495584	WITHOUT_CLASSIFICATION	6.754504415184831E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999907953628651	WITHOUT_CLASSIFICATION	9.204637135031568E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999984083576848	WITHOUT_CLASSIFICATION	1.5916423150824955E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999993398307782	WITHOUT_CLASSIFICATION	6.601692218517925E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997420242999939	WITHOUT_CLASSIFICATION	2.579757000060633E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.999958416018871	WITHOUT_CLASSIFICATION	4.158398112886647E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999446380386612	WITHOUT_CLASSIFICATION	5.536196133880401E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999800497707454	WITHOUT_CLASSIFICATION	1.9950229254597216E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996186226159619	WITHOUT_CLASSIFICATION	3.8137738403817796E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9989267458674354	WITHOUT_CLASSIFICATION	0.0010732541325646629	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999886178213917	WITHOUT_CLASSIFICATION	1.138217860823403E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999971432800021	WITHOUT_CLASSIFICATION	2.8567199979032556E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998117456366213	WITHOUT_CLASSIFICATION	1.8825436337874507E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995656894657962	WITHOUT_CLASSIFICATION	4.343105342037409E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999677007438365	WITHOUT_CLASSIFICATION	3.229925616360057E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999843550064539	WITHOUT_CLASSIFICATION	1.5644993546101339E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999948478056552	WITHOUT_CLASSIFICATION	5.152194344826126E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991173144826831	WITHOUT_CLASSIFICATION	8.826855173167566E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9871039542056035	WITHOUT_CLASSIFICATION	0.012896045794396467	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999922449572701	WITHOUT_CLASSIFICATION	7.755042729773041E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999956609303914	WITHOUT_CLASSIFICATION	4.339069608664208E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9592239327983534	WITHOUT_CLASSIFICATION	0.04077606720164671	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313889628745	WITHOUT_CLASSIFICATION	6.861103712557591E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999329827633265	WITHOUT_CLASSIFICATION	6.701723667342763E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999997391539464	WITHOUT_CLASSIFICATION	2.6084605360105313E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934845027419	WITHOUT_CLASSIFICATION	6.51549725810067E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945029255772	WITHOUT_CLASSIFICATION	5.4970744227944914E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998124625593454	WITHOUT_CLASSIFICATION	1.875374406546327E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998124625593454	WITHOUT_CLASSIFICATION	1.875374406546327E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999676303890433	WITHOUT_CLASSIFICATION	3.236961095667965E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9998622699585786	WITHOUT_CLASSIFICATION	1.377300414213589E-4	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9982819126572274	WITHOUT_CLASSIFICATION	0.001718087342772542	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9994089032376156	WITHOUT_CLASSIFICATION	5.910967623845188E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999972992611796	WITHOUT_CLASSIFICATION	2.700738820363532E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999695553034661	WITHOUT_CLASSIFICATION	3.0444696533885692E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.999954039921036	WITHOUT_CLASSIFICATION	4.596007896404223E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9991528984114663	WITHOUT_CLASSIFICATION	8.4710158853373E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9978367436095369	WITHOUT_CLASSIFICATION	0.0021632563904631147	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999467155083671	WITHOUT_CLASSIFICATION	5.3284491632796966E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999320494779376	WITHOUT_CLASSIFICATION	6.795052206243675E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999266101357048	WITHOUT_CLASSIFICATION	7.338986429515109E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999726376071	WITHOUT_CLASSIFICATION	2.736239288971495E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9991128172970133	WITHOUT_CLASSIFICATION	8.871827029866867E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999745809039647	WITHOUT_CLASSIFICATION	2.5419096035257517E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9987682379636391	WITHOUT_CLASSIFICATION	0.0012317620363609695	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999320494779376	WITHOUT_CLASSIFICATION	6.795052206243675E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999320494779376	WITHOUT_CLASSIFICATION	6.795052206243675E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999287897255809	WITHOUT_CLASSIFICATION	7.121027441912137E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999870808740791	WITHOUT_CLASSIFICATION	1.2919125921026081E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9992737432588851	WITHOUT_CLASSIFICATION	7.262567411149987E-4	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999878663822165	WITHOUT_CLASSIFICATION	1.2133617783557159E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999941985219515	WITHOUT_CLASSIFICATION	5.801478048551117E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999843550064539	WITHOUT_CLASSIFICATION	1.5644993546101339E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999246468997021	WITHOUT_CLASSIFICATION	7.535310029799278E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999611416685553	WITHOUT_CLASSIFICATION	3.885833144461011E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999865737419789	WITHOUT_CLASSIFICATION	1.3426258021125572E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998114581488131	WITHOUT_CLASSIFICATION	1.8854185118682152E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999884159169261	WITHOUT_CLASSIFICATION	1.1584083073767623E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999241273722963	WITHOUT_CLASSIFICATION	7.587262770371402E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999536737873511	WITHOUT_CLASSIFICATION	4.6326212648896576E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999536737873511	WITHOUT_CLASSIFICATION	4.6326212648896576E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999536737873511	WITHOUT_CLASSIFICATION	4.6326212648896576E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999536737873511	WITHOUT_CLASSIFICATION	4.6326212648896576E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477369749972	WITHOUT_CLASSIFICATION	5.226302500279517E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9991848020477181	WITHOUT_CLASSIFICATION	8.151979522819737E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462709805312	WITHOUT_CLASSIFICATION	5.372901946874559E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999686812358024	WITHOUT_CLASSIFICATION	3.1318764197697074E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.99999320520836	WITHOUT_CLASSIFICATION	6.7947916400801605E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398773432386	WITHOUT_CLASSIFICATION	6.012265676146998E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999557439526685	WITHOUT_CLASSIFICATION	4.425604733150775E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999729249460934	WITHOUT_CLASSIFICATION	2.7075053906647505E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999937120599771	WITHOUT_CLASSIFICATION	6.287940022795878E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999981623492862	WITHOUT_CLASSIFICATION	1.8376507137822373E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999440275449142	WITHOUT_CLASSIFICATION	5.59724550857455E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9996822885995793	WITHOUT_CLASSIFICATION	3.177114004206161E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999213572467843	WITHOUT_CLASSIFICATION	7.864275321559986E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9960174193325798	WITHOUT_CLASSIFICATION	0.003982580667420156	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999600404566332	WITHOUT_CLASSIFICATION	3.995954336680556E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999600404566332	WITHOUT_CLASSIFICATION	3.995954336680556E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999885906425126	WITHOUT_CLASSIFICATION	1.1409357487444736E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999836307191459	WITHOUT_CLASSIFICATION	1.6369280854193802E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998414445198	WITHOUT_CLASSIFICATION	1.585554802623592E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463930744624	WITHOUT_CLASSIFICATION	5.360692553745131E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463930744624	WITHOUT_CLASSIFICATION	5.360692553745131E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999882227596365	WITHOUT_CLASSIFICATION	1.177724036347853E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994213959642544	WITHOUT_CLASSIFICATION	5.786040357456495E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9617986849325041	WITHOUT_CLASSIFICATION	0.0382013150674958	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999911974751381	WITHOUT_CLASSIFICATION	8.80252486187875E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999814269078938	WITHOUT_CLASSIFICATION	1.8573092106175947E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9755958888064585	WITHOUT_CLASSIFICATION	0.024404111193541363	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898325026468	WITHOUT_CLASSIFICATION	1.01674973531978E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999883795548802	WITHOUT_CLASSIFICATION	1.162044511981581E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998565271390001	WITHOUT_CLASSIFICATION	1.4347286099990027E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995846998316711	WITHOUT_CLASSIFICATION	4.1530016832888475E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999575793484662	WITHOUT_CLASSIFICATION	4.242065153373811E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999892167665761	WITHOUT_CLASSIFICATION	1.078323342385126E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999911871418473	WITHOUT_CLASSIFICATION	8.812858152618691E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999841227256416	WITHOUT_CLASSIFICATION	1.5877274358401778E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999964108929	WITHOUT_CLASSIFICATION	3.589107100946848E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998902402786	WITHOUT_CLASSIFICATION	1.0975972143145833E-7	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999472350126	WITHOUT_CLASSIFICATION	5.2764987279119063E-8	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999989188814286	WITHOUT_CLASSIFICATION	1.0811185714016379E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999923487043584	WITHOUT_CLASSIFICATION	7.651295641605885E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998935477027412	WITHOUT_CLASSIFICATION	1.0645229725884158E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999989301731818	WITHOUT_CLASSIFICATION	1.0698268181960708E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998148889991703	WITHOUT_CLASSIFICATION	1.851110008298694E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998790663159	WITHOUT_CLASSIFICATION	1.2093368397030364E-7	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.99999042517212	WITHOUT_CLASSIFICATION	9.57482788002905E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999762316295	WITHOUT_CLASSIFICATION	2.3768370500774258E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999168907567804	WITHOUT_CLASSIFICATION	8.310924321967905E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999170073758381	WITHOUT_CLASSIFICATION	8.299262416183027E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9705064374678156	WITHOUT_CLASSIFICATION	0.029493562532184395	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995297422093544	WITHOUT_CLASSIFICATION	4.7025779064558093E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9975067012436274	WITHOUT_CLASSIFICATION	0.0024932987563726925	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.999722607961175	WITHOUT_CLASSIFICATION	2.773920388250491E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999572484459198	WITHOUT_CLASSIFICATION	4.2751554080237344E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999496830016649	WITHOUT_CLASSIFICATION	5.031699833505426E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999991326016399	WITHOUT_CLASSIFICATION	8.673983601388251E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999670940385103	WITHOUT_CLASSIFICATION	3.290596148985181E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9676075879926123	WITHOUT_CLASSIFICATION	0.0323924120073877	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999992403268099	WITHOUT_CLASSIFICATION	7.596731901012366E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999998237762604	WITHOUT_CLASSIFICATION	1.762237396210045E-7	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997910390456399	WITHOUT_CLASSIFICATION	2.0896095436007012E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999754532836383	WITHOUT_CLASSIFICATION	2.4546716361719884E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999144908058903	WITHOUT_CLASSIFICATION	8.550919410965986E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.99994929877445	WITHOUT_CLASSIFICATION	5.070122554999198E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999878732034867	WITHOUT_CLASSIFICATION	1.2126796513302706E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999704330634065	WITHOUT_CLASSIFICATION	2.9566936593566227E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9991361282238366	WITHOUT_CLASSIFICATION	8.638717761634305E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998635828521529	WITHOUT_CLASSIFICATION	1.364171478469736E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995842909593667	WITHOUT_CLASSIFICATION	4.157090406333167E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999757384224237	WITHOUT_CLASSIFICATION	2.4261577576300194E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998284327906102	WITHOUT_CLASSIFICATION	1.7156720938976602E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9983680132003452	WITHOUT_CLASSIFICATION	0.0016319867996548762	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999222348544642	WITHOUT_CLASSIFICATION	7.776514553577402E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999758389278295	WITHOUT_CLASSIFICATION	2.4161072170586596E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9994762616817144	WITHOUT_CLASSIFICATION	5.23738318285587E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999719305645903	WITHOUT_CLASSIFICATION	2.806943540963669E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999668927301141	WITHOUT_CLASSIFICATION	3.310726988593797E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999296743352	WITHOUT_CLASSIFICATION	7.032566484788284E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998241917355494	WITHOUT_CLASSIFICATION	1.75808264450585E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999870427613328	WITHOUT_CLASSIFICATION	1.2957238667332076E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999995447702064	WITHOUT_CLASSIFICATION	4.552297935888505E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999712806631532	WITHOUT_CLASSIFICATION	2.871933684674635E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999991348458116	WITHOUT_CLASSIFICATION	8.651541883474654E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9794484814271357	WITHOUT_CLASSIFICATION	0.020551518572864226	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997481964128201	WITHOUT_CLASSIFICATION	2.518035871799318E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999040366120766	WITHOUT_CLASSIFICATION	9.596338792346516E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998493787299162	WITHOUT_CLASSIFICATION	1.506212700836825E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999353147615944	WITHOUT_CLASSIFICATION	6.468523840567081E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999917766428177	WITHOUT_CLASSIFICATION	8.22335718231088E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999995197247321	WITHOUT_CLASSIFICATION	4.802752678753471E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9992552488642831	WITHOUT_CLASSIFICATION	7.447511357168989E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999978302819441	WITHOUT_CLASSIFICATION	2.1697180558970908E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999166473484462	WITHOUT_CLASSIFICATION	8.335265155383788E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999834630717158	WITHOUT_CLASSIFICATION	1.653692828411438E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9991851395296432	WITHOUT_CLASSIFICATION	8.148604703568652E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999856784407732	WITHOUT_CLASSIFICATION	1.4321559226788252E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999028290574868	WITHOUT_CLASSIFICATION	9.71709425132021E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.5899099538368184	IMPLEMENTATION	0.41009004616318157	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999646065848851	WITHOUT_CLASSIFICATION	3.5393415114905847E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9803541259614074	WITHOUT_CLASSIFICATION	0.019645874038592602	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999096151352772	WITHOUT_CLASSIFICATION	9.038486472281396E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999066250495692	WITHOUT_CLASSIFICATION	9.337495043083301E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9996041087036157	WITHOUT_CLASSIFICATION	3.9589129638427123E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999252746855718	WITHOUT_CLASSIFICATION	7.472531442823018E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9986107447059458	WITHOUT_CLASSIFICATION	0.0013892552940542248	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999068624569682	WITHOUT_CLASSIFICATION	9.313754303178702E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999492219624899	WITHOUT_CLASSIFICATION	5.07780375100994E-4	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997299733201738	WITHOUT_CLASSIFICATION	2.700266798261674E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9995617222813798	WITHOUT_CLASSIFICATION	4.382777186200806E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999328156153869	WITHOUT_CLASSIFICATION	6.718438461305238E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999828428137885	WITHOUT_CLASSIFICATION	1.7157186211585443E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9992775427672147	WITHOUT_CLASSIFICATION	7.224572327853224E-4	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999915801477907	WITHOUT_CLASSIFICATION	8.419852209338397E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999540576986058	WITHOUT_CLASSIFICATION	4.594230139427835E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998965052637627	WITHOUT_CLASSIFICATION	1.0349473623716408E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9996767032390577	WITHOUT_CLASSIFICATION	3.2329676094227684E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999912868752046	WITHOUT_CLASSIFICATION	8.713124795348856E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999912868752046	WITHOUT_CLASSIFICATION	8.713124795348856E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999059346600877	WITHOUT_CLASSIFICATION	9.4065339912239E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9963936662476145	WITHOUT_CLASSIFICATION	0.0036063337523855148	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999339191729876	WITHOUT_CLASSIFICATION	6.608082701235441E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999935833506288	WITHOUT_CLASSIFICATION	6.416649371204068E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999084132194589	WITHOUT_CLASSIFICATION	9.15867805410488E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998930593050137	WITHOUT_CLASSIFICATION	1.0694069498628943E-4	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999828135985662	WITHOUT_CLASSIFICATION	1.7186401433712593E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999996036687505	WITHOUT_CLASSIFICATION	3.9633124955719885E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9515620263575932	WITHOUT_CLASSIFICATION	0.04843797364240682	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999975263020754	WITHOUT_CLASSIFICATION	2.47369792457339E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999991412965183	WITHOUT_CLASSIFICATION	8.587034815308828E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9971918984422019	WITHOUT_CLASSIFICATION	0.002808101557798084	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999997081077457	WITHOUT_CLASSIFICATION	2.91892254299557E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999863034125319	WITHOUT_CLASSIFICATION	1.3696587468111656E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999931967626053	WITHOUT_CLASSIFICATION	6.803237394715185E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9827085245353955	IMPLEMENTATION	0.017291475464604494	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9827085245353955	IMPLEMENTATION	0.017291475464604494	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999748280130013	WITHOUT_CLASSIFICATION	2.5171986998612113E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999997749531388	WITHOUT_CLASSIFICATION	2.250468612027357E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998932220513689	WITHOUT_CLASSIFICATION	1.0677794863111067E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999555764193414	WITHOUT_CLASSIFICATION	4.4423580658557496E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999834696611056	WITHOUT_CLASSIFICATION	1.653033889439063E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998937510007261	WITHOUT_CLASSIFICATION	1.0624899927398579E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9998937510007261	WITHOUT_CLASSIFICATION	1.0624899927398579E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999879068072454	WITHOUT_CLASSIFICATION	1.2093192754614256E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999887198006819	WITHOUT_CLASSIFICATION	1.1280199318093323E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9992909682849517	WITHOUT_CLASSIFICATION	7.090317150482135E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999963266	WITHOUT_CLASSIFICATION	3.6734682745192E-12	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999647807310337	WITHOUT_CLASSIFICATION	3.5219268966271316E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999895725962445	WITHOUT_CLASSIFICATION	1.0427403755420628E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998291159650946	WITHOUT_CLASSIFICATION	1.7088403490529737E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999195922476178	WITHOUT_CLASSIFICATION	8.040775238218377E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999873713073137	WITHOUT_CLASSIFICATION	1.2628692686285699E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999974448046353	WITHOUT_CLASSIFICATION	2.555195364612638E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9979614543613355	WITHOUT_CLASSIFICATION	0.002038545638664535	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999459622285947	WITHOUT_CLASSIFICATION	5.4037771405346336E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999711418228279	WITHOUT_CLASSIFICATION	2.885817717215665E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997323653626228	WITHOUT_CLASSIFICATION	2.6763463737719263E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9988538929697618	WITHOUT_CLASSIFICATION	0.0011461070302381151	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9997206621374548	WITHOUT_CLASSIFICATION	2.793378625452736E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998196178744067	WITHOUT_CLASSIFICATION	1.803821255934491E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997594686332996	WITHOUT_CLASSIFICATION	2.4053136670038524E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999732942200859	WITHOUT_CLASSIFICATION	2.6705779914127664E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999642354857838	WITHOUT_CLASSIFICATION	3.5764514216267486E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9933472761334158	WITHOUT_CLASSIFICATION	0.006652723866584246	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999348430568651	WITHOUT_CLASSIFICATION	6.5156943134892E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999252782164421	WITHOUT_CLASSIFICATION	7.472178355799504E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999667669554484	WITHOUT_CLASSIFICATION	3.32330445516438E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9977144263277745	WITHOUT_CLASSIFICATION	0.002285573672225483	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999954011879629	WITHOUT_CLASSIFICATION	4.59881203700518E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998447835951373	WITHOUT_CLASSIFICATION	1.5521640486279315E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999919875039	WITHOUT_CLASSIFICATION	8.012496105428404E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995841879133409	WITHOUT_CLASSIFICATION	4.158120866590331E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.99867903065116	WITHOUT_CLASSIFICATION	0.0013209693488400048	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999965402853728	WITHOUT_CLASSIFICATION	3.4597146272519892E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9723925930132389	WITHOUT_CLASSIFICATION	0.02760740698676108	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9994908720194371	WITHOUT_CLASSIFICATION	5.091279805628535E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999031931744496	WITHOUT_CLASSIFICATION	9.680682555030917E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9996420674766648	WITHOUT_CLASSIFICATION	3.579325233350796E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999163064995931	WITHOUT_CLASSIFICATION	8.369350040691392E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.999822207649729	WITHOUT_CLASSIFICATION	1.7779235027105329E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997888537208739	WITHOUT_CLASSIFICATION	2.1114627912609672E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999269974989264	WITHOUT_CLASSIFICATION	7.300250107358438E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9998025630829004	WITHOUT_CLASSIFICATION	1.9743691709953997E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9994595583504843	WITHOUT_CLASSIFICATION	5.404416495156378E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999911397163442	WITHOUT_CLASSIFICATION	8.860283655784984E-6	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999693986047	WITHOUT_CLASSIFICATION	3.060139536665471E-8	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9970979611106976	WITHOUT_CLASSIFICATION	0.00290203888930234	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.999822207649729	WITHOUT_CLASSIFICATION	1.7779235027105329E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997888537208739	WITHOUT_CLASSIFICATION	2.1114627912609672E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997539157799368	WITHOUT_CLASSIFICATION	2.460842200631789E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996215047991795	WITHOUT_CLASSIFICATION	3.784952008204936E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999990945046056	WITHOUT_CLASSIFICATION	9.054953944545223E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999300922618675	WITHOUT_CLASSIFICATION	6.990773813255182E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.99998957695216	WITHOUT_CLASSIFICATION	1.0423047840148247E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9943671772413268	WITHOUT_CLASSIFICATION	0.005632822758673208	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996557955964417	WITHOUT_CLASSIFICATION	3.4420440355832296E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999943234913793	WITHOUT_CLASSIFICATION	5.676508620712465E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999950452486773	WITHOUT_CLASSIFICATION	4.954751322670138E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9243697663574979	WITHOUT_CLASSIFICATION	0.0756302336425021	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.99988501940158	WITHOUT_CLASSIFICATION	1.1498059842004294E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9243697663574979	WITHOUT_CLASSIFICATION	0.0756302336425021	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999442627874455	WITHOUT_CLASSIFICATION	5.573721255451147E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996821544879881	WITHOUT_CLASSIFICATION	3.1784551201186404E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999442627874455	WITHOUT_CLASSIFICATION	5.573721255451147E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695710550581	WITHOUT_CLASSIFICATION	3.0428944941822446E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999321798866078	WITHOUT_CLASSIFICATION	6.782011339223523E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999655856899475	WITHOUT_CLASSIFICATION	3.4414310052392045E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999655856899475	WITHOUT_CLASSIFICATION	3.4414310052392045E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999699319165349	WITHOUT_CLASSIFICATION	3.006808346508965E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999702432156719	WITHOUT_CLASSIFICATION	2.9756784328108845E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999699319165349	WITHOUT_CLASSIFICATION	3.006808346508965E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997143950568897	WITHOUT_CLASSIFICATION	2.8560494311017515E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9881508687466319	WITHOUT_CLASSIFICATION	0.011849131253368108	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9987521724988206	WITHOUT_CLASSIFICATION	0.0012478275011794358	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998179371343732	WITHOUT_CLASSIFICATION	1.8206286562673764E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999935284422617	WITHOUT_CLASSIFICATION	6.471557738334936E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9987017694880458	WITHOUT_CLASSIFICATION	0.0012982305119541525	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999122657587495	WITHOUT_CLASSIFICATION	8.77342412505784E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9998064767642841	WITHOUT_CLASSIFICATION	1.935232357159532E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998628792201215	WITHOUT_CLASSIFICATION	1.3712077987848952E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999969387776144	WITHOUT_CLASSIFICATION	3.0612223856075316E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999646139799698	WITHOUT_CLASSIFICATION	3.538602003020089E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999616342058039	WITHOUT_CLASSIFICATION	3.836579419599911E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.99996793386115	WITHOUT_CLASSIFICATION	3.206613885001303E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999495193515434	WITHOUT_CLASSIFICATION	5.04806484566047E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998888990406279	WITHOUT_CLASSIFICATION	1.111009593720388E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9994626006374275	WITHOUT_CLASSIFICATION	5.373993625723925E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9989269149930537	WITHOUT_CLASSIFICATION	0.0010730850069462507	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9986893395165118	WITHOUT_CLASSIFICATION	0.0013106604834881572	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9821884184109748	WITHOUT_CLASSIFICATION	0.017811581589025124	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998637704775416	WITHOUT_CLASSIFICATION	1.3622952245845446E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999205180058003	WITHOUT_CLASSIFICATION	7.948199419975241E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9903756712125348	WITHOUT_CLASSIFICATION	0.009624328787465202	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9997915460947677	WITHOUT_CLASSIFICATION	2.0845390523233884E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9987521724988206	WITHOUT_CLASSIFICATION	0.0012478275011794358	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999602263776228	WITHOUT_CLASSIFICATION	3.977362237722837E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.999190940110589	WITHOUT_CLASSIFICATION	8.090598894111276E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9641531594053065	WITHOUT_CLASSIFICATION	0.035846840594693376	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9988826053394336	WITHOUT_CLASSIFICATION	0.0011173946605663382	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999677925244034	WITHOUT_CLASSIFICATION	3.220747559666911E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.99981538375587	WITHOUT_CLASSIFICATION	1.8461624413007615E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997143950568897	WITHOUT_CLASSIFICATION	2.8560494311017515E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997143950568897	WITHOUT_CLASSIFICATION	2.8560494311017515E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9986105940959314	WITHOUT_CLASSIFICATION	0.0013894059040685262	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9997949147904198	WITHOUT_CLASSIFICATION	2.0508520958029017E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998587265892699	WITHOUT_CLASSIFICATION	1.4127341073003906E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9984407913832178	WITHOUT_CLASSIFICATION	0.001559208616782208	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9984784303549373	WITHOUT_CLASSIFICATION	0.0015215696450626508	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997635930011496	WITHOUT_CLASSIFICATION	2.3640699885041976E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999862384376711	WITHOUT_CLASSIFICATION	1.3761562329020223E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997638074045	WITHOUT_CLASSIFICATION	2.3619259563189933E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998932469326705	WITHOUT_CLASSIFICATION	1.0675306732965399E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999927664226114	WITHOUT_CLASSIFICATION	7.233577388682192E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998628792201215	WITHOUT_CLASSIFICATION	1.3712077987848952E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9990724195945921	WITHOUT_CLASSIFICATION	9.275804054078001E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999927664226114	WITHOUT_CLASSIFICATION	7.233577388682192E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998323438870597	WITHOUT_CLASSIFICATION	1.6765611294027686E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999315095666822	WITHOUT_CLASSIFICATION	6.849043331786696E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998911772810658	WITHOUT_CLASSIFICATION	1.0882271893421766E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9502461563939312	WITHOUT_CLASSIFICATION	0.04975384360606886	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998972437493305	WITHOUT_CLASSIFICATION	1.0275625066947974E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993892976714	WITHOUT_CLASSIFICATION	6.10702328670382E-7	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976273774376	WITHOUT_CLASSIFICATION	2.372622562435896E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999988172353	WITHOUT_CLASSIFICATION	1.1827645946248114E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997657934117143	WITHOUT_CLASSIFICATION	2.342065882855147E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999788877101372	WITHOUT_CLASSIFICATION	2.1112289862827656E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998668845241612	WITHOUT_CLASSIFICATION	1.3311547583889411E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.994643512383216	WITHOUT_CLASSIFICATION	0.005356487616783919	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999927664226114	WITHOUT_CLASSIFICATION	7.233577388682192E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998972437493305	WITHOUT_CLASSIFICATION	1.0275625066947974E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976273774376	WITHOUT_CLASSIFICATION	2.372622562435896E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997411630373125	WITHOUT_CLASSIFICATION	2.588369626875174E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999662161449679	WITHOUT_CLASSIFICATION	3.3783855032101464E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999311483536399	WITHOUT_CLASSIFICATION	6.88516463600409E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996858216368592	WITHOUT_CLASSIFICATION	3.1417836314089867E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997939322257895	WITHOUT_CLASSIFICATION	2.0606777421048166E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997473953686283	WITHOUT_CLASSIFICATION	2.5260463137158443E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998323438870597	WITHOUT_CLASSIFICATION	1.6765611294027686E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996889542685511	WITHOUT_CLASSIFICATION	3.110457314489755E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9984733417194815	WITHOUT_CLASSIFICATION	0.0015266582805185014	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9993908282565548	WITHOUT_CLASSIFICATION	6.091717434452723E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8411022055813202	WITHOUT_CLASSIFICATION	0.1588977944186798	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.8343933106858148	WITHOUT_CLASSIFICATION	0.16560668931418523	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9993489451865613	WITHOUT_CLASSIFICATION	6.510548134386438E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695710550581	WITHOUT_CLASSIFICATION	3.0428944941822446E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916671308742	WITHOUT_CLASSIFICATION	8.332869125925283E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.99999945812249	WITHOUT_CLASSIFICATION	5.418775099687178E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996905409294184	WITHOUT_CLASSIFICATION	3.094590705815193E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999995101858676	WITHOUT_CLASSIFICATION	4.898141323961907E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999909163866859	WITHOUT_CLASSIFICATION	9.08361331408597E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999966313177814	WITHOUT_CLASSIFICATION	3.3686822185939965E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9993352483427734	WITHOUT_CLASSIFICATION	6.647516572266103E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999897445006137	WITHOUT_CLASSIFICATION	1.0255499386306102E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997473953686283	WITHOUT_CLASSIFICATION	2.5260463137158443E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9986922347139546	WITHOUT_CLASSIFICATION	0.001307765286045337	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999452626336718	WITHOUT_CLASSIFICATION	5.473736632829746E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9978522002576832	WITHOUT_CLASSIFICATION	0.0021477997423167854	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999938804050291	WITHOUT_CLASSIFICATION	6.119594970865438E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998971287477925	WITHOUT_CLASSIFICATION	1.02871252207568E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9994261552364847	WITHOUT_CLASSIFICATION	5.73844763515314E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999202407305087	WITHOUT_CLASSIFICATION	7.975926949140949E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9931264197921631	WITHOUT_CLASSIFICATION	0.006873580207836918	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9977246657355573	WITHOUT_CLASSIFICATION	0.0022753342644427628	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999797711849351	WITHOUT_CLASSIFICATION	2.0228815064927623E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9988060676810484	WITHOUT_CLASSIFICATION	0.0011939323189515889	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9983945785362224	WITHOUT_CLASSIFICATION	0.0016054214637776787	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999902787923637	WITHOUT_CLASSIFICATION	9.72120763631939E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999923218518829	WITHOUT_CLASSIFICATION	7.678148117111048E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999685299179318	WITHOUT_CLASSIFICATION	3.147008206820011E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999733918775872	WITHOUT_CLASSIFICATION	2.660812241295424E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9981136753954077	WITHOUT_CLASSIFICATION	0.0018863246045922456	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996909391763807	WITHOUT_CLASSIFICATION	3.090608236192492E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999836778244133	WITHOUT_CLASSIFICATION	1.6322175586661124E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999690357204303	WITHOUT_CLASSIFICATION	3.0964279569651436E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999977769111414	WITHOUT_CLASSIFICATION	2.2230888585660916E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999083263052033	WITHOUT_CLASSIFICATION	9.167369479670188E-5	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8405667456222932	IMPLEMENTATION	0.15943325437770686	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9990713038863234	WITHOUT_CLASSIFICATION	9.286961136765903E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998587666843335	WITHOUT_CLASSIFICATION	1.412333156664378E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999968571004805	WITHOUT_CLASSIFICATION	3.1428995194728588E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.979909579389541	WITHOUT_CLASSIFICATION	0.020090420610458876	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999988628349763	WITHOUT_CLASSIFICATION	1.1371650236892222E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997999458697046	WITHOUT_CLASSIFICATION	2.0005413029546476E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999889283614948	WITHOUT_CLASSIFICATION	1.1071638505221356E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999044102474433	WITHOUT_CLASSIFICATION	9.558975255670648E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999904050918819	WITHOUT_CLASSIFICATION	9.594908118164275E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999307251385542	WITHOUT_CLASSIFICATION	6.927486144576844E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999368737438744	WITHOUT_CLASSIFICATION	6.31262561255872E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.998268029469963	WITHOUT_CLASSIFICATION	0.0017319705300370017	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999307251385542	WITHOUT_CLASSIFICATION	6.927486144576844E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999904050918819	WITHOUT_CLASSIFICATION	9.594908118164275E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999368737438744	WITHOUT_CLASSIFICATION	6.31262561255872E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999731583715095	WITHOUT_CLASSIFICATION	2.6841628490637313E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999387429692692	WITHOUT_CLASSIFICATION	6.125703073081736E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9981770008885869	WITHOUT_CLASSIFICATION	0.0018229991114132368	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999975954393303	WITHOUT_CLASSIFICATION	2.4045606696926534E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998895731362	WITHOUT_CLASSIFICATION	1.1042686370157862E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5807092416806475	IMPLEMENTATION	0.41929075831935253	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.982551395683514	WITHOUT_CLASSIFICATION	0.017448604316486004	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997232269995633	WITHOUT_CLASSIFICATION	2.7677300043674007E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999913884799753	WITHOUT_CLASSIFICATION	8.611520024835596E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998977354876154	WITHOUT_CLASSIFICATION	1.0226451238452514E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999527548116264	WITHOUT_CLASSIFICATION	4.724518837359154E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999739435522188	WITHOUT_CLASSIFICATION	2.6056447781282935E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994131972727128	WITHOUT_CLASSIFICATION	5.868027272872122E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998744679615612	WITHOUT_CLASSIFICATION	1.255320384388205E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999947209656023	WITHOUT_CLASSIFICATION	5.279034397668652E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999845454535481	WITHOUT_CLASSIFICATION	1.545454645189399E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999499196824805	WITHOUT_CLASSIFICATION	5.008031751941663E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999980094678721	WITHOUT_CLASSIFICATION	1.9905321278620195E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9993200387315424	WITHOUT_CLASSIFICATION	6.799612684575332E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9985541183215724	WITHOUT_CLASSIFICATION	0.0014458816784275453	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9987500240098451	WITHOUT_CLASSIFICATION	0.0012499759901548448	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999533167381218	WITHOUT_CLASSIFICATION	4.668326187824805E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9992548696823084	WITHOUT_CLASSIFICATION	7.451303176915327E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999681787432582	WITHOUT_CLASSIFICATION	3.182125674177881E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9985266082486484	WITHOUT_CLASSIFICATION	0.0014733917513516746	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9985266082486484	WITHOUT_CLASSIFICATION	0.0014733917513516746	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998899894003885	WITHOUT_CLASSIFICATION	1.1001059961144558E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998899894003885	WITHOUT_CLASSIFICATION	1.1001059961144558E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9981268941755765	WITHOUT_CLASSIFICATION	0.0018731058244234138	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999499196824805	WITHOUT_CLASSIFICATION	5.008031751941663E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.99892442180505	WITHOUT_CLASSIFICATION	0.0010755781949500155	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998870381367189	WITHOUT_CLASSIFICATION	1.1296186328115617E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997356721560968	WITHOUT_CLASSIFICATION	2.6432784390317224E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997356721560968	WITHOUT_CLASSIFICATION	2.6432784390317224E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998534558926807	WITHOUT_CLASSIFICATION	1.4654410731929809E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994369974859629	WITHOUT_CLASSIFICATION	5.630025140370941E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998800575146018	WITHOUT_CLASSIFICATION	1.199424853980808E-4	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998779710114518	WITHOUT_CLASSIFICATION	1.220289885480887E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999664723620284	WITHOUT_CLASSIFICATION	3.352763797154466E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999951621890666	WITHOUT_CLASSIFICATION	4.837810933495412E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998996803172262	WITHOUT_CLASSIFICATION	1.0031968277374691E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999561009017858	WITHOUT_CLASSIFICATION	4.389909821418712E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9998104455129736	WITHOUT_CLASSIFICATION	1.8955448702633943E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999953960885378	WITHOUT_CLASSIFICATION	4.6039114621544645E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9997978606144781	WITHOUT_CLASSIFICATION	2.0213938552197236E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996091421367481	WITHOUT_CLASSIFICATION	3.9085786325191466E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997972174062496	WITHOUT_CLASSIFICATION	2.0278259375051098E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9991189239778764	WITHOUT_CLASSIFICATION	8.810760221235899E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9833408135445737	WITHOUT_CLASSIFICATION	0.016659186455426297	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999350443056892	WITHOUT_CLASSIFICATION	6.495569431080063E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371866612473	WITHOUT_CLASSIFICATION	6.281333875273994E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995510696152996	WITHOUT_CLASSIFICATION	4.489303847003349E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9884417375123572	WITHOUT_CLASSIFICATION	0.011558262487642893	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999993038953116	WITHOUT_CLASSIFICATION	6.961046885709074E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9993294829342522	WITHOUT_CLASSIFICATION	6.70517065747972E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999962648765679	WITHOUT_CLASSIFICATION	3.735123432108494E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998862922529901	WITHOUT_CLASSIFICATION	1.1370774700993124E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999990974821908	WITHOUT_CLASSIFICATION	9.025178091307171E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996422820966672	WITHOUT_CLASSIFICATION	3.5771790333291077E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998206345003415	WITHOUT_CLASSIFICATION	1.793654996585318E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999797711849351	WITHOUT_CLASSIFICATION	2.0228815064927623E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999214481152501	WITHOUT_CLASSIFICATION	7.855188474992426E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999953337516743	WITHOUT_CLASSIFICATION	4.666248325779091E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371737989561	WITHOUT_CLASSIFICATION	6.282620104391018E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323209117171	WITHOUT_CLASSIFICATION	6.767908828290333E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9994793608399544	WITHOUT_CLASSIFICATION	5.206391600456149E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9994793608399544	WITHOUT_CLASSIFICATION	5.206391600456149E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999571359966859	WITHOUT_CLASSIFICATION	4.286400331403015E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9996971265427738	WITHOUT_CLASSIFICATION	3.0287345722619603E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9996452537691447	WITHOUT_CLASSIFICATION	3.54746230855325E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9996452537691447	WITHOUT_CLASSIFICATION	3.54746230855325E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997395082895996	WITHOUT_CLASSIFICATION	2.6049171040047115E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999472568721769	WITHOUT_CLASSIFICATION	5.274312782298672E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9948336690191674	WITHOUT_CLASSIFICATION	0.005166330980832612	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999941985219515	WITHOUT_CLASSIFICATION	5.801478048551117E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9989351499349257	WITHOUT_CLASSIFICATION	0.0010648500650742646	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999682732559895	WITHOUT_CLASSIFICATION	3.172674401061616E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998327039575551	WITHOUT_CLASSIFICATION	1.672960424449136E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999659648375495	WITHOUT_CLASSIFICATION	3.403516245051961E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999659648375495	WITHOUT_CLASSIFICATION	3.403516245051961E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998004883067404	WITHOUT_CLASSIFICATION	1.995116932596598E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999925860126422	WITHOUT_CLASSIFICATION	7.413987357900479E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999925860126422	WITHOUT_CLASSIFICATION	7.413987357900479E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999983040216478	WITHOUT_CLASSIFICATION	1.695978352202948E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999737113313186	WITHOUT_CLASSIFICATION	2.6288668681408482E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999639663760218	WITHOUT_CLASSIFICATION	3.6033623978268366E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999921381432088	WITHOUT_CLASSIFICATION	7.861856791262775E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9995456463805038	WITHOUT_CLASSIFICATION	4.543536194962021E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999926296161081	WITHOUT_CLASSIFICATION	7.3703838918147E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999085715999328	WITHOUT_CLASSIFICATION	9.142840006719302E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999162109706126	WITHOUT_CLASSIFICATION	8.378902938737133E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9976319203800871	WITHOUT_CLASSIFICATION	0.00236807961991287	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999158600267027	WITHOUT_CLASSIFICATION	8.413997329727532E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.8754185016694197	WITHOUT_CLASSIFICATION	0.12458149833058037	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9987360519973423	WITHOUT_CLASSIFICATION	0.0012639480026576614	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9987360519973423	WITHOUT_CLASSIFICATION	0.0012639480026576614	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9987360519973423	WITHOUT_CLASSIFICATION	0.0012639480026576614	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9987360519973423	WITHOUT_CLASSIFICATION	0.0012639480026576614	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999766494055046	WITHOUT_CLASSIFICATION	2.3350594495380223E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998245528240267	WITHOUT_CLASSIFICATION	1.754471759733419E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9990562335067005	WITHOUT_CLASSIFICATION	9.437664932995439E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9994013378882107	WITHOUT_CLASSIFICATION	5.98662111789193E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9994684060237965	WITHOUT_CLASSIFICATION	5.315939762035054E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999832709973223	WITHOUT_CLASSIFICATION	1.6729002677790683E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9993260044093389	WITHOUT_CLASSIFICATION	6.739955906610373E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999510095826118	WITHOUT_CLASSIFICATION	4.899041738809811E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9969761168424703	WITHOUT_CLASSIFICATION	0.003023883157529761	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998738406992044	WITHOUT_CLASSIFICATION	1.2615930079562748E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995008741997919	WITHOUT_CLASSIFICATION	4.991258002081137E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999084633306	WITHOUT_CLASSIFICATION	9.153666938277502E-8	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.6816450759287345	IMPLEMENTATION	0.31835492407126553	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999844330491257	WITHOUT_CLASSIFICATION	1.556695087437709E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995008741997919	WITHOUT_CLASSIFICATION	4.991258002081137E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9349930876910626	WITHOUT_CLASSIFICATION	0.06500691230893738	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999363035617064	WITHOUT_CLASSIFICATION	6.369643829360996E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999986796320461	WITHOUT_CLASSIFICATION	1.3203679537700895E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999570672426813	WITHOUT_CLASSIFICATION	4.293275731871346E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999770799848463	WITHOUT_CLASSIFICATION	2.2920015153695096E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9995329338305634	WITHOUT_CLASSIFICATION	4.6706616943653775E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999917196246776	WITHOUT_CLASSIFICATION	8.28037532244274E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999446923060731	WITHOUT_CLASSIFICATION	5.5307693926807364E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966788838959	WITHOUT_CLASSIFICATION	3.3211161041940394E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999972465512745	WITHOUT_CLASSIFICATION	2.7534487254496286E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966788838959	WITHOUT_CLASSIFICATION	3.3211161041940394E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999956269218206	WITHOUT_CLASSIFICATION	4.373078179341958E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998893732261219	WITHOUT_CLASSIFICATION	1.1062677387813727E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7452721912154073	WITHOUT_CLASSIFICATION	0.25472780878459267	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999866674567288	WITHOUT_CLASSIFICATION	1.3332543271302733E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998867655312246	WITHOUT_CLASSIFICATION	1.132344687754458E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999975812324964	WITHOUT_CLASSIFICATION	2.4187675036004227E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999538658229912	WITHOUT_CLASSIFICATION	4.6134177008819876E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999870671555888	WITHOUT_CLASSIFICATION	1.2932844411184073E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999538658229912	WITHOUT_CLASSIFICATION	4.6134177008819876E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999756456940248	WITHOUT_CLASSIFICATION	2.435430597535907E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999927299565146	WITHOUT_CLASSIFICATION	7.2700434853900535E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999468779236124	WITHOUT_CLASSIFICATION	5.3122076387617725E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999967212567257	WITHOUT_CLASSIFICATION	3.2787432743067154E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999975812324964	WITHOUT_CLASSIFICATION	2.4187675036004227E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999870671555888	WITHOUT_CLASSIFICATION	1.2932844411184073E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999756456940248	WITHOUT_CLASSIFICATION	2.435430597535907E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995756231955731	WITHOUT_CLASSIFICATION	4.243768044268702E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.998888876988202	WITHOUT_CLASSIFICATION	0.0011111230117980915	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9992748125739384	WITHOUT_CLASSIFICATION	7.251874260615426E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9993090677826442	WITHOUT_CLASSIFICATION	6.909322173557891E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999461184552052	WITHOUT_CLASSIFICATION	5.388154479479479E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999539411830332	WITHOUT_CLASSIFICATION	4.605881696682872E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371866612473	WITHOUT_CLASSIFICATION	6.281333875273994E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999927299565146	WITHOUT_CLASSIFICATION	7.2700434853900535E-6	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9801680911340674	WITHOUT_CLASSIFICATION	0.019831908865932637	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997849674211218	WITHOUT_CLASSIFICATION	2.1503257887825705E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999669860550789	WITHOUT_CLASSIFICATION	3.301394492101055E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371866612473	WITHOUT_CLASSIFICATION	6.281333875273994E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998563165451577	WITHOUT_CLASSIFICATION	1.4368345484233047E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371866612473	WITHOUT_CLASSIFICATION	6.281333875273994E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999804393800192	WITHOUT_CLASSIFICATION	1.9560619980807587E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999072858602042	WITHOUT_CLASSIFICATION	9.271413979582012E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9979349548531404	WITHOUT_CLASSIFICATION	0.0020650451468595993	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9994349193257974	WITHOUT_CLASSIFICATION	5.650806742025585E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999649997113923	WITHOUT_CLASSIFICATION	3.5000288607680435E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997467745622143	WITHOUT_CLASSIFICATION	2.5322543778577886E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998410066200293	WITHOUT_CLASSIFICATION	1.589933799706028E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999832845729794	WITHOUT_CLASSIFICATION	1.6715427020570913E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999577160937752	WITHOUT_CLASSIFICATION	4.2283906224813015E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998923602452726	WITHOUT_CLASSIFICATION	1.0763975472743595E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.99985365008906	WITHOUT_CLASSIFICATION	1.4634991094001948E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998923016702936	WITHOUT_CLASSIFICATION	1.0769832970640145E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9978133457853268	WITHOUT_CLASSIFICATION	0.00218665421467327	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9987631722996149	WITHOUT_CLASSIFICATION	0.001236827700385115	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999907707874697	WITHOUT_CLASSIFICATION	9.229212530392978E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999943293779683	WITHOUT_CLASSIFICATION	5.670622031715141E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999982253010681	WITHOUT_CLASSIFICATION	1.774698931880028E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999844453758051	WITHOUT_CLASSIFICATION	1.5554624194909736E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999994542423097	WITHOUT_CLASSIFICATION	5.457576902091815E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999772883488846	WITHOUT_CLASSIFICATION	2.2711651115450757E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998359393227826	WITHOUT_CLASSIFICATION	1.6406067721735638E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998359393227826	WITHOUT_CLASSIFICATION	1.6406067721735638E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999881132392842	WITHOUT_CLASSIFICATION	1.1886760715818855E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999880523118799	WITHOUT_CLASSIFICATION	1.1947688120087505E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999647617902021	WITHOUT_CLASSIFICATION	3.523820979801674E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999996500215008	WITHOUT_CLASSIFICATION	3.499784990897646E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995739285097281	WITHOUT_CLASSIFICATION	4.2607149027191647E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999584513720865	WITHOUT_CLASSIFICATION	4.1548627913547386E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999713038948316	WITHOUT_CLASSIFICATION	2.869610516841029E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999988029561259	WITHOUT_CLASSIFICATION	1.1970438741246268E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9954158262260567	WITHOUT_CLASSIFICATION	0.00458417377394328	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999762264489378	WITHOUT_CLASSIFICATION	2.3773551062102482E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998270912880256	WITHOUT_CLASSIFICATION	1.7290871197436528E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9965948769834803	WITHOUT_CLASSIFICATION	0.0034051230165197573	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9992280256716969	WITHOUT_CLASSIFICATION	7.719743283031112E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999170754547478	WITHOUT_CLASSIFICATION	8.29245452521405E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.99998360045121	WITHOUT_CLASSIFICATION	1.639954879001315E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996822150988814	WITHOUT_CLASSIFICATION	3.177849011185385E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9975554116223526	WITHOUT_CLASSIFICATION	0.002444588377647404	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9975554116223526	WITHOUT_CLASSIFICATION	0.002444588377647404	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999668557801584	WITHOUT_CLASSIFICATION	3.314421984165808E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999832845729794	WITHOUT_CLASSIFICATION	1.6715427020570913E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9990903685786277	WITHOUT_CLASSIFICATION	9.096314213724875E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997163944804169	WITHOUT_CLASSIFICATION	2.836055195830332E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998733449211766	WITHOUT_CLASSIFICATION	1.266550788233018E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999960861110709	WITHOUT_CLASSIFICATION	3.913888929127261E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997919252967017	WITHOUT_CLASSIFICATION	2.0807470329823995E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999648665812935	WITHOUT_CLASSIFICATION	3.513341870666082E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999894094103272	WITHOUT_CLASSIFICATION	1.0590589672725684E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997801858563843	WITHOUT_CLASSIFICATION	2.198141436157894E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9997750229264567	WITHOUT_CLASSIFICATION	2.24977073543204E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995128637348	WITHOUT_CLASSIFICATION	4.871362652195019E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999979846266834	WITHOUT_CLASSIFICATION	2.015373316592081E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996405185383	WITHOUT_CLASSIFICATION	3.5948146169793317E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9970961275584936	WITHOUT_CLASSIFICATION	0.002903872441506351	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997323009048956	WITHOUT_CLASSIFICATION	2.6769909510437813E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999987286596655	WITHOUT_CLASSIFICATION	1.271340334450722E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999971158428056	WITHOUT_CLASSIFICATION	2.88415719434908E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999355389272282	WITHOUT_CLASSIFICATION	6.446107277179229E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999877742819522	WITHOUT_CLASSIFICATION	1.2225718047752783E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999739709552963	WITHOUT_CLASSIFICATION	2.602904470372524E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999910033118218	WITHOUT_CLASSIFICATION	8.996688178201929E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994046810422199	WITHOUT_CLASSIFICATION	5.953189577800566E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999579388490608	WITHOUT_CLASSIFICATION	4.2061150939271155E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999969565074062	WITHOUT_CLASSIFICATION	3.0434925938344603E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999988436447427	WITHOUT_CLASSIFICATION	1.156355257239398E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9996002850390938	WITHOUT_CLASSIFICATION	3.997149609061011E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9349160738955163	WITHOUT_CLASSIFICATION	0.0650839261044837	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998717209773937	WITHOUT_CLASSIFICATION	1.2827902260636084E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9991524845211797	WITHOUT_CLASSIFICATION	8.475154788203512E-4	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999338081258374	WITHOUT_CLASSIFICATION	6.619187416253613E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999340578300385	WITHOUT_CLASSIFICATION	6.594216996140324E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999697514642044	WITHOUT_CLASSIFICATION	3.0248535795572104E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999972404923314	WITHOUT_CLASSIFICATION	2.7595076686023016E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999897901195542	WITHOUT_CLASSIFICATION	1.0209880445798155E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997313807979753	WITHOUT_CLASSIFICATION	2.6861920202467883E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.99998056742185	WITHOUT_CLASSIFICATION	1.9432578149945127E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998663920755485	WITHOUT_CLASSIFICATION	1.3360792445143627E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998663920755485	WITHOUT_CLASSIFICATION	1.3360792445143627E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998926264252708	WITHOUT_CLASSIFICATION	1.0737357472925636E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999877934281574	WITHOUT_CLASSIFICATION	1.2206571842612794E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999769172119449	WITHOUT_CLASSIFICATION	2.308278805507327E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999769172119449	WITHOUT_CLASSIFICATION	2.308278805507327E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999746930805428	WITHOUT_CLASSIFICATION	2.5306919457296048E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9984349784937003	WITHOUT_CLASSIFICATION	0.0015650215062997447	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998929871796253	WITHOUT_CLASSIFICATION	1.0701282037477035E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999998733923023	WITHOUT_CLASSIFICATION	1.2660769769881348E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999564417622286	WITHOUT_CLASSIFICATION	4.355823777140974E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999898589928561	WITHOUT_CLASSIFICATION	1.0141007143889321E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999898589928561	WITHOUT_CLASSIFICATION	1.0141007143889321E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999767848242395	WITHOUT_CLASSIFICATION	2.321517576052969E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9997143950568897	WITHOUT_CLASSIFICATION	2.8560494311017515E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997407572520609	WITHOUT_CLASSIFICATION	2.592427479390192E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9997407572520609	WITHOUT_CLASSIFICATION	2.592427479390192E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9996573750996524	WITHOUT_CLASSIFICATION	3.426249003476455E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999611293733974	WITHOUT_CLASSIFICATION	3.887062660255574E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997869452676632	WITHOUT_CLASSIFICATION	2.1305473233691082E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999742666013054	WITHOUT_CLASSIFICATION	2.5733398694637847E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999994536623737	WITHOUT_CLASSIFICATION	5.463376261938923E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997496442684739	WITHOUT_CLASSIFICATION	2.5035573152615146E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999629384807803	WITHOUT_CLASSIFICATION	3.706151921962596E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9998274721066135	WITHOUT_CLASSIFICATION	1.7252789338646944E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999801863783881	WITHOUT_CLASSIFICATION	1.981362161192925E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999849503482576	WITHOUT_CLASSIFICATION	1.5049651742498531E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9994613007758782	WITHOUT_CLASSIFICATION	5.386992241217038E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.947421378775314	WITHOUT_CLASSIFICATION	0.05257862122468591	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.561477671104736	IMPLEMENTATION	0.43852232889526405	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999986281789695	WITHOUT_CLASSIFICATION	1.3718210305627555E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9997726694649047	WITHOUT_CLASSIFICATION	2.2733053509531689E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999833812355537	WITHOUT_CLASSIFICATION	1.6618764446202238E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999126961737844	WITHOUT_CLASSIFICATION	8.73038262155253E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9934137818855365	WITHOUT_CLASSIFICATION	0.00658621811446346	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9988760210497385	WITHOUT_CLASSIFICATION	0.0011239789502614844	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998135940705586	WITHOUT_CLASSIFICATION	1.8640592944141313E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993911583523082	WITHOUT_CLASSIFICATION	6.088416476919188E-4	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997453494325378	WITHOUT_CLASSIFICATION	2.546505674621624E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9973549506180593	WITHOUT_CLASSIFICATION	0.0026450493819405786	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999362712585482	WITHOUT_CLASSIFICATION	6.372874145184978E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999647191611286	WITHOUT_CLASSIFICATION	3.528083887148708E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999903579796506	WITHOUT_CLASSIFICATION	9.642020349371505E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999862102548781	WITHOUT_CLASSIFICATION	1.3789745121992075E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999986363709817	WITHOUT_CLASSIFICATION	1.3636290182269798E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999971432800021	WITHOUT_CLASSIFICATION	2.8567199979032556E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991173144826831	WITHOUT_CLASSIFICATION	8.826855173167566E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999554602638615	WITHOUT_CLASSIFICATION	4.453973613843106E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999961417930512	WITHOUT_CLASSIFICATION	3.858206948791291E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999440111445098	WITHOUT_CLASSIFICATION	5.598885549025113E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997110165910319	WITHOUT_CLASSIFICATION	2.889834089681494E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999199432277833	WITHOUT_CLASSIFICATION	8.005677221675825E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999967947541148	WITHOUT_CLASSIFICATION	3.2052458851060093E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999713998936809	WITHOUT_CLASSIFICATION	2.8600106319055238E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999763229305071	WITHOUT_CLASSIFICATION	2.3677069492846936E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998269515255775	WITHOUT_CLASSIFICATION	1.7304847442239335E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999063260441211	WITHOUT_CLASSIFICATION	9.367395587898161E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998432168096039	WITHOUT_CLASSIFICATION	1.5678319039618438E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997614590337226	WITHOUT_CLASSIFICATION	2.385409662774591E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9998970654022006	WITHOUT_CLASSIFICATION	1.0293459779951149E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999290625107894	WITHOUT_CLASSIFICATION	7.093748921054516E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9966297406967416	WITHOUT_CLASSIFICATION	0.003370259303258352	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998812849195327	WITHOUT_CLASSIFICATION	1.1871508046723928E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999934904652571	WITHOUT_CLASSIFICATION	6.509534742904234E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997315107041095	WITHOUT_CLASSIFICATION	2.6848929589049663E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6002360586635415	WITHOUT_CLASSIFICATION	0.3997639413364586	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999447188049052	WITHOUT_CLASSIFICATION	5.528119509488884E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999817659401267	WITHOUT_CLASSIFICATION	1.8234059873286937E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999912949064459	WITHOUT_CLASSIFICATION	8.705093554129422E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999829588131716	WITHOUT_CLASSIFICATION	1.7041186828390362E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999588764942834	WITHOUT_CLASSIFICATION	4.11235057165711E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9992634003339582	WITHOUT_CLASSIFICATION	7.365996660417604E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999986610513496	WITHOUT_CLASSIFICATION	1.3389486503028552E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997654205991098	WITHOUT_CLASSIFICATION	2.345794008902648E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997654205991098	WITHOUT_CLASSIFICATION	2.345794008902648E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999993406475	WITHOUT_CLASSIFICATION	6.593523955333514E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999188545385851	WITHOUT_CLASSIFICATION	8.114546141492013E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999976228194543	WITHOUT_CLASSIFICATION	2.3771805457836265E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999998771840059	WITHOUT_CLASSIFICATION	1.2281599410097258E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999939123007274	WITHOUT_CLASSIFICATION	6.0876992725843605E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999885633347737	WITHOUT_CLASSIFICATION	1.1436665226164298E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999811080945825	WITHOUT_CLASSIFICATION	1.889190541748823E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999349937196	WITHOUT_CLASSIFICATION	6.500628030991689E-8	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999927150432605	WITHOUT_CLASSIFICATION	7.284956739430277E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999954631160948	WITHOUT_CLASSIFICATION	4.536883905177496E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998335088947885	WITHOUT_CLASSIFICATION	1.6649110521145164E-4	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999815250926955	WITHOUT_CLASSIFICATION	1.8474907304508845E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998620269291	WITHOUT_CLASSIFICATION	1.3797307082315027E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996759276159054	WITHOUT_CLASSIFICATION	3.240723840946907E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999175928483914	WITHOUT_CLASSIFICATION	8.24071516086192E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999175928483914	WITHOUT_CLASSIFICATION	8.24071516086192E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999955194835256	WITHOUT_CLASSIFICATION	4.4805164744350335E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999629483914524	WITHOUT_CLASSIFICATION	3.7051608547624945E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999260387611458	WITHOUT_CLASSIFICATION	7.396123885426686E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999953360452515	WITHOUT_CLASSIFICATION	4.6639547484641795E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999496988531149	WITHOUT_CLASSIFICATION	5.030114688520911E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999529357132267	WITHOUT_CLASSIFICATION	4.7064286773302366E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999725005309407	WITHOUT_CLASSIFICATION	2.7499469059299416E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999828162788826	WITHOUT_CLASSIFICATION	1.718372111735667E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999825946613587	WITHOUT_CLASSIFICATION	1.7405338641237153E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9961476617554341	WITHOUT_CLASSIFICATION	0.00385233824456584	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9991370053642538	WITHOUT_CLASSIFICATION	8.629946357462464E-4	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9994676706015485	WITHOUT_CLASSIFICATION	5.323293984513879E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999950102310758	WITHOUT_CLASSIFICATION	4.989768924134404E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997820679004731	WITHOUT_CLASSIFICATION	2.179320995269543E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998695855176564	WITHOUT_CLASSIFICATION	1.3041448234366512E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9987419921172707	WITHOUT_CLASSIFICATION	0.0012580078827292484	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999927605259168	WITHOUT_CLASSIFICATION	7.239474083283553E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994944918358	WITHOUT_CLASSIFICATION	5.05508164306662E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999696499594799	WITHOUT_CLASSIFICATION	3.0350040520085502E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999965258210336	WITHOUT_CLASSIFICATION	3.4741789664808448E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999997754322808	WITHOUT_CLASSIFICATION	2.2456771922968896E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999986316211629	WITHOUT_CLASSIFICATION	1.368378837039351E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999810549122082	WITHOUT_CLASSIFICATION	1.8945087791796594E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9986768214528193	WITHOUT_CLASSIFICATION	0.001323178547180667	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996186226159619	WITHOUT_CLASSIFICATION	3.8137738403817796E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.99888689108819	WITHOUT_CLASSIFICATION	0.0011131089118099386	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999611951131413	WITHOUT_CLASSIFICATION	3.880488685868522E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998524133943805	WITHOUT_CLASSIFICATION	1.4758660561952703E-4	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999869683848092	WITHOUT_CLASSIFICATION	1.3031615190795638E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999992132710579	WITHOUT_CLASSIFICATION	7.867289420966122E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999940208538858	WITHOUT_CLASSIFICATION	5.979146114204949E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999791319099135	WITHOUT_CLASSIFICATION	2.086809008655886E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999963773627618	WITHOUT_CLASSIFICATION	3.622637238222686E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9909100484966221	WITHOUT_CLASSIFICATION	0.009089951503377783	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9963243219498078	WITHOUT_CLASSIFICATION	0.0036756780501921646	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998236149622143	WITHOUT_CLASSIFICATION	1.7638503778568258E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999571929015163	WITHOUT_CLASSIFICATION	4.280709848366616E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988582047892	WITHOUT_CLASSIFICATION	1.1417952107919307E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999285446557009	WITHOUT_CLASSIFICATION	7.145534429909759E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999995991223888	WITHOUT_CLASSIFICATION	4.008776112340031E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996742088001942	WITHOUT_CLASSIFICATION	3.257911998057868E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996742088001942	WITHOUT_CLASSIFICATION	3.257911998057868E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999978643708626	WITHOUT_CLASSIFICATION	2.13562913740532E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998821290616664	WITHOUT_CLASSIFICATION	1.178709383336214E-4	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9971452924436625	WITHOUT_CLASSIFICATION	0.002854707556337578	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999794719560443	WITHOUT_CLASSIFICATION	2.0528043955640584E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9710160712454855	WITHOUT_CLASSIFICATION	0.02898392875451448	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999943316807915	WITHOUT_CLASSIFICATION	5.6683192083741995E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999935412098379	WITHOUT_CLASSIFICATION	6.45879016210082E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997015752853743	WITHOUT_CLASSIFICATION	2.9842471462570723E-4	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999839293973716	WITHOUT_CLASSIFICATION	1.6070602628427185E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687119909585	WITHOUT_CLASSIFICATION	1.3128800904155968E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999320494779376	WITHOUT_CLASSIFICATION	6.795052206243675E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999989503914222	WITHOUT_CLASSIFICATION	1.0496085779028484E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999975550731012	WITHOUT_CLASSIFICATION	2.4449268987876433E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9829466891630224	WITHOUT_CLASSIFICATION	0.017053310836977576	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999497654414415	WITHOUT_CLASSIFICATION	5.0234558558491764E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999845265997407	WITHOUT_CLASSIFICATION	1.547340025936742E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999927702918885	WITHOUT_CLASSIFICATION	7.2297081116340235E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999813487709772	WITHOUT_CLASSIFICATION	1.8651229022726715E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999471047646341	WITHOUT_CLASSIFICATION	5.2895235365979345E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997975208053	WITHOUT_CLASSIFICATION	2.024791947821182E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9736541462349633	WITHOUT_CLASSIFICATION	0.02634585376503681	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9986666243286414	WITHOUT_CLASSIFICATION	0.0013333756713585954	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994495032193389	WITHOUT_CLASSIFICATION	5.504967806610541E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999572947345869	WITHOUT_CLASSIFICATION	4.2705265413099015E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999287029724996	WITHOUT_CLASSIFICATION	7.129702750040472E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999419072661233	WITHOUT_CLASSIFICATION	5.809273387664941E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999536504495471	WITHOUT_CLASSIFICATION	4.634955045290831E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9960708780780575	WITHOUT_CLASSIFICATION	0.0039291219219425395	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999677161651476	WITHOUT_CLASSIFICATION	3.2283834852389804E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997662340249612	WITHOUT_CLASSIFICATION	2.3376597503875423E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999987523271041	WITHOUT_CLASSIFICATION	1.2476728959574094E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999985248750907	WITHOUT_CLASSIFICATION	1.4751249093880926E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999896367215689	WITHOUT_CLASSIFICATION	1.0363278431056118E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999165161142	WITHOUT_CLASSIFICATION	8.348388579380789E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999611193869377	WITHOUT_CLASSIFICATION	3.8880613062245745E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999993250851018	WITHOUT_CLASSIFICATION	6.749148981776355E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999997531060936	WITHOUT_CLASSIFICATION	2.4689390640846152E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9995265837687709	WITHOUT_CLASSIFICATION	4.7341623122904545E-4	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9990953848716184	WITHOUT_CLASSIFICATION	9.046151283816233E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999963153842932	WITHOUT_CLASSIFICATION	3.684615706810632E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999988231781028	WITHOUT_CLASSIFICATION	1.1768218971753786E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999930842569298	WITHOUT_CLASSIFICATION	6.915743070268382E-6	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999850315851401	WITHOUT_CLASSIFICATION	1.4968414859802423E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999529989806607	WITHOUT_CLASSIFICATION	4.700101933930679E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9926189648977518	WITHOUT_CLASSIFICATION	0.0073810351022482	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999990583541466	WITHOUT_CLASSIFICATION	9.416458534541271E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998620269291	WITHOUT_CLASSIFICATION	1.3797307082315027E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999876752619915	WITHOUT_CLASSIFICATION	1.232473800856937E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999993826737442	WITHOUT_CLASSIFICATION	6.173262558480075E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9996063133963762	WITHOUT_CLASSIFICATION	3.936866036237871E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999993816011082	WITHOUT_CLASSIFICATION	6.183988917292646E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999675116088	WITHOUT_CLASSIFICATION	3.2488391163120243E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999803459969469	WITHOUT_CLASSIFICATION	1.9654003053196685E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999259141233706	WITHOUT_CLASSIFICATION	7.408587662933253E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.6850488156878615	WITHOUT_CLASSIFICATION	0.3149511843121384	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999981623492862	WITHOUT_CLASSIFICATION	1.8376507137822373E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9966949974712899	WITHOUT_CLASSIFICATION	0.003305002528710073	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999199359977354	WITHOUT_CLASSIFICATION	8.006400226459031E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982667023714267	WITHOUT_CLASSIFICATION	0.001733297628573422	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999964608069526	WITHOUT_CLASSIFICATION	3.5391930474139516E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9949447630351204	WITHOUT_CLASSIFICATION	0.005055236964879668	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999698718399145	WITHOUT_CLASSIFICATION	3.012816008558936E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995768458804953	WITHOUT_CLASSIFICATION	4.231541195046279E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9990133883412247	WITHOUT_CLASSIFICATION	9.86611658775365E-4	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999979390951612	WITHOUT_CLASSIFICATION	2.0609048388233076E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999698718399145	WITHOUT_CLASSIFICATION	3.012816008558936E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.7982445927271182	WITHOUT_CLASSIFICATION	0.20175540727288174	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999297550008838	WITHOUT_CLASSIFICATION	7.024499911620492E-5	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999973923699946	WITHOUT_CLASSIFICATION	2.607630005377608E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9989076186561948	WITHOUT_CLASSIFICATION	0.0010923813438051893	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999371672765094	WITHOUT_CLASSIFICATION	6.283272349071409E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999286519854217	WITHOUT_CLASSIFICATION	7.134801457833199E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999989184657936	WITHOUT_CLASSIFICATION	1.0815342063266326E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9991294849185931	WITHOUT_CLASSIFICATION	8.705150814069948E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999984291147969	WITHOUT_CLASSIFICATION	1.5708852031549285E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996649896831851	WITHOUT_CLASSIFICATION	3.3501031681491524E-4	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996650492211148	WITHOUT_CLASSIFICATION	3.3495077888524193E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9308240513022181	WITHOUT_CLASSIFICATION	0.06917594869778189	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9994871882162984	WITHOUT_CLASSIFICATION	5.128117837015987E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9978806061666894	WITHOUT_CLASSIFICATION	0.0021193938333107323	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999186878479745	WITHOUT_CLASSIFICATION	8.131215202549998E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994046810422199	WITHOUT_CLASSIFICATION	5.953189577800566E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.99999495939411	WITHOUT_CLASSIFICATION	5.040605889975248E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999922455315873	WITHOUT_CLASSIFICATION	7.754468412740911E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998391862618611	WITHOUT_CLASSIFICATION	1.6081373813886892E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9967875776863532	WITHOUT_CLASSIFICATION	0.0032124223136468823	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9995233196382565	WITHOUT_CLASSIFICATION	4.766803617434646E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999970140744099	WITHOUT_CLASSIFICATION	2.985925590121531E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9975524151059406	WITHOUT_CLASSIFICATION	0.0024475848940594576	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999293014	WITHOUT_CLASSIFICATION	7.069856930214755E-11	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999990818889154	WITHOUT_CLASSIFICATION	9.181110846012115E-6	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999300696765366	WITHOUT_CLASSIFICATION	6.993032346340412E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9955449780014365	WITHOUT_CLASSIFICATION	0.004455021998563583	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999575793484662	WITHOUT_CLASSIFICATION	4.242065153373811E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9956017443083444	WITHOUT_CLASSIFICATION	0.004398255691655734	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9984949836447412	WITHOUT_CLASSIFICATION	0.0015050163552587422	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999686188007944	WITHOUT_CLASSIFICATION	3.138119920559472E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998878920791298	WITHOUT_CLASSIFICATION	1.1210792087013498E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999892997657864	WITHOUT_CLASSIFICATION	1.0700234213524635E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999972102417659	WITHOUT_CLASSIFICATION	2.7897582341952105E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999351868088	WITHOUT_CLASSIFICATION	6.481319121218949E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998331428065	WITHOUT_CLASSIFICATION	1.6685719347232387E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999993202918831	WITHOUT_CLASSIFICATION	6.797081169954684E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996363986790524	WITHOUT_CLASSIFICATION	3.636013209475483E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999301273251916	WITHOUT_CLASSIFICATION	6.9872674808377E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999492219624899	WITHOUT_CLASSIFICATION	5.07780375100994E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999908324385373	WITHOUT_CLASSIFICATION	9.16756146270176E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999908324385373	WITHOUT_CLASSIFICATION	9.16756146270176E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998930593050137	WITHOUT_CLASSIFICATION	1.0694069498628943E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999975263020754	WITHOUT_CLASSIFICATION	2.47369792457339E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999555764193414	WITHOUT_CLASSIFICATION	4.4423580658557496E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5319940438537513	WITHOUT_CLASSIFICATION	0.46800595614624885	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999941985219515	WITHOUT_CLASSIFICATION	5.801478048551117E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999941985219515	WITHOUT_CLASSIFICATION	5.801478048551117E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.999784036026232	WITHOUT_CLASSIFICATION	2.1596397376804586E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9988538929697618	WITHOUT_CLASSIFICATION	0.0011461070302381151	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999932424639628	WITHOUT_CLASSIFICATION	6.757536037082465E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9933472761334158	WITHOUT_CLASSIFICATION	0.006652723866584246	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9936840474816617	WITHOUT_CLASSIFICATION	0.006315952518338248	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999729750859423	WITHOUT_CLASSIFICATION	2.7024914057703555E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998701595701015	WITHOUT_CLASSIFICATION	1.2984042989849155E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999114905472063	WITHOUT_CLASSIFICATION	8.850945279372667E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999804160881374	WITHOUT_CLASSIFICATION	1.9583911862650728E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770558751823	WITHOUT_CLASSIFICATION	2.2944124817747886E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770558751823	WITHOUT_CLASSIFICATION	2.2944124817747886E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9994056596706234	WITHOUT_CLASSIFICATION	5.943403293765656E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997463000590983	WITHOUT_CLASSIFICATION	2.536999409017355E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997657934117143	WITHOUT_CLASSIFICATION	2.342065882855147E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997424709248246	WITHOUT_CLASSIFICATION	2.5752907517541125E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998823419329269	WITHOUT_CLASSIFICATION	1.1765806707310035E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916671308742	WITHOUT_CLASSIFICATION	8.332869125925283E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313892529532	WITHOUT_CLASSIFICATION	6.861074704676384E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999977579084995	WITHOUT_CLASSIFICATION	2.2420915004281906E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999152911206197	WITHOUT_CLASSIFICATION	8.470887938029599E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997732566354867	WITHOUT_CLASSIFICATION	2.267433645132488E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999722790568154	WITHOUT_CLASSIFICATION	2.7720943184646544E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996649896831851	WITHOUT_CLASSIFICATION	3.3501031681491524E-4	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999891817157145	WITHOUT_CLASSIFICATION	1.0818284285512161E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995808511810041	WITHOUT_CLASSIFICATION	4.1914881899585593E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999999438434954	WITHOUT_CLASSIFICATION	5.615650459878523E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998514441809953	WITHOUT_CLASSIFICATION	1.4855581900464728E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995862696958691	WITHOUT_CLASSIFICATION	4.1373030413098636E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996418793955718	WITHOUT_CLASSIFICATION	3.5812060442819724E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9989373516336423	WITHOUT_CLASSIFICATION	0.0010626483663577755	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9996944492183438	WITHOUT_CLASSIFICATION	3.055507816562276E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9989756039010387	WITHOUT_CLASSIFICATION	0.0010243960989613314	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9977163092966449	WITHOUT_CLASSIFICATION	0.0022836907033550844	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9977163092966449	WITHOUT_CLASSIFICATION	0.0022836907033550844	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995008741997919	WITHOUT_CLASSIFICATION	4.991258002081137E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999952148721103	WITHOUT_CLASSIFICATION	4.785127889745607E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9987354143362467	WITHOUT_CLASSIFICATION	0.0012645856637532905	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.99955183266089	WITHOUT_CLASSIFICATION	4.481673391099141E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997325941719305	WITHOUT_CLASSIFICATION	2.674058280694798E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999380976046462	WITHOUT_CLASSIFICATION	6.190239535375144E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999866674567288	WITHOUT_CLASSIFICATION	1.3332543271302733E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999995729607	WITHOUT_CLASSIFICATION	4.270393431674133E-10	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995756231955731	WITHOUT_CLASSIFICATION	4.243768044268702E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999710356745065	WITHOUT_CLASSIFICATION	2.8964325493493296E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999371866612473	WITHOUT_CLASSIFICATION	6.281333875273994E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998035672414571	WITHOUT_CLASSIFICATION	1.9643275854283243E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999974521941747	WITHOUT_CLASSIFICATION	2.547805825250382E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999990014806819	WITHOUT_CLASSIFICATION	9.985193180959942E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999999264697992	WITHOUT_CLASSIFICATION	7.353020079337751E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999910221499624	WITHOUT_CLASSIFICATION	8.977850037593294E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999401861779658	WITHOUT_CLASSIFICATION	5.981382203414811E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999940168686262	WITHOUT_CLASSIFICATION	5.983131373794681E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9991222118044757	WITHOUT_CLASSIFICATION	8.777881955242536E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999997022990388	WITHOUT_CLASSIFICATION	2.977009612849469E-7	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999978762902866	WITHOUT_CLASSIFICATION	2.123709713403492E-5	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999890156814	WITHOUT_CLASSIFICATION	1.0984318689744203E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997869452676632	WITHOUT_CLASSIFICATION	2.1305473233691082E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999952738212964	WITHOUT_CLASSIFICATION	4.726178703626325E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999624540401153	WITHOUT_CLASSIFICATION	3.754595988469256E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999624540401153	WITHOUT_CLASSIFICATION	3.754595988469256E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998702497199079	WITHOUT_CLASSIFICATION	1.297502800920701E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968452959260623	WITHOUT_CLASSIFICATION	0.0031547040739377846	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999954541476946	WITHOUT_CLASSIFICATION	4.545852305331041E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999964059219813	WITHOUT_CLASSIFICATION	3.594078018699393E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999890319610811	WITHOUT_CLASSIFICATION	1.0968038918883887E-5	IMPLEMENTATION
