//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999914147274189	WITHOUT_CLASSIFICATION	8.585272581088689E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999822226529553	WITHOUT_CLASSIFICATION	1.7777347044647664E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999845083502837	WITHOUT_CLASSIFICATION	1.549164971628546E-5	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999900115097444	WITHOUT_CLASSIFICATION	9.988490255530181E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999932197421517	WITHOUT_CLASSIFICATION	6.780257848278872E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999932197421517	WITHOUT_CLASSIFICATION	6.780257848278872E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999978379677368	WITHOUT_CLASSIFICATION	2.162032263287817E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982706552448	WITHOUT_CLASSIFICATION	1.729344755232105E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999977124510153	WITHOUT_CLASSIFICATION	2.287548984757967E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999849889190494	WITHOUT_CLASSIFICATION	1.5011080950598798E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999846402227183	WITHOUT_CLASSIFICATION	1.5359777281761883E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999846402227183	WITHOUT_CLASSIFICATION	1.5359777281761883E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.999984138834342	WITHOUT_CLASSIFICATION	1.5861165657992924E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999996374543824	WITHOUT_CLASSIFICATION	3.625456175953188E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999958266329513	WITHOUT_CLASSIFICATION	4.173367048787497E-6	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990757481083	WITHOUT_CLASSIFICATION	9.242518916099026E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999873554236	WITHOUT_CLASSIFICATION	1.2644576334801138E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999544360230392	WITHOUT_CLASSIFICATION	4.556397696070269E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999587305872327	WITHOUT_CLASSIFICATION	4.1269412767271454E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999501395309569	WITHOUT_CLASSIFICATION	4.9860469043043514E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999403460318596	WITHOUT_CLASSIFICATION	5.9653968140373E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998743053021029	WITHOUT_CLASSIFICATION	1.2569469789703013E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999406845886966	WITHOUT_CLASSIFICATION	5.931541130338123E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999177892901729	WITHOUT_CLASSIFICATION	8.22107098269706E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999925934851559	WITHOUT_CLASSIFICATION	7.406514844050656E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999930156818672	WITHOUT_CLASSIFICATION	6.984318132793691E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999930156818672	WITHOUT_CLASSIFICATION	6.984318132793691E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999991338398676	WITHOUT_CLASSIFICATION	8.661601325498283E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999706015887102	WITHOUT_CLASSIFICATION	2.939841128984532E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999979399395185	WITHOUT_CLASSIFICATION	2.06006048151638E-6	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994054412649	WITHOUT_CLASSIFICATION	5.945587351181552E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999963544384	WITHOUT_CLASSIFICATION	3.645561580034752E-9	TEST
/**	WITHOUT_CLASSIFICATION	0.999788494384449	WITHOUT_CLASSIFICATION	2.1150561555102353E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.999788494384449	WITHOUT_CLASSIFICATION	2.1150561555102353E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999973516065394	WITHOUT_CLASSIFICATION	2.6483934605703195E-6	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999547050491	WITHOUT_CLASSIFICATION	4.529495099727788E-8	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999642175221	WITHOUT_CLASSIFICATION	3.578247782049682E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999451390694245	WITHOUT_CLASSIFICATION	5.4860930575503665E-5	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999935908902432	WITHOUT_CLASSIFICATION	6.409109756744595E-6	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942700379039	WITHOUT_CLASSIFICATION	5.729962096225154E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891196505181	WITHOUT_CLASSIFICATION	1.0880349481964815E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999971797713629	WITHOUT_CLASSIFICATION	2.8202286370826168E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999190045872961	WITHOUT_CLASSIFICATION	8.099541270396798E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999604109572	WITHOUT_CLASSIFICATION	3.958904280764147E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9998998153082772	WITHOUT_CLASSIFICATION	1.001846917226728E-4	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999190045872961	WITHOUT_CLASSIFICATION	8.099541270396798E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9998998153082772	WITHOUT_CLASSIFICATION	1.001846917226728E-4	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999993868718231	WITHOUT_CLASSIFICATION	6.1312817689169445E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999999982206673	WITHOUT_CLASSIFICATION	1.7793327049045174E-8	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999942352487273	WITHOUT_CLASSIFICATION	5.764751272669528E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999997765284467	WITHOUT_CLASSIFICATION	2.23471553255671E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999127688776	WITHOUT_CLASSIFICATION	8.723112241781072E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999997909323547	WITHOUT_CLASSIFICATION	2.0906764529042215E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999986850582625	WITHOUT_CLASSIFICATION	1.3149417374933804E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999994566773576	WITHOUT_CLASSIFICATION	5.433226424044767E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999997264030364	WITHOUT_CLASSIFICATION	2.7359696365657273E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999704314397079	WITHOUT_CLASSIFICATION	2.9568560292113292E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999967362121601	WITHOUT_CLASSIFICATION	3.263787839772418E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999701194695667	WITHOUT_CLASSIFICATION	2.9880530433327207E-5	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999788615549	WITHOUT_CLASSIFICATION	2.1138445203518482E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999987303282776	WITHOUT_CLASSIFICATION	1.2696717223870623E-6	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999995212061482	WITHOUT_CLASSIFICATION	4.787938518201892E-7	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999470883238	WITHOUT_CLASSIFICATION	5.2911676192684465E-8	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999945970418964	WITHOUT_CLASSIFICATION	5.402958103556884E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999992181412719	WITHOUT_CLASSIFICATION	7.818587280162774E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998612945259	WITHOUT_CLASSIFICATION	1.3870547410234627E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999733047029	WITHOUT_CLASSIFICATION	2.6695297095692104E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999989427669878	WITHOUT_CLASSIFICATION	1.0572330121665696E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999656464108	WITHOUT_CLASSIFICATION	3.4353589190389373E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999988870903749	WITHOUT_CLASSIFICATION	1.1129096250814607E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962848704038	WITHOUT_CLASSIFICATION	3.7151295962106025E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999994564655462	WITHOUT_CLASSIFICATION	5.435344538779285E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999991298364185	WITHOUT_CLASSIFICATION	8.701635814128251E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998514945015	WITHOUT_CLASSIFICATION	1.485054983487283E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999998342492453	WITHOUT_CLASSIFICATION	1.657507547460945E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999530449859	WITHOUT_CLASSIFICATION	4.695501404270201E-8	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999756103684	WITHOUT_CLASSIFICATION	2.4389631732530154E-8	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999370468778	WITHOUT_CLASSIFICATION	6.29531221541438E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999973670235172	WITHOUT_CLASSIFICATION	2.63297648278405E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999994342958366	WITHOUT_CLASSIFICATION	5.657041633810889E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999970302812781	WITHOUT_CLASSIFICATION	2.969718721969101E-6	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999896998135466	WITHOUT_CLASSIFICATION	1.0300186453463083E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999555902124	WITHOUT_CLASSIFICATION	4.440978762067465E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999970302812781	WITHOUT_CLASSIFICATION	2.969718721969101E-6	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999663650537	WITHOUT_CLASSIFICATION	3.3634946373543766E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999995469664007	WITHOUT_CLASSIFICATION	4.530335993504853E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999880113601661	WITHOUT_CLASSIFICATION	1.198863983394477E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999830620102392	WITHOUT_CLASSIFICATION	1.6937989760709972E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999954921743559	WITHOUT_CLASSIFICATION	4.507825644109613E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987415435094	WITHOUT_CLASSIFICATION	1.2584564905916108E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987415435094	WITHOUT_CLASSIFICATION	1.2584564905916108E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999373253509384	WITHOUT_CLASSIFICATION	6.267464906167286E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999651730107	WITHOUT_CLASSIFICATION	3.4826989381487167E-8	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999863683762518	WITHOUT_CLASSIFICATION	1.3631623748386421E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999631199264	WITHOUT_CLASSIFICATION	3.688007359646115E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997768868125	WITHOUT_CLASSIFICATION	2.23113187481396E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999989986965545	WITHOUT_CLASSIFICATION	1.001303445485026E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999956406295845	WITHOUT_CLASSIFICATION	4.359370415492696E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.999996059682854	WITHOUT_CLASSIFICATION	3.940317146084093E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999989250254081	WITHOUT_CLASSIFICATION	1.0749745918635898E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999977742966053	WITHOUT_CLASSIFICATION	2.225703394739217E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993960009586	WITHOUT_CLASSIFICATION	6.039990414194085E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993960009586	WITHOUT_CLASSIFICATION	6.039990414194085E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999980499085666	WITHOUT_CLASSIFICATION	1.950091433514292E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999987169915957	WITHOUT_CLASSIFICATION	1.2830084043684088E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999973375603541	WITHOUT_CLASSIFICATION	2.6624396458418303E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993960009586	WITHOUT_CLASSIFICATION	6.039990414194085E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999980499085666	WITHOUT_CLASSIFICATION	1.950091433514292E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999980499085666	WITHOUT_CLASSIFICATION	1.950091433514292E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999990659139338	WITHOUT_CLASSIFICATION	9.340860661429891E-7	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.99999517998724	WITHOUT_CLASSIFICATION	4.820012760086773E-6	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996023542138	WITHOUT_CLASSIFICATION	3.976457862010987E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999975836680294	WITHOUT_CLASSIFICATION	2.416331970641516E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999755357406	WITHOUT_CLASSIFICATION	2.446425939836179E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999755357406	WITHOUT_CLASSIFICATION	2.446425939836179E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999862459840276	WITHOUT_CLASSIFICATION	1.375401597226354E-5	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999948256327357	WITHOUT_CLASSIFICATION	5.174367264266001E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999911106631877	WITHOUT_CLASSIFICATION	8.889336812370348E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999823747530086	WITHOUT_CLASSIFICATION	1.7625246991456352E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999823747530086	WITHOUT_CLASSIFICATION	1.7625246991456352E-5	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999829998107459	WITHOUT_CLASSIFICATION	1.700018925409282E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996173139188	WITHOUT_CLASSIFICATION	3.8268608114986386E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999984889804979	WITHOUT_CLASSIFICATION	1.5110195020234779E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999898957038	WITHOUT_CLASSIFICATION	1.0104296174170899E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999997509877218	WITHOUT_CLASSIFICATION	2.490122782531864E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999210349116	WITHOUT_CLASSIFICATION	7.896508840735773E-8	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999949476833624	WITHOUT_CLASSIFICATION	5.05231663760389E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999983405761387	WITHOUT_CLASSIFICATION	1.6594238612239288E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999680906022232	WITHOUT_CLASSIFICATION	3.1909397776696824E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999984889804979	WITHOUT_CLASSIFICATION	1.5110195020234779E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9998815047321743	WITHOUT_CLASSIFICATION	1.1849526782570162E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999867697222482	WITHOUT_CLASSIFICATION	1.3230277751706927E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999867697222482	WITHOUT_CLASSIFICATION	1.3230277751706927E-5	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999716592348	WITHOUT_CLASSIFICATION	2.834076525208882E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999999487782625	WITHOUT_CLASSIFICATION	5.122173758037544E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999609253832	WITHOUT_CLASSIFICATION	3.9074616821860724E-8	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999933160529013	WITHOUT_CLASSIFICATION	6.683947098773104E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999522870127999	WITHOUT_CLASSIFICATION	4.771298719999261E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999260697594342	WITHOUT_CLASSIFICATION	7.393024056571575E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999756148562616	WITHOUT_CLASSIFICATION	2.438514373835995E-5	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999996593143222	WITHOUT_CLASSIFICATION	3.406856778078238E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989116466433	WITHOUT_CLASSIFICATION	1.0883533566887411E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989116466433	WITHOUT_CLASSIFICATION	1.0883533566887411E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999914147274189	WITHOUT_CLASSIFICATION	8.585272581088689E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999983052695199	WITHOUT_CLASSIFICATION	1.6947304800875227E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999906917106957	WITHOUT_CLASSIFICATION	9.30828930430893E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999620091508417	WITHOUT_CLASSIFICATION	3.799084915830123E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999722402576606	WITHOUT_CLASSIFICATION	2.7759742339288462E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999805829193366	WITHOUT_CLASSIFICATION	1.9417080663410552E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999815457677901	WITHOUT_CLASSIFICATION	1.8454232209920874E-5	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999989473582143	WITHOUT_CLASSIFICATION	1.0526417856532085E-6	TEST
// new	WITHOUT_CLASSIFICATION	0.9999697848755668	WITHOUT_CLASSIFICATION	3.0215124433200602E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999670909674916	WITHOUT_CLASSIFICATION	3.2909032508445066E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999916814023698	WITHOUT_CLASSIFICATION	8.318597630186726E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999845083502837	WITHOUT_CLASSIFICATION	1.549164971628546E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999990339399993	WITHOUT_CLASSIFICATION	9.660600007005009E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999990339399993	WITHOUT_CLASSIFICATION	9.660600007005009E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.999984764868007	WITHOUT_CLASSIFICATION	1.5235131992879362E-5	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999995929113208	WITHOUT_CLASSIFICATION	4.0708867919313884E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999988985204389	WITHOUT_CLASSIFICATION	1.101479561113839E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999817469830474	WITHOUT_CLASSIFICATION	1.8253016952549237E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999916744394736	WITHOUT_CLASSIFICATION	8.32556052646313E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999953111944738	WITHOUT_CLASSIFICATION	4.688805526206597E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999932197421517	WITHOUT_CLASSIFICATION	6.780257848278872E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994561847023	WITHOUT_CLASSIFICATION	5.438152977075501E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999946437754012	WITHOUT_CLASSIFICATION	5.356224598802619E-5	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999913267322588	WITHOUT_CLASSIFICATION	8.67326774120453E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999994865131063	WITHOUT_CLASSIFICATION	5.134868937059174E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999730400829977	WITHOUT_CLASSIFICATION	2.6959917002390753E-5	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999843537272703	WITHOUT_CLASSIFICATION	1.5646272729703786E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999799172163245	WITHOUT_CLASSIFICATION	2.0082783675561946E-5	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999992269903154	WITHOUT_CLASSIFICATION	7.730096844664759E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999966944146392	WITHOUT_CLASSIFICATION	3.3055853606596875E-6	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.99999317647009	WITHOUT_CLASSIFICATION	6.823529909970671E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994302187852	WITHOUT_CLASSIFICATION	5.697812147571997E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999961446035651	WITHOUT_CLASSIFICATION	3.855396434860768E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999849762591307	WITHOUT_CLASSIFICATION	1.5023740869283608E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999670909674916	WITHOUT_CLASSIFICATION	3.2909032508445066E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999990339399993	WITHOUT_CLASSIFICATION	9.660600007005009E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999799172163245	WITHOUT_CLASSIFICATION	2.0082783675561946E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999978379677368	WITHOUT_CLASSIFICATION	2.162032263287817E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999960464164832	WITHOUT_CLASSIFICATION	3.9535835168642595E-6	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999962066343491	WITHOUT_CLASSIFICATION	3.7933656509097003E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999953951959794	WITHOUT_CLASSIFICATION	4.60480402064665E-6	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999758407868493	WITHOUT_CLASSIFICATION	2.415921315072182E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999985081048546	WITHOUT_CLASSIFICATION	1.4918951453542331E-6	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999834570991155	WITHOUT_CLASSIFICATION	1.654290088455296E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999929665713448	WITHOUT_CLASSIFICATION	7.033428655119262E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9998748048231882	WITHOUT_CLASSIFICATION	1.2519517681168528E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999964361214273	WITHOUT_CLASSIFICATION	3.563878572759097E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999878749974149	WITHOUT_CLASSIFICATION	1.2125002585154574E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999878749974149	WITHOUT_CLASSIFICATION	1.2125002585154574E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999940802710925	WITHOUT_CLASSIFICATION	5.919728907425543E-6	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999998082016357	WITHOUT_CLASSIFICATION	1.917983643058208E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999965847445663	WITHOUT_CLASSIFICATION	3.41525543360403E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999826161032236	WITHOUT_CLASSIFICATION	1.7383896776401377E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999955736630454	WITHOUT_CLASSIFICATION	4.4263369545713876E-6	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999969183727421	WITHOUT_CLASSIFICATION	3.081627258068539E-6	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999861405266801	WITHOUT_CLASSIFICATION	1.3859473319819595E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982706552448	WITHOUT_CLASSIFICATION	1.729344755232105E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999752670252523	WITHOUT_CLASSIFICATION	2.4732974747595386E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999958415726122	WITHOUT_CLASSIFICATION	4.158427387689587E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999958415726122	WITHOUT_CLASSIFICATION	4.158427387689587E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999961691189935	WITHOUT_CLASSIFICATION	3.830881006614841E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.99999743977555	WITHOUT_CLASSIFICATION	2.5602244500744187E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999966489969951	WITHOUT_CLASSIFICATION	3.3510030048460996E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999992059933035	WITHOUT_CLASSIFICATION	7.940066965707779E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999750801217311	WITHOUT_CLASSIFICATION	2.4919878268866203E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999835642063027	WITHOUT_CLASSIFICATION	1.643579369729189E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999670909674916	WITHOUT_CLASSIFICATION	3.2909032508445066E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999845083502837	WITHOUT_CLASSIFICATION	1.549164971628546E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999799172163245	WITHOUT_CLASSIFICATION	2.0082783675561946E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999799172163245	WITHOUT_CLASSIFICATION	2.0082783675561946E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983713484178	WITHOUT_CLASSIFICATION	1.6286515821667942E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983713484178	WITHOUT_CLASSIFICATION	1.6286515821667942E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999906457324589	WITHOUT_CLASSIFICATION	9.35426754105558E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999921524200728	WITHOUT_CLASSIFICATION	7.847579927233322E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999921524200728	WITHOUT_CLASSIFICATION	7.847579927233322E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999757073798895	WITHOUT_CLASSIFICATION	2.429262011054336E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999674947931209	WITHOUT_CLASSIFICATION	3.250520687918497E-5	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999889577354663	WITHOUT_CLASSIFICATION	1.1042264533680585E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999961433470933	WITHOUT_CLASSIFICATION	3.8566529066524304E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999973150967804	WITHOUT_CLASSIFICATION	2.6849032196168897E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999849889190494	WITHOUT_CLASSIFICATION	1.5011080950598798E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999849889190494	WITHOUT_CLASSIFICATION	1.5011080950598798E-5	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999773796654	WITHOUT_CLASSIFICATION	2.2620334600024093E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999943077386866	WITHOUT_CLASSIFICATION	5.6922613134300304E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999883016793571	WITHOUT_CLASSIFICATION	1.1698320642786374E-5	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999640041057174	WITHOUT_CLASSIFICATION	3.5995894282612186E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999817231168662	WITHOUT_CLASSIFICATION	1.827688313386697E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999804811612817	WITHOUT_CLASSIFICATION	1.9518838718302934E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999846402227183	WITHOUT_CLASSIFICATION	1.5359777281761883E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999820057138763	WITHOUT_CLASSIFICATION	1.7994286123764046E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999820057138763	WITHOUT_CLASSIFICATION	1.7994286123764046E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.999984138834342	WITHOUT_CLASSIFICATION	1.5861165657992924E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.999984138834342	WITHOUT_CLASSIFICATION	1.5861165657992924E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999650902225113	WITHOUT_CLASSIFICATION	3.490977748857677E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999650902225113	WITHOUT_CLASSIFICATION	3.490977748857677E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999947488962031	WITHOUT_CLASSIFICATION	5.251103796880369E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999947488962031	WITHOUT_CLASSIFICATION	5.251103796880369E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999849889190494	WITHOUT_CLASSIFICATION	1.5011080950598798E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999846402227183	WITHOUT_CLASSIFICATION	1.5359777281761883E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999820057138763	WITHOUT_CLASSIFICATION	1.7994286123764046E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999820057138763	WITHOUT_CLASSIFICATION	1.7994286123764046E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.999984138834342	WITHOUT_CLASSIFICATION	1.5861165657992924E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999650902225113	WITHOUT_CLASSIFICATION	3.490977748857677E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999650902225113	WITHOUT_CLASSIFICATION	3.490977748857677E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999947488962031	WITHOUT_CLASSIFICATION	5.251103796880369E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999941169347007	WITHOUT_CLASSIFICATION	5.883065299302069E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999397777901653	WITHOUT_CLASSIFICATION	6.0222209834745026E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.999988035817096	WITHOUT_CLASSIFICATION	1.1964182904038723E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999991261611685	WITHOUT_CLASSIFICATION	8.738388315984292E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999781076849794	WITHOUT_CLASSIFICATION	2.1892315020693176E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999750305914592	WITHOUT_CLASSIFICATION	2.496940854071617E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999989778308215	WITHOUT_CLASSIFICATION	1.0221691785308346E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999995946948533	WITHOUT_CLASSIFICATION	4.053051466350275E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999995744463146	WITHOUT_CLASSIFICATION	4.2555368549830156E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998889125468	WITHOUT_CLASSIFICATION	1.1108745320143739E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999969096447024	WITHOUT_CLASSIFICATION	3.0903552975567895E-6	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999914614852085	WITHOUT_CLASSIFICATION	8.538514791577058E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999373253509384	WITHOUT_CLASSIFICATION	6.267464906167286E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999750305914592	WITHOUT_CLASSIFICATION	2.496940854071617E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998194784574047	WITHOUT_CLASSIFICATION	1.8052154259528506E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998194784574047	WITHOUT_CLASSIFICATION	1.8052154259528506E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999993943198252	WITHOUT_CLASSIFICATION	6.056801747021673E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994051692075	WITHOUT_CLASSIFICATION	5.948307925689241E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994051692075	WITHOUT_CLASSIFICATION	5.948307925689241E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999992127774074	WITHOUT_CLASSIFICATION	7.872225924524652E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999988584879788	WITHOUT_CLASSIFICATION	1.141512021319205E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999988039641521	WITHOUT_CLASSIFICATION	1.19603584793317E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999983028484242	WITHOUT_CLASSIFICATION	1.6971515759034555E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999983028484242	WITHOUT_CLASSIFICATION	1.6971515759034555E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999873554236	WITHOUT_CLASSIFICATION	1.2644576334801138E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999867389289	WITHOUT_CLASSIFICATION	1.326107115347747E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999867389289	WITHOUT_CLASSIFICATION	1.326107115347747E-8	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999995777342156	WITHOUT_CLASSIFICATION	4.2226578448278484E-7	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999924658769529	WITHOUT_CLASSIFICATION	7.534123047128334E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999909192666554	WITHOUT_CLASSIFICATION	9.08073334450761E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999474239871976	WITHOUT_CLASSIFICATION	5.2576012802318524E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999685160751101	WITHOUT_CLASSIFICATION	3.1483924889941865E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.999929680810543	WITHOUT_CLASSIFICATION	7.031918945697047E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999544360230392	WITHOUT_CLASSIFICATION	4.556397696070269E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999270907310069	WITHOUT_CLASSIFICATION	7.290926899304587E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.999968210605364	WITHOUT_CLASSIFICATION	3.1789394636036675E-5	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999529500697582	WITHOUT_CLASSIFICATION	4.7049930241913274E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999940983333542	WITHOUT_CLASSIFICATION	5.901666645793014E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999403460318596	WITHOUT_CLASSIFICATION	5.9653968140373E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999938948696521	WITHOUT_CLASSIFICATION	6.105130347864451E-6	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999238190458	WITHOUT_CLASSIFICATION	7.618095421034795E-7	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999997824755956	WITHOUT_CLASSIFICATION	2.175244043641625E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999403460318596	WITHOUT_CLASSIFICATION	5.9653968140373E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999990891062132	WITHOUT_CLASSIFICATION	9.108937867948686E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999995907947589	WITHOUT_CLASSIFICATION	4.0920524111523956E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999347234834293	WITHOUT_CLASSIFICATION	6.527651657073014E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999674133534601	WITHOUT_CLASSIFICATION	3.258664653988294E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999299864111446	WITHOUT_CLASSIFICATION	7.001358885531494E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999513655675872	WITHOUT_CLASSIFICATION	4.863443241271983E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999413659748088	WITHOUT_CLASSIFICATION	5.8634025191090514E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999177892901729	WITHOUT_CLASSIFICATION	8.22107098269706E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999365306748824	WITHOUT_CLASSIFICATION	6.346932511748724E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999925934851559	WITHOUT_CLASSIFICATION	7.406514844050656E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999697727761074	WITHOUT_CLASSIFICATION	3.022722389264152E-5	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999852923616201	WITHOUT_CLASSIFICATION	1.4707638379808086E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999439908950716	WITHOUT_CLASSIFICATION	5.600910492842204E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999544360230392	WITHOUT_CLASSIFICATION	4.556397696070269E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999365306748824	WITHOUT_CLASSIFICATION	6.346932511748724E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999697727761074	WITHOUT_CLASSIFICATION	3.022722389264152E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999439908950716	WITHOUT_CLASSIFICATION	5.600910492842204E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999978360702305	WITHOUT_CLASSIFICATION	2.163929769556967E-6	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999403082574362	WITHOUT_CLASSIFICATION	5.969174256373647E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999980362198571	WITHOUT_CLASSIFICATION	1.963780142987063E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999930156818672	WITHOUT_CLASSIFICATION	6.984318132793691E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999294853829983	WITHOUT_CLASSIFICATION	7.051461700165712E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999882232198147	WITHOUT_CLASSIFICATION	1.177678018537315E-5	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999674840807603	WITHOUT_CLASSIFICATION	3.251591923975769E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999996753636728	WITHOUT_CLASSIFICATION	3.2463632710888015E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999141214113784	WITHOUT_CLASSIFICATION	8.58785886215458E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998310660775	WITHOUT_CLASSIFICATION	1.689339225742932E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996951356146	WITHOUT_CLASSIFICATION	3.048643853431672E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999985772692034	WITHOUT_CLASSIFICATION	1.4227307967001473E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999996543524867	WITHOUT_CLASSIFICATION	3.456475132830619E-7	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997386603525	WITHOUT_CLASSIFICATION	2.6133964738126824E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999314471901158	WITHOUT_CLASSIFICATION	6.855280988411255E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999291698724486	WITHOUT_CLASSIFICATION	7.083012755133162E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999706015887102	WITHOUT_CLASSIFICATION	2.939841128984532E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999998629728056	WITHOUT_CLASSIFICATION	1.3702719440131848E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999629952032147	WITHOUT_CLASSIFICATION	3.7004796785230846E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999365306748824	WITHOUT_CLASSIFICATION	6.346932511748724E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999979852221915	WITHOUT_CLASSIFICATION	2.0147778083954815E-6	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999960482487878	WITHOUT_CLASSIFICATION	3.9517512121105595E-6	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999890002822958	WITHOUT_CLASSIFICATION	1.0999717704219254E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999994632042112	WITHOUT_CLASSIFICATION	5.367957887843999E-7	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999950593130694	WITHOUT_CLASSIFICATION	4.940686930596381E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999986149437936	WITHOUT_CLASSIFICATION	1.3850562064222233E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996699681253	WITHOUT_CLASSIFICATION	3.300318747407159E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999998988615305	WITHOUT_CLASSIFICATION	1.0113846949804505E-6	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999152416584602	WITHOUT_CLASSIFICATION	8.475834153977113E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999135290124266	WITHOUT_CLASSIFICATION	8.647098757343865E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999336029507367	WITHOUT_CLASSIFICATION	6.639704926327199E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999362397493383	WITHOUT_CLASSIFICATION	6.376025066166165E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999992848773164	WITHOUT_CLASSIFICATION	7.151226835830662E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994054412649	WITHOUT_CLASSIFICATION	5.945587351181552E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999935309494001	WITHOUT_CLASSIFICATION	6.469050599908006E-6	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999986415719799	WITHOUT_CLASSIFICATION	1.3584280201050609E-6	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999779120530673	WITHOUT_CLASSIFICATION	2.2087946932715275E-5	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999847083424616	WITHOUT_CLASSIFICATION	1.5291657538433464E-5	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999790684686646	WITHOUT_CLASSIFICATION	2.0931531335541232E-5	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999962610581057	WITHOUT_CLASSIFICATION	3.738941894334858E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999497706137	WITHOUT_CLASSIFICATION	5.022938637961333E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999997268919587	WITHOUT_CLASSIFICATION	2.731080413222047E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999918790699053	WITHOUT_CLASSIFICATION	8.120930094762008E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999847899417682	WITHOUT_CLASSIFICATION	1.5210058231661675E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999808308585371	WITHOUT_CLASSIFICATION	1.916914146297517E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999808308585371	WITHOUT_CLASSIFICATION	1.916914146297517E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999689351893146	WITHOUT_CLASSIFICATION	3.10648106852845E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999951472341889	WITHOUT_CLASSIFICATION	4.852765811057631E-6	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999888057220144	WITHOUT_CLASSIFICATION	1.1194277985593512E-5	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999935373766231	WITHOUT_CLASSIFICATION	6.462623376939858E-6	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999724887510494	WITHOUT_CLASSIFICATION	2.7511248950723563E-5	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999511268607196	WITHOUT_CLASSIFICATION	4.887313928038122E-5	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999965269155862	WITHOUT_CLASSIFICATION	3.4730844139843373E-6	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997688526155	WITHOUT_CLASSIFICATION	2.3114738453635504E-7	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999697847848491	WITHOUT_CLASSIFICATION	3.0215215150896642E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999974558606792	WITHOUT_CLASSIFICATION	2.544139320803269E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999672930171493	WITHOUT_CLASSIFICATION	3.270698285084323E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999970453377234	WITHOUT_CLASSIFICATION	2.9546622765946428E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999996996598708	WITHOUT_CLASSIFICATION	3.00340129192531E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999942891659271	WITHOUT_CLASSIFICATION	5.7108340727575706E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428479222163	WITHOUT_CLASSIFICATION	5.715207778364793E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665597764825	WITHOUT_CLASSIFICATION	3.3440223517455675E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998867366394	WITHOUT_CLASSIFICATION	1.1326336053565339E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999987293173315	WITHOUT_CLASSIFICATION	1.2706826685313747E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999988235303272	WITHOUT_CLASSIFICATION	1.1764696728318803E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999956234790665	WITHOUT_CLASSIFICATION	4.3765209335738165E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999622189515339	WITHOUT_CLASSIFICATION	3.7781048466148436E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999622189515339	WITHOUT_CLASSIFICATION	3.7781048466148436E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9998703812810361	WITHOUT_CLASSIFICATION	1.2961871896396152E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9998703812810361	WITHOUT_CLASSIFICATION	1.2961871896396152E-4	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999918790699053	WITHOUT_CLASSIFICATION	8.120930094762008E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999863876063158	WITHOUT_CLASSIFICATION	1.3612393684181317E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999880480413924	WITHOUT_CLASSIFICATION	1.1951958607727795E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999951936323833	WITHOUT_CLASSIFICATION	4.8063676166639126E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999880480413924	WITHOUT_CLASSIFICATION	1.1951958607727795E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999951936323833	WITHOUT_CLASSIFICATION	4.8063676166639126E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998920924615913	WITHOUT_CLASSIFICATION	1.0790753840869386E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999957173022965	WITHOUT_CLASSIFICATION	4.282697703476607E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999952005831967	WITHOUT_CLASSIFICATION	4.799416803277546E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999975937441733	WITHOUT_CLASSIFICATION	2.4062558266354257E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999989421932763	WITHOUT_CLASSIFICATION	1.057806723714956E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999981248391873	WITHOUT_CLASSIFICATION	1.8751608127349195E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999968681325968	WITHOUT_CLASSIFICATION	3.1318674032990438E-6	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999894824556562	WITHOUT_CLASSIFICATION	1.0517544343699725E-5	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999897465832149	WITHOUT_CLASSIFICATION	1.0253416785120891E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998370464459	WITHOUT_CLASSIFICATION	1.629535540514581E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999994817738888	WITHOUT_CLASSIFICATION	5.182261111574312E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997246393239	WITHOUT_CLASSIFICATION	2.7536067618776636E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999963998666057	WITHOUT_CLASSIFICATION	3.600133394328806E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999897339650583	WITHOUT_CLASSIFICATION	1.0266034941693153E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999896110761585	WITHOUT_CLASSIFICATION	1.0388923841465399E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999308196992592	WITHOUT_CLASSIFICATION	6.918030074082924E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999308196992592	WITHOUT_CLASSIFICATION	6.918030074082924E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999997518531655	WITHOUT_CLASSIFICATION	2.4814683454334767E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998920924615913	WITHOUT_CLASSIFICATION	1.0790753840869386E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999939789614657	WITHOUT_CLASSIFICATION	6.021038534338922E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999999204315086	WITHOUT_CLASSIFICATION	7.956849144992852E-8	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999985886318175	WITHOUT_CLASSIFICATION	1.4113681825011692E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999962010024476	WITHOUT_CLASSIFICATION	3.798997552316895E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999919689830252	WITHOUT_CLASSIFICATION	8.031016974776812E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998920924615913	WITHOUT_CLASSIFICATION	1.0790753840869386E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999962010024476	WITHOUT_CLASSIFICATION	3.798997552316895E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999919689830252	WITHOUT_CLASSIFICATION	8.031016974776812E-6	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999937934105895	WITHOUT_CLASSIFICATION	6.206589410580847E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999594377368659	WITHOUT_CLASSIFICATION	4.0562263133999E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999985739962131	WITHOUT_CLASSIFICATION	1.426003786961942E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998920924615913	WITHOUT_CLASSIFICATION	1.0790753840869386E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998920924615913	WITHOUT_CLASSIFICATION	1.0790753840869386E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999567669594306	WITHOUT_CLASSIFICATION	4.323304056935662E-5	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999766401417665	WITHOUT_CLASSIFICATION	2.335985823363864E-5	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999783224168597	WITHOUT_CLASSIFICATION	2.1677583140254098E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999853067136169	WITHOUT_CLASSIFICATION	1.4693286383003086E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999731980938045	WITHOUT_CLASSIFICATION	2.6801906195559936E-5	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999977541506253	WITHOUT_CLASSIFICATION	2.245849374759306E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999999612447457	WITHOUT_CLASSIFICATION	3.875525429559651E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999994252300107	WITHOUT_CLASSIFICATION	5.747699893050673E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999990761320938	WITHOUT_CLASSIFICATION	9.238679061174599E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999657445910982	WITHOUT_CLASSIFICATION	3.425540890178373E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999986624169827	WITHOUT_CLASSIFICATION	1.3375830172480807E-6	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999983599607671	WITHOUT_CLASSIFICATION	1.6400392328101548E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999996828208848	WITHOUT_CLASSIFICATION	3.1717911526115805E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999999100407824	WITHOUT_CLASSIFICATION	8.995921759638784E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924287283578	WITHOUT_CLASSIFICATION	7.571271642236964E-6	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999122484692	WITHOUT_CLASSIFICATION	8.775153083000915E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999451390694245	WITHOUT_CLASSIFICATION	5.4860930575503665E-5	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999987274097044	WITHOUT_CLASSIFICATION	1.2725902956005625E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999863481630292	WITHOUT_CLASSIFICATION	1.3651836970818778E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999998577121473	WITHOUT_CLASSIFICATION	1.422878526969987E-6	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999819008309053	WITHOUT_CLASSIFICATION	1.8099169094691283E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998690056322312	WITHOUT_CLASSIFICATION	1.309943677687842E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998690056322312	WITHOUT_CLASSIFICATION	1.309943677687842E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999451390694245	WITHOUT_CLASSIFICATION	5.4860930575503665E-5	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999995493086451	WITHOUT_CLASSIFICATION	4.506913548549832E-7	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999997128393465	WITHOUT_CLASSIFICATION	2.871606535606436E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999926769826469	WITHOUT_CLASSIFICATION	7.3230173530526E-6	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999977367564091	WITHOUT_CLASSIFICATION	2.2632435909017266E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999507051168316	WITHOUT_CLASSIFICATION	4.92948831683978E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999993542119022	WITHOUT_CLASSIFICATION	6.457880976910837E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998118810491	WITHOUT_CLASSIFICATION	1.881189508906153E-7	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999979754290372	WITHOUT_CLASSIFICATION	2.024570962724539E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999376934607	WITHOUT_CLASSIFICATION	6.230653926870532E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999976441620957	WITHOUT_CLASSIFICATION	2.355837904296076E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995362619613	WITHOUT_CLASSIFICATION	4.6373803876779987E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999940421464202	WITHOUT_CLASSIFICATION	5.95785357987998E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999356610255795	WITHOUT_CLASSIFICATION	6.433897442043008E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999989202445944	WITHOUT_CLASSIFICATION	1.0797554056295373E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996280159513	WITHOUT_CLASSIFICATION	3.719840487222302E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999927535524757	WITHOUT_CLASSIFICATION	7.246447524214252E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999580088035	WITHOUT_CLASSIFICATION	4.199119650235229E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999874550543459	WITHOUT_CLASSIFICATION	1.2544945654104025E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964723337827	WITHOUT_CLASSIFICATION	3.5276662171496227E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999982655866535	WITHOUT_CLASSIFICATION	1.7344133464148776E-6	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999998588217987	WITHOUT_CLASSIFICATION	1.4117820129635143E-6	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999988270830202	WITHOUT_CLASSIFICATION	1.1729169798487013E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976276539034	WITHOUT_CLASSIFICATION	2.372346096620023E-6	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961320447117	WITHOUT_CLASSIFICATION	3.867955288381304E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732071304341	WITHOUT_CLASSIFICATION	2.6792869565937722E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945959484924	WITHOUT_CLASSIFICATION	5.4040515076018305E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725942028975	WITHOUT_CLASSIFICATION	2.7405797102452155E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725533359743	WITHOUT_CLASSIFICATION	2.7446664025603293E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672770924571	WITHOUT_CLASSIFICATION	3.272290754290165E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999862448390441	WITHOUT_CLASSIFICATION	1.3755160955878132E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999962910730447	WITHOUT_CLASSIFICATION	3.7089269553598626E-6	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999970964229863	WITHOUT_CLASSIFICATION	2.903577013808021E-6	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910540348171	WITHOUT_CLASSIFICATION	8.945965182801641E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937366759334	WITHOUT_CLASSIFICATION	6.263324066614407E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974361441434	WITHOUT_CLASSIFICATION	2.563855856589941E-6	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940934347575	WITHOUT_CLASSIFICATION	5.906565242492078E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944849505796	WITHOUT_CLASSIFICATION	5.515049420406325E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963226255022	WITHOUT_CLASSIFICATION	3.677374497670295E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915509559931	WITHOUT_CLASSIFICATION	8.449044006850947E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647249055138	WITHOUT_CLASSIFICATION	3.527509448612737E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999968660014704	WITHOUT_CLASSIFICATION	3.133998529492334E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930035930816	WITHOUT_CLASSIFICATION	6.996406918266777E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999997738570308	WITHOUT_CLASSIFICATION	2.261429692704032E-7	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999993053014692	WITHOUT_CLASSIFICATION	6.946985308455214E-7	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999476743364	WITHOUT_CLASSIFICATION	5.232566351527778E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999979675661581	WITHOUT_CLASSIFICATION	2.032433841894287E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999076986120624	WITHOUT_CLASSIFICATION	9.230138793759411E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999968182834386	WITHOUT_CLASSIFICATION	3.1817165613576277E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999928330540575	WITHOUT_CLASSIFICATION	7.166945942376184E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999422061829666	WITHOUT_CLASSIFICATION	5.779381703349067E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999352659589092	WITHOUT_CLASSIFICATION	6.473404109071696E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.99993184889053	WITHOUT_CLASSIFICATION	6.815110947002014E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998775461837396	WITHOUT_CLASSIFICATION	1.2245381626034487E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999264167273538	WITHOUT_CLASSIFICATION	7.358327264612279E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999989495777674	WITHOUT_CLASSIFICATION	1.050422232629471E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999983556841481	WITHOUT_CLASSIFICATION	1.6443158519408472E-6	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999959580857323	WITHOUT_CLASSIFICATION	4.041914267718766E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998832474045567	WITHOUT_CLASSIFICATION	1.1675259544327467E-4	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999992746343047	WITHOUT_CLASSIFICATION	7.253656952193925E-7	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839821545637	WITHOUT_CLASSIFICATION	1.6017845436207413E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992107402247	WITHOUT_CLASSIFICATION	7.892597753034614E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970026334825	WITHOUT_CLASSIFICATION	2.997366517502931E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905933715659	WITHOUT_CLASSIFICATION	9.406628434163695E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999939576194796	WITHOUT_CLASSIFICATION	6.0423805204775085E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999995509315053	WITHOUT_CLASSIFICATION	4.49068494717358E-7	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999991674020999	WITHOUT_CLASSIFICATION	8.325979000044022E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994667738837	WITHOUT_CLASSIFICATION	5.332261161881694E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959529958098	WITHOUT_CLASSIFICATION	4.047004190216702E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999975726928766	WITHOUT_CLASSIFICATION	2.4273071234465356E-6	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999995534740101	WITHOUT_CLASSIFICATION	4.465259898398489E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999978707161062	WITHOUT_CLASSIFICATION	2.129283893662377E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999995712957003	WITHOUT_CLASSIFICATION	4.287042997349839E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999999735301368	WITHOUT_CLASSIFICATION	2.6469863195954623E-7	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996092072747	WITHOUT_CLASSIFICATION	3.907927252605001E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999997365313255	WITHOUT_CLASSIFICATION	2.634686745630496E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999974615398473	WITHOUT_CLASSIFICATION	2.538460152674663E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999979675661581	WITHOUT_CLASSIFICATION	2.032433841894287E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998987975816	WITHOUT_CLASSIFICATION	1.0120241844401225E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999997311375081	WITHOUT_CLASSIFICATION	2.6886249202293927E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999990653701955	WITHOUT_CLASSIFICATION	9.346298046111382E-7	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991655196617	WITHOUT_CLASSIFICATION	8.344803381846964E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999981272965676	WITHOUT_CLASSIFICATION	1.8727034324351524E-6	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999925476771075	WITHOUT_CLASSIFICATION	7.452322892510665E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999775773406283	WITHOUT_CLASSIFICATION	2.2422659371657365E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999995462574455	WITHOUT_CLASSIFICATION	4.5374255457770483E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999994494376278	WITHOUT_CLASSIFICATION	5.505623722406313E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999989201951065	WITHOUT_CLASSIFICATION	1.0798048935571386E-6	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999985600228236	WITHOUT_CLASSIFICATION	1.4399771764597652E-6	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999987181375543	WITHOUT_CLASSIFICATION	1.2818624457324489E-6	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999985824210925	WITHOUT_CLASSIFICATION	1.4175789073799233E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998826432586	WITHOUT_CLASSIFICATION	1.1735674140355439E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999029644188	WITHOUT_CLASSIFICATION	9.703558125067434E-8	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999997367062209	WITHOUT_CLASSIFICATION	2.632937791065916E-6	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999875122702374	WITHOUT_CLASSIFICATION	1.248772976259036E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995513816319	WITHOUT_CLASSIFICATION	4.486183681677535E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999836841731888	WITHOUT_CLASSIFICATION	1.6315826811171847E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999809896673787	WITHOUT_CLASSIFICATION	1.9010332621393308E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999967633396543	WITHOUT_CLASSIFICATION	3.2366603456596086E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999905538193274	WITHOUT_CLASSIFICATION	9.446180672512006E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999982330961514	WITHOUT_CLASSIFICATION	1.766903848632319E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999909210799296	WITHOUT_CLASSIFICATION	9.078920070449072E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999990500404837	WITHOUT_CLASSIFICATION	9.499595161961602E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999775206571002	WITHOUT_CLASSIFICATION	2.2479342899702206E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998743053021029	WITHOUT_CLASSIFICATION	1.2569469789703013E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999693534446226	WITHOUT_CLASSIFICATION	3.064655537742148E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999647309767801	WITHOUT_CLASSIFICATION	3.526902322002347E-5	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999453335637	WITHOUT_CLASSIFICATION	5.466643629761407E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999979675661581	WITHOUT_CLASSIFICATION	2.032433841894287E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999998520633206	WITHOUT_CLASSIFICATION	1.4793667939448197E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999591487165	WITHOUT_CLASSIFICATION	4.085128352530758E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998837438645	WITHOUT_CLASSIFICATION	1.1625613547672763E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999979675661581	WITHOUT_CLASSIFICATION	2.032433841894287E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999987506504916	WITHOUT_CLASSIFICATION	1.2493495084123026E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999967633396543	WITHOUT_CLASSIFICATION	3.2366603456596086E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999941320423267	WITHOUT_CLASSIFICATION	5.867957673229051E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999950002372195	WITHOUT_CLASSIFICATION	4.999762780397696E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999925190446	WITHOUT_CLASSIFICATION	7.48095541551058E-9	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999989201951065	WITHOUT_CLASSIFICATION	1.0798048935571386E-6	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999985600228236	WITHOUT_CLASSIFICATION	1.4399771764597652E-6	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999987181375543	WITHOUT_CLASSIFICATION	1.2818624457324489E-6	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999993543944555	WITHOUT_CLASSIFICATION	6.456055445051175E-7	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999942700504825	WITHOUT_CLASSIFICATION	5.7299495176258175E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999945474756249	WITHOUT_CLASSIFICATION	5.4525243751464875E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999996961274391	WITHOUT_CLASSIFICATION	3.0387256085888194E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999997813596085	WITHOUT_CLASSIFICATION	2.1864039135477966E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999979675661581	WITHOUT_CLASSIFICATION	2.032433841894287E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999985824210925	WITHOUT_CLASSIFICATION	1.4175789073799233E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998826432586	WITHOUT_CLASSIFICATION	1.1735674140355439E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990967598412	WITHOUT_CLASSIFICATION	9.032401587894582E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984470793969	WITHOUT_CLASSIFICATION	1.5529206030274113E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999844173432715	WITHOUT_CLASSIFICATION	1.5582656728523018E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999979312413075	WITHOUT_CLASSIFICATION	2.068758692477636E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999997940897179	WITHOUT_CLASSIFICATION	2.0591028211506434E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999996982484158	WITHOUT_CLASSIFICATION	3.017515841708069E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647249055138	WITHOUT_CLASSIFICATION	3.527509448612737E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999972548321128	WITHOUT_CLASSIFICATION	2.7451678871789417E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999982849396901	WITHOUT_CLASSIFICATION	1.7150603098646589E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999901036260596	WITHOUT_CLASSIFICATION	9.896373940434708E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999993892052303	WITHOUT_CLASSIFICATION	6.107947697404097E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999956666116878	WITHOUT_CLASSIFICATION	4.333388312155262E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725942028975	WITHOUT_CLASSIFICATION	2.7405797102452155E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725533359743	WITHOUT_CLASSIFICATION	2.7446664025603293E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937366759334	WITHOUT_CLASSIFICATION	6.263324066614407E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999956666116878	WITHOUT_CLASSIFICATION	4.333388312155262E-6	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999992144562135	WITHOUT_CLASSIFICATION	7.855437864882259E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999405036165	WITHOUT_CLASSIFICATION	5.949638350562447E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963021250646	WITHOUT_CLASSIFICATION	3.6978749354553035E-6	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999215802208	WITHOUT_CLASSIFICATION	7.841977920115298E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998837119934	WITHOUT_CLASSIFICATION	1.1628800666184499E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998594204053027	WITHOUT_CLASSIFICATION	1.405795946972268E-4	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974361441434	WITHOUT_CLASSIFICATION	2.563855856589941E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963226255022	WITHOUT_CLASSIFICATION	3.677374497670295E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999995712957003	WITHOUT_CLASSIFICATION	4.287042997349839E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999999541816923	WITHOUT_CLASSIFICATION	4.581830770604719E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999990914783633	WITHOUT_CLASSIFICATION	9.085216366980301E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998140350161	WITHOUT_CLASSIFICATION	1.8596498381052204E-7	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999980690655835	WITHOUT_CLASSIFICATION	1.930934416483604E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997606030823	WITHOUT_CLASSIFICATION	2.3939691782377864E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999959300714718	WITHOUT_CLASSIFICATION	4.069928528225977E-6	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999889792991716	WITHOUT_CLASSIFICATION	1.10207008283173E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999376934607	WITHOUT_CLASSIFICATION	6.230653926870532E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999982165248293	WITHOUT_CLASSIFICATION	1.7834751707038783E-6	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999996552955501	WITHOUT_CLASSIFICATION	3.4470444986211543E-7	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999952640773807	WITHOUT_CLASSIFICATION	4.735922619341189E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999964859309148	WITHOUT_CLASSIFICATION	3.514069085066556E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999946012284264	WITHOUT_CLASSIFICATION	5.398771573546449E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999758011625898	WITHOUT_CLASSIFICATION	2.4198837410311827E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982983433062	WITHOUT_CLASSIFICATION	1.7016566937502608E-6	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995122521278	WITHOUT_CLASSIFICATION	4.877478721041868E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999735006236	WITHOUT_CLASSIFICATION	2.6499376399715033E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999929857853009	WITHOUT_CLASSIFICATION	7.0142146990969994E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999902606370635	WITHOUT_CLASSIFICATION	9.739362936583684E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977088728844	WITHOUT_CLASSIFICATION	2.291127115688521E-6	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982236407693	WITHOUT_CLASSIFICATION	1.7763592306936962E-6	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980212456344	WITHOUT_CLASSIFICATION	1.9787543655522506E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984948219852	WITHOUT_CLASSIFICATION	1.5051780147722745E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999955355371625	WITHOUT_CLASSIFICATION	4.464462837536831E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999828154564404	WITHOUT_CLASSIFICATION	1.7184543559612122E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985334618817	WITHOUT_CLASSIFICATION	1.4665381182774025E-6	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999933988968406	WITHOUT_CLASSIFICATION	6.601103159410206E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998671697534	WITHOUT_CLASSIFICATION	1.3283024659573626E-6	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951471552543	WITHOUT_CLASSIFICATION	4.852844745777467E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999977860348623	WITHOUT_CLASSIFICATION	2.2139651376730943E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999996988600602	WITHOUT_CLASSIFICATION	3.011399397576719E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999992887328879	WITHOUT_CLASSIFICATION	7.112671122333594E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999923543870783	WITHOUT_CLASSIFICATION	7.645612921617908E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999720618245899	WITHOUT_CLASSIFICATION	2.793817541011491E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999757197965152	WITHOUT_CLASSIFICATION	2.428020348467174E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999991328819542	WITHOUT_CLASSIFICATION	8.671180458248448E-7	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996538728739	WITHOUT_CLASSIFICATION	3.4612712607456833E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999961307004446	WITHOUT_CLASSIFICATION	3.8692995554498055E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999988770731162	WITHOUT_CLASSIFICATION	1.1229268837888292E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999991196372784	WITHOUT_CLASSIFICATION	8.803627217252978E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999998731912402	WITHOUT_CLASSIFICATION	1.2680875981348255E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999997243105164	WITHOUT_CLASSIFICATION	2.7568948359419677E-7	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999995566511586	WITHOUT_CLASSIFICATION	4.433488414280673E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999953511654476	WITHOUT_CLASSIFICATION	4.6488345523538915E-6	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998324728733	WITHOUT_CLASSIFICATION	1.6752712681413548E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999980446002648	WITHOUT_CLASSIFICATION	1.955399735254735E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999985491200455	WITHOUT_CLASSIFICATION	1.450879954453708E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999991049448403	WITHOUT_CLASSIFICATION	8.950551596678432E-7	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998557300265	WITHOUT_CLASSIFICATION	1.442699734520886E-7	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999970677035201	WITHOUT_CLASSIFICATION	2.9322964798472543E-6	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999884380619913	WITHOUT_CLASSIFICATION	1.1561938008769607E-5	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999996725962286	WITHOUT_CLASSIFICATION	3.274037714020814E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999953788524377	WITHOUT_CLASSIFICATION	4.6211475622231085E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999926860259436	WITHOUT_CLASSIFICATION	7.313974056299015E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999932552935361	WITHOUT_CLASSIFICATION	6.744706463835339E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999988268058643	WITHOUT_CLASSIFICATION	1.1731941357516425E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999983414291977	WITHOUT_CLASSIFICATION	1.6585708022913547E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999994374189327	WITHOUT_CLASSIFICATION	5.625810671939412E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999991851929405	WITHOUT_CLASSIFICATION	8.148070594755708E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995673909651	WITHOUT_CLASSIFICATION	4.326090348577561E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999923894282907	WITHOUT_CLASSIFICATION	7.6105717092902166E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999151912307	WITHOUT_CLASSIFICATION	8.48087693000887E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999563344791	WITHOUT_CLASSIFICATION	4.366552081917326E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999998312171131	WITHOUT_CLASSIFICATION	1.6878288687118188E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999922243630348	WITHOUT_CLASSIFICATION	7.77563696525518E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999963040083165	WITHOUT_CLASSIFICATION	3.6959916835105295E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999837941487363	WITHOUT_CLASSIFICATION	1.6205851263679513E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999920127758475	WITHOUT_CLASSIFICATION	7.987224152592471E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999810174268259	WITHOUT_CLASSIFICATION	1.8982573174097898E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999492593634249	WITHOUT_CLASSIFICATION	5.074063657505867E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999859312093587	WITHOUT_CLASSIFICATION	1.4068790641158283E-5	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999985633120522	WITHOUT_CLASSIFICATION	1.4366879478652701E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999945987576709	WITHOUT_CLASSIFICATION	5.401242328989157E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999959275952315	WITHOUT_CLASSIFICATION	4.072404768561711E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999988355021538	WITHOUT_CLASSIFICATION	1.164497846235061E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999997289769125	WITHOUT_CLASSIFICATION	2.710230874886058E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999917610855676	WITHOUT_CLASSIFICATION	8.23891443246407E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999927733682006	WITHOUT_CLASSIFICATION	7.226631799344954E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999996666060311	WITHOUT_CLASSIFICATION	3.333939689602259E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999998438468188	WITHOUT_CLASSIFICATION	1.5615318118958797E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999958294260377	WITHOUT_CLASSIFICATION	4.170573962309322E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995273423233	WITHOUT_CLASSIFICATION	4.726576766515301E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999946489347513	WITHOUT_CLASSIFICATION	5.3510652487147675E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999389951494263	WITHOUT_CLASSIFICATION	6.1004850573710675E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999966855404635	WITHOUT_CLASSIFICATION	3.3144595364721785E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999970245939883	WITHOUT_CLASSIFICATION	2.9754060117642027E-6	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998582835172	WITHOUT_CLASSIFICATION	1.417164828045685E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999824500614102	WITHOUT_CLASSIFICATION	1.7549938589788147E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999470131591798	WITHOUT_CLASSIFICATION	5.29868408202571E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999614116021774	WITHOUT_CLASSIFICATION	3.8588397822620777E-5	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999972969598114	WITHOUT_CLASSIFICATION	2.703040188507851E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999611178813792	WITHOUT_CLASSIFICATION	3.888211862074266E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999360378008594	WITHOUT_CLASSIFICATION	6.396219914064181E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999863059902561	WITHOUT_CLASSIFICATION	1.3694009744019557E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999806782593188	WITHOUT_CLASSIFICATION	1.9321740681234743E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999652514543723	WITHOUT_CLASSIFICATION	3.474854562765662E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999816219000532	WITHOUT_CLASSIFICATION	1.8378099946768793E-5	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999375460513	WITHOUT_CLASSIFICATION	6.245394867386973E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999979605619472	WITHOUT_CLASSIFICATION	2.0394380528053937E-5	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999138642152604	WITHOUT_CLASSIFICATION	8.613578473955619E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999937999089934	WITHOUT_CLASSIFICATION	6.200091006581938E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999979605619472	WITHOUT_CLASSIFICATION	2.0394380528053937E-5	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999975358067451	WITHOUT_CLASSIFICATION	2.464193254949288E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999941516140778	WITHOUT_CLASSIFICATION	5.848385922222832E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999936127383496	WITHOUT_CLASSIFICATION	6.387261650358424E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999920408220547	WITHOUT_CLASSIFICATION	7.959177945360178E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999851937132781	WITHOUT_CLASSIFICATION	1.4806286721940886E-5	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999976833484818	WITHOUT_CLASSIFICATION	2.3166515181886663E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997914482022405	WITHOUT_CLASSIFICATION	2.0855179775954748E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999978246685234	WITHOUT_CLASSIFICATION	2.175331476636407E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999987271730261	WITHOUT_CLASSIFICATION	1.2728269739738118E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999553008690459	WITHOUT_CLASSIFICATION	4.469913095396526E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999999293184663	WITHOUT_CLASSIFICATION	7.068153369774707E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999997862366343	WITHOUT_CLASSIFICATION	2.1376336567963603E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998873318031	WITHOUT_CLASSIFICATION	1.1266819686072368E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999534389701	WITHOUT_CLASSIFICATION	4.656102989549717E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990426399096	WITHOUT_CLASSIFICATION	9.57360090432411E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999985055547802	WITHOUT_CLASSIFICATION	1.4944452197582991E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999768317089246	WITHOUT_CLASSIFICATION	2.31682910753031E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999768317089246	WITHOUT_CLASSIFICATION	2.31682910753031E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999986521680904	WITHOUT_CLASSIFICATION	1.3478319095679623E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9998969495293369	WITHOUT_CLASSIFICATION	1.0305047066313521E-4	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999514575160383	WITHOUT_CLASSIFICATION	4.854248396181391E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999248111407334	WITHOUT_CLASSIFICATION	7.518885926662626E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999963805080143	WITHOUT_CLASSIFICATION	3.6194919857878366E-6	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999979432935072	WITHOUT_CLASSIFICATION	2.0567064926823524E-6	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999712383036821	WITHOUT_CLASSIFICATION	2.8761696317835522E-5	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999993563350379	WITHOUT_CLASSIFICATION	6.436649620890852E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999851963770072	WITHOUT_CLASSIFICATION	1.4803622992794778E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999999610266417	WITHOUT_CLASSIFICATION	3.897335830287921E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999999967967091	WITHOUT_CLASSIFICATION	3.2032909058568795E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998903897347	WITHOUT_CLASSIFICATION	1.0961026531119307E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.99999472205904	WITHOUT_CLASSIFICATION	5.277940959930399E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999969549965478	WITHOUT_CLASSIFICATION	3.0450034522338716E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.99999732227365	WITHOUT_CLASSIFICATION	2.6777263499756833E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999758011625898	WITHOUT_CLASSIFICATION	2.4198837410311827E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999969194506086	WITHOUT_CLASSIFICATION	3.0805493913135793E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999975421421851	WITHOUT_CLASSIFICATION	2.4578578148964326E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999990714380709	WITHOUT_CLASSIFICATION	9.285619290371103E-7	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9997932083054664	WITHOUT_CLASSIFICATION	2.0679169453368304E-4	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999975298436933	WITHOUT_CLASSIFICATION	2.4701563068298096E-6	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999128091652127	WITHOUT_CLASSIFICATION	8.71908347871773E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999755388994	WITHOUT_CLASSIFICATION	2.4461100577377413E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998209534785	WITHOUT_CLASSIFICATION	1.7904652151003365E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999981244764506	WITHOUT_CLASSIFICATION	1.8755235492852744E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999979807504458	WITHOUT_CLASSIFICATION	2.0192495542033087E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997651036339	WITHOUT_CLASSIFICATION	2.3489636622262018E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999976488299293	WITHOUT_CLASSIFICATION	2.3511700706972615E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999999446353083	WITHOUT_CLASSIFICATION	5.536469174506777E-8	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999229410601769	WITHOUT_CLASSIFICATION	7.705893982311261E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999448578558495	WITHOUT_CLASSIFICATION	5.514214415062763E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999696965815785	WITHOUT_CLASSIFICATION	3.0303418421551545E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999075665270549	WITHOUT_CLASSIFICATION	9.243347294495757E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999864497508776	WITHOUT_CLASSIFICATION	1.355024912244782E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999779773446561	WITHOUT_CLASSIFICATION	2.2022655343898214E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999970902684115	WITHOUT_CLASSIFICATION	2.9097315884017334E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.99993882410616	WITHOUT_CLASSIFICATION	6.117589384012682E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999843379105999	WITHOUT_CLASSIFICATION	1.566208940011754E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999994242438157	WITHOUT_CLASSIFICATION	5.757561842588023E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999987344822779	WITHOUT_CLASSIFICATION	1.2655177221469902E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999982922226025	WITHOUT_CLASSIFICATION	1.7077773975137655E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999908491580936	WITHOUT_CLASSIFICATION	9.150841906441803E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999614269242	WITHOUT_CLASSIFICATION	3.857307580496184E-7	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999993514561987	WITHOUT_CLASSIFICATION	6.485438012417614E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999983967831743	WITHOUT_CLASSIFICATION	1.6032168257626514E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999231578849	WITHOUT_CLASSIFICATION	7.68421150492411E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912325771502	WITHOUT_CLASSIFICATION	8.767422849874926E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982441766571	WITHOUT_CLASSIFICATION	1.7558233429961852E-6	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997404365334	WITHOUT_CLASSIFICATION	2.5956346660722417E-6	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999931950948	WITHOUT_CLASSIFICATION	6.804905229784283E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999982057593308	WITHOUT_CLASSIFICATION	1.794240669096408E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999989935427838	WITHOUT_CLASSIFICATION	1.0064572163315605E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999599397539	WITHOUT_CLASSIFICATION	4.0060246016060415E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999884306113248	WITHOUT_CLASSIFICATION	1.156938867518178E-5	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914918023411	WITHOUT_CLASSIFICATION	8.50819765879497E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999884306113248	WITHOUT_CLASSIFICATION	1.156938867518178E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999794427944858	WITHOUT_CLASSIFICATION	2.055720551416355E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999889324215521	WITHOUT_CLASSIFICATION	1.1067578447876537E-5	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999702045972849	WITHOUT_CLASSIFICATION	2.9795402715075597E-5	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999972922513464	WITHOUT_CLASSIFICATION	2.7077486535551214E-6	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999980562475596	WITHOUT_CLASSIFICATION	1.943752440474186E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999998589790852	WITHOUT_CLASSIFICATION	1.4102091480188852E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999968226273659	WITHOUT_CLASSIFICATION	3.177372634157429E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999949127163618	WITHOUT_CLASSIFICATION	5.0872836382322985E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998583804062	WITHOUT_CLASSIFICATION	1.4161959374195337E-7	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999999723370127	WITHOUT_CLASSIFICATION	2.766298735318248E-8	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999980534639142	WITHOUT_CLASSIFICATION	1.9465360858369146E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999988431323176	WITHOUT_CLASSIFICATION	1.156867682410247E-6	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999873309426235	WITHOUT_CLASSIFICATION	1.2669057376500825E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999995285758093	WITHOUT_CLASSIFICATION	4.714241906965197E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999994419873298	WITHOUT_CLASSIFICATION	5.580126702072604E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999996158867344	WITHOUT_CLASSIFICATION	3.841132656531003E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999310303460269	WITHOUT_CLASSIFICATION	6.896965397302532E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999310303460269	WITHOUT_CLASSIFICATION	6.896965397302532E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999975844372062	WITHOUT_CLASSIFICATION	2.4155627937962595E-5	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999991275401112	WITHOUT_CLASSIFICATION	8.724598887629155E-7	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997954667801	WITHOUT_CLASSIFICATION	2.0453321985225575E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999069062055	WITHOUT_CLASSIFICATION	9.309379440788409E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999997976994625	WITHOUT_CLASSIFICATION	2.0230053758952076E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999998093108403	WITHOUT_CLASSIFICATION	1.9068915961715447E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999999270997584	WITHOUT_CLASSIFICATION	7.290024165253308E-8	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999871530407395	WITHOUT_CLASSIFICATION	1.2846959260518177E-5	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999940873284238	WITHOUT_CLASSIFICATION	5.912671576215199E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998562460923	WITHOUT_CLASSIFICATION	1.4375390766267685E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999966330178465	WITHOUT_CLASSIFICATION	3.366982153580392E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997595169818	WITHOUT_CLASSIFICATION	2.4048301822552134E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999997615141912	WITHOUT_CLASSIFICATION	2.3848580882448885E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999958114911096	WITHOUT_CLASSIFICATION	4.1885088904149475E-6	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999991032280761	WITHOUT_CLASSIFICATION	8.967719240247051E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999262548976	WITHOUT_CLASSIFICATION	7.374510239595741E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999981106725068	WITHOUT_CLASSIFICATION	1.8893274932073003E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999973044562237	WITHOUT_CLASSIFICATION	2.6955437763683533E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999905241705754	WITHOUT_CLASSIFICATION	9.475829424635148E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999990929362985	WITHOUT_CLASSIFICATION	9.070637013531111E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999870529084677	WITHOUT_CLASSIFICATION	1.294709153234042E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999993815650321	WITHOUT_CLASSIFICATION	6.184349679422633E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999552478775	WITHOUT_CLASSIFICATION	4.475212249288905E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999974652875513	WITHOUT_CLASSIFICATION	2.5347124486261093E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999926833083116	WITHOUT_CLASSIFICATION	7.316691688409232E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999923984015782	WITHOUT_CLASSIFICATION	7.601598421905067E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999935714417216	WITHOUT_CLASSIFICATION	6.42855827838915E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999940333512596	WITHOUT_CLASSIFICATION	5.9666487404270155E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998522155446099	WITHOUT_CLASSIFICATION	1.4778445539003913E-4	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999848776417433	WITHOUT_CLASSIFICATION	1.512235825677855E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999983846333118	WITHOUT_CLASSIFICATION	1.6153666882442645E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999958133007097	WITHOUT_CLASSIFICATION	4.186699290250328E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999922984384125	WITHOUT_CLASSIFICATION	7.701561587504406E-6	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999998749679248	WITHOUT_CLASSIFICATION	1.2503207521510169E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999759488474149	WITHOUT_CLASSIFICATION	2.405115258511907E-5	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999990022336495	WITHOUT_CLASSIFICATION	9.977663505578228E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999935730767122	WITHOUT_CLASSIFICATION	6.426923287761722E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999974762060617	WITHOUT_CLASSIFICATION	2.5237939382422083E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999987364007127	WITHOUT_CLASSIFICATION	1.2635992872435304E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999968404296848	WITHOUT_CLASSIFICATION	3.159570315198096E-6	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999967390110879	WITHOUT_CLASSIFICATION	3.260988912047878E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978143647587	WITHOUT_CLASSIFICATION	2.185635241396877E-6	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999593770071331	WITHOUT_CLASSIFICATION	4.062299286682947E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999987880519631	WITHOUT_CLASSIFICATION	1.2119480370276798E-6	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998039850584	WITHOUT_CLASSIFICATION	1.9601494156446265E-7	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999756051652	WITHOUT_CLASSIFICATION	2.4394834884909886E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999287959016	WITHOUT_CLASSIFICATION	7.120409834022891E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999995228918936	WITHOUT_CLASSIFICATION	4.771081064193615E-7	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999986958637433	WITHOUT_CLASSIFICATION	1.304136256582692E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999991292883837	WITHOUT_CLASSIFICATION	8.707116162604465E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969029370054	WITHOUT_CLASSIFICATION	3.097062994576941E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999970408537542	WITHOUT_CLASSIFICATION	2.9591462458283196E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994287357199	WITHOUT_CLASSIFICATION	5.712642800562883E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999976321571655	WITHOUT_CLASSIFICATION	2.3678428344717895E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999543065022839	WITHOUT_CLASSIFICATION	4.569349771619992E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999987506504916	WITHOUT_CLASSIFICATION	1.2493495084123026E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999987506504916	WITHOUT_CLASSIFICATION	1.2493495084123026E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999665139739	WITHOUT_CLASSIFICATION	3.348602609104073E-7	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999295827580705	WITHOUT_CLASSIFICATION	7.041724192946596E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999970510135797	WITHOUT_CLASSIFICATION	2.9489864201954583E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999991599215908	WITHOUT_CLASSIFICATION	8.400784091032326E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999991222868032	WITHOUT_CLASSIFICATION	8.777131968757007E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999999467180883	WITHOUT_CLASSIFICATION	5.328191170117198E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995750513924	WITHOUT_CLASSIFICATION	4.249486076903459E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999981158324082	WITHOUT_CLASSIFICATION	1.8841675918605761E-6	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999977091839536	WITHOUT_CLASSIFICATION	2.290816046510386E-6	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999992374716817	WITHOUT_CLASSIFICATION	7.6252831822904E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999937498831701	WITHOUT_CLASSIFICATION	6.250116829907407E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999870490108295	WITHOUT_CLASSIFICATION	1.2950989170436724E-5	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998046904458697	WITHOUT_CLASSIFICATION	1.9530955413029092E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999997918501216	WITHOUT_CLASSIFICATION	2.081498784007189E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999994725715537	WITHOUT_CLASSIFICATION	5.274284462395698E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999998186704739	WITHOUT_CLASSIFICATION	1.81329526010899E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.99999995454026	WITHOUT_CLASSIFICATION	4.545974005060896E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9998503691980156	WITHOUT_CLASSIFICATION	1.4963080198436234E-4	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999881523725572	WITHOUT_CLASSIFICATION	1.1847627442673325E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999981737705089	WITHOUT_CLASSIFICATION	1.8262294910939228E-5	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999998800848099	WITHOUT_CLASSIFICATION	1.1991519011430336E-7	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999875925979809	WITHOUT_CLASSIFICATION	1.2407402018981191E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997492829334194	WITHOUT_CLASSIFICATION	2.507170665806153E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999999858990024	WITHOUT_CLASSIFICATION	1.4100997595846236E-7	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999124139415	WITHOUT_CLASSIFICATION	8.758605847039952E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999999959838224	WITHOUT_CLASSIFICATION	4.016177600956754E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999957638237366	WITHOUT_CLASSIFICATION	4.236176263383413E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997939643066451	WITHOUT_CLASSIFICATION	2.060356933548987E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999992742080762	WITHOUT_CLASSIFICATION	7.257919237957619E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997492829334194	WITHOUT_CLASSIFICATION	2.507170665806153E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999996246608119	WITHOUT_CLASSIFICATION	3.7533918805033286E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999829473745	WITHOUT_CLASSIFICATION	1.70526254772401E-8	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997433463987886	WITHOUT_CLASSIFICATION	2.5665360121139124E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999214674251321	WITHOUT_CLASSIFICATION	7.85325748679303E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999998269603878	WITHOUT_CLASSIFICATION	1.7303961225046337E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999997390570355	WITHOUT_CLASSIFICATION	2.6094296450194835E-7	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999981580562985	WITHOUT_CLASSIFICATION	1.8419437014095653E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999998743276931	WITHOUT_CLASSIFICATION	1.2567230691070115E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999964642634012	WITHOUT_CLASSIFICATION	3.535736598770536E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999214674251321	WITHOUT_CLASSIFICATION	7.85325748679303E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999997354052026	WITHOUT_CLASSIFICATION	2.6459479739660883E-7	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999987817617095	WITHOUT_CLASSIFICATION	1.2182382905175998E-6	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999993416750478	WITHOUT_CLASSIFICATION	6.583249522130425E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997449969476764	WITHOUT_CLASSIFICATION	2.5500305232356075E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999998525010774	WITHOUT_CLASSIFICATION	1.4749892260210568E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999966330178465	WITHOUT_CLASSIFICATION	3.366982153580392E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999974726143397	WITHOUT_CLASSIFICATION	2.527385660419995E-6	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999972287340784	WITHOUT_CLASSIFICATION	2.771265921646891E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999986905000786	WITHOUT_CLASSIFICATION	1.3094999214439083E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999996455330342	WITHOUT_CLASSIFICATION	3.5446696578951584E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999988018957504	WITHOUT_CLASSIFICATION	1.1981042496303093E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999960770373482	WITHOUT_CLASSIFICATION	3.9229626518830925E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999972315509744	WITHOUT_CLASSIFICATION	2.768449025503087E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999938332369812	WITHOUT_CLASSIFICATION	6.1667630186931595E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999517902177045	WITHOUT_CLASSIFICATION	4.8209782295384036E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999997418515362	WITHOUT_CLASSIFICATION	2.581484638109948E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997932265356638	WITHOUT_CLASSIFICATION	2.0677346433610217E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999995774220171	WITHOUT_CLASSIFICATION	4.2257798290943164E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999993230361665	WITHOUT_CLASSIFICATION	6.769638335071644E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999868723805483	WITHOUT_CLASSIFICATION	1.3127619451749672E-5	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999992168023845	WITHOUT_CLASSIFICATION	7.831976154970802E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999900747628035	WITHOUT_CLASSIFICATION	9.925237196490011E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999995774303783	WITHOUT_CLASSIFICATION	4.2256962174238314E-7	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999934186371761	WITHOUT_CLASSIFICATION	6.5813628239698855E-6	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999940696678307	WITHOUT_CLASSIFICATION	5.930332169326237E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999875080659264	WITHOUT_CLASSIFICATION	1.2491934073695622E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999617135571393	WITHOUT_CLASSIFICATION	3.8286442860692954E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999971369919262	WITHOUT_CLASSIFICATION	2.863008073841349E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999960634737426	WITHOUT_CLASSIFICATION	3.936526257416045E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999979771576818	WITHOUT_CLASSIFICATION	2.022842318175724E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999728678601854	WITHOUT_CLASSIFICATION	2.7132139814683177E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999623858155855	WITHOUT_CLASSIFICATION	3.7614184414608404E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999958221377075	WITHOUT_CLASSIFICATION	4.177862292457223E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957912648985	WITHOUT_CLASSIFICATION	4.208735101577175E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977088436295	WITHOUT_CLASSIFICATION	2.2911563705846536E-6	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999999950879278	WITHOUT_CLASSIFICATION	4.9120721979768126E-8	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999852319867089	WITHOUT_CLASSIFICATION	1.4768013291173078E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999984586330032	WITHOUT_CLASSIFICATION	1.5413669968355003E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999441191483	WITHOUT_CLASSIFICATION	5.588085170571933E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999988087106982	WITHOUT_CLASSIFICATION	1.1912893017437919E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999988305730342	WITHOUT_CLASSIFICATION	1.1694269659153405E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999998673649958	WITHOUT_CLASSIFICATION	1.326350043157221E-7	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999995774302671	WITHOUT_CLASSIFICATION	4.225697329904331E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999999752739522	WITHOUT_CLASSIFICATION	2.472604780259661E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999986982891305	WITHOUT_CLASSIFICATION	1.3017108695626877E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999988423490956	WITHOUT_CLASSIFICATION	1.1576509043703602E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999969340201197	WITHOUT_CLASSIFICATION	3.0659798803888235E-6	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996828332948	WITHOUT_CLASSIFICATION	3.171667051257234E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999997828113973	WITHOUT_CLASSIFICATION	2.1718860277025323E-7	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995529854571	WITHOUT_CLASSIFICATION	4.470145430207712E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999993337110494	WITHOUT_CLASSIFICATION	6.662889505749298E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999988089672925	WITHOUT_CLASSIFICATION	1.1910327074135982E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999970554592187	WITHOUT_CLASSIFICATION	2.944540781353943E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998689135587	WITHOUT_CLASSIFICATION	1.3108644126632243E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999984976839736	WITHOUT_CLASSIFICATION	1.5023160264163297E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.99999877223426	WITHOUT_CLASSIFICATION	1.2277657399580528E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999994143154869	WITHOUT_CLASSIFICATION	5.856845130810351E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999998412556691	WITHOUT_CLASSIFICATION	1.5874433085893957E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999999653930601	WITHOUT_CLASSIFICATION	3.4606939893904213E-7	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999971809473891	WITHOUT_CLASSIFICATION	2.819052610915603E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999995985341215	WITHOUT_CLASSIFICATION	4.0146587853135016E-7	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999976220271031	WITHOUT_CLASSIFICATION	2.3779728969988656E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957912648985	WITHOUT_CLASSIFICATION	4.208735101577175E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999994086810358	WITHOUT_CLASSIFICATION	5.91318964277212E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999741894824	WITHOUT_CLASSIFICATION	2.581051760114265E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999799686621019	WITHOUT_CLASSIFICATION	2.0031337898145928E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999862598469166	WITHOUT_CLASSIFICATION	1.3740153083320922E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996866157922	WITHOUT_CLASSIFICATION	3.133842077667084E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999978122826421	WITHOUT_CLASSIFICATION	2.187717357947429E-6	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977283322915	WITHOUT_CLASSIFICATION	2.271667708464492E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997483252083	WITHOUT_CLASSIFICATION	2.516747917117289E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999997477913123	WITHOUT_CLASSIFICATION	2.522086877192874E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999987992498099	WITHOUT_CLASSIFICATION	1.2007501900508598E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999996123879555	WITHOUT_CLASSIFICATION	3.876120443453891E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996077829115483	WITHOUT_CLASSIFICATION	3.9221708845172006E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999972964475242	WITHOUT_CLASSIFICATION	2.703552475796265E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999949461857269	WITHOUT_CLASSIFICATION	5.053814273097084E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999794427944858	WITHOUT_CLASSIFICATION	2.055720551416355E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995455329019	WITHOUT_CLASSIFICATION	4.5446709804751074E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999991032557042	WITHOUT_CLASSIFICATION	8.967442958922567E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999986283292149	WITHOUT_CLASSIFICATION	1.371670785038827E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999803818174322	WITHOUT_CLASSIFICATION	1.9618182567780732E-5	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999997842848006	WITHOUT_CLASSIFICATION	2.157151993684616E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999823974073198	WITHOUT_CLASSIFICATION	1.76025926802051E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999823974073198	WITHOUT_CLASSIFICATION	1.76025926802051E-5	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999970127462868	WITHOUT_CLASSIFICATION	2.987253713245084E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999996281087735	WITHOUT_CLASSIFICATION	3.7189122640835896E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999997471627541	WITHOUT_CLASSIFICATION	2.528372458999843E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999950423855563	WITHOUT_CLASSIFICATION	4.957614443653577E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999984367161764	WITHOUT_CLASSIFICATION	1.5632838236833108E-6	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999990142640871	WITHOUT_CLASSIFICATION	9.85735912936858E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999942239182981	WITHOUT_CLASSIFICATION	5.7760817019395985E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996464919153	WITHOUT_CLASSIFICATION	3.5350808476731696E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996464919153	WITHOUT_CLASSIFICATION	3.5350808476731696E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999961501520345	WITHOUT_CLASSIFICATION	3.849847965495449E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999934741189939	WITHOUT_CLASSIFICATION	6.525881006065667E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999992744857048	WITHOUT_CLASSIFICATION	7.25514295283288E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980982152812	WITHOUT_CLASSIFICATION	1.9017847187992692E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980982152812	WITHOUT_CLASSIFICATION	1.9017847187992692E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980982152812	WITHOUT_CLASSIFICATION	1.9017847187992692E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999981334981249	WITHOUT_CLASSIFICATION	1.8665018751357463E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999985612158361	WITHOUT_CLASSIFICATION	1.43878416388976E-6	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999991394981007	WITHOUT_CLASSIFICATION	8.605018993091734E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999989056226103	WITHOUT_CLASSIFICATION	1.094377389695722E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999932402623032	WITHOUT_CLASSIFICATION	6.759737696912439E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999997262890901	WITHOUT_CLASSIFICATION	2.73710909907112E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999878829788	WITHOUT_CLASSIFICATION	1.2117021169678458E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999999684778216	WITHOUT_CLASSIFICATION	3.1522178406361837E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999987980950986	WITHOUT_CLASSIFICATION	1.201904901393818E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999802738473696	WITHOUT_CLASSIFICATION	1.9726152630394005E-5	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999917004464135	WITHOUT_CLASSIFICATION	8.299553586366294E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999731909106511	WITHOUT_CLASSIFICATION	2.6809089348959323E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999984885170714	WITHOUT_CLASSIFICATION	1.5114829286186616E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999989192923744	WITHOUT_CLASSIFICATION	1.080707625663519E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999979785881724	WITHOUT_CLASSIFICATION	2.021411827584904E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999936304369144	WITHOUT_CLASSIFICATION	6.369563085705808E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999425654127236	WITHOUT_CLASSIFICATION	5.743458727645241E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999425654127236	WITHOUT_CLASSIFICATION	5.743458727645241E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999946233342618	WITHOUT_CLASSIFICATION	5.3766657382082085E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999946233342618	WITHOUT_CLASSIFICATION	5.3766657382082085E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999473634126832	WITHOUT_CLASSIFICATION	5.26365873168696E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999521635546158	WITHOUT_CLASSIFICATION	4.783644538420507E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999521635546158	WITHOUT_CLASSIFICATION	4.783644538420507E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.99995420848084	WITHOUT_CLASSIFICATION	4.57915191599177E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999338590622041	WITHOUT_CLASSIFICATION	6.614093779594522E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999982609647815	WITHOUT_CLASSIFICATION	1.7390352184355594E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999823974073198	WITHOUT_CLASSIFICATION	1.76025926802051E-5	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999989072610656	WITHOUT_CLASSIFICATION	1.0927389344380553E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999338590622041	WITHOUT_CLASSIFICATION	6.614093779594522E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999991999672584	WITHOUT_CLASSIFICATION	8.00032741603378E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999924985548988	WITHOUT_CLASSIFICATION	7.501445101130495E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998968400634946	WITHOUT_CLASSIFICATION	1.0315993650537383E-4	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999477296663078	WITHOUT_CLASSIFICATION	5.2270333692186295E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999997337301506	WITHOUT_CLASSIFICATION	2.6626984941520586E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999906437531567	WITHOUT_CLASSIFICATION	9.356246843270182E-6	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999993401382041	WITHOUT_CLASSIFICATION	6.598617958797506E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999997855266807	WITHOUT_CLASSIFICATION	2.1447331947372423E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999948783335268	WITHOUT_CLASSIFICATION	5.121666473236247E-6	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999886530652	WITHOUT_CLASSIFICATION	1.1346934895914047E-8	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999982764972438	WITHOUT_CLASSIFICATION	1.7235027561331433E-6	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999760520341773	WITHOUT_CLASSIFICATION	2.3947965822706506E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999988477646104	WITHOUT_CLASSIFICATION	1.152235389596271E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999848639224395	WITHOUT_CLASSIFICATION	1.5136077560481663E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999425430928	WITHOUT_CLASSIFICATION	5.745690713783575E-8	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999982997793249	WITHOUT_CLASSIFICATION	1.7002206750520762E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999992583134277	WITHOUT_CLASSIFICATION	7.416865722918466E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999912814498716	WITHOUT_CLASSIFICATION	8.71855012850914E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999912814498716	WITHOUT_CLASSIFICATION	8.71855012850914E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999962845048911	WITHOUT_CLASSIFICATION	3.715495108989565E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999978949344158	WITHOUT_CLASSIFICATION	2.105065584094979E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999965501807923	WITHOUT_CLASSIFICATION	3.4498192077731555E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999946292867158	WITHOUT_CLASSIFICATION	5.370713284168538E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999909724996895	WITHOUT_CLASSIFICATION	9.0275003105001E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999996137309102	WITHOUT_CLASSIFICATION	3.86269089869173E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999988583756829	WITHOUT_CLASSIFICATION	1.141624317109967E-6	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999984261249278	WITHOUT_CLASSIFICATION	1.5738750720903743E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999857841954137	WITHOUT_CLASSIFICATION	1.4215804586190967E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999887045348324	WITHOUT_CLASSIFICATION	1.129546516768169E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999972680929788	WITHOUT_CLASSIFICATION	2.7319070211179574E-6	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996077829115483	WITHOUT_CLASSIFICATION	3.9221708845172006E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998706435194	WITHOUT_CLASSIFICATION	1.2935648060887675E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994031030006	WITHOUT_CLASSIFICATION	5.968969994424374E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999993277720614	WITHOUT_CLASSIFICATION	6.722279386464182E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999993101016968	WITHOUT_CLASSIFICATION	6.898983030451166E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999896823435	WITHOUT_CLASSIFICATION	1.0317656500036112E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999896823435	WITHOUT_CLASSIFICATION	1.0317656500036112E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999973004200736	WITHOUT_CLASSIFICATION	2.699579926291035E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997016638229	WITHOUT_CLASSIFICATION	2.98336177052957E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999993371443527	WITHOUT_CLASSIFICATION	6.628556471674704E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999990239016228	WITHOUT_CLASSIFICATION	9.760983771956597E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.999999058763985	WITHOUT_CLASSIFICATION	9.412360151232865E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999979228833105	WITHOUT_CLASSIFICATION	2.0771166895224278E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999916280974119	WITHOUT_CLASSIFICATION	8.371902588112632E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998007701819	WITHOUT_CLASSIFICATION	1.9922981810915443E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994670003008	WITHOUT_CLASSIFICATION	5.329996992000949E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999799061109	WITHOUT_CLASSIFICATION	2.0093889098434683E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997958431502	WITHOUT_CLASSIFICATION	2.0415684979757684E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998007701819	WITHOUT_CLASSIFICATION	1.9922981810915443E-7	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999997801494617	WITHOUT_CLASSIFICATION	2.1985053830500682E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999997731757588	WITHOUT_CLASSIFICATION	2.2682424127115147E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995439129596	WITHOUT_CLASSIFICATION	4.560870403806135E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999911067054239	WITHOUT_CLASSIFICATION	8.893294576197314E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999571453686	WITHOUT_CLASSIFICATION	4.285463141672956E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998938624813	WITHOUT_CLASSIFICATION	1.0613751866424192E-7	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999986871905074	WITHOUT_CLASSIFICATION	1.3128094924560314E-6	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999983742047005	WITHOUT_CLASSIFICATION	1.6257952995121332E-6	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999997359926164	WITHOUT_CLASSIFICATION	2.6400738355818495E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999995139434942	WITHOUT_CLASSIFICATION	4.860565058130001E-7	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999993832685881	WITHOUT_CLASSIFICATION	6.167314120102473E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997813102537	WITHOUT_CLASSIFICATION	2.186897463580976E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999999671464014	WITHOUT_CLASSIFICATION	3.2853598588720565E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999990127421745	WITHOUT_CLASSIFICATION	9.872578254676724E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999998387768955	WITHOUT_CLASSIFICATION	1.6122310449751017E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.99999961988066	WITHOUT_CLASSIFICATION	3.8011933996923315E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999993391240423	WITHOUT_CLASSIFICATION	6.608759577513967E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999978067947924	WITHOUT_CLASSIFICATION	2.19320520748578E-6	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999976873025149	WITHOUT_CLASSIFICATION	2.3126974851596636E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999988267611919	WITHOUT_CLASSIFICATION	1.1732388080831776E-6	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998559549601	WITHOUT_CLASSIFICATION	1.440450399671095E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999985036876428	WITHOUT_CLASSIFICATION	1.496312357170633E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999995079346718	WITHOUT_CLASSIFICATION	4.920653281951617E-7	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999397838641927	WITHOUT_CLASSIFICATION	6.021613580744508E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999607193735	WITHOUT_CLASSIFICATION	3.9280626487225005E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999867697222482	WITHOUT_CLASSIFICATION	1.3230277751706927E-5	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999997334645322	WITHOUT_CLASSIFICATION	2.6653546770518566E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999997342643051	WITHOUT_CLASSIFICATION	2.657356949507546E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999038712678	WITHOUT_CLASSIFICATION	9.612873222977842E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999894514304236	WITHOUT_CLASSIFICATION	1.0548569576416794E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999996499476608	WITHOUT_CLASSIFICATION	3.5005233920941053E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999971804056811	WITHOUT_CLASSIFICATION	2.819594318847574E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999995292080877	WITHOUT_CLASSIFICATION	4.707919123639935E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999995488847495	WITHOUT_CLASSIFICATION	4.5111525038339925E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992103197758	WITHOUT_CLASSIFICATION	7.896802241411664E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998475796169	WITHOUT_CLASSIFICATION	1.5242038311017114E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999996841596103	WITHOUT_CLASSIFICATION	3.1584038966552086E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999994859724457	WITHOUT_CLASSIFICATION	5.140275543939501E-7	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999991567856811	WITHOUT_CLASSIFICATION	8.432143189632751E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999987253198473	WITHOUT_CLASSIFICATION	1.274680152711563E-6	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999995778880131	WITHOUT_CLASSIFICATION	4.2211198691580706E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999998874369747	WITHOUT_CLASSIFICATION	1.1256302532225174E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999995802331926	WITHOUT_CLASSIFICATION	4.197668074393636E-7	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997421567075	WITHOUT_CLASSIFICATION	2.5784329256385005E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999946673598944	WITHOUT_CLASSIFICATION	5.332640105596887E-6	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999983055662995	WITHOUT_CLASSIFICATION	1.6944337004816052E-6	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999072023604	WITHOUT_CLASSIFICATION	9.279763963467448E-8	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999975838999096	WITHOUT_CLASSIFICATION	2.4161000904061986E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999940737090864	WITHOUT_CLASSIFICATION	5.926290913495917E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999962139466012	WITHOUT_CLASSIFICATION	3.78605339883946E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897955801921	WITHOUT_CLASSIFICATION	1.020441980788424E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999994175406216	WITHOUT_CLASSIFICATION	5.824593784980981E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999993460127016	WITHOUT_CLASSIFICATION	6.539872984936818E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998659543728	WITHOUT_CLASSIFICATION	1.3404562717750023E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999996597470396	WITHOUT_CLASSIFICATION	3.402529603957495E-7	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999988434604941	WITHOUT_CLASSIFICATION	1.1565395059968433E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999985987636062	WITHOUT_CLASSIFICATION	1.4012363938627566E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999287906255	WITHOUT_CLASSIFICATION	7.120937451705277E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999979189881519	WITHOUT_CLASSIFICATION	2.081011848022211E-6	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999989312402969	WITHOUT_CLASSIFICATION	1.0687597031126932E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999999577053983	WITHOUT_CLASSIFICATION	4.229460170371762E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996203631817	WITHOUT_CLASSIFICATION	3.796368182527831E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999940222315152	WITHOUT_CLASSIFICATION	5.977768484743871E-6	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999958349924	WITHOUT_CLASSIFICATION	4.1650075999259855E-8	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999921492080879	WITHOUT_CLASSIFICATION	7.850791912113336E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999988923641456	WITHOUT_CLASSIFICATION	1.107635854383924E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897955801921	WITHOUT_CLASSIFICATION	1.020441980788424E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999948411577437	WITHOUT_CLASSIFICATION	5.158842256254786E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999993162426599	WITHOUT_CLASSIFICATION	6.837573401203613E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995842274343	WITHOUT_CLASSIFICATION	4.157725656223435E-7	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999378615173	WITHOUT_CLASSIFICATION	6.213848260542623E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999997603439228	WITHOUT_CLASSIFICATION	2.396560772092075E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999995231207625	WITHOUT_CLASSIFICATION	4.768792375251476E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994670003008	WITHOUT_CLASSIFICATION	5.329996992000949E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999407563049	WITHOUT_CLASSIFICATION	5.924369506392386E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992103197758	WITHOUT_CLASSIFICATION	7.896802241411664E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999963083049126	WITHOUT_CLASSIFICATION	3.6916950873214065E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999961629721231	WITHOUT_CLASSIFICATION	3.83702787691504E-6	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999446542522	WITHOUT_CLASSIFICATION	5.534574779058877E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994520540841	WITHOUT_CLASSIFICATION	5.479459159266441E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999966741789736	WITHOUT_CLASSIFICATION	3.325821026390907E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999999288742786	WITHOUT_CLASSIFICATION	7.112572145506186E-8	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997606074813	WITHOUT_CLASSIFICATION	2.393925186726878E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999977340712896	WITHOUT_CLASSIFICATION	2.265928710400147E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999998373466483	WITHOUT_CLASSIFICATION	1.6265335168997837E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997776164464	WITHOUT_CLASSIFICATION	2.2238355351180818E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999979871999127	WITHOUT_CLASSIFICATION	2.012800087290549E-6	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999985431661311	WITHOUT_CLASSIFICATION	1.4568338689405484E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995776499895	WITHOUT_CLASSIFICATION	4.223500104776493E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995776499895	WITHOUT_CLASSIFICATION	4.223500104776493E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999992759288151	WITHOUT_CLASSIFICATION	7.240711849633383E-7	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999973762468601	WITHOUT_CLASSIFICATION	2.6237531398671247E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999816407218	WITHOUT_CLASSIFICATION	1.8359278184786073E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999353654856	WITHOUT_CLASSIFICATION	6.463451438063144E-8	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999996637796867	WITHOUT_CLASSIFICATION	3.3622031325503707E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999997721358299	WITHOUT_CLASSIFICATION	2.2786417010956068E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999997283589301	WITHOUT_CLASSIFICATION	2.7164106981243036E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998883371147	WITHOUT_CLASSIFICATION	1.1166288526380246E-7	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999996393567923	WITHOUT_CLASSIFICATION	3.606432078172508E-7	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999984453989456	WITHOUT_CLASSIFICATION	1.5546010544491285E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999961202613269	WITHOUT_CLASSIFICATION	3.879738673118898E-6	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999976315222292	WITHOUT_CLASSIFICATION	2.3684777707300364E-6	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999987147784472	WITHOUT_CLASSIFICATION	1.2852215528975259E-6	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999894425311	WITHOUT_CLASSIFICATION	1.055746883255913E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999989026366828	WITHOUT_CLASSIFICATION	1.0973633172530779E-6	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999993026016639	WITHOUT_CLASSIFICATION	6.973983361418325E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999989603499704	WITHOUT_CLASSIFICATION	1.0396500295755604E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999992283208033	WITHOUT_CLASSIFICATION	7.71679196548939E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999997184143881	WITHOUT_CLASSIFICATION	2.8158561188002285E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998766753158	WITHOUT_CLASSIFICATION	1.2332468424437456E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999114090627	WITHOUT_CLASSIFICATION	8.859093714586857E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999988944135184	WITHOUT_CLASSIFICATION	1.1055864815555416E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999986337847401	WITHOUT_CLASSIFICATION	1.366215259932337E-6	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998637571182483	WITHOUT_CLASSIFICATION	1.3624288175168037E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999997925316331	WITHOUT_CLASSIFICATION	2.074683668978284E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959895374512	WITHOUT_CLASSIFICATION	4.010462548845045E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995362619613	WITHOUT_CLASSIFICATION	4.6373803876779987E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999999629518069	WITHOUT_CLASSIFICATION	3.704819310641311E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999833371344428	WITHOUT_CLASSIFICATION	1.6662865557275045E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994828946412	WITHOUT_CLASSIFICATION	5.171053587972191E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9998743053021029	WITHOUT_CLASSIFICATION	1.2569469789703013E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999721583021828	WITHOUT_CLASSIFICATION	2.7841697817153403E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999818958182	WITHOUT_CLASSIFICATION	1.8104181813842817E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999997788335611	WITHOUT_CLASSIFICATION	2.211664390216134E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999972560722884	WITHOUT_CLASSIFICATION	2.7439277116064463E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.99999985523053	WITHOUT_CLASSIFICATION	1.4476946991888098E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999834630483059	WITHOUT_CLASSIFICATION	1.6536951694112255E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999991298229486	WITHOUT_CLASSIFICATION	8.70177051324309E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999883526221588	WITHOUT_CLASSIFICATION	1.1647377841187902E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999996828083674	WITHOUT_CLASSIFICATION	3.171916326035631E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864858645179	WITHOUT_CLASSIFICATION	1.3514135482092453E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998376043735	WITHOUT_CLASSIFICATION	1.6239562650887147E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999397466683814	WITHOUT_CLASSIFICATION	6.025333161878967E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999805900498857	WITHOUT_CLASSIFICATION	1.940995011426874E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999957386733449	WITHOUT_CLASSIFICATION	4.261326655133606E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963021250646	WITHOUT_CLASSIFICATION	3.6978749354553035E-6	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9997734054696956	WITHOUT_CLASSIFICATION	2.265945303044598E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998546004799	WITHOUT_CLASSIFICATION	1.4539952010199388E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999944712653	WITHOUT_CLASSIFICATION	5.5287347109401934E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.99999927378837	WITHOUT_CLASSIFICATION	7.262116301003011E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948509538049	WITHOUT_CLASSIFICATION	5.149046195018856E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999994342681326	WITHOUT_CLASSIFICATION	5.657318673795456E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999986241986479	WITHOUT_CLASSIFICATION	1.3758013521117622E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991396635842	WITHOUT_CLASSIFICATION	8.603364158327402E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999998097945138	WITHOUT_CLASSIFICATION	1.9020548619799659E-6	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994435859806	WITHOUT_CLASSIFICATION	5.564140195066014E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999995514157362	WITHOUT_CLASSIFICATION	4.48584263768146E-7	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999798299000123	WITHOUT_CLASSIFICATION	2.017009998770317E-5	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999924638745333	WITHOUT_CLASSIFICATION	7.536125466640227E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999995975873578	WITHOUT_CLASSIFICATION	4.024126421973773E-6	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999996047298643	WITHOUT_CLASSIFICATION	3.9527013569518194E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999988717778514	WITHOUT_CLASSIFICATION	1.1282221485897578E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999990667426941	WITHOUT_CLASSIFICATION	9.332573058794988E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999929903713435	WITHOUT_CLASSIFICATION	7.009628656509926E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99999882164963	WITHOUT_CLASSIFICATION	1.1783503700079108E-6	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999951988732623	WITHOUT_CLASSIFICATION	4.801126737724409E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999816685630583	WITHOUT_CLASSIFICATION	1.8331436941780396E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999969295055315	WITHOUT_CLASSIFICATION	3.070494468451918E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999965383870172	WITHOUT_CLASSIFICATION	3.4616129828164016E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999970217419679	WITHOUT_CLASSIFICATION	2.9782580321995755E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999965383870172	WITHOUT_CLASSIFICATION	3.4616129828164016E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998936551012	WITHOUT_CLASSIFICATION	1.0634489877607082E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999983551866382	WITHOUT_CLASSIFICATION	1.6448133618218763E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999989955222115	WITHOUT_CLASSIFICATION	1.0044777884754802E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999174321905	WITHOUT_CLASSIFICATION	8.256780950734965E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999980532457613	WITHOUT_CLASSIFICATION	1.9467542386520125E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999991953458567	WITHOUT_CLASSIFICATION	8.04654143354888E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996758199672	WITHOUT_CLASSIFICATION	3.241800327956815E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999993724314906	WITHOUT_CLASSIFICATION	6.275685094784825E-7	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999993476518572	WITHOUT_CLASSIFICATION	6.523481427819042E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999990729253689	WITHOUT_CLASSIFICATION	9.270746311686599E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999991854749511	WITHOUT_CLASSIFICATION	8.145250489553168E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999978959221855	WITHOUT_CLASSIFICATION	2.1040778145727447E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996326109465	WITHOUT_CLASSIFICATION	3.67389053585141E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999913040599	WITHOUT_CLASSIFICATION	8.695940087460949E-9	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999969785950265	WITHOUT_CLASSIFICATION	3.0214049736621703E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999994207392958	WITHOUT_CLASSIFICATION	5.792607041564888E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999996551039207	WITHOUT_CLASSIFICATION	3.4489607925540133E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997186263947	WITHOUT_CLASSIFICATION	2.813736053082132E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999153723838	WITHOUT_CLASSIFICATION	8.462761620980469E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999988771612288	WITHOUT_CLASSIFICATION	1.122838771085383E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999806387671	WITHOUT_CLASSIFICATION	1.9361232894165055E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999944416284821	WITHOUT_CLASSIFICATION	5.5583715179279914E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999996572754928	WITHOUT_CLASSIFICATION	3.4272450721854004E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999393413207	WITHOUT_CLASSIFICATION	6.065867928494973E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999984024285271	WITHOUT_CLASSIFICATION	1.5975714728879241E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998602938868	WITHOUT_CLASSIFICATION	1.3970611319550471E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999199982747824	WITHOUT_CLASSIFICATION	8.000172521758531E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.999951497992785	WITHOUT_CLASSIFICATION	4.850200721507849E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999972006059069	WITHOUT_CLASSIFICATION	2.7993940930084906E-6	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999864783817669	WITHOUT_CLASSIFICATION	1.3521618233056726E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9997514478513538	WITHOUT_CLASSIFICATION	2.4855214864619217E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999653558289	WITHOUT_CLASSIFICATION	3.46441710530508E-8	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999360000681	WITHOUT_CLASSIFICATION	6.399993189564697E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999685900871799	WITHOUT_CLASSIFICATION	3.1409912820128143E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999971614917008	WITHOUT_CLASSIFICATION	2.8385082992289155E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.999852332728332	WITHOUT_CLASSIFICATION	1.4766727166810206E-4	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.999990481014388	WITHOUT_CLASSIFICATION	9.518985611883512E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999971412356501	WITHOUT_CLASSIFICATION	2.858764349939945E-6	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9998949843324721	WITHOUT_CLASSIFICATION	1.0501566752784678E-4	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999956645641461	WITHOUT_CLASSIFICATION	4.335435853827322E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999896280206284	WITHOUT_CLASSIFICATION	1.037197937152069E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999732793263306	WITHOUT_CLASSIFICATION	2.6720673669330876E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998837438645	WITHOUT_CLASSIFICATION	1.1625613547672763E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998602938868	WITHOUT_CLASSIFICATION	1.3970611319550471E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998366324540241	WITHOUT_CLASSIFICATION	1.6336754597587934E-4	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999967334132711	WITHOUT_CLASSIFICATION	3.2665867288655706E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999830452184231	WITHOUT_CLASSIFICATION	1.6954781576906043E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999924454404618	WITHOUT_CLASSIFICATION	7.554559538195534E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999541035096281	WITHOUT_CLASSIFICATION	4.5896490371945614E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999983501043472	WITHOUT_CLASSIFICATION	1.6498956527993678E-6	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999909813808526	WITHOUT_CLASSIFICATION	9.018619147446094E-6	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999981538003656	WITHOUT_CLASSIFICATION	1.846199634339593E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999983189894363	WITHOUT_CLASSIFICATION	1.6810105637907544E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999982863006958	WITHOUT_CLASSIFICATION	1.7136993042556947E-6	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999711351065764	WITHOUT_CLASSIFICATION	2.886489342361173E-5	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998881511222	WITHOUT_CLASSIFICATION	1.1184887774544684E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999809522190805	WITHOUT_CLASSIFICATION	1.9047780919468396E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999959522055109	WITHOUT_CLASSIFICATION	4.047794489108323E-5	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999927554838901	WITHOUT_CLASSIFICATION	7.2445161099366056E-6	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999992938939916	WITHOUT_CLASSIFICATION	7.06106008495733E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999890250164933	WITHOUT_CLASSIFICATION	1.0974983506750289E-5	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999876514700091	WITHOUT_CLASSIFICATION	1.2348529990840918E-5	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999995989617915	WITHOUT_CLASSIFICATION	4.010382085346181E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998366324540241	WITHOUT_CLASSIFICATION	1.6336754597587934E-4	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999920342030506	WITHOUT_CLASSIFICATION	7.965796949455289E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999990119060012	WITHOUT_CLASSIFICATION	9.880939987556014E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999986227316874	WITHOUT_CLASSIFICATION	1.3772683125907711E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999987095537352	WITHOUT_CLASSIFICATION	1.2904462648362929E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999971891282325	WITHOUT_CLASSIFICATION	2.810871767556875E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999364759026127	WITHOUT_CLASSIFICATION	6.352409738729209E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999364759026127	WITHOUT_CLASSIFICATION	6.352409738729209E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997559054985	WITHOUT_CLASSIFICATION	2.4409450154863264E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999364759026127	WITHOUT_CLASSIFICATION	6.352409738729209E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999364759026127	WITHOUT_CLASSIFICATION	6.352409738729209E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999805003051773	WITHOUT_CLASSIFICATION	1.9499694822749552E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999989670496577	WITHOUT_CLASSIFICATION	1.0329503422213904E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999987340536047	WITHOUT_CLASSIFICATION	1.2659463952654524E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999987315109706	WITHOUT_CLASSIFICATION	1.2684890294709233E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998945602772	WITHOUT_CLASSIFICATION	1.0543972272255136E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999597082464	WITHOUT_CLASSIFICATION	4.029175374030416E-8	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999874465648059	WITHOUT_CLASSIFICATION	1.255343519411153E-5	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999999784922715	WITHOUT_CLASSIFICATION	2.1507728508274047E-7	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999651291836099	WITHOUT_CLASSIFICATION	3.487081639010047E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999368598471878	WITHOUT_CLASSIFICATION	6.314015281216849E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999965818535655	WITHOUT_CLASSIFICATION	3.418146434405608E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999688510541702	WITHOUT_CLASSIFICATION	3.114894582976006E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999888672442395	WITHOUT_CLASSIFICATION	1.1132755760531268E-5	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999937556426789	WITHOUT_CLASSIFICATION	6.244357321079775E-6	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999851401869015	WITHOUT_CLASSIFICATION	1.4859813098540547E-5	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999997435268092	WITHOUT_CLASSIFICATION	2.5647319079879475E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999989935427838	WITHOUT_CLASSIFICATION	1.0064572163315605E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999982017021561	WITHOUT_CLASSIFICATION	1.7982978438807323E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999894314540162	WITHOUT_CLASSIFICATION	1.0568545983785641E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999992906217303	WITHOUT_CLASSIFICATION	7.093782697094746E-6	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999957685107675	WITHOUT_CLASSIFICATION	4.231489232435867E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999753443685905	WITHOUT_CLASSIFICATION	2.4655631409476746E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999989935427838	WITHOUT_CLASSIFICATION	1.0064572163315605E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999199982747824	WITHOUT_CLASSIFICATION	8.000172521758531E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.99998308401197	WITHOUT_CLASSIFICATION	1.691598802991706E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984948219852	WITHOUT_CLASSIFICATION	1.5051780147722745E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985334618817	WITHOUT_CLASSIFICATION	1.4665381182774025E-6	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999785732734543	WITHOUT_CLASSIFICATION	2.142672654569543E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999982377757771	WITHOUT_CLASSIFICATION	1.7622242229084194E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999933636431341	WITHOUT_CLASSIFICATION	6.636356865936582E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999982219991066	WITHOUT_CLASSIFICATION	1.778000893380827E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999861669346732	WITHOUT_CLASSIFICATION	1.3833065326776377E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999987547553514	WITHOUT_CLASSIFICATION	1.2452446486436107E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999624473090427	WITHOUT_CLASSIFICATION	3.755269095724339E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999889129542182	WITHOUT_CLASSIFICATION	1.1087045781895714E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999915400603304	WITHOUT_CLASSIFICATION	8.459939669532613E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999962131561214	WITHOUT_CLASSIFICATION	3.7868438785320502E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999973675231394	WITHOUT_CLASSIFICATION	2.6324768606584674E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999282804622	WITHOUT_CLASSIFICATION	7.171953781140309E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999959686573744	WITHOUT_CLASSIFICATION	4.031342625525904E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999969416432027	WITHOUT_CLASSIFICATION	3.0583567973109993E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999994802546641	WITHOUT_CLASSIFICATION	5.197453358097808E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999990381038797	WITHOUT_CLASSIFICATION	9.618961202898343E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999919700020468	WITHOUT_CLASSIFICATION	8.029997953205369E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999731094005345	WITHOUT_CLASSIFICATION	2.6890599465481735E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999369536702	WITHOUT_CLASSIFICATION	6.304632978604983E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999861669346732	WITHOUT_CLASSIFICATION	1.3833065326776377E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999787752187496	WITHOUT_CLASSIFICATION	2.1224781250525744E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999819691921357	WITHOUT_CLASSIFICATION	1.8030807864316562E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999993865572517	WITHOUT_CLASSIFICATION	6.134427482985007E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999995410783308	WITHOUT_CLASSIFICATION	4.5892166918836634E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997388597052	WITHOUT_CLASSIFICATION	2.6114029479495242E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999511711382149	WITHOUT_CLASSIFICATION	4.882886178525205E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999066838335886	WITHOUT_CLASSIFICATION	9.331616641143545E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999879551703376	WITHOUT_CLASSIFICATION	1.2044829662510545E-5	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999595569644557	WITHOUT_CLASSIFICATION	4.044303554432738E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999400687395886	WITHOUT_CLASSIFICATION	5.993126041126931E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982146848875	WITHOUT_CLASSIFICATION	1.785315112421812E-6	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998512114814	WITHOUT_CLASSIFICATION	1.487885185961791E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999961012559301	WITHOUT_CLASSIFICATION	3.898744070018644E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999978425728921	WITHOUT_CLASSIFICATION	2.1574271078165754E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999969534083574	WITHOUT_CLASSIFICATION	3.0465916427422543E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999838974489573	WITHOUT_CLASSIFICATION	1.610255104269339E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982146848875	WITHOUT_CLASSIFICATION	1.785315112421812E-6	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999994512446907	WITHOUT_CLASSIFICATION	5.487553092885431E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999987941454236	WITHOUT_CLASSIFICATION	1.2058545764136101E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999904011902327	WITHOUT_CLASSIFICATION	9.598809767279295E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999993330191692	WITHOUT_CLASSIFICATION	6.669808307682067E-7	TEST
// the default...	WITHOUT_CLASSIFICATION	0.999992794071799	WITHOUT_CLASSIFICATION	7.2059282009325356E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999875125658	WITHOUT_CLASSIFICATION	1.2487434194211543E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999997235446537	WITHOUT_CLASSIFICATION	2.764553462818896E-7	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955664011255	WITHOUT_CLASSIFICATION	4.433598874447662E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926207831513	WITHOUT_CLASSIFICATION	7.3792168486864056E-6	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984949393713	WITHOUT_CLASSIFICATION	1.5050606286658178E-6	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972716124834	WITHOUT_CLASSIFICATION	2.7283875166951697E-6	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979423451639	WITHOUT_CLASSIFICATION	2.0576548360808348E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999997822257328	WITHOUT_CLASSIFICATION	2.177742671886217E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999997822257328	WITHOUT_CLASSIFICATION	2.177742671886217E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999923159555205	WITHOUT_CLASSIFICATION	7.684044479558167E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999967010289195	WITHOUT_CLASSIFICATION	3.298971080633242E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999906067713156	WITHOUT_CLASSIFICATION	9.393228684312387E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999796595542817	WITHOUT_CLASSIFICATION	2.0340445718344406E-5	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999979074936245	WITHOUT_CLASSIFICATION	2.09250637559647E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814121725724	WITHOUT_CLASSIFICATION	1.858782742761843E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960266949108	WITHOUT_CLASSIFICATION	3.973305089196691E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796298654724	WITHOUT_CLASSIFICATION	2.0370134527679306E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999456959752	WITHOUT_CLASSIFICATION	5.430402490391057E-8	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843054055946	WITHOUT_CLASSIFICATION	1.5694594405390952E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814121725724	WITHOUT_CLASSIFICATION	1.858782742761843E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960266949108	WITHOUT_CLASSIFICATION	3.973305089196691E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796298654724	WITHOUT_CLASSIFICATION	2.0370134527679306E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999857328651658	WITHOUT_CLASSIFICATION	1.4267134834251261E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9998895360152514	WITHOUT_CLASSIFICATION	1.1046398474864205E-4	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999991297320459	WITHOUT_CLASSIFICATION	8.702679541391966E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999947897563186	WITHOUT_CLASSIFICATION	5.21024368132735E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999997616555702	WITHOUT_CLASSIFICATION	2.3834442980536336E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998940022307	WITHOUT_CLASSIFICATION	1.0599776937276453E-7	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999700607378071	WITHOUT_CLASSIFICATION	2.9939262192780775E-5	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999445491923279	WITHOUT_CLASSIFICATION	5.545080767217799E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9998353462848062	WITHOUT_CLASSIFICATION	1.6465371519382632E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999938329707658	WITHOUT_CLASSIFICATION	6.167029234171606E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999908349294094	WITHOUT_CLASSIFICATION	9.1650705905085E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999987708902377	WITHOUT_CLASSIFICATION	1.2291097623542754E-6	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999998671995119	WITHOUT_CLASSIFICATION	1.3280048809401326E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999963233681374	WITHOUT_CLASSIFICATION	3.6766318625722E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999937036039852	WITHOUT_CLASSIFICATION	6.296396014745934E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999452118420529	WITHOUT_CLASSIFICATION	5.478815794718E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999701674135795	WITHOUT_CLASSIFICATION	2.983258642053436E-5	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997896916038301	WITHOUT_CLASSIFICATION	2.1030839616988434E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999800341099918	WITHOUT_CLASSIFICATION	1.9965890008230057E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999823079268605	WITHOUT_CLASSIFICATION	1.7692073139478993E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999953837818901	WITHOUT_CLASSIFICATION	4.616218109886001E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998648370517	WITHOUT_CLASSIFICATION	1.3516294827089956E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999978041054146	WITHOUT_CLASSIFICATION	2.195894585385067E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999996495402889	WITHOUT_CLASSIFICATION	3.504597111679403E-7	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999981539246564	WITHOUT_CLASSIFICATION	1.8460753436097382E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999901250089274	WITHOUT_CLASSIFICATION	9.874991072552241E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697984393988	WITHOUT_CLASSIFICATION	3.020156060114085E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951285053177	WITHOUT_CLASSIFICATION	4.8714946823088616E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999646908654	WITHOUT_CLASSIFICATION	3.530913460548381E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999698509465746	WITHOUT_CLASSIFICATION	3.0149053425289914E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781449408915	WITHOUT_CLASSIFICATION	2.1855059108479223E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999614116021774	WITHOUT_CLASSIFICATION	3.8588397822620777E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999614116021774	WITHOUT_CLASSIFICATION	3.8588397822620777E-5	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999988902584839	WITHOUT_CLASSIFICATION	1.1097415161501484E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999992622343901	WITHOUT_CLASSIFICATION	7.377656098946448E-7	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999958925045759	WITHOUT_CLASSIFICATION	4.107495424172795E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996077829115483	WITHOUT_CLASSIFICATION	3.9221708845172006E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999993418574594	WITHOUT_CLASSIFICATION	6.58142540679234E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999904791595244	WITHOUT_CLASSIFICATION	9.520840475593718E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9997964017886339	WITHOUT_CLASSIFICATION	2.0359821136598164E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999808934228983	WITHOUT_CLASSIFICATION	1.910657710168146E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999816219000532	WITHOUT_CLASSIFICATION	1.8378099946768793E-5	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957836563975	WITHOUT_CLASSIFICATION	4.216343602514492E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947962032882	WITHOUT_CLASSIFICATION	5.203796711685071E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963342296876	WITHOUT_CLASSIFICATION	3.6657703122904146E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927339237815	WITHOUT_CLASSIFICATION	7.2660762185379215E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972874509455	WITHOUT_CLASSIFICATION	2.712549054589409E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950846221676	WITHOUT_CLASSIFICATION	4.9153778323615234E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966210701876	WITHOUT_CLASSIFICATION	3.3789298123960583E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955881817755	WITHOUT_CLASSIFICATION	4.411818224444495E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961544423498	WITHOUT_CLASSIFICATION	3.8455576501536556E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940041117368	WITHOUT_CLASSIFICATION	5.9958882632403405E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964172777868	WITHOUT_CLASSIFICATION	3.582722213133644E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999990822051379	WITHOUT_CLASSIFICATION	9.177948620855136E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999978465361764	WITHOUT_CLASSIFICATION	2.153463823579333E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999974341725631	WITHOUT_CLASSIFICATION	2.565827436815605E-6	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999993313128007	WITHOUT_CLASSIFICATION	6.686871993558691E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996645299174	WITHOUT_CLASSIFICATION	3.3547008256738667E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999715213493914	WITHOUT_CLASSIFICATION	2.847865060855949E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999996686740273	WITHOUT_CLASSIFICATION	3.3132597265187025E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999999288490477	WITHOUT_CLASSIFICATION	7.115095230013868E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999974341725631	WITHOUT_CLASSIFICATION	2.565827436815605E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999974341725631	WITHOUT_CLASSIFICATION	2.565827436815605E-6	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999967738600256	WITHOUT_CLASSIFICATION	3.2261399744098334E-6	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999953521123406	WITHOUT_CLASSIFICATION	4.64788765938642E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999817535778	WITHOUT_CLASSIFICATION	1.8246422196866377E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999989013538417	WITHOUT_CLASSIFICATION	1.0986461582898709E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999988477646104	WITHOUT_CLASSIFICATION	1.152235389596271E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999823079268605	WITHOUT_CLASSIFICATION	1.7692073139478993E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999977616062731	WITHOUT_CLASSIFICATION	2.2383937269817933E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999971647750867	WITHOUT_CLASSIFICATION	2.835224913262034E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999806220787092	WITHOUT_CLASSIFICATION	1.9377921290769077E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928611368322	WITHOUT_CLASSIFICATION	7.138863167783023E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999980808428021	WITHOUT_CLASSIFICATION	1.9191571979332124E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995674581888	WITHOUT_CLASSIFICATION	4.325418112057052E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999928356634967	WITHOUT_CLASSIFICATION	7.164336503225545E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999928356634967	WITHOUT_CLASSIFICATION	7.164336503225545E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999930104119644	WITHOUT_CLASSIFICATION	6.9895880355347445E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999930104119644	WITHOUT_CLASSIFICATION	6.9895880355347445E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885273170054	WITHOUT_CLASSIFICATION	1.1472682994606505E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840166709099	WITHOUT_CLASSIFICATION	1.598332909020084E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999963627066673	WITHOUT_CLASSIFICATION	3.6372933326690644E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999983413868796	WITHOUT_CLASSIFICATION	1.6586131204017218E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999993787853432	WITHOUT_CLASSIFICATION	6.212146567967296E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999995692706388	WITHOUT_CLASSIFICATION	4.3072936107098857E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982482862815	WITHOUT_CLASSIFICATION	1.751713718474665E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975844912747	WITHOUT_CLASSIFICATION	2.415508725234596E-6	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999970282280414	WITHOUT_CLASSIFICATION	2.9717719585686723E-6	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999217115995448	WITHOUT_CLASSIFICATION	7.828840045518952E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999973263961711	WITHOUT_CLASSIFICATION	2.6736038289381818E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999994855420704	WITHOUT_CLASSIFICATION	5.1445792960165935E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999945910711115	WITHOUT_CLASSIFICATION	5.408928888430793E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999933676083632	WITHOUT_CLASSIFICATION	6.632391636870463E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999453911407071	WITHOUT_CLASSIFICATION	5.460885929283117E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999863266035254	WITHOUT_CLASSIFICATION	1.3673396474551582E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999863266035254	WITHOUT_CLASSIFICATION	1.3673396474551582E-5	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.99999984779756	WITHOUT_CLASSIFICATION	1.5220244008483295E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999969887059491	WITHOUT_CLASSIFICATION	3.0112940508130547E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998540024758	WITHOUT_CLASSIFICATION	1.45997524146331E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999295827580705	WITHOUT_CLASSIFICATION	7.041724192946596E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953670508248	WITHOUT_CLASSIFICATION	4.632949175237719E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941336944226	WITHOUT_CLASSIFICATION	5.866305577443035E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999994060994583	WITHOUT_CLASSIFICATION	5.939005418737345E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990862811894	WITHOUT_CLASSIFICATION	9.137188106821696E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999987289317145	WITHOUT_CLASSIFICATION	1.271068285485184E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999071068238	WITHOUT_CLASSIFICATION	9.289317620319092E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999556016376	WITHOUT_CLASSIFICATION	4.439836234123782E-8	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999993391112654	WITHOUT_CLASSIFICATION	6.608887347138088E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924287283578	WITHOUT_CLASSIFICATION	7.571271642236964E-6	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999718723608485	WITHOUT_CLASSIFICATION	2.8127639151548812E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999948693194014	WITHOUT_CLASSIFICATION	5.13068059856659E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999554167599287	WITHOUT_CLASSIFICATION	4.4583240071244754E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996352834561	WITHOUT_CLASSIFICATION	3.647165437988723E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999948684449458	WITHOUT_CLASSIFICATION	5.131555054206923E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999958972614741	WITHOUT_CLASSIFICATION	4.102738525904636E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999997406996443	WITHOUT_CLASSIFICATION	2.5930035569756407E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998358020842	WITHOUT_CLASSIFICATION	1.6419791591745144E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995197417106	WITHOUT_CLASSIFICATION	4.802582893530705E-7	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999678626269	WITHOUT_CLASSIFICATION	3.2137373092057897E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999441084319	WITHOUT_CLASSIFICATION	5.589156808509819E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999961010106652	WITHOUT_CLASSIFICATION	3.898989334799465E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999978701795345	WITHOUT_CLASSIFICATION	2.129820465529193E-6	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999750004366114	WITHOUT_CLASSIFICATION	2.4999563388564593E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999730456948738	WITHOUT_CLASSIFICATION	2.6954305126253917E-5	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998566520724	WITHOUT_CLASSIFICATION	1.43347927722179E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999864497508776	WITHOUT_CLASSIFICATION	1.355024912244782E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999952139198	WITHOUT_CLASSIFICATION	4.78608025559705E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999430392059333	WITHOUT_CLASSIFICATION	5.6960794066708495E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999884424581873	WITHOUT_CLASSIFICATION	1.1557541812645107E-5	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999991181200104	WITHOUT_CLASSIFICATION	8.818799896060157E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999054888853867	WITHOUT_CLASSIFICATION	9.451111461339961E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999991940824708	WITHOUT_CLASSIFICATION	8.059175292052875E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.99999995454026	WITHOUT_CLASSIFICATION	4.545974005060896E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999998033478575	WITHOUT_CLASSIFICATION	1.966521424941428E-6	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999988312744917	WITHOUT_CLASSIFICATION	1.1687255083401245E-6	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999939145966558	WITHOUT_CLASSIFICATION	6.085403344275311E-6	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999999799816912	WITHOUT_CLASSIFICATION	2.0018308801263092E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999968247649991	WITHOUT_CLASSIFICATION	3.1752350008253692E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999996838294765	WITHOUT_CLASSIFICATION	3.161705234763836E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99999944586503	WITHOUT_CLASSIFICATION	5.541349700751065E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995375780825	WITHOUT_CLASSIFICATION	4.624219174710551E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999684482739318	WITHOUT_CLASSIFICATION	3.1551726068266176E-5	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999744753825244	WITHOUT_CLASSIFICATION	2.552461747566424E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999310303460269	WITHOUT_CLASSIFICATION	6.896965397302532E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999966382058393	WITHOUT_CLASSIFICATION	3.3617941607618144E-6	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999988735719145	WITHOUT_CLASSIFICATION	1.1264280854977983E-5	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999976265452304	WITHOUT_CLASSIFICATION	2.3734547695388273E-6	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999890141087615	WITHOUT_CLASSIFICATION	1.0985891238544412E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999990811324037	WITHOUT_CLASSIFICATION	9.18867596329339E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999981043109553	WITHOUT_CLASSIFICATION	1.895689044748544E-6	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999988921313395	WITHOUT_CLASSIFICATION	1.1078686605034836E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999535554575061	WITHOUT_CLASSIFICATION	4.6444542493835936E-5	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999926388656895	WITHOUT_CLASSIFICATION	7.361134310471966E-6	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999965398031319	WITHOUT_CLASSIFICATION	3.4601968681174763E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999916352744295	WITHOUT_CLASSIFICATION	8.364725570452812E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999428820684046	WITHOUT_CLASSIFICATION	5.7117931595415605E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999949042191303	WITHOUT_CLASSIFICATION	5.095780869675636E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999951961234239	WITHOUT_CLASSIFICATION	4.803876576066876E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999994564428422	WITHOUT_CLASSIFICATION	5.43557157930096E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999972751602714	WITHOUT_CLASSIFICATION	2.7248397286447385E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999811599705072	WITHOUT_CLASSIFICATION	1.8840029492820257E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999996366322849	WITHOUT_CLASSIFICATION	3.633677151979776E-7	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999530396431	WITHOUT_CLASSIFICATION	4.6960356861921437E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999929253677028	WITHOUT_CLASSIFICATION	7.074632297110348E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997492829334194	WITHOUT_CLASSIFICATION	2.507170665806153E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997492829334194	WITHOUT_CLASSIFICATION	2.507170665806153E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999974463108885	WITHOUT_CLASSIFICATION	2.5536891114256033E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999973719144487	WITHOUT_CLASSIFICATION	2.6280855512532193E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999980646159037	WITHOUT_CLASSIFICATION	1.935384096260129E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999995519712802	WITHOUT_CLASSIFICATION	4.480287197997584E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999965850379781	WITHOUT_CLASSIFICATION	3.4149620219477554E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999997703661887	WITHOUT_CLASSIFICATION	2.2963381130291972E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999275676026	WITHOUT_CLASSIFICATION	7.243239737848686E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999998831858251	WITHOUT_CLASSIFICATION	1.168141748137404E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999907638017461	WITHOUT_CLASSIFICATION	9.236198253932076E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999644035251	WITHOUT_CLASSIFICATION	3.559647495398482E-8	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999991627213022	WITHOUT_CLASSIFICATION	8.372786977996218E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998302524654	WITHOUT_CLASSIFICATION	1.6974753463214074E-7	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999716936031037	WITHOUT_CLASSIFICATION	2.8306396896348994E-5	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999950324011634	WITHOUT_CLASSIFICATION	4.9675988366670496E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999983607118525	WITHOUT_CLASSIFICATION	1.6392881475053805E-5	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999836003502147	WITHOUT_CLASSIFICATION	1.6399649785277922E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999932588203994	WITHOUT_CLASSIFICATION	6.741179600701955E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999995992702735	WITHOUT_CLASSIFICATION	4.007297264574238E-7	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999998361178609	WITHOUT_CLASSIFICATION	1.638821390148952E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999900399540661	WITHOUT_CLASSIFICATION	9.960045933912974E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999659064449324	WITHOUT_CLASSIFICATION	3.409355506761546E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999826045212249	WITHOUT_CLASSIFICATION	1.7395478775057437E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999974509927262	WITHOUT_CLASSIFICATION	2.549007273816864E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999995951754757	WITHOUT_CLASSIFICATION	4.0482452430749736E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993183698535	WITHOUT_CLASSIFICATION	6.816301465061445E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999955858982936	WITHOUT_CLASSIFICATION	4.414101706315139E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999864548518391	WITHOUT_CLASSIFICATION	1.3545148160817255E-5	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999807303934121	WITHOUT_CLASSIFICATION	1.926960658793701E-5	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999955412835758	WITHOUT_CLASSIFICATION	4.458716424227242E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999989051354617	WITHOUT_CLASSIFICATION	1.0948645383063157E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999972234910107	WITHOUT_CLASSIFICATION	2.7765089892275117E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999900541869405	WITHOUT_CLASSIFICATION	9.945813059532108E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999698997425249	WITHOUT_CLASSIFICATION	3.0100257475143077E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999946795416331	WITHOUT_CLASSIFICATION	5.320458366865483E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999234221264014	WITHOUT_CLASSIFICATION	7.657787359862323E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999234221264014	WITHOUT_CLASSIFICATION	7.657787359862323E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999953954209002	WITHOUT_CLASSIFICATION	4.604579099774999E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999879984544036	WITHOUT_CLASSIFICATION	1.2001545596570153E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999996250682968	WITHOUT_CLASSIFICATION	3.7493170319698746E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999992046939051	WITHOUT_CLASSIFICATION	7.953060948654764E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998472948838	WITHOUT_CLASSIFICATION	1.5270511613511596E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999927811901235	WITHOUT_CLASSIFICATION	7.21880987654551E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999988636429777	WITHOUT_CLASSIFICATION	1.136357022265636E-6	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998595911685	WITHOUT_CLASSIFICATION	1.4040883151619998E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999985786932301	WITHOUT_CLASSIFICATION	1.4213067698753528E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995052515296	WITHOUT_CLASSIFICATION	4.947484703913252E-7	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999997094538682	WITHOUT_CLASSIFICATION	2.905461318137235E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999992682337778	WITHOUT_CLASSIFICATION	7.317662221521609E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999996302180334	WITHOUT_CLASSIFICATION	3.697819665524603E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999991252150955	WITHOUT_CLASSIFICATION	8.747849044540171E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999959631713753	WITHOUT_CLASSIFICATION	4.0368286246597325E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999996383712905	WITHOUT_CLASSIFICATION	3.61628709588189E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999996383712905	WITHOUT_CLASSIFICATION	3.61628709588189E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999997527086322	WITHOUT_CLASSIFICATION	2.4729136779263434E-7	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999972377970692	WITHOUT_CLASSIFICATION	2.7622029307469486E-6	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999976087079626	WITHOUT_CLASSIFICATION	2.3912920374992007E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999969508295679	WITHOUT_CLASSIFICATION	3.0491704320276673E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997939643066451	WITHOUT_CLASSIFICATION	2.060356933548987E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999871532011774	WITHOUT_CLASSIFICATION	1.2846798822563185E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999915445629272	WITHOUT_CLASSIFICATION	8.45543707286545E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999915445629272	WITHOUT_CLASSIFICATION	8.45543707286545E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999979412517784	WITHOUT_CLASSIFICATION	2.058748221580983E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999991299904849	WITHOUT_CLASSIFICATION	8.700095149624075E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999989157046588	WITHOUT_CLASSIFICATION	1.0842953411853643E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999943812552	WITHOUT_CLASSIFICATION	5.618744827996797E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999999763688967	WITHOUT_CLASSIFICATION	2.3631103358780635E-8	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997449969476764	WITHOUT_CLASSIFICATION	2.5500305232356075E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999994960477472	WITHOUT_CLASSIFICATION	5.03952252876477E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999982609647815	WITHOUT_CLASSIFICATION	1.7390352184355594E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954830395841	WITHOUT_CLASSIFICATION	4.516960415946903E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999994426710505	WITHOUT_CLASSIFICATION	5.573289496045111E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998689135587	WITHOUT_CLASSIFICATION	1.3108644126632243E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999862598469166	WITHOUT_CLASSIFICATION	1.3740153083320922E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998044954064	WITHOUT_CLASSIFICATION	1.9550459359301024E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999473634126832	WITHOUT_CLASSIFICATION	5.26365873168696E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999833371344428	WITHOUT_CLASSIFICATION	1.6662865557275045E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999965807218096	WITHOUT_CLASSIFICATION	3.4192781904335186E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999993197707403	WITHOUT_CLASSIFICATION	6.802292596904016E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999372760802593	WITHOUT_CLASSIFICATION	6.272391974067175E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999968323101539	WITHOUT_CLASSIFICATION	3.1676898462189694E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999979816037848	WITHOUT_CLASSIFICATION	2.0183962151575E-6	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999871957604185	WITHOUT_CLASSIFICATION	1.2804239581400156E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.99995420848084	WITHOUT_CLASSIFICATION	4.57915191599177E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999995926995878	WITHOUT_CLASSIFICATION	4.073004122015261E-6	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999992350763471	WITHOUT_CLASSIFICATION	7.649236528653206E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999978339231923	WITHOUT_CLASSIFICATION	2.166076807673894E-6	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999993920221018	WITHOUT_CLASSIFICATION	6.079778982944089E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999995680468209	WITHOUT_CLASSIFICATION	4.3195317901851126E-7	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998117309746	WITHOUT_CLASSIFICATION	1.8826902541585375E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999997235832855	WITHOUT_CLASSIFICATION	2.7641671456746806E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999896823435	WITHOUT_CLASSIFICATION	1.0317656500036112E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999981940965249	WITHOUT_CLASSIFICATION	1.8059034751124207E-5	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999395545143767	WITHOUT_CLASSIFICATION	6.0445485623344266E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999996309768923	WITHOUT_CLASSIFICATION	3.690231076157538E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999988597914203	WITHOUT_CLASSIFICATION	1.1402085797115494E-6	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999891421053283	WITHOUT_CLASSIFICATION	1.0857894671748911E-5	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998950628848485	WITHOUT_CLASSIFICATION	1.049371151514249E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9998932881842318	WITHOUT_CLASSIFICATION	1.0671181576816789E-4	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999704221006277	WITHOUT_CLASSIFICATION	2.9577899372229856E-5	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999706312941428	WITHOUT_CLASSIFICATION	2.9368705857226202E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999787028526367	WITHOUT_CLASSIFICATION	2.1297147363289482E-5	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999993178921784	WITHOUT_CLASSIFICATION	6.821078215013349E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999865681468424	WITHOUT_CLASSIFICATION	1.3431853157532669E-5	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999906961749634	WITHOUT_CLASSIFICATION	9.3038250366882E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999992747285209	WITHOUT_CLASSIFICATION	7.252714791817123E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999942103588	WITHOUT_CLASSIFICATION	5.789641194204188E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999989165912643	WITHOUT_CLASSIFICATION	1.0834087356475606E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999706312941428	WITHOUT_CLASSIFICATION	2.9368705857226202E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999787028526367	WITHOUT_CLASSIFICATION	2.1297147363289482E-5	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999986644927239	WITHOUT_CLASSIFICATION	1.3355072761821168E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999665421240482	WITHOUT_CLASSIFICATION	3.34578759517002E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999996637527796	WITHOUT_CLASSIFICATION	3.3624722040228288E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999922265416851	WITHOUT_CLASSIFICATION	7.773458314911291E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999977371958777	WITHOUT_CLASSIFICATION	2.2628041222725596E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999997226983887	WITHOUT_CLASSIFICATION	2.7730161135022975E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999715631411293	WITHOUT_CLASSIFICATION	2.843685887065333E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999393648526775	WITHOUT_CLASSIFICATION	6.063514732253957E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999958944482695	WITHOUT_CLASSIFICATION	4.1055517304583915E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999912886274404	WITHOUT_CLASSIFICATION	8.711372559679147E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999996643759682	WITHOUT_CLASSIFICATION	3.356240318736723E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999912886274404	WITHOUT_CLASSIFICATION	8.711372559679147E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999999880994678	WITHOUT_CLASSIFICATION	1.1900532205717736E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999993989636741	WITHOUT_CLASSIFICATION	6.010363258947981E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999997946343078	WITHOUT_CLASSIFICATION	2.053656922582634E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977715081313	WITHOUT_CLASSIFICATION	2.2284918686977642E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999961068662847	WITHOUT_CLASSIFICATION	3.893133715335227E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9996509033171359	WITHOUT_CLASSIFICATION	3.49096682864143E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9996509033171359	WITHOUT_CLASSIFICATION	3.49096682864143E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999884012304125	WITHOUT_CLASSIFICATION	1.15987695874834E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.99999356163507	WITHOUT_CLASSIFICATION	6.438364929933126E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999972312537603	WITHOUT_CLASSIFICATION	2.7687462397103538E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999976761609489	WITHOUT_CLASSIFICATION	2.3238390510965846E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999842794179195	WITHOUT_CLASSIFICATION	1.5720582080490956E-5	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999998409528668	WITHOUT_CLASSIFICATION	1.5904713319480424E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999765824363849	WITHOUT_CLASSIFICATION	2.341756361509159E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999937119553484	WITHOUT_CLASSIFICATION	6.288044651552578E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999439908950716	WITHOUT_CLASSIFICATION	5.600910492842204E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999371141701133	WITHOUT_CLASSIFICATION	6.288582988676943E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999438729253949	WITHOUT_CLASSIFICATION	5.6127074605105615E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999971770640168	WITHOUT_CLASSIFICATION	2.8229359832376265E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9998630792714936	WITHOUT_CLASSIFICATION	1.3692072850641354E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999789254635276	WITHOUT_CLASSIFICATION	2.1074536472288805E-5	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999962631557879	WITHOUT_CLASSIFICATION	3.736844211938632E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999991624709966	WITHOUT_CLASSIFICATION	8.375290033077976E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999965055181251	WITHOUT_CLASSIFICATION	3.4944818747313484E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999974646737791	WITHOUT_CLASSIFICATION	2.5353262207930947E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999969567420747	WITHOUT_CLASSIFICATION	3.043257925261726E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997284030507873	WITHOUT_CLASSIFICATION	2.7159694921276035E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999979117854984	WITHOUT_CLASSIFICATION	2.0882145016856987E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999392658168408	WITHOUT_CLASSIFICATION	6.073418315918279E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999972052902837	WITHOUT_CLASSIFICATION	2.794709716417153E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999917284429736	WITHOUT_CLASSIFICATION	8.271557026454382E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999899067819314	WITHOUT_CLASSIFICATION	1.0093218068671095E-5	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997723459755375	WITHOUT_CLASSIFICATION	2.2765402446243198E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999993046757656	WITHOUT_CLASSIFICATION	6.953242343108678E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999960292284883	WITHOUT_CLASSIFICATION	3.970771511732752E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999987563875289	WITHOUT_CLASSIFICATION	1.243612471100589E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999984128002377	WITHOUT_CLASSIFICATION	1.5871997622247492E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999984400349904	WITHOUT_CLASSIFICATION	1.5599650094888698E-6	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999987617551288	WITHOUT_CLASSIFICATION	1.2382448711308406E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999765824363849	WITHOUT_CLASSIFICATION	2.341756361509159E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999931617825666	WITHOUT_CLASSIFICATION	6.838217433445742E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9997139441797892	WITHOUT_CLASSIFICATION	2.8605582021076103E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9999891414092983	WITHOUT_CLASSIFICATION	1.0858590701817359E-5	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999675230772666	WITHOUT_CLASSIFICATION	3.247692273346779E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999980070668995	WITHOUT_CLASSIFICATION	1.9929331006341043E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999911086684653	WITHOUT_CLASSIFICATION	8.891331534793932E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999976761609489	WITHOUT_CLASSIFICATION	2.3238390510965846E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999976761609489	WITHOUT_CLASSIFICATION	2.3238390510965846E-5	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999979077858152	WITHOUT_CLASSIFICATION	2.0922141848048492E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999859987009437	WITHOUT_CLASSIFICATION	1.4001299056174202E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999625067618316	WITHOUT_CLASSIFICATION	3.749323816841052E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999918124975471	WITHOUT_CLASSIFICATION	8.187502452890795E-6	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999927205033173	WITHOUT_CLASSIFICATION	7.27949668254985E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999942024380478	WITHOUT_CLASSIFICATION	5.7975619521403375E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999937977896652	WITHOUT_CLASSIFICATION	6.202210334791671E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999962726768842	WITHOUT_CLASSIFICATION	3.7273231156964796E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999983999983896	WITHOUT_CLASSIFICATION	1.6000016103966606E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999975091500294	WITHOUT_CLASSIFICATION	2.490849970684206E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999931404921564	WITHOUT_CLASSIFICATION	6.859507843659363E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994858680599763	WITHOUT_CLASSIFICATION	5.14131940023595E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998924163853137	WITHOUT_CLASSIFICATION	1.0758361468627711E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999975091500294	WITHOUT_CLASSIFICATION	2.490849970684206E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999901893555618	WITHOUT_CLASSIFICATION	9.810644438115047E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999985230396342	WITHOUT_CLASSIFICATION	1.4769603656926287E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999926105635577	WITHOUT_CLASSIFICATION	7.389436442315828E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999686376779934	WITHOUT_CLASSIFICATION	3.136232200673443E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994858680599763	WITHOUT_CLASSIFICATION	5.14131940023595E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986307050993	WITHOUT_CLASSIFICATION	1.3692949007813162E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998799112385	WITHOUT_CLASSIFICATION	1.2008876143022417E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998005456988	WITHOUT_CLASSIFICATION	1.9945430125107471E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999973123721	WITHOUT_CLASSIFICATION	2.687627896449927E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9996217255298142	WITHOUT_CLASSIFICATION	3.782744701857486E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999744936500746	WITHOUT_CLASSIFICATION	2.5506349925370773E-5	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999959195554813	WITHOUT_CLASSIFICATION	4.080444518697721E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999212820281584	WITHOUT_CLASSIFICATION	7.871797184155085E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999962370392868	WITHOUT_CLASSIFICATION	3.7629607131694688E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999966175322694	WITHOUT_CLASSIFICATION	3.3824677306177575E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999986370579713	WITHOUT_CLASSIFICATION	1.362942028635687E-6	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999997274907917	WITHOUT_CLASSIFICATION	2.72509208300513E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999975091500294	WITHOUT_CLASSIFICATION	2.490849970684206E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986307050993	WITHOUT_CLASSIFICATION	1.3692949007813162E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998005456988	WITHOUT_CLASSIFICATION	1.9945430125107471E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999903513251075	WITHOUT_CLASSIFICATION	9.648674892464728E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999998580094613	WITHOUT_CLASSIFICATION	1.4199053866653185E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.999994011367005	WITHOUT_CLASSIFICATION	5.988632994944493E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994858680599763	WITHOUT_CLASSIFICATION	5.14131940023595E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999974739717465	WITHOUT_CLASSIFICATION	2.5260282534477674E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999407813240772	WITHOUT_CLASSIFICATION	5.921867592274017E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999403460318596	WITHOUT_CLASSIFICATION	5.9653968140373E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999930156818672	WITHOUT_CLASSIFICATION	6.984318132793691E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999212820281584	WITHOUT_CLASSIFICATION	7.871797184155085E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999901893555618	WITHOUT_CLASSIFICATION	9.810644438115047E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999590049650512	WITHOUT_CLASSIFICATION	4.099503494891011E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999938907074928	WITHOUT_CLASSIFICATION	6.1092925072238735E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999305099919292	WITHOUT_CLASSIFICATION	6.949000807068312E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999795796229528	WITHOUT_CLASSIFICATION	2.0420377047278956E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999935720186255	WITHOUT_CLASSIFICATION	6.427981374501659E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999858143147755	WITHOUT_CLASSIFICATION	1.4185685224481901E-5	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999189542830075	WITHOUT_CLASSIFICATION	8.104571699251505E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977715081313	WITHOUT_CLASSIFICATION	2.2284918686977642E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911659638485	WITHOUT_CLASSIFICATION	8.83403615157515E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999994511161971	WITHOUT_CLASSIFICATION	5.48883802952202E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999970810776082	WITHOUT_CLASSIFICATION	2.9189223917881774E-6	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999970097108332	WITHOUT_CLASSIFICATION	2.9902891668854966E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999969130492896	WITHOUT_CLASSIFICATION	3.086950710386643E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999985546906798	WITHOUT_CLASSIFICATION	1.4453093201514714E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999713916553875	WITHOUT_CLASSIFICATION	2.8608344612483797E-5	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999973996690447	WITHOUT_CLASSIFICATION	2.600330955410246E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999930156818672	WITHOUT_CLASSIFICATION	6.984318132793691E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999164855746041	WITHOUT_CLASSIFICATION	8.351442539595261E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999648463893491	WITHOUT_CLASSIFICATION	3.5153610650883585E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9996777543078629	WITHOUT_CLASSIFICATION	3.2224569213718554E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999457342675241	WITHOUT_CLASSIFICATION	5.426573247589465E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9998901379166171	WITHOUT_CLASSIFICATION	1.0986208338298547E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999998576684001	WITHOUT_CLASSIFICATION	1.4233159989949797E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999962566151999	WITHOUT_CLASSIFICATION	3.7433848001232182E-6	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999763743079354	WITHOUT_CLASSIFICATION	2.362569206455204E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999982205849014	WITHOUT_CLASSIFICATION	1.7794150986401602E-6	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999995080469143	WITHOUT_CLASSIFICATION	4.919530858054519E-7	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999780759072384	WITHOUT_CLASSIFICATION	2.1924092761584444E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999926707361158	WITHOUT_CLASSIFICATION	7.329263884255676E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999987472561785	WITHOUT_CLASSIFICATION	1.2527438213974663E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998882738063467	WITHOUT_CLASSIFICATION	1.1172619365331546E-4	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999667498201	WITHOUT_CLASSIFICATION	3.325017999393875E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999973584365021	WITHOUT_CLASSIFICATION	2.6415634979413372E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999995278540124	WITHOUT_CLASSIFICATION	4.72145987706347E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999984932658188	WITHOUT_CLASSIFICATION	1.5067341812881582E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999980276413265	WITHOUT_CLASSIFICATION	1.9723586735659326E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999726112993678	WITHOUT_CLASSIFICATION	2.738870063218988E-5	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999631906351562	WITHOUT_CLASSIFICATION	3.680936484389881E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999947791630713	WITHOUT_CLASSIFICATION	5.2208369286689385E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999880116072882	WITHOUT_CLASSIFICATION	1.1988392711684172E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999992136136118	WITHOUT_CLASSIFICATION	7.863863883256616E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999976725350087	WITHOUT_CLASSIFICATION	2.327464991316333E-6	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9999852060983512	WITHOUT_CLASSIFICATION	1.4793901648800387E-5	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999340920861434	WITHOUT_CLASSIFICATION	6.590791385665977E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999855052352883	WITHOUT_CLASSIFICATION	1.449476471178753E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999996452019025	WITHOUT_CLASSIFICATION	3.547980974974951E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999880138517477	WITHOUT_CLASSIFICATION	1.1986148252317728E-5	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999770803908	WITHOUT_CLASSIFICATION	2.291960919622751E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999995139434942	WITHOUT_CLASSIFICATION	4.860565058130001E-7	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999989082348648	WITHOUT_CLASSIFICATION	1.0917651351416823E-6	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999407563049	WITHOUT_CLASSIFICATION	5.924369506392386E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999994264782224	WITHOUT_CLASSIFICATION	5.735217775296334E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999938614539843	WITHOUT_CLASSIFICATION	6.1385460157429E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999964979318606	WITHOUT_CLASSIFICATION	3.5020681393396526E-6	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998534256138	WITHOUT_CLASSIFICATION	1.465743863082319E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999938614539843	WITHOUT_CLASSIFICATION	6.1385460157429E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999994264782224	WITHOUT_CLASSIFICATION	5.735217775296334E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999964979318606	WITHOUT_CLASSIFICATION	3.5020681393396526E-6	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999937101047488	WITHOUT_CLASSIFICATION	6.289895251259442E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999988624150693	WITHOUT_CLASSIFICATION	1.137584930630569E-6	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999713704761	WITHOUT_CLASSIFICATION	2.8629523888918094E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999845741446632	WITHOUT_CLASSIFICATION	1.542585533671372E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999757635689	WITHOUT_CLASSIFICATION	2.4236431075048447E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999993259887959	WITHOUT_CLASSIFICATION	6.740112040175551E-7	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999992981208012	WITHOUT_CLASSIFICATION	7.018791987896491E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999945324636655	WITHOUT_CLASSIFICATION	5.467536334493385E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999997274461689	WITHOUT_CLASSIFICATION	2.7255383110698838E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999895873678996	WITHOUT_CLASSIFICATION	1.041263210041454E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999882790335787	WITHOUT_CLASSIFICATION	1.172096642134113E-5	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999972934801374	WITHOUT_CLASSIFICATION	2.706519862582489E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999985310681093	WITHOUT_CLASSIFICATION	1.4689318905928363E-6	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999390160044669	WITHOUT_CLASSIFICATION	6.098399553318681E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999742759541	WITHOUT_CLASSIFICATION	2.572404591940791E-8	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999992898814613	WITHOUT_CLASSIFICATION	7.101185387422597E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999356019139	WITHOUT_CLASSIFICATION	6.439808611599259E-8	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999998070823782	WITHOUT_CLASSIFICATION	1.929176217595725E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999339216673	WITHOUT_CLASSIFICATION	6.607833269879435E-8	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999993494866818	WITHOUT_CLASSIFICATION	6.505133181425172E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999988831446512	WITHOUT_CLASSIFICATION	1.116855348706401E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996495573261	WITHOUT_CLASSIFICATION	3.504426738603716E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999932600295406	WITHOUT_CLASSIFICATION	6.7399704594868495E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999995007792656	WITHOUT_CLASSIFICATION	4.992207343981729E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991082264644	WITHOUT_CLASSIFICATION	8.917735356815661E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991082264644	WITHOUT_CLASSIFICATION	8.917735356815661E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999992908413007	WITHOUT_CLASSIFICATION	7.09158699272302E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999992908413007	WITHOUT_CLASSIFICATION	7.09158699272302E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999843646405258	WITHOUT_CLASSIFICATION	1.5635359474310882E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999356019139	WITHOUT_CLASSIFICATION	6.439808611599259E-8	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999962634820492	WITHOUT_CLASSIFICATION	3.7365179507828827E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999989637950556	WITHOUT_CLASSIFICATION	1.0362049443761538E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999665251816034	WITHOUT_CLASSIFICATION	3.347481839661184E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999665251816034	WITHOUT_CLASSIFICATION	3.347481839661184E-5	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999978871963547	WITHOUT_CLASSIFICATION	2.11280364525392E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999979009134925	WITHOUT_CLASSIFICATION	2.0990865075657255E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999985119391666	WITHOUT_CLASSIFICATION	1.4880608333472133E-6	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999923975757854	WITHOUT_CLASSIFICATION	7.602424214686808E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999930726806978	WITHOUT_CLASSIFICATION	6.9273193020964445E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999981427129	WITHOUT_CLASSIFICATION	1.857287132451116E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999720549625354	WITHOUT_CLASSIFICATION	2.794503746461405E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999985079490894	WITHOUT_CLASSIFICATION	1.492050910563735E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.999921372583664	WITHOUT_CLASSIFICATION	7.862741633602321E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999995867209279	WITHOUT_CLASSIFICATION	4.1327907216380926E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999888108949567	WITHOUT_CLASSIFICATION	1.1189105043323536E-5	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999791031802102	WITHOUT_CLASSIFICATION	2.0896819789669292E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999831510623598	WITHOUT_CLASSIFICATION	1.6848937640161154E-5	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999346095917294	WITHOUT_CLASSIFICATION	6.539040827057747E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999937646863861	WITHOUT_CLASSIFICATION	6.235313613884736E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999995305179087	WITHOUT_CLASSIFICATION	4.6948209132307653E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707694444321	WITHOUT_CLASSIFICATION	2.9230555567975274E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999998381126317	WITHOUT_CLASSIFICATION	1.6188736830889344E-7	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999089609097	WITHOUT_CLASSIFICATION	9.103909026301476E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999779860049	WITHOUT_CLASSIFICATION	2.201399517282092E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995070997602	WITHOUT_CLASSIFICATION	4.929002397999776E-7	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999981693554727	WITHOUT_CLASSIFICATION	1.8306445273169832E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999975728553939	WITHOUT_CLASSIFICATION	2.427144606156811E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999137613882	WITHOUT_CLASSIFICATION	8.623861179727345E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996077829115483	WITHOUT_CLASSIFICATION	3.9221708845172006E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999728277936	WITHOUT_CLASSIFICATION	2.717220639249472E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999926707361158	WITHOUT_CLASSIFICATION	7.329263884255676E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999950378419348	WITHOUT_CLASSIFICATION	4.9621580651904184E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999999658345999	WITHOUT_CLASSIFICATION	3.416540005638728E-8	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647769796016	WITHOUT_CLASSIFICATION	3.522302039834477E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991340833448	WITHOUT_CLASSIFICATION	8.659166551900479E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999376937007636	WITHOUT_CLASSIFICATION	6.230629923649558E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999376937007636	WITHOUT_CLASSIFICATION	6.230629923649558E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999990181534061	WITHOUT_CLASSIFICATION	9.818465939240331E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999512508844294	WITHOUT_CLASSIFICATION	4.874911557057827E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999851004835357	WITHOUT_CLASSIFICATION	1.4899516464343877E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999851004835357	WITHOUT_CLASSIFICATION	1.4899516464343877E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999985987636062	WITHOUT_CLASSIFICATION	1.4012363938627566E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999984971290062	WITHOUT_CLASSIFICATION	1.5028709937297866E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999883099296777	WITHOUT_CLASSIFICATION	1.1690070322240804E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999988477646104	WITHOUT_CLASSIFICATION	1.152235389596271E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999442217204894	WITHOUT_CLASSIFICATION	5.5778279510549045E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999982312744516	WITHOUT_CLASSIFICATION	1.7687255482583487E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999784755244397	WITHOUT_CLASSIFICATION	2.1524475560209846E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999941169347007	WITHOUT_CLASSIFICATION	5.883065299302069E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991907918451	WITHOUT_CLASSIFICATION	8.092081549615227E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991907918451	WITHOUT_CLASSIFICATION	8.092081549615227E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999998897630963	WITHOUT_CLASSIFICATION	1.1023690361488089E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999970290229352	WITHOUT_CLASSIFICATION	2.9709770647550492E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999970290229352	WITHOUT_CLASSIFICATION	2.9709770647550492E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993410289306	WITHOUT_CLASSIFICATION	6.589710693932955E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999992890051862	WITHOUT_CLASSIFICATION	7.109948138002227E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997674934080273	WITHOUT_CLASSIFICATION	2.3250659197262866E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999904395872855	WITHOUT_CLASSIFICATION	9.560412714403578E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999940046862421	WITHOUT_CLASSIFICATION	5.995313757915252E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999977923762163	WITHOUT_CLASSIFICATION	2.207623783644795E-6	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999986136552386	WITHOUT_CLASSIFICATION	1.3863447613645795E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999844221581862	WITHOUT_CLASSIFICATION	1.5577841813827352E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999976757532942	WITHOUT_CLASSIFICATION	2.3242467057379504E-6	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999900541735973	WITHOUT_CLASSIFICATION	9.945826402814838E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998819346071	WITHOUT_CLASSIFICATION	1.1806539284562766E-7	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999154303753	WITHOUT_CLASSIFICATION	8.456962470118656E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999507051168316	WITHOUT_CLASSIFICATION	4.92948831683978E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999507051168316	WITHOUT_CLASSIFICATION	4.92948831683978E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999507051168316	WITHOUT_CLASSIFICATION	4.92948831683978E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999507051168316	WITHOUT_CLASSIFICATION	4.92948831683978E-4	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999997014686826	WITHOUT_CLASSIFICATION	2.9853131739409853E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999993958109895	WITHOUT_CLASSIFICATION	6.041890104171534E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999400472023872	WITHOUT_CLASSIFICATION	5.9952797612773183E-5	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9996170139377346	WITHOUT_CLASSIFICATION	3.8298606226540305E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999929338832996	WITHOUT_CLASSIFICATION	7.066116700434611E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999832067168671	WITHOUT_CLASSIFICATION	1.6793283132862817E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999946166868698	WITHOUT_CLASSIFICATION	5.383313130190391E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999655981436746	WITHOUT_CLASSIFICATION	3.44018563254938E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999993296029601	WITHOUT_CLASSIFICATION	6.703970398411976E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999989147355268	WITHOUT_CLASSIFICATION	1.08526447319601E-6	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999924021041938	WITHOUT_CLASSIFICATION	7.597895806201352E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983340422208	WITHOUT_CLASSIFICATION	1.665957779231871E-6	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999976394625917	WITHOUT_CLASSIFICATION	2.3605374083945334E-6	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996792301359	WITHOUT_CLASSIFICATION	3.207698640437942E-7	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999975286486551	WITHOUT_CLASSIFICATION	2.47135134492003E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983340422208	WITHOUT_CLASSIFICATION	1.665957779231871E-6	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999996431834027	WITHOUT_CLASSIFICATION	3.5681659726146714E-7	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999998834804538	WITHOUT_CLASSIFICATION	1.1651954619971401E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999993813338203	WITHOUT_CLASSIFICATION	6.18666179809204E-7	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999991962732138	WITHOUT_CLASSIFICATION	8.037267863405784E-7	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999610183133	WITHOUT_CLASSIFICATION	3.8981686671917704E-8	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999984818264833	WITHOUT_CLASSIFICATION	1.5181735167008952E-6	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999520024392	WITHOUT_CLASSIFICATION	4.79975607965375E-7	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999932659063636	WITHOUT_CLASSIFICATION	6.734093636314131E-6	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985317533111	WITHOUT_CLASSIFICATION	1.4682466888376763E-6	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999976211598771	WITHOUT_CLASSIFICATION	2.3788401227955372E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982017326897	WITHOUT_CLASSIFICATION	1.7982673102197913E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999997574606092	WITHOUT_CLASSIFICATION	2.4253939080527583E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999978169182305	WITHOUT_CLASSIFICATION	2.183081769495725E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999721471467684	WITHOUT_CLASSIFICATION	2.7852853231525184E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990698693977	WITHOUT_CLASSIFICATION	9.301306022422863E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999994175515144	WITHOUT_CLASSIFICATION	5.82448485636399E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999272578517	WITHOUT_CLASSIFICATION	7.274214830427636E-8	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999980804909253	WITHOUT_CLASSIFICATION	1.919509074719348E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999995278792433	WITHOUT_CLASSIFICATION	4.7212075667546765E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999980804909253	WITHOUT_CLASSIFICATION	1.919509074719348E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999981947413967	WITHOUT_CLASSIFICATION	1.8052586032829052E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999984055636768	WITHOUT_CLASSIFICATION	1.5944363231527898E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999696728802252	WITHOUT_CLASSIFICATION	3.032711977488091E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999958549375283	WITHOUT_CLASSIFICATION	4.14506247169282E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999272578517	WITHOUT_CLASSIFICATION	7.274214830427636E-8	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999995278792433	WITHOUT_CLASSIFICATION	4.7212075667546765E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999981947413967	WITHOUT_CLASSIFICATION	1.8052586032829052E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999987769390302	WITHOUT_CLASSIFICATION	1.2230609698827565E-6	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999488698013568	WITHOUT_CLASSIFICATION	5.113019864317117E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999468560467462	WITHOUT_CLASSIFICATION	5.314395325381862E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.999975961909518	WITHOUT_CLASSIFICATION	2.403809048210067E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999991078051639	WITHOUT_CLASSIFICATION	8.921948361646935E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.99999946766656	WITHOUT_CLASSIFICATION	5.323334400293064E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707694444321	WITHOUT_CLASSIFICATION	2.9230555567975274E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999984055636768	WITHOUT_CLASSIFICATION	1.5944363231527898E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999979603765354	WITHOUT_CLASSIFICATION	2.0396234645055757E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999940261253244	WITHOUT_CLASSIFICATION	5.973874675610782E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999975251853385	WITHOUT_CLASSIFICATION	2.474814661538278E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707694444321	WITHOUT_CLASSIFICATION	2.9230555567975274E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999954722216362	WITHOUT_CLASSIFICATION	4.527778363792653E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707694444321	WITHOUT_CLASSIFICATION	2.9230555567975274E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999981412929484	WITHOUT_CLASSIFICATION	1.8587070514935044E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999996828083674	WITHOUT_CLASSIFICATION	3.171916326035631E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999955302068064	WITHOUT_CLASSIFICATION	4.4697931936503775E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999353631835061	WITHOUT_CLASSIFICATION	6.463681649383833E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998546004799	WITHOUT_CLASSIFICATION	1.4539952010199388E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999958184608528	WITHOUT_CLASSIFICATION	4.181539147072108E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999998410282598	WITHOUT_CLASSIFICATION	1.589717401704059E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999784275636575	WITHOUT_CLASSIFICATION	2.15724363425358E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999701226347072	WITHOUT_CLASSIFICATION	2.987736529275036E-5	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999947527590151	WITHOUT_CLASSIFICATION	5.247240984978904E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997492829334194	WITHOUT_CLASSIFICATION	2.507170665806153E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997647511097	WITHOUT_CLASSIFICATION	2.3524889021903858E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997674934080273	WITHOUT_CLASSIFICATION	2.3250659197262866E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999921040071126	WITHOUT_CLASSIFICATION	7.89599288741423E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999996809994547	WITHOUT_CLASSIFICATION	3.190005453862925E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999645964174424	WITHOUT_CLASSIFICATION	3.540358255758424E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999397466683814	WITHOUT_CLASSIFICATION	6.025333161878967E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999986870966223	WITHOUT_CLASSIFICATION	1.3129033776480173E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995947015697	WITHOUT_CLASSIFICATION	4.052984301877359E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999997881975318	WITHOUT_CLASSIFICATION	2.1180246810788514E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999934182699577	WITHOUT_CLASSIFICATION	6.581730042282299E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999774230059	WITHOUT_CLASSIFICATION	2.2576994100510768E-7	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999985753753552	WITHOUT_CLASSIFICATION	1.4246246449046159E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9997677090048833	WITHOUT_CLASSIFICATION	2.3229099511659857E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999974183400984	WITHOUT_CLASSIFICATION	2.5816599016294127E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999972702242984	WITHOUT_CLASSIFICATION	2.729775701700755E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999896491924616	WITHOUT_CLASSIFICATION	1.0350807538372264E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999962645757136	WITHOUT_CLASSIFICATION	3.735424286427924E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998194784574047	WITHOUT_CLASSIFICATION	1.8052154259528506E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999995353645617	WITHOUT_CLASSIFICATION	4.64635438361686E-7	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999996396663614	WITHOUT_CLASSIFICATION	3.6033363854195033E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999981079788086	WITHOUT_CLASSIFICATION	1.8920211913016225E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999149808567226	WITHOUT_CLASSIFICATION	8.501914327746776E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999692632188325	WITHOUT_CLASSIFICATION	3.0736781167496444E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9997735933440126	WITHOUT_CLASSIFICATION	2.2640665598724829E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999816685630583	WITHOUT_CLASSIFICATION	1.8331436941780396E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999758394623669	WITHOUT_CLASSIFICATION	2.4160537633091823E-5	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999552993163888	WITHOUT_CLASSIFICATION	4.470068361122176E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999856553795466	WITHOUT_CLASSIFICATION	1.4344620453333339E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999998044864845	WITHOUT_CLASSIFICATION	1.9551351542463702E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994520721823331	WITHOUT_CLASSIFICATION	5.479278176669368E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998965881202	WITHOUT_CLASSIFICATION	1.0341187980755043E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999987002585085	WITHOUT_CLASSIFICATION	1.2997414914390732E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999467553382085	WITHOUT_CLASSIFICATION	5.324466179153611E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999467553382085	WITHOUT_CLASSIFICATION	5.324466179153611E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999873777993	WITHOUT_CLASSIFICATION	1.2622200684967938E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999784275636575	WITHOUT_CLASSIFICATION	2.15724363425358E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999919680601835	WITHOUT_CLASSIFICATION	8.031939816433745E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999904055344202	WITHOUT_CLASSIFICATION	9.594465579684931E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999997589809629	WITHOUT_CLASSIFICATION	2.41019037021532E-7	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999974341709519	WITHOUT_CLASSIFICATION	2.565829048252516E-6	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999566664680216	WITHOUT_CLASSIFICATION	4.333353197844331E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9996987932168533	WITHOUT_CLASSIFICATION	3.012067831467864E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999973986981269	WITHOUT_CLASSIFICATION	2.6013018731697012E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999995316826678	WITHOUT_CLASSIFICATION	4.683173322002279E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999991764508035	WITHOUT_CLASSIFICATION	8.235491965418624E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999881042416384	WITHOUT_CLASSIFICATION	1.1895758361513266E-5	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998841807827	WITHOUT_CLASSIFICATION	1.1581921729209109E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999992593763694	WITHOUT_CLASSIFICATION	7.406236306179711E-7	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999986932404887	WITHOUT_CLASSIFICATION	1.3067595112621574E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999838442479	WITHOUT_CLASSIFICATION	1.6155752040502422E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999985471551063	WITHOUT_CLASSIFICATION	1.4528448937045742E-5	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993057961557	WITHOUT_CLASSIFICATION	6.942038442047268E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999997836687202	WITHOUT_CLASSIFICATION	2.1633127976172854E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998620527302	WITHOUT_CLASSIFICATION	1.37947269848804E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999997349021752	WITHOUT_CLASSIFICATION	2.650978248185667E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999992793180191	WITHOUT_CLASSIFICATION	7.206819809732597E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999990701028684	WITHOUT_CLASSIFICATION	9.298971316915124E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997015364606	WITHOUT_CLASSIFICATION	2.9846353943538866E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994520721823331	WITHOUT_CLASSIFICATION	5.479278176669368E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999981381511995	WITHOUT_CLASSIFICATION	1.861848800525417E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999996828929065	WITHOUT_CLASSIFICATION	3.1710709347559196E-7	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999989502692028	WITHOUT_CLASSIFICATION	1.0497307971868285E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999952219352227	WITHOUT_CLASSIFICATION	4.778064777303765E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999988564215528	WITHOUT_CLASSIFICATION	1.1435784471464584E-6	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997461385017	WITHOUT_CLASSIFICATION	2.538614982038162E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999993419082344	WITHOUT_CLASSIFICATION	6.580917656122007E-6	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999876340176788	WITHOUT_CLASSIFICATION	1.2365982321201764E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999955471839297	WITHOUT_CLASSIFICATION	4.452816070267353E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999924653407752	WITHOUT_CLASSIFICATION	7.534659224833046E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999959179276015	WITHOUT_CLASSIFICATION	4.082072398578089E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999984294134826	WITHOUT_CLASSIFICATION	1.5705865173543945E-6	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999918706318889	WITHOUT_CLASSIFICATION	8.129368111067452E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999998310597599	WITHOUT_CLASSIFICATION	1.6894024011181952E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999213477876	WITHOUT_CLASSIFICATION	7.865221243720729E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999213477876	WITHOUT_CLASSIFICATION	7.865221243720729E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999799913248931	WITHOUT_CLASSIFICATION	2.0008675106899856E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999898534085514	WITHOUT_CLASSIFICATION	1.014659144861909E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999962460264575	WITHOUT_CLASSIFICATION	3.753973542397714E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999962460264575	WITHOUT_CLASSIFICATION	3.753973542397714E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999910653797595	WITHOUT_CLASSIFICATION	8.934620240603765E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999688510541702	WITHOUT_CLASSIFICATION	3.114894582976006E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999138036896	WITHOUT_CLASSIFICATION	8.619631049592015E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999998988501214	WITHOUT_CLASSIFICATION	1.0114987866508487E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999983141311962	WITHOUT_CLASSIFICATION	1.6858688038001986E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999985427784218	WITHOUT_CLASSIFICATION	1.4572215782150547E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977188514618	WITHOUT_CLASSIFICATION	2.2811485381250976E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977188514618	WITHOUT_CLASSIFICATION	2.2811485381250976E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999873174789771	WITHOUT_CLASSIFICATION	1.2682521022941369E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999988249957633	WITHOUT_CLASSIFICATION	1.1750042366791416E-6	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999477313544095	WITHOUT_CLASSIFICATION	5.2268645590550476E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999861808396864	WITHOUT_CLASSIFICATION	1.3819160313775433E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999861808396864	WITHOUT_CLASSIFICATION	1.3819160313775433E-5	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999914137372659	WITHOUT_CLASSIFICATION	8.58626273421292E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999965911166194	WITHOUT_CLASSIFICATION	3.408883380421091E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999212758888	WITHOUT_CLASSIFICATION	7.87241112551698E-8	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999833848674361	WITHOUT_CLASSIFICATION	1.6615132563812032E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999992378706339	WITHOUT_CLASSIFICATION	7.621293660545977E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999714737707857	WITHOUT_CLASSIFICATION	2.852622921431224E-5	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999978753868329	WITHOUT_CLASSIFICATION	2.1246131671237223E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999950154474315	WITHOUT_CLASSIFICATION	4.984552568450441E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999918820243704	WITHOUT_CLASSIFICATION	8.117975629652406E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999889196036746	WITHOUT_CLASSIFICATION	1.1080396325437626E-5	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999998330018992	WITHOUT_CLASSIFICATION	1.6699810079910988E-6	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999996023051846	WITHOUT_CLASSIFICATION	3.976948154155423E-7	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999358644288857	WITHOUT_CLASSIFICATION	6.413557111432172E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999993852530706	WITHOUT_CLASSIFICATION	6.1474692944184E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999664364182376	WITHOUT_CLASSIFICATION	3.356358176249482E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999997459231372	WITHOUT_CLASSIFICATION	2.5407686274559144E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999975956722624	WITHOUT_CLASSIFICATION	2.404327737591261E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999984567625466	WITHOUT_CLASSIFICATION	1.5432374533160745E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999998669019344	WITHOUT_CLASSIFICATION	1.330980655659832E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999978677841715	WITHOUT_CLASSIFICATION	2.1322158284871027E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999987449166913	WITHOUT_CLASSIFICATION	1.255083308703605E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999941641008734	WITHOUT_CLASSIFICATION	5.8358991265184315E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999749247919149	WITHOUT_CLASSIFICATION	2.507520808516647E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999823589597644	WITHOUT_CLASSIFICATION	1.7641040235644897E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9998497286253667	WITHOUT_CLASSIFICATION	1.502713746333631E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999971580899277	WITHOUT_CLASSIFICATION	2.8419100724011433E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999979428503075	WITHOUT_CLASSIFICATION	2.0571496924854825E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998474505418965	WITHOUT_CLASSIFICATION	1.5254945810362945E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999988386494864	WITHOUT_CLASSIFICATION	1.161350513571345E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999937036039852	WITHOUT_CLASSIFICATION	6.296396014745934E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998648370517	WITHOUT_CLASSIFICATION	1.3516294827089956E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999993861726721	WITHOUT_CLASSIFICATION	6.138273278875535E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999977483456952	WITHOUT_CLASSIFICATION	2.2516543048555806E-6	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999795192088022	WITHOUT_CLASSIFICATION	2.048079119774089E-5	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999640000209614	WITHOUT_CLASSIFICATION	3.5999979038624116E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999510978724465	WITHOUT_CLASSIFICATION	4.8902127553544936E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999597468611853	WITHOUT_CLASSIFICATION	4.0253138814705345E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999906304931381	WITHOUT_CLASSIFICATION	9.369506861897527E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999947575635276	WITHOUT_CLASSIFICATION	5.2424364724615E-6	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999992225763294	WITHOUT_CLASSIFICATION	7.774236705007101E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999993290821864	WITHOUT_CLASSIFICATION	6.70917813633612E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999814144549306	WITHOUT_CLASSIFICATION	1.858554506937969E-5	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999803657361008	WITHOUT_CLASSIFICATION	1.963426389906494E-5	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999944888841952	WITHOUT_CLASSIFICATION	5.511115804840543E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999823550335746	WITHOUT_CLASSIFICATION	1.764496642537448E-5	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999341970780248	WITHOUT_CLASSIFICATION	6.580292197517338E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999718259610746	WITHOUT_CLASSIFICATION	2.8174038925393096E-5	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999938867135651	WITHOUT_CLASSIFICATION	6.113286434917877E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999998037437169	WITHOUT_CLASSIFICATION	1.9625628307232256E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999992690312642	WITHOUT_CLASSIFICATION	7.309687358196563E-7	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999971760131882	WITHOUT_CLASSIFICATION	2.823986811813186E-6	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999994036480692	WITHOUT_CLASSIFICATION	5.963519308393759E-7	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999999879435899	WITHOUT_CLASSIFICATION	1.2056410106394055E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999962708908	WITHOUT_CLASSIFICATION	3.729109224842388E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999680775778683	WITHOUT_CLASSIFICATION	3.1922422131578225E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999995573413315	WITHOUT_CLASSIFICATION	4.4265866840707774E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999921452477537	WITHOUT_CLASSIFICATION	7.854752246192362E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999941527883568	WITHOUT_CLASSIFICATION	5.847211643236567E-6	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999997555025737	WITHOUT_CLASSIFICATION	2.444974262906767E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999982111992067	WITHOUT_CLASSIFICATION	1.7888007932700374E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997936851673	WITHOUT_CLASSIFICATION	2.063148326327341E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997936851673	WITHOUT_CLASSIFICATION	2.063148326327341E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999618078728	WITHOUT_CLASSIFICATION	3.819212729887834E-8	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999997613408683	WITHOUT_CLASSIFICATION	2.3865913168036854E-7	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998876433887	WITHOUT_CLASSIFICATION	1.1235661142409212E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999398135424	WITHOUT_CLASSIFICATION	6.018645758955882E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998271045126	WITHOUT_CLASSIFICATION	1.728954873451323E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999980034140256	WITHOUT_CLASSIFICATION	1.9965859744341334E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999595013919	WITHOUT_CLASSIFICATION	4.0498607992883075E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998878039793	WITHOUT_CLASSIFICATION	1.1219602075103915E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999983628795582	WITHOUT_CLASSIFICATION	1.6371204417449328E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999986092830419	WITHOUT_CLASSIFICATION	1.3907169582008516E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999263975978	WITHOUT_CLASSIFICATION	7.360240221351672E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999398927023824	WITHOUT_CLASSIFICATION	6.010729761767209E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998542635421	WITHOUT_CLASSIFICATION	1.4573645788691924E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999993528985154	WITHOUT_CLASSIFICATION	6.471014846381463E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999838974489573	WITHOUT_CLASSIFICATION	1.610255104269339E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999838974489573	WITHOUT_CLASSIFICATION	1.610255104269339E-5	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999963794664232	WITHOUT_CLASSIFICATION	3.6205335767815557E-6	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999996658169057	WITHOUT_CLASSIFICATION	3.341830943482354E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999887521500456	WITHOUT_CLASSIFICATION	1.1247849954416127E-5	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999994627779567	WITHOUT_CLASSIFICATION	5.372220432984017E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982146848875	WITHOUT_CLASSIFICATION	1.785315112421812E-6	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999609019422259	WITHOUT_CLASSIFICATION	3.909805777403332E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999503219247624	WITHOUT_CLASSIFICATION	4.967807523747544E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999993319591838	WITHOUT_CLASSIFICATION	6.680408163142154E-7	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998640705734	WITHOUT_CLASSIFICATION	1.3592942662141821E-7	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999917786901	WITHOUT_CLASSIFICATION	8.221309776576484E-9	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999249513098	WITHOUT_CLASSIFICATION	7.504869008781576E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999957093639181	WITHOUT_CLASSIFICATION	4.2906360818024595E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999998496129628	WITHOUT_CLASSIFICATION	1.5038703714406472E-7	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994114135246	WITHOUT_CLASSIFICATION	5.885864753569794E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997854201848	WITHOUT_CLASSIFICATION	2.1457981523254704E-7	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998987975816	WITHOUT_CLASSIFICATION	1.0120241844401225E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999925190446	WITHOUT_CLASSIFICATION	7.48095541551058E-9	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999991783570295	WITHOUT_CLASSIFICATION	8.216429704719454E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999988455190263	WITHOUT_CLASSIFICATION	1.1544809737384542E-6	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999942949817	WITHOUT_CLASSIFICATION	5.705018351743919E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998080365348	WITHOUT_CLASSIFICATION	1.9196346523982436E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999913517703	WITHOUT_CLASSIFICATION	8.648229727706361E-9	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996079292901	WITHOUT_CLASSIFICATION	3.920707099072751E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998896720715635	WITHOUT_CLASSIFICATION	1.1032792843647404E-4	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999987708902377	WITHOUT_CLASSIFICATION	1.2291097623542754E-6	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999999575963922	WITHOUT_CLASSIFICATION	4.240360780294024E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998926958285	WITHOUT_CLASSIFICATION	1.0730417160970538E-7	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998049797674	WITHOUT_CLASSIFICATION	1.950202326687745E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999346685187	WITHOUT_CLASSIFICATION	6.533148128089302E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999995418207012	WITHOUT_CLASSIFICATION	4.5817929880255984E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999956364112234	WITHOUT_CLASSIFICATION	4.363588776734524E-6	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999989246085453	WITHOUT_CLASSIFICATION	1.0753914546810418E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999997987004936	WITHOUT_CLASSIFICATION	2.0129950633874623E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991054917073	WITHOUT_CLASSIFICATION	8.945082926387475E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999993025732355	WITHOUT_CLASSIFICATION	6.974267644742599E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998696991448	WITHOUT_CLASSIFICATION	1.3030085515850856E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994832056809	WITHOUT_CLASSIFICATION	5.167943190766152E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997845075671	WITHOUT_CLASSIFICATION	2.154924327900696E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999965651971328	WITHOUT_CLASSIFICATION	3.4348028673635224E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999141060998	WITHOUT_CLASSIFICATION	8.589390017072409E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999030280013	WITHOUT_CLASSIFICATION	9.697199858177481E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999030280013	WITHOUT_CLASSIFICATION	9.697199858177481E-8	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999995983288389	WITHOUT_CLASSIFICATION	4.016711611424654E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999710806144	WITHOUT_CLASSIFICATION	2.8919385554471774E-8	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999745283018	WITHOUT_CLASSIFICATION	2.5471698182128317E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999996498086198	WITHOUT_CLASSIFICATION	3.501913802357664E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999112474727	WITHOUT_CLASSIFICATION	8.875252739512527E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999990373470254	WITHOUT_CLASSIFICATION	9.626529745339206E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999998055506677	WITHOUT_CLASSIFICATION	1.9444933233980988E-7	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999991682283272	WITHOUT_CLASSIFICATION	8.317716727859552E-7	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999265361502	WITHOUT_CLASSIFICATION	7.346384974924185E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939389312477	WITHOUT_CLASSIFICATION	6.06106875239254E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949444483905	WITHOUT_CLASSIFICATION	5.055551609429153E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999974341725631	WITHOUT_CLASSIFICATION	2.565827436815605E-6	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999993937010659	WITHOUT_CLASSIFICATION	6.062989340244769E-7	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996095354965	WITHOUT_CLASSIFICATION	3.9046450346225435E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999181517976	WITHOUT_CLASSIFICATION	8.184820241147714E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999161792461	WITHOUT_CLASSIFICATION	8.382075390808889E-8	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999998327806981	WITHOUT_CLASSIFICATION	1.6721930190724044E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998838438835	WITHOUT_CLASSIFICATION	1.1615611650440012E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999999956867792	WITHOUT_CLASSIFICATION	4.313220797987877E-8	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999960436645	WITHOUT_CLASSIFICATION	3.9563355038237435E-8	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998997989702	WITHOUT_CLASSIFICATION	1.0020102987278148E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999994555346775	WITHOUT_CLASSIFICATION	5.44465322544834E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999562846523	WITHOUT_CLASSIFICATION	4.3715347629148054E-8	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999955603613463	WITHOUT_CLASSIFICATION	4.439638653731558E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999957495116876	WITHOUT_CLASSIFICATION	4.2504883123731165E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999974890680877	WITHOUT_CLASSIFICATION	2.5109319124009135E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999682926002	WITHOUT_CLASSIFICATION	3.170739986858937E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999964289114	WITHOUT_CLASSIFICATION	3.5710886157791794E-9	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999978128592	WITHOUT_CLASSIFICATION	2.1871408209163286E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999995908652299	WITHOUT_CLASSIFICATION	4.0913477002967146E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998482672076	WITHOUT_CLASSIFICATION	1.517327925447215E-7	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998775754133	WITHOUT_CLASSIFICATION	1.2242458673106272E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999952133172	WITHOUT_CLASSIFICATION	4.7866827910344995E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997776164464	WITHOUT_CLASSIFICATION	2.2238355351180818E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999977932317	WITHOUT_CLASSIFICATION	2.20676830393233E-9	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999393413207	WITHOUT_CLASSIFICATION	6.065867928494973E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999454253691	WITHOUT_CLASSIFICATION	5.4574630835834614E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999798537601	WITHOUT_CLASSIFICATION	2.014623980558394E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999999978953564	WITHOUT_CLASSIFICATION	2.1046435953610115E-8	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999527422465204	WITHOUT_CLASSIFICATION	4.725775347958598E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999804635122	WITHOUT_CLASSIFICATION	1.9536487814361815E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999934921743	WITHOUT_CLASSIFICATION	6.507825700248456E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997272526799	WITHOUT_CLASSIFICATION	2.727473199903576E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999999950563166	WITHOUT_CLASSIFICATION	4.943683396715424E-8	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999923016475	WITHOUT_CLASSIFICATION	7.698352557196937E-9	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999996614841938	WITHOUT_CLASSIFICATION	3.385158062301389E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999557166516	WITHOUT_CLASSIFICATION	4.4283348469536474E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998542635421	WITHOUT_CLASSIFICATION	1.4573645788691924E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998095228771	WITHOUT_CLASSIFICATION	1.9047712279692588E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998580242745	WITHOUT_CLASSIFICATION	1.4197572552047566E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999998054376386	WITHOUT_CLASSIFICATION	1.9456236159472158E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999894069483	WITHOUT_CLASSIFICATION	1.0593051698638637E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999998304618094	WITHOUT_CLASSIFICATION	1.6953819064324256E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999039811842	WITHOUT_CLASSIFICATION	9.601881574136716E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999357515809	WITHOUT_CLASSIFICATION	6.424841922096651E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998868264871	WITHOUT_CLASSIFICATION	1.1317351282240252E-7	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999973263961711	WITHOUT_CLASSIFICATION	2.6736038289381818E-6	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999991583272493	WITHOUT_CLASSIFICATION	8.416727507151019E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999984962183	WITHOUT_CLASSIFICATION	1.503781596275597E-9	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999987095537352	WITHOUT_CLASSIFICATION	1.2904462648362929E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999582999475	WITHOUT_CLASSIFICATION	4.1700052528337594E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999629956112	WITHOUT_CLASSIFICATION	3.7004388800088955E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979905712484	WITHOUT_CLASSIFICATION	2.009428751528229E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999840291142675	WITHOUT_CLASSIFICATION	1.5970885732464103E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999689922005652	WITHOUT_CLASSIFICATION	3.1007799434844566E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999989259049746	WITHOUT_CLASSIFICATION	1.0740950253512375E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998193795165	WITHOUT_CLASSIFICATION	1.8062048354588252E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979905712484	WITHOUT_CLASSIFICATION	2.009428751528229E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999999490556795	WITHOUT_CLASSIFICATION	5.094432049513489E-7	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999249555019	WITHOUT_CLASSIFICATION	7.504449805245167E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999971726896	WITHOUT_CLASSIFICATION	2.8273103946495418E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999882675328	WITHOUT_CLASSIFICATION	1.173246717946386E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999995878413145	WITHOUT_CLASSIFICATION	4.12158685587148E-7	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999350259972	WITHOUT_CLASSIFICATION	6.497400277854691E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999810435299	WITHOUT_CLASSIFICATION	1.8956470142888207E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999672410982	WITHOUT_CLASSIFICATION	3.275890185926442E-8	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998903640659	WITHOUT_CLASSIFICATION	1.096359341839185E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996242572693	WITHOUT_CLASSIFICATION	3.757427307807498E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999855485337783	WITHOUT_CLASSIFICATION	1.445146622165861E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999979922373005	WITHOUT_CLASSIFICATION	2.0077626995428676E-6	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999991563603586	WITHOUT_CLASSIFICATION	8.43639641420407E-7	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999997734871543	WITHOUT_CLASSIFICATION	2.26512845619166E-7	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999984207301902	WITHOUT_CLASSIFICATION	1.5792698099023183E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997015364606	WITHOUT_CLASSIFICATION	2.9846353943538866E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999264861694	WITHOUT_CLASSIFICATION	7.351383058929363E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998743749529	WITHOUT_CLASSIFICATION	1.2562504715593302E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999984478140115	WITHOUT_CLASSIFICATION	1.5521859885013157E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999996557811459	WITHOUT_CLASSIFICATION	3.442188540338734E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.99999992320729	WITHOUT_CLASSIFICATION	7.679270994824929E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999997315367212	WITHOUT_CLASSIFICATION	2.684632788347071E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999990189896643	WITHOUT_CLASSIFICATION	9.810103357945486E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999832616239	WITHOUT_CLASSIFICATION	1.6738376028417093E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999987306494074	WITHOUT_CLASSIFICATION	1.2693505926352936E-6	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999998340848313	WITHOUT_CLASSIFICATION	1.6591516875116617E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999999969690195	WITHOUT_CLASSIFICATION	3.0309804468906024E-9	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996352834561	WITHOUT_CLASSIFICATION	3.647165437988723E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999854357994	WITHOUT_CLASSIFICATION	1.4564200586999245E-8	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.999999919248247	WITHOUT_CLASSIFICATION	8.07517529970851E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999937387138489	WITHOUT_CLASSIFICATION	6.261286151078539E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999944548787174	WITHOUT_CLASSIFICATION	5.54512128258285E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999997719328634	WITHOUT_CLASSIFICATION	2.280671366967077E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999993338356337	WITHOUT_CLASSIFICATION	6.661643662765724E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999951048573	WITHOUT_CLASSIFICATION	4.8951427049040336E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998490446855	WITHOUT_CLASSIFICATION	1.509553144851883E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999826985304	WITHOUT_CLASSIFICATION	1.73014695621948E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999866808202	WITHOUT_CLASSIFICATION	1.3319179820865076E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999988854979914	WITHOUT_CLASSIFICATION	1.1145020085905789E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993183698535	WITHOUT_CLASSIFICATION	6.816301465061445E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999871192220102	WITHOUT_CLASSIFICATION	1.2880777989781557E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999871192220102	WITHOUT_CLASSIFICATION	1.2880777989781557E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999927811901235	WITHOUT_CLASSIFICATION	7.21880987654551E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995052515296	WITHOUT_CLASSIFICATION	4.947484703913252E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999969508295679	WITHOUT_CLASSIFICATION	3.0491704320276673E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.999788494384449	WITHOUT_CLASSIFICATION	2.1150561555102353E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999988477646104	WITHOUT_CLASSIFICATION	1.152235389596271E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999988477646104	WITHOUT_CLASSIFICATION	1.152235389596271E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.999865752104428	WITHOUT_CLASSIFICATION	1.3424789557200232E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999965807218096	WITHOUT_CLASSIFICATION	3.4192781904335186E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998389510480231	WITHOUT_CLASSIFICATION	1.6104895197688128E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999995926995878	WITHOUT_CLASSIFICATION	4.073004122015261E-6	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999991710309	WITHOUT_CLASSIFICATION	8.289692434300913E-10	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999984805751273	WITHOUT_CLASSIFICATION	1.5194248727296482E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999993717964347	WITHOUT_CLASSIFICATION	6.28203565198853E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999966973642858	WITHOUT_CLASSIFICATION	3.3026357142618265E-6	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999996592418	WITHOUT_CLASSIFICATION	3.4075821603808146E-10	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989887665888	WITHOUT_CLASSIFICATION	1.0112334112482485E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989887665888	WITHOUT_CLASSIFICATION	1.0112334112482485E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999967013515858	WITHOUT_CLASSIFICATION	3.298648414247887E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999212820281584	WITHOUT_CLASSIFICATION	7.871797184155085E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999744936500746	WITHOUT_CLASSIFICATION	2.5506349925370773E-5	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999817880604518	WITHOUT_CLASSIFICATION	1.8211939548189306E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998861531905059	WITHOUT_CLASSIFICATION	1.1384680949410858E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911659638485	WITHOUT_CLASSIFICATION	8.83403615157515E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234136235561	WITHOUT_CLASSIFICATION	1.7658637644387895E-4	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999993018840545	WITHOUT_CLASSIFICATION	6.981159455355957E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999978046544564	WITHOUT_CLASSIFICATION	2.195345543554987E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999997835030539	WITHOUT_CLASSIFICATION	2.1649694618271745E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999718996375	WITHOUT_CLASSIFICATION	2.8100362441975025E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996242572693	WITHOUT_CLASSIFICATION	3.757427307807498E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999996662230343	WITHOUT_CLASSIFICATION	3.3377696571252355E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999541948382641	WITHOUT_CLASSIFICATION	4.5805161736024455E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999999904731215	WITHOUT_CLASSIFICATION	9.526878497654639E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999938988410935	WITHOUT_CLASSIFICATION	6.1011589065104025E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999898829806618	WITHOUT_CLASSIFICATION	1.0117019338204106E-5	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999944063680493	WITHOUT_CLASSIFICATION	5.59363195077751E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999628906768679	WITHOUT_CLASSIFICATION	3.710932313205137E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999388229402	WITHOUT_CLASSIFICATION	6.117705979577939E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999934112152373	WITHOUT_CLASSIFICATION	6.5887847626223455E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999997004680405	WITHOUT_CLASSIFICATION	2.995319594939085E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999997004680405	WITHOUT_CLASSIFICATION	2.995319594939085E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983340422208	WITHOUT_CLASSIFICATION	1.665957779231871E-6	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999812245591	WITHOUT_CLASSIFICATION	1.877544092583683E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998889377757832	WITHOUT_CLASSIFICATION	1.1106222421679979E-4	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999942541211838	WITHOUT_CLASSIFICATION	5.74587881617313E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999830620102392	WITHOUT_CLASSIFICATION	1.6937989760709972E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999769631447	WITHOUT_CLASSIFICATION	2.3036855262143214E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990698693977	WITHOUT_CLASSIFICATION	9.301306022422863E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999770685247	WITHOUT_CLASSIFICATION	2.2931475195403855E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999987769390302	WITHOUT_CLASSIFICATION	1.2230609698827565E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999997765284467	WITHOUT_CLASSIFICATION	2.23471553255671E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707694444321	WITHOUT_CLASSIFICATION	2.9230555567975274E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999999920872443	WITHOUT_CLASSIFICATION	7.912755736002963E-9	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999993624215002	WITHOUT_CLASSIFICATION	6.375784997567206E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999788615549	WITHOUT_CLASSIFICATION	2.1138445203518482E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999989335797942	WITHOUT_CLASSIFICATION	1.0664202058334006E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999988870903749	WITHOUT_CLASSIFICATION	1.1129096250814607E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999704984117	WITHOUT_CLASSIFICATION	2.9501588359466833E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962848704038	WITHOUT_CLASSIFICATION	3.7151295962106025E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999988001541511	WITHOUT_CLASSIFICATION	1.1998458488727806E-6	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999776387862	WITHOUT_CLASSIFICATION	2.236121383459834E-8	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998946854096	WITHOUT_CLASSIFICATION	1.0531459034497085E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999937968679	WITHOUT_CLASSIFICATION	6.203132118006241E-9	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999212758888	WITHOUT_CLASSIFICATION	7.87241112551698E-8	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999994572197	WITHOUT_CLASSIFICATION	5.427803570732E-10	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987415435094	WITHOUT_CLASSIFICATION	1.2584564905916108E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987415435094	WITHOUT_CLASSIFICATION	1.2584564905916108E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996173139188	WITHOUT_CLASSIFICATION	3.8268608114986386E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999609253832	WITHOUT_CLASSIFICATION	3.9074616821860724E-8	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999813204548	WITHOUT_CLASSIFICATION	1.8679545304723474E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999453561348	WITHOUT_CLASSIFICATION	5.464386525449731E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999949375594369	WITHOUT_CLASSIFICATION	5.062440563177975E-6	TEST
