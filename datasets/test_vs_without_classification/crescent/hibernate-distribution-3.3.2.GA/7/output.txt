//test out the optimizer:	WITHOUT_CLASSIFICATION	0.998959258951658	WITHOUT_CLASSIFICATION	0.0010407410483419318	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999909267129947	WITHOUT_CLASSIFICATION	9.073287005330437E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996860639034	WITHOUT_CLASSIFICATION	3.139360965765954E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999990403723366	WITHOUT_CLASSIFICATION	9.596276634067782E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993758393771	WITHOUT_CLASSIFICATION	6.241606228001954E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993758393771	WITHOUT_CLASSIFICATION	6.241606228001954E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997575267017	WITHOUT_CLASSIFICATION	2.4247329824124406E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994161833414	WITHOUT_CLASSIFICATION	5.838166585501251E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999933188435348	WITHOUT_CLASSIFICATION	6.6811564651915705E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999997116652733	WITHOUT_CLASSIFICATION	2.883347266665695E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999990472886768	WITHOUT_CLASSIFICATION	9.527113231886463E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999990472886768	WITHOUT_CLASSIFICATION	9.527113231886463E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980534405631	WITHOUT_CLASSIFICATION	1.9465594369259963E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999189323845	WITHOUT_CLASSIFICATION	8.106761549829608E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999279480619	WITHOUT_CLASSIFICATION	7.205193811698932E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999986054176302	WITHOUT_CLASSIFICATION	1.3945823697053005E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999255478954	WITHOUT_CLASSIFICATION	7.445210457942034E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999967640505822	WITHOUT_CLASSIFICATION	3.2359494177686636E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999896987181829	WITHOUT_CLASSIFICATION	1.0301281817110447E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999912032410609	WITHOUT_CLASSIFICATION	8.796758939088165E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999988548054064	WITHOUT_CLASSIFICATION	1.1451945935966652E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.999867811888278	WITHOUT_CLASSIFICATION	1.3218811172188726E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999941730905558	WITHOUT_CLASSIFICATION	5.82690944422717E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.999995656432608	WITHOUT_CLASSIFICATION	4.343567391999375E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999984307774501	WITHOUT_CLASSIFICATION	1.5692225498631735E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999937614530816	WITHOUT_CLASSIFICATION	6.238546918344036E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999937614530816	WITHOUT_CLASSIFICATION	6.238546918344036E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997843341927	WITHOUT_CLASSIFICATION	2.1566580734923736E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.999991558255429	WITHOUT_CLASSIFICATION	8.441744571104222E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999499154127	WITHOUT_CLASSIFICATION	5.0084587206211394E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997102035347	WITHOUT_CLASSIFICATION	2.897964653450851E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999989516572828	WITHOUT_CLASSIFICATION	1.0483427171692364E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.5442412880542736	WITHOUT_CLASSIFICATION	0.4557587119457262	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5442412880542736	WITHOUT_CLASSIFICATION	0.4557587119457262	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999083021349	WITHOUT_CLASSIFICATION	9.169786511031752E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999931661250949	WITHOUT_CLASSIFICATION	6.833874905132648E-6	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999651883841	WITHOUT_CLASSIFICATION	3.48116158941059E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999974007936481	WITHOUT_CLASSIFICATION	2.599206351974534E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998995978567	WITHOUT_CLASSIFICATION	1.0040214323938339E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929441914035	WITHOUT_CLASSIFICATION	7.055808596459344E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942834178502	WITHOUT_CLASSIFICATION	5.716582149868108E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998558380063	WITHOUT_CLASSIFICATION	1.441619936307506E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999897190778089	WITHOUT_CLASSIFICATION	1.0280922191092258E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999759498222	WITHOUT_CLASSIFICATION	2.4050177803829913E-7	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999988630803377	WITHOUT_CLASSIFICATION	1.1369196622979341E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999897190778089	WITHOUT_CLASSIFICATION	1.0280922191092258E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999988630803377	WITHOUT_CLASSIFICATION	1.1369196622979341E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995637128797	WITHOUT_CLASSIFICATION	4.362871202074947E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9978901280216388	WITHOUT_CLASSIFICATION	0.0021098719783613214	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999992047871338	WITHOUT_CLASSIFICATION	7.952128661913368E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999995411989704	WITHOUT_CLASSIFICATION	4.5880102957831765E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999976734867128	WITHOUT_CLASSIFICATION	2.326513287135322E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999624126593768	WITHOUT_CLASSIFICATION	3.75873406232264E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997411785095841	WITHOUT_CLASSIFICATION	2.588214904158423E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999970135894316	WITHOUT_CLASSIFICATION	2.986410568309932E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999995976615721	WITHOUT_CLASSIFICATION	4.0233842785229673E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999821329246259	WITHOUT_CLASSIFICATION	1.7867075374070063E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999983974068231	WITHOUT_CLASSIFICATION	1.602593176891204E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999997930502328	WITHOUT_CLASSIFICATION	2.0694976718703952E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999985496294	WITHOUT_CLASSIFICATION	1.4503705984769176E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999997686636719	WITHOUT_CLASSIFICATION	2.3133632799016002E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999709831465	WITHOUT_CLASSIFICATION	2.9016853394392282E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999997322949624	WITHOUT_CLASSIFICATION	2.677050375555384E-7	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998019058214	WITHOUT_CLASSIFICATION	1.9809417862750176E-7	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999354151624	WITHOUT_CLASSIFICATION	6.458483760631661E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999028685918	WITHOUT_CLASSIFICATION	9.713140815011117E-8	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995164566482	WITHOUT_CLASSIFICATION	4.835433517986902E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999999746015204	WITHOUT_CLASSIFICATION	2.539847959844788E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999177718107	WITHOUT_CLASSIFICATION	8.222818929583087E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999424228034	WITHOUT_CLASSIFICATION	5.7577196636804415E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999989968071623	WITHOUT_CLASSIFICATION	1.0031928377094558E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.999906192699496	WITHOUT_CLASSIFICATION	9.380730050407099E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996284214542	WITHOUT_CLASSIFICATION	3.7157854583211094E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999320043715	WITHOUT_CLASSIFICATION	6.79956284735907E-8	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999700083635231	WITHOUT_CLASSIFICATION	2.9991636476981127E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999998872932601	WITHOUT_CLASSIFICATION	1.1270673989285104E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999995901335698	WITHOUT_CLASSIFICATION	4.098664302699007E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999001664355	WITHOUT_CLASSIFICATION	9.983356445837132E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999041761023	WITHOUT_CLASSIFICATION	9.582389777019522E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999981016133257	WITHOUT_CLASSIFICATION	1.8983866743325124E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999638747666	WITHOUT_CLASSIFICATION	3.6125233444859585E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999986916040086	WITHOUT_CLASSIFICATION	1.3083959913518128E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999634609915	WITHOUT_CLASSIFICATION	3.653900849298395E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999638747666	WITHOUT_CLASSIFICATION	3.6125233444859585E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999066438207	WITHOUT_CLASSIFICATION	9.335617931918265E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997906381132	WITHOUT_CLASSIFICATION	2.0936188679226605E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999993509876213	WITHOUT_CLASSIFICATION	6.490123787059985E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994762850638	WITHOUT_CLASSIFICATION	5.23714936141181E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999998527104752	WITHOUT_CLASSIFICATION	1.4728952477457728E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979151115	WITHOUT_CLASSIFICATION	2.0848884964637774E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979151115	WITHOUT_CLASSIFICATION	2.0848884964637774E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999985076502823	WITHOUT_CLASSIFICATION	1.4923497177429545E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999992231905792	WITHOUT_CLASSIFICATION	7.768094207934201E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999911223929577	WITHOUT_CLASSIFICATION	8.877607042169946E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999996220906556	WITHOUT_CLASSIFICATION	3.7790934438046177E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999286156797	WITHOUT_CLASSIFICATION	7.138432034526297E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999523956481	WITHOUT_CLASSIFICATION	4.760435188750825E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999998636451776	WITHOUT_CLASSIFICATION	1.363548224032252E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999462900128	WITHOUT_CLASSIFICATION	5.3709987180893225E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999399020685	WITHOUT_CLASSIFICATION	6.009793153992558E-8	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999994520802556	WITHOUT_CLASSIFICATION	5.479197443457957E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996377967015	WITHOUT_CLASSIFICATION	3.6220329844751535E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996377967015	WITHOUT_CLASSIFICATION	3.6220329844751535E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995623983504	WITHOUT_CLASSIFICATION	4.3760164956593003E-7	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999994598445393	WITHOUT_CLASSIFICATION	5.401554606843511E-7	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999997212856101	WITHOUT_CLASSIFICATION	2.7871438983856095E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996377967015	WITHOUT_CLASSIFICATION	3.6220329844751535E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995623983504	WITHOUT_CLASSIFICATION	4.3760164956593003E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995623983504	WITHOUT_CLASSIFICATION	4.3760164956593003E-7	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999990753147239	WITHOUT_CLASSIFICATION	9.246852761893317E-7	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999996080143493	WITHOUT_CLASSIFICATION	3.9198565075867455E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999984090677603	WITHOUT_CLASSIFICATION	1.590932239625937E-6	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998095875953	WITHOUT_CLASSIFICATION	1.9041240476940516E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997633431443	WITHOUT_CLASSIFICATION	2.3665685561196855E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997633431443	WITHOUT_CLASSIFICATION	2.3665685561196855E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999990900559904	WITHOUT_CLASSIFICATION	9.099440096545328E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999998984624023	WITHOUT_CLASSIFICATION	1.0153759769158624E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999987098132667	WITHOUT_CLASSIFICATION	1.2901867333095437E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995173510045	WITHOUT_CLASSIFICATION	4.826489955884517E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995173510045	WITHOUT_CLASSIFICATION	4.826489955884517E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999998395080545	WITHOUT_CLASSIFICATION	1.6049194549536542E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999959413345576	WITHOUT_CLASSIFICATION	4.058665442351988E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999196086642985	WITHOUT_CLASSIFICATION	8.039133570145203E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998964037364	WITHOUT_CLASSIFICATION	1.0359626346389387E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999996380913325	WITHOUT_CLASSIFICATION	3.619086674370051E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999998822143944	WITHOUT_CLASSIFICATION	1.1778560559357422E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999984347272823	WITHOUT_CLASSIFICATION	1.5652727176151927E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999987231421128	WITHOUT_CLASSIFICATION	1.276857887200426E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999772484828399	WITHOUT_CLASSIFICATION	2.275151716007042E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999196086642985	WITHOUT_CLASSIFICATION	8.039133570145203E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999969091279083	WITHOUT_CLASSIFICATION	3.0908720917023665E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999995018125425	WITHOUT_CLASSIFICATION	4.981874575005636E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999995018125425	WITHOUT_CLASSIFICATION	4.981874575005636E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999973952346197	WITHOUT_CLASSIFICATION	2.604765380332614E-6	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999985107808684	WITHOUT_CLASSIFICATION	1.4892191316053447E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999994093622774	WITHOUT_CLASSIFICATION	5.906377226190627E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999967173663873	WITHOUT_CLASSIFICATION	3.282633612715119E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999987211360076	WITHOUT_CLASSIFICATION	1.2788639924042586E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.999987217145665	WITHOUT_CLASSIFICATION	1.2782854335148526E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999989603086629	WITHOUT_CLASSIFICATION	1.039691337180675E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999765657196	WITHOUT_CLASSIFICATION	2.3434280378372933E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999542006869	WITHOUT_CLASSIFICATION	4.5799313112395855E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999542006869	WITHOUT_CLASSIFICATION	4.5799313112395855E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.998959258951658	WITHOUT_CLASSIFICATION	0.0010407410483419318	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999131613972	WITHOUT_CLASSIFICATION	8.683860278636943E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999996330515926	WITHOUT_CLASSIFICATION	3.6694840737976016E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999985785237472	WITHOUT_CLASSIFICATION	1.4214762527489174E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999980212479409	WITHOUT_CLASSIFICATION	1.9787520591325614E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999978658891239	WITHOUT_CLASSIFICATION	2.134110876251638E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994388217279	WITHOUT_CLASSIFICATION	5.611782720311753E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995741239943	WITHOUT_CLASSIFICATION	4.258760057372209E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999976563811217	WITHOUT_CLASSIFICATION	2.3436188783318954E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999961745455807	WITHOUT_CLASSIFICATION	3.825454419339561E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992088946901	WITHOUT_CLASSIFICATION	7.911053098377029E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996860639034	WITHOUT_CLASSIFICATION	3.139360965765954E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993907920468	WITHOUT_CLASSIFICATION	6.092079531613092E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993907920468	WITHOUT_CLASSIFICATION	6.092079531613092E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999984992406682	WITHOUT_CLASSIFICATION	1.50075933183186E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999990636039637	WITHOUT_CLASSIFICATION	9.363960363156277E-7	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999762814357	WITHOUT_CLASSIFICATION	2.3718564364674698E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999964555560017	WITHOUT_CLASSIFICATION	3.5444439983129186E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999994327631744	WITHOUT_CLASSIFICATION	5.672368256974072E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999997292728683	WITHOUT_CLASSIFICATION	2.7072713176061013E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993758393771	WITHOUT_CLASSIFICATION	6.241606228001954E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999993158128424	WITHOUT_CLASSIFICATION	6.841871575600529E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999986328296694	WITHOUT_CLASSIFICATION	1.3671703306023473E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999993995381583	WITHOUT_CLASSIFICATION	6.004618416433739E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996656669217	WITHOUT_CLASSIFICATION	3.3433307837232154E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999994785584716	WITHOUT_CLASSIFICATION	5.214415284862209E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999982280862312	WITHOUT_CLASSIFICATION	1.7719137688520477E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999985695870582	WITHOUT_CLASSIFICATION	1.4304129418327337E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999996866566618	WITHOUT_CLASSIFICATION	3.1334333821812206E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994423727792	WITHOUT_CLASSIFICATION	5.576272207728821E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999993129106477	WITHOUT_CLASSIFICATION	6.870893522095337E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997156621895	WITHOUT_CLASSIFICATION	2.8433781056497057E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.999999831398994	WITHOUT_CLASSIFICATION	1.6860100608027245E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999987305504918	WITHOUT_CLASSIFICATION	1.2694495081170916E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999961745455807	WITHOUT_CLASSIFICATION	3.825454419339561E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993907920468	WITHOUT_CLASSIFICATION	6.092079531613092E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999985695870582	WITHOUT_CLASSIFICATION	1.4304129418327337E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997575267017	WITHOUT_CLASSIFICATION	2.4247329824124406E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998419664119	WITHOUT_CLASSIFICATION	1.5803358819800222E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997460992446	WITHOUT_CLASSIFICATION	2.5390075542355406E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999227303031	WITHOUT_CLASSIFICATION	7.726969685758954E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999982105916096	WITHOUT_CLASSIFICATION	1.7894083903647279E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998103576992	WITHOUT_CLASSIFICATION	1.8964230080111685E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999984588065074	WITHOUT_CLASSIFICATION	1.5411934925934189E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999999759211311	WITHOUT_CLASSIFICATION	2.4078868900004053E-7	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999740327456115	WITHOUT_CLASSIFICATION	2.5967254388577664E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999994065710046	WITHOUT_CLASSIFICATION	5.934289954193254E-7	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999979522049828	WITHOUT_CLASSIFICATION	2.0477950171730837E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999979522049828	WITHOUT_CLASSIFICATION	2.0477950171730837E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999991640529003	WITHOUT_CLASSIFICATION	8.359470995100894E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999991852250631	WITHOUT_CLASSIFICATION	8.147749367784197E-7	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999990809546698	WITHOUT_CLASSIFICATION	9.190453302624427E-7	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999993496037176	WITHOUT_CLASSIFICATION	6.503962824992366E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999992732701514	WITHOUT_CLASSIFICATION	7.26729848568631E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999996840650878	WITHOUT_CLASSIFICATION	3.159349121932807E-7	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999949425701672	WITHOUT_CLASSIFICATION	5.057429832816801E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994161833414	WITHOUT_CLASSIFICATION	5.838166585501251E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.999999054987661	WITHOUT_CLASSIFICATION	9.450123391125305E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998636655248	WITHOUT_CLASSIFICATION	1.363344752506716E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998636655248	WITHOUT_CLASSIFICATION	1.363344752506716E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999996148928418	WITHOUT_CLASSIFICATION	3.8510715819332706E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999985991578222	WITHOUT_CLASSIFICATION	1.4008421777654141E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998264609206	WITHOUT_CLASSIFICATION	1.735390793855938E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999327655285	WITHOUT_CLASSIFICATION	6.723447160633533E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999985340759038	WITHOUT_CLASSIFICATION	1.4659240961253376E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999992793285105	WITHOUT_CLASSIFICATION	7.206714895765607E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999961745455807	WITHOUT_CLASSIFICATION	3.825454419339561E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996860639034	WITHOUT_CLASSIFICATION	3.139360965765954E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999985695870582	WITHOUT_CLASSIFICATION	1.4304129418327337E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999985695870582	WITHOUT_CLASSIFICATION	1.4304129418327337E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996071486262	WITHOUT_CLASSIFICATION	3.9285137381865743E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996071486262	WITHOUT_CLASSIFICATION	3.9285137381865743E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995973381247	WITHOUT_CLASSIFICATION	4.0266187519150584E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999988346990504	WITHOUT_CLASSIFICATION	1.1653009495697942E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999988346990504	WITHOUT_CLASSIFICATION	1.1653009495697942E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999957540594734	WITHOUT_CLASSIFICATION	4.24594052666398E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999993320407411	WITHOUT_CLASSIFICATION	6.679592588488197E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999977340598705	WITHOUT_CLASSIFICATION	2.2659401295341347E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999817183871101	WITHOUT_CLASSIFICATION	1.8281612889860364E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998323797563	WITHOUT_CLASSIFICATION	1.6762024369037004E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999997116652733	WITHOUT_CLASSIFICATION	2.883347266665695E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999997116652733	WITHOUT_CLASSIFICATION	2.883347266665695E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999990771218116	WITHOUT_CLASSIFICATION	9.228781884070346E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999998005539967	WITHOUT_CLASSIFICATION	1.9944600325812488E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999980245383007	WITHOUT_CLASSIFICATION	1.975461699359681E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999959825383079	WITHOUT_CLASSIFICATION	4.01746169203203E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999980833574017	WITHOUT_CLASSIFICATION	1.9166425982983916E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.999995479409343	WITHOUT_CLASSIFICATION	4.520590657023865E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999990472886768	WITHOUT_CLASSIFICATION	9.527113231886463E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999981528388217	WITHOUT_CLASSIFICATION	1.8471611783511096E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999981528388217	WITHOUT_CLASSIFICATION	1.8471611783511096E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980534405631	WITHOUT_CLASSIFICATION	1.9465594369259963E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980534405631	WITHOUT_CLASSIFICATION	1.9465594369259963E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990611726479	WITHOUT_CLASSIFICATION	9.388273520691336E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990611726479	WITHOUT_CLASSIFICATION	9.388273520691336E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999991128447452	WITHOUT_CLASSIFICATION	8.871552547726742E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999991128447452	WITHOUT_CLASSIFICATION	8.871552547726742E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999997116652733	WITHOUT_CLASSIFICATION	2.883347266665695E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999990472886768	WITHOUT_CLASSIFICATION	9.527113231886463E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999981528388217	WITHOUT_CLASSIFICATION	1.8471611783511096E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999981528388217	WITHOUT_CLASSIFICATION	1.8471611783511096E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980534405631	WITHOUT_CLASSIFICATION	1.9465594369259963E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990611726479	WITHOUT_CLASSIFICATION	9.388273520691336E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990611726479	WITHOUT_CLASSIFICATION	9.388273520691336E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999991128447452	WITHOUT_CLASSIFICATION	8.871552547726742E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999982392321639	WITHOUT_CLASSIFICATION	1.7607678360844085E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999925641805072	WITHOUT_CLASSIFICATION	7.435819492723908E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999975484774662	WITHOUT_CLASSIFICATION	2.4515225338937536E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999998227535862	WITHOUT_CLASSIFICATION	1.772464137443306E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999988587619735	WITHOUT_CLASSIFICATION	1.1412380265781674E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999978484029816	WITHOUT_CLASSIFICATION	2.1515970185167874E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999992163208238	WITHOUT_CLASSIFICATION	7.836791762008444E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999988958768125	WITHOUT_CLASSIFICATION	1.1041231875285963E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999970965248479	WITHOUT_CLASSIFICATION	2.903475152114928E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999992860088365	WITHOUT_CLASSIFICATION	7.139911635360636E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999991087298016	WITHOUT_CLASSIFICATION	8.912701983680671E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999989301689537	WITHOUT_CLASSIFICATION	1.0698310463250428E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999985076502823	WITHOUT_CLASSIFICATION	1.4923497177429545E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999978484029816	WITHOUT_CLASSIFICATION	2.1515970185167874E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999620831141576	WITHOUT_CLASSIFICATION	3.791688584248186E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999620831141576	WITHOUT_CLASSIFICATION	3.791688584248186E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999944074700398	WITHOUT_CLASSIFICATION	5.592529960310601E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999989330665344	WITHOUT_CLASSIFICATION	1.0669334656086612E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999989330665344	WITHOUT_CLASSIFICATION	1.0669334656086612E-6	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999281947843	WITHOUT_CLASSIFICATION	7.180521560280865E-8	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999967965160265	WITHOUT_CLASSIFICATION	3.203483973406236E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999991507513037	WITHOUT_CLASSIFICATION	8.492486962451987E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999059817077	WITHOUT_CLASSIFICATION	9.401829222117394E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999059817077	WITHOUT_CLASSIFICATION	9.401829222117394E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999255478954	WITHOUT_CLASSIFICATION	7.445210457942034E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999908362062	WITHOUT_CLASSIFICATION	9.163793881515851E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999908362062	WITHOUT_CLASSIFICATION	9.163793881515851E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999937540597	WITHOUT_CLASSIFICATION	6.245940289744682E-8	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999942485825233	WITHOUT_CLASSIFICATION	5.75141747681039E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999976223813019	WITHOUT_CLASSIFICATION	2.3776186981954835E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999911689415515	WITHOUT_CLASSIFICATION	8.831058448407254E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999964176305614	WITHOUT_CLASSIFICATION	3.582369438553334E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999952139901984	WITHOUT_CLASSIFICATION	4.786009801682401E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999967640505822	WITHOUT_CLASSIFICATION	3.2359494177686636E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999995406903752	WITHOUT_CLASSIFICATION	4.593096247930136E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9988353542745654	WITHOUT_CLASSIFICATION	0.0011646457254345709	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999872599385209	WITHOUT_CLASSIFICATION	1.2740061479122757E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999830004027205	WITHOUT_CLASSIFICATION	1.69995972794618E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999988548054064	WITHOUT_CLASSIFICATION	1.1451945935966652E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999192496734	WITHOUT_CLASSIFICATION	8.07503266599932E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999588319068309	WITHOUT_CLASSIFICATION	4.116809316910549E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999958114004719	WITHOUT_CLASSIFICATION	4.188599528107637E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999988548054064	WITHOUT_CLASSIFICATION	1.1451945935966652E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999371056502	WITHOUT_CLASSIFICATION	6.289434991258087E-8	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998044930005	WITHOUT_CLASSIFICATION	1.955069993622609E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999938491349889	WITHOUT_CLASSIFICATION	6.150865011129068E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.999987190652593	WITHOUT_CLASSIFICATION	1.2809347407071378E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999997279579652	WITHOUT_CLASSIFICATION	2.7204203479869463E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999942514175482	WITHOUT_CLASSIFICATION	5.748582451868955E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999983661085137	WITHOUT_CLASSIFICATION	1.6338914862981692E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.999995656432608	WITHOUT_CLASSIFICATION	4.343567391999375E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992546262924	WITHOUT_CLASSIFICATION	7.453737076032141E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999984307774501	WITHOUT_CLASSIFICATION	1.5692225498631735E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999966616354956	WITHOUT_CLASSIFICATION	3.3383645042876554E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999997942526717	WITHOUT_CLASSIFICATION	2.0574732830815736E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999937310624062	WITHOUT_CLASSIFICATION	6.268937593872043E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999967640505822	WITHOUT_CLASSIFICATION	3.2359494177686636E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992546262924	WITHOUT_CLASSIFICATION	7.453737076032141E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999966616354956	WITHOUT_CLASSIFICATION	3.3383645042876554E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999937310624062	WITHOUT_CLASSIFICATION	6.268937593872043E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997106708408	WITHOUT_CLASSIFICATION	2.8932915914873547E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999852594952511	WITHOUT_CLASSIFICATION	1.4740504748965151E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998645301504	WITHOUT_CLASSIFICATION	1.3546984959533024E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999937614530816	WITHOUT_CLASSIFICATION	6.238546918344036E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999921445516768	WITHOUT_CLASSIFICATION	7.855448323118542E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999997821601448	WITHOUT_CLASSIFICATION	2.178398551267099E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999923773403104	WITHOUT_CLASSIFICATION	7.622659689507326E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999975832262412	WITHOUT_CLASSIFICATION	2.4167737587330848E-6	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999873833880268	WITHOUT_CLASSIFICATION	1.2616611973095733E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997624758052	WITHOUT_CLASSIFICATION	2.3752419491360126E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999896565661234	WITHOUT_CLASSIFICATION	1.034343387662386E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999990648738925	WITHOUT_CLASSIFICATION	9.351261075741282E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999601162133	WITHOUT_CLASSIFICATION	3.988378673769778E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999942039334708	WITHOUT_CLASSIFICATION	5.796066529179661E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.99999349302459	WITHOUT_CLASSIFICATION	6.50697541010005E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999962711133471	WITHOUT_CLASSIFICATION	3.7288866528960946E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.999991558255429	WITHOUT_CLASSIFICATION	8.441744571104222E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999916192886252	WITHOUT_CLASSIFICATION	8.380711374778428E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999936716055378	WITHOUT_CLASSIFICATION	6.328394462349365E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992546262924	WITHOUT_CLASSIFICATION	7.453737076032141E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999996645575366	WITHOUT_CLASSIFICATION	3.3544246335745805E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999996645558497	WITHOUT_CLASSIFICATION	3.354441503838864E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999996273641245	WITHOUT_CLASSIFICATION	3.7263587549855284E-7	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999547822999041	WITHOUT_CLASSIFICATION	4.521770009585435E-5	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.999997000216766	WITHOUT_CLASSIFICATION	2.9997832340644067E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999976045906149	WITHOUT_CLASSIFICATION	2.395409385012778E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999788864226	WITHOUT_CLASSIFICATION	2.1113577433272024E-8	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999857140616	WITHOUT_CLASSIFICATION	1.4285938403546655E-7	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999947065504903	WITHOUT_CLASSIFICATION	5.293449509665386E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999916049447851	WITHOUT_CLASSIFICATION	8.395055214913579E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999992489777556	WITHOUT_CLASSIFICATION	7.510222444171535E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999915705936167	WITHOUT_CLASSIFICATION	8.429406383396327E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999998011764043	WITHOUT_CLASSIFICATION	1.98823595607845E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997102035347	WITHOUT_CLASSIFICATION	2.897964653450851E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998847474343	WITHOUT_CLASSIFICATION	1.1525256567724509E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999998716624336	WITHOUT_CLASSIFICATION	1.2833756637171856E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999904553500293	WITHOUT_CLASSIFICATION	9.544649970585255E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999991554922272	WITHOUT_CLASSIFICATION	8.445077728759383E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999993785421276	WITHOUT_CLASSIFICATION	6.214578724102979E-7	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995770649324	WITHOUT_CLASSIFICATION	4.2293506763133447E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998945753695	WITHOUT_CLASSIFICATION	1.0542463050966397E-7	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999984488219389	WITHOUT_CLASSIFICATION	1.5511780611722888E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996068790029	WITHOUT_CLASSIFICATION	3.931209971274948E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999962568377505	WITHOUT_CLASSIFICATION	3.743162249434886E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999990860562861	WITHOUT_CLASSIFICATION	9.139437138918035E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999990860562861	WITHOUT_CLASSIFICATION	9.139437138918035E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999734444340366	WITHOUT_CLASSIFICATION	2.6555565963478254E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999447472411	WITHOUT_CLASSIFICATION	5.525275899307745E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999974638091663	WITHOUT_CLASSIFICATION	2.5361908335621906E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995556935876	WITHOUT_CLASSIFICATION	4.443064124317541E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999987899317706	WITHOUT_CLASSIFICATION	1.2100682294106732E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999943948791328	WITHOUT_CLASSIFICATION	5.605120867231747E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998157727517	WITHOUT_CLASSIFICATION	1.8422724831567396E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999990306758634	WITHOUT_CLASSIFICATION	9.693241365993564E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999982503005166	WITHOUT_CLASSIFICATION	1.7496994833792284E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999959891773044	WITHOUT_CLASSIFICATION	4.010822695674252E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999973499784134	WITHOUT_CLASSIFICATION	2.6500215866037255E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999980719138551	WITHOUT_CLASSIFICATION	1.928086144733631E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999974631145102	WITHOUT_CLASSIFICATION	2.5368854898473955E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999996352424271	WITHOUT_CLASSIFICATION	3.647575729810595E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910856579997	WITHOUT_CLASSIFICATION	8.914342000245818E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972668109193	WITHOUT_CLASSIFICATION	2.7331890806842037E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999999441487454	WITHOUT_CLASSIFICATION	5.585125471088056E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.99999953946982	WITHOUT_CLASSIFICATION	4.6053017996516077E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999997836190457	WITHOUT_CLASSIFICATION	2.1638095412373505E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999955862921233	WITHOUT_CLASSIFICATION	4.4137078767082635E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999977726300857	WITHOUT_CLASSIFICATION	2.2273699143257756E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999977726300857	WITHOUT_CLASSIFICATION	2.2273699143257756E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999933202016773	WITHOUT_CLASSIFICATION	6.679798322671982E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999933202016773	WITHOUT_CLASSIFICATION	6.679798322671982E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996068790029	WITHOUT_CLASSIFICATION	3.931209971274948E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999948791525675	WITHOUT_CLASSIFICATION	5.120847432544806E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999787830451289	WITHOUT_CLASSIFICATION	2.1216954871015192E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999498540518799	WITHOUT_CLASSIFICATION	5.0145948120086234E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999787830451289	WITHOUT_CLASSIFICATION	2.1216954871015192E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999498540518799	WITHOUT_CLASSIFICATION	5.0145948120086234E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999969082424508	WITHOUT_CLASSIFICATION	3.09175754922277E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999991125478364	WITHOUT_CLASSIFICATION	8.874521636777007E-7	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999979351112728	WITHOUT_CLASSIFICATION	2.064888727283405E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999946707678216	WITHOUT_CLASSIFICATION	5.329232178479311E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999976884905143	WITHOUT_CLASSIFICATION	2.311509485769051E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999997745550996	WITHOUT_CLASSIFICATION	2.2544490044013507E-7	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998503264156	WITHOUT_CLASSIFICATION	1.4967358448564414E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991811887035	WITHOUT_CLASSIFICATION	8.188112965572934E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999003705287288	WITHOUT_CLASSIFICATION	9.962947127121211E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997996472317	WITHOUT_CLASSIFICATION	2.0035276837443417E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999999811493186	WITHOUT_CLASSIFICATION	1.8850681413051994E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999661905934	WITHOUT_CLASSIFICATION	3.3809406618890935E-8	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999999062823979	WITHOUT_CLASSIFICATION	9.371760210491716E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999784527261977	WITHOUT_CLASSIFICATION	2.1547273802297657E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999826540910256	WITHOUT_CLASSIFICATION	1.7345908974473402E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999610046165096	WITHOUT_CLASSIFICATION	3.8995383490409453E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999610046165096	WITHOUT_CLASSIFICATION	3.8995383490409453E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999542521958	WITHOUT_CLASSIFICATION	4.57478041919612E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999969082424508	WITHOUT_CLASSIFICATION	3.09175754922277E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999990475290446	WITHOUT_CLASSIFICATION	9.524709553701653E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999988071622358	WITHOUT_CLASSIFICATION	1.1928377642355468E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999950436048788	WITHOUT_CLASSIFICATION	4.95639512122736E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999976533021856	WITHOUT_CLASSIFICATION	2.346697814349371E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999795641393568	WITHOUT_CLASSIFICATION	2.0435860643175826E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999969082424508	WITHOUT_CLASSIFICATION	3.09175754922277E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999976533021856	WITHOUT_CLASSIFICATION	2.346697814349371E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999795641393568	WITHOUT_CLASSIFICATION	2.0435860643175826E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999550552040541	WITHOUT_CLASSIFICATION	4.494479594575307E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999956147878402	WITHOUT_CLASSIFICATION	4.385212159840527E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999967986198359	WITHOUT_CLASSIFICATION	3.201380164002557E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999969082424508	WITHOUT_CLASSIFICATION	3.09175754922277E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999969082424508	WITHOUT_CLASSIFICATION	3.09175754922277E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999940009756423	WITHOUT_CLASSIFICATION	5.999024357703745E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999959675020356	WITHOUT_CLASSIFICATION	4.032497964479886E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999981630537667	WITHOUT_CLASSIFICATION	1.8369462333698555E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999996352466098	WITHOUT_CLASSIFICATION	3.6475339011686804E-7	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999969681580795	WITHOUT_CLASSIFICATION	3.031841920596388E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999993342087429	WITHOUT_CLASSIFICATION	6.657912571590762E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999994868958281	WITHOUT_CLASSIFICATION	5.131041718970592E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999583722798	WITHOUT_CLASSIFICATION	4.16277202040696E-7	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999577491991	WITHOUT_CLASSIFICATION	4.225080087177958E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999973675415473	WITHOUT_CLASSIFICATION	2.6324584527690257E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999981029307221	WITHOUT_CLASSIFICATION	1.8970692778889345E-6	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999993034020859	WITHOUT_CLASSIFICATION	6.965979141764137E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999515711877	WITHOUT_CLASSIFICATION	4.842881222906612E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999995291341442	WITHOUT_CLASSIFICATION	4.7086585577748835E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995730127377	WITHOUT_CLASSIFICATION	4.2698726232242384E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998110371443	WITHOUT_CLASSIFICATION	1.8896285580140924E-7	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999974007936481	WITHOUT_CLASSIFICATION	2.599206351974534E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999847588647023	WITHOUT_CLASSIFICATION	1.5241135297594084E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999906334048476	WITHOUT_CLASSIFICATION	9.366595152417511E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999659111031	WITHOUT_CLASSIFICATION	3.408889690960089E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999936526995769	WITHOUT_CLASSIFICATION	6.347300423128727E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999814613923417	WITHOUT_CLASSIFICATION	1.8538607658277843E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999814613923417	WITHOUT_CLASSIFICATION	1.8538607658277843E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999974007936481	WITHOUT_CLASSIFICATION	2.599206351974534E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999860395161343	WITHOUT_CLASSIFICATION	1.3960483865589523E-5	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999990518294539	WITHOUT_CLASSIFICATION	9.481705460814566E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999771933802852	WITHOUT_CLASSIFICATION	2.2806619714724024E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999905787506627	WITHOUT_CLASSIFICATION	9.421249337354578E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999819508578597	WITHOUT_CLASSIFICATION	1.8049142140321417E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998006746089	WITHOUT_CLASSIFICATION	1.9932539098467064E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999980516653586	WITHOUT_CLASSIFICATION	1.948334641494856E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999985115072152	WITHOUT_CLASSIFICATION	1.4884927847310355E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998038770795	WITHOUT_CLASSIFICATION	1.9612292041790537E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998478770564	WITHOUT_CLASSIFICATION	1.5212294351894328E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992479673797	WITHOUT_CLASSIFICATION	7.520326203961297E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999771790692192	WITHOUT_CLASSIFICATION	2.282093078070384E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999355926767697	WITHOUT_CLASSIFICATION	6.440732323034074E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999994584384	WITHOUT_CLASSIFICATION	5.415615906335518E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999361677503	WITHOUT_CLASSIFICATION	6.383224968286601E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999963213160056	WITHOUT_CLASSIFICATION	3.678683994465596E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998434438171	WITHOUT_CLASSIFICATION	1.5655618301666941E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999997648972703	WITHOUT_CLASSIFICATION	2.351027296946949E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999779921465	WITHOUT_CLASSIFICATION	2.2007853489593822E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998495173438	WITHOUT_CLASSIFICATION	1.504826562248858E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999998176096148	WITHOUT_CLASSIFICATION	1.8239038522292785E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999996071241285	WITHOUT_CLASSIFICATION	3.928758714376864E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993025498186	WITHOUT_CLASSIFICATION	6.974501813204469E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926099468008	WITHOUT_CLASSIFICATION	7.390053199203162E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945713501466	WITHOUT_CLASSIFICATION	5.4286498533633885E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999375103777	WITHOUT_CLASSIFICATION	6.248962230240892E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822788415862	WITHOUT_CLASSIFICATION	1.772115841380519E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951012322564	WITHOUT_CLASSIFICATION	4.898767743582441E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923332931601	WITHOUT_CLASSIFICATION	7.666706839994172E-6	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971250570386	WITHOUT_CLASSIFICATION	2.874942961341947E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999989769468755	WITHOUT_CLASSIFICATION	1.023053124492617E-6	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999990347184438	WITHOUT_CLASSIFICATION	9.652815562585834E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987880021406	WITHOUT_CLASSIFICATION	1.211997859385135E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986192251029	WITHOUT_CLASSIFICATION	1.3807748970622202E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996864705772	WITHOUT_CLASSIFICATION	3.135294227503889E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949315320916	WITHOUT_CLASSIFICATION	5.068467908392386E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997683016241	WITHOUT_CLASSIFICATION	2.3169837583785153E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999142984786	WITHOUT_CLASSIFICATION	8.570152139598645E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970074332484	WITHOUT_CLASSIFICATION	2.9925667517445895E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927274766701	WITHOUT_CLASSIFICATION	7.2725233297706954E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999993796249963	WITHOUT_CLASSIFICATION	6.203750036512227E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992278191379	WITHOUT_CLASSIFICATION	7.721808621664277E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999889604092425	WITHOUT_CLASSIFICATION	1.1039590757614062E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999712251281	WITHOUT_CLASSIFICATION	2.8774871933200514E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999668085364	WITHOUT_CLASSIFICATION	3.319146355121288E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998738588500684	WITHOUT_CLASSIFICATION	1.261411499315637E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999963825010031	WITHOUT_CLASSIFICATION	3.617498996988623E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999998941245407	WITHOUT_CLASSIFICATION	1.058754592973969E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999918618882035	WITHOUT_CLASSIFICATION	8.13811179646258E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999970069578594	WITHOUT_CLASSIFICATION	2.993042140587694E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999926744021392	WITHOUT_CLASSIFICATION	7.325597860654371E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999986810491003	WITHOUT_CLASSIFICATION	1.3189508997001389E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999364277706314	WITHOUT_CLASSIFICATION	6.357222936862721E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999958687238015	WITHOUT_CLASSIFICATION	4.131276198567468E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999985692207632	WITHOUT_CLASSIFICATION	1.4307792367223389E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999991143432504	WITHOUT_CLASSIFICATION	8.856567497208008E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999931981612231	WITHOUT_CLASSIFICATION	6.801838776965803E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.999995098027889	WITHOUT_CLASSIFICATION	4.90197211096579E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999740518672	WITHOUT_CLASSIFICATION	2.594813277272995E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993399414381	WITHOUT_CLASSIFICATION	6.600585619591405E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997514442182	WITHOUT_CLASSIFICATION	2.48555781824035E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980464741532	WITHOUT_CLASSIFICATION	1.9535258468038478E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991986643137	WITHOUT_CLASSIFICATION	8.013356863319634E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999748904841905	WITHOUT_CLASSIFICATION	2.510951580958408E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999930694731	WITHOUT_CLASSIFICATION	6.9305269526597016E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999992520069156	WITHOUT_CLASSIFICATION	7.47993084419253E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994333964918	WITHOUT_CLASSIFICATION	5.666035082204969E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998106488964	WITHOUT_CLASSIFICATION	1.8935110359445333E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999673534539	WITHOUT_CLASSIFICATION	3.264654610436195E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999994401268703	WITHOUT_CLASSIFICATION	5.598731296791677E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997342834251	WITHOUT_CLASSIFICATION	2.657165748556467E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999449718057	WITHOUT_CLASSIFICATION	5.502819429079985E-8	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999954267780724	WITHOUT_CLASSIFICATION	4.573221927597449E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999984906078626	WITHOUT_CLASSIFICATION	1.5093921374638709E-6	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999990989921693	WITHOUT_CLASSIFICATION	9.010078307316409E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999993301222332	WITHOUT_CLASSIFICATION	6.698777667962414E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998738588500684	WITHOUT_CLASSIFICATION	1.261411499315637E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999982041649826	WITHOUT_CLASSIFICATION	1.7958350174563448E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998935099683	WITHOUT_CLASSIFICATION	1.0649003173535805E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999994790261346	WITHOUT_CLASSIFICATION	5.209738654139149E-7	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998104192033	WITHOUT_CLASSIFICATION	1.8958079682270464E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999002983212	WITHOUT_CLASSIFICATION	9.970167879591489E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999990163445887	WITHOUT_CLASSIFICATION	9.836554113167058E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998650638900716	WITHOUT_CLASSIFICATION	1.3493610992840435E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999994585677927	WITHOUT_CLASSIFICATION	5.414322072379606E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999999971057479	WITHOUT_CLASSIFICATION	2.8942521045598357E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999385689058	WITHOUT_CLASSIFICATION	6.143109422531665E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999558548086	WITHOUT_CLASSIFICATION	4.414519151099449E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999057549293	WITHOUT_CLASSIFICATION	9.42450707235057E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999431194416	WITHOUT_CLASSIFICATION	5.688055829460843E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999860901835	WITHOUT_CLASSIFICATION	1.3909816616998177E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999928040798991	WITHOUT_CLASSIFICATION	7.1959201007957905E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997419600016	WITHOUT_CLASSIFICATION	2.5803999842562023E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999870707899381	WITHOUT_CLASSIFICATION	1.2929210061958155E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998722077851	WITHOUT_CLASSIFICATION	1.277922148196675E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99999884547597	WITHOUT_CLASSIFICATION	1.15452403013859E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.999999004492139	WITHOUT_CLASSIFICATION	9.955078610005847E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997381343986	WITHOUT_CLASSIFICATION	2.6186560150081705E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999974656456195	WITHOUT_CLASSIFICATION	2.5343543804037606E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999979747311915	WITHOUT_CLASSIFICATION	2.0252688084969515E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999998167455064	WITHOUT_CLASSIFICATION	1.8325449360216427E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999973568259226	WITHOUT_CLASSIFICATION	2.6431740774713106E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999990900532627	WITHOUT_CLASSIFICATION	9.099467372190072E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.999867811888278	WITHOUT_CLASSIFICATION	1.3218811172188726E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999985886215789	WITHOUT_CLASSIFICATION	1.4113784210734618E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999964825606826	WITHOUT_CLASSIFICATION	3.5174393174662207E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999748238676	WITHOUT_CLASSIFICATION	2.5176132505701274E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998738588500684	WITHOUT_CLASSIFICATION	1.261411499315637E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99999927007754	WITHOUT_CLASSIFICATION	7.299224600037487E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.99999995288102	WITHOUT_CLASSIFICATION	4.711897992172526E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999891152325282	WITHOUT_CLASSIFICATION	1.0884767471912251E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998738588500684	WITHOUT_CLASSIFICATION	1.261411499315637E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999999211713841	WITHOUT_CLASSIFICATION	7.882861591351971E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997381343986	WITHOUT_CLASSIFICATION	2.6186560150081705E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999881088329629	WITHOUT_CLASSIFICATION	1.1891167037195424E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9987364580878834	WITHOUT_CLASSIFICATION	0.0012635419121166244	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999994199033174	WITHOUT_CLASSIFICATION	5.800966826280701E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999385689058	WITHOUT_CLASSIFICATION	6.143109422531665E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999558548086	WITHOUT_CLASSIFICATION	4.414519151099449E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999057549293	WITHOUT_CLASSIFICATION	9.42450707235057E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999975409357216	WITHOUT_CLASSIFICATION	2.4590642784447885E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999991126142883	WITHOUT_CLASSIFICATION	8.873857117920441E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999959254840447	WITHOUT_CLASSIFICATION	4.07451595525836E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999967543353984	WITHOUT_CLASSIFICATION	3.2456646016375582E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999670544888055	WITHOUT_CLASSIFICATION	3.294551119451501E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998738588500684	WITHOUT_CLASSIFICATION	1.261411499315637E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999431194416	WITHOUT_CLASSIFICATION	5.688055829460843E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999860901835	WITHOUT_CLASSIFICATION	1.3909816616998177E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993333235495	WITHOUT_CLASSIFICATION	6.666764504022855E-7	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999405189408	WITHOUT_CLASSIFICATION	5.9481059276442885E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999986456259337	WITHOUT_CLASSIFICATION	1.3543740662783012E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999938569603014	WITHOUT_CLASSIFICATION	6.143039698660426E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999963783142924	WITHOUT_CLASSIFICATION	3.6216857076346415E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999506926662	WITHOUT_CLASSIFICATION	4.930733376936169E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927274766701	WITHOUT_CLASSIFICATION	7.2725233297706954E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999944335814078	WITHOUT_CLASSIFICATION	5.566418592171799E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999990203240182	WITHOUT_CLASSIFICATION	9.796759817417545E-7	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999980012351835	WITHOUT_CLASSIFICATION	1.9987648164485227E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999754334049	WITHOUT_CLASSIFICATION	2.4566595051173228E-8	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997421088423	WITHOUT_CLASSIFICATION	2.5789115765136003E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822788415862	WITHOUT_CLASSIFICATION	1.772115841380519E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951012322564	WITHOUT_CLASSIFICATION	4.898767743582441E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986192251029	WITHOUT_CLASSIFICATION	1.3807748970622202E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997421088423	WITHOUT_CLASSIFICATION	2.5789115765136003E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999468656348	WITHOUT_CLASSIFICATION	5.313436520816641E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996854430871	WITHOUT_CLASSIFICATION	3.145569127793024E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995220678615	WITHOUT_CLASSIFICATION	4.779321385260153E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928481793842	WITHOUT_CLASSIFICATION	7.151820615828384E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998428918583	WITHOUT_CLASSIFICATION	1.5710814172763655E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999878130715107	WITHOUT_CLASSIFICATION	1.2186928489328982E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996864705772	WITHOUT_CLASSIFICATION	3.135294227503889E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999142984786	WITHOUT_CLASSIFICATION	8.570152139598645E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999449718057	WITHOUT_CLASSIFICATION	5.502819429079985E-8	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999990377968873	WITHOUT_CLASSIFICATION	9.622031127298988E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999994913815392	WITHOUT_CLASSIFICATION	5.086184608097234E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999674930705	WITHOUT_CLASSIFICATION	3.2506929504608663E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999994668802762	WITHOUT_CLASSIFICATION	5.331197238066038E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999977918767553	WITHOUT_CLASSIFICATION	2.2081232446662466E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997458334327	WITHOUT_CLASSIFICATION	2.541665673689876E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999932745909297	WITHOUT_CLASSIFICATION	6.725409070352178E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998038770795	WITHOUT_CLASSIFICATION	1.9612292041790537E-7	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999997051031914	WITHOUT_CLASSIFICATION	2.948968085419877E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999916041021	WITHOUT_CLASSIFICATION	8.395897805594269E-9	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999980732650144	WITHOUT_CLASSIFICATION	1.9267349855303124E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999958595246097	WITHOUT_CLASSIFICATION	4.140475390286356E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999969708652291	WITHOUT_CLASSIFICATION	3.0291347709989242E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999975831618707	WITHOUT_CLASSIFICATION	2.4168381292133964E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998975430584	WITHOUT_CLASSIFICATION	1.0245694153854578E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996175563818	WITHOUT_CLASSIFICATION	3.824436181854429E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989706382347	WITHOUT_CLASSIFICATION	1.0293617653100824E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999992545023954	WITHOUT_CLASSIFICATION	7.454976045532532E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999904411936907	WITHOUT_CLASSIFICATION	9.558806309299074E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974087294122	WITHOUT_CLASSIFICATION	2.5912705877498717E-6	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999972334930091	WITHOUT_CLASSIFICATION	2.7665069909171472E-6	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999266181311	WITHOUT_CLASSIFICATION	7.338186890213089E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979642476434	WITHOUT_CLASSIFICATION	2.035752356558425E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999993230364634	WITHOUT_CLASSIFICATION	6.769635365116747E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999994703312839	WITHOUT_CLASSIFICATION	5.296687160001768E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983103252043	WITHOUT_CLASSIFICATION	1.6896747958024634E-6	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999998789760102	WITHOUT_CLASSIFICATION	1.210239898019527E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989203540595	WITHOUT_CLASSIFICATION	1.0796459404818832E-6	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990277426453	WITHOUT_CLASSIFICATION	9.722573546753867E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998965115204	WITHOUT_CLASSIFICATION	1.0348847945760711E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993231223838	WITHOUT_CLASSIFICATION	6.76877616229317E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999635073817	WITHOUT_CLASSIFICATION	3.649261823240519E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999219789371	WITHOUT_CLASSIFICATION	7.802106288929077E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998168742551239	WITHOUT_CLASSIFICATION	1.8312574487610358E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998092947016232	WITHOUT_CLASSIFICATION	1.9070529837688618E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999992488666147	WITHOUT_CLASSIFICATION	7.51133385295254E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998416239818	WITHOUT_CLASSIFICATION	1.5837601818917316E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999951202713931	WITHOUT_CLASSIFICATION	4.879728606815412E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999071010742	WITHOUT_CLASSIFICATION	9.289892582143714E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998250385844	WITHOUT_CLASSIFICATION	1.7496141557260552E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999991354383941	WITHOUT_CLASSIFICATION	8.645616059810813E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999644220888134	WITHOUT_CLASSIFICATION	3.5577911186586736E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997613567775	WITHOUT_CLASSIFICATION	2.386432225409515E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999661482527541	WITHOUT_CLASSIFICATION	3.3851747245887236E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998918060183	WITHOUT_CLASSIFICATION	1.0819398164384567E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999992445899129	WITHOUT_CLASSIFICATION	7.55410087150285E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999978448229371	WITHOUT_CLASSIFICATION	2.1551770629472888E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9995036114419942	WITHOUT_CLASSIFICATION	4.963885580058388E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999967962454294	WITHOUT_CLASSIFICATION	3.2037545707074155E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999999812884254	WITHOUT_CLASSIFICATION	1.8711574601812394E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999973734004926	WITHOUT_CLASSIFICATION	2.626599507531897E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999035176312	WITHOUT_CLASSIFICATION	9.648236880471452E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999987854521678	WITHOUT_CLASSIFICATION	1.2145478321925514E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999986369468722	WITHOUT_CLASSIFICATION	1.3630531278525758E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999099799739	WITHOUT_CLASSIFICATION	9.00200261576316E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998359722251	WITHOUT_CLASSIFICATION	1.6402777491004001E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999983918212486	WITHOUT_CLASSIFICATION	1.6081787514482115E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998955711467	WITHOUT_CLASSIFICATION	1.04428853264086E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999997316382716	WITHOUT_CLASSIFICATION	2.6836172848343016E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999999679227934	WITHOUT_CLASSIFICATION	3.2077206597096954E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999127503397	WITHOUT_CLASSIFICATION	8.724966023932923E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998653645492	WITHOUT_CLASSIFICATION	1.346354508095624E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999997254166421	WITHOUT_CLASSIFICATION	2.7458335789013164E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999995423658202	WITHOUT_CLASSIFICATION	4.576341796979616E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999998162209341	WITHOUT_CLASSIFICATION	1.8377906589540945E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999987970378894	WITHOUT_CLASSIFICATION	1.202962110624593E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999983761923845	WITHOUT_CLASSIFICATION	1.6238076154642408E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999926477799366	WITHOUT_CLASSIFICATION	7.3522200634428484E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999989558899084	WITHOUT_CLASSIFICATION	1.044110091676134E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999886714837201	WITHOUT_CLASSIFICATION	1.1328516280029106E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999989300997181	WITHOUT_CLASSIFICATION	1.0699002819654718E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999989978677479	WITHOUT_CLASSIFICATION	1.0021322520989834E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999995554738549	WITHOUT_CLASSIFICATION	4.4452614505714673E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999704954528635	WITHOUT_CLASSIFICATION	2.9504547136528447E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998413192536	WITHOUT_CLASSIFICATION	1.58680746449697E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999979977413527	WITHOUT_CLASSIFICATION	2.0022586473596043E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999788300467141	WITHOUT_CLASSIFICATION	2.116995328600063E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999799090732063	WITHOUT_CLASSIFICATION	2.009092679373074E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999991347029537	WITHOUT_CLASSIFICATION	8.652970462892332E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999946207464239	WITHOUT_CLASSIFICATION	5.379253576127457E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999994980633452	WITHOUT_CLASSIFICATION	5.019366548068869E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999993679508199	WITHOUT_CLASSIFICATION	6.320491800686748E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999995108421557	WITHOUT_CLASSIFICATION	4.891578443887213E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.999991624598903	WITHOUT_CLASSIFICATION	8.37540109699019E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999991837548506	WITHOUT_CLASSIFICATION	8.162451494111667E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999978095096597	WITHOUT_CLASSIFICATION	2.1904903403369977E-6	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999979027169401	WITHOUT_CLASSIFICATION	2.0972830598112495E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999884297162952	WITHOUT_CLASSIFICATION	1.1570283704865511E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999931174926775	WITHOUT_CLASSIFICATION	6.8825073224674096E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999912564785252	WITHOUT_CLASSIFICATION	8.743521474805395E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999976329777877	WITHOUT_CLASSIFICATION	2.3670222123022625E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999952969401684	WITHOUT_CLASSIFICATION	4.703059831568803E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999872526028478	WITHOUT_CLASSIFICATION	1.274739715214749E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999865338328087	WITHOUT_CLASSIFICATION	1.346616719134368E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999779688928803	WITHOUT_CLASSIFICATION	2.2031107119779772E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.999984199200356	WITHOUT_CLASSIFICATION	1.580079964400826E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999997054985259	WITHOUT_CLASSIFICATION	2.945014740432242E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999659757136	WITHOUT_CLASSIFICATION	3.4024286409981123E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999974007479382	WITHOUT_CLASSIFICATION	2.599252061813986E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999324995510958	WITHOUT_CLASSIFICATION	6.750044890419767E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999938221795541	WITHOUT_CLASSIFICATION	6.177820445816049E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999974007479382	WITHOUT_CLASSIFICATION	2.599252061813986E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999993705085194	WITHOUT_CLASSIFICATION	6.294914806324402E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.999998137886173	WITHOUT_CLASSIFICATION	1.8621138269378653E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999997700563503	WITHOUT_CLASSIFICATION	2.2994364969010583E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999983581660417	WITHOUT_CLASSIFICATION	1.6418339584206351E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999995009138711	WITHOUT_CLASSIFICATION	4.990861288908213E-7	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999998985212739	WITHOUT_CLASSIFICATION	1.0147872610640777E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999384358614609	WITHOUT_CLASSIFICATION	6.156413853900939E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999982447636903	WITHOUT_CLASSIFICATION	1.755236309828723E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999997735349011	WITHOUT_CLASSIFICATION	2.264650988869568E-7	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999926702490094	WITHOUT_CLASSIFICATION	7.329750990649103E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999998677730745	WITHOUT_CLASSIFICATION	1.3222692556667068E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999082100136	WITHOUT_CLASSIFICATION	9.178998647873677E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999929997217	WITHOUT_CLASSIFICATION	7.00027829340479E-8	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999996356399995	WITHOUT_CLASSIFICATION	3.6436000055532546E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999679019512	WITHOUT_CLASSIFICATION	3.20980487339164E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998921102761884	WITHOUT_CLASSIFICATION	1.0788972381164355E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999961468381297	WITHOUT_CLASSIFICATION	3.853161870364224E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999961468381297	WITHOUT_CLASSIFICATION	3.853161870364224E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999651270741	WITHOUT_CLASSIFICATION	3.487292581177039E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999888007729546	WITHOUT_CLASSIFICATION	1.1199227045458927E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999934298896966	WITHOUT_CLASSIFICATION	6.570110303333446E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999841386356196	WITHOUT_CLASSIFICATION	1.5861364380351023E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999272622446	WITHOUT_CLASSIFICATION	7.273775540029868E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997942018342252	WITHOUT_CLASSIFICATION	2.0579816577482845E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999976236395369	WITHOUT_CLASSIFICATION	2.3763604630245204E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999799448308	WITHOUT_CLASSIFICATION	2.0055169196032998E-8	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999988406660067	WITHOUT_CLASSIFICATION	1.1593339932666206E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999998680273421	WITHOUT_CLASSIFICATION	1.319726579916393E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998775166095	WITHOUT_CLASSIFICATION	1.2248339052490416E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999900103304	WITHOUT_CLASSIFICATION	9.989669604886098E-8	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999996093830562	WITHOUT_CLASSIFICATION	3.906169438364732E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999919495462586	WITHOUT_CLASSIFICATION	8.050453741406744E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999997995936349	WITHOUT_CLASSIFICATION	2.0040636502463492E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999975831618707	WITHOUT_CLASSIFICATION	2.4168381292133964E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999902004551099	WITHOUT_CLASSIFICATION	9.799544890157192E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998024685411	WITHOUT_CLASSIFICATION	1.9753145878016376E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999990746572494	WITHOUT_CLASSIFICATION	9.253427505327042E-7	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9985934653399263	WITHOUT_CLASSIFICATION	0.0014065346600736271	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999999069824175	WITHOUT_CLASSIFICATION	9.301758250940661E-7	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999925747624461	WITHOUT_CLASSIFICATION	7.425237553902636E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998155534805	WITHOUT_CLASSIFICATION	1.844465194780464E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999754305625	WITHOUT_CLASSIFICATION	2.4569437475608828E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999030092834	WITHOUT_CLASSIFICATION	9.699071654418104E-8	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999995467624074	WITHOUT_CLASSIFICATION	4.532375925762318E-7	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999990671145887	WITHOUT_CLASSIFICATION	9.328854113613924E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999991603662459	WITHOUT_CLASSIFICATION	8.396337540779803E-7	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999987662200673	WITHOUT_CLASSIFICATION	1.2337799326245013E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999980297993556	WITHOUT_CLASSIFICATION	1.9702006445019373E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999243795285618	WITHOUT_CLASSIFICATION	7.562047143819928E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999980316312888	WITHOUT_CLASSIFICATION	1.968368711224614E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999901319521736	WITHOUT_CLASSIFICATION	9.86804782647226E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999991949668079	WITHOUT_CLASSIFICATION	8.05033192093558E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999990699383823	WITHOUT_CLASSIFICATION	9.300616177091766E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999980419527296	WITHOUT_CLASSIFICATION	1.9580472704771797E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999612682329694	WITHOUT_CLASSIFICATION	3.873176703067127E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999972288704321	WITHOUT_CLASSIFICATION	2.7711295678868403E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999985395384401	WITHOUT_CLASSIFICATION	1.460461559888391E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999967905863204	WITHOUT_CLASSIFICATION	3.2094136796915405E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.99999894025358	WITHOUT_CLASSIFICATION	1.0597464199341896E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999997305258235	WITHOUT_CLASSIFICATION	2.6947417658571063E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999415695939	WITHOUT_CLASSIFICATION	5.843040607093076E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998791007878	WITHOUT_CLASSIFICATION	1.208992121697257E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999998472950473	WITHOUT_CLASSIFICATION	1.52704952716631E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999882676729	WITHOUT_CLASSIFICATION	1.1732327140588729E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994232070617	WITHOUT_CLASSIFICATION	5.767929383085589E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999820521688	WITHOUT_CLASSIFICATION	1.7947831201217677E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999337088401	WITHOUT_CLASSIFICATION	6.629115991099074E-8	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998561992248	WITHOUT_CLASSIFICATION	1.4380077509982803E-7	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999994487200836	WITHOUT_CLASSIFICATION	5.512799163717037E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999616070983	WITHOUT_CLASSIFICATION	3.839290169738489E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999555142002	WITHOUT_CLASSIFICATION	4.448579981222914E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999994636696204	WITHOUT_CLASSIFICATION	5.363303795393661E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996385988056	WITHOUT_CLASSIFICATION	3.614011944489788E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999994636696204	WITHOUT_CLASSIFICATION	5.363303795393661E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999308014428735	WITHOUT_CLASSIFICATION	6.919855712647126E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999981156091676	WITHOUT_CLASSIFICATION	1.8843908324277202E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999991320160176	WITHOUT_CLASSIFICATION	8.679839824689725E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992457920888	WITHOUT_CLASSIFICATION	7.542079112174412E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990648539532	WITHOUT_CLASSIFICATION	9.351460468554477E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999886779929633	WITHOUT_CLASSIFICATION	1.1322007036766656E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989989292436	WITHOUT_CLASSIFICATION	1.0010707565073844E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999969900719811	WITHOUT_CLASSIFICATION	3.009928018897193E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999336585357	WITHOUT_CLASSIFICATION	6.634146434513264E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999997470178602	WITHOUT_CLASSIFICATION	2.5298213969647534E-7	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994834314887	WITHOUT_CLASSIFICATION	5.16568511248785E-7	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999882852285	WITHOUT_CLASSIFICATION	1.171477149664133E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999926927283007	WITHOUT_CLASSIFICATION	7.307271699259803E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999998010496502	WITHOUT_CLASSIFICATION	1.9895034976052228E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999985163691651	WITHOUT_CLASSIFICATION	1.4836308348855136E-6	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999923338723	WITHOUT_CLASSIFICATION	7.666127748528776E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999862671775253	WITHOUT_CLASSIFICATION	1.3732822474737191E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999862671775253	WITHOUT_CLASSIFICATION	1.3732822474737191E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999993437375139	WITHOUT_CLASSIFICATION	6.562624860714456E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999959739741958	WITHOUT_CLASSIFICATION	4.026025804146118E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999794996115	WITHOUT_CLASSIFICATION	2.0500388504106467E-8	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999800033941	WITHOUT_CLASSIFICATION	1.999660597952542E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999386100001	WITHOUT_CLASSIFICATION	6.13899998645058E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999962974964257	WITHOUT_CLASSIFICATION	3.702503574273523E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999965682871228	WITHOUT_CLASSIFICATION	3.431712877093288E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999995484552473	WITHOUT_CLASSIFICATION	4.5154475274627807E-7	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999997698607968	WITHOUT_CLASSIFICATION	2.3013920331082527E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997466186153	WITHOUT_CLASSIFICATION	2.53381384673433E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995171559306	WITHOUT_CLASSIFICATION	4.828440693012718E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999992153097887	WITHOUT_CLASSIFICATION	7.846902112098097E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999766926926	WITHOUT_CLASSIFICATION	2.3307307413633737E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998516150338	WITHOUT_CLASSIFICATION	1.4838496625962756E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998261306463	WITHOUT_CLASSIFICATION	1.7386935367044952E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998215641415	WITHOUT_CLASSIFICATION	1.7843585850751433E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999987532617135	WITHOUT_CLASSIFICATION	1.246738286539064E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999990373852103	WITHOUT_CLASSIFICATION	9.626147896960693E-7	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999994505537325	WITHOUT_CLASSIFICATION	5.494462675223321E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999999983358859	WITHOUT_CLASSIFICATION	1.664114104105093E-8	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999979877371402	WITHOUT_CLASSIFICATION	2.0122628597980235E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997087025144	WITHOUT_CLASSIFICATION	2.9129748564304566E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999122654959	WITHOUT_CLASSIFICATION	8.773450411775552E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999989290813891	WITHOUT_CLASSIFICATION	1.0709186108003466E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999990050888588	WITHOUT_CLASSIFICATION	9.949111411768665E-7	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999976140317597	WITHOUT_CLASSIFICATION	2.3859682403037817E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999548288199	WITHOUT_CLASSIFICATION	4.5171180095282427E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999893433097335	WITHOUT_CLASSIFICATION	1.0656690266540328E-5	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999920351151939	WITHOUT_CLASSIFICATION	7.964884806238223E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999953798606948	WITHOUT_CLASSIFICATION	4.620139305304309E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999974563572216	WITHOUT_CLASSIFICATION	2.5436427783748096E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999989895235911	WITHOUT_CLASSIFICATION	1.0104764089006227E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999494523272145	WITHOUT_CLASSIFICATION	5.054767278539938E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999971387093967	WITHOUT_CLASSIFICATION	2.8612906033638925E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999986766190005	WITHOUT_CLASSIFICATION	1.323380999379016E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999986481080682	WITHOUT_CLASSIFICATION	1.3518919318227347E-6	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999985623586928	WITHOUT_CLASSIFICATION	1.4376413072166355E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999990775737293	WITHOUT_CLASSIFICATION	9.224262707228865E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999485319053	WITHOUT_CLASSIFICATION	5.146809465192588E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999995878276662	WITHOUT_CLASSIFICATION	4.1217233381876355E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999995581110935	WITHOUT_CLASSIFICATION	4.4188890634633107E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997622577013	WITHOUT_CLASSIFICATION	2.3774229859631404E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999986387645972	WITHOUT_CLASSIFICATION	1.3612354027503398E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999989804068795	WITHOUT_CLASSIFICATION	1.0195931205048646E-6	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996824183155	WITHOUT_CLASSIFICATION	3.1758168449384735E-7	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999998672874963	WITHOUT_CLASSIFICATION	1.3271250360904062E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999997814364231	WITHOUT_CLASSIFICATION	2.1856357684571083E-7	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999544702826	WITHOUT_CLASSIFICATION	4.5529717397165285E-7	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999999435118636	WITHOUT_CLASSIFICATION	5.648813639593587E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999622913634	WITHOUT_CLASSIFICATION	3.770863659549603E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993610087679	WITHOUT_CLASSIFICATION	6.38991232058613E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999938783107444	WITHOUT_CLASSIFICATION	6.121689255573047E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994838806742	WITHOUT_CLASSIFICATION	5.161193258123462E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999966707475204	WITHOUT_CLASSIFICATION	3.329252479730323E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999944688217749	WITHOUT_CLASSIFICATION	5.531178225188581E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999999211713841	WITHOUT_CLASSIFICATION	7.882861591351971E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999999211713841	WITHOUT_CLASSIFICATION	7.882861591351971E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999741802917319	WITHOUT_CLASSIFICATION	2.581970826806294E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999967982076571	WITHOUT_CLASSIFICATION	3.2017923429813E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999977886890674	WITHOUT_CLASSIFICATION	2.211310932692548E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999164161202	WITHOUT_CLASSIFICATION	8.358387977517464E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999692447263	WITHOUT_CLASSIFICATION	3.075527368658155E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997638961369	WITHOUT_CLASSIFICATION	2.3610386323186628E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995064212159	WITHOUT_CLASSIFICATION	4.935787840696765E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999849435473872	WITHOUT_CLASSIFICATION	1.5056452612674646E-5	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999648325659207	WITHOUT_CLASSIFICATION	3.516743407933879E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999989810292804	WITHOUT_CLASSIFICATION	1.01897071954856E-6	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999689542187388	WITHOUT_CLASSIFICATION	3.10457812613235E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999994778157217	WITHOUT_CLASSIFICATION	5.22184278258019E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999518549308093	WITHOUT_CLASSIFICATION	4.814506919076768E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998917492045	WITHOUT_CLASSIFICATION	1.0825079550288344E-7	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999981678213596	WITHOUT_CLASSIFICATION	1.8321786404174969E-6	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999996728945639	WITHOUT_CLASSIFICATION	3.2710543610426797E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999878323167	WITHOUT_CLASSIFICATION	1.2167683310272116E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.999991566551695	WITHOUT_CLASSIFICATION	8.43344830498398E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999847068417468	WITHOUT_CLASSIFICATION	1.52931582531869E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999993316909309	WITHOUT_CLASSIFICATION	6.683090691218799E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999767498781	WITHOUT_CLASSIFICATION	2.3250121871630048E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999983263252564	WITHOUT_CLASSIFICATION	1.67367474359413E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999818906631045	WITHOUT_CLASSIFICATION	1.8109336895524785E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999874419514	WITHOUT_CLASSIFICATION	1.2558048486744485E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999997859940617	WITHOUT_CLASSIFICATION	2.140059384137695E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999998943351729	WITHOUT_CLASSIFICATION	1.0566482708068993E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999993292087641	WITHOUT_CLASSIFICATION	6.707912358923314E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999272700658096	WITHOUT_CLASSIFICATION	7.272993419038476E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999993589715481	WITHOUT_CLASSIFICATION	6.410284520074931E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999818906631045	WITHOUT_CLASSIFICATION	1.8109336895524785E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999983573590515	WITHOUT_CLASSIFICATION	1.6426409484937343E-6	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998897059799	WITHOUT_CLASSIFICATION	1.1029402013996189E-7	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9998033406421497	WITHOUT_CLASSIFICATION	1.966593578503156E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999997892461019	WITHOUT_CLASSIFICATION	2.1075389810281715E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999339742951	WITHOUT_CLASSIFICATION	6.602570494391217E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999853711156791	WITHOUT_CLASSIFICATION	1.4628884320864447E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999599788892	WITHOUT_CLASSIFICATION	4.0021110719660646E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997501511765	WITHOUT_CLASSIFICATION	2.4984882347082675E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999981944334769	WITHOUT_CLASSIFICATION	1.805566523161749E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999997892461019	WITHOUT_CLASSIFICATION	2.1075389810281715E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999495539892957	WITHOUT_CLASSIFICATION	5.0446010704305665E-5	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997157791879	WITHOUT_CLASSIFICATION	2.8422081207028565E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999991011370464	WITHOUT_CLASSIFICATION	8.9886295361872E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999809550670498	WITHOUT_CLASSIFICATION	1.90449329502432E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999993327628369	WITHOUT_CLASSIFICATION	6.672371631680316E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995171559306	WITHOUT_CLASSIFICATION	4.828440693012718E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999658237404	WITHOUT_CLASSIFICATION	3.4176259606208985E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998208314328	WITHOUT_CLASSIFICATION	1.7916856723662625E-7	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999986321996802	WITHOUT_CLASSIFICATION	1.3678003197890949E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999995867202113	WITHOUT_CLASSIFICATION	4.132797888074821E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999866401478553	WITHOUT_CLASSIFICATION	1.3359852144732543E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.999991623274314	WITHOUT_CLASSIFICATION	8.376725685980604E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999984481604711	WITHOUT_CLASSIFICATION	1.5518395289302856E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999973463789402	WITHOUT_CLASSIFICATION	2.653621059755474E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999891898343882	WITHOUT_CLASSIFICATION	1.0810165611790076E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999981529161003	WITHOUT_CLASSIFICATION	1.8470838998359264E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999498193765683	WITHOUT_CLASSIFICATION	5.018062343173323E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999509250442	WITHOUT_CLASSIFICATION	4.907495577479093E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999833205315	WITHOUT_CLASSIFICATION	1.6679468487713253E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999997825890963	WITHOUT_CLASSIFICATION	2.1741090366555432E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999599875833	WITHOUT_CLASSIFICATION	4.001241678697368E-8	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999996558340233	WITHOUT_CLASSIFICATION	3.4416597671955476E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999983878487184	WITHOUT_CLASSIFICATION	1.612151281524504E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999991629650989	WITHOUT_CLASSIFICATION	8.370349009021627E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999999445794148	WITHOUT_CLASSIFICATION	5.542058519329308E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999903858140421	WITHOUT_CLASSIFICATION	9.61418595792951E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999883505761012	WITHOUT_CLASSIFICATION	1.1649423898687266E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999996309101072	WITHOUT_CLASSIFICATION	3.6908989268835933E-7	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999998414377384	WITHOUT_CLASSIFICATION	1.585622616045709E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999987997680639	WITHOUT_CLASSIFICATION	1.2002319361007831E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999906892452869	WITHOUT_CLASSIFICATION	9.310754713191121E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.999988021093458	WITHOUT_CLASSIFICATION	1.1978906541962757E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998922390417	WITHOUT_CLASSIFICATION	1.0776095833512065E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987945622969	WITHOUT_CLASSIFICATION	1.2054377031310733E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996278192175	WITHOUT_CLASSIFICATION	3.721807825581932E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999901997685776	WITHOUT_CLASSIFICATION	9.800231422453235E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999978029849442	WITHOUT_CLASSIFICATION	2.1970150558413205E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999999947520766	WITHOUT_CLASSIFICATION	5.2479234023042954E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999468981681	WITHOUT_CLASSIFICATION	5.310183198671588E-8	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999973907123123	WITHOUT_CLASSIFICATION	2.609287687761652E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999988825508107	WITHOUT_CLASSIFICATION	1.1174491893272352E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999475229145	WITHOUT_CLASSIFICATION	5.247708546078271E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999998895176724	WITHOUT_CLASSIFICATION	1.1048232753165895E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999929843540301	WITHOUT_CLASSIFICATION	7.015645970027643E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994165186624	WITHOUT_CLASSIFICATION	5.834813376848687E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999915931176345	WITHOUT_CLASSIFICATION	8.406882365551166E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998329715994	WITHOUT_CLASSIFICATION	1.670284004950067E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998610452069	WITHOUT_CLASSIFICATION	1.3895479304610907E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999172022292562	WITHOUT_CLASSIFICATION	8.279777074380946E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999981073820939	WITHOUT_CLASSIFICATION	1.892617906066556E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999928919892026	WITHOUT_CLASSIFICATION	7.108010797372318E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999925532945878	WITHOUT_CLASSIFICATION	7.446705412207783E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999994136609256	WITHOUT_CLASSIFICATION	5.863390744563539E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999826247565831	WITHOUT_CLASSIFICATION	1.7375243416931792E-5	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999995568219074	WITHOUT_CLASSIFICATION	4.431780925480018E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999935536502398	WITHOUT_CLASSIFICATION	6.446349760087048E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999997590817303	WITHOUT_CLASSIFICATION	2.4091826962593976E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999279204643	WITHOUT_CLASSIFICATION	7.207953571978611E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999984443622618	WITHOUT_CLASSIFICATION	1.555637738159659E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999997618322373	WITHOUT_CLASSIFICATION	2.3816776276552334E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999985311626468	WITHOUT_CLASSIFICATION	1.4688373532096291E-6	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999750711210791	WITHOUT_CLASSIFICATION	2.492887892093721E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987945622969	WITHOUT_CLASSIFICATION	1.2054377031310733E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999823671687	WITHOUT_CLASSIFICATION	1.763283123837869E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999994478968	WITHOUT_CLASSIFICATION	5.521031988471554E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.999998717416025	WITHOUT_CLASSIFICATION	1.2825839750070353E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999947183088455	WITHOUT_CLASSIFICATION	5.281691154529812E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999990422083067	WITHOUT_CLASSIFICATION	9.577916933569446E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999884689505643	WITHOUT_CLASSIFICATION	1.1531049435606506E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993734280842	WITHOUT_CLASSIFICATION	6.265719158627901E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999209591365	WITHOUT_CLASSIFICATION	7.904086353543707E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998913073644	WITHOUT_CLASSIFICATION	1.0869263544145486E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.99999543745001	WITHOUT_CLASSIFICATION	4.562549989978423E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999895973793	WITHOUT_CLASSIFICATION	1.0402620686966572E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998995295861461	WITHOUT_CLASSIFICATION	1.0047041385382657E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999997659487442	WITHOUT_CLASSIFICATION	2.3405125585621807E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999985788633571	WITHOUT_CLASSIFICATION	1.421136642899828E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999308014428735	WITHOUT_CLASSIFICATION	6.919855712647126E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995433234838	WITHOUT_CLASSIFICATION	4.566765160858979E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999877224404	WITHOUT_CLASSIFICATION	1.2277559767168296E-8	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999999387127092	WITHOUT_CLASSIFICATION	6.128729079789462E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999992225333976	WITHOUT_CLASSIFICATION	7.774666023028451E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999712652459	WITHOUT_CLASSIFICATION	2.8734754160467295E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999966792907726	WITHOUT_CLASSIFICATION	3.320709227406212E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999966792907726	WITHOUT_CLASSIFICATION	3.320709227406212E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997167956263	WITHOUT_CLASSIFICATION	2.8320437368379035E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999827816009897	WITHOUT_CLASSIFICATION	1.7218399010223835E-5	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999226089545	WITHOUT_CLASSIFICATION	7.739104537132662E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999994818002633	WITHOUT_CLASSIFICATION	5.181997366297611E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999998194736202	WITHOUT_CLASSIFICATION	1.805263799165859E-7	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999999778516732	WITHOUT_CLASSIFICATION	2.2148326802392285E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999994387334719	WITHOUT_CLASSIFICATION	5.612665282220837E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997514940587	WITHOUT_CLASSIFICATION	2.4850594118757803E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997514940587	WITHOUT_CLASSIFICATION	2.4850594118757803E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999993324374178	WITHOUT_CLASSIFICATION	6.675625821727019E-7	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999979310564053	WITHOUT_CLASSIFICATION	2.068943594686667E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999999925943901	WITHOUT_CLASSIFICATION	7.405609904779763E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979884699257	WITHOUT_CLASSIFICATION	2.0115300741877527E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979884699257	WITHOUT_CLASSIFICATION	2.0115300741877527E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979884699257	WITHOUT_CLASSIFICATION	2.0115300741877527E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999995830140086	WITHOUT_CLASSIFICATION	4.169859914066434E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999991768338146	WITHOUT_CLASSIFICATION	8.231661853470475E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999992477789055	WITHOUT_CLASSIFICATION	7.52221094451308E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999864395387739	WITHOUT_CLASSIFICATION	1.3560461226102269E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999995848410864	WITHOUT_CLASSIFICATION	4.151589136121966E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999998683891644	WITHOUT_CLASSIFICATION	1.316108354641299E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999995580300598	WITHOUT_CLASSIFICATION	4.4196994028611516E-7	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999595370724161	WITHOUT_CLASSIFICATION	4.046292758378159E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997891173195	WITHOUT_CLASSIFICATION	2.1088268056032918E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999990920782318	WITHOUT_CLASSIFICATION	9.079217682725347E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999998371871862	WITHOUT_CLASSIFICATION	1.6281281376305477E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999956741909445	WITHOUT_CLASSIFICATION	4.325809055447361E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999997698939455	WITHOUT_CLASSIFICATION	2.301060544882839E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999991560860138	WITHOUT_CLASSIFICATION	8.439139863237013E-7	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999996835636798	WITHOUT_CLASSIFICATION	3.1643632020714517E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999987847974137	WITHOUT_CLASSIFICATION	1.2152025862544892E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999985212024882	WITHOUT_CLASSIFICATION	1.4787975118082462E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999985212024882	WITHOUT_CLASSIFICATION	1.4787975118082462E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999878276094221	WITHOUT_CLASSIFICATION	1.2172390577822071E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999878276094221	WITHOUT_CLASSIFICATION	1.2172390577822071E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999879681491721	WITHOUT_CLASSIFICATION	1.203185082779071E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999811138384787	WITHOUT_CLASSIFICATION	1.888616152140497E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999811138384787	WITHOUT_CLASSIFICATION	1.888616152140497E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999847123952944	WITHOUT_CLASSIFICATION	1.5287604705570303E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999779874545328	WITHOUT_CLASSIFICATION	2.2012545467231654E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999896757977091	WITHOUT_CLASSIFICATION	1.0324202290918935E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999966792907726	WITHOUT_CLASSIFICATION	3.320709227406212E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999987362023409	WITHOUT_CLASSIFICATION	1.263797659064161E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999779874545328	WITHOUT_CLASSIFICATION	2.2012545467231654E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999853216950463	WITHOUT_CLASSIFICATION	1.4678304953785786E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999999541029336	WITHOUT_CLASSIFICATION	4.589706640548051E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999909146781535	WITHOUT_CLASSIFICATION	9.085321846470221E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999959026364371	WITHOUT_CLASSIFICATION	4.097363562850385E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995434724397	WITHOUT_CLASSIFICATION	4.565275602766059E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999606863140698	WITHOUT_CLASSIFICATION	3.931368593025626E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999997826592353	WITHOUT_CLASSIFICATION	2.173407646820189E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999965654637619	WITHOUT_CLASSIFICATION	3.4345362381015024E-5	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998992076660701	WITHOUT_CLASSIFICATION	1.0079233392991868E-4	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999977851082021	WITHOUT_CLASSIFICATION	2.2148917979028887E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999997815554187	WITHOUT_CLASSIFICATION	2.1844458132560263E-7	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999986113176964	WITHOUT_CLASSIFICATION	1.3886823034982824E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991607460242	WITHOUT_CLASSIFICATION	8.392539758849669E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999960063956317	WITHOUT_CLASSIFICATION	3.993604368358584E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999999233481907	WITHOUT_CLASSIFICATION	7.665180931135124E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999693081509	WITHOUT_CLASSIFICATION	3.0691849090746983E-7	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999989091959417	WITHOUT_CLASSIFICATION	1.0908040582253867E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997065346131	WITHOUT_CLASSIFICATION	2.934653869127681E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997065346131	WITHOUT_CLASSIFICATION	2.934653869127681E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999912507273616	WITHOUT_CLASSIFICATION	8.749272638372337E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999943948277504	WITHOUT_CLASSIFICATION	5.605172249547855E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999951618952663	WITHOUT_CLASSIFICATION	4.8381047337740446E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999931166248408	WITHOUT_CLASSIFICATION	6.88337515920009E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999972790726903	WITHOUT_CLASSIFICATION	2.720927309698988E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998426739231	WITHOUT_CLASSIFICATION	1.5732607703661218E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999511412795	WITHOUT_CLASSIFICATION	4.8858720524180765E-8	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999706499109842	WITHOUT_CLASSIFICATION	2.935008901592308E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999958771324183	WITHOUT_CLASSIFICATION	4.122867581631842E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999907481552666	WITHOUT_CLASSIFICATION	9.251844733529096E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999315887657	WITHOUT_CLASSIFICATION	6.841123428998749E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998995295861461	WITHOUT_CLASSIFICATION	1.0047041385382657E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999996692226595	WITHOUT_CLASSIFICATION	3.3077734051018757E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999984451406803	WITHOUT_CLASSIFICATION	1.554859319746749E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999963019043234	WITHOUT_CLASSIFICATION	3.698095676560518E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999494226074158	WITHOUT_CLASSIFICATION	5.0577392584139344E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999815201068	WITHOUT_CLASSIFICATION	1.8479893200703009E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999815201068	WITHOUT_CLASSIFICATION	1.8479893200703009E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999860956859868	WITHOUT_CLASSIFICATION	1.3904314013093737E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999986702575241	WITHOUT_CLASSIFICATION	1.3297424759437785E-6	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999973305717593	WITHOUT_CLASSIFICATION	2.6694282407998504E-6	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.999993369324177	WITHOUT_CLASSIFICATION	6.63067582303856E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999841928026693	WITHOUT_CLASSIFICATION	1.58071973307157E-5	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999929531803062	WITHOUT_CLASSIFICATION	7.046819693816701E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999946326811845	WITHOUT_CLASSIFICATION	5.367318815493738E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983012517374	WITHOUT_CLASSIFICATION	1.6987482626056224E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999722823224	WITHOUT_CLASSIFICATION	2.7717677567193362E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999698443004	WITHOUT_CLASSIFICATION	3.015569954982274E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999992398000077	WITHOUT_CLASSIFICATION	7.601999923708984E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983012517374	WITHOUT_CLASSIFICATION	1.6987482626056224E-5	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999997729631488	WITHOUT_CLASSIFICATION	2.2703685123439338E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999986262695921	WITHOUT_CLASSIFICATION	1.3737304078504003E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999851506777	WITHOUT_CLASSIFICATION	1.4849322347425627E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999828985779529	WITHOUT_CLASSIFICATION	1.7101422047088563E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999994037646496	WITHOUT_CLASSIFICATION	5.962353504032841E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997972052892	WITHOUT_CLASSIFICATION	2.0279471090380744E-7	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999697076764	WITHOUT_CLASSIFICATION	3.0292323600026657E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999994714899952	WITHOUT_CLASSIFICATION	5.285100048273525E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999997150120691	WITHOUT_CLASSIFICATION	2.849879309253676E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999978266912375	WITHOUT_CLASSIFICATION	2.173308762580769E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999991693227728	WITHOUT_CLASSIFICATION	8.306772272209465E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998458939018	WITHOUT_CLASSIFICATION	1.5410609825961856E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999972281314976	WITHOUT_CLASSIFICATION	2.7718685024985017E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995103838425	WITHOUT_CLASSIFICATION	4.896161574133792E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999986209048316	WITHOUT_CLASSIFICATION	1.3790951683281284E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999998564848819	WITHOUT_CLASSIFICATION	1.4351511813993E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999564245113	WITHOUT_CLASSIFICATION	4.357548878425101E-8	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999777883239894	WITHOUT_CLASSIFICATION	2.221167601064202E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999648611567384	WITHOUT_CLASSIFICATION	3.5138843261475954E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999670474008	WITHOUT_CLASSIFICATION	3.2952599210743066E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999999388019877	WITHOUT_CLASSIFICATION	6.119801231440623E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999982631189236	WITHOUT_CLASSIFICATION	1.7368810764266736E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999979503656394	WITHOUT_CLASSIFICATION	2.049634360535153E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.999993490401055	WITHOUT_CLASSIFICATION	6.509598945080489E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999762884197	WITHOUT_CLASSIFICATION	2.3711580161544965E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999995018125425	WITHOUT_CLASSIFICATION	4.981874575005636E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999639425046	WITHOUT_CLASSIFICATION	3.6057495392483184E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999926035531	WITHOUT_CLASSIFICATION	7.3964469496710905E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999670327229	WITHOUT_CLASSIFICATION	3.296727709703652E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999967272741699	WITHOUT_CLASSIFICATION	3.272725830147494E-6	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999809342954	WITHOUT_CLASSIFICATION	1.906570462404615E-8	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999940257802618	WITHOUT_CLASSIFICATION	5.974219738260474E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999998970932048	WITHOUT_CLASSIFICATION	1.0290679523063161E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999996545418378	WITHOUT_CLASSIFICATION	3.4545816209456474E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996730501587	WITHOUT_CLASSIFICATION	3.269498412587175E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999325368766	WITHOUT_CLASSIFICATION	6.746312336074802E-8	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999993405593811	WITHOUT_CLASSIFICATION	6.594406189123019E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999994102439967	WITHOUT_CLASSIFICATION	5.8975600328053E-7	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999346451208	WITHOUT_CLASSIFICATION	6.53548791886822E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999996428230787	WITHOUT_CLASSIFICATION	3.571769213181948E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999213791037	WITHOUT_CLASSIFICATION	7.862089630941647E-8	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999993555580283	WITHOUT_CLASSIFICATION	6.444419717807612E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999751562831	WITHOUT_CLASSIFICATION	2.4843716830417744E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999477644598	WITHOUT_CLASSIFICATION	5.223554020886011E-8	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999998987357784	WITHOUT_CLASSIFICATION	1.0126422160408713E-6	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999824478601	WITHOUT_CLASSIFICATION	1.7552139860829088E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999996815792427	WITHOUT_CLASSIFICATION	3.184207573488378E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999783687223742	WITHOUT_CLASSIFICATION	2.163127762576415E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999856694676985	WITHOUT_CLASSIFICATION	1.4330532301366142E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999999100875489	WITHOUT_CLASSIFICATION	8.99124510962832E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978790312516	WITHOUT_CLASSIFICATION	2.1209687484309355E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999993804742602	WITHOUT_CLASSIFICATION	6.195257397102035E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998980815534	WITHOUT_CLASSIFICATION	1.0191844657537174E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999460792736	WITHOUT_CLASSIFICATION	5.392072639955352E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999600105324	WITHOUT_CLASSIFICATION	3.998946764534154E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999966919487108	WITHOUT_CLASSIFICATION	3.3080512891845273E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999980804664145	WITHOUT_CLASSIFICATION	1.919533585622687E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998191300044	WITHOUT_CLASSIFICATION	1.8086999556374673E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999211584513	WITHOUT_CLASSIFICATION	7.884154873504692E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999942397375012	WITHOUT_CLASSIFICATION	5.76026249879892E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999986613837428	WITHOUT_CLASSIFICATION	1.338616257258742E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999973293656822	WITHOUT_CLASSIFICATION	2.670634317911198E-6	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999995597243198	WITHOUT_CLASSIFICATION	4.40275680347757E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999575380292483	WITHOUT_CLASSIFICATION	4.246197075170065E-4	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999998277129814	WITHOUT_CLASSIFICATION	1.7228701860603514E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999908721757357	WITHOUT_CLASSIFICATION	9.127824264295583E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978790312516	WITHOUT_CLASSIFICATION	2.1209687484309355E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999976844488062	WITHOUT_CLASSIFICATION	2.3155511938599496E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999653589100096	WITHOUT_CLASSIFICATION	3.464108999039245E-5	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999974788517557	WITHOUT_CLASSIFICATION	2.5211482443239198E-6	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999997341312545	WITHOUT_CLASSIFICATION	2.658687454853209E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999889643485453	WITHOUT_CLASSIFICATION	1.103565145460061E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999995031456359	WITHOUT_CLASSIFICATION	4.968543640394398E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999722823224	WITHOUT_CLASSIFICATION	2.7717677567193362E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999927375423335	WITHOUT_CLASSIFICATION	7.262457666428144E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996730501587	WITHOUT_CLASSIFICATION	3.269498412587175E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999879067703116	WITHOUT_CLASSIFICATION	1.2093229688395517E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998015085527	WITHOUT_CLASSIFICATION	1.9849144727530006E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994128772545	WITHOUT_CLASSIFICATION	5.871227455017074E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994323595404	WITHOUT_CLASSIFICATION	5.676404595512042E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999966428018812	WITHOUT_CLASSIFICATION	3.35719811872148E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999991775155831	WITHOUT_CLASSIFICATION	8.224844169198459E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999827115830143	WITHOUT_CLASSIFICATION	1.7288416985705037E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999998551972508	WITHOUT_CLASSIFICATION	1.448027492075751E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999988901810816	WITHOUT_CLASSIFICATION	1.1098189184332175E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998550194716	WITHOUT_CLASSIFICATION	1.4498052824051884E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999345828571	WITHOUT_CLASSIFICATION	6.541714290698666E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999999778047267	WITHOUT_CLASSIFICATION	2.2195273301473058E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999978672282247	WITHOUT_CLASSIFICATION	2.13277177535566E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999978672282247	WITHOUT_CLASSIFICATION	2.13277177535566E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999881009340813	WITHOUT_CLASSIFICATION	1.1899065918782193E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992617721234	WITHOUT_CLASSIFICATION	7.38227876636348E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999611690146	WITHOUT_CLASSIFICATION	3.8830985462174155E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999995815546312	WITHOUT_CLASSIFICATION	4.18445368802827E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997012739253	WITHOUT_CLASSIFICATION	2.9872607468664453E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997724384574	WITHOUT_CLASSIFICATION	2.275615426458713E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999642782701	WITHOUT_CLASSIFICATION	3.572172979515691E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999847604942078	WITHOUT_CLASSIFICATION	1.5239505792273247E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999447993044	WITHOUT_CLASSIFICATION	5.5200695526117546E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999977833562466	WITHOUT_CLASSIFICATION	2.2166437534324953E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999156599427	WITHOUT_CLASSIFICATION	8.434005724292955E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.999999904971208	WITHOUT_CLASSIFICATION	9.502879188297344E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999770798333	WITHOUT_CLASSIFICATION	2.2920166538965677E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998616614706	WITHOUT_CLASSIFICATION	1.3833852952591642E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999517768069	WITHOUT_CLASSIFICATION	4.822319310621927E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999987024751058	WITHOUT_CLASSIFICATION	1.2975248942723568E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999992018320887	WITHOUT_CLASSIFICATION	7.981679113751825E-7	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999998974536806	WITHOUT_CLASSIFICATION	1.0254631943755266E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999969161558006	WITHOUT_CLASSIFICATION	3.083844199462264E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999928999692644	WITHOUT_CLASSIFICATION	7.100030735597313E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999993569866628	WITHOUT_CLASSIFICATION	6.430133372245433E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999688630864	WITHOUT_CLASSIFICATION	3.113691360764487E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999997620464939	WITHOUT_CLASSIFICATION	2.3795350607517668E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999005694570454	WITHOUT_CLASSIFICATION	9.94305429545077E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999958422488361	WITHOUT_CLASSIFICATION	4.1577511639682495E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995758802954	WITHOUT_CLASSIFICATION	4.2411970462748116E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992479673797	WITHOUT_CLASSIFICATION	7.520326203961297E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999641901706	WITHOUT_CLASSIFICATION	3.580982940902325E-8	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999988481612067	WITHOUT_CLASSIFICATION	1.151838793303555E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999938867474	WITHOUT_CLASSIFICATION	6.11325261365256E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.999867811888278	WITHOUT_CLASSIFICATION	1.3218811172188726E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998919967564731	WITHOUT_CLASSIFICATION	1.0800324352684881E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999141857834	WITHOUT_CLASSIFICATION	8.581421666009372E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999999398734695	WITHOUT_CLASSIFICATION	6.012653050983582E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996159071578	WITHOUT_CLASSIFICATION	3.840928422186805E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993794461128	WITHOUT_CLASSIFICATION	6.205538871603863E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999875014322324	WITHOUT_CLASSIFICATION	1.2498567767609762E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999998459408462	WITHOUT_CLASSIFICATION	1.5405915373027752E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997871848961	WITHOUT_CLASSIFICATION	2.1281510386111867E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999980651573931	WITHOUT_CLASSIFICATION	1.9348426068976625E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988577446811	WITHOUT_CLASSIFICATION	1.1422553188986496E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999691348272	WITHOUT_CLASSIFICATION	3.086517278721662E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999480075594166	WITHOUT_CLASSIFICATION	5.199244058344615E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999896008263722	WITHOUT_CLASSIFICATION	1.0399173627678812E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999962334433491	WITHOUT_CLASSIFICATION	3.766556650838061E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995220678615	WITHOUT_CLASSIFICATION	4.779321385260153E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9973069562781138	WITHOUT_CLASSIFICATION	0.0026930437218862183	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997471579695	WITHOUT_CLASSIFICATION	2.52842030604975E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999996045314832	WITHOUT_CLASSIFICATION	3.954685168628298E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998474820685	WITHOUT_CLASSIFICATION	1.52517931571179E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990640968175	WITHOUT_CLASSIFICATION	9.359031824222493E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999998833008044	WITHOUT_CLASSIFICATION	1.166991955842107E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999995091413191	WITHOUT_CLASSIFICATION	4.908586810109672E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999988361404484	WITHOUT_CLASSIFICATION	1.1638595516352553E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997464043415	WITHOUT_CLASSIFICATION	2.535956584217149E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999994457421	WITHOUT_CLASSIFICATION	5.542578915182779E-9	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999926430348917	WITHOUT_CLASSIFICATION	7.356965108341238E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999972818803278	WITHOUT_CLASSIFICATION	2.7181196721007517E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999995916841419	WITHOUT_CLASSIFICATION	4.0831585810482314E-7	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999992475066073	WITHOUT_CLASSIFICATION	7.524933927324952E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995140304068	WITHOUT_CLASSIFICATION	4.859695931493612E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999976536152592	WITHOUT_CLASSIFICATION	2.346384740910413E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999997118084439	WITHOUT_CLASSIFICATION	2.881915560805456E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999975589122378	WITHOUT_CLASSIFICATION	2.4410877620648515E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999997854610337	WITHOUT_CLASSIFICATION	2.145389662938678E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999980196347394	WITHOUT_CLASSIFICATION	1.980365260604046E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999617949854465	WITHOUT_CLASSIFICATION	3.8205014553610423E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998582794092	WITHOUT_CLASSIFICATION	1.417205908017034E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998772475643	WITHOUT_CLASSIFICATION	1.2275243577518563E-7	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997633186317	WITHOUT_CLASSIFICATION	2.3668136827939634E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998772475643	WITHOUT_CLASSIFICATION	1.2275243577518563E-7	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999985178639453	WITHOUT_CLASSIFICATION	1.4821360546165698E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999419226852	WITHOUT_CLASSIFICATION	5.8077314870292974E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999995270374565	WITHOUT_CLASSIFICATION	4.729625435811849E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998653892304	WITHOUT_CLASSIFICATION	1.3461076970971442E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997686338441	WITHOUT_CLASSIFICATION	2.3136615576854385E-7	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999996269651052	WITHOUT_CLASSIFICATION	3.730348948258649E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999939072599027	WITHOUT_CLASSIFICATION	6.092740097405667E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999986594545853	WITHOUT_CLASSIFICATION	1.340545414658759E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999954560650703	WITHOUT_CLASSIFICATION	4.543934929739505E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999993091873377	WITHOUT_CLASSIFICATION	6.908126623082583E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999992208993632	WITHOUT_CLASSIFICATION	7.791006368721874E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997059621268	WITHOUT_CLASSIFICATION	2.940378731879446E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999986448441569	WITHOUT_CLASSIFICATION	1.3551558432072744E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999797647926008	WITHOUT_CLASSIFICATION	2.023520739923505E-5	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999997628685071	WITHOUT_CLASSIFICATION	2.3713149285467892E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998661324743	WITHOUT_CLASSIFICATION	1.3386752572879688E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998617336742	WITHOUT_CLASSIFICATION	1.382663258289098E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998256020753	WITHOUT_CLASSIFICATION	1.743979246759017E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999991821008097	WITHOUT_CLASSIFICATION	8.178991902750232E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999954763844521	WITHOUT_CLASSIFICATION	4.523615547991924E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999688856821134	WITHOUT_CLASSIFICATION	3.11143178866573E-5	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999970889171794	WITHOUT_CLASSIFICATION	2.9110828206263803E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999874873341333	WITHOUT_CLASSIFICATION	1.2512665866706244E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999946412581	WITHOUT_CLASSIFICATION	5.358741898449255E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999966493904205	WITHOUT_CLASSIFICATION	3.3506095794462274E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998994894435512	WITHOUT_CLASSIFICATION	1.0051055644881981E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.999993615466822	WITHOUT_CLASSIFICATION	6.384533178048292E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999947344615543	WITHOUT_CLASSIFICATION	5.265538445703739E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997014789247	WITHOUT_CLASSIFICATION	2.9852107532544375E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999870310276936	WITHOUT_CLASSIFICATION	1.2968972306303176E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999590845084184	WITHOUT_CLASSIFICATION	4.09154915815963E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999999736108581	WITHOUT_CLASSIFICATION	2.63891418991483E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999786864132147	WITHOUT_CLASSIFICATION	2.1313586785202358E-5	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999991472328497	WITHOUT_CLASSIFICATION	8.527671504511197E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999996358391645	WITHOUT_CLASSIFICATION	3.6416083548662663E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999936117060938	WITHOUT_CLASSIFICATION	6.388293906248999E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999890969281577	WITHOUT_CLASSIFICATION	1.0903071842324218E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997899794342	WITHOUT_CLASSIFICATION	2.1002056584660327E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999794343104864	WITHOUT_CLASSIFICATION	2.0565689513540255E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999954441734136	WITHOUT_CLASSIFICATION	4.5558265863673575E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999964791552812	WITHOUT_CLASSIFICATION	3.5208447188155462E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999990157472903	WITHOUT_CLASSIFICATION	9.842527097176518E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999891152325282	WITHOUT_CLASSIFICATION	1.0884767471912251E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998994894435512	WITHOUT_CLASSIFICATION	1.0051055644881981E-4	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999668356687466	WITHOUT_CLASSIFICATION	3.316433125347384E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999315911424	WITHOUT_CLASSIFICATION	6.840885758899068E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999946854477333	WITHOUT_CLASSIFICATION	5.3145522667077115E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999990964981453	WITHOUT_CLASSIFICATION	9.035018546960835E-7	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999972913173087	WITHOUT_CLASSIFICATION	2.7086826912716295E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995773815047	WITHOUT_CLASSIFICATION	4.226184952552665E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999999811434858	WITHOUT_CLASSIFICATION	1.8856514191146092E-7	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999528407252681	WITHOUT_CLASSIFICATION	4.715927473183191E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999979274111954	WITHOUT_CLASSIFICATION	2.072588804657217E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998717159341	WITHOUT_CLASSIFICATION	1.282840660210445E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999995810416926	WITHOUT_CLASSIFICATION	4.189583074058433E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999988840138309	WITHOUT_CLASSIFICATION	1.11598616907119E-6	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999589786852214	WITHOUT_CLASSIFICATION	4.102131477858067E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999965915606754	WITHOUT_CLASSIFICATION	3.4084393244949046E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998953917484	WITHOUT_CLASSIFICATION	1.0460825166805548E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998914962436	WITHOUT_CLASSIFICATION	1.0850375648939636E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999995321077803	WITHOUT_CLASSIFICATION	4.678922196716793E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999987539715273	WITHOUT_CLASSIFICATION	1.246028472796679E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999999876157091	WITHOUT_CLASSIFICATION	1.23842909044878E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999668356687466	WITHOUT_CLASSIFICATION	3.316433125347384E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999990178196473	WITHOUT_CLASSIFICATION	9.821803527483974E-7	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999995744150696	WITHOUT_CLASSIFICATION	4.2558493029812946E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999995851073311	WITHOUT_CLASSIFICATION	4.148926688158717E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997463636916	WITHOUT_CLASSIFICATION	2.536363084874552E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999891950589714	WITHOUT_CLASSIFICATION	1.080494102865149E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999957866231237	WITHOUT_CLASSIFICATION	4.21337687623987E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999957866231237	WITHOUT_CLASSIFICATION	4.21337687623987E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999064280303	WITHOUT_CLASSIFICATION	9.357196979089902E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999957866231237	WITHOUT_CLASSIFICATION	4.21337687623987E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999957866231237	WITHOUT_CLASSIFICATION	4.21337687623987E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999989256582092	WITHOUT_CLASSIFICATION	1.0743417908265466E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999969882123607	WITHOUT_CLASSIFICATION	3.011787639322813E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999991370203729	WITHOUT_CLASSIFICATION	8.62979627077002E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999994737514757	WITHOUT_CLASSIFICATION	5.262485242681606E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999993349173527	WITHOUT_CLASSIFICATION	6.650826472266837E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999991156137426	WITHOUT_CLASSIFICATION	8.843862575647327E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999977773278291	WITHOUT_CLASSIFICATION	2.222672170819549E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999891116920984	WITHOUT_CLASSIFICATION	1.0888307901555179E-5	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999992835219643	WITHOUT_CLASSIFICATION	7.164780356965743E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999694620908689	WITHOUT_CLASSIFICATION	3.0537909131043765E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999998946518258	WITHOUT_CLASSIFICATION	1.0534817419823493E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999870302590119	WITHOUT_CLASSIFICATION	1.2969740988206582E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999997341526917	WITHOUT_CLASSIFICATION	2.6584730830308603E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999306755466644	WITHOUT_CLASSIFICATION	6.932445333565304E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999992014452755	WITHOUT_CLASSIFICATION	7.98554724439516E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999022472718538	WITHOUT_CLASSIFICATION	9.775272814610998E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999616070983	WITHOUT_CLASSIFICATION	3.839290169738489E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999917077877747	WITHOUT_CLASSIFICATION	8.29221222533242E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999734993134609	WITHOUT_CLASSIFICATION	2.6500686539049288E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999208947092236	WITHOUT_CLASSIFICATION	7.910529077638686E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999982761735607	WITHOUT_CLASSIFICATION	1.7238264392959902E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999994967658734	WITHOUT_CLASSIFICATION	5.032341265727261E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999616070983	WITHOUT_CLASSIFICATION	3.839290169738489E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.999993615466822	WITHOUT_CLASSIFICATION	6.384533178048292E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999972366017651	WITHOUT_CLASSIFICATION	2.7633982349824433E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979642476434	WITHOUT_CLASSIFICATION	2.035752356558425E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983103252043	WITHOUT_CLASSIFICATION	1.6896747958024634E-6	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999903970934596	WITHOUT_CLASSIFICATION	9.602906540437292E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999995922490172	WITHOUT_CLASSIFICATION	4.0775098277471613E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999965062108925	WITHOUT_CLASSIFICATION	3.4937891073264074E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999988202809605	WITHOUT_CLASSIFICATION	1.179719039445796E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999987058502819	WITHOUT_CLASSIFICATION	1.2941497181099101E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999992598758649	WITHOUT_CLASSIFICATION	7.401241351177507E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999999056198408	WITHOUT_CLASSIFICATION	9.438015920440254E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999969533504204	WITHOUT_CLASSIFICATION	3.046649579602197E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999994921191693	WITHOUT_CLASSIFICATION	5.078808306997545E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999977708323785	WITHOUT_CLASSIFICATION	2.2291676216026385E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999996144093139	WITHOUT_CLASSIFICATION	3.8559068609852455E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998413379695	WITHOUT_CLASSIFICATION	1.5866203047176567E-7	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999414718833	WITHOUT_CLASSIFICATION	5.852811663129746E-8	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999997202417026	WITHOUT_CLASSIFICATION	2.7975829746601574E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999890775155	WITHOUT_CLASSIFICATION	1.0922484494159269E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999598817401	WITHOUT_CLASSIFICATION	4.0118259906031605E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999846673687467	WITHOUT_CLASSIFICATION	1.5332631253334914E-5	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999953122506637	WITHOUT_CLASSIFICATION	4.687749336260264E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.99999965031883	WITHOUT_CLASSIFICATION	3.496811700043068E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999987058502819	WITHOUT_CLASSIFICATION	1.2941497181099101E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999960761024668	WITHOUT_CLASSIFICATION	3.923897533191054E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999992360396568	WITHOUT_CLASSIFICATION	7.639603432902642E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999999464805948	WITHOUT_CLASSIFICATION	5.351940519660312E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999975342850906	WITHOUT_CLASSIFICATION	2.4657149093590693E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999766614703	WITHOUT_CLASSIFICATION	2.333852970038417E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999944392420255	WITHOUT_CLASSIFICATION	5.560757974560036E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999949538628923	WITHOUT_CLASSIFICATION	5.046137107666377E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999995338341997	WITHOUT_CLASSIFICATION	4.661658003072856E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999962041623399	WITHOUT_CLASSIFICATION	3.7958376600107353E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999964020596688	WITHOUT_CLASSIFICATION	3.59794033129509E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999568148693	WITHOUT_CLASSIFICATION	4.3185130638315335E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999963547590188	WITHOUT_CLASSIFICATION	3.6452409810759375E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999969634453904	WITHOUT_CLASSIFICATION	3.036554609597573E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998096870008	WITHOUT_CLASSIFICATION	1.9031299914033032E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999992183615883	WITHOUT_CLASSIFICATION	7.816384116940831E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977237114501	WITHOUT_CLASSIFICATION	2.2762885498096415E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999568148693	WITHOUT_CLASSIFICATION	4.3185130638315335E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999991949832328	WITHOUT_CLASSIFICATION	8.050167672589172E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999998248868004	WITHOUT_CLASSIFICATION	1.7511319959138327E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998776460147	WITHOUT_CLASSIFICATION	1.2235398531922396E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999897865538	WITHOUT_CLASSIFICATION	1.0213446200015757E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999993209693957	WITHOUT_CLASSIFICATION	6.790306042971325E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998110967164	WITHOUT_CLASSIFICATION	1.8890328358542013E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999639949736	WITHOUT_CLASSIFICATION	3.600502648390193E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963809602787	WITHOUT_CLASSIFICATION	3.619039721421646E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996035149357	WITHOUT_CLASSIFICATION	3.964850643148293E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999416083243	WITHOUT_CLASSIFICATION	5.839167569151597E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969093638283	WITHOUT_CLASSIFICATION	3.0906361716010534E-6	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962466925285	WITHOUT_CLASSIFICATION	3.7533074713952656E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996651207265	WITHOUT_CLASSIFICATION	3.3487927353137934E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996651207265	WITHOUT_CLASSIFICATION	3.3487927353137934E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999995640977163	WITHOUT_CLASSIFICATION	4.3590228370182826E-7	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993797583803	WITHOUT_CLASSIFICATION	6.20241619777564E-7	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999996990560635	WITHOUT_CLASSIFICATION	3.009439366259688E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999994793585613	WITHOUT_CLASSIFICATION	5.206414387866897E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999989722676962	WITHOUT_CLASSIFICATION	1.0277323037938733E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992139739753	WITHOUT_CLASSIFICATION	7.860260247937151E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960402928835	WITHOUT_CLASSIFICATION	3.959707116594438E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996211205729	WITHOUT_CLASSIFICATION	3.788794271000345E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999964966092001	WITHOUT_CLASSIFICATION	3.503390799943686E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953743868423	WITHOUT_CLASSIFICATION	4.6256131577665E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992139739753	WITHOUT_CLASSIFICATION	7.860260247937151E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960402928835	WITHOUT_CLASSIFICATION	3.959707116594438E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996211205729	WITHOUT_CLASSIFICATION	3.788794271000345E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999990014327225	WITHOUT_CLASSIFICATION	9.985672775010713E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999902459513093	WITHOUT_CLASSIFICATION	9.75404869066782E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999990343793238	WITHOUT_CLASSIFICATION	9.656206761805236E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999892096284354	WITHOUT_CLASSIFICATION	1.0790371564635449E-5	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999979470966749	WITHOUT_CLASSIFICATION	2.0529033250520167E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999821764084617	WITHOUT_CLASSIFICATION	1.7823591538293655E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999958798734496	WITHOUT_CLASSIFICATION	4.12012655037369E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999929184942785	WITHOUT_CLASSIFICATION	7.0815057214956724E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999754952568851	WITHOUT_CLASSIFICATION	2.4504743114921233E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999984497654854	WITHOUT_CLASSIFICATION	1.550234514617618E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999997708912552	WITHOUT_CLASSIFICATION	2.291087448923001E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999336421020988	WITHOUT_CLASSIFICATION	6.635789790111108E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999897562690786	WITHOUT_CLASSIFICATION	1.0243730921391558E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999997353597941	WITHOUT_CLASSIFICATION	2.646402058143788E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995693295899	WITHOUT_CLASSIFICATION	4.3067041011357434E-7	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999975224400312	WITHOUT_CLASSIFICATION	2.4775599689260864E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9990498224527778	WITHOUT_CLASSIFICATION	9.501775472221736E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999472269453793	WITHOUT_CLASSIFICATION	5.2773054620799614E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999995385155304	WITHOUT_CLASSIFICATION	4.614844696008535E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999980796691903	WITHOUT_CLASSIFICATION	1.9203308098167358E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999959181640364	WITHOUT_CLASSIFICATION	4.081835963469552E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999965176775127	WITHOUT_CLASSIFICATION	3.48232248713364E-6	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999975625500971	WITHOUT_CLASSIFICATION	2.4374499029618086E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999995116885567	WITHOUT_CLASSIFICATION	4.883114434028215E-7	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999989277941762	WITHOUT_CLASSIFICATION	1.0722058238091713E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999932701082499	WITHOUT_CLASSIFICATION	6.729891750130387E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959086426193	WITHOUT_CLASSIFICATION	4.09135738064077E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850735204776	WITHOUT_CLASSIFICATION	1.4926479522312278E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999946273849	WITHOUT_CLASSIFICATION	5.372615200135658E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844352457138	WITHOUT_CLASSIFICATION	1.5564754286225014E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994941982404	WITHOUT_CLASSIFICATION	5.058017595973784E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999912564785252	WITHOUT_CLASSIFICATION	8.743521474805395E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999912564785252	WITHOUT_CLASSIFICATION	8.743521474805395E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999984595833545	WITHOUT_CLASSIFICATION	1.5404166454104688E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999972902289188	WITHOUT_CLASSIFICATION	2.709771081089265E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999906997695187	WITHOUT_CLASSIFICATION	9.300230481370518E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998995295861461	WITHOUT_CLASSIFICATION	1.0047041385382657E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999993133972443	WITHOUT_CLASSIFICATION	6.866027556550812E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999971131634195	WITHOUT_CLASSIFICATION	2.8868365804758586E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999667432880314	WITHOUT_CLASSIFICATION	3.325671196851814E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999991870806111	WITHOUT_CLASSIFICATION	8.129193887909619E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999997054985259	WITHOUT_CLASSIFICATION	2.945014740432242E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999164108239	WITHOUT_CLASSIFICATION	8.358917610420825E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999902724555	WITHOUT_CLASSIFICATION	9.727544500447049E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997682136442	WITHOUT_CLASSIFICATION	2.3178635570263813E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999902105343	WITHOUT_CLASSIFICATION	9.78946570057403E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991320064188	WITHOUT_CLASSIFICATION	8.679935812261999E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990243521123	WITHOUT_CLASSIFICATION	9.756478876735214E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995587968651	WITHOUT_CLASSIFICATION	4.412031348886115E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999549629435	WITHOUT_CLASSIFICATION	4.503705648872695E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997665511522	WITHOUT_CLASSIFICATION	2.3344884779731888E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989638607961	WITHOUT_CLASSIFICATION	1.0361392038738239E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992672637048	WITHOUT_CLASSIFICATION	7.327362951319358E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999834593777	WITHOUT_CLASSIFICATION	1.6540622283266725E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999701326866943	WITHOUT_CLASSIFICATION	2.9867313305583595E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999262058063627	WITHOUT_CLASSIFICATION	7.379419363730051E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999167521934	WITHOUT_CLASSIFICATION	8.324780664666629E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999385495377	WITHOUT_CLASSIFICATION	6.145046230705052E-8	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999984632788277	WITHOUT_CLASSIFICATION	1.5367211724352311E-6	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999997713010571	WITHOUT_CLASSIFICATION	2.2869894285775228E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999995603130609	WITHOUT_CLASSIFICATION	4.396869390998313E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999262058063627	WITHOUT_CLASSIFICATION	7.379419363730051E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999262058063627	WITHOUT_CLASSIFICATION	7.379419363730051E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999493190900496	WITHOUT_CLASSIFICATION	5.068090995033833E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999983316528936	WITHOUT_CLASSIFICATION	1.668347106258782E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999254639784312	WITHOUT_CLASSIFICATION	7.453602156883342E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999990234813405	WITHOUT_CLASSIFICATION	9.765186595058065E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991607460242	WITHOUT_CLASSIFICATION	8.392539758849669E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999980796691903	WITHOUT_CLASSIFICATION	1.9203308098167358E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997852681647	WITHOUT_CLASSIFICATION	2.1473183528180194E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999990874501936	WITHOUT_CLASSIFICATION	9.125498062737115E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986816486298	WITHOUT_CLASSIFICATION	1.3183513701993208E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979246163263	WITHOUT_CLASSIFICATION	2.0753836736363848E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999986510995615	WITHOUT_CLASSIFICATION	1.348900438375894E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995310923774	WITHOUT_CLASSIFICATION	4.689076226436309E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996824625556	WITHOUT_CLASSIFICATION	3.175374445053156E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996824625556	WITHOUT_CLASSIFICATION	3.175374445053156E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999998855364026	WITHOUT_CLASSIFICATION	1.1446359740188775E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999998855364026	WITHOUT_CLASSIFICATION	1.1446359740188775E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870387585112	WITHOUT_CLASSIFICATION	1.296124148876657E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973652725832	WITHOUT_CLASSIFICATION	2.6347274167054043E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999950547977402	WITHOUT_CLASSIFICATION	4.9452022597436445E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999121174892206	WITHOUT_CLASSIFICATION	8.788251077938078E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999999878579771	WITHOUT_CLASSIFICATION	1.2142022895203125E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999997562259013	WITHOUT_CLASSIFICATION	2.437740986840693E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999443669984	WITHOUT_CLASSIFICATION	5.563300159803379E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999700057748	WITHOUT_CLASSIFICATION	2.999422523961603E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999992340615455	WITHOUT_CLASSIFICATION	7.659384545950969E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.999835484911652	WITHOUT_CLASSIFICATION	1.6451508834803587E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999987981358524	WITHOUT_CLASSIFICATION	1.201864147673439E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996939762816	WITHOUT_CLASSIFICATION	3.0602371837396036E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999997412589602	WITHOUT_CLASSIFICATION	2.5874103980731208E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997107036745	WITHOUT_CLASSIFICATION	2.8929632546289915E-7	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999974528442033	WITHOUT_CLASSIFICATION	2.547155796692803E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999996433703867	WITHOUT_CLASSIFICATION	3.5662961332000255E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999996433703867	WITHOUT_CLASSIFICATION	3.5662961332000255E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999956217506898	WITHOUT_CLASSIFICATION	4.37824931021121E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998740151619	WITHOUT_CLASSIFICATION	1.259848380122888E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998940985676	WITHOUT_CLASSIFICATION	1.0590143250154283E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999967982748657	WITHOUT_CLASSIFICATION	3.2017251343205254E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997573820873	WITHOUT_CLASSIFICATION	2.426179127067313E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999983783214533	WITHOUT_CLASSIFICATION	1.621678546702487E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999420841755	WITHOUT_CLASSIFICATION	5.791582439850579E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994433771737	WITHOUT_CLASSIFICATION	5.566228262239158E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999999825976903	WITHOUT_CLASSIFICATION	1.7402309704893328E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999470100375	WITHOUT_CLASSIFICATION	5.298996259042071E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999993786374	WITHOUT_CLASSIFICATION	6.213626431028475E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999999902409182	WITHOUT_CLASSIFICATION	9.759081801324655E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995730127377	WITHOUT_CLASSIFICATION	4.2698726232242384E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999891872913395	WITHOUT_CLASSIFICATION	1.08127086605217E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999962817886778	WITHOUT_CLASSIFICATION	3.7182113220839194E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999951985600793	WITHOUT_CLASSIFICATION	4.801439920709454E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999942730355489	WITHOUT_CLASSIFICATION	5.7269644511351715E-6	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999935334222858	WITHOUT_CLASSIFICATION	6.466577714193324E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999992558407852	WITHOUT_CLASSIFICATION	7.441592148073966E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.99999978974138	WITHOUT_CLASSIFICATION	2.1025861999909974E-7	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999988925256269	WITHOUT_CLASSIFICATION	1.1074743730290254E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999975125436055	WITHOUT_CLASSIFICATION	2.487456394587951E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993539420674	WITHOUT_CLASSIFICATION	6.460579326004884E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999993963428177	WITHOUT_CLASSIFICATION	6.0365718228924225E-6	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999988869424253	WITHOUT_CLASSIFICATION	1.113057574588021E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999770072896884	WITHOUT_CLASSIFICATION	2.2992710311625476E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.99999720352866	WITHOUT_CLASSIFICATION	2.796471340188537E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999995498741623	WITHOUT_CLASSIFICATION	4.5012583770688745E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999546155454	WITHOUT_CLASSIFICATION	4.538445463513533E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999991949668079	WITHOUT_CLASSIFICATION	8.05033192093558E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998263764048	WITHOUT_CLASSIFICATION	1.736235952245743E-7	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999982122870128	WITHOUT_CLASSIFICATION	1.7877129871803848E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999929832557901	WITHOUT_CLASSIFICATION	7.016744209833568E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999795013191	WITHOUT_CLASSIFICATION	2.0498680949816608E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999675005989419	WITHOUT_CLASSIFICATION	3.2499401058113E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999989371800837	WITHOUT_CLASSIFICATION	1.062819916375459E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999878323167	WITHOUT_CLASSIFICATION	1.2167683310272116E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997165353542	WITHOUT_CLASSIFICATION	2.8346464577300665E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999694024574	WITHOUT_CLASSIFICATION	3.059754249378789E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999995730804918	WITHOUT_CLASSIFICATION	4.269195082031385E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999974412453344	WITHOUT_CLASSIFICATION	2.5587546655249785E-6	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998807123537	WITHOUT_CLASSIFICATION	1.1928764636434383E-7	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999992297868396	WITHOUT_CLASSIFICATION	7.702131603775594E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999713091161	WITHOUT_CLASSIFICATION	2.869088395073219E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999918126883798	WITHOUT_CLASSIFICATION	8.187311620202225E-6	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999955953423942	WITHOUT_CLASSIFICATION	4.404657605742523E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999956758405267	WITHOUT_CLASSIFICATION	4.324159473223396E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999862671775253	WITHOUT_CLASSIFICATION	1.3732822474737191E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999998111141526	WITHOUT_CLASSIFICATION	1.8888584732517086E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9987523372558924	WITHOUT_CLASSIFICATION	0.0012476627441075847	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999995403934622	WITHOUT_CLASSIFICATION	4.5960653784361184E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999968510305328	WITHOUT_CLASSIFICATION	3.148969467198761E-6	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999981481482195	WITHOUT_CLASSIFICATION	1.851851780468023E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999747497416475	WITHOUT_CLASSIFICATION	2.5250258352519235E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999985599608631	WITHOUT_CLASSIFICATION	1.4400391369574304E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999984071066635	WITHOUT_CLASSIFICATION	1.5928933365478922E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999081993976093	WITHOUT_CLASSIFICATION	9.180060239064005E-5	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999982349009254	WITHOUT_CLASSIFICATION	1.7650990746393696E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998874470355	WITHOUT_CLASSIFICATION	1.125529644965453E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999645462566091	WITHOUT_CLASSIFICATION	3.545374339079616E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998830999972	WITHOUT_CLASSIFICATION	1.1690000274915374E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999991676782914	WITHOUT_CLASSIFICATION	8.323217086178514E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999971853781654	WITHOUT_CLASSIFICATION	2.8146218346125936E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999989598722017	WITHOUT_CLASSIFICATION	1.040127798267471E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999994021758862	WITHOUT_CLASSIFICATION	5.9782411380837755E-6	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999901059737	WITHOUT_CLASSIFICATION	9.894026291479272E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998999420312	WITHOUT_CLASSIFICATION	1.0005796880478834E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999996212533246	WITHOUT_CLASSIFICATION	3.787466753953881E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999818906631045	WITHOUT_CLASSIFICATION	1.8109336895524785E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999818906631045	WITHOUT_CLASSIFICATION	1.8109336895524785E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997785874709	WITHOUT_CLASSIFICATION	2.2141252904171419E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999903840329801	WITHOUT_CLASSIFICATION	9.615967019983791E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999995028061298	WITHOUT_CLASSIFICATION	4.971938702241834E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999964571543163	WITHOUT_CLASSIFICATION	3.5428456836431593E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999046230998	WITHOUT_CLASSIFICATION	9.537690020416321E-8	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999995553450463	WITHOUT_CLASSIFICATION	4.4465495382203576E-7	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999997194742751	WITHOUT_CLASSIFICATION	2.805257248915643E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999993595583715	WITHOUT_CLASSIFICATION	6.404416286457184E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999990338239851	WITHOUT_CLASSIFICATION	9.66176014903801E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999996240075065	WITHOUT_CLASSIFICATION	3.75992493451032E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999924696074	WITHOUT_CLASSIFICATION	7.530392601882796E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996285183621	WITHOUT_CLASSIFICATION	3.7148163785016607E-7	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999947719647558	WITHOUT_CLASSIFICATION	5.228035244139756E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999346983656	WITHOUT_CLASSIFICATION	6.530163438482766E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999980251544428	WITHOUT_CLASSIFICATION	1.9748455572068604E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999983264887544	WITHOUT_CLASSIFICATION	1.6735112456081732E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999991272150929	WITHOUT_CLASSIFICATION	8.727849071325474E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999999439555426	WITHOUT_CLASSIFICATION	5.604445730959488E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999951687694049	WITHOUT_CLASSIFICATION	4.831230595074031E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999981446097106	WITHOUT_CLASSIFICATION	1.8553902894017523E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999994315478937	WITHOUT_CLASSIFICATION	5.684521062674956E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999994908586612	WITHOUT_CLASSIFICATION	5.091413388005923E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999990329312131	WITHOUT_CLASSIFICATION	9.670687869687006E-7	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999122830597298	WITHOUT_CLASSIFICATION	8.771694027018937E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997915822267	WITHOUT_CLASSIFICATION	2.0841777324648852E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999982086740186	WITHOUT_CLASSIFICATION	1.7913259814532844E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999974962995098	WITHOUT_CLASSIFICATION	2.5037004901454382E-6	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999983643064509	WITHOUT_CLASSIFICATION	1.635693549106575E-5	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999996614261644	WITHOUT_CLASSIFICATION	3.3857383566613184E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999997414358323	WITHOUT_CLASSIFICATION	2.5856416767541315E-7	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997286861121	WITHOUT_CLASSIFICATION	2.713138879306695E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999987851143467	WITHOUT_CLASSIFICATION	1.214885653212976E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999994289741929	WITHOUT_CLASSIFICATION	5.710258070558986E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999995545896485	WITHOUT_CLASSIFICATION	4.4541035155689814E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999788602758974	WITHOUT_CLASSIFICATION	2.113972410251749E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999788602758974	WITHOUT_CLASSIFICATION	2.113972410251749E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999958837470055	WITHOUT_CLASSIFICATION	4.116252994430174E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999955627378085	WITHOUT_CLASSIFICATION	4.437262191483558E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999998280258562	WITHOUT_CLASSIFICATION	1.7197414380546336E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999977634298843	WITHOUT_CLASSIFICATION	2.2365701156471315E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999997797984119	WITHOUT_CLASSIFICATION	2.2020158805634137E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999556717708289	WITHOUT_CLASSIFICATION	4.432822917113488E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999759553187123	WITHOUT_CLASSIFICATION	2.404468128762463E-5	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999255490267	WITHOUT_CLASSIFICATION	7.445097334744316E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999776938809113	WITHOUT_CLASSIFICATION	2.2306119088720404E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999456641417	WITHOUT_CLASSIFICATION	5.433585816056069E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999963545943451	WITHOUT_CLASSIFICATION	3.6454056549812324E-6	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999991887148952	WITHOUT_CLASSIFICATION	8.11285104763785E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999986210104778	WITHOUT_CLASSIFICATION	1.3789895222373324E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998262136186	WITHOUT_CLASSIFICATION	1.7378638138883299E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999998832900856	WITHOUT_CLASSIFICATION	1.1670991439940382E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999985958663012	WITHOUT_CLASSIFICATION	1.4041336986908626E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999985958663012	WITHOUT_CLASSIFICATION	1.4041336986908626E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999989697746177	WITHOUT_CLASSIFICATION	1.030225382240324E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999994622727145	WITHOUT_CLASSIFICATION	5.377272855126469E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999827059566909	WITHOUT_CLASSIFICATION	1.7294043309130415E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999935096065663	WITHOUT_CLASSIFICATION	6.490393433666932E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999272700658096	WITHOUT_CLASSIFICATION	7.272993419038476E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999972678861127	WITHOUT_CLASSIFICATION	2.732113887400849E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999975896133453	WITHOUT_CLASSIFICATION	2.410386654730369E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999975896133453	WITHOUT_CLASSIFICATION	2.410386654730369E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999934634340133	WITHOUT_CLASSIFICATION	6.536565986765749E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999997717617642	WITHOUT_CLASSIFICATION	2.2823823566003607E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999853341958367	WITHOUT_CLASSIFICATION	1.4665804163331888E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999976970982	WITHOUT_CLASSIFICATION	2.3029017679658485E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999992205159728	WITHOUT_CLASSIFICATION	7.794840271490554E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999809550670498	WITHOUT_CLASSIFICATION	1.90449329502432E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999897636327	WITHOUT_CLASSIFICATION	1.023636723159008E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999896757977091	WITHOUT_CLASSIFICATION	1.0324202290918935E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994545336625	WITHOUT_CLASSIFICATION	5.454663374409167E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999758895170108	WITHOUT_CLASSIFICATION	2.411048298923224E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999826247565831	WITHOUT_CLASSIFICATION	1.7375243416931792E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999947183088455	WITHOUT_CLASSIFICATION	5.281691154529812E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999999157567199	WITHOUT_CLASSIFICATION	8.424328009790576E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999879681491721	WITHOUT_CLASSIFICATION	1.203185082779071E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999988481612067	WITHOUT_CLASSIFICATION	1.151838793303555E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999970840712633	WITHOUT_CLASSIFICATION	2.9159287368264716E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999985333223572	WITHOUT_CLASSIFICATION	1.4666776427897573E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999956305002526	WITHOUT_CLASSIFICATION	4.369499747410714E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999685144760725	WITHOUT_CLASSIFICATION	3.148552392749915E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999991826119818	WITHOUT_CLASSIFICATION	8.173880181920257E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999988766940976	WITHOUT_CLASSIFICATION	1.1233059024735703E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999847123952944	WITHOUT_CLASSIFICATION	1.5287604705570303E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999773480775546	WITHOUT_CLASSIFICATION	2.2651922445391387E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998142616624	WITHOUT_CLASSIFICATION	1.857383375563434E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999994440058196	WITHOUT_CLASSIFICATION	5.559941803815028E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999989659798472	WITHOUT_CLASSIFICATION	1.034020152847113E-6	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999994473054417	WITHOUT_CLASSIFICATION	5.526945584435705E-7	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999992842851246	WITHOUT_CLASSIFICATION	7.157148753242471E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999625643025	WITHOUT_CLASSIFICATION	3.743569753877761E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999815201068	WITHOUT_CLASSIFICATION	1.8479893200703009E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999998660105936	WITHOUT_CLASSIFICATION	1.339894064006712E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999776349268531	WITHOUT_CLASSIFICATION	2.236507314686662E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999987091245123	WITHOUT_CLASSIFICATION	1.2908754877448392E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998635523596	WITHOUT_CLASSIFICATION	1.364476403763961E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999986525791743	WITHOUT_CLASSIFICATION	1.3474208257379324E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999588085202546	WITHOUT_CLASSIFICATION	4.1191479745334786E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999891297316845	WITHOUT_CLASSIFICATION	1.0870268315560956E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999977701506341	WITHOUT_CLASSIFICATION	2.229849365924861E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999980731630668	WITHOUT_CLASSIFICATION	1.926836933244186E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994746689737	WITHOUT_CLASSIFICATION	5.253310262771276E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999989337853212	WITHOUT_CLASSIFICATION	1.0662146787114462E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.999999353622282	WITHOUT_CLASSIFICATION	6.463777181100913E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999985790636688	WITHOUT_CLASSIFICATION	1.4209363311450366E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999983701122958	WITHOUT_CLASSIFICATION	1.629887704323389E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997284486146	WITHOUT_CLASSIFICATION	2.715513854079612E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999997749730648	WITHOUT_CLASSIFICATION	2.2502693519967684E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999980731630668	WITHOUT_CLASSIFICATION	1.926836933244186E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994746689737	WITHOUT_CLASSIFICATION	5.253310262771276E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999980863351714	WITHOUT_CLASSIFICATION	1.913664828551864E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999996430602427	WITHOUT_CLASSIFICATION	3.569397572876117E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998805906577	WITHOUT_CLASSIFICATION	1.1940934222133527E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999979766862146	WITHOUT_CLASSIFICATION	2.0233137854010986E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999466538108	WITHOUT_CLASSIFICATION	5.3346189204039236E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999997400850598	WITHOUT_CLASSIFICATION	2.5991494019201324E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999936802412942	WITHOUT_CLASSIFICATION	6.319758705797371E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999954689615475	WITHOUT_CLASSIFICATION	4.531038452512436E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999994200932767	WITHOUT_CLASSIFICATION	5.799067233888277E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999253017156073	WITHOUT_CLASSIFICATION	7.46982843925775E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999987360200212	WITHOUT_CLASSIFICATION	1.2639799788001767E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999253017156073	WITHOUT_CLASSIFICATION	7.46982843925775E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999999361005677	WITHOUT_CLASSIFICATION	6.389943229215211E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.99999801665087	WITHOUT_CLASSIFICATION	1.9833491299665535E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999984489697608	WITHOUT_CLASSIFICATION	1.5510302392255318E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998150885903	WITHOUT_CLASSIFICATION	1.8491140969301213E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999961857007348	WITHOUT_CLASSIFICATION	3.8142992651190634E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.99996884495137	WITHOUT_CLASSIFICATION	3.1155048630050415E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.99996884495137	WITHOUT_CLASSIFICATION	3.1155048630050415E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999970562029562	WITHOUT_CLASSIFICATION	2.9437970438011518E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999892150804954	WITHOUT_CLASSIFICATION	1.0784919504607425E-5	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999846519705222	WITHOUT_CLASSIFICATION	1.5348029477741804E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971544276071	WITHOUT_CLASSIFICATION	2.8455723929741325E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996838767735	WITHOUT_CLASSIFICATION	3.1612322645594164E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999976712177233	WITHOUT_CLASSIFICATION	2.3287822767373347E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999953420121361	WITHOUT_CLASSIFICATION	4.6579878637977854E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999979029059733	WITHOUT_CLASSIFICATION	2.0970940265223486E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999937310624062	WITHOUT_CLASSIFICATION	6.268937593872043E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999919179529185	WITHOUT_CLASSIFICATION	8.082047081439136E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999977142447595	WITHOUT_CLASSIFICATION	2.285755240641562E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999991232613162	WITHOUT_CLASSIFICATION	8.767386838299244E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999749745547792	WITHOUT_CLASSIFICATION	2.5025445220727583E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999989397307746	WITHOUT_CLASSIFICATION	1.0602692255003929E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999993845249159	WITHOUT_CLASSIFICATION	6.154750840954048E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999655224513	WITHOUT_CLASSIFICATION	3.447754873218383E-8	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999994467370372	WITHOUT_CLASSIFICATION	5.532629628028731E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999973410919901	WITHOUT_CLASSIFICATION	2.658908010020614E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999962659192915	WITHOUT_CLASSIFICATION	3.7340807084926274E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998474943897767	WITHOUT_CLASSIFICATION	1.5250561022335456E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999987303102607	WITHOUT_CLASSIFICATION	1.2696897393057876E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999868313195247	WITHOUT_CLASSIFICATION	1.3168680475264668E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999990692900589	WITHOUT_CLASSIFICATION	9.307099410831738E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999968947651439	WITHOUT_CLASSIFICATION	3.10523485609994E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999959966942988	WITHOUT_CLASSIFICATION	4.003305701139959E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999813680232401	WITHOUT_CLASSIFICATION	1.863197675983806E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999094440108	WITHOUT_CLASSIFICATION	9.055598918310661E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999454744907414	WITHOUT_CLASSIFICATION	5.452550925848093E-5	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999978753081138	WITHOUT_CLASSIFICATION	2.124691886270285E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999963379729285	WITHOUT_CLASSIFICATION	3.662027071405027E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999240280323758	WITHOUT_CLASSIFICATION	7.597196762417998E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999817844589267	WITHOUT_CLASSIFICATION	1.8215541073278586E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999953420121361	WITHOUT_CLASSIFICATION	4.6579878637977854E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999998053667659	WITHOUT_CLASSIFICATION	1.9463323417653993E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999885271750317	WITHOUT_CLASSIFICATION	1.1472824968247047E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9980769771617677	WITHOUT_CLASSIFICATION	0.0019230228382323149	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9998923061887719	WITHOUT_CLASSIFICATION	1.0769381122798487E-4	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999997415844056	WITHOUT_CLASSIFICATION	2.584155944187529E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999995572401459	WITHOUT_CLASSIFICATION	4.4275985407700475E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971544276071	WITHOUT_CLASSIFICATION	2.8455723929741325E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971544276071	WITHOUT_CLASSIFICATION	2.8455723929741325E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999982061471139	WITHOUT_CLASSIFICATION	1.7938528861866084E-6	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999954841835007	WITHOUT_CLASSIFICATION	4.515816499303255E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999875830157955	WITHOUT_CLASSIFICATION	1.2416984204516088E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999974332369531	WITHOUT_CLASSIFICATION	2.5667630469061395E-6	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999993451038378	WITHOUT_CLASSIFICATION	6.548961622074008E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999973074543871	WITHOUT_CLASSIFICATION	2.692545612917537E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999958999998717	WITHOUT_CLASSIFICATION	4.100000128298745E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999991139025234	WITHOUT_CLASSIFICATION	8.860974766099011E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999995821515713	WITHOUT_CLASSIFICATION	4.1784842872980985E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999943438073	WITHOUT_CLASSIFICATION	5.656192700272675E-7	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999934449262033	WITHOUT_CLASSIFICATION	6.5550737967255874E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998705276464752	WITHOUT_CLASSIFICATION	1.2947235352481594E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999871292657676	WITHOUT_CLASSIFICATION	1.287073423239886E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999943438073	WITHOUT_CLASSIFICATION	5.656192700272675E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996354117502	WITHOUT_CLASSIFICATION	3.645882498840265E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999981142833891	WITHOUT_CLASSIFICATION	1.8857166108735886E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999974473216121	WITHOUT_CLASSIFICATION	2.5526783878055675E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9993591247430005	WITHOUT_CLASSIFICATION	6.408752569995387E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998705276464752	WITHOUT_CLASSIFICATION	1.2947235352481594E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999980466578356	WITHOUT_CLASSIFICATION	1.9533421643643555E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996740125495	WITHOUT_CLASSIFICATION	3.2598745048678786E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997165850251	WITHOUT_CLASSIFICATION	2.8341497488058907E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999207673369	WITHOUT_CLASSIFICATION	7.923266315429025E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999305072525893	WITHOUT_CLASSIFICATION	6.949274741078389E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999982642296422	WITHOUT_CLASSIFICATION	1.735770357762874E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999991279456137	WITHOUT_CLASSIFICATION	8.72054386213627E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999980481368375	WITHOUT_CLASSIFICATION	1.9518631625474402E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999962909266622	WITHOUT_CLASSIFICATION	3.7090733378237983E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999981296227879	WITHOUT_CLASSIFICATION	1.8703772120737216E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999921599393	WITHOUT_CLASSIFICATION	7.840060676231973E-9	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999999814977484	WITHOUT_CLASSIFICATION	1.8502251603420146E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999943438073	WITHOUT_CLASSIFICATION	5.656192700272675E-7	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999980466578356	WITHOUT_CLASSIFICATION	1.9533421643643555E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997165850251	WITHOUT_CLASSIFICATION	2.8341497488058907E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999988061552644	WITHOUT_CLASSIFICATION	1.1938447355617983E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999944319253815	WITHOUT_CLASSIFICATION	5.568074618565968E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999996541756253	WITHOUT_CLASSIFICATION	3.4582437463189827E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998705276464752	WITHOUT_CLASSIFICATION	1.2947235352481594E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999906046036597	WITHOUT_CLASSIFICATION	9.395396340283227E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999964533080469	WITHOUT_CLASSIFICATION	3.5466919531580515E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999988548054064	WITHOUT_CLASSIFICATION	1.1451945935966652E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999937614530816	WITHOUT_CLASSIFICATION	6.238546918344036E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999980481368375	WITHOUT_CLASSIFICATION	1.9518631625474402E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996354117502	WITHOUT_CLASSIFICATION	3.645882498840265E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.999989709139068	WITHOUT_CLASSIFICATION	1.0290860931936857E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999512554853488	WITHOUT_CLASSIFICATION	4.874451465117451E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999952153092057	WITHOUT_CLASSIFICATION	4.784690794377256E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999919468075564	WITHOUT_CLASSIFICATION	8.053192443554382E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999989926408789	WITHOUT_CLASSIFICATION	1.007359121154825E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999982441067546	WITHOUT_CLASSIFICATION	1.7558932454102525E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999951788045887	WITHOUT_CLASSIFICATION	4.82119541134376E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998150885903	WITHOUT_CLASSIFICATION	1.8491140969301213E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996561332217	WITHOUT_CLASSIFICATION	3.4386677832368907E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996195576252	WITHOUT_CLASSIFICATION	3.804423748863214E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999988317100187	WITHOUT_CLASSIFICATION	1.1682899813070296E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999984826250712	WITHOUT_CLASSIFICATION	1.5173749287527253E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999996626837628	WITHOUT_CLASSIFICATION	3.373162372083119E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998041770513	WITHOUT_CLASSIFICATION	1.9582294871103256E-7	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999994653474447	WITHOUT_CLASSIFICATION	5.346525553084624E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997266230873	WITHOUT_CLASSIFICATION	2.7337691260173623E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999937614530816	WITHOUT_CLASSIFICATION	6.238546918344036E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999803180719188	WITHOUT_CLASSIFICATION	1.9681928081243553E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.999992599859118	WITHOUT_CLASSIFICATION	7.40014088197075E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999711282472482	WITHOUT_CLASSIFICATION	2.8871752751812403E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999968349580172	WITHOUT_CLASSIFICATION	3.1650419827602796E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999941636185158	WITHOUT_CLASSIFICATION	5.836381484202326E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999982316562835	WITHOUT_CLASSIFICATION	1.7683437163634445E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999981235213198	WITHOUT_CLASSIFICATION	1.876478680340144E-6	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998646957905725	WITHOUT_CLASSIFICATION	1.3530420942748706E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999994387909323	WITHOUT_CLASSIFICATION	5.612090677076737E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9989564159793015	WITHOUT_CLASSIFICATION	0.001043584020698504	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999996074746891	WITHOUT_CLASSIFICATION	3.925253109050022E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999629433823505	WITHOUT_CLASSIFICATION	3.7056617649442834E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999984952094313	WITHOUT_CLASSIFICATION	1.50479056875273E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999715419479542	WITHOUT_CLASSIFICATION	2.845805204577956E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999999976121164	WITHOUT_CLASSIFICATION	2.3878835961878428E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997548472981	WITHOUT_CLASSIFICATION	2.4515270190892215E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999986923641749	WITHOUT_CLASSIFICATION	1.3076358250414777E-6	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.99999989439263	WITHOUT_CLASSIFICATION	1.0560736993641225E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999981879070475	WITHOUT_CLASSIFICATION	1.8120929524411873E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999955113109081	WITHOUT_CLASSIFICATION	4.488689091894104E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999972998199653	WITHOUT_CLASSIFICATION	2.7001800346403135E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999985840517591	WITHOUT_CLASSIFICATION	1.4159482409626275E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999978702420907	WITHOUT_CLASSIFICATION	2.129757909292649E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999989755517059	WITHOUT_CLASSIFICATION	1.0244482940529207E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997883174431	WITHOUT_CLASSIFICATION	2.116825570351809E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9992694541009848	WITHOUT_CLASSIFICATION	7.305458990152095E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999995232142844	WITHOUT_CLASSIFICATION	4.767857155878566E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999911891130376	WITHOUT_CLASSIFICATION	8.81088696233535E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999984965084626	WITHOUT_CLASSIFICATION	1.5034915373765083E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9996476806134779	WITHOUT_CLASSIFICATION	3.523193865221955E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999993421568342	WITHOUT_CLASSIFICATION	6.578431658110928E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999978266912375	WITHOUT_CLASSIFICATION	2.173308762580769E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997757654709	WITHOUT_CLASSIFICATION	2.2423452897560781E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999927375423335	WITHOUT_CLASSIFICATION	7.262457666428144E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999721221707243	WITHOUT_CLASSIFICATION	2.787782927578122E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994229045925	WITHOUT_CLASSIFICATION	5.770954074347163E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999997255285029	WITHOUT_CLASSIFICATION	2.74471497039101E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999992882174035	WITHOUT_CLASSIFICATION	7.117825964766266E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994229045925	WITHOUT_CLASSIFICATION	5.770954074347163E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999721221707243	WITHOUT_CLASSIFICATION	2.787782927578122E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999997255285029	WITHOUT_CLASSIFICATION	2.74471497039101E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999982564714535	WITHOUT_CLASSIFICATION	1.743528546574428E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999993455972453	WITHOUT_CLASSIFICATION	6.544027547302998E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999803566958	WITHOUT_CLASSIFICATION	1.9643304196103718E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999992986303502	WITHOUT_CLASSIFICATION	7.013696497720784E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997335754438	WITHOUT_CLASSIFICATION	2.664245561910121E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999960721811501	WITHOUT_CLASSIFICATION	3.9278188498974295E-5	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998696782581652	WITHOUT_CLASSIFICATION	1.3032174183484128E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999954201703687	WITHOUT_CLASSIFICATION	4.579829631298205E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999975866655422	WITHOUT_CLASSIFICATION	2.413334457910485E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999531684459078	WITHOUT_CLASSIFICATION	4.683155409214379E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999996355058575	WITHOUT_CLASSIFICATION	3.6449414249646464E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999971178340065	WITHOUT_CLASSIFICATION	2.8821659935654922E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998032640786	WITHOUT_CLASSIFICATION	1.9673592150607378E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999949681326309	WITHOUT_CLASSIFICATION	5.031867369152359E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998054710185	WITHOUT_CLASSIFICATION	1.9452898144799424E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999988928757017	WITHOUT_CLASSIFICATION	1.107124298342992E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999979561909199	WITHOUT_CLASSIFICATION	2.0438090801508893E-6	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999990656064652	WITHOUT_CLASSIFICATION	9.343935347331344E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999987337470383	WITHOUT_CLASSIFICATION	1.2662529616406904E-6	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999992700616931	WITHOUT_CLASSIFICATION	7.299383068369675E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999976318148174	WITHOUT_CLASSIFICATION	2.3681851825925604E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999644791234	WITHOUT_CLASSIFICATION	3.5520876540741523E-8	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999980242165121	WITHOUT_CLASSIFICATION	1.975783487932846E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999986421560535	WITHOUT_CLASSIFICATION	1.357843946517332E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979757083942	WITHOUT_CLASSIFICATION	2.0242916057677225E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979757083942	WITHOUT_CLASSIFICATION	2.0242916057677225E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998401589791	WITHOUT_CLASSIFICATION	1.5984102077093278E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998401589791	WITHOUT_CLASSIFICATION	1.5984102077093278E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999980199421857	WITHOUT_CLASSIFICATION	1.980057814223777E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999979561909199	WITHOUT_CLASSIFICATION	2.0438090801508893E-6	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999997187558796	WITHOUT_CLASSIFICATION	2.8124412034186415E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999173146785	WITHOUT_CLASSIFICATION	8.268532137489129E-8	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999982964031728	WITHOUT_CLASSIFICATION	1.7035968271305635E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999982964031728	WITHOUT_CLASSIFICATION	1.7035968271305635E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999971297754648	WITHOUT_CLASSIFICATION	2.8702245351867642E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999994876163066	WITHOUT_CLASSIFICATION	5.123836933918138E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999996869497223	WITHOUT_CLASSIFICATION	3.1305027774477835E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999971352554129	WITHOUT_CLASSIFICATION	2.8647445870709758E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999932326219166	WITHOUT_CLASSIFICATION	6.767378083375846E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999448478619	WITHOUT_CLASSIFICATION	5.515213810325187E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999224578683299	WITHOUT_CLASSIFICATION	7.754213167010333E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999995906108565	WITHOUT_CLASSIFICATION	4.0938914339199314E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999969599490685	WITHOUT_CLASSIFICATION	3.040050931507292E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999995163524628	WITHOUT_CLASSIFICATION	4.8364753719849866E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999996627641584	WITHOUT_CLASSIFICATION	3.372358414943643E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999910743299067	WITHOUT_CLASSIFICATION	8.925670093183873E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999963159147822	WITHOUT_CLASSIFICATION	3.6840852176929963E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999964358039954	WITHOUT_CLASSIFICATION	3.564196004559374E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999945833242253	WITHOUT_CLASSIFICATION	5.416675774672598E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999939354461632	WITHOUT_CLASSIFICATION	6.064553836709549E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996199617423	WITHOUT_CLASSIFICATION	3.8003825768640032E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999972412458625	WITHOUT_CLASSIFICATION	2.7587541374966113E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999848552478	WITHOUT_CLASSIFICATION	1.514475224948854E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999993638341614	WITHOUT_CLASSIFICATION	6.361658385643118E-7	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999999967485627	WITHOUT_CLASSIFICATION	3.251437289898724E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999957054871079	WITHOUT_CLASSIFICATION	4.294512892021716E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998360233023	WITHOUT_CLASSIFICATION	1.6397669771854107E-7	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999332172052	WITHOUT_CLASSIFICATION	6.678279495346382E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998995295861461	WITHOUT_CLASSIFICATION	1.0047041385382657E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999989600934085	WITHOUT_CLASSIFICATION	1.039906591433458E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999629433823505	WITHOUT_CLASSIFICATION	3.7056617649442834E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999985671450943	WITHOUT_CLASSIFICATION	1.432854905748553E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986140706657	WITHOUT_CLASSIFICATION	1.3859293343615916E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965723979605	WITHOUT_CLASSIFICATION	3.4276020395400673E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997443329183	WITHOUT_CLASSIFICATION	2.556670817329689E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999954152995425	WITHOUT_CLASSIFICATION	4.584700457456057E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999954152995425	WITHOUT_CLASSIFICATION	4.584700457456057E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997986956883	WITHOUT_CLASSIFICATION	2.0130431158919009E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999981574086008	WITHOUT_CLASSIFICATION	1.842591399316622E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999979700528524	WITHOUT_CLASSIFICATION	2.029947147696691E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999979700528524	WITHOUT_CLASSIFICATION	2.029947147696691E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999980804664145	WITHOUT_CLASSIFICATION	1.919533585622687E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999933363410495	WITHOUT_CLASSIFICATION	6.663658950510756E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999965267608768	WITHOUT_CLASSIFICATION	3.4732391231658776E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991607460242	WITHOUT_CLASSIFICATION	8.392539758849669E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999989770908114	WITHOUT_CLASSIFICATION	1.0229091885379615E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999982581473851	WITHOUT_CLASSIFICATION	1.7418526148602935E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999968869430956	WITHOUT_CLASSIFICATION	3.1130569044745763E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999982392321639	WITHOUT_CLASSIFICATION	1.7607678360844085E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999099694334	WITHOUT_CLASSIFICATION	9.00305666019612E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999099694334	WITHOUT_CLASSIFICATION	9.00305666019612E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999878890915	WITHOUT_CLASSIFICATION	1.2110908578156864E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999949714401	WITHOUT_CLASSIFICATION	5.028559898948752E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999949714401	WITHOUT_CLASSIFICATION	5.028559898948752E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999945994745	WITHOUT_CLASSIFICATION	5.400525504554549E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999999838524482	WITHOUT_CLASSIFICATION	1.6147551794149457E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9983327712114655	WITHOUT_CLASSIFICATION	0.0016672287885345844	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999991115499717	WITHOUT_CLASSIFICATION	8.884500283001517E-7	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995691930533	WITHOUT_CLASSIFICATION	4.3080694674556323E-7	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999997504651021	WITHOUT_CLASSIFICATION	2.495348977817571E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999944090531422	WITHOUT_CLASSIFICATION	5.590946857781762E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999582361291582	WITHOUT_CLASSIFICATION	4.176387084168103E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999984885801404	WITHOUT_CLASSIFICATION	1.5114198595797864E-6	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999856106992845	WITHOUT_CLASSIFICATION	1.438930071560052E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999885035303	WITHOUT_CLASSIFICATION	1.1496469627121646E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999984287157584	WITHOUT_CLASSIFICATION	1.571284241598617E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999819508578597	WITHOUT_CLASSIFICATION	1.8049142140321417E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999819508578597	WITHOUT_CLASSIFICATION	1.8049142140321417E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999819508578597	WITHOUT_CLASSIFICATION	1.8049142140321417E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999819508578597	WITHOUT_CLASSIFICATION	1.8049142140321417E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999975837635701	WITHOUT_CLASSIFICATION	2.416236429967478E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999999424423372	WITHOUT_CLASSIFICATION	5.755766279716802E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999935981775789	WITHOUT_CLASSIFICATION	6.401822421099547E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999635991282042	WITHOUT_CLASSIFICATION	3.640087179584548E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983094005154	WITHOUT_CLASSIFICATION	1.6905994845946338E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999993559224537	WITHOUT_CLASSIFICATION	6.440775463536723E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999880090449298	WITHOUT_CLASSIFICATION	1.1990955070305835E-5	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999996922789176	WITHOUT_CLASSIFICATION	3.0772108239401993E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999980507470986	WITHOUT_CLASSIFICATION	1.94925290150564E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999690203171	WITHOUT_CLASSIFICATION	3.0979682830038E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999998868397668	WITHOUT_CLASSIFICATION	1.1316023314832592E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976942482827	WITHOUT_CLASSIFICATION	2.305751717305358E-6	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9862241036845647	WITHOUT_CLASSIFICATION	0.013775896315435271	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999997077874083	WITHOUT_CLASSIFICATION	2.9221259164199515E-7	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999889276055387	WITHOUT_CLASSIFICATION	1.1072394461308285E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976942482827	WITHOUT_CLASSIFICATION	2.305751717305358E-6	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999926467245028	WITHOUT_CLASSIFICATION	7.3532754971366196E-6	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999954843413	WITHOUT_CLASSIFICATION	4.51565872098364E-9	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999812362497	WITHOUT_CLASSIFICATION	1.8763750297754023E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999972922520912	WITHOUT_CLASSIFICATION	2.7077479087123417E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999998752562624	WITHOUT_CLASSIFICATION	1.2474373759088702E-6	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996543830904	WITHOUT_CLASSIFICATION	3.456169096377347E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999966404646	WITHOUT_CLASSIFICATION	3.3595354069035087E-9	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999993068572179	WITHOUT_CLASSIFICATION	6.931427820062615E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999757169208	WITHOUT_CLASSIFICATION	2.428307918190795E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999991096148679	WITHOUT_CLASSIFICATION	8.903851321916307E-7	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999537728751	WITHOUT_CLASSIFICATION	4.622712483990492E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999983486214199	WITHOUT_CLASSIFICATION	1.6513785800585846E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999915026748885	WITHOUT_CLASSIFICATION	8.497325111501043E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999787696932965	WITHOUT_CLASSIFICATION	2.1230306703482356E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999987189978529	WITHOUT_CLASSIFICATION	1.2810021470682069E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999993710993963	WITHOUT_CLASSIFICATION	6.289006038247794E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997748866346	WITHOUT_CLASSIFICATION	2.2511336544560104E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999978454416467	WITHOUT_CLASSIFICATION	2.154558353392007E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996410461696	WITHOUT_CLASSIFICATION	3.589538303927946E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999978454416467	WITHOUT_CLASSIFICATION	2.154558353392007E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999956224600276	WITHOUT_CLASSIFICATION	4.377539972369349E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995902268932	WITHOUT_CLASSIFICATION	4.0977310676572084E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999994437367065	WITHOUT_CLASSIFICATION	5.562632934677513E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999947485372791	WITHOUT_CLASSIFICATION	5.251462720915179E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997748866346	WITHOUT_CLASSIFICATION	2.2511336544560104E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996410461696	WITHOUT_CLASSIFICATION	3.589538303927946E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999956224600276	WITHOUT_CLASSIFICATION	4.377539972369349E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999982280359841	WITHOUT_CLASSIFICATION	1.7719640158839745E-6	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999991812770331	WITHOUT_CLASSIFICATION	8.187229669201105E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999902909625249	WITHOUT_CLASSIFICATION	9.709037475094923E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999938317022867	WITHOUT_CLASSIFICATION	6.168297713339056E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999918566844287	WITHOUT_CLASSIFICATION	8.143315571239555E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999808489368	WITHOUT_CLASSIFICATION	1.9151063233506722E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996199617423	WITHOUT_CLASSIFICATION	3.8003825768640032E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995902268932	WITHOUT_CLASSIFICATION	4.0977310676572084E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999953012011332	WITHOUT_CLASSIFICATION	4.698798866815644E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999995041186002	WITHOUT_CLASSIFICATION	4.958813998333238E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998848396071	WITHOUT_CLASSIFICATION	1.1516039300894844E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996199617423	WITHOUT_CLASSIFICATION	3.8003825768640032E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999960957833127	WITHOUT_CLASSIFICATION	3.9042166872197185E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996199617423	WITHOUT_CLASSIFICATION	3.8003825768640032E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997046354644	WITHOUT_CLASSIFICATION	2.9536453560172745E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999980651573931	WITHOUT_CLASSIFICATION	1.9348426068976625E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999923982006916	WITHOUT_CLASSIFICATION	7.601799308264861E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999988946088169	WITHOUT_CLASSIFICATION	1.1053911830993861E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997471579695	WITHOUT_CLASSIFICATION	2.52842030604975E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999997640185009	WITHOUT_CLASSIFICATION	2.3598149909494137E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999622301685	WITHOUT_CLASSIFICATION	3.7769831535995166E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999981478492921	WITHOUT_CLASSIFICATION	1.8521507078905095E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999945829873604	WITHOUT_CLASSIFICATION	5.417012639516546E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.999991218527073	WITHOUT_CLASSIFICATION	8.781472927037166E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999818906631045	WITHOUT_CLASSIFICATION	1.8109336895524785E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999988127685132	WITHOUT_CLASSIFICATION	1.1872314868817138E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9983327712114655	WITHOUT_CLASSIFICATION	0.0016672287885345844	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999945368528701	WITHOUT_CLASSIFICATION	5.463147129804107E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999977534705382	WITHOUT_CLASSIFICATION	2.246529461827369E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999914436274293	WITHOUT_CLASSIFICATION	8.556372570698677E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999480075594166	WITHOUT_CLASSIFICATION	5.199244058344615E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999983726568206	WITHOUT_CLASSIFICATION	1.6273431793817077E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999326085515	WITHOUT_CLASSIFICATION	6.739144860945473E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999998522749267	WITHOUT_CLASSIFICATION	1.47725073229521E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999947913591755	WITHOUT_CLASSIFICATION	5.208640824480118E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999728891202	WITHOUT_CLASSIFICATION	2.711087970968906E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999994699498278	WITHOUT_CLASSIFICATION	5.300501722470948E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9983445563775528	WITHOUT_CLASSIFICATION	0.0016554436224471927	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999946743928182	WITHOUT_CLASSIFICATION	5.32560718176165E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999986490106489	WITHOUT_CLASSIFICATION	1.3509893510912063E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999917523675048	WITHOUT_CLASSIFICATION	8.247632495124359E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999930948215919	WITHOUT_CLASSIFICATION	6.905178408023124E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999620831141576	WITHOUT_CLASSIFICATION	3.791688584248186E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999945779737809	WITHOUT_CLASSIFICATION	5.4220262191400445E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999414295283	WITHOUT_CLASSIFICATION	5.857047163603516E-8	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999796466609	WITHOUT_CLASSIFICATION	2.035333902337174E-8	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999715709422897	WITHOUT_CLASSIFICATION	2.8429057710181186E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999869971200042	WITHOUT_CLASSIFICATION	1.3002879995750918E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9991004474950441	WITHOUT_CLASSIFICATION	8.995525049558798E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999617949854465	WITHOUT_CLASSIFICATION	3.8205014553610423E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999925032121078	WITHOUT_CLASSIFICATION	7.496787892172732E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999962048392431	WITHOUT_CLASSIFICATION	3.795160756917206E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999995491442532	WITHOUT_CLASSIFICATION	4.508557468017215E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999884719532436	WITHOUT_CLASSIFICATION	1.152804675638954E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9981391573357433	WITHOUT_CLASSIFICATION	0.0018608426642566696	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998337095479	WITHOUT_CLASSIFICATION	1.6629045196241894E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999998241776743	WITHOUT_CLASSIFICATION	1.7582232569905847E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999657657707779	WITHOUT_CLASSIFICATION	3.4234229222104505E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999657657707779	WITHOUT_CLASSIFICATION	3.4234229222104505E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999992127404673	WITHOUT_CLASSIFICATION	7.872595326892825E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999981478492921	WITHOUT_CLASSIFICATION	1.8521507078905095E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999950328286068	WITHOUT_CLASSIFICATION	4.96717139319331E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999976702821645	WITHOUT_CLASSIFICATION	2.329717835531172E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999794664988	WITHOUT_CLASSIFICATION	2.053350115881099E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999004176107	WITHOUT_CLASSIFICATION	9.958238934903313E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999830064565045	WITHOUT_CLASSIFICATION	1.6993543495561806E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998443425443987	WITHOUT_CLASSIFICATION	1.5565745560125284E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999818541596411	WITHOUT_CLASSIFICATION	1.8145840358860946E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999990354221479	WITHOUT_CLASSIFICATION	9.645778521401168E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999996443921069	WITHOUT_CLASSIFICATION	3.556078930536329E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999997032385073	WITHOUT_CLASSIFICATION	2.967614927041012E-7	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999987429182968	WITHOUT_CLASSIFICATION	1.2570817031720805E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999482864719583	WITHOUT_CLASSIFICATION	5.17135280416556E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999917450309783	WITHOUT_CLASSIFICATION	8.254969021719282E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999970192317446	WITHOUT_CLASSIFICATION	2.9807682554271245E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999991277824031	WITHOUT_CLASSIFICATION	8.722175969120424E-7	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999299717476	WITHOUT_CLASSIFICATION	7.002825239841489E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999993226491934	WITHOUT_CLASSIFICATION	6.773508065950712E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999984887562327	WITHOUT_CLASSIFICATION	1.511243767241303E-6	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999996231748164	WITHOUT_CLASSIFICATION	3.768251836071912E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999998111301273	WITHOUT_CLASSIFICATION	1.8886987278479647E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999993530677711	WITHOUT_CLASSIFICATION	6.469322288392512E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999953624382666	WITHOUT_CLASSIFICATION	4.637561733432184E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9981391573357433	WITHOUT_CLASSIFICATION	0.0018608426642566696	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998201739742	WITHOUT_CLASSIFICATION	1.798260257453112E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999993090255638	WITHOUT_CLASSIFICATION	6.909744361525325E-7	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998814085942	WITHOUT_CLASSIFICATION	1.1859140579443546E-7	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999867046711354	WITHOUT_CLASSIFICATION	1.3295328864620808E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999997589074037	WITHOUT_CLASSIFICATION	2.410925963344692E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999998793006599	WITHOUT_CLASSIFICATION	1.206993401018936E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999807779987562	WITHOUT_CLASSIFICATION	1.922200124382667E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999995817818192	WITHOUT_CLASSIFICATION	4.182181807867712E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998931950754	WITHOUT_CLASSIFICATION	1.0680492457719055E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999993246034062	WITHOUT_CLASSIFICATION	6.753965937758237E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995181535398	WITHOUT_CLASSIFICATION	4.818464602016852E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999878284657495	WITHOUT_CLASSIFICATION	1.2171534250495237E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999983123399292	WITHOUT_CLASSIFICATION	1.6876600707648133E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999986286645526	WITHOUT_CLASSIFICATION	1.371335447461451E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998359201273	WITHOUT_CLASSIFICATION	1.6407987262324243E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998359201273	WITHOUT_CLASSIFICATION	1.6407987262324243E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999994347797913	WITHOUT_CLASSIFICATION	5.652202088225428E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999968805735078	WITHOUT_CLASSIFICATION	3.1194264921980563E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999863041553676	WITHOUT_CLASSIFICATION	1.369584463238244E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999863041553676	WITHOUT_CLASSIFICATION	1.369584463238244E-5	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999997190370915	WITHOUT_CLASSIFICATION	2.8096290857120266E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999870302590119	WITHOUT_CLASSIFICATION	1.2969740988206582E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999994869510538	WITHOUT_CLASSIFICATION	5.130489462900485E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999991617910927	WITHOUT_CLASSIFICATION	8.382089073322694E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999967395417358	WITHOUT_CLASSIFICATION	3.2604582641827585E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999958048145798	WITHOUT_CLASSIFICATION	4.195185420129465E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999118331366	WITHOUT_CLASSIFICATION	8.816686334951466E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999118331366	WITHOUT_CLASSIFICATION	8.816686334951466E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999892403245069	WITHOUT_CLASSIFICATION	1.0759675493076984E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999644724715	WITHOUT_CLASSIFICATION	3.5527528396154544E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999931161384257	WITHOUT_CLASSIFICATION	6.8838615743772685E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999997688701662	WITHOUT_CLASSIFICATION	2.311298337329556E-7	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999997688701662	WITHOUT_CLASSIFICATION	2.311298337329556E-7	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999997125714443	WITHOUT_CLASSIFICATION	2.874285557161408E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997964504875	WITHOUT_CLASSIFICATION	2.0354951240620288E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998422919324873	WITHOUT_CLASSIFICATION	1.5770806751263998E-4	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999993499429476	WITHOUT_CLASSIFICATION	6.500570524524651E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998861081414	WITHOUT_CLASSIFICATION	1.1389185861855198E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994125096404	WITHOUT_CLASSIFICATION	5.874903595474066E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999998510558555	WITHOUT_CLASSIFICATION	1.4894414440305656E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999994359922957	WITHOUT_CLASSIFICATION	5.640077043272816E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999993123520827	WITHOUT_CLASSIFICATION	6.87647917287604E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999974987804013	WITHOUT_CLASSIFICATION	2.5012195987676643E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999991003876427	WITHOUT_CLASSIFICATION	8.996123572538389E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999799580267933	WITHOUT_CLASSIFICATION	2.0041973206635644E-5	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.999994359859648	WITHOUT_CLASSIFICATION	5.64014035194873E-6	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999987339368612	WITHOUT_CLASSIFICATION	1.2660631387224363E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999969360937554	WITHOUT_CLASSIFICATION	3.0639062446074685E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999996518800668	WITHOUT_CLASSIFICATION	3.4811993316226773E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999997420606127	WITHOUT_CLASSIFICATION	2.5793938727554823E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999853410510954	WITHOUT_CLASSIFICATION	1.4658948904590246E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999998325118987	WITHOUT_CLASSIFICATION	1.6748810129719633E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999979288514241	WITHOUT_CLASSIFICATION	2.0711485758340345E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999988454112033	WITHOUT_CLASSIFICATION	1.1545887967019783E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999974094681701	WITHOUT_CLASSIFICATION	2.59053182984503E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999945573180401	WITHOUT_CLASSIFICATION	5.442681959884443E-6	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999834649234925	WITHOUT_CLASSIFICATION	1.6535076507458812E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.99992821980169	WITHOUT_CLASSIFICATION	7.178019830995738E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999998333905652	WITHOUT_CLASSIFICATION	1.6660943490992577E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999990610488618	WITHOUT_CLASSIFICATION	9.389511382368779E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999816024685357	WITHOUT_CLASSIFICATION	1.8397531464252724E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999145260706	WITHOUT_CLASSIFICATION	8.547392945158876E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995693295899	WITHOUT_CLASSIFICATION	4.3067041011357434E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999965176775127	WITHOUT_CLASSIFICATION	3.48232248713364E-6	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996658973331	WITHOUT_CLASSIFICATION	3.3410266687172877E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999990932441872	WITHOUT_CLASSIFICATION	9.067558128967972E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999976609409452	WITHOUT_CLASSIFICATION	2.339059054732478E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999973395976097	WITHOUT_CLASSIFICATION	2.6604023902924127E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999917393425993	WITHOUT_CLASSIFICATION	8.260657400712525E-6	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999966378374099	WITHOUT_CLASSIFICATION	3.362162590147381E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999969581729302	WITHOUT_CLASSIFICATION	3.041827069723901E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999996271807128	WITHOUT_CLASSIFICATION	3.728192872413636E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996540328878	WITHOUT_CLASSIFICATION	3.4596711210884297E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995665518271	WITHOUT_CLASSIFICATION	4.33448172959442E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999947611659565	WITHOUT_CLASSIFICATION	5.238834043425168E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999986183143256	WITHOUT_CLASSIFICATION	1.3816856744409668E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999126316779	WITHOUT_CLASSIFICATION	8.736832217448689E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999997071786878	WITHOUT_CLASSIFICATION	2.928213121206865E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999978498379036	WITHOUT_CLASSIFICATION	2.1501620963252656E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999972890662134	WITHOUT_CLASSIFICATION	2.710933786638044E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999988213624567	WITHOUT_CLASSIFICATION	1.1786375433023308E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999999917265078	WITHOUT_CLASSIFICATION	8.273492196603018E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999786192218169	WITHOUT_CLASSIFICATION	2.138077818315207E-5	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999997423183897	WITHOUT_CLASSIFICATION	2.576816102404E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999782430512	WITHOUT_CLASSIFICATION	2.175694877891747E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998488256477	WITHOUT_CLASSIFICATION	1.5117435222325036E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999998565213	WITHOUT_CLASSIFICATION	1.4347863449653352E-10	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999941236325094	WITHOUT_CLASSIFICATION	5.876367490672331E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999998336154725	WITHOUT_CLASSIFICATION	1.6638452734642498E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999995325925528	WITHOUT_CLASSIFICATION	4.674074472849138E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999998169414418	WITHOUT_CLASSIFICATION	1.830585582000556E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998599170585	WITHOUT_CLASSIFICATION	1.4008294139393898E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999953630726334	WITHOUT_CLASSIFICATION	4.636927366585428E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991346874781	WITHOUT_CLASSIFICATION	8.653125218436385E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991346874781	WITHOUT_CLASSIFICATION	8.653125218436385E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999998351973928	WITHOUT_CLASSIFICATION	1.6480260733719233E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999980397752325	WITHOUT_CLASSIFICATION	1.9602247676140295E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999727506742	WITHOUT_CLASSIFICATION	2.724932579249943E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999051484498	WITHOUT_CLASSIFICATION	9.485155021588833E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999179939759	WITHOUT_CLASSIFICATION	8.20060241050293E-8	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999990461091623	WITHOUT_CLASSIFICATION	9.538908375952863E-7	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999935380113	WITHOUT_CLASSIFICATION	6.461988702404087E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999851326153	WITHOUT_CLASSIFICATION	1.4867384684230439E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995253887248	WITHOUT_CLASSIFICATION	4.7461127517345266E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999994538808059	WITHOUT_CLASSIFICATION	5.461191940332789E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999425668671	WITHOUT_CLASSIFICATION	5.743313285514818E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999621188626076	WITHOUT_CLASSIFICATION	3.788113739243903E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998755703782	WITHOUT_CLASSIFICATION	1.2442962183349901E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999031400163	WITHOUT_CLASSIFICATION	9.685998372874202E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977237114501	WITHOUT_CLASSIFICATION	2.2762885498096415E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977237114501	WITHOUT_CLASSIFICATION	2.2762885498096415E-6	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999992336272423	WITHOUT_CLASSIFICATION	7.663727577566602E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999996831301632	WITHOUT_CLASSIFICATION	3.1686983676502803E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999989373801068	WITHOUT_CLASSIFICATION	1.062619893115016E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998236310141	WITHOUT_CLASSIFICATION	1.763689858591794E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999568148693	WITHOUT_CLASSIFICATION	4.3185130638315335E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951711350549	WITHOUT_CLASSIFICATION	4.8288649450763785E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999915216907287	WITHOUT_CLASSIFICATION	8.478309271280053E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999588674432148	WITHOUT_CLASSIFICATION	4.1132556785117386E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999300941994	WITHOUT_CLASSIFICATION	6.990580069107387E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999978696681966	WITHOUT_CLASSIFICATION	2.13033180339969E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999116763428	WITHOUT_CLASSIFICATION	8.832365725656266E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995816380559	WITHOUT_CLASSIFICATION	4.1836194410451964E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999993986115051	WITHOUT_CLASSIFICATION	6.013884947868819E-7	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994834911009	WITHOUT_CLASSIFICATION	5.165088990622407E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999963501786884	WITHOUT_CLASSIFICATION	3.6498213115147115E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999982041649826	WITHOUT_CLASSIFICATION	1.7958350174563448E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999994199033174	WITHOUT_CLASSIFICATION	5.800966826280701E-7	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999997843560761	WITHOUT_CLASSIFICATION	2.1564392388758266E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999999535838192	WITHOUT_CLASSIFICATION	4.641618079100392E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999995838332902	WITHOUT_CLASSIFICATION	4.1616670980769957E-7	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999988345664315	WITHOUT_CLASSIFICATION	1.1654335685359606E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999130337868	WITHOUT_CLASSIFICATION	8.696621329473015E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.999998263399416	WITHOUT_CLASSIFICATION	1.7366005840204868E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.999981505249483	WITHOUT_CLASSIFICATION	1.849475051694954E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999336421020988	WITHOUT_CLASSIFICATION	6.635789790111108E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998879916815	WITHOUT_CLASSIFICATION	1.1200831855326502E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999700665648	WITHOUT_CLASSIFICATION	2.9933435261090915E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999316193834	WITHOUT_CLASSIFICATION	6.838061661889552E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999997762339436	WITHOUT_CLASSIFICATION	2.237660562980581E-7	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999991563692883	WITHOUT_CLASSIFICATION	8.43630711640441E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999372345254222	WITHOUT_CLASSIFICATION	6.276547457789257E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999985146360886	WITHOUT_CLASSIFICATION	1.4853639113166743E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999192487822	WITHOUT_CLASSIFICATION	8.075121790589211E-8	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999533708878	WITHOUT_CLASSIFICATION	4.662911225022947E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999438670654166	WITHOUT_CLASSIFICATION	5.613293458345544E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999611807222	WITHOUT_CLASSIFICATION	3.8819277874122924E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999989797834632	WITHOUT_CLASSIFICATION	1.020216536746429E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999091937672	WITHOUT_CLASSIFICATION	9.080623280030121E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999998611766101	WITHOUT_CLASSIFICATION	1.3882338998852147E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999995952418305	WITHOUT_CLASSIFICATION	4.047581694912986E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999896102060284	WITHOUT_CLASSIFICATION	1.038979397161324E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999896102060284	WITHOUT_CLASSIFICATION	1.038979397161324E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998077302188	WITHOUT_CLASSIFICATION	1.9226978112827775E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999931070740209	WITHOUT_CLASSIFICATION	6.892925979171205E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999113090131	WITHOUT_CLASSIFICATION	8.869098688439816E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999417851438	WITHOUT_CLASSIFICATION	5.821485616962515E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999766987097	WITHOUT_CLASSIFICATION	2.3301290414148105E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997191458726	WITHOUT_CLASSIFICATION	2.808541274571374E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999850661434	WITHOUT_CLASSIFICATION	1.4933856511214967E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999986269440977	WITHOUT_CLASSIFICATION	1.3730559023250315E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999954398122629	WITHOUT_CLASSIFICATION	4.560187737110395E-6	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995357177162	WITHOUT_CLASSIFICATION	4.642822838395105E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999791591259	WITHOUT_CLASSIFICATION	2.0840874106776341E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999262058063627	WITHOUT_CLASSIFICATION	7.379419363730051E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999163510028362	WITHOUT_CLASSIFICATION	8.364899716395217E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999920562956197	WITHOUT_CLASSIFICATION	7.943704380249925E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999877846247	WITHOUT_CLASSIFICATION	1.2215375204545431E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999995907629066	WITHOUT_CLASSIFICATION	4.0923709347522706E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999997463254782	WITHOUT_CLASSIFICATION	2.5367452180597418E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999182947342	WITHOUT_CLASSIFICATION	8.170526579487725E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999977086853355	WITHOUT_CLASSIFICATION	2.2913146645050895E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999982306206098	WITHOUT_CLASSIFICATION	1.7693793902191468E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999802845642927	WITHOUT_CLASSIFICATION	1.9715435707396364E-5	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999171426899	WITHOUT_CLASSIFICATION	8.285731016922871E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999965256401547	WITHOUT_CLASSIFICATION	3.4743598452501136E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999941406202192	WITHOUT_CLASSIFICATION	5.859379780759495E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999979636735168	WITHOUT_CLASSIFICATION	2.0363264831971292E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999946512734507	WITHOUT_CLASSIFICATION	5.3487265492989855E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.99999984582372	WITHOUT_CLASSIFICATION	1.5417627995484219E-7	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999237416509588	WITHOUT_CLASSIFICATION	7.62583490412162E-5	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999772018536	WITHOUT_CLASSIFICATION	2.2798146300515167E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999996505611973	WITHOUT_CLASSIFICATION	3.494388027063018E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999656849651	WITHOUT_CLASSIFICATION	3.4315034928685015E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999934798793901	WITHOUT_CLASSIFICATION	6.5201206098114255E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999919277204	WITHOUT_CLASSIFICATION	8.072279594672714E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998550194716	WITHOUT_CLASSIFICATION	1.4498052824051884E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999292744445877	WITHOUT_CLASSIFICATION	7.072555541233618E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999946412581	WITHOUT_CLASSIFICATION	5.358741898449255E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999924149648831	WITHOUT_CLASSIFICATION	7.585035116992161E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999996981208013	WITHOUT_CLASSIFICATION	3.018791987806336E-7	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999972953999635	WITHOUT_CLASSIFICATION	2.704600036526706E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.999994968588543	WITHOUT_CLASSIFICATION	5.0314114569412745E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998486225603	WITHOUT_CLASSIFICATION	1.5137743974722594E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999985962977412	WITHOUT_CLASSIFICATION	1.4037022588043162E-6	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999478981574276	WITHOUT_CLASSIFICATION	5.2101842572379124E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9923874725027949	WITHOUT_CLASSIFICATION	0.007612527497204999	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999915131882147	WITHOUT_CLASSIFICATION	8.486811785312379E-6	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999996897031088	WITHOUT_CLASSIFICATION	3.102968911304648E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999668692402	WITHOUT_CLASSIFICATION	3.313075985186489E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998755703782	WITHOUT_CLASSIFICATION	1.2442962183349901E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999995924178166	WITHOUT_CLASSIFICATION	4.075821834259895E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999553330521	WITHOUT_CLASSIFICATION	4.4666947902403E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99999998977011	WITHOUT_CLASSIFICATION	1.022989008343074E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998838642036	WITHOUT_CLASSIFICATION	1.161357964252416E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999988063961479	WITHOUT_CLASSIFICATION	1.1936038520621988E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999993201410137	WITHOUT_CLASSIFICATION	6.798589863275894E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999986854750817	WITHOUT_CLASSIFICATION	1.3145249183556012E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998728007998	WITHOUT_CLASSIFICATION	1.27199200130198E-7	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999987981358524	WITHOUT_CLASSIFICATION	1.201864147673439E-6	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998671713212	WITHOUT_CLASSIFICATION	1.3282867877288204E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997599841349	WITHOUT_CLASSIFICATION	2.400158651169415E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997463636916	WITHOUT_CLASSIFICATION	2.536363084874552E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999071512371	WITHOUT_CLASSIFICATION	9.28487629050787E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999646958974	WITHOUT_CLASSIFICATION	3.5304102592889416E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992485367114	WITHOUT_CLASSIFICATION	7.514632886766029E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999983026227695	WITHOUT_CLASSIFICATION	1.6973772306042003E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999959322368089	WITHOUT_CLASSIFICATION	4.067763190979447E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998108651615	WITHOUT_CLASSIFICATION	1.8913483841779876E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999982263522494	WITHOUT_CLASSIFICATION	1.7736477506339178E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992485367114	WITHOUT_CLASSIFICATION	7.514632886766029E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999835709291943	WITHOUT_CLASSIFICATION	1.6429070805650143E-5	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999975190388	WITHOUT_CLASSIFICATION	2.4809611913375893E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999998226214676	WITHOUT_CLASSIFICATION	1.773785324031544E-6	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999965273066	WITHOUT_CLASSIFICATION	3.472693398955305E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999996589899016	WITHOUT_CLASSIFICATION	3.410100984031588E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999987140487788	WITHOUT_CLASSIFICATION	1.2859512211724418E-6	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999984988984	WITHOUT_CLASSIFICATION	1.501101574783627E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999994747141704	WITHOUT_CLASSIFICATION	5.252858296434471E-7	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999990825625403	WITHOUT_CLASSIFICATION	9.174374597032618E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999661468956225	WITHOUT_CLASSIFICATION	3.385310437755868E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999859549280488	WITHOUT_CLASSIFICATION	1.4045071951114361E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998962220001121	WITHOUT_CLASSIFICATION	1.0377799988788304E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999995479707927	WITHOUT_CLASSIFICATION	4.5202920723816146E-7	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999955398179	WITHOUT_CLASSIFICATION	4.460182087715559E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999992736061559	WITHOUT_CLASSIFICATION	7.263938441186271E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999953624382666	WITHOUT_CLASSIFICATION	4.637561733432184E-6	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999982935235388	WITHOUT_CLASSIFICATION	1.7064764612625687E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999906348837	WITHOUT_CLASSIFICATION	9.365116391209759E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999827895071582	WITHOUT_CLASSIFICATION	1.7210492841689164E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999992725712954	WITHOUT_CLASSIFICATION	7.274287045650175E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999641940729	WITHOUT_CLASSIFICATION	3.580592712852239E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999995510769322	WITHOUT_CLASSIFICATION	4.4892306774047025E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999995634540774	WITHOUT_CLASSIFICATION	4.365459226754018E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999595693573	WITHOUT_CLASSIFICATION	4.0430642594012286E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999122413151	WITHOUT_CLASSIFICATION	8.775868491430816E-8	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999984114857189	WITHOUT_CLASSIFICATION	1.588514281122988E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999926462892823	WITHOUT_CLASSIFICATION	7.353710717805598E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999942730355489	WITHOUT_CLASSIFICATION	5.7269644511351715E-6	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999957578054395	WITHOUT_CLASSIFICATION	4.242194560493577E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999892617941832	WITHOUT_CLASSIFICATION	1.073820581680405E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999993062255468	WITHOUT_CLASSIFICATION	6.93774453115872E-7	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999999155756814	WITHOUT_CLASSIFICATION	8.44243185988299E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999997549928468	WITHOUT_CLASSIFICATION	2.4500715318921556E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999956471298	WITHOUT_CLASSIFICATION	4.352870194784627E-8	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999996472483228	WITHOUT_CLASSIFICATION	3.5275167718657725E-7	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999922354424827	WITHOUT_CLASSIFICATION	7.764557517181586E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999994547135805	WITHOUT_CLASSIFICATION	5.452864194981486E-7	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999997463649143	WITHOUT_CLASSIFICATION	2.5363508572446865E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999256321891	WITHOUT_CLASSIFICATION	7.436781093618369E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997915822267	WITHOUT_CLASSIFICATION	2.0841777324648852E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999224985624	WITHOUT_CLASSIFICATION	7.750143761163032E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999224985624	WITHOUT_CLASSIFICATION	7.750143761163032E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999556717708289	WITHOUT_CLASSIFICATION	4.432822917113488E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999456641417	WITHOUT_CLASSIFICATION	5.433585816056069E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999935096065663	WITHOUT_CLASSIFICATION	6.490393433666932E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.5442412880542736	WITHOUT_CLASSIFICATION	0.4557587119457262	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991607460242	WITHOUT_CLASSIFICATION	8.392539758849669E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991607460242	WITHOUT_CLASSIFICATION	8.392539758849669E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999956547760912	WITHOUT_CLASSIFICATION	4.345223908868661E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999970840712633	WITHOUT_CLASSIFICATION	2.9159287368264716E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999581974039126	WITHOUT_CLASSIFICATION	4.180259608757221E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999773480775546	WITHOUT_CLASSIFICATION	2.2651922445391387E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999799407567	WITHOUT_CLASSIFICATION	2.0059243338959056E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999992632949991	WITHOUT_CLASSIFICATION	7.367050009567777E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999978320290149	WITHOUT_CLASSIFICATION	2.1679709850263515E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999977698616782	WITHOUT_CLASSIFICATION	2.230138321772339E-6	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999682659644016	WITHOUT_CLASSIFICATION	3.1734035598397E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986653983692	WITHOUT_CLASSIFICATION	1.3346016307203461E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986653983692	WITHOUT_CLASSIFICATION	1.3346016307203461E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999375609333353	WITHOUT_CLASSIFICATION	6.243906666464889E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999980481368375	WITHOUT_CLASSIFICATION	1.9518631625474402E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999982642296422	WITHOUT_CLASSIFICATION	1.735770357762874E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999723402842275	WITHOUT_CLASSIFICATION	2.7659715772458486E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999218329091587	WITHOUT_CLASSIFICATION	7.816709084129885E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996561332217	WITHOUT_CLASSIFICATION	3.4386677832368907E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683733284	WITHOUT_CLASSIFICATION	2.1931626671716216E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995800442041	WITHOUT_CLASSIFICATION	4.1995579591983114E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999727391451707	WITHOUT_CLASSIFICATION	2.7260854829382772E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999994670100966	WITHOUT_CLASSIFICATION	5.329899034378433E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999392605207	WITHOUT_CLASSIFICATION	6.073947928449905E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999661468956225	WITHOUT_CLASSIFICATION	3.385310437755868E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999914108443	WITHOUT_CLASSIFICATION	8.589155643689225E-9	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999623670817571	WITHOUT_CLASSIFICATION	3.763291824280507E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999981353427	WITHOUT_CLASSIFICATION	1.864657234765766E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999995723679329	WITHOUT_CLASSIFICATION	4.2763206717138214E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999979754795999	WITHOUT_CLASSIFICATION	2.0245204000958428E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999984078477127	WITHOUT_CLASSIFICATION	1.5921522873277344E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999041668582523	WITHOUT_CLASSIFICATION	9.583314174772165E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.99999525810605	WITHOUT_CLASSIFICATION	4.741893950053224E-6	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999999909564547	WITHOUT_CLASSIFICATION	9.043545302877669E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999994594422817	WITHOUT_CLASSIFICATION	5.405577181970631E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999994594422817	WITHOUT_CLASSIFICATION	5.405577181970631E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976942482827	WITHOUT_CLASSIFICATION	2.305751717305358E-6	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999924652296	WITHOUT_CLASSIFICATION	7.534770426203896E-9	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999839470363675	WITHOUT_CLASSIFICATION	1.605296363243452E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999991431592755	WITHOUT_CLASSIFICATION	8.568407243915075E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994762850638	WITHOUT_CLASSIFICATION	5.23714936141181E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999503936864	WITHOUT_CLASSIFICATION	4.960631365556685E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999987189978529	WITHOUT_CLASSIFICATION	1.2810021470682069E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999968377122	WITHOUT_CLASSIFICATION	3.1622878051523393E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999982280359841	WITHOUT_CLASSIFICATION	1.7719640158839745E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999995411989704	WITHOUT_CLASSIFICATION	4.5880102957831765E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996199617423	WITHOUT_CLASSIFICATION	3.8003825768640032E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999884623249079	WITHOUT_CLASSIFICATION	1.1537675092084561E-5	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997678802645	WITHOUT_CLASSIFICATION	2.321197354517988E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999985496294	WITHOUT_CLASSIFICATION	1.4503705984769176E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998791692482	WITHOUT_CLASSIFICATION	1.2083075184757029E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999424228034	WITHOUT_CLASSIFICATION	5.7577196636804415E-8	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998079649004	WITHOUT_CLASSIFICATION	1.92035099522726E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999989968071623	WITHOUT_CLASSIFICATION	1.0031928377094558E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999999958523334	WITHOUT_CLASSIFICATION	4.147666594306298E-8	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999959680517999	WITHOUT_CLASSIFICATION	4.031948200097477E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999933948387303	WITHOUT_CLASSIFICATION	6.605161269716868E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995583707149	WITHOUT_CLASSIFICATION	4.416292851580821E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998422919324873	WITHOUT_CLASSIFICATION	1.5770806751263998E-4	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999957268193035	WITHOUT_CLASSIFICATION	4.273180696513229E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979151115	WITHOUT_CLASSIFICATION	2.0848884964637774E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979151115	WITHOUT_CLASSIFICATION	2.0848884964637774E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999959413345576	WITHOUT_CLASSIFICATION	4.058665442351988E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999994093622774	WITHOUT_CLASSIFICATION	5.906377226190627E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999861476925	WITHOUT_CLASSIFICATION	1.3852307615910129E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999952747363	WITHOUT_CLASSIFICATION	4.7252637566231275E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999993601980764	WITHOUT_CLASSIFICATION	6.39801923507782E-7	TEST
