//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996984939200594	WITHOUT_CLASSIFICATION	3.0150607994064183E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999728912438562	WITHOUT_CLASSIFICATION	2.7108756143739533E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999997679243628	WITHOUT_CLASSIFICATION	2.3207563719986808E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999995251698749	WITHOUT_CLASSIFICATION	4.7483012509324766E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984175459091	WITHOUT_CLASSIFICATION	1.5824540908906829E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984175459091	WITHOUT_CLASSIFICATION	1.5824540908906829E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984055170658	WITHOUT_CLASSIFICATION	1.5944829341562823E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999986246841895	WITHOUT_CLASSIFICATION	1.3753158104091448E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999837702986973	WITHOUT_CLASSIFICATION	1.622970130269244E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999996971172187	WITHOUT_CLASSIFICATION	3.028827813003016E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999940779615918	WITHOUT_CLASSIFICATION	5.922038408177097E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999940779615918	WITHOUT_CLASSIFICATION	5.922038408177097E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999919137962188	WITHOUT_CLASSIFICATION	8.086203781247062E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999266888909	WITHOUT_CLASSIFICATION	7.331110905316119E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999994853024479	WITHOUT_CLASSIFICATION	5.146975521100889E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990571994026	WITHOUT_CLASSIFICATION	9.428005974599066E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999432090262	WITHOUT_CLASSIFICATION	5.6790973715313775E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999849106730454	WITHOUT_CLASSIFICATION	1.5089326954641925E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999790125833834	WITHOUT_CLASSIFICATION	2.0987416616653798E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999789664625719	WITHOUT_CLASSIFICATION	2.103353742804593E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999699233364474	WITHOUT_CLASSIFICATION	3.0076663552592174E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998919469593984	WITHOUT_CLASSIFICATION	1.0805304060155794E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999978054048551	WITHOUT_CLASSIFICATION	2.194595144897895E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999785117138996	WITHOUT_CLASSIFICATION	2.148828610035181E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986561573843	WITHOUT_CLASSIFICATION	1.3438426158041634E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999772679393814	WITHOUT_CLASSIFICATION	2.2732060618631935E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999772679393814	WITHOUT_CLASSIFICATION	2.2732060618631935E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997697029992	WITHOUT_CLASSIFICATION	2.3029700092547591E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999860765931453	WITHOUT_CLASSIFICATION	1.3923406854693753E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993844036781	WITHOUT_CLASSIFICATION	6.155963218993066E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999005743061	WITHOUT_CLASSIFICATION	9.942569397837433E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999947392794	WITHOUT_CLASSIFICATION	5.2607205449207415E-9	TEST
/**	WITHOUT_CLASSIFICATION	0.9998364209277426	WITHOUT_CLASSIFICATION	1.635790722573997E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9998364209277426	WITHOUT_CLASSIFICATION	1.635790722573997E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999992982252944	WITHOUT_CLASSIFICATION	7.017747055984307E-6	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999912169649	WITHOUT_CLASSIFICATION	8.783035076802489E-9	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999740939254	WITHOUT_CLASSIFICATION	2.5906074536927284E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999403196372457	WITHOUT_CLASSIFICATION	5.968036275413474E-5	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999987602754851	WITHOUT_CLASSIFICATION	1.2397245149587184E-6	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954633355593	WITHOUT_CLASSIFICATION	4.536664440576272E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946668999371	WITHOUT_CLASSIFICATION	5.333100062856022E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999970441457793	WITHOUT_CLASSIFICATION	2.9558542207632143E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999627308548527	WITHOUT_CLASSIFICATION	3.726914514732105E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999845179732	WITHOUT_CLASSIFICATION	1.5482026764815914E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999731176454784	WITHOUT_CLASSIFICATION	2.688235452155663E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999627308548527	WITHOUT_CLASSIFICATION	3.726914514732105E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999731176454784	WITHOUT_CLASSIFICATION	2.688235452155663E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999916173147364	WITHOUT_CLASSIFICATION	8.382685263500114E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999991695567467	WITHOUT_CLASSIFICATION	8.304432533728224E-7	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999935528198606	WITHOUT_CLASSIFICATION	6.44718013941709E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999067653438	WITHOUT_CLASSIFICATION	9.323465619520333E-8	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999779375799	WITHOUT_CLASSIFICATION	2.206242013535496E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999998478643646	WITHOUT_CLASSIFICATION	1.521356354075931E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999985921983472	WITHOUT_CLASSIFICATION	1.4078016527850364E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999849248762923	WITHOUT_CLASSIFICATION	1.5075123707547528E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999843843361	WITHOUT_CLASSIFICATION	1.5615663895613087E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999417120472058	WITHOUT_CLASSIFICATION	5.828795279409582E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999955561212962	WITHOUT_CLASSIFICATION	4.443878703865107E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999948355263852	WITHOUT_CLASSIFICATION	5.164473614863325E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999983982161	WITHOUT_CLASSIFICATION	1.6017839039469128E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999993542498731	WITHOUT_CLASSIFICATION	6.457501268787318E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999972076029725	WITHOUT_CLASSIFICATION	2.792397027486478E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999998066508744	WITHOUT_CLASSIFICATION	1.9334912562329591E-7	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999959314108079	WITHOUT_CLASSIFICATION	4.06858919211702E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999996053903452	WITHOUT_CLASSIFICATION	3.9460965491556456E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999796562589	WITHOUT_CLASSIFICATION	2.0343741100298085E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996298525718	WITHOUT_CLASSIFICATION	3.7014742818785105E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999996101059603	WITHOUT_CLASSIFICATION	3.8989403963948276E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997630402947	WITHOUT_CLASSIFICATION	2.369597054318518E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999984981484151	WITHOUT_CLASSIFICATION	1.501851584826827E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985488368115	WITHOUT_CLASSIFICATION	1.4511631884099231E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999993923186702	WITHOUT_CLASSIFICATION	6.076813297748916E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999997329954237	WITHOUT_CLASSIFICATION	2.670045763772034E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998675430546	WITHOUT_CLASSIFICATION	1.3245694536742078E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999780344445	WITHOUT_CLASSIFICATION	2.196555552987863E-8	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999996473864622	WITHOUT_CLASSIFICATION	3.5261353788735965E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999587247825	WITHOUT_CLASSIFICATION	4.12752173936275E-8	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999591569252	WITHOUT_CLASSIFICATION	4.0843074808607285E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999958556049153	WITHOUT_CLASSIFICATION	4.144395084571708E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999985759500362	WITHOUT_CLASSIFICATION	1.4240499638141392E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996984104356	WITHOUT_CLASSIFICATION	3.0158956435713254E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999978427682402	WITHOUT_CLASSIFICATION	2.1572317597628243E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999657103013	WITHOUT_CLASSIFICATION	3.428969872258976E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996984104356	WITHOUT_CLASSIFICATION	3.0158956435713254E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999993844838	WITHOUT_CLASSIFICATION	6.155161982138657E-9	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998764342808	WITHOUT_CLASSIFICATION	1.2356571920477063E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999962551652875	WITHOUT_CLASSIFICATION	3.7448347126010968E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999971789203366	WITHOUT_CLASSIFICATION	2.8210796634360047E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999971004295247	WITHOUT_CLASSIFICATION	2.899570475320074E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998097468775	WITHOUT_CLASSIFICATION	1.9025312244880938E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998097468775	WITHOUT_CLASSIFICATION	1.9025312244880938E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999973733418658	WITHOUT_CLASSIFICATION	2.626658134198409E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999962804771	WITHOUT_CLASSIFICATION	3.719522983197359E-9	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999726891384354	WITHOUT_CLASSIFICATION	2.7310861564546836E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999990521592097	WITHOUT_CLASSIFICATION	9.478407904359104E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998661965046	WITHOUT_CLASSIFICATION	1.3380349535869221E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999992602389647	WITHOUT_CLASSIFICATION	7.397610353081765E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999981168258664	WITHOUT_CLASSIFICATION	1.8831741336982642E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.999998597627704	WITHOUT_CLASSIFICATION	1.4023722958690957E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999994377625054	WITHOUT_CLASSIFICATION	5.622374945372091E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999982392068039	WITHOUT_CLASSIFICATION	1.7607931961264983E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996035865917	WITHOUT_CLASSIFICATION	3.964134083367027E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996035865917	WITHOUT_CLASSIFICATION	3.964134083367027E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999936494613586	WITHOUT_CLASSIFICATION	6.350538641486568E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999981492166627	WITHOUT_CLASSIFICATION	1.8507833372856184E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999977770220931	WITHOUT_CLASSIFICATION	2.2229779067548726E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996035865917	WITHOUT_CLASSIFICATION	3.964134083367027E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999936494613586	WITHOUT_CLASSIFICATION	6.350538641486568E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999936494613586	WITHOUT_CLASSIFICATION	6.350538641486568E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999991524020926	WITHOUT_CLASSIFICATION	8.475979074071178E-7	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999994837460585	WITHOUT_CLASSIFICATION	5.162539414548435E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998025861185	WITHOUT_CLASSIFICATION	1.9741388142661242E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999997077654286	WITHOUT_CLASSIFICATION	2.9223457138999565E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999796175488	WITHOUT_CLASSIFICATION	2.0382451204743571E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999796175488	WITHOUT_CLASSIFICATION	2.0382451204743571E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999993093800339	WITHOUT_CLASSIFICATION	6.906199661046929E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999986272162946	WITHOUT_CLASSIFICATION	1.3727837054536066E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999912558244591	WITHOUT_CLASSIFICATION	8.744175540788334E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999983701786598	WITHOUT_CLASSIFICATION	1.6298213402470566E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999983701786598	WITHOUT_CLASSIFICATION	1.6298213402470566E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999927392262035	WITHOUT_CLASSIFICATION	7.260773796563118E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999997216085024	WITHOUT_CLASSIFICATION	2.78391497664596E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999632036033842	WITHOUT_CLASSIFICATION	3.6796396615754106E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999999756205252	WITHOUT_CLASSIFICATION	2.437947479868956E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999995118473664	WITHOUT_CLASSIFICATION	4.881526336640543E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997175325639	WITHOUT_CLASSIFICATION	2.824674361072072E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999951875417908	WITHOUT_CLASSIFICATION	4.812458209149067E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999934216965998	WITHOUT_CLASSIFICATION	6.578303400154185E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999824162927655	WITHOUT_CLASSIFICATION	1.758370723453425E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999632036033842	WITHOUT_CLASSIFICATION	3.6796396615754106E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999045210147841	WITHOUT_CLASSIFICATION	9.547898521593616E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999943266783866	WITHOUT_CLASSIFICATION	5.6733216134343796E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999943266783866	WITHOUT_CLASSIFICATION	5.6733216134343796E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999987465679	WITHOUT_CLASSIFICATION	1.2534321054809255E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999992829166907	WITHOUT_CLASSIFICATION	7.170833093155378E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999881223728	WITHOUT_CLASSIFICATION	1.1877627164889491E-8	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999897408981684	WITHOUT_CLASSIFICATION	1.0259101831633017E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999837224850618	WITHOUT_CLASSIFICATION	1.6277514938139624E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999133126516692	WITHOUT_CLASSIFICATION	8.668734833085315E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999933388131164	WITHOUT_CLASSIFICATION	6.6611868836194875E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999997949676592	WITHOUT_CLASSIFICATION	2.0503234062582306E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988266644991	WITHOUT_CLASSIFICATION	1.173335500892793E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988266644991	WITHOUT_CLASSIFICATION	1.173335500892793E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996984939200594	WITHOUT_CLASSIFICATION	3.0150607994064183E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992833754684	WITHOUT_CLASSIFICATION	7.166245314826088E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999975405225259	WITHOUT_CLASSIFICATION	2.4594774741974164E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999989726301343	WITHOUT_CLASSIFICATION	1.0273698657076557E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999958072724665	WITHOUT_CLASSIFICATION	4.192727533461447E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999997254075813	WITHOUT_CLASSIFICATION	2.745924187012963E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999950546113138	WITHOUT_CLASSIFICATION	4.945388686193312E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996134865085	WITHOUT_CLASSIFICATION	3.8651349152868254E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999920540676596	WITHOUT_CLASSIFICATION	7.94593234051608E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999854656385634	WITHOUT_CLASSIFICATION	1.453436143660447E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999934501876215	WITHOUT_CLASSIFICATION	6.549812378474903E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999997679243628	WITHOUT_CLASSIFICATION	2.3207563719986808E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999982293524613	WITHOUT_CLASSIFICATION	1.7706475386161323E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999982293524613	WITHOUT_CLASSIFICATION	1.7706475386161323E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999970089467475	WITHOUT_CLASSIFICATION	2.991053252644343E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999958349168664	WITHOUT_CLASSIFICATION	4.165083133676861E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999995918133243	WITHOUT_CLASSIFICATION	4.08186675672709E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999918586087367	WITHOUT_CLASSIFICATION	8.1413912633177E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999931394156071	WITHOUT_CLASSIFICATION	6.860584392898626E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999981822682947	WITHOUT_CLASSIFICATION	1.8177317053573112E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984175459091	WITHOUT_CLASSIFICATION	1.5824540908906829E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998598454561	WITHOUT_CLASSIFICATION	1.4015454385175765E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999907999244791	WITHOUT_CLASSIFICATION	9.200075520778743E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.99999305181616	WITHOUT_CLASSIFICATION	6.94818383993934E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999953333144989	WITHOUT_CLASSIFICATION	4.666685501152343E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999916425882962	WITHOUT_CLASSIFICATION	8.35741170383985E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999893572323094	WITHOUT_CLASSIFICATION	1.0642767690466944E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951588773056	WITHOUT_CLASSIFICATION	4.841122694327127E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998632201823	WITHOUT_CLASSIFICATION	1.367798176133716E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999989876294587	WITHOUT_CLASSIFICATION	1.0123705413480545E-6	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999983812663114	WITHOUT_CLASSIFICATION	1.6187336886911896E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998218969377	WITHOUT_CLASSIFICATION	1.7810306236288393E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999988694175985	WITHOUT_CLASSIFICATION	1.1305824014513881E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999918053223907	WITHOUT_CLASSIFICATION	8.194677609292732E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999854656385634	WITHOUT_CLASSIFICATION	1.453436143660447E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999982293524613	WITHOUT_CLASSIFICATION	1.7706475386161323E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951588773056	WITHOUT_CLASSIFICATION	4.841122694327127E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984055170658	WITHOUT_CLASSIFICATION	1.5944829341562823E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999995555110575	WITHOUT_CLASSIFICATION	4.444889425480014E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999999328269748	WITHOUT_CLASSIFICATION	6.717302520173252E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999989865771571	WITHOUT_CLASSIFICATION	1.0134228428880702E-6	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999893280021103	WITHOUT_CLASSIFICATION	1.0671997889678463E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997898190488	WITHOUT_CLASSIFICATION	2.1018095121758395E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999954462519304	WITHOUT_CLASSIFICATION	4.553748069628122E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999976273526663	WITHOUT_CLASSIFICATION	2.3726473337712993E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9998750805108267	WITHOUT_CLASSIFICATION	1.2491948917332118E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999993192597257	WITHOUT_CLASSIFICATION	6.807402742995269E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999738201135538	WITHOUT_CLASSIFICATION	2.617988644609182E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999738201135538	WITHOUT_CLASSIFICATION	2.617988644609182E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999878032296998	WITHOUT_CLASSIFICATION	1.2196770300281158E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999954970798032	WITHOUT_CLASSIFICATION	4.502920196769263E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999899428387614	WITHOUT_CLASSIFICATION	1.0057161238664485E-5	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999945442473975	WITHOUT_CLASSIFICATION	5.455752602472729E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999871572560852	WITHOUT_CLASSIFICATION	1.2842743914827256E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999961395371624	WITHOUT_CLASSIFICATION	3.860462837641091E-6	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999969177361217	WITHOUT_CLASSIFICATION	3.082263878298947E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999986246841895	WITHOUT_CLASSIFICATION	1.3753158104091448E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999917480568434	WITHOUT_CLASSIFICATION	8.251943156585484E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999546336822	WITHOUT_CLASSIFICATION	4.53663178123702E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999546336822	WITHOUT_CLASSIFICATION	4.53663178123702E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999992708244865	WITHOUT_CLASSIFICATION	7.291755134579577E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999928496686652	WITHOUT_CLASSIFICATION	7.150331334778122E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999990896194452	WITHOUT_CLASSIFICATION	9.103805548755883E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999999808968081	WITHOUT_CLASSIFICATION	1.9103191895197454E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999924651755854	WITHOUT_CLASSIFICATION	7.534824414592483E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999963407998347	WITHOUT_CLASSIFICATION	3.6592001653315966E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999854656385634	WITHOUT_CLASSIFICATION	1.453436143660447E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999997679243628	WITHOUT_CLASSIFICATION	2.3207563719986808E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951588773056	WITHOUT_CLASSIFICATION	4.841122694327127E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951588773056	WITHOUT_CLASSIFICATION	4.841122694327127E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999987050389545	WITHOUT_CLASSIFICATION	1.294961045511153E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999987050389545	WITHOUT_CLASSIFICATION	1.294961045511153E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999979135093664	WITHOUT_CLASSIFICATION	2.0864906334959963E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999958032286244	WITHOUT_CLASSIFICATION	4.196771375647461E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999958032286244	WITHOUT_CLASSIFICATION	4.196771375647461E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999578876110415	WITHOUT_CLASSIFICATION	4.211238895846168E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999952581496687	WITHOUT_CLASSIFICATION	4.741850331369497E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999845190338451	WITHOUT_CLASSIFICATION	1.54809661549046E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999516481451048	WITHOUT_CLASSIFICATION	4.8351854895222055E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999995678805134	WITHOUT_CLASSIFICATION	4.3211948658319174E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999996971172187	WITHOUT_CLASSIFICATION	3.028827813003016E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999996971172187	WITHOUT_CLASSIFICATION	3.028827813003016E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999959103783121	WITHOUT_CLASSIFICATION	4.089621687763098E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999989303605864	WITHOUT_CLASSIFICATION	1.069639413538892E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999956650245607	WITHOUT_CLASSIFICATION	4.3349754393125996E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999886737537677	WITHOUT_CLASSIFICATION	1.132624623227624E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999940543658667	WITHOUT_CLASSIFICATION	5.945634133284006E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999949844318369	WITHOUT_CLASSIFICATION	5.015568163174973E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999940779615918	WITHOUT_CLASSIFICATION	5.922038408177097E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999990102523057	WITHOUT_CLASSIFICATION	9.897476942985445E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999990102523057	WITHOUT_CLASSIFICATION	9.897476942985445E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999919137962188	WITHOUT_CLASSIFICATION	8.086203781247062E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999919137962188	WITHOUT_CLASSIFICATION	8.086203781247062E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999921089368544	WITHOUT_CLASSIFICATION	7.891063145584088E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999921089368544	WITHOUT_CLASSIFICATION	7.891063145584088E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986708988294	WITHOUT_CLASSIFICATION	1.3291011705574514E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986708988294	WITHOUT_CLASSIFICATION	1.3291011705574514E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999996971172187	WITHOUT_CLASSIFICATION	3.028827813003016E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999940779615918	WITHOUT_CLASSIFICATION	5.922038408177097E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999990102523057	WITHOUT_CLASSIFICATION	9.897476942985445E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999990102523057	WITHOUT_CLASSIFICATION	9.897476942985445E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999919137962188	WITHOUT_CLASSIFICATION	8.086203781247062E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999921089368544	WITHOUT_CLASSIFICATION	7.891063145584088E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999921089368544	WITHOUT_CLASSIFICATION	7.891063145584088E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986708988294	WITHOUT_CLASSIFICATION	1.3291011705574514E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984256133667	WITHOUT_CLASSIFICATION	1.5743866332708524E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999700325089751	WITHOUT_CLASSIFICATION	2.9967491024954152E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999899772633235	WITHOUT_CLASSIFICATION	1.0022736676488654E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999994988047736	WITHOUT_CLASSIFICATION	5.011952265030193E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998818592059078	WITHOUT_CLASSIFICATION	1.1814079409222607E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999917643920904	WITHOUT_CLASSIFICATION	8.235607909559597E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999991584550532	WITHOUT_CLASSIFICATION	8.41544946931196E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999979408803424	WITHOUT_CLASSIFICATION	2.059119657457745E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999998904858838	WITHOUT_CLASSIFICATION	1.0951411619538222E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998424239951	WITHOUT_CLASSIFICATION	1.5757600503583648E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999998980371951	WITHOUT_CLASSIFICATION	1.0196280489660922E-6	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999965778159887	WITHOUT_CLASSIFICATION	3.422184011247846E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999973733418658	WITHOUT_CLASSIFICATION	2.626658134198409E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999917643920904	WITHOUT_CLASSIFICATION	8.235607909559597E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.999883280646309	WITHOUT_CLASSIFICATION	1.1671935369091089E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.999883280646309	WITHOUT_CLASSIFICATION	1.1671935369091089E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999936490943626	WITHOUT_CLASSIFICATION	6.350905637450004E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997810092394	WITHOUT_CLASSIFICATION	2.1899076068225776E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997810092394	WITHOUT_CLASSIFICATION	2.1899076068225776E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999995450469765	WITHOUT_CLASSIFICATION	4.5495302346107274E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999993869294707	WITHOUT_CLASSIFICATION	6.13070529296545E-7	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996028777373	WITHOUT_CLASSIFICATION	3.971222628401367E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999996220883381	WITHOUT_CLASSIFICATION	3.7791166192939697E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999996220883381	WITHOUT_CLASSIFICATION	3.7791166192939697E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999432090262	WITHOUT_CLASSIFICATION	5.6790973715313775E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999935897724	WITHOUT_CLASSIFICATION	6.4102275303161435E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999935897724	WITHOUT_CLASSIFICATION	6.4102275303161435E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999999357252368	WITHOUT_CLASSIFICATION	6.427476308798208E-8	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999984978330881	WITHOUT_CLASSIFICATION	1.502166911823406E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999981591236807	WITHOUT_CLASSIFICATION	1.8408763193459094E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999752526906323	WITHOUT_CLASSIFICATION	2.474730936783622E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999857673234915	WITHOUT_CLASSIFICATION	1.4232676508551361E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.999977115085115	WITHOUT_CLASSIFICATION	2.2884914884979627E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999849106730454	WITHOUT_CLASSIFICATION	1.5089326954641925E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999793757566521	WITHOUT_CLASSIFICATION	2.0624243348006057E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9999360793664067	WITHOUT_CLASSIFICATION	6.392063359324528E-5	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999795988327452	WITHOUT_CLASSIFICATION	2.0401167254761E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999737812047806	WITHOUT_CLASSIFICATION	2.6218795219300032E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999699233364474	WITHOUT_CLASSIFICATION	3.0076663552592174E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994563411722	WITHOUT_CLASSIFICATION	5.436588277937378E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999983367586934	WITHOUT_CLASSIFICATION	1.6632413066085815E-6	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999995129737025	WITHOUT_CLASSIFICATION	4.870262974644673E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999699233364474	WITHOUT_CLASSIFICATION	3.0076663552592174E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998058428085	WITHOUT_CLASSIFICATION	1.9415719154920773E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998259625674	WITHOUT_CLASSIFICATION	1.7403743260421414E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999726014984308	WITHOUT_CLASSIFICATION	2.739850156912629E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999828030485214	WITHOUT_CLASSIFICATION	1.7196951478609357E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999832932896818	WITHOUT_CLASSIFICATION	1.67067103181839E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999766830388754	WITHOUT_CLASSIFICATION	2.3316961124556775E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999709195712551	WITHOUT_CLASSIFICATION	2.9080428744891958E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999785117138996	WITHOUT_CLASSIFICATION	2.148828610035181E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999969445113361	WITHOUT_CLASSIFICATION	3.055488663887843E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986561573843	WITHOUT_CLASSIFICATION	1.3438426158041634E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999918158552704	WITHOUT_CLASSIFICATION	8.18414472963761E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999960640466852	WITHOUT_CLASSIFICATION	3.9359533148267126E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999796909449981	WITHOUT_CLASSIFICATION	2.030905500191934E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999849106730454	WITHOUT_CLASSIFICATION	1.5089326954641925E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999969445113361	WITHOUT_CLASSIFICATION	3.055488663887843E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999918158552704	WITHOUT_CLASSIFICATION	8.18414472963761E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999796909449981	WITHOUT_CLASSIFICATION	2.030905500191934E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999993447612493	WITHOUT_CLASSIFICATION	6.552387507438953E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999748118511559	WITHOUT_CLASSIFICATION	2.5188148844188727E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999995988393935	WITHOUT_CLASSIFICATION	4.01160606506343E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999772679393814	WITHOUT_CLASSIFICATION	2.2732060618631935E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999732351953722	WITHOUT_CLASSIFICATION	2.6764804627734968E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999976376953814	WITHOUT_CLASSIFICATION	2.3623046186660384E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999772535302458	WITHOUT_CLASSIFICATION	2.2746469754309187E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999999337490157	WITHOUT_CLASSIFICATION	6.625098430057739E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999861797959247	WITHOUT_CLASSIFICATION	1.3820204075282509E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999805082253	WITHOUT_CLASSIFICATION	1.949177470500794E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984918724198	WITHOUT_CLASSIFICATION	1.5081275801243661E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999985906957772	WITHOUT_CLASSIFICATION	1.4093042226942704E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999674011078	WITHOUT_CLASSIFICATION	3.259889219355177E-7	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999967563517171	WITHOUT_CLASSIFICATION	3.2436482828543722E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999781841423977	WITHOUT_CLASSIFICATION	2.1815857602362108E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999853921600861	WITHOUT_CLASSIFICATION	1.4607839913873023E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999860765931453	WITHOUT_CLASSIFICATION	1.3923406854693753E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999995517272007	WITHOUT_CLASSIFICATION	4.482727993282489E-7	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999793144645526	WITHOUT_CLASSIFICATION	2.0685535447466638E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999969445113361	WITHOUT_CLASSIFICATION	3.055488663887843E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999990137202049	WITHOUT_CLASSIFICATION	9.862797950697016E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993238586439	WITHOUT_CLASSIFICATION	6.76141356030621E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999915829544733	WITHOUT_CLASSIFICATION	8.417045526715318E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999811397350297	WITHOUT_CLASSIFICATION	1.8860264970381132E-5	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.99999241204229	WITHOUT_CLASSIFICATION	7.587957710090847E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999989635912504	WITHOUT_CLASSIFICATION	1.0364087495552144E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998238898686	WITHOUT_CLASSIFICATION	1.76110131320101E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999960380019398	WITHOUT_CLASSIFICATION	3.961998060135909E-6	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999680121431777	WITHOUT_CLASSIFICATION	3.198785682227375E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999724604662221	WITHOUT_CLASSIFICATION	2.753953377780917E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999790706451267	WITHOUT_CLASSIFICATION	2.0929354873296536E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999742186932512	WITHOUT_CLASSIFICATION	2.5781306748694675E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999995664122037	WITHOUT_CLASSIFICATION	4.3358779639393047E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999005743061	WITHOUT_CLASSIFICATION	9.942569397837433E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999986635800199	WITHOUT_CLASSIFICATION	1.336419980105037E-6	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999003275947	WITHOUT_CLASSIFICATION	9.967240532554318E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999896771598594	WITHOUT_CLASSIFICATION	1.0322840140694053E-5	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999890010642598	WITHOUT_CLASSIFICATION	1.099893574008156E-5	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999771065371716	WITHOUT_CLASSIFICATION	2.289346282827567E-5	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999999310197086	WITHOUT_CLASSIFICATION	6.898029140314184E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999800385277	WITHOUT_CLASSIFICATION	1.9961472263481315E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999712814919	WITHOUT_CLASSIFICATION	2.8718508049586433E-8	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999981012196246	WITHOUT_CLASSIFICATION	1.8987803753806877E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999952939854803	WITHOUT_CLASSIFICATION	4.706014519807573E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999919833231572	WITHOUT_CLASSIFICATION	8.01667684283695E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999919833231572	WITHOUT_CLASSIFICATION	8.01667684283695E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999852473238072	WITHOUT_CLASSIFICATION	1.4752676192749741E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999981471050066	WITHOUT_CLASSIFICATION	1.8528949935529745E-6	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999903766130338	WITHOUT_CLASSIFICATION	9.623386966291505E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999991529807174	WITHOUT_CLASSIFICATION	8.470192826829435E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999996912348997	WITHOUT_CLASSIFICATION	3.0876510029731185E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999879311004732	WITHOUT_CLASSIFICATION	1.206889952671607E-5	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999999111275259	WITHOUT_CLASSIFICATION	8.887247409990056E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999995277424715	WITHOUT_CLASSIFICATION	4.7225752851173443E-7	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999938663596085	WITHOUT_CLASSIFICATION	6.133640391596336E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999586901101855	WITHOUT_CLASSIFICATION	4.130988981458875E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999942684808351	WITHOUT_CLASSIFICATION	5.731519164973976E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999976479695303	WITHOUT_CLASSIFICATION	2.3520304697803808E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999998086803977	WITHOUT_CLASSIFICATION	1.91319602162479E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999968765520274	WITHOUT_CLASSIFICATION	3.1234479725084696E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776668896394	WITHOUT_CLASSIFICATION	2.2333110360588507E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789429880908	WITHOUT_CLASSIFICATION	2.1057011909238476E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999990299402126	WITHOUT_CLASSIFICATION	9.70059787361052E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999983851100388	WITHOUT_CLASSIFICATION	1.6148899611387655E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998800767473	WITHOUT_CLASSIFICATION	1.1992325265706968E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999916421476079	WITHOUT_CLASSIFICATION	8.35785239206194E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999801684940108	WITHOUT_CLASSIFICATION	1.9831505989149523E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999801684940108	WITHOUT_CLASSIFICATION	1.9831505989149523E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999693998629652	WITHOUT_CLASSIFICATION	3.060013703486417E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999693998629652	WITHOUT_CLASSIFICATION	3.060013703486417E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999981012196246	WITHOUT_CLASSIFICATION	1.8987803753806877E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.99998101172075	WITHOUT_CLASSIFICATION	1.8988279249951544E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999977600226442	WITHOUT_CLASSIFICATION	2.2399773557903182E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999957533731445	WITHOUT_CLASSIFICATION	4.246626855497569E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999977600226442	WITHOUT_CLASSIFICATION	2.2399773557903182E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999957533731445	WITHOUT_CLASSIFICATION	4.246626855497569E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999608682837634	WITHOUT_CLASSIFICATION	3.9131716236549625E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999975953301975	WITHOUT_CLASSIFICATION	2.404669802501829E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999966321523718	WITHOUT_CLASSIFICATION	3.3678476282295245E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999877564490334	WITHOUT_CLASSIFICATION	1.2243550966618057E-5	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999988697715203	WITHOUT_CLASSIFICATION	1.1302284796256919E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999948396327516	WITHOUT_CLASSIFICATION	5.160367248444894E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995277575032	WITHOUT_CLASSIFICATION	4.7224249683466214E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999974906926921	WITHOUT_CLASSIFICATION	2.5093073079964205E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999521408452513	WITHOUT_CLASSIFICATION	4.785915474863816E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997722773372	WITHOUT_CLASSIFICATION	2.2772266272299982E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999990954868777	WITHOUT_CLASSIFICATION	9.045131223351281E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997549295275	WITHOUT_CLASSIFICATION	2.4507047250838E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999938373363031	WITHOUT_CLASSIFICATION	6.162663696920823E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999941890851799	WITHOUT_CLASSIFICATION	5.8109148201867205E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999994256756627	WITHOUT_CLASSIFICATION	5.743243373054686E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999773468350097	WITHOUT_CLASSIFICATION	2.2653164990277078E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999773468350097	WITHOUT_CLASSIFICATION	2.2653164990277078E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999998733600726	WITHOUT_CLASSIFICATION	1.26639927480962E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999608682837634	WITHOUT_CLASSIFICATION	3.9131716236549625E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999973213211197	WITHOUT_CLASSIFICATION	2.678678880309308E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999994517219786	WITHOUT_CLASSIFICATION	5.482780214519151E-7	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999104094088	WITHOUT_CLASSIFICATION	8.959059125841294E-8	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999970589493006	WITHOUT_CLASSIFICATION	2.941050699307986E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999430106956577	WITHOUT_CLASSIFICATION	5.698930434225E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999608682837634	WITHOUT_CLASSIFICATION	3.9131716236549625E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999970589493006	WITHOUT_CLASSIFICATION	2.941050699307986E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999430106956577	WITHOUT_CLASSIFICATION	5.698930434225E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999921315546662	WITHOUT_CLASSIFICATION	7.868445333767863E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999859923689771	WITHOUT_CLASSIFICATION	1.4007631022896262E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999999090468219	WITHOUT_CLASSIFICATION	9.095317809448798E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999608682837634	WITHOUT_CLASSIFICATION	3.9131716236549625E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999608682837634	WITHOUT_CLASSIFICATION	3.9131716236549625E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999916597007695	WITHOUT_CLASSIFICATION	8.340299230418513E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999923166536187	WITHOUT_CLASSIFICATION	7.683346381278924E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999711985420968	WITHOUT_CLASSIFICATION	2.8801457903123633E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999990927141247	WITHOUT_CLASSIFICATION	9.072858752970261E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999854307671511	WITHOUT_CLASSIFICATION	1.4569232848781134E-5	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999994819527734	WITHOUT_CLASSIFICATION	5.180472266088561E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999975871744873	WITHOUT_CLASSIFICATION	2.412825512724019E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999971775758436	WITHOUT_CLASSIFICATION	2.8224241564834905E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999994343301299	WITHOUT_CLASSIFICATION	5.656698700569267E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999577442013788	WITHOUT_CLASSIFICATION	4.225579862110245E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999995652001156	WITHOUT_CLASSIFICATION	4.347998845046329E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999989477552841	WITHOUT_CLASSIFICATION	1.0522447159436832E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998151525776	WITHOUT_CLASSIFICATION	1.8484742242378335E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999956173195125	WITHOUT_CLASSIFICATION	4.382680487440714E-6	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985524671741	WITHOUT_CLASSIFICATION	1.4475328258862248E-6	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999362518778	WITHOUT_CLASSIFICATION	6.374812213390021E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999403196372457	WITHOUT_CLASSIFICATION	5.968036275413474E-5	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999970125230366	WITHOUT_CLASSIFICATION	2.9874769634298774E-6	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999945987327296	WITHOUT_CLASSIFICATION	5.401267270473013E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999994477139589	WITHOUT_CLASSIFICATION	5.522860411269677E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999929495309163	WITHOUT_CLASSIFICATION	7.050469083726445E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998351063827543	WITHOUT_CLASSIFICATION	1.6489361724581966E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998351063827543	WITHOUT_CLASSIFICATION	1.6489361724581966E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999403196372457	WITHOUT_CLASSIFICATION	5.968036275413474E-5	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999940013471914	WITHOUT_CLASSIFICATION	5.998652808613079E-6	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999997782419957	WITHOUT_CLASSIFICATION	2.2175800435490197E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999815434286445	WITHOUT_CLASSIFICATION	1.8456571355493764E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999788330450857	WITHOUT_CLASSIFICATION	2.1166954914310243E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999478077312871	WITHOUT_CLASSIFICATION	5.2192268712810776E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997807727781	WITHOUT_CLASSIFICATION	2.1922722202078197E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999983987754791	WITHOUT_CLASSIFICATION	1.6012245208559895E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999963179982202	WITHOUT_CLASSIFICATION	3.682001779706558E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999449704938	WITHOUT_CLASSIFICATION	5.502950626330099E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999991393692098	WITHOUT_CLASSIFICATION	8.606307900903126E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999973439913571	WITHOUT_CLASSIFICATION	2.6560086427959546E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999991859246484	WITHOUT_CLASSIFICATION	8.140753515947709E-7	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999697074542564	WITHOUT_CLASSIFICATION	3.0292545743525143E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999337876709	WITHOUT_CLASSIFICATION	6.62123291261061E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995225175741	WITHOUT_CLASSIFICATION	4.774824258835722E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.99999905094587	WITHOUT_CLASSIFICATION	9.49054129950936E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999970338570832	WITHOUT_CLASSIFICATION	2.9661429168532033E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999978467348647	WITHOUT_CLASSIFICATION	2.153265135349781E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982833133914	WITHOUT_CLASSIFICATION	1.7166866086196026E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999405336604	WITHOUT_CLASSIFICATION	5.946633960062855E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996946532188	WITHOUT_CLASSIFICATION	3.053467812451447E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999993896874216	WITHOUT_CLASSIFICATION	6.103125783713804E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996512396198	WITHOUT_CLASSIFICATION	3.4876038032480215E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991156811107	WITHOUT_CLASSIFICATION	8.84318889364072E-7	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910346162101	WITHOUT_CLASSIFICATION	8.965383789917759E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984644973225	WITHOUT_CLASSIFICATION	1.5355026774507086E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868240579501	WITHOUT_CLASSIFICATION	1.3175942049878113E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886592698043	WITHOUT_CLASSIFICATION	1.1340730195764166E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859883047346	WITHOUT_CLASSIFICATION	1.4011695265522823E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967777285349	WITHOUT_CLASSIFICATION	3.2222714650981603E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999993299219776	WITHOUT_CLASSIFICATION	6.700780224155193E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999991790084914	WITHOUT_CLASSIFICATION	8.209915085018148E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961725821513	WITHOUT_CLASSIFICATION	3.827417848700292E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975032715321	WITHOUT_CLASSIFICATION	2.496728467848066E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992975710962	WITHOUT_CLASSIFICATION	7.024289038580618E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975280582283	WITHOUT_CLASSIFICATION	2.471941771685925E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988613896641	WITHOUT_CLASSIFICATION	1.1386103359024815E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998693297623	WITHOUT_CLASSIFICATION	1.3067023770557944E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956177019694	WITHOUT_CLASSIFICATION	4.3822980306439655E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864167122292	WITHOUT_CLASSIFICATION	1.3583287770815158E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996615153786	WITHOUT_CLASSIFICATION	3.3848462142353233E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987199361493	WITHOUT_CLASSIFICATION	1.2800638507172626E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999996209190654	WITHOUT_CLASSIFICATION	3.7908093458225477E-7	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999034618011	WITHOUT_CLASSIFICATION	9.653819888122405E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999997221446235	WITHOUT_CLASSIFICATION	2.778553765485586E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999990479349959	WITHOUT_CLASSIFICATION	9.520650041044552E-6	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999714709979172	WITHOUT_CLASSIFICATION	2.8529002082804616E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999966402538876	WITHOUT_CLASSIFICATION	3.359746112388901E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999996304927568	WITHOUT_CLASSIFICATION	3.6950724319690926E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999855395509843	WITHOUT_CLASSIFICATION	1.4460449015606611E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999786343814062	WITHOUT_CLASSIFICATION	2.136561859380465E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999983075133223	WITHOUT_CLASSIFICATION	1.6924866776871997E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997693076171262	WITHOUT_CLASSIFICATION	2.3069238287384708E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999750183069605	WITHOUT_CLASSIFICATION	2.4981693039541855E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999966888526924	WITHOUT_CLASSIFICATION	3.3111473076176612E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999978034146865	WITHOUT_CLASSIFICATION	2.196585313484976E-6	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999969404341725	WITHOUT_CLASSIFICATION	3.05956582745049E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999771863768415	WITHOUT_CLASSIFICATION	2.2813623158485944E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999994746180283	WITHOUT_CLASSIFICATION	5.253819717379876E-7	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957911034232	WITHOUT_CLASSIFICATION	4.208896576790249E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981280586979	WITHOUT_CLASSIFICATION	1.8719413020170585E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996708960692	WITHOUT_CLASSIFICATION	3.2910393079256337E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939957594076	WITHOUT_CLASSIFICATION	6.004240592301777E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999939095730542	WITHOUT_CLASSIFICATION	6.090426945815167E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999652571671	WITHOUT_CLASSIFICATION	3.474283300151349E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999980192707698	WITHOUT_CLASSIFICATION	1.9807292301971455E-6	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999985065501383	WITHOUT_CLASSIFICATION	1.4934498616993588E-6	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968447537944	WITHOUT_CLASSIFICATION	3.1552462057366426E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999974345527246	WITHOUT_CLASSIFICATION	2.5654472754996314E-6	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999983963083601	WITHOUT_CLASSIFICATION	1.6036916399509737E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999989963732157	WITHOUT_CLASSIFICATION	1.0036267843150774E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998446054323	WITHOUT_CLASSIFICATION	1.553945677075206E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999987644097066	WITHOUT_CLASSIFICATION	1.2355902934279097E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999994833649233	WITHOUT_CLASSIFICATION	5.166350766690668E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999991799424619	WITHOUT_CLASSIFICATION	8.200575380847092E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999994176916651	WITHOUT_CLASSIFICATION	5.823083349059698E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999990479349959	WITHOUT_CLASSIFICATION	9.520650041044552E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999995551273492	WITHOUT_CLASSIFICATION	4.4487265075719744E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995500208052	WITHOUT_CLASSIFICATION	4.4997919478766123E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999943112905805	WITHOUT_CLASSIFICATION	5.688709419581371E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999615507966	WITHOUT_CLASSIFICATION	3.844920340000796E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.99999922029152	WITHOUT_CLASSIFICATION	7.797084801157488E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999960338369906	WITHOUT_CLASSIFICATION	3.966163009430917E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.999960266672925	WITHOUT_CLASSIFICATION	3.9733327074910085E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999982903015613	WITHOUT_CLASSIFICATION	1.7096984387215772E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999993305932738	WITHOUT_CLASSIFICATION	6.69406726165687E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996647603409	WITHOUT_CLASSIFICATION	3.352396590964334E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995780763108	WITHOUT_CLASSIFICATION	4.2192368923340374E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992571525039	WITHOUT_CLASSIFICATION	7.428474961578915E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998460545378	WITHOUT_CLASSIFICATION	1.539454621115049E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999553787249	WITHOUT_CLASSIFICATION	4.462127502531578E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998238724909	WITHOUT_CLASSIFICATION	1.7612750919434988E-7	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999992830849629	WITHOUT_CLASSIFICATION	7.169150372059977E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999881514618605	WITHOUT_CLASSIFICATION	1.184853813961659E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999102216987	WITHOUT_CLASSIFICATION	8.977830136410588E-8	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999883451713002	WITHOUT_CLASSIFICATION	1.1654828699884998E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999978014176093	WITHOUT_CLASSIFICATION	2.1985823906608457E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999054215484	WITHOUT_CLASSIFICATION	9.457845159798899E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999846518802086	WITHOUT_CLASSIFICATION	1.534811979143984E-5	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999951884788079	WITHOUT_CLASSIFICATION	4.8115211921827866E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999966780821602	WITHOUT_CLASSIFICATION	3.3219178397885973E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999976928030856	WITHOUT_CLASSIFICATION	2.3071969142788197E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999939139620532	WITHOUT_CLASSIFICATION	6.086037946757633E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998919469593984	WITHOUT_CLASSIFICATION	1.0805304060155794E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999907630508659	WITHOUT_CLASSIFICATION	9.236949134079607E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999857396620185	WITHOUT_CLASSIFICATION	1.4260337981402972E-5	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999955972122	WITHOUT_CLASSIFICATION	4.4027877979270076E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999990479349959	WITHOUT_CLASSIFICATION	9.520650041044552E-6	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996831025104	WITHOUT_CLASSIFICATION	3.168974896328372E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999933404979	WITHOUT_CLASSIFICATION	6.659502017451867E-9	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998772788073	WITHOUT_CLASSIFICATION	1.2272119267018153E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999990479349959	WITHOUT_CLASSIFICATION	9.520650041044552E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999962288233241	WITHOUT_CLASSIFICATION	3.7711766759309576E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999054215484	WITHOUT_CLASSIFICATION	9.457845159798899E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999970950573236	WITHOUT_CLASSIFICATION	2.904942676334626E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999934109452834	WITHOUT_CLASSIFICATION	6.589054716555965E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999799813151	WITHOUT_CLASSIFICATION	2.0018684920382213E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996647603409	WITHOUT_CLASSIFICATION	3.352396590964334E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995780763108	WITHOUT_CLASSIFICATION	4.2192368923340374E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992571525039	WITHOUT_CLASSIFICATION	7.428474961578915E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999948982119609	WITHOUT_CLASSIFICATION	5.101788039237626E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999975018306394	WITHOUT_CLASSIFICATION	2.4981693606285276E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999676068780269	WITHOUT_CLASSIFICATION	3.2393121973102327E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999961939615725	WITHOUT_CLASSIFICATION	3.8060384275477265E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999999636433254	WITHOUT_CLASSIFICATION	3.6356674611371504E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999990479349959	WITHOUT_CLASSIFICATION	9.520650041044552E-6	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998460545378	WITHOUT_CLASSIFICATION	1.539454621115049E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999553787249	WITHOUT_CLASSIFICATION	4.462127502531578E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994898807342	WITHOUT_CLASSIFICATION	5.101192657937865E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995914386597	WITHOUT_CLASSIFICATION	4.0856134025648257E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999968125130972	WITHOUT_CLASSIFICATION	3.1874869027582763E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999983114629951	WITHOUT_CLASSIFICATION	1.6885370049528202E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999998765908928	WITHOUT_CLASSIFICATION	1.2340910720661662E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999999925108632	WITHOUT_CLASSIFICATION	7.489136797868691E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864167122292	WITHOUT_CLASSIFICATION	1.3583287770815158E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999978251593579	WITHOUT_CLASSIFICATION	2.174840642132318E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999942100960283	WITHOUT_CLASSIFICATION	5.789903971661001E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999860294281141	WITHOUT_CLASSIFICATION	1.3970571885755177E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999997406033603	WITHOUT_CLASSIFICATION	2.5939663981540986E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999981989060347	WITHOUT_CLASSIFICATION	1.8010939652568429E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868240579501	WITHOUT_CLASSIFICATION	1.3175942049878113E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886592698043	WITHOUT_CLASSIFICATION	1.1340730195764166E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975032715321	WITHOUT_CLASSIFICATION	2.496728467848066E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999981989060347	WITHOUT_CLASSIFICATION	1.8010939652568429E-6	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999994601355037	WITHOUT_CLASSIFICATION	5.398644963538154E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998662176127	WITHOUT_CLASSIFICATION	1.3378238730349458E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989963012056	WITHOUT_CLASSIFICATION	1.0036987944117286E-6	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947718229393	WITHOUT_CLASSIFICATION	5.228177060726213E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999467601893	WITHOUT_CLASSIFICATION	5.323981072797788E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999634470359687	WITHOUT_CLASSIFICATION	3.655296403128193E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992975710962	WITHOUT_CLASSIFICATION	7.024289038580618E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998693297623	WITHOUT_CLASSIFICATION	1.3067023770557944E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998446054323	WITHOUT_CLASSIFICATION	1.553945677075206E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997051519481	WITHOUT_CLASSIFICATION	2.948480518180972E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999960119999062	WITHOUT_CLASSIFICATION	3.988000093754873E-6	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999307402976	WITHOUT_CLASSIFICATION	6.925970251254274E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999951581939586	WITHOUT_CLASSIFICATION	4.841806041451602E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999489570166	WITHOUT_CLASSIFICATION	5.1042983478904746E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999983008560421	WITHOUT_CLASSIFICATION	1.6991439577530759E-6	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999815615832448	WITHOUT_CLASSIFICATION	1.8438416755219228E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999449704938	WITHOUT_CLASSIFICATION	5.502950626330099E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999995416261847	WITHOUT_CLASSIFICATION	4.5837381535527994E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998314288426	WITHOUT_CLASSIFICATION	1.6857115743709594E-7	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999808100974521	WITHOUT_CLASSIFICATION	1.918990254788249E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999983301443973	WITHOUT_CLASSIFICATION	1.6698556026708336E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999885226162993	WITHOUT_CLASSIFICATION	1.1477383700798026E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999976901314089	WITHOUT_CLASSIFICATION	2.3098685911028897E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988697764381	WITHOUT_CLASSIFICATION	1.130223561948024E-6	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994462320706	WITHOUT_CLASSIFICATION	5.537679294465495E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999966419134347	WITHOUT_CLASSIFICATION	3.3580865651496E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999970781897568	WITHOUT_CLASSIFICATION	2.921810243302337E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999956102999483	WITHOUT_CLASSIFICATION	4.389700051733989E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979082119937	WITHOUT_CLASSIFICATION	2.0917880061390866E-6	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999978949302941	WITHOUT_CLASSIFICATION	2.105069705874926E-6	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982592596978	WITHOUT_CLASSIFICATION	1.7407403022202485E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999962004122842	WITHOUT_CLASSIFICATION	3.7995877158474315E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999967656079083	WITHOUT_CLASSIFICATION	3.23439209174512E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999890052016767	WITHOUT_CLASSIFICATION	1.099479832319487E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976899346182	WITHOUT_CLASSIFICATION	2.3100653817854535E-6	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999943033953314	WITHOUT_CLASSIFICATION	5.696604668640856E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999981003907493	WITHOUT_CLASSIFICATION	1.899609250621367E-6	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982694057393	WITHOUT_CLASSIFICATION	1.7305942607146545E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999959780260559	WITHOUT_CLASSIFICATION	4.021973944063449E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993132190107	WITHOUT_CLASSIFICATION	6.867809893929285E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999989269825135	WITHOUT_CLASSIFICATION	1.0730174865909739E-6	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999998551987658	WITHOUT_CLASSIFICATION	1.4480123420279811E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997926104318213	WITHOUT_CLASSIFICATION	2.0738956817869617E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998004360678252	WITHOUT_CLASSIFICATION	1.995639321748233E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999980258644269	WITHOUT_CLASSIFICATION	1.974135573035895E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999995616367495	WITHOUT_CLASSIFICATION	4.383632504731077E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999939095626403	WITHOUT_CLASSIFICATION	6.090437359604788E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999987969070839	WITHOUT_CLASSIFICATION	1.2030929159817768E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998818663988	WITHOUT_CLASSIFICATION	1.181336012594234E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999985383476458	WITHOUT_CLASSIFICATION	1.4616523541506703E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999979028816692	WITHOUT_CLASSIFICATION	2.097118330782197E-6	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994854469586	WITHOUT_CLASSIFICATION	5.145530413026576E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999509585476819	WITHOUT_CLASSIFICATION	4.904145231803235E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999460438992	WITHOUT_CLASSIFICATION	5.395610091305034E-8	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999998930181945	WITHOUT_CLASSIFICATION	1.0698180551071286E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999949588207977	WITHOUT_CLASSIFICATION	5.04117920227492E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999933430857278	WITHOUT_CLASSIFICATION	6.656914272205996E-6	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999993341135395	WITHOUT_CLASSIFICATION	6.658864605496115E-7	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999979060968106	WITHOUT_CLASSIFICATION	2.0939031894032207E-6	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999979274436136	WITHOUT_CLASSIFICATION	2.0725563864079105E-5	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999992297965697	WITHOUT_CLASSIFICATION	7.702034302827912E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999940795007715	WITHOUT_CLASSIFICATION	5.920499228572698E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999960898396443	WITHOUT_CLASSIFICATION	3.910160355734579E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999979298151029	WITHOUT_CLASSIFICATION	2.0701848969997745E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999575740168	WITHOUT_CLASSIFICATION	4.2425983201543626E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999934765987637	WITHOUT_CLASSIFICATION	6.523401236338088E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999996407422237	WITHOUT_CLASSIFICATION	3.5925777625988515E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999999583955926	WITHOUT_CLASSIFICATION	4.1604407405240987E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995804631657	WITHOUT_CLASSIFICATION	4.1953683430348477E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999952632831222	WITHOUT_CLASSIFICATION	4.736716877825069E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999982890531527	WITHOUT_CLASSIFICATION	1.7109468473140148E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999902506621	WITHOUT_CLASSIFICATION	9.749337976995892E-9	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999979496180031	WITHOUT_CLASSIFICATION	2.050381996877392E-6	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999998328335266	WITHOUT_CLASSIFICATION	1.6716647338926962E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999979465925424	WITHOUT_CLASSIFICATION	2.053407457682482E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999871470666283	WITHOUT_CLASSIFICATION	1.285293337169662E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999879182633741	WITHOUT_CLASSIFICATION	1.2081736625874203E-5	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999731859034037	WITHOUT_CLASSIFICATION	2.681409659637451E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999087287313652	WITHOUT_CLASSIFICATION	9.127126863479356E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999979003141357	WITHOUT_CLASSIFICATION	2.099685864292709E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999980164706014	WITHOUT_CLASSIFICATION	1.983529398631367E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999988587218406	WITHOUT_CLASSIFICATION	1.1412781594430373E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999881793126708	WITHOUT_CLASSIFICATION	1.1820687329164189E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999990398239059	WITHOUT_CLASSIFICATION	9.601760941228753E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999965773440933	WITHOUT_CLASSIFICATION	3.422655906602212E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999912927855	WITHOUT_CLASSIFICATION	8.707214499944641E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999921400609626	WITHOUT_CLASSIFICATION	7.859939037453026E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999997891822432	WITHOUT_CLASSIFICATION	2.1081775679104554E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999716113280944	WITHOUT_CLASSIFICATION	2.838867190548476E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999698031593623	WITHOUT_CLASSIFICATION	3.0196840637745422E-5	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999993678042668	WITHOUT_CLASSIFICATION	6.321957331265724E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999994429187775	WITHOUT_CLASSIFICATION	5.57081222412544E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999660432303417	WITHOUT_CLASSIFICATION	3.395676965832454E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999974350760118	WITHOUT_CLASSIFICATION	2.5649239881797145E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999993158105918	WITHOUT_CLASSIFICATION	6.841894082402318E-7	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999995522341064	WITHOUT_CLASSIFICATION	4.4776589366438757E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999899733219698	WITHOUT_CLASSIFICATION	1.0026678030133785E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999890394869303	WITHOUT_CLASSIFICATION	1.0960513069592764E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999830646441668	WITHOUT_CLASSIFICATION	1.69353558332327E-5	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999938384544779	WITHOUT_CLASSIFICATION	6.161545522148223E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999618804634425	WITHOUT_CLASSIFICATION	3.8119536557477064E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999661376907598	WITHOUT_CLASSIFICATION	3.3862309240093705E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999917069534433	WITHOUT_CLASSIFICATION	8.293046556799516E-6	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999491250173772	WITHOUT_CLASSIFICATION	5.087498262284624E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999872714945762	WITHOUT_CLASSIFICATION	1.2728505423708224E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999963270313414	WITHOUT_CLASSIFICATION	3.672968658465001E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999997018573233	WITHOUT_CLASSIFICATION	2.981426766855048E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999925989510459	WITHOUT_CLASSIFICATION	7.401048954174592E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999863590029656	WITHOUT_CLASSIFICATION	1.3640997034419042E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999946745753142	WITHOUT_CLASSIFICATION	5.325424685787148E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999925989510459	WITHOUT_CLASSIFICATION	7.401048954174592E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999996651468002	WITHOUT_CLASSIFICATION	3.3485319979979523E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999919130369652	WITHOUT_CLASSIFICATION	8.086963034703998E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999975668806795	WITHOUT_CLASSIFICATION	2.433119320507997E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999908817396455	WITHOUT_CLASSIFICATION	9.118260354604956E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999982618563147	WITHOUT_CLASSIFICATION	1.7381436853854327E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999957443739492	WITHOUT_CLASSIFICATION	4.255626050704317E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998393437618579	WITHOUT_CLASSIFICATION	1.6065623814207262E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999981181146927	WITHOUT_CLASSIFICATION	1.8818853072164107E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999975826645762	WITHOUT_CLASSIFICATION	2.417335423866023E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999776991291834	WITHOUT_CLASSIFICATION	2.230087081655055E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999995661449715	WITHOUT_CLASSIFICATION	4.338550285284301E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999995609774408	WITHOUT_CLASSIFICATION	4.3902255916273355E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998948868577	WITHOUT_CLASSIFICATION	1.0511314219253964E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998867664182	WITHOUT_CLASSIFICATION	1.1323358176234001E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999804554949	WITHOUT_CLASSIFICATION	1.954450510797675E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9997838652533243	WITHOUT_CLASSIFICATION	2.1613474667573932E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999987860478167	WITHOUT_CLASSIFICATION	1.2139521832970075E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999987860478167	WITHOUT_CLASSIFICATION	1.2139521832970075E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999995096480347	WITHOUT_CLASSIFICATION	4.90351965140282E-7	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999712573559156	WITHOUT_CLASSIFICATION	2.874264408442639E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999853180230843	WITHOUT_CLASSIFICATION	1.4681976915683543E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999692734791615	WITHOUT_CLASSIFICATION	3.0726520838461935E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999992774943581	WITHOUT_CLASSIFICATION	7.225056418645743E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9996710625681299	WITHOUT_CLASSIFICATION	3.28937431870063E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999934509474582	WITHOUT_CLASSIFICATION	6.549052541803342E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985037355236	WITHOUT_CLASSIFICATION	1.4962644763772865E-6	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999957146127558	WITHOUT_CLASSIFICATION	4.2853872441672665E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999935695235879	WITHOUT_CLASSIFICATION	6.430476412136578E-6	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999937476866	WITHOUT_CLASSIFICATION	6.252313482781695E-9	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997247294263	WITHOUT_CLASSIFICATION	2.7527057363543127E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999984398760962	WITHOUT_CLASSIFICATION	1.5601239038499195E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999916489958615	WITHOUT_CLASSIFICATION	8.351004138660077E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999991579776292	WITHOUT_CLASSIFICATION	8.420223707922137E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999976901314089	WITHOUT_CLASSIFICATION	2.3098685911028897E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999969772213174	WITHOUT_CLASSIFICATION	3.0227786825946214E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999978381178677	WITHOUT_CLASSIFICATION	2.1618821322952477E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999997239508557	WITHOUT_CLASSIFICATION	2.760491442401943E-7	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9986037073594475	WITHOUT_CLASSIFICATION	0.0013962926405525387	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999982956540907	WITHOUT_CLASSIFICATION	1.7043459093658082E-6	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999743377239985	WITHOUT_CLASSIFICATION	2.5662276001605884E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999993837700235	WITHOUT_CLASSIFICATION	6.162299765106554E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999490807715	WITHOUT_CLASSIFICATION	5.091922850796798E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999973903415288	WITHOUT_CLASSIFICATION	2.609658471276185E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999910112322627	WITHOUT_CLASSIFICATION	8.988767737258381E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997289204428	WITHOUT_CLASSIFICATION	2.7107955723284337E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999976700562487	WITHOUT_CLASSIFICATION	2.329943751236018E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999999465476119	WITHOUT_CLASSIFICATION	5.3452388114242383E-8	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999768513614271	WITHOUT_CLASSIFICATION	2.3148638572874807E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9997352476913018	WITHOUT_CLASSIFICATION	2.64752308698233E-4	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999869452210242	WITHOUT_CLASSIFICATION	1.3054778975873061E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999364603833766	WITHOUT_CLASSIFICATION	6.353961662349207E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999933171873007	WITHOUT_CLASSIFICATION	6.68281269930681E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999988346275415	WITHOUT_CLASSIFICATION	1.165372458490706E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999968599060048	WITHOUT_CLASSIFICATION	3.1400939952010375E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9996554208965841	WITHOUT_CLASSIFICATION	3.4457910341590374E-4	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999879370746007	WITHOUT_CLASSIFICATION	1.2062925399349574E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999991970137786	WITHOUT_CLASSIFICATION	8.029862213751198E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999886217142924	WITHOUT_CLASSIFICATION	1.1378285707547918E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999945274335439	WITHOUT_CLASSIFICATION	5.472566456141466E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999985966996717	WITHOUT_CLASSIFICATION	1.4033003282910502E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999669770456	WITHOUT_CLASSIFICATION	3.3022954392358594E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999513327795	WITHOUT_CLASSIFICATION	4.866722048917629E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999923558689835	WITHOUT_CLASSIFICATION	7.644131016485487E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998979911879	WITHOUT_CLASSIFICATION	1.0200881210983245E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966272979955	WITHOUT_CLASSIFICATION	3.3727020044497046E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991083678806	WITHOUT_CLASSIFICATION	8.916321193416954E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997643175061	WITHOUT_CLASSIFICATION	2.3568249390042864E-6	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999527307235	WITHOUT_CLASSIFICATION	4.7269276496685436E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999997697919344	WITHOUT_CLASSIFICATION	2.3020806560716887E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993840215716	WITHOUT_CLASSIFICATION	6.159784284879272E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999686675836	WITHOUT_CLASSIFICATION	3.133241637933886E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999989905879794	WITHOUT_CLASSIFICATION	1.0094120205724672E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978456339456	WITHOUT_CLASSIFICATION	2.154366054497017E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999989905879794	WITHOUT_CLASSIFICATION	1.0094120205724672E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998589623341013	WITHOUT_CLASSIFICATION	1.4103766589873247E-4	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999910889754303	WITHOUT_CLASSIFICATION	8.91102456980401E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999937940418968	WITHOUT_CLASSIFICATION	6.205958103174222E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994529493285	WITHOUT_CLASSIFICATION	5.470506715220667E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999965551968163	WITHOUT_CLASSIFICATION	3.444803183810162E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999994451234636	WITHOUT_CLASSIFICATION	5.5487653639362534E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999975457605936	WITHOUT_CLASSIFICATION	2.45423940642897E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999982963839301	WITHOUT_CLASSIFICATION	1.7036160699587094E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999532882745	WITHOUT_CLASSIFICATION	4.6711725443595916E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999999923263644	WITHOUT_CLASSIFICATION	7.67363557974304E-9	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999936147580428	WITHOUT_CLASSIFICATION	6.385241957145626E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999994112015147	WITHOUT_CLASSIFICATION	5.887984853448079E-7	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999277018265924	WITHOUT_CLASSIFICATION	7.229817340761774E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999996787978047	WITHOUT_CLASSIFICATION	3.2120219529206285E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999995829436946	WITHOUT_CLASSIFICATION	4.1705630538645645E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999993570159215	WITHOUT_CLASSIFICATION	6.429840786471279E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999621554520973	WITHOUT_CLASSIFICATION	3.784454790275229E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999621554520973	WITHOUT_CLASSIFICATION	3.784454790275229E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999962226107711	WITHOUT_CLASSIFICATION	3.7773892288215626E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999971419883109	WITHOUT_CLASSIFICATION	2.858011689151303E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999993968300596	WITHOUT_CLASSIFICATION	6.03169940467518E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997856760657	WITHOUT_CLASSIFICATION	2.1432393440290248E-7	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999851012224	WITHOUT_CLASSIFICATION	1.489877759880446E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999987027769952	WITHOUT_CLASSIFICATION	1.2972230047657924E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999998750665535	WITHOUT_CLASSIFICATION	1.2493344647087054E-7	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999990811560923	WITHOUT_CLASSIFICATION	9.188439077029976E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999983771566517	WITHOUT_CLASSIFICATION	1.622843348216912E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999935980697734	WITHOUT_CLASSIFICATION	6.401930226573413E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999977798973775	WITHOUT_CLASSIFICATION	2.220102622540975E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999823539317	WITHOUT_CLASSIFICATION	1.764606830576569E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999997859342945	WITHOUT_CLASSIFICATION	2.140657054015436E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999998570088275	WITHOUT_CLASSIFICATION	1.4299117250228751E-6	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997152033503	WITHOUT_CLASSIFICATION	2.847966496830173E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997525592255	WITHOUT_CLASSIFICATION	2.474407745571962E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999954632019064	WITHOUT_CLASSIFICATION	4.5367980936251375E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999952503453788	WITHOUT_CLASSIFICATION	4.749654621182474E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.999994219284644	WITHOUT_CLASSIFICATION	5.780715356037042E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999995652324329	WITHOUT_CLASSIFICATION	4.3476756700310245E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999779211403478	WITHOUT_CLASSIFICATION	2.207885965228442E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999995650322409	WITHOUT_CLASSIFICATION	4.349677591457426E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996825935337	WITHOUT_CLASSIFICATION	3.1740646631624777E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999952059545476	WITHOUT_CLASSIFICATION	4.794045452386254E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999941978913564	WITHOUT_CLASSIFICATION	5.802108643674863E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999944344793303	WITHOUT_CLASSIFICATION	5.5655206696030915E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999978520382751	WITHOUT_CLASSIFICATION	2.1479617249942952E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999830769473659	WITHOUT_CLASSIFICATION	1.6923052634048935E-5	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999640966788305	WITHOUT_CLASSIFICATION	3.590332116944264E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999941950971862	WITHOUT_CLASSIFICATION	5.8049028137878245E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999999106612468	WITHOUT_CLASSIFICATION	8.933875319824945E-7	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999995541078539	WITHOUT_CLASSIFICATION	4.458921460052196E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999761680442671	WITHOUT_CLASSIFICATION	2.3831955732844305E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999985997399049	WITHOUT_CLASSIFICATION	1.4002600950848205E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999908599716343	WITHOUT_CLASSIFICATION	9.140028365688191E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992274234762	WITHOUT_CLASSIFICATION	7.725765236520381E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.99999742727486	WITHOUT_CLASSIFICATION	2.5727251400536486E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999821580604512	WITHOUT_CLASSIFICATION	1.7841939548804352E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999996182630921	WITHOUT_CLASSIFICATION	3.8173690787298925E-7	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999994507525084	WITHOUT_CLASSIFICATION	5.492474916994198E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999989458275673	WITHOUT_CLASSIFICATION	1.0541724327137116E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995010103776	WITHOUT_CLASSIFICATION	4.989896224018595E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999856447228174	WITHOUT_CLASSIFICATION	1.4355277182703977E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999999147385511	WITHOUT_CLASSIFICATION	8.526144890134897E-7	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999111817134	WITHOUT_CLASSIFICATION	8.881828661866052E-8	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999998044050876	WITHOUT_CLASSIFICATION	1.9559491227718777E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999332005384	WITHOUT_CLASSIFICATION	6.679946157322078E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999853180836012	WITHOUT_CLASSIFICATION	1.4681916398758962E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999867014712079	WITHOUT_CLASSIFICATION	1.329852879214406E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999998997730889	WITHOUT_CLASSIFICATION	1.002269111008991E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988898293563	WITHOUT_CLASSIFICATION	1.110170643732407E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999705857710165	WITHOUT_CLASSIFICATION	2.941422898354568E-5	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996270418344	WITHOUT_CLASSIFICATION	3.729581655999173E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999949571936552	WITHOUT_CLASSIFICATION	5.042806344847223E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999854861745291	WITHOUT_CLASSIFICATION	1.4513825470908292E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999962288233241	WITHOUT_CLASSIFICATION	3.7711766759309576E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999962288233241	WITHOUT_CLASSIFICATION	3.7711766759309576E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996914420397	WITHOUT_CLASSIFICATION	3.0855796033316343E-7	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999983927601101	WITHOUT_CLASSIFICATION	1.607239889898569E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999892790682564	WITHOUT_CLASSIFICATION	1.0720931743694224E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999991229718078	WITHOUT_CLASSIFICATION	8.770281921755547E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998569650125	WITHOUT_CLASSIFICATION	1.430349875234682E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999960833285936	WITHOUT_CLASSIFICATION	3.916671406371566E-6	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999986829628142	WITHOUT_CLASSIFICATION	1.317037185720449E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999981092791188	WITHOUT_CLASSIFICATION	1.8907208812319102E-6	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999570003433901	WITHOUT_CLASSIFICATION	4.2999656609914585E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.99999967285945	WITHOUT_CLASSIFICATION	3.2714055003071007E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999925705721432	WITHOUT_CLASSIFICATION	7.429427856866588E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999891208028787	WITHOUT_CLASSIFICATION	1.087919712131027E-5	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998988388460218	WITHOUT_CLASSIFICATION	1.0116115397825753E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999969563370243	WITHOUT_CLASSIFICATION	3.043662975545125E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999681779095357	WITHOUT_CLASSIFICATION	3.182209046423534E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999973336970729	WITHOUT_CLASSIFICATION	2.6663029270213214E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999996849965762	WITHOUT_CLASSIFICATION	3.150034237997492E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999107562564071	WITHOUT_CLASSIFICATION	8.924374359289512E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999863895426578	WITHOUT_CLASSIFICATION	1.3610457342154682E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999859207866673	WITHOUT_CLASSIFICATION	1.4079213332725222E-5	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999998369547501	WITHOUT_CLASSIFICATION	1.630452497292055E-7	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999935421863955	WITHOUT_CLASSIFICATION	6.457813604545809E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999155299375558	WITHOUT_CLASSIFICATION	8.447006244418666E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999448577527	WITHOUT_CLASSIFICATION	5.5142247436766975E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999616807841	WITHOUT_CLASSIFICATION	3.831921601224665E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999999856125986	WITHOUT_CLASSIFICATION	1.438740134171296E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999990950288168	WITHOUT_CLASSIFICATION	9.04971183236033E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998491607957581	WITHOUT_CLASSIFICATION	1.5083920424196348E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999890786430198	WITHOUT_CLASSIFICATION	1.0921356980167436E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999155299375558	WITHOUT_CLASSIFICATION	8.447006244418666E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999989169051462	WITHOUT_CLASSIFICATION	1.0830948537153565E-6	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999968059774	WITHOUT_CLASSIFICATION	3.194022581934548E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9996624037627686	WITHOUT_CLASSIFICATION	3.375962372314209E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999813803901938	WITHOUT_CLASSIFICATION	1.8619609806173364E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996240202952	WITHOUT_CLASSIFICATION	3.7597970488707203E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999995227173515	WITHOUT_CLASSIFICATION	4.772826485074593E-6	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997552956248	WITHOUT_CLASSIFICATION	2.4470437523764605E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999983223418253	WITHOUT_CLASSIFICATION	1.6776581747867017E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999846853445932	WITHOUT_CLASSIFICATION	1.5314655406743105E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999813803901938	WITHOUT_CLASSIFICATION	1.8619609806173364E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999996641935404	WITHOUT_CLASSIFICATION	3.358064596134759E-7	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999984179266773	WITHOUT_CLASSIFICATION	1.582073322686272E-6	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999990399101226	WITHOUT_CLASSIFICATION	9.600898774625392E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999148118985014	WITHOUT_CLASSIFICATION	8.51881014986312E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999981122494274	WITHOUT_CLASSIFICATION	1.88775057263959E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999977798973775	WITHOUT_CLASSIFICATION	2.220102622540975E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999444018352	WITHOUT_CLASSIFICATION	5.559816480273855E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999991570963332	WITHOUT_CLASSIFICATION	8.429036666893693E-7	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999994853016618	WITHOUT_CLASSIFICATION	5.146983380870723E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999983517548383	WITHOUT_CLASSIFICATION	1.6482451616476346E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999840142382466	WITHOUT_CLASSIFICATION	1.5985761753384367E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999677495088645	WITHOUT_CLASSIFICATION	3.2250491135461386E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999816366788975	WITHOUT_CLASSIFICATION	1.8363321102463876E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999967331374019	WITHOUT_CLASSIFICATION	3.266862598106283E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999582968903518	WITHOUT_CLASSIFICATION	4.17031096482982E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999785131992526	WITHOUT_CLASSIFICATION	2.1486800747433544E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998426856889995	WITHOUT_CLASSIFICATION	1.573143110005011E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998889006184	WITHOUT_CLASSIFICATION	1.1109938156727774E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997924140686	WITHOUT_CLASSIFICATION	2.0758593139706417E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999970185677922	WITHOUT_CLASSIFICATION	2.9814322078838653E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999994283984986	WITHOUT_CLASSIFICATION	5.716015013707473E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.99999762324679	WITHOUT_CLASSIFICATION	2.376753209961851E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999998519984731	WITHOUT_CLASSIFICATION	1.480015269416381E-7	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999999074380077	WITHOUT_CLASSIFICATION	9.256199230052551E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999984730663549	WITHOUT_CLASSIFICATION	1.5269336450013562E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999936616372076	WITHOUT_CLASSIFICATION	6.338362792324442E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999618372077023	WITHOUT_CLASSIFICATION	3.816279229783667E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999932998117002	WITHOUT_CLASSIFICATION	6.700188299859779E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999927982878741	WITHOUT_CLASSIFICATION	7.201712125926579E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999970397546171	WITHOUT_CLASSIFICATION	2.9602453830421636E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999986722034733	WITHOUT_CLASSIFICATION	1.327796526691836E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9998794101765928	WITHOUT_CLASSIFICATION	1.2058982340717286E-4	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999991781270994	WITHOUT_CLASSIFICATION	8.21872900660061E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998573560828	WITHOUT_CLASSIFICATION	1.426439171922263E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995546079988	WITHOUT_CLASSIFICATION	4.4539200111014626E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999988642487861	WITHOUT_CLASSIFICATION	1.1357512138290688E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999781888478819	WITHOUT_CLASSIFICATION	2.18111521180668E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999995587654779	WITHOUT_CLASSIFICATION	4.4123452215218983E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999593429673	WITHOUT_CLASSIFICATION	4.0657032699590517E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999951360769044	WITHOUT_CLASSIFICATION	4.863923095642722E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999981847747499	WITHOUT_CLASSIFICATION	1.8152252501411008E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999963093617672	WITHOUT_CLASSIFICATION	3.690638232758492E-6	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999995161617062	WITHOUT_CLASSIFICATION	4.838382937908619E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999970503034633	WITHOUT_CLASSIFICATION	2.949696536661559E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999993916388477	WITHOUT_CLASSIFICATION	6.083611522921129E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999989681840445	WITHOUT_CLASSIFICATION	1.031815955417698E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999989673249092	WITHOUT_CLASSIFICATION	1.0326750907439428E-6	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996252176772	WITHOUT_CLASSIFICATION	3.747823228432537E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999956774207986	WITHOUT_CLASSIFICATION	4.32257920132437E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999975068190337	WITHOUT_CLASSIFICATION	2.4931809663509426E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999860436803201	WITHOUT_CLASSIFICATION	1.3956319679872372E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999966524438613	WITHOUT_CLASSIFICATION	3.3475561387750147E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999996714672714	WITHOUT_CLASSIFICATION	3.285327286003103E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999971683794683	WITHOUT_CLASSIFICATION	2.8316205316651036E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999996037507763	WITHOUT_CLASSIFICATION	3.962492236080101E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999959341443184	WITHOUT_CLASSIFICATION	4.065855681550697E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999997844166352	WITHOUT_CLASSIFICATION	2.1558336480983627E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999326248592	WITHOUT_CLASSIFICATION	6.737514077949929E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999999383330419	WITHOUT_CLASSIFICATION	6.166695809867159E-7	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999997835442353	WITHOUT_CLASSIFICATION	2.164557646948215E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999936441551232	WITHOUT_CLASSIFICATION	6.355844876796255E-6	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999756896216784	WITHOUT_CLASSIFICATION	2.4310378321599298E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998573560828	WITHOUT_CLASSIFICATION	1.426439171922263E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998896126332	WITHOUT_CLASSIFICATION	1.103873667916287E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.99999941179441	WITHOUT_CLASSIFICATION	5.88205590007026E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999947913872197	WITHOUT_CLASSIFICATION	5.208612780353349E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999985295639138	WITHOUT_CLASSIFICATION	1.4704360863130945E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999993304992068	WITHOUT_CLASSIFICATION	6.695007932905458E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999993814780621	WITHOUT_CLASSIFICATION	6.185219379158593E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996649665669	WITHOUT_CLASSIFICATION	3.3503343307737865E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998920385207	WITHOUT_CLASSIFICATION	1.0796147929943921E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999973259259187	WITHOUT_CLASSIFICATION	2.674074081203351E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999995491284731	WITHOUT_CLASSIFICATION	4.508715268466451E-7	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998456049654	WITHOUT_CLASSIFICATION	1.5439503464779308E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997205187520908	WITHOUT_CLASSIFICATION	2.7948124790924797E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999929787624117	WITHOUT_CLASSIFICATION	7.0212375884436345E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999987782669149	WITHOUT_CLASSIFICATION	1.2217330852190537E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998589623341013	WITHOUT_CLASSIFICATION	1.4103766589873247E-4	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998086591321	WITHOUT_CLASSIFICATION	1.913408678855427E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999992533709592	WITHOUT_CLASSIFICATION	7.466290407255389E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999997433913455	WITHOUT_CLASSIFICATION	2.566086545247183E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999996415396241	WITHOUT_CLASSIFICATION	3.5846037591204783E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996550070034	WITHOUT_CLASSIFICATION	3.4499299667900033E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999844855051359	WITHOUT_CLASSIFICATION	1.5514494864184255E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999844855051359	WITHOUT_CLASSIFICATION	1.5514494864184255E-5	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999992968258186	WITHOUT_CLASSIFICATION	7.031741814126498E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999997952869886	WITHOUT_CLASSIFICATION	2.0471301143617803E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999996386817948	WITHOUT_CLASSIFICATION	3.613182052700464E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999983231177371	WITHOUT_CLASSIFICATION	1.6768822628922637E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999988271524263	WITHOUT_CLASSIFICATION	1.1728475737168416E-6	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999981638032357	WITHOUT_CLASSIFICATION	1.836196764198126E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999972443681313	WITHOUT_CLASSIFICATION	2.7556318686925455E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998884391088	WITHOUT_CLASSIFICATION	1.1156089124196209E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998884391088	WITHOUT_CLASSIFICATION	1.1156089124196209E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999990567652481	WITHOUT_CLASSIFICATION	9.432347518954827E-7	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999950486040386	WITHOUT_CLASSIFICATION	4.951395961271979E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999999358639773	WITHOUT_CLASSIFICATION	6.413602269904908E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970727180224	WITHOUT_CLASSIFICATION	2.9272819775670747E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970727180224	WITHOUT_CLASSIFICATION	2.9272819775670747E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970727180224	WITHOUT_CLASSIFICATION	2.9272819775670747E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999975231916299	WITHOUT_CLASSIFICATION	2.4768083699955842E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999995034537805	WITHOUT_CLASSIFICATION	4.965462195525249E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999992345921566	WITHOUT_CLASSIFICATION	7.654078433822518E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999971075699916	WITHOUT_CLASSIFICATION	2.8924300083851743E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999913476341569	WITHOUT_CLASSIFICATION	8.652365843227206E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999997559774813	WITHOUT_CLASSIFICATION	2.4402251875259366E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999800432398	WITHOUT_CLASSIFICATION	1.995676022091351E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999990825715359	WITHOUT_CLASSIFICATION	9.174284640976822E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999996412201791	WITHOUT_CLASSIFICATION	3.587798209266078E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999970412972733	WITHOUT_CLASSIFICATION	2.958702726656727E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999991535525629	WITHOUT_CLASSIFICATION	8.464474372567159E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999890662779025	WITHOUT_CLASSIFICATION	1.0933722097425879E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999977732344307	WITHOUT_CLASSIFICATION	2.2267655692277823E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999997241269772	WITHOUT_CLASSIFICATION	2.758730227952538E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999928400471286	WITHOUT_CLASSIFICATION	7.1599528713932815E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999866485477262	WITHOUT_CLASSIFICATION	1.3351452273656431E-5	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999549251679203	WITHOUT_CLASSIFICATION	4.5074832079728126E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999549251679203	WITHOUT_CLASSIFICATION	4.5074832079728126E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999634871048926	WITHOUT_CLASSIFICATION	3.651289510744625E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999634871048926	WITHOUT_CLASSIFICATION	3.651289510744625E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999963729342963	WITHOUT_CLASSIFICATION	3.6270657037017685E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999567754291924	WITHOUT_CLASSIFICATION	4.3224570807682186E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999567754291924	WITHOUT_CLASSIFICATION	4.3224570807682186E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999478236383399	WITHOUT_CLASSIFICATION	5.2176361660026156E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999316247082967	WITHOUT_CLASSIFICATION	6.837529170331785E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988987145806	WITHOUT_CLASSIFICATION	1.101285419400245E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999844855051359	WITHOUT_CLASSIFICATION	1.5514494864184255E-5	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999982726692342	WITHOUT_CLASSIFICATION	1.72733076586351E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999316247082967	WITHOUT_CLASSIFICATION	6.837529170331785E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999796978690981	WITHOUT_CLASSIFICATION	2.0302130901903737E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999973506492582	WITHOUT_CLASSIFICATION	2.649350741796885E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999718049028162	WITHOUT_CLASSIFICATION	2.819509718377973E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999868006273435	WITHOUT_CLASSIFICATION	1.3199372656568503E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996415805777	WITHOUT_CLASSIFICATION	3.584194221762269E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999054049321369	WITHOUT_CLASSIFICATION	9.45950678632503E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999997889777996	WITHOUT_CLASSIFICATION	2.1102220029098123E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999988881976751	WITHOUT_CLASSIFICATION	1.1118023248516608E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999571579995926	WITHOUT_CLASSIFICATION	4.2842000407364064E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999283869434	WITHOUT_CLASSIFICATION	7.161305659236006E-8	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999984155627509	WITHOUT_CLASSIFICATION	1.5844372491231289E-6	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999918133079584	WITHOUT_CLASSIFICATION	8.186692041708511E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999965700177812	WITHOUT_CLASSIFICATION	3.4299822188526546E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999936113873673	WITHOUT_CLASSIFICATION	6.388612632588023E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999120887051	WITHOUT_CLASSIFICATION	8.79112948834263E-8	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999988266894979	WITHOUT_CLASSIFICATION	1.1733105021309202E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999994054522975	WITHOUT_CLASSIFICATION	5.945477024725611E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999974844254153	WITHOUT_CLASSIFICATION	2.515574584753201E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999974844254153	WITHOUT_CLASSIFICATION	2.515574584753201E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999987264886205	WITHOUT_CLASSIFICATION	1.2735113794983518E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999993002792168	WITHOUT_CLASSIFICATION	6.997207831166107E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999996364252231	WITHOUT_CLASSIFICATION	3.6357477690415175E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999998229627852	WITHOUT_CLASSIFICATION	1.7703721480087755E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999919711306325	WITHOUT_CLASSIFICATION	8.028869367478394E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998449249079	WITHOUT_CLASSIFICATION	1.550750920239334E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999997706387104	WITHOUT_CLASSIFICATION	2.293612897328212E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999988252843119	WITHOUT_CLASSIFICATION	1.174715687956087E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999439345989382	WITHOUT_CLASSIFICATION	5.6065401061836085E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999997531454044	WITHOUT_CLASSIFICATION	2.4685459559095335E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999988990042302	WITHOUT_CLASSIFICATION	1.100995769765881E-6	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997205187520908	WITHOUT_CLASSIFICATION	2.7948124790924797E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997321542828	WITHOUT_CLASSIFICATION	2.6784571712243277E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999993471537602	WITHOUT_CLASSIFICATION	6.528462398400702E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999998795799162	WITHOUT_CLASSIFICATION	1.2042008380273182E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999996638785042	WITHOUT_CLASSIFICATION	3.361214958002465E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986989376058	WITHOUT_CLASSIFICATION	1.3010623940889733E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986989376058	WITHOUT_CLASSIFICATION	1.3010623940889733E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999878547246329	WITHOUT_CLASSIFICATION	1.2145275366991086E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999992974063506	WITHOUT_CLASSIFICATION	7.025936493963172E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999982762660835	WITHOUT_CLASSIFICATION	1.7237339165127784E-6	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999988145676827	WITHOUT_CLASSIFICATION	1.185432317349245E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999951800337598	WITHOUT_CLASSIFICATION	4.819966240233625E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999909961465784	WITHOUT_CLASSIFICATION	9.003853421685685E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999974598806223	WITHOUT_CLASSIFICATION	2.540119377691595E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999990448808079	WITHOUT_CLASSIFICATION	9.551191920689897E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999992496003756	WITHOUT_CLASSIFICATION	7.503996245780562E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996255144976	WITHOUT_CLASSIFICATION	3.7448550244417624E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999987124995727	WITHOUT_CLASSIFICATION	1.28750042734043E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999990448808079	WITHOUT_CLASSIFICATION	9.551191920689897E-7	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999058887022	WITHOUT_CLASSIFICATION	9.411129764645402E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999985648743175	WITHOUT_CLASSIFICATION	1.4351256824588695E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999663910735	WITHOUT_CLASSIFICATION	3.360892649852949E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999990361913874	WITHOUT_CLASSIFICATION	9.638086125140775E-7	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999996865454744	WITHOUT_CLASSIFICATION	3.13454525490441E-7	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999711903195	WITHOUT_CLASSIFICATION	2.8809680583293402E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999987384449077	WITHOUT_CLASSIFICATION	1.2615550923565906E-6	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999915914724545	WITHOUT_CLASSIFICATION	8.408527545562264E-6	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999983401024314	WITHOUT_CLASSIFICATION	1.6598975686340718E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999051644689	WITHOUT_CLASSIFICATION	9.483553110555676E-7	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999983897317702	WITHOUT_CLASSIFICATION	1.6102682296577115E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999996050787674	WITHOUT_CLASSIFICATION	3.949212327059554E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999994761028296	WITHOUT_CLASSIFICATION	5.23897170527608E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999965543892659	WITHOUT_CLASSIFICATION	3.445610734015925E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999985817286471	WITHOUT_CLASSIFICATION	1.4182713528348347E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999997075023592	WITHOUT_CLASSIFICATION	2.9249764075845603E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999993705097426	WITHOUT_CLASSIFICATION	6.294902572756041E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999997030803489	WITHOUT_CLASSIFICATION	2.969196510023738E-7	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999995654671764	WITHOUT_CLASSIFICATION	4.3453282350946484E-7	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999989654647654	WITHOUT_CLASSIFICATION	1.0345352345335733E-6	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997666770027	WITHOUT_CLASSIFICATION	2.3332299721343806E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999948752371999	WITHOUT_CLASSIFICATION	5.1247628001231385E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999968439775323	WITHOUT_CLASSIFICATION	3.1560224675656103E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999777329214592	WITHOUT_CLASSIFICATION	2.22670785407487E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999612466743	WITHOUT_CLASSIFICATION	3.875332571051287E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999943266783866	WITHOUT_CLASSIFICATION	5.6733216134343796E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999996853968584	WITHOUT_CLASSIFICATION	3.146031416756516E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999997801849722	WITHOUT_CLASSIFICATION	2.1981502782823602E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999044448882	WITHOUT_CLASSIFICATION	9.55551118505371E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999796168323225	WITHOUT_CLASSIFICATION	2.0383167677430234E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999886376044	WITHOUT_CLASSIFICATION	1.1362395595223214E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999972125782809	WITHOUT_CLASSIFICATION	2.7874217191415027E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999996330680929	WITHOUT_CLASSIFICATION	3.6693190702783986E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998535889747	WITHOUT_CLASSIFICATION	1.4641102523982858E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997509711913	WITHOUT_CLASSIFICATION	2.4902880870353605E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998859502184	WITHOUT_CLASSIFICATION	1.1404978167252036E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999991346008769	WITHOUT_CLASSIFICATION	8.653991232360093E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999976003953573	WITHOUT_CLASSIFICATION	2.399604642560153E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999992345841288	WITHOUT_CLASSIFICATION	7.654158711904247E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999987815442312	WITHOUT_CLASSIFICATION	1.218455768855839E-6	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998763568886	WITHOUT_CLASSIFICATION	1.2364311146632642E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999992940760493	WITHOUT_CLASSIFICATION	7.059239506263289E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999511181047	WITHOUT_CLASSIFICATION	4.888189536048624E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999982832837275	WITHOUT_CLASSIFICATION	1.7167162724933524E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999992913100453	WITHOUT_CLASSIFICATION	7.086899547549457E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994140709534	WITHOUT_CLASSIFICATION	5.859290467369065E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999983281945187	WITHOUT_CLASSIFICATION	1.6718054813146038E-6	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999987138941863	WITHOUT_CLASSIFICATION	1.2861058137378767E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999895928441744	WITHOUT_CLASSIFICATION	1.0407155825507065E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999930739179893	WITHOUT_CLASSIFICATION	6.926082010736831E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979545201979	WITHOUT_CLASSIFICATION	2.0454798021293952E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999999788233012	WITHOUT_CLASSIFICATION	2.1176698799670422E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999994051983638	WITHOUT_CLASSIFICATION	5.948016361786546E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999992031635287	WITHOUT_CLASSIFICATION	7.96836471352215E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999124468744	WITHOUT_CLASSIFICATION	8.755312553437284E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999988648996018	WITHOUT_CLASSIFICATION	1.1351003982385765E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999973012100022	WITHOUT_CLASSIFICATION	2.6987899978600907E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998809010483	WITHOUT_CLASSIFICATION	1.1909895164422132E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999993498249169	WITHOUT_CLASSIFICATION	6.501750831348533E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999998116461712	WITHOUT_CLASSIFICATION	1.8835382879033243E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999973244664342	WITHOUT_CLASSIFICATION	2.6755335658685E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996464440093	WITHOUT_CLASSIFICATION	3.535559907448258E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999971378164155	WITHOUT_CLASSIFICATION	2.862183584594354E-6	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999998560277644	WITHOUT_CLASSIFICATION	1.439722354716338E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999983585865876	WITHOUT_CLASSIFICATION	1.641413412442026E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999955816849568	WITHOUT_CLASSIFICATION	4.418315043095095E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979545201979	WITHOUT_CLASSIFICATION	2.0454798021293952E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999991417901635	WITHOUT_CLASSIFICATION	8.582098364245331E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999962942110917	WITHOUT_CLASSIFICATION	3.7057889082683148E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999977684909627	WITHOUT_CLASSIFICATION	2.2315090373490498E-6	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999032417262	WITHOUT_CLASSIFICATION	9.67582737638886E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.99999987064323	WITHOUT_CLASSIFICATION	1.293567699879868E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999999851550619	WITHOUT_CLASSIFICATION	1.4844938103857972E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999992496003756	WITHOUT_CLASSIFICATION	7.503996245780562E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998709054747	WITHOUT_CLASSIFICATION	1.2909452535355516E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997509711913	WITHOUT_CLASSIFICATION	2.4902880870353605E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999986303968657	WITHOUT_CLASSIFICATION	1.369603134403064E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999991991385557	WITHOUT_CLASSIFICATION	8.008614442499259E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999993712017281	WITHOUT_CLASSIFICATION	6.287982719294873E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999993443523612	WITHOUT_CLASSIFICATION	6.556476388148219E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999998793692815	WITHOUT_CLASSIFICATION	1.2063071850509417E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999999222850138	WITHOUT_CLASSIFICATION	7.77149862488549E-8	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999944298710141	WITHOUT_CLASSIFICATION	5.570128985838429E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999966350322441	WITHOUT_CLASSIFICATION	3.364967755964848E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999981841908032	WITHOUT_CLASSIFICATION	1.8158091967988585E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999984205906697	WITHOUT_CLASSIFICATION	1.5794093304192788E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999969191794558	WITHOUT_CLASSIFICATION	3.080820544242677E-6	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999975629916857	WITHOUT_CLASSIFICATION	2.437008314228033E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999989760860106	WITHOUT_CLASSIFICATION	1.0239139893853065E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999989760860106	WITHOUT_CLASSIFICATION	1.0239139893853065E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998324640288	WITHOUT_CLASSIFICATION	1.6753597119325472E-7	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999814436179881	WITHOUT_CLASSIFICATION	1.8556382011883796E-5	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999265269885	WITHOUT_CLASSIFICATION	7.347301145429434E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999998670805805	WITHOUT_CLASSIFICATION	1.3291941944865333E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999992855514255	WITHOUT_CLASSIFICATION	7.144485745305396E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999974018068772	WITHOUT_CLASSIFICATION	2.5981931228301382E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.99999995007296	WITHOUT_CLASSIFICATION	4.9927039922829535E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999989701384387	WITHOUT_CLASSIFICATION	1.0298615612468772E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999190436728	WITHOUT_CLASSIFICATION	8.095632726233159E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999993189539057	WITHOUT_CLASSIFICATION	6.810460942640263E-7	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999989694180923	WITHOUT_CLASSIFICATION	1.0305819077785963E-6	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999993715736701	WITHOUT_CLASSIFICATION	6.284263299074623E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998045441052	WITHOUT_CLASSIFICATION	1.9545589481382967E-7	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999985949426	WITHOUT_CLASSIFICATION	1.4050574139139116E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999698699147	WITHOUT_CLASSIFICATION	3.01300853045028E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999996343116825	WITHOUT_CLASSIFICATION	3.6568831751069927E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999989269501119	WITHOUT_CLASSIFICATION	1.0730498881067652E-5	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999993866571351	WITHOUT_CLASSIFICATION	6.133428648624835E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999993758670648	WITHOUT_CLASSIFICATION	6.241329352808368E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999988966315835	WITHOUT_CLASSIFICATION	1.103368416589243E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999988565682016	WITHOUT_CLASSIFICATION	1.1434317982870464E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999982069484603	WITHOUT_CLASSIFICATION	1.7930515396758289E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.99999929711814	WITHOUT_CLASSIFICATION	7.028818601057291E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999086535957413	WITHOUT_CLASSIFICATION	9.134640425866046E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999980127684849	WITHOUT_CLASSIFICATION	1.9872315150499464E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999321032785	WITHOUT_CLASSIFICATION	6.789672150888421E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999973439913571	WITHOUT_CLASSIFICATION	2.6560086427959546E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999962058980602	WITHOUT_CLASSIFICATION	3.794101939861304E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999891072018228	WITHOUT_CLASSIFICATION	1.0892798177246589E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999486716069	WITHOUT_CLASSIFICATION	5.1328393203666204E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998919469593984	WITHOUT_CLASSIFICATION	1.0805304060155794E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999788306668335	WITHOUT_CLASSIFICATION	2.1169333166541003E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999496149303	WITHOUT_CLASSIFICATION	5.038506966305624E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999997668836895	WITHOUT_CLASSIFICATION	2.3311631053370595E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999986551103935	WITHOUT_CLASSIFICATION	1.3448896064455728E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997994485246	WITHOUT_CLASSIFICATION	2.005514754628284E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999806105957325	WITHOUT_CLASSIFICATION	1.9389404267491292E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999983440150898	WITHOUT_CLASSIFICATION	1.655984910187908E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999894300520379	WITHOUT_CLASSIFICATION	1.0569947962086575E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990390042401	WITHOUT_CLASSIFICATION	9.609957598527654E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956852381415	WITHOUT_CLASSIFICATION	4.314761858478054E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998175444906	WITHOUT_CLASSIFICATION	1.8245550926740282E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999440497213268	WITHOUT_CLASSIFICATION	5.5950278673172515E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999884166219157	WITHOUT_CLASSIFICATION	1.1583378084319536E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999972383547988	WITHOUT_CLASSIFICATION	2.761645201197039E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989963012056	WITHOUT_CLASSIFICATION	1.0036987944117286E-6	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9995932118754215	WITHOUT_CLASSIFICATION	4.0678812457857716E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999971847148469	WITHOUT_CLASSIFICATION	2.815285153049329E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999267337667	WITHOUT_CLASSIFICATION	7.326623324964742E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999990983183872	WITHOUT_CLASSIFICATION	9.016816127794333E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969068309266	WITHOUT_CLASSIFICATION	3.0931690734352418E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999996543882018	WITHOUT_CLASSIFICATION	3.4561179826691956E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999988305249121	WITHOUT_CLASSIFICATION	1.1694750878933571E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999973107539092	WITHOUT_CLASSIFICATION	2.6892460908868394E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999989169134736	WITHOUT_CLASSIFICATION	1.0830865263706551E-6	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999888232251	WITHOUT_CLASSIFICATION	1.1176774897354692E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999972821818	WITHOUT_CLASSIFICATION	2.717818200085422E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999910883806706	WITHOUT_CLASSIFICATION	8.911619329439902E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999945233151036	WITHOUT_CLASSIFICATION	5.47668489641698E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999980617437129	WITHOUT_CLASSIFICATION	1.9382562872477415E-6	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995202564373	WITHOUT_CLASSIFICATION	4.797435627593329E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999904459709555	WITHOUT_CLASSIFICATION	9.55402904447515E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999992974594327	WITHOUT_CLASSIFICATION	7.025405673006096E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999970737345669	WITHOUT_CLASSIFICATION	2.9262654330938908E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999989430965118	WITHOUT_CLASSIFICATION	1.0569034882283933E-6	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999959640072884	WITHOUT_CLASSIFICATION	4.035992711598117E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999735361040564	WITHOUT_CLASSIFICATION	2.6463895943632568E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999975209845966	WITHOUT_CLASSIFICATION	2.479015403289974E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.99999775203351	WITHOUT_CLASSIFICATION	2.247966489931788E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999997689707899	WITHOUT_CLASSIFICATION	2.3102921008787203E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.99999775203351	WITHOUT_CLASSIFICATION	2.247966489931788E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999994803694898	WITHOUT_CLASSIFICATION	5.196305101824188E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999992694254777	WITHOUT_CLASSIFICATION	7.305745222119591E-7	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999300973307	WITHOUT_CLASSIFICATION	6.990266930270558E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994182098713	WITHOUT_CLASSIFICATION	5.817901287150022E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999970223449471	WITHOUT_CLASSIFICATION	2.9776550528410697E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999990081273077	WITHOUT_CLASSIFICATION	9.918726923085028E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999988918602666	WITHOUT_CLASSIFICATION	1.108139733449204E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999975044329444	WITHOUT_CLASSIFICATION	2.495567055568564E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999997996229771	WITHOUT_CLASSIFICATION	2.0037702291791044E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999227281676	WITHOUT_CLASSIFICATION	7.727183241034001E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999978235228514	WITHOUT_CLASSIFICATION	2.176477148608795E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999993183342903	WITHOUT_CLASSIFICATION	6.816657095359859E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999972687693354	WITHOUT_CLASSIFICATION	2.7312306645854913E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999791540272	WITHOUT_CLASSIFICATION	2.0845972794089025E-8	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999977308744096	WITHOUT_CLASSIFICATION	2.2691255905296314E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999992516350683	WITHOUT_CLASSIFICATION	7.483649316373022E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999991255159493	WITHOUT_CLASSIFICATION	8.744840507940218E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999992551669349	WITHOUT_CLASSIFICATION	7.448330651829423E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999605241184	WITHOUT_CLASSIFICATION	3.9475881604885576E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999919302149236	WITHOUT_CLASSIFICATION	8.069785076275243E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999992626146088	WITHOUT_CLASSIFICATION	7.373853912226592E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999961324117589	WITHOUT_CLASSIFICATION	3.8675882410327845E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999983773613292	WITHOUT_CLASSIFICATION	1.6226386707880674E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999222258436	WITHOUT_CLASSIFICATION	7.777415649641244E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990179028208	WITHOUT_CLASSIFICATION	9.820971792411153E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999997631693148	WITHOUT_CLASSIFICATION	2.3683068512057324E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999626557792715	WITHOUT_CLASSIFICATION	3.734422072858222E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999803016109186	WITHOUT_CLASSIFICATION	1.969838908146768E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999992213479326	WITHOUT_CLASSIFICATION	7.78652067431755E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999150667827229	WITHOUT_CLASSIFICATION	8.493321727710085E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9998121016983285	WITHOUT_CLASSIFICATION	1.878983016714493E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999913904476	WITHOUT_CLASSIFICATION	8.60955238335703E-9	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999907470229	WITHOUT_CLASSIFICATION	9.252977097362016E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999988819170438	WITHOUT_CLASSIFICATION	1.118082956200189E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999985351012156	WITHOUT_CLASSIFICATION	1.4648987843598526E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999092731435516	WITHOUT_CLASSIFICATION	9.072685644835097E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999848847309348	WITHOUT_CLASSIFICATION	1.5115269065042138E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999991033970115	WITHOUT_CLASSIFICATION	8.966029885312135E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999657008070489	WITHOUT_CLASSIFICATION	3.42991929511286E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999962943368232	WITHOUT_CLASSIFICATION	3.705663176789049E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999977104732721	WITHOUT_CLASSIFICATION	2.28952672782319E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999884782475763	WITHOUT_CLASSIFICATION	1.1521752423593371E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998772788073	WITHOUT_CLASSIFICATION	1.2272119267018153E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999997631693148	WITHOUT_CLASSIFICATION	2.3683068512057324E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999934126272063	WITHOUT_CLASSIFICATION	6.587372793697441E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999990015275706	WITHOUT_CLASSIFICATION	9.984724294385997E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999995347118028	WITHOUT_CLASSIFICATION	4.652881972099122E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.99999153179685	WITHOUT_CLASSIFICATION	8.468203150028672E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999861778404889	WITHOUT_CLASSIFICATION	1.3822159511121479E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999987364600621	WITHOUT_CLASSIFICATION	1.2635399378682617E-6	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999976540338067	WITHOUT_CLASSIFICATION	2.3459661932615114E-6	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999794066270681	WITHOUT_CLASSIFICATION	2.0593372931973735E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999991109638656	WITHOUT_CLASSIFICATION	8.890361344080733E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999990272078897	WITHOUT_CLASSIFICATION	9.727921103786555E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999676166914813	WITHOUT_CLASSIFICATION	3.2383308518649245E-5	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996301523983	WITHOUT_CLASSIFICATION	3.698476016729667E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999951269667143	WITHOUT_CLASSIFICATION	4.873033285659144E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999900014539225	WITHOUT_CLASSIFICATION	9.998546077585352E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.99999708215284	WITHOUT_CLASSIFICATION	2.9178471600540303E-6	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999989094706144	WITHOUT_CLASSIFICATION	1.0905293856139938E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999928825966173	WITHOUT_CLASSIFICATION	7.117403382638362E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.99999563992232	WITHOUT_CLASSIFICATION	4.360077679977671E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999996790500798	WITHOUT_CLASSIFICATION	3.209499201113244E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999934126272063	WITHOUT_CLASSIFICATION	6.587372793697441E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999957070456018	WITHOUT_CLASSIFICATION	4.292954398177857E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997603018302	WITHOUT_CLASSIFICATION	2.396981697748389E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999984940017166	WITHOUT_CLASSIFICATION	1.5059982834192945E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999959432251314	WITHOUT_CLASSIFICATION	4.056774868583345E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999884682577391	WITHOUT_CLASSIFICATION	1.1531742260842807E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999849919679892	WITHOUT_CLASSIFICATION	1.50080320108055E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999849919679892	WITHOUT_CLASSIFICATION	1.50080320108055E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999208590329	WITHOUT_CLASSIFICATION	7.914096712263197E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999849919679892	WITHOUT_CLASSIFICATION	1.50080320108055E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999849919679892	WITHOUT_CLASSIFICATION	1.50080320108055E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999804774179386	WITHOUT_CLASSIFICATION	1.95225820613256E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999976879349739	WITHOUT_CLASSIFICATION	2.3120650261891406E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995281117546	WITHOUT_CLASSIFICATION	4.71888245321067E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999994680994657	WITHOUT_CLASSIFICATION	5.319005342200042E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999993774641228	WITHOUT_CLASSIFICATION	6.225358771916088E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999544251795	WITHOUT_CLASSIFICATION	4.5574820371355535E-8	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999954412587732	WITHOUT_CLASSIFICATION	4.558741226879319E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999959989431064	WITHOUT_CLASSIFICATION	4.0010568936421305E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999838595137108	WITHOUT_CLASSIFICATION	1.6140486289214935E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999794276232712	WITHOUT_CLASSIFICATION	2.057237672886745E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999989303820174	WITHOUT_CLASSIFICATION	1.0696179826937233E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999748599759847	WITHOUT_CLASSIFICATION	2.514002401528217E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999996534305713	WITHOUT_CLASSIFICATION	3.465694286954602E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999867584072164	WITHOUT_CLASSIFICATION	1.3241592783554025E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999953382057217	WITHOUT_CLASSIFICATION	4.6617942782922E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999778878930956	WITHOUT_CLASSIFICATION	2.21121069043624E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993840215716	WITHOUT_CLASSIFICATION	6.159784284879272E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999986067399141	WITHOUT_CLASSIFICATION	1.3932600859352851E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999952345639767	WITHOUT_CLASSIFICATION	4.765436023297039E-6	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999845993433939	WITHOUT_CLASSIFICATION	1.5400656606100025E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999962711373882	WITHOUT_CLASSIFICATION	3.7288626117439613E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999930187517	WITHOUT_CLASSIFICATION	6.981248300021316E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993840215716	WITHOUT_CLASSIFICATION	6.159784284879272E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999626557792715	WITHOUT_CLASSIFICATION	3.734422072858222E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999947813380525	WITHOUT_CLASSIFICATION	5.218661947421365E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999962004122842	WITHOUT_CLASSIFICATION	3.7995877158474315E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976899346182	WITHOUT_CLASSIFICATION	2.3100653817854535E-6	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999905144410387	WITHOUT_CLASSIFICATION	9.485558961333999E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999932517443479	WITHOUT_CLASSIFICATION	6.748255651998366E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999960076228752	WITHOUT_CLASSIFICATION	3.992377124778593E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999955238871467	WITHOUT_CLASSIFICATION	4.476112853245546E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999856531613283	WITHOUT_CLASSIFICATION	1.4346838671813306E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999981156155708	WITHOUT_CLASSIFICATION	1.8843844292053854E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999835457572562	WITHOUT_CLASSIFICATION	1.6454242743761834E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999987577667803	WITHOUT_CLASSIFICATION	1.2422332197380338E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999964072793311	WITHOUT_CLASSIFICATION	3.5927206688188136E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999869954219408	WITHOUT_CLASSIFICATION	1.300457805926147E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999980019047778	WITHOUT_CLASSIFICATION	1.998095222121009E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999130558435	WITHOUT_CLASSIFICATION	8.694415642377323E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999993165941556	WITHOUT_CLASSIFICATION	6.834058443110836E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999987120869716	WITHOUT_CLASSIFICATION	1.2879130284343968E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999996442533617	WITHOUT_CLASSIFICATION	3.557466381783034E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999996589894112	WITHOUT_CLASSIFICATION	3.4101058874471224E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999900307554359	WITHOUT_CLASSIFICATION	9.969244564080952E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999673296830118	WITHOUT_CLASSIFICATION	3.267031698815497E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999996597553208	WITHOUT_CLASSIFICATION	3.4024467931611345E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999856531613283	WITHOUT_CLASSIFICATION	1.4346838671813306E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999924862931093	WITHOUT_CLASSIFICATION	7.513706890679328E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999937094406952	WITHOUT_CLASSIFICATION	6.290559304746571E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999939848935233	WITHOUT_CLASSIFICATION	6.01510647670562E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999903824119276	WITHOUT_CLASSIFICATION	9.617588072449047E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987569139748	WITHOUT_CLASSIFICATION	1.2430860252505517E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999674958048862	WITHOUT_CLASSIFICATION	3.250419511388765E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999721073126162	WITHOUT_CLASSIFICATION	2.789268738386631E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999985167046642	WITHOUT_CLASSIFICATION	1.4832953357839715E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999504088733555	WITHOUT_CLASSIFICATION	4.959112664450022E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999633390216094	WITHOUT_CLASSIFICATION	3.666097839063942E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993840081505	WITHOUT_CLASSIFICATION	6.159918494425827E-7	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999962253433239	WITHOUT_CLASSIFICATION	3.774656676051627E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999825196286369	WITHOUT_CLASSIFICATION	1.748037136308193E-5	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999992394540445	WITHOUT_CLASSIFICATION	7.605459555192115E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999998496992684	WITHOUT_CLASSIFICATION	1.503007315972287E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999684157550145	WITHOUT_CLASSIFICATION	3.158424498556565E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993840081505	WITHOUT_CLASSIFICATION	6.159918494425827E-7	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999993838348984	WITHOUT_CLASSIFICATION	6.16165101654547E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999975464159151	WITHOUT_CLASSIFICATION	2.453584084855525E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999972522859734	WITHOUT_CLASSIFICATION	2.74771402664037E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999960664999564	WITHOUT_CLASSIFICATION	3.933500043593799E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999951475539741	WITHOUT_CLASSIFICATION	4.852446025921368E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999775152435	WITHOUT_CLASSIFICATION	2.2484756520461642E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999058942483	WITHOUT_CLASSIFICATION	9.410575180783007E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983780208179	WITHOUT_CLASSIFICATION	1.6219791821062012E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971497027593	WITHOUT_CLASSIFICATION	2.850297240753619E-6	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996205212862	WITHOUT_CLASSIFICATION	3.794787138077271E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991998732597	WITHOUT_CLASSIFICATION	8.001267403388061E-7	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987006337385	WITHOUT_CLASSIFICATION	1.2993662615045573E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998188533547	WITHOUT_CLASSIFICATION	1.8114664529676873E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998188533547	WITHOUT_CLASSIFICATION	1.8114664529676873E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999909595073888	WITHOUT_CLASSIFICATION	9.040492611259287E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999974794890025	WITHOUT_CLASSIFICATION	2.5205109975734225E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999975395041367	WITHOUT_CLASSIFICATION	2.46049586320624E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999997045859933	WITHOUT_CLASSIFICATION	2.954140067022259E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999987920185383	WITHOUT_CLASSIFICATION	1.2079814617821194E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923327061149	WITHOUT_CLASSIFICATION	7.667293885062287E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795895443914	WITHOUT_CLASSIFICATION	2.0410455608691592E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944008466272	WITHOUT_CLASSIFICATION	5.599153372780006E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999993717429976	WITHOUT_CLASSIFICATION	6.282570023782883E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947865002412	WITHOUT_CLASSIFICATION	5.213499758796827E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923327061149	WITHOUT_CLASSIFICATION	7.667293885062287E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795895443914	WITHOUT_CLASSIFICATION	2.0410455608691592E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944008466272	WITHOUT_CLASSIFICATION	5.599153372780006E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.999994216140735	WITHOUT_CLASSIFICATION	5.783859264913538E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999745114609103	WITHOUT_CLASSIFICATION	2.548853908965232E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999978698095338	WITHOUT_CLASSIFICATION	2.130190466275007E-6	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.99997268836935	WITHOUT_CLASSIFICATION	2.7311630649830826E-5	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999843629963578	WITHOUT_CLASSIFICATION	1.563700364213153E-5	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999576518332	WITHOUT_CLASSIFICATION	4.2348166739283815E-8	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999889722598665	WITHOUT_CLASSIFICATION	1.1027740133585909E-5	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999849753724401	WITHOUT_CLASSIFICATION	1.502462755985424E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9998800843211373	WITHOUT_CLASSIFICATION	1.1991567886280409E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999959962612501	WITHOUT_CLASSIFICATION	4.003738749792108E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999981635934335	WITHOUT_CLASSIFICATION	1.8364065664529216E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999990901490824	WITHOUT_CLASSIFICATION	9.098509175913076E-7	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.99999480012617	WITHOUT_CLASSIFICATION	5.199873829999525E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999995962731085	WITHOUT_CLASSIFICATION	4.037268914504007E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999993507313027	WITHOUT_CLASSIFICATION	6.492686972925794E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999847280598985	WITHOUT_CLASSIFICATION	1.527194010153007E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997861383550751	WITHOUT_CLASSIFICATION	2.138616449249945E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998413485345464	WITHOUT_CLASSIFICATION	1.5865146545362686E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999998278053237	WITHOUT_CLASSIFICATION	1.7219467629688786E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999822501837108	WITHOUT_CLASSIFICATION	1.7749816289209823E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999843718158383	WITHOUT_CLASSIFICATION	1.56281841616882E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999719728392	WITHOUT_CLASSIFICATION	2.802716085294997E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999986881467393	WITHOUT_CLASSIFICATION	1.3118532607052525E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999975206001233	WITHOUT_CLASSIFICATION	2.479399876640101E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999997318401923	WITHOUT_CLASSIFICATION	2.6815980778687786E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999584293014321	WITHOUT_CLASSIFICATION	4.15706985678783E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990737159714	WITHOUT_CLASSIFICATION	9.262840286040544E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612153443699	WITHOUT_CLASSIFICATION	3.8784655630086E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998819070127	WITHOUT_CLASSIFICATION	1.1809298735337783E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999329391711289	WITHOUT_CLASSIFICATION	6.70608288709924E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989866812754	WITHOUT_CLASSIFICATION	1.013318724599917E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999830646441668	WITHOUT_CLASSIFICATION	1.69353558332327E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999830646441668	WITHOUT_CLASSIFICATION	1.69353558332327E-5	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999772831577388	WITHOUT_CLASSIFICATION	2.2716842261182315E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999995501156201	WITHOUT_CLASSIFICATION	4.498843798417936E-7	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999952227616123	WITHOUT_CLASSIFICATION	4.777238387633792E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997205187520908	WITHOUT_CLASSIFICATION	2.7948124790924797E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999995768992062	WITHOUT_CLASSIFICATION	4.2310079390217256E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999877813163233	WITHOUT_CLASSIFICATION	1.2218683676679843E-5	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999184088373255	WITHOUT_CLASSIFICATION	8.15911626745111E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999965101175914	WITHOUT_CLASSIFICATION	3.4898824085602326E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999963270313414	WITHOUT_CLASSIFICATION	3.672968658465001E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974039011675	WITHOUT_CLASSIFICATION	2.596098832405301E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962733394903	WITHOUT_CLASSIFICATION	3.7266605097908463E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992025523792	WITHOUT_CLASSIFICATION	7.974476208909371E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973165244423	WITHOUT_CLASSIFICATION	2.6834755576708738E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986805655305	WITHOUT_CLASSIFICATION	1.3194344693748652E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991176504385	WITHOUT_CLASSIFICATION	8.823495616287662E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979263553292	WITHOUT_CLASSIFICATION	2.0736446708241685E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989771479663	WITHOUT_CLASSIFICATION	1.0228520337510725E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989890197026	WITHOUT_CLASSIFICATION	1.0109802973822447E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975205203655	WITHOUT_CLASSIFICATION	2.4794796344327764E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991136849211	WITHOUT_CLASSIFICATION	8.863150788347571E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998263875329	WITHOUT_CLASSIFICATION	1.7361246698683015E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999896091589286	WITHOUT_CLASSIFICATION	1.0390841071280195E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999955954436558	WITHOUT_CLASSIFICATION	4.404556344205734E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999986155052517	WITHOUT_CLASSIFICATION	1.3844947482534738E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996130202295	WITHOUT_CLASSIFICATION	3.8697977049444135E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.999989853307487	WITHOUT_CLASSIFICATION	1.014669251292729E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999994204780834	WITHOUT_CLASSIFICATION	5.795219165344259E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999924748202804	WITHOUT_CLASSIFICATION	7.52517971960242E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999955954436558	WITHOUT_CLASSIFICATION	4.404556344205734E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999955954436558	WITHOUT_CLASSIFICATION	4.404556344205734E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999938677686485	WITHOUT_CLASSIFICATION	6.1322313514489675E-6	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999962561260514	WITHOUT_CLASSIFICATION	3.743873948725639E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998199757593	WITHOUT_CLASSIFICATION	1.8002424079966959E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999990638268028	WITHOUT_CLASSIFICATION	9.361731970440962E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999965700177812	WITHOUT_CLASSIFICATION	3.4299822188526546E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999822501837108	WITHOUT_CLASSIFICATION	1.7749816289209823E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999934088266935	WITHOUT_CLASSIFICATION	6.591173306459046E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999931048774899	WITHOUT_CLASSIFICATION	6.895122510144392E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999968654650223	WITHOUT_CLASSIFICATION	3.1345349778242752E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986395531371	WITHOUT_CLASSIFICATION	1.3604468630228366E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999983223543552	WITHOUT_CLASSIFICATION	1.6776456448748286E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986791106644	WITHOUT_CLASSIFICATION	1.3208893355499506E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999989795369999	WITHOUT_CLASSIFICATION	1.0204630000984636E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999989795369999	WITHOUT_CLASSIFICATION	1.0204630000984636E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999976127403712	WITHOUT_CLASSIFICATION	2.387259628667638E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999976127403712	WITHOUT_CLASSIFICATION	2.387259628667638E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891107879337	WITHOUT_CLASSIFICATION	1.0889212066363844E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992293674538	WITHOUT_CLASSIFICATION	7.706325461969748E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999953825889093	WITHOUT_CLASSIFICATION	4.61741109071399E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866065207017	WITHOUT_CLASSIFICATION	1.3393479298279202E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999982900527958	WITHOUT_CLASSIFICATION	1.7099472042695607E-6	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999094881282	WITHOUT_CLASSIFICATION	9.051187176501634E-8	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994761731624	WITHOUT_CLASSIFICATION	5.238268375320818E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995389333722	WITHOUT_CLASSIFICATION	4.6106662777452754E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999995509880409	WITHOUT_CLASSIFICATION	4.490119590856344E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998626932965833	WITHOUT_CLASSIFICATION	1.373067034166796E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995591136571	WITHOUT_CLASSIFICATION	4.408863428884953E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999966974713007	WITHOUT_CLASSIFICATION	3.3025286993003305E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999849203164497	WITHOUT_CLASSIFICATION	1.5079683550305408E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999982024036796	WITHOUT_CLASSIFICATION	1.7975963204506897E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999823571287304	WITHOUT_CLASSIFICATION	1.7642871269523997E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999976506459268	WITHOUT_CLASSIFICATION	2.349354073221839E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999976506459268	WITHOUT_CLASSIFICATION	2.349354073221839E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999695655716	WITHOUT_CLASSIFICATION	3.043442840851738E-8	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999997497699138	WITHOUT_CLASSIFICATION	2.5023008622388836E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999741241489	WITHOUT_CLASSIFICATION	2.5875851104744328E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999983927601101	WITHOUT_CLASSIFICATION	1.607239889898569E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985135987107	WITHOUT_CLASSIFICATION	1.4864012892334124E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954391638379	WITHOUT_CLASSIFICATION	4.560836162037075E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999994626839898	WITHOUT_CLASSIFICATION	5.373160102030939E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997521274264	WITHOUT_CLASSIFICATION	2.4787257361693864E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999996274295337	WITHOUT_CLASSIFICATION	3.7257046636351753E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999922696143	WITHOUT_CLASSIFICATION	7.730385698565217E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999248380905	WITHOUT_CLASSIFICATION	7.516190942769502E-8	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999999664217202	WITHOUT_CLASSIFICATION	3.3578279803075766E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985524671741	WITHOUT_CLASSIFICATION	1.4475328258862248E-6	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999802423048207	WITHOUT_CLASSIFICATION	1.9757695179278747E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999996992669387	WITHOUT_CLASSIFICATION	3.0073306130340905E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999849067407621	WITHOUT_CLASSIFICATION	1.5093259237925346E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999993200971361	WITHOUT_CLASSIFICATION	6.799028638193622E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999973183081439	WITHOUT_CLASSIFICATION	2.6816918561894205E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999977260548574	WITHOUT_CLASSIFICATION	2.2739451426794157E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999985574641252	WITHOUT_CLASSIFICATION	1.4425358746550767E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999986574698003	WITHOUT_CLASSIFICATION	1.3425301996275026E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999966626900928	WITHOUT_CLASSIFICATION	3.337309907261897E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988022577935	WITHOUT_CLASSIFICATION	1.1977422065232588E-6	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998148462111	WITHOUT_CLASSIFICATION	1.851537889216968E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999985492146627	WITHOUT_CLASSIFICATION	1.4507853373024321E-5	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999020528304673	WITHOUT_CLASSIFICATION	9.794716953266421E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999961255671022	WITHOUT_CLASSIFICATION	3.874432897864685E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999923169288313	WITHOUT_CLASSIFICATION	7.683071168711108E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999974734868	WITHOUT_CLASSIFICATION	2.5265131905790068E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999933171873007	WITHOUT_CLASSIFICATION	6.68281269930681E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999934847392	WITHOUT_CLASSIFICATION	6.5152607325850915E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999902654919324	WITHOUT_CLASSIFICATION	9.734508067587562E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999797327278162	WITHOUT_CLASSIFICATION	2.026727218389654E-5	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999998709802472	WITHOUT_CLASSIFICATION	1.2901975280984333E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999452680418184	WITHOUT_CLASSIFICATION	5.473195818164537E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999937471420628	WITHOUT_CLASSIFICATION	6.252857937274197E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999996849965762	WITHOUT_CLASSIFICATION	3.150034237997492E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999991462852339	WITHOUT_CLASSIFICATION	8.537147660605704E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998700054767	WITHOUT_CLASSIFICATION	1.2999452317615938E-7	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999959187439652	WITHOUT_CLASSIFICATION	4.081256034803013E-6	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999995051138623	WITHOUT_CLASSIFICATION	4.948861377732665E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999986317988079	WITHOUT_CLASSIFICATION	1.3682011921082427E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998119828319	WITHOUT_CLASSIFICATION	1.880171680116379E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999997792429235	WITHOUT_CLASSIFICATION	2.2075707646217927E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999990541431598	WITHOUT_CLASSIFICATION	9.458568401565819E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999934481022802	WITHOUT_CLASSIFICATION	6.551897719803528E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999031465546628	WITHOUT_CLASSIFICATION	9.685344533714836E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999621554520973	WITHOUT_CLASSIFICATION	3.784454790275229E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999989275009411	WITHOUT_CLASSIFICATION	1.072499058959832E-6	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9988220225888969	WITHOUT_CLASSIFICATION	0.0011779774111031608	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999864944305201	WITHOUT_CLASSIFICATION	1.3505569479909346E-5	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999888997812464	WITHOUT_CLASSIFICATION	1.1100218753703234E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999934676240823	WITHOUT_CLASSIFICATION	6.532375917784872E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999893288968433	WITHOUT_CLASSIFICATION	1.0671103156678144E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999984068234057	WITHOUT_CLASSIFICATION	1.5931765942714015E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999915620099508	WITHOUT_CLASSIFICATION	8.437990049141313E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998009288783011	WITHOUT_CLASSIFICATION	1.990711216989493E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999928031064073	WITHOUT_CLASSIFICATION	7.196893592688262E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999987562956124	WITHOUT_CLASSIFICATION	1.2437043876050782E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999461840695731	WITHOUT_CLASSIFICATION	5.381593042687538E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999984554797536	WITHOUT_CLASSIFICATION	1.5445202463768053E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999994286915425	WITHOUT_CLASSIFICATION	5.713084575029973E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999997716113268	WITHOUT_CLASSIFICATION	2.283886732666638E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999957699054635	WITHOUT_CLASSIFICATION	4.230094536624478E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999545925281345	WITHOUT_CLASSIFICATION	4.5407471865537726E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999988749709517	WITHOUT_CLASSIFICATION	1.1250290482670802E-6	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996119464248	WITHOUT_CLASSIFICATION	3.880535751427705E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999898779220705	WITHOUT_CLASSIFICATION	1.0122077929576257E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999155299375558	WITHOUT_CLASSIFICATION	8.447006244418666E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999155299375558	WITHOUT_CLASSIFICATION	8.447006244418666E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999999047496311	WITHOUT_CLASSIFICATION	9.525036891518854E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999993334950165	WITHOUT_CLASSIFICATION	6.665049834907027E-7	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999988635866204	WITHOUT_CLASSIFICATION	1.1364133796219763E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999955341506364	WITHOUT_CLASSIFICATION	4.465849363613045E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999974244161839	WITHOUT_CLASSIFICATION	2.575583816111753E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999977884074209	WITHOUT_CLASSIFICATION	2.211592579125931E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999540637339	WITHOUT_CLASSIFICATION	4.59362660656696E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997772525382	WITHOUT_CLASSIFICATION	2.2274746177796705E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999967155177749	WITHOUT_CLASSIFICATION	3.2844822250108796E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998783673628	WITHOUT_CLASSIFICATION	1.2163263715465495E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999998900887049	WITHOUT_CLASSIFICATION	1.0991129509101258E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999920647112	WITHOUT_CLASSIFICATION	7.935288714370312E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999930511491784	WITHOUT_CLASSIFICATION	6.948850821638511E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999988128679133	WITHOUT_CLASSIFICATION	1.1871320867774299E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999932124583248	WITHOUT_CLASSIFICATION	6.787541675105033E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999971119336738	WITHOUT_CLASSIFICATION	2.8880663261651265E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999977847076096	WITHOUT_CLASSIFICATION	2.215292390346282E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999999280868597	WITHOUT_CLASSIFICATION	7.191314029702028E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999999179638847	WITHOUT_CLASSIFICATION	8.203611527465951E-8	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999734314852317	WITHOUT_CLASSIFICATION	2.6568514768297636E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999885909410267	WITHOUT_CLASSIFICATION	1.1409058973469146E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999918454790121	WITHOUT_CLASSIFICATION	8.154520987903848E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999948553815151	WITHOUT_CLASSIFICATION	5.144618484786003E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999812438632355	WITHOUT_CLASSIFICATION	1.8756136764467584E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992819172097	WITHOUT_CLASSIFICATION	7.180827903512675E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999972556906337	WITHOUT_CLASSIFICATION	2.744309366381199E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999935720426768	WITHOUT_CLASSIFICATION	6.427957323230951E-6	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999934763447805	WITHOUT_CLASSIFICATION	6.5236552193825635E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999949671854979	WITHOUT_CLASSIFICATION	5.03281450224738E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999932146708768	WITHOUT_CLASSIFICATION	6.785329123220283E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999978745593024	WITHOUT_CLASSIFICATION	2.1254406974682256E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999960343522847	WITHOUT_CLASSIFICATION	3.965647715295099E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999887679276338	WITHOUT_CLASSIFICATION	1.1232072366238461E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999968201143025	WITHOUT_CLASSIFICATION	3.1798856975789745E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996251471075865	WITHOUT_CLASSIFICATION	3.748528924135116E-4	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996251471075865	WITHOUT_CLASSIFICATION	3.748528924135116E-4	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999935038906832	WITHOUT_CLASSIFICATION	6.496109316763519E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999887115575505	WITHOUT_CLASSIFICATION	1.1288442449478466E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999998899200834	WITHOUT_CLASSIFICATION	1.1007991660355066E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999999316396343	WITHOUT_CLASSIFICATION	6.836036569435108E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999987121109061	WITHOUT_CLASSIFICATION	1.287889093819277E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999960040135797	WITHOUT_CLASSIFICATION	3.995986420247928E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999916951768031	WITHOUT_CLASSIFICATION	8.304823196820806E-6	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999999738017885	WITHOUT_CLASSIFICATION	2.619821149318862E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999919000255654	WITHOUT_CLASSIFICATION	8.099974434591613E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997851790146	WITHOUT_CLASSIFICATION	2.1482098549801973E-7	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999992031518344	WITHOUT_CLASSIFICATION	7.968481656930069E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999998960777057	WITHOUT_CLASSIFICATION	1.0392229433528988E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999985848955615	WITHOUT_CLASSIFICATION	1.4151044384844406E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999990153612238	WITHOUT_CLASSIFICATION	9.846387761371557E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999953674614044	WITHOUT_CLASSIFICATION	4.6325385955349085E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999998599513316	WITHOUT_CLASSIFICATION	1.4004866848560936E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999998599513316	WITHOUT_CLASSIFICATION	1.4004866848560936E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999970898303504	WITHOUT_CLASSIFICATION	2.9101696495441353E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999975060638613	WITHOUT_CLASSIFICATION	2.493936138739707E-6	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999976361262629	WITHOUT_CLASSIFICATION	2.363873737090009E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999962545062498	WITHOUT_CLASSIFICATION	3.745493750188636E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998491607957581	WITHOUT_CLASSIFICATION	1.5083920424196348E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999871635004861	WITHOUT_CLASSIFICATION	1.2836499513822085E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999969233229213	WITHOUT_CLASSIFICATION	3.0766770785951916E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999969233229213	WITHOUT_CLASSIFICATION	3.0766770785951916E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999949516290152	WITHOUT_CLASSIFICATION	5.048370984901185E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999663958782	WITHOUT_CLASSIFICATION	3.3604121792545285E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999986594513797	WITHOUT_CLASSIFICATION	1.3405486203846856E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999891100018	WITHOUT_CLASSIFICATION	1.0889998332940386E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999998388041641	WITHOUT_CLASSIFICATION	1.611958358574931E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999148118985014	WITHOUT_CLASSIFICATION	8.51881014986312E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999994642990232	WITHOUT_CLASSIFICATION	5.35700976800134E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988987145806	WITHOUT_CLASSIFICATION	1.101285419400245E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999954100697964	WITHOUT_CLASSIFICATION	4.589930203614538E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999946340984031	WITHOUT_CLASSIFICATION	5.365901596940276E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999971683794683	WITHOUT_CLASSIFICATION	2.8316205316651036E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999985295639138	WITHOUT_CLASSIFICATION	1.4704360863130945E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999991625829041	WITHOUT_CLASSIFICATION	8.374170959820479E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999963729342963	WITHOUT_CLASSIFICATION	3.6270657037017685E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999891072018228	WITHOUT_CLASSIFICATION	1.0892798177246589E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999939071188123	WITHOUT_CLASSIFICATION	6.092881187725249E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999958500196496	WITHOUT_CLASSIFICATION	4.149980350292092E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999752105867734	WITHOUT_CLASSIFICATION	2.478941322653336E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999841163493993	WITHOUT_CLASSIFICATION	1.5883650600625915E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999995628395132	WITHOUT_CLASSIFICATION	4.371604869059126E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999952773431161	WITHOUT_CLASSIFICATION	4.722656883816295E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999478236383399	WITHOUT_CLASSIFICATION	5.2176361660026156E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999931686873136	WITHOUT_CLASSIFICATION	6.831312686390658E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997604724838	WITHOUT_CLASSIFICATION	2.3952751623774094E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999992082794797	WITHOUT_CLASSIFICATION	7.917205202799666E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.99999973569556	WITHOUT_CLASSIFICATION	2.6430443997691715E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999969680153402	WITHOUT_CLASSIFICATION	3.031984659808056E-6	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999993984221398	WITHOUT_CLASSIFICATION	6.015778602370555E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999994643952663	WITHOUT_CLASSIFICATION	5.356047337361577E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986989376058	WITHOUT_CLASSIFICATION	1.3010623940889733E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999961789340311	WITHOUT_CLASSIFICATION	3.8210659688603576E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9998232220908394	WITHOUT_CLASSIFICATION	1.7677790916061727E-4	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999990673804466	WITHOUT_CLASSIFICATION	9.326195532579299E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999995702328878	WITHOUT_CLASSIFICATION	4.2976711226442587E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999925902396368	WITHOUT_CLASSIFICATION	7.409760363152573E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999487364884286	WITHOUT_CLASSIFICATION	5.126351157146401E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999632616688445	WITHOUT_CLASSIFICATION	3.673833115534326E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999936482263343	WITHOUT_CLASSIFICATION	6.351773665745344E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999907666342186	WITHOUT_CLASSIFICATION	9.233365781340865E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999969854720305	WITHOUT_CLASSIFICATION	3.014527969530033E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999994982196937	WITHOUT_CLASSIFICATION	5.017803063520619E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999983480097832	WITHOUT_CLASSIFICATION	1.651990216807199E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999968583256502	WITHOUT_CLASSIFICATION	3.1416743498399237E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999994229099135	WITHOUT_CLASSIFICATION	5.770900864620741E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999919858015	WITHOUT_CLASSIFICATION	8.014198579420304E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999951283745433	WITHOUT_CLASSIFICATION	4.871625456679728E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999907666342186	WITHOUT_CLASSIFICATION	9.233365781340865E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999969854720305	WITHOUT_CLASSIFICATION	3.014527969530033E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999956477595223	WITHOUT_CLASSIFICATION	4.352240477613084E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999963786642654	WITHOUT_CLASSIFICATION	3.621335734595485E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999996020194679	WITHOUT_CLASSIFICATION	3.979805320926528E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999863486707291	WITHOUT_CLASSIFICATION	1.3651329270774177E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999975491784543	WITHOUT_CLASSIFICATION	2.4508215457686197E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999648336267	WITHOUT_CLASSIFICATION	3.51663732369499E-8	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999898648683445	WITHOUT_CLASSIFICATION	1.0135131655425845E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999774829568493	WITHOUT_CLASSIFICATION	2.2517043150681245E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999995940666517	WITHOUT_CLASSIFICATION	4.059333482787234E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999901009554996	WITHOUT_CLASSIFICATION	9.899044500449884E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999992732643409	WITHOUT_CLASSIFICATION	7.267356591031298E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999901009554996	WITHOUT_CLASSIFICATION	9.899044500449884E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999998942833641	WITHOUT_CLASSIFICATION	1.0571663600598105E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999902241432584	WITHOUT_CLASSIFICATION	9.775856741555817E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999209815051	WITHOUT_CLASSIFICATION	7.901849495955309E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997054764067	WITHOUT_CLASSIFICATION	2.9452359330551465E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999974906428994	WITHOUT_CLASSIFICATION	2.5093571006445407E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9997930620139251	WITHOUT_CLASSIFICATION	2.0693798607483187E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9997930620139251	WITHOUT_CLASSIFICATION	2.0693798607483187E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999944885352217	WITHOUT_CLASSIFICATION	5.511464778372857E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.99999572842059	WITHOUT_CLASSIFICATION	4.271579409949298E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999854271791363	WITHOUT_CLASSIFICATION	1.4572820863643867E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999952624488854	WITHOUT_CLASSIFICATION	4.737551114599367E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999956986570796	WITHOUT_CLASSIFICATION	4.3013429203652275E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999997033790184	WITHOUT_CLASSIFICATION	2.966209815231873E-7	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999993878748451	WITHOUT_CLASSIFICATION	6.121251548909838E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999925328476242	WITHOUT_CLASSIFICATION	7.4671523757385585E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999796909449981	WITHOUT_CLASSIFICATION	2.030905500191934E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999590316532083	WITHOUT_CLASSIFICATION	4.096834679164675E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999813336572885	WITHOUT_CLASSIFICATION	1.8666342711498226E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999998870815402	WITHOUT_CLASSIFICATION	1.1291845980021722E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999084790531894	WITHOUT_CLASSIFICATION	9.152094681058887E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999942707621464	WITHOUT_CLASSIFICATION	5.729237853584111E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999925302894692	WITHOUT_CLASSIFICATION	7.469710530833454E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999998699595833	WITHOUT_CLASSIFICATION	1.3004041670041323E-6	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999971092490212	WITHOUT_CLASSIFICATION	2.8907509788377124E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999967412589535	WITHOUT_CLASSIFICATION	3.2587410463731284E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999963573255584	WITHOUT_CLASSIFICATION	3.642674441685997E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997918415422069	WITHOUT_CLASSIFICATION	2.0815845779307865E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999977996375098	WITHOUT_CLASSIFICATION	2.2003624903299937E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999756249729841	WITHOUT_CLASSIFICATION	2.4375027015900723E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999977826656855	WITHOUT_CLASSIFICATION	2.2173343143774117E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999854244026761	WITHOUT_CLASSIFICATION	1.4575597323800757E-5	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999863338084595	WITHOUT_CLASSIFICATION	1.3666191540566725E-5	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999156242755244	WITHOUT_CLASSIFICATION	8.437572447558837E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998305496294	WITHOUT_CLASSIFICATION	1.6945037065239898E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999951409980891	WITHOUT_CLASSIFICATION	4.859001910964705E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999831908286063	WITHOUT_CLASSIFICATION	1.6809171393701706E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999988841127689	WITHOUT_CLASSIFICATION	1.1158872310862182E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999877780559154	WITHOUT_CLASSIFICATION	1.2221944084491795E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999992255520737	WITHOUT_CLASSIFICATION	7.744479263944702E-7	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999993878748451	WITHOUT_CLASSIFICATION	6.121251548909838E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999983408853063	WITHOUT_CLASSIFICATION	1.6591146937968096E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999310327921214	WITHOUT_CLASSIFICATION	6.89672078786385E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9999958964703811	WITHOUT_CLASSIFICATION	4.103529618836932E-6	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999913322864646	WITHOUT_CLASSIFICATION	8.667713535246273E-6	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999939998819699	WITHOUT_CLASSIFICATION	6.0001180300478446E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999927616927008	WITHOUT_CLASSIFICATION	7.2383072992156225E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999952624488854	WITHOUT_CLASSIFICATION	4.737551114599367E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999952624488854	WITHOUT_CLASSIFICATION	4.737551114599367E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999454359921712	WITHOUT_CLASSIFICATION	5.45640078288213E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999915987290319	WITHOUT_CLASSIFICATION	8.401270968192135E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999848723686087	WITHOUT_CLASSIFICATION	1.5127631391349998E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999421953679524	WITHOUT_CLASSIFICATION	5.780463204767508E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999923499253917	WITHOUT_CLASSIFICATION	7.650074608290923E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999986995380474	WITHOUT_CLASSIFICATION	1.3004619526033147E-5	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999943255859495	WITHOUT_CLASSIFICATION	5.674414050598229E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999893989795874	WITHOUT_CLASSIFICATION	1.0601020412603025E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999908949233544	WITHOUT_CLASSIFICATION	9.105076645658035E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947486450292	WITHOUT_CLASSIFICATION	5.2513549707215545E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999953064634184	WITHOUT_CLASSIFICATION	4.693536581683825E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999763781195502	WITHOUT_CLASSIFICATION	2.3621880449790076E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999470165153651	WITHOUT_CLASSIFICATION	5.298348463487958E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947486450292	WITHOUT_CLASSIFICATION	5.2513549707215545E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999992701122584	WITHOUT_CLASSIFICATION	7.2988774159965584E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999958750163733	WITHOUT_CLASSIFICATION	4.124983626707142E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999831130755501	WITHOUT_CLASSIFICATION	1.6886924449807636E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998926692826591	WITHOUT_CLASSIFICATION	1.0733071734093808E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999763781195502	WITHOUT_CLASSIFICATION	2.3621880449790076E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999951711376351	WITHOUT_CLASSIFICATION	4.828862364786578E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990626829818	WITHOUT_CLASSIFICATION	9.373170182082669E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988291603424	WITHOUT_CLASSIFICATION	1.170839657500814E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999890259926	WITHOUT_CLASSIFICATION	1.0974007357791695E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998066667106258	WITHOUT_CLASSIFICATION	1.9333328937429776E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999919599736434	WITHOUT_CLASSIFICATION	8.04002635651123E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999981663407336	WITHOUT_CLASSIFICATION	1.8336592665053595E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999825126131408	WITHOUT_CLASSIFICATION	1.7487386859313542E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988850303541	WITHOUT_CLASSIFICATION	1.1149696459928541E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999992107982921	WITHOUT_CLASSIFICATION	7.892017078719279E-7	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999996188566554	WITHOUT_CLASSIFICATION	3.811433445380979E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999995241021028	WITHOUT_CLASSIFICATION	4.7589789718000314E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947486450292	WITHOUT_CLASSIFICATION	5.2513549707215545E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999951711376351	WITHOUT_CLASSIFICATION	4.828862364786578E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988291603424	WITHOUT_CLASSIFICATION	1.170839657500814E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999983746928432	WITHOUT_CLASSIFICATION	1.625307156809314E-5	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999846611064992	WITHOUT_CLASSIFICATION	1.533889350072387E-5	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999987622380411	WITHOUT_CLASSIFICATION	1.2377619589926596E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999763781195502	WITHOUT_CLASSIFICATION	2.3621880449790076E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999991140693886	WITHOUT_CLASSIFICATION	8.859306115719839E-7	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999817470128126	WITHOUT_CLASSIFICATION	1.8252987187302994E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999699233364474	WITHOUT_CLASSIFICATION	3.0076663552592174E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999772679393814	WITHOUT_CLASSIFICATION	2.2732060618631935E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999825126131408	WITHOUT_CLASSIFICATION	1.7487386859313542E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999992701122584	WITHOUT_CLASSIFICATION	7.2988774159965584E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999786541475009	WITHOUT_CLASSIFICATION	2.1345852499092843E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999983327184502	WITHOUT_CLASSIFICATION	1.6672815497946728E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999397473244498	WITHOUT_CLASSIFICATION	6.0252675550135544E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999786860120047	WITHOUT_CLASSIFICATION	2.1313987995279912E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999962213433162	WITHOUT_CLASSIFICATION	3.778656683798473E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999939367871815	WITHOUT_CLASSIFICATION	6.063212818453192E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999469132236565	WITHOUT_CLASSIFICATION	5.308677634358191E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997054764067	WITHOUT_CLASSIFICATION	2.9452359330551465E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942059887218	WITHOUT_CLASSIFICATION	5.794011278132956E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995660042782	WITHOUT_CLASSIFICATION	4.3399572179693877E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999946623989999	WITHOUT_CLASSIFICATION	5.337601000000258E-6	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999986039684577	WITHOUT_CLASSIFICATION	1.3960315422265071E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999988576909818	WITHOUT_CLASSIFICATION	1.1423090182187178E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999997117367726	WITHOUT_CLASSIFICATION	2.8826322740361104E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999952915851816	WITHOUT_CLASSIFICATION	4.708414818305212E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999972870432116	WITHOUT_CLASSIFICATION	2.7129567884270897E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999772679393814	WITHOUT_CLASSIFICATION	2.2732060618631935E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999744235021389	WITHOUT_CLASSIFICATION	2.557649786115419E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999852022986413	WITHOUT_CLASSIFICATION	1.4797701358853907E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998693997957322	WITHOUT_CLASSIFICATION	1.306002042677985E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999803806621097	WITHOUT_CLASSIFICATION	1.9619337890305087E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999720973737801	WITHOUT_CLASSIFICATION	2.7902626219870184E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999941211930967	WITHOUT_CLASSIFICATION	5.878806903350835E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999870545010557	WITHOUT_CLASSIFICATION	1.2945498944152494E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999872754908384	WITHOUT_CLASSIFICATION	1.2724509161677993E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996046483414	WITHOUT_CLASSIFICATION	3.9535165862532386E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999869229699189	WITHOUT_CLASSIFICATION	1.3077030081047676E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999994202638831	WITHOUT_CLASSIFICATION	5.7973611689415825E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999990098137124	WITHOUT_CLASSIFICATION	9.901862876049506E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999950269288986	WITHOUT_CLASSIFICATION	4.973071101307059E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999650215441611	WITHOUT_CLASSIFICATION	3.497845583879459E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999999990964724	WITHOUT_CLASSIFICATION	9.03527602988966E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999985169334633	WITHOUT_CLASSIFICATION	1.483066536667142E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999988660478646	WITHOUT_CLASSIFICATION	1.1339521354101033E-6	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999988719282514	WITHOUT_CLASSIFICATION	1.128071748496867E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999987315224574	WITHOUT_CLASSIFICATION	1.2684775425641384E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999964320619891	WITHOUT_CLASSIFICATION	3.567938010889297E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999888500431794	WITHOUT_CLASSIFICATION	1.1149956820616332E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999966857070818	WITHOUT_CLASSIFICATION	3.314292918163728E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999979429909652	WITHOUT_CLASSIFICATION	2.05700903483768E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999993533917091	WITHOUT_CLASSIFICATION	6.466082910199593E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999993927429863	WITHOUT_CLASSIFICATION	6.072570137856952E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9999857257618584	WITHOUT_CLASSIFICATION	1.427423814151044E-5	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999365796112962	WITHOUT_CLASSIFICATION	6.342038870368565E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999854809261689	WITHOUT_CLASSIFICATION	1.4519073831101344E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999960954433318	WITHOUT_CLASSIFICATION	3.904556668175891E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999738275981204	WITHOUT_CLASSIFICATION	2.6172401879593266E-5	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999963599496856	WITHOUT_CLASSIFICATION	3.6400503144443417E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999051644689	WITHOUT_CLASSIFICATION	9.483553110555676E-7	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997664541733	WITHOUT_CLASSIFICATION	2.3354582658852635E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998709054747	WITHOUT_CLASSIFICATION	1.2909452535355516E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999304592094239	WITHOUT_CLASSIFICATION	6.95407905760114E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999987071549961	WITHOUT_CLASSIFICATION	1.2928450039673637E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999981547875678	WITHOUT_CLASSIFICATION	1.8452124321579201E-6	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999993424291558	WITHOUT_CLASSIFICATION	6.575708443007913E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999987071549961	WITHOUT_CLASSIFICATION	1.2928450039673637E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999304592094239	WITHOUT_CLASSIFICATION	6.95407905760114E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999981547875678	WITHOUT_CLASSIFICATION	1.8452124321579201E-6	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999943980473914	WITHOUT_CLASSIFICATION	5.601952608532682E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999994692783986	WITHOUT_CLASSIFICATION	5.307216015743768E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999771925766	WITHOUT_CLASSIFICATION	2.2807423443319108E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999992981390153	WITHOUT_CLASSIFICATION	7.018609846920368E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997781645051	WITHOUT_CLASSIFICATION	2.2183549487422402E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999990795033932	WITHOUT_CLASSIFICATION	9.204966068545411E-7	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999758981860231	WITHOUT_CLASSIFICATION	2.410181397698056E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999932220207083	WITHOUT_CLASSIFICATION	6.777979291817695E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999674815103016	WITHOUT_CLASSIFICATION	3.251848969844571E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999158760440342	WITHOUT_CLASSIFICATION	8.412395596569223E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999985878798137	WITHOUT_CLASSIFICATION	1.4121201863371479E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999722242066426	WITHOUT_CLASSIFICATION	2.777579335742067E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998028652927	WITHOUT_CLASSIFICATION	1.971347074464838E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999563155619675	WITHOUT_CLASSIFICATION	4.36844380325388E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998020584991	WITHOUT_CLASSIFICATION	1.979415007774222E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999745354269629	WITHOUT_CLASSIFICATION	2.5464573037084993E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999981486854467	WITHOUT_CLASSIFICATION	1.8513145533003614E-6	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999998920170692	WITHOUT_CLASSIFICATION	1.0798293076376231E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998967560065	WITHOUT_CLASSIFICATION	1.0324399347429453E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999183962361	WITHOUT_CLASSIFICATION	8.160376389669157E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999995379791089	WITHOUT_CLASSIFICATION	4.620208911467009E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997385134246	WITHOUT_CLASSIFICATION	2.614865752993851E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999921792403177	WITHOUT_CLASSIFICATION	7.820759682313526E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999982253519981	WITHOUT_CLASSIFICATION	1.7746480018507968E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999996361098441	WITHOUT_CLASSIFICATION	3.6389015581928604E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999996361098441	WITHOUT_CLASSIFICATION	3.6389015581928604E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997445568904	WITHOUT_CLASSIFICATION	2.554431095758063E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997445568904	WITHOUT_CLASSIFICATION	2.554431095758063E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999989581121337	WITHOUT_CLASSIFICATION	1.041887866298103E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999981486854467	WITHOUT_CLASSIFICATION	1.8513145533003614E-6	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999998498727273	WITHOUT_CLASSIFICATION	1.501272727007445E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999990000302593	WITHOUT_CLASSIFICATION	9.999697407327848E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999934039868849	WITHOUT_CLASSIFICATION	6.596013115188853E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999934039868849	WITHOUT_CLASSIFICATION	6.596013115188853E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999955456125391	WITHOUT_CLASSIFICATION	4.454387460832611E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999953071300701	WITHOUT_CLASSIFICATION	4.6928699299077416E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999972650490849	WITHOUT_CLASSIFICATION	2.7349509150863914E-6	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999953892647752	WITHOUT_CLASSIFICATION	4.610735224743216E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999834194994114	WITHOUT_CLASSIFICATION	1.6580500588529413E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999995511907	WITHOUT_CLASSIFICATION	4.4880924781580694E-10	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999688955702639	WITHOUT_CLASSIFICATION	3.1104429736029604E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999941076481399	WITHOUT_CLASSIFICATION	5.892351860000985E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999529649529579	WITHOUT_CLASSIFICATION	4.703504704214385E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999989284412768	WITHOUT_CLASSIFICATION	1.0715587231500044E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.999991283691446	WITHOUT_CLASSIFICATION	8.716308554011059E-6	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999863346928637	WITHOUT_CLASSIFICATION	1.3665307136412593E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999890346617676	WITHOUT_CLASSIFICATION	1.096533823245862E-5	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999562994122053	WITHOUT_CLASSIFICATION	4.370058779478673E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999940636465265	WITHOUT_CLASSIFICATION	5.936353473472388E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991697575663	WITHOUT_CLASSIFICATION	8.302424338113613E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889421101106	WITHOUT_CLASSIFICATION	1.105788988937692E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.99999810254756	WITHOUT_CLASSIFICATION	1.897452439843417E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998929328188	WITHOUT_CLASSIFICATION	1.070671811466681E-7	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998839763693	WITHOUT_CLASSIFICATION	1.16023630711867E-7	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995335497205	WITHOUT_CLASSIFICATION	4.6645027954871594E-7	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999961934121847	WITHOUT_CLASSIFICATION	3.806587815228054E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999996861564814	WITHOUT_CLASSIFICATION	3.1384351859361213E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999986642894969	WITHOUT_CLASSIFICATION	1.3357105030986218E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997205187520908	WITHOUT_CLASSIFICATION	2.7948124790924797E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999117468191	WITHOUT_CLASSIFICATION	8.825318080827691E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999990098137124	WITHOUT_CLASSIFICATION	9.901862876049506E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999979786417865	WITHOUT_CLASSIFICATION	2.021358213414697E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997085618281	WITHOUT_CLASSIFICATION	2.9143817192710313E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823137422602	WITHOUT_CLASSIFICATION	1.7686257739804725E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951403515971	WITHOUT_CLASSIFICATION	4.8596484029115236E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999782876051128	WITHOUT_CLASSIFICATION	2.17123948872258E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999782876051128	WITHOUT_CLASSIFICATION	2.17123948872258E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999991536437434	WITHOUT_CLASSIFICATION	8.463562567121078E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999879423687194	WITHOUT_CLASSIFICATION	1.205763128064316E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967880874361	WITHOUT_CLASSIFICATION	3.2119125638313116E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967880874361	WITHOUT_CLASSIFICATION	3.2119125638313116E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999973012100022	WITHOUT_CLASSIFICATION	2.6987899978600907E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999652174777981	WITHOUT_CLASSIFICATION	3.4782522201953E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999955415500579	WITHOUT_CLASSIFICATION	4.458449942144156E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999965700177812	WITHOUT_CLASSIFICATION	3.4299822188526546E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999835787699811	WITHOUT_CLASSIFICATION	1.6421230018852267E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999975142508142	WITHOUT_CLASSIFICATION	2.485749185852117E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999911865902775	WITHOUT_CLASSIFICATION	8.813409722419971E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984256133667	WITHOUT_CLASSIFICATION	1.5743866332708524E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999987449677961	WITHOUT_CLASSIFICATION	1.2550322039466026E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999987449677961	WITHOUT_CLASSIFICATION	1.2550322039466026E-6	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999436874937	WITHOUT_CLASSIFICATION	5.6312506425185655E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999969622202017	WITHOUT_CLASSIFICATION	3.0377797982635134E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999969622202017	WITHOUT_CLASSIFICATION	3.0377797982635134E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999992898363977	WITHOUT_CLASSIFICATION	7.101636022407896E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999987866944904	WITHOUT_CLASSIFICATION	1.2133055095674503E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9995488356584369	WITHOUT_CLASSIFICATION	4.511643415630295E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999948172853109	WITHOUT_CLASSIFICATION	5.1827146890142596E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999959581323623	WITHOUT_CLASSIFICATION	4.0418676376611495E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999991813434704	WITHOUT_CLASSIFICATION	8.186565295799561E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999990698510447	WITHOUT_CLASSIFICATION	9.30148955310154E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997261717600875	WITHOUT_CLASSIFICATION	2.7382823991248847E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999904527180621	WITHOUT_CLASSIFICATION	9.547281937931716E-6	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999879635088689	WITHOUT_CLASSIFICATION	1.2036491131106188E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999338996566	WITHOUT_CLASSIFICATION	6.610034343594919E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999989676483044	WITHOUT_CLASSIFICATION	1.0323516955501262E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999478077312871	WITHOUT_CLASSIFICATION	5.2192268712810776E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999478077312871	WITHOUT_CLASSIFICATION	5.2192268712810776E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999478077312871	WITHOUT_CLASSIFICATION	5.2192268712810776E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999478077312871	WITHOUT_CLASSIFICATION	5.2192268712810776E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999987846550396	WITHOUT_CLASSIFICATION	1.215344960405297E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999992762340029	WITHOUT_CLASSIFICATION	7.237659972614563E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999755761396681	WITHOUT_CLASSIFICATION	2.4423860331752057E-5	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9998528136340372	WITHOUT_CLASSIFICATION	1.4718636596276405E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999967096642507	WITHOUT_CLASSIFICATION	3.290335749257402E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999957771620501	WITHOUT_CLASSIFICATION	4.2228379498899995E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999715941974119	WITHOUT_CLASSIFICATION	2.8405802588120417E-5	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999896816584426	WITHOUT_CLASSIFICATION	1.0318341557512268E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999961779297908	WITHOUT_CLASSIFICATION	3.822070209219265E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999991132408494	WITHOUT_CLASSIFICATION	8.867591504319003E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999987627902462	WITHOUT_CLASSIFICATION	1.2372097537531191E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999700364874	WITHOUT_CLASSIFICATION	2.996351260094943E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999127651227906	WITHOUT_CLASSIFICATION	8.72348772093879E-5	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.99999885631921	WITHOUT_CLASSIFICATION	1.1436807899487242E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999846080222446	WITHOUT_CLASSIFICATION	1.5391977755421585E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999700364874	WITHOUT_CLASSIFICATION	2.996351260094943E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999981237105687	WITHOUT_CLASSIFICATION	1.8762894312498017E-6	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999995389662808	WITHOUT_CLASSIFICATION	4.610337192666873E-7	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999986258779355	WITHOUT_CLASSIFICATION	1.3741220644762793E-6	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999997245253548	WITHOUT_CLASSIFICATION	2.7547464520364788E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997993512677	WITHOUT_CLASSIFICATION	2.0064873235873735E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996325250162	WITHOUT_CLASSIFICATION	3.6747498372949407E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999810521841	WITHOUT_CLASSIFICATION	1.894781590151979E-7	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999781698296373	WITHOUT_CLASSIFICATION	2.1830170362726184E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997595821778	WITHOUT_CLASSIFICATION	2.4041782216249593E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999975620738494	WITHOUT_CLASSIFICATION	2.4379261506085146E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994453633906	WITHOUT_CLASSIFICATION	5.546366094383009E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999990055196217	WITHOUT_CLASSIFICATION	9.944803783279317E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999829382017417	WITHOUT_CLASSIFICATION	1.7061798258349112E-5	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999032650699958	WITHOUT_CLASSIFICATION	9.67349300041853E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992701232967	WITHOUT_CLASSIFICATION	7.298767032514412E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999969294726737	WITHOUT_CLASSIFICATION	3.0705273262797736E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997426606072	WITHOUT_CLASSIFICATION	2.5733939275661887E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979477379072	WITHOUT_CLASSIFICATION	2.052262092890836E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999986650043312	WITHOUT_CLASSIFICATION	1.3349956688184633E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979477379072	WITHOUT_CLASSIFICATION	2.052262092890836E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999955428829735	WITHOUT_CLASSIFICATION	4.457117026527283E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989487768944	WITHOUT_CLASSIFICATION	1.0512231055340804E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999938116338783	WITHOUT_CLASSIFICATION	6.18836612164392E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999934454880851	WITHOUT_CLASSIFICATION	6.554511914841496E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997426606072	WITHOUT_CLASSIFICATION	2.5733939275661887E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999986650043312	WITHOUT_CLASSIFICATION	1.3349956688184633E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999955428829735	WITHOUT_CLASSIFICATION	4.457117026527283E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999980508312099	WITHOUT_CLASSIFICATION	1.9491687901564076E-6	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999899618133877	WITHOUT_CLASSIFICATION	1.003818661226815E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999254180046356	WITHOUT_CLASSIFICATION	7.458199536429156E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999809151311421	WITHOUT_CLASSIFICATION	1.908486885800613E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999958586921321	WITHOUT_CLASSIFICATION	4.141307867835158E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999993162957347	WITHOUT_CLASSIFICATION	6.83704265307248E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889421101106	WITHOUT_CLASSIFICATION	1.105788988937692E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989487768944	WITHOUT_CLASSIFICATION	1.0512231055340804E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999990749137602	WITHOUT_CLASSIFICATION	9.250862397350998E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999967289035548	WITHOUT_CLASSIFICATION	3.2710964451405465E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999995694884009	WITHOUT_CLASSIFICATION	4.305115992149374E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889421101106	WITHOUT_CLASSIFICATION	1.105788988937692E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999864573129756	WITHOUT_CLASSIFICATION	1.3542687024302564E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889421101106	WITHOUT_CLASSIFICATION	1.105788988937692E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999995365423079	WITHOUT_CLASSIFICATION	4.6345769219100703E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990390042401	WITHOUT_CLASSIFICATION	9.609957598527654E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999227603379751	WITHOUT_CLASSIFICATION	7.723966202489814E-5	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999311077951157	WITHOUT_CLASSIFICATION	6.889220488417426E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999971847148469	WITHOUT_CLASSIFICATION	2.815285153049329E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999976840806315	WITHOUT_CLASSIFICATION	2.315919368393141E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.99999998149854	WITHOUT_CLASSIFICATION	1.8501460044535675E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999884166259572	WITHOUT_CLASSIFICATION	1.158337404275518E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999868549557379	WITHOUT_CLASSIFICATION	1.3145044261966959E-5	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999816208692844	WITHOUT_CLASSIFICATION	1.837913071561322E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999155299375558	WITHOUT_CLASSIFICATION	8.447006244418666E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997297961462	WITHOUT_CLASSIFICATION	2.7020385383081107E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9995488356584369	WITHOUT_CLASSIFICATION	4.511643415630295E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999709609771462	WITHOUT_CLASSIFICATION	2.903902285367436E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999990449563162	WITHOUT_CLASSIFICATION	9.550436838540639E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999976858651583	WITHOUT_CLASSIFICATION	2.314134841697746E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999440497213268	WITHOUT_CLASSIFICATION	5.5950278673172515E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999977402801349	WITHOUT_CLASSIFICATION	2.259719865075595E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995753084332	WITHOUT_CLASSIFICATION	4.246915668428436E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999998268516542	WITHOUT_CLASSIFICATION	1.7314834571236746E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999923198339116	WITHOUT_CLASSIFICATION	7.680166088406797E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999258795179	WITHOUT_CLASSIFICATION	7.412048206919422E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999986628735209	WITHOUT_CLASSIFICATION	1.3371264791592578E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9995490362311614	WITHOUT_CLASSIFICATION	4.5096376883858256E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999981390281526	WITHOUT_CLASSIFICATION	1.8609718472726666E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999989274321878	WITHOUT_CLASSIFICATION	1.0725678122159382E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999932958170341	WITHOUT_CLASSIFICATION	6.704182965885301E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999734396531883	WITHOUT_CLASSIFICATION	2.6560346811791887E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.999883280646309	WITHOUT_CLASSIFICATION	1.1671935369091089E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999989621103303	WITHOUT_CLASSIFICATION	1.037889669636676E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995246533873	WITHOUT_CLASSIFICATION	4.7534661265507895E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999996677962306	WITHOUT_CLASSIFICATION	3.322037693348222E-7	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999581586966106	WITHOUT_CLASSIFICATION	4.18413033894547E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999620013785285	WITHOUT_CLASSIFICATION	3.7998621471398904E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9995839171596813	WITHOUT_CLASSIFICATION	4.160828403186141E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999735361040564	WITHOUT_CLASSIFICATION	2.6463895943632568E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999886176035556	WITHOUT_CLASSIFICATION	1.1382396444376026E-5	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999158995284947	WITHOUT_CLASSIFICATION	8.410047150520566E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999904293001612	WITHOUT_CLASSIFICATION	9.570699838849877E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999386683456	WITHOUT_CLASSIFICATION	6.133165438225326E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992617577554724	WITHOUT_CLASSIFICATION	7.382422445275737E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995890844852	WITHOUT_CLASSIFICATION	4.109155148806736E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993948073242	WITHOUT_CLASSIFICATION	6.051926757565937E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999561193460119	WITHOUT_CLASSIFICATION	4.3880653988044234E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999561193460119	WITHOUT_CLASSIFICATION	4.3880653988044234E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999980000965	WITHOUT_CLASSIFICATION	1.9999035414671133E-9	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999884166259572	WITHOUT_CLASSIFICATION	1.158337404275518E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999898071460124	WITHOUT_CLASSIFICATION	1.0192853987534138E-5	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999966919715131	WITHOUT_CLASSIFICATION	3.308028486945455E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999870146352	WITHOUT_CLASSIFICATION	1.2985364797740472E-7	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999987584886101	WITHOUT_CLASSIFICATION	1.2415113899269272E-6	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999794801559542	WITHOUT_CLASSIFICATION	2.051984404583674E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9997217283232174	WITHOUT_CLASSIFICATION	2.782716767826999E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999978768618603	WITHOUT_CLASSIFICATION	2.123138139780667E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999995978066394	WITHOUT_CLASSIFICATION	4.0219336050954547E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999994232622468	WITHOUT_CLASSIFICATION	5.767377532182951E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999979522567563	WITHOUT_CLASSIFICATION	2.0477432437807447E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999233167416	WITHOUT_CLASSIFICATION	7.668325832621573E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999982717566593	WITHOUT_CLASSIFICATION	1.728243340631194E-6	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999959117396799	WITHOUT_CLASSIFICATION	4.088260320047739E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998755432201	WITHOUT_CLASSIFICATION	1.244567797905912E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999945629445975	WITHOUT_CLASSIFICATION	5.437055402461595E-6	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999996907507707	WITHOUT_CLASSIFICATION	3.0924922935022076E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999996388238088	WITHOUT_CLASSIFICATION	3.6117619124405784E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999748856225	WITHOUT_CLASSIFICATION	2.5114377488594108E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998331051759	WITHOUT_CLASSIFICATION	1.668948239728278E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999984360647582	WITHOUT_CLASSIFICATION	1.5639352417389035E-6	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999982815960918	WITHOUT_CLASSIFICATION	1.7184039081042851E-6	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999112918418	WITHOUT_CLASSIFICATION	8.870815814137919E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992617577554724	WITHOUT_CLASSIFICATION	7.382422445275737E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999997543545747	WITHOUT_CLASSIFICATION	2.45645425361881E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999721760597	WITHOUT_CLASSIFICATION	2.782394026217425E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999982003272324	WITHOUT_CLASSIFICATION	1.7996727676271425E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999968740454108	WITHOUT_CLASSIFICATION	3.1259545890907563E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999994102656233	WITHOUT_CLASSIFICATION	5.897343765824079E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999986552822013	WITHOUT_CLASSIFICATION	1.3447177987749555E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999675803648572	WITHOUT_CLASSIFICATION	3.2419635142806874E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999950826907588	WITHOUT_CLASSIFICATION	4.917309241273026E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999985549800176	WITHOUT_CLASSIFICATION	1.4450199825007237E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999956474933968	WITHOUT_CLASSIFICATION	4.3525066032476315E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999978967111529	WITHOUT_CLASSIFICATION	2.103288847040869E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999945526118507	WITHOUT_CLASSIFICATION	5.447388149311188E-6	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999981574188928	WITHOUT_CLASSIFICATION	1.8425811072221822E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999609138871	WITHOUT_CLASSIFICATION	3.908611285300317E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999995995625506	WITHOUT_CLASSIFICATION	4.0043744936946276E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999995995625506	WITHOUT_CLASSIFICATION	4.0043744936946276E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999918331305203	WITHOUT_CLASSIFICATION	8.166869479772556E-6	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999961764961043	WITHOUT_CLASSIFICATION	3.823503895689855E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999994080051894	WITHOUT_CLASSIFICATION	5.9199481059275555E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999994080051894	WITHOUT_CLASSIFICATION	5.9199481059275555E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999984427557519	WITHOUT_CLASSIFICATION	1.5572442481434009E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999748599759847	WITHOUT_CLASSIFICATION	2.514002401528217E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999995880055441	WITHOUT_CLASSIFICATION	4.1199445588414436E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999792615526	WITHOUT_CLASSIFICATION	2.0738447498349618E-8	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999916566949315	WITHOUT_CLASSIFICATION	8.343305068472713E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999948827089796	WITHOUT_CLASSIFICATION	5.11729102029465E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999993967831675	WITHOUT_CLASSIFICATION	6.032168324984569E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999993967831675	WITHOUT_CLASSIFICATION	6.032168324984569E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999942733070087	WITHOUT_CLASSIFICATION	5.726692991276388E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995031214881	WITHOUT_CLASSIFICATION	4.968785119091283E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999864006788588	WITHOUT_CLASSIFICATION	1.3599321141296576E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999978987284688	WITHOUT_CLASSIFICATION	2.10127153128986E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999978987284688	WITHOUT_CLASSIFICATION	2.10127153128986E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999979434729581	WITHOUT_CLASSIFICATION	2.0565270418784467E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999949625180098	WITHOUT_CLASSIFICATION	5.037481990264101E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998673538862	WITHOUT_CLASSIFICATION	1.3264611386600878E-7	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999974374827133	WITHOUT_CLASSIFICATION	2.5625172866866988E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998852153397	WITHOUT_CLASSIFICATION	1.1478466029529272E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999928185437179	WITHOUT_CLASSIFICATION	7.181456282109451E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999990709264539	WITHOUT_CLASSIFICATION	9.290735460027003E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999964891755664	WITHOUT_CLASSIFICATION	3.510824433647091E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999884120946443	WITHOUT_CLASSIFICATION	1.1587905355778514E-5	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999973407770336	WITHOUT_CLASSIFICATION	2.6592229663381254E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999990780426331	WITHOUT_CLASSIFICATION	9.219573669153028E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.999992621881429	WITHOUT_CLASSIFICATION	7.378118570958149E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999666161189276	WITHOUT_CLASSIFICATION	3.338388107248769E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999998822603119	WITHOUT_CLASSIFICATION	1.1773968807371128E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999895069127289	WITHOUT_CLASSIFICATION	1.0493087271135742E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998507641857	WITHOUT_CLASSIFICATION	1.4923581422257968E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999982764148314	WITHOUT_CLASSIFICATION	1.7235851686437564E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999993946013385	WITHOUT_CLASSIFICATION	6.053986615491324E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999993351373236	WITHOUT_CLASSIFICATION	6.648626763569094E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999876424172376	WITHOUT_CLASSIFICATION	1.2357582762499573E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999876898518173	WITHOUT_CLASSIFICATION	1.2310148182640101E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999979025474945	WITHOUT_CLASSIFICATION	2.097452505527739E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999681950343908	WITHOUT_CLASSIFICATION	3.180496560913718E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999927487532722	WITHOUT_CLASSIFICATION	7.251246727857619E-6	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9998669718981131	WITHOUT_CLASSIFICATION	1.3302810188675596E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999978916396992	WITHOUT_CLASSIFICATION	2.1083603007340057E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999966852019211	WITHOUT_CLASSIFICATION	3.3147980789637075E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999178036375793	WITHOUT_CLASSIFICATION	8.219636242064823E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999995019568239	WITHOUT_CLASSIFICATION	4.980431761352908E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999993507313027	WITHOUT_CLASSIFICATION	6.492686972925794E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999719728392	WITHOUT_CLASSIFICATION	2.802716085294997E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997575976557	WITHOUT_CLASSIFICATION	2.424023443382031E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999997244959239	WITHOUT_CLASSIFICATION	2.755040760681896E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999863997243408	WITHOUT_CLASSIFICATION	1.3600275659120391E-5	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999569909598838	WITHOUT_CLASSIFICATION	4.300904011623167E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999865103524122	WITHOUT_CLASSIFICATION	1.3489647587904729E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999826678913437	WITHOUT_CLASSIFICATION	1.7332108656312676E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999974141861437	WITHOUT_CLASSIFICATION	2.5858138563003792E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999984317714055	WITHOUT_CLASSIFICATION	1.5682285945169021E-6	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999993123412095	WITHOUT_CLASSIFICATION	6.876587904017265E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999996621203037	WITHOUT_CLASSIFICATION	3.378796963724474E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999957458990033	WITHOUT_CLASSIFICATION	4.254100996687743E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999954737832851	WITHOUT_CLASSIFICATION	4.526216714777733E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999988013724895	WITHOUT_CLASSIFICATION	1.1986275105003905E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.999996709091743	WITHOUT_CLASSIFICATION	3.290908257045659E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999757511180261	WITHOUT_CLASSIFICATION	2.4248881973938763E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999912671163138	WITHOUT_CLASSIFICATION	8.732883686181312E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999605173328439	WITHOUT_CLASSIFICATION	3.948266715613865E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999089939104	WITHOUT_CLASSIFICATION	9.100608948682254E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999994563789916	WITHOUT_CLASSIFICATION	5.436210084000472E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999999527486607	WITHOUT_CLASSIFICATION	4.7251339294521043E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999994730124074	WITHOUT_CLASSIFICATION	5.269875925411333E-7	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998540716849	WITHOUT_CLASSIFICATION	1.459283150944567E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999991458566	WITHOUT_CLASSIFICATION	8.541434002655304E-10	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999859015522894	WITHOUT_CLASSIFICATION	1.4098447710595823E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999504493423	WITHOUT_CLASSIFICATION	4.955065768766533E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999986596946956	WITHOUT_CLASSIFICATION	1.3403053043272407E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999992889410809	WITHOUT_CLASSIFICATION	7.110589191187701E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999997978497093	WITHOUT_CLASSIFICATION	2.021502907585143E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999999339212542	WITHOUT_CLASSIFICATION	6.607874579631252E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999969994353731	WITHOUT_CLASSIFICATION	3.0005646268778416E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999969994353731	WITHOUT_CLASSIFICATION	3.0005646268778416E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999849612079	WITHOUT_CLASSIFICATION	1.503879208124621E-8	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999999511631104	WITHOUT_CLASSIFICATION	4.883688974837953E-8	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998424984871	WITHOUT_CLASSIFICATION	1.575015128497052E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999994683938391	WITHOUT_CLASSIFICATION	5.316061608032123E-7	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998815439438	WITHOUT_CLASSIFICATION	1.18456056097237E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.99999733675939	WITHOUT_CLASSIFICATION	2.66324061007845E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999336265685	WITHOUT_CLASSIFICATION	6.637343160317838E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999994955647056	WITHOUT_CLASSIFICATION	5.044352944969196E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999987922571454	WITHOUT_CLASSIFICATION	1.2077428546129144E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999997415340895	WITHOUT_CLASSIFICATION	2.5846591040343846E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999573348677	WITHOUT_CLASSIFICATION	4.266513237274752E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999156641077893	WITHOUT_CLASSIFICATION	8.433589221070091E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991257751838	WITHOUT_CLASSIFICATION	8.742248160907192E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999996744329753	WITHOUT_CLASSIFICATION	3.25567024629455E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999684157550145	WITHOUT_CLASSIFICATION	3.158424498556565E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999684157550145	WITHOUT_CLASSIFICATION	3.158424498556565E-5	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999180439789	WITHOUT_CLASSIFICATION	8.195602109400307E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999996411591943	WITHOUT_CLASSIFICATION	3.588408057331267E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999955894663715	WITHOUT_CLASSIFICATION	4.410533628505158E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999995800055739	WITHOUT_CLASSIFICATION	4.199944262003794E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993840081505	WITHOUT_CLASSIFICATION	6.159918494425827E-7	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804611759546	WITHOUT_CLASSIFICATION	1.9538824045324187E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999816111954467	WITHOUT_CLASSIFICATION	1.8388804553276575E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999974477864007	WITHOUT_CLASSIFICATION	2.5522135992660524E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999997908324164	WITHOUT_CLASSIFICATION	2.0916758343441954E-7	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999725343952	WITHOUT_CLASSIFICATION	2.746560483549098E-8	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999342066711	WITHOUT_CLASSIFICATION	6.579332896772161E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999979784521914	WITHOUT_CLASSIFICATION	2.021547808595576E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999846208306	WITHOUT_CLASSIFICATION	1.5379169354687327E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996518546433	WITHOUT_CLASSIFICATION	3.481453566586273E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999992967887504	WITHOUT_CLASSIFICATION	7.032112494952494E-7	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999995551273492	WITHOUT_CLASSIFICATION	4.4487265075719744E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999799813151	WITHOUT_CLASSIFICATION	2.0018684920382213E-8	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994325624246	WITHOUT_CLASSIFICATION	5.674375753387386E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999996790907915	WITHOUT_CLASSIFICATION	3.209092085680458E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999854355435	WITHOUT_CLASSIFICATION	1.4564456523299723E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999991693433931	WITHOUT_CLASSIFICATION	8.306566068151721E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999774468534	WITHOUT_CLASSIFICATION	2.2553146545902544E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999991980282009	WITHOUT_CLASSIFICATION	8.019717991056819E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999484140749054	WITHOUT_CLASSIFICATION	5.158592509453591E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999990901490824	WITHOUT_CLASSIFICATION	9.098509175913076E-7	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999997841070796	WITHOUT_CLASSIFICATION	2.1589292040279901E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998760472384	WITHOUT_CLASSIFICATION	1.2395276155711192E-7	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998761981549	WITHOUT_CLASSIFICATION	1.2380184510114342E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999793401309	WITHOUT_CLASSIFICATION	2.0659869139018792E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999975234945078	WITHOUT_CLASSIFICATION	2.4765054922459648E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999861376992996	WITHOUT_CLASSIFICATION	1.386230070052249E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999997936015753	WITHOUT_CLASSIFICATION	2.0639842466435194E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999994161943246	WITHOUT_CLASSIFICATION	5.83805675430218E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997817883901	WITHOUT_CLASSIFICATION	2.1821160998635574E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999999111321274	WITHOUT_CLASSIFICATION	8.886787256671165E-8	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997750984392	WITHOUT_CLASSIFICATION	2.2490156080178755E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999996626410151	WITHOUT_CLASSIFICATION	3.3735898493910227E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999991850493077	WITHOUT_CLASSIFICATION	8.149506921972879E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999978709768017	WITHOUT_CLASSIFICATION	2.129023198231564E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999997654172138	WITHOUT_CLASSIFICATION	2.345827860414891E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994546525861	WITHOUT_CLASSIFICATION	5.453474137769784E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994546525861	WITHOUT_CLASSIFICATION	5.453474137769784E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999992376909335	WITHOUT_CLASSIFICATION	7.623090666059735E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998516995652	WITHOUT_CLASSIFICATION	1.4830043488554458E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999841403326	WITHOUT_CLASSIFICATION	1.5859667375473434E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999996559484557	WITHOUT_CLASSIFICATION	3.440515442333054E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999992177835011	WITHOUT_CLASSIFICATION	7.822164988752522E-7	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999992940725885	WITHOUT_CLASSIFICATION	7.059274114010096E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999125565487	WITHOUT_CLASSIFICATION	8.744345117611645E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999957190459787	WITHOUT_CLASSIFICATION	4.280954021219138E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999723217109	WITHOUT_CLASSIFICATION	2.7678289112753338E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998995292434	WITHOUT_CLASSIFICATION	1.0047075659709023E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991610990235	WITHOUT_CLASSIFICATION	8.389009764195197E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999955954436558	WITHOUT_CLASSIFICATION	4.404556344205734E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999964942841936	WITHOUT_CLASSIFICATION	3.505715806489368E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999991607387422	WITHOUT_CLASSIFICATION	8.392612578393623E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999997029261307	WITHOUT_CLASSIFICATION	2.9707386919123135E-7	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999996723829869	WITHOUT_CLASSIFICATION	3.2761701304307357E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999955016815587	WITHOUT_CLASSIFICATION	4.498318441335232E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999313163901	WITHOUT_CLASSIFICATION	6.868360988487003E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999997307494386	WITHOUT_CLASSIFICATION	2.692505614517227E-7	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999965990355	WITHOUT_CLASSIFICATION	3.400964486742463E-8	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998984259042	WITHOUT_CLASSIFICATION	1.015740957364069E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999997116508799	WITHOUT_CLASSIFICATION	2.883491201579797E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999994494998914	WITHOUT_CLASSIFICATION	5.505001085824677E-7	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999979780874358	WITHOUT_CLASSIFICATION	2.0219125640916095E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999986801613456	WITHOUT_CLASSIFICATION	1.319838654344563E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999495142106498	WITHOUT_CLASSIFICATION	5.048578935013853E-5	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999999798238278	WITHOUT_CLASSIFICATION	2.017617219564076E-7	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999586510067	WITHOUT_CLASSIFICATION	4.134899343878685E-8	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999963497231	WITHOUT_CLASSIFICATION	3.6502768252014625E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999997561380056	WITHOUT_CLASSIFICATION	2.4386199441866795E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999385059435	WITHOUT_CLASSIFICATION	6.149405650273662E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999686399178	WITHOUT_CLASSIFICATION	3.1360082195824807E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998600064359	WITHOUT_CLASSIFICATION	1.3999356409999275E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999984205906697	WITHOUT_CLASSIFICATION	1.5794093304192788E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999510834879	WITHOUT_CLASSIFICATION	4.891651202051617E-8	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999222258436	WITHOUT_CLASSIFICATION	7.777415649641244E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999990393682326	WITHOUT_CLASSIFICATION	9.606317673356682E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999828197589	WITHOUT_CLASSIFICATION	1.7180241017309343E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999887140687	WITHOUT_CLASSIFICATION	1.1285931406088343E-8	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999882903241942	WITHOUT_CLASSIFICATION	1.1709675805690754E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997007832813	WITHOUT_CLASSIFICATION	2.992167187421594E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999578866239	WITHOUT_CLASSIFICATION	4.211337609545703E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999788413015956	WITHOUT_CLASSIFICATION	2.115869840427309E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999994211981752	WITHOUT_CLASSIFICATION	5.78801824895483E-7	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999924593426	WITHOUT_CLASSIFICATION	7.540657523385912E-9	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999047028688	WITHOUT_CLASSIFICATION	9.52971311387259E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999533683712	WITHOUT_CLASSIFICATION	4.663162873699688E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991257751838	WITHOUT_CLASSIFICATION	8.742248160907192E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999287397935	WITHOUT_CLASSIFICATION	7.126020650154581E-8	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999562523473	WITHOUT_CLASSIFICATION	4.3747652696726485E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999992438650058	WITHOUT_CLASSIFICATION	7.561349940852092E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998348506507	WITHOUT_CLASSIFICATION	1.6514934925521493E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999993060007304	WITHOUT_CLASSIFICATION	6.939992696446607E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999994677993848	WITHOUT_CLASSIFICATION	5.322006153404113E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999999948549061	WITHOUT_CLASSIFICATION	5.145093900507317E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998972840956	WITHOUT_CLASSIFICATION	1.0271590449650933E-7	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995591136571	WITHOUT_CLASSIFICATION	4.408863428884953E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999997003627095	WITHOUT_CLASSIFICATION	2.9963729058129215E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999962670741	WITHOUT_CLASSIFICATION	3.732925801940292E-9	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999959432251314	WITHOUT_CLASSIFICATION	4.056774868583345E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999869053509	WITHOUT_CLASSIFICATION	1.309464926156431E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999957762951	WITHOUT_CLASSIFICATION	4.2237048871499276E-9	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972302458964	WITHOUT_CLASSIFICATION	2.769754103556068E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999812874190576	WITHOUT_CLASSIFICATION	1.8712580942466062E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999875803606789	WITHOUT_CLASSIFICATION	1.2419639321073836E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999989094960156	WITHOUT_CLASSIFICATION	1.090503984484911E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996618902177	WITHOUT_CLASSIFICATION	3.3810978234749315E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972302458964	WITHOUT_CLASSIFICATION	2.769754103556068E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999951754483454	WITHOUT_CLASSIFICATION	4.82455165460532E-6	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997107617365	WITHOUT_CLASSIFICATION	2.892382634289371E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999972758767	WITHOUT_CLASSIFICATION	2.724123302695704E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998072180071	WITHOUT_CLASSIFICATION	1.9278199304929426E-7	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999973055036353	WITHOUT_CLASSIFICATION	2.694496364774636E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999981829792792	WITHOUT_CLASSIFICATION	1.8170207208098066E-6	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999876638569	WITHOUT_CLASSIFICATION	1.2336143081978737E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999325941339	WITHOUT_CLASSIFICATION	6.740586615088725E-8	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998961317007	WITHOUT_CLASSIFICATION	1.038682993514903E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988214446102	WITHOUT_CLASSIFICATION	1.178555389871875E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999826953522913	WITHOUT_CLASSIFICATION	1.7304647708732707E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999902386495901	WITHOUT_CLASSIFICATION	9.761350409898621E-6	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999974586162207	WITHOUT_CLASSIFICATION	2.5413837793763885E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999683805012	WITHOUT_CLASSIFICATION	3.161949868398707E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999996087927319	WITHOUT_CLASSIFICATION	3.912072681061428E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999112918418	WITHOUT_CLASSIFICATION	8.870815814137919E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999743694021	WITHOUT_CLASSIFICATION	2.5630597881299933E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997525058107	WITHOUT_CLASSIFICATION	2.4749418926886345E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999992799915594	WITHOUT_CLASSIFICATION	7.200084406613146E-7	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999982303621724	WITHOUT_CLASSIFICATION	1.7696378275379985E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999492826099	WITHOUT_CLASSIFICATION	5.071739015315533E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999830095183	WITHOUT_CLASSIFICATION	1.6990481652904033E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999998097561354	WITHOUT_CLASSIFICATION	1.902438644723077E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999902068638	WITHOUT_CLASSIFICATION	9.793136284879061E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999638808765	WITHOUT_CLASSIFICATION	3.611912350360457E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999991268871767	WITHOUT_CLASSIFICATION	8.731128232479345E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999999942494845	WITHOUT_CLASSIFICATION	5.750515523148575E-9	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999993200971361	WITHOUT_CLASSIFICATION	6.799028638193622E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999928949985	WITHOUT_CLASSIFICATION	7.105001474568772E-9	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999988486814342	WITHOUT_CLASSIFICATION	1.1513185658728935E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999933705846517	WITHOUT_CLASSIFICATION	6.629415348291409E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999968435185925	WITHOUT_CLASSIFICATION	3.1564814075975565E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999982996008835	WITHOUT_CLASSIFICATION	1.7003991165014747E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999997410954216	WITHOUT_CLASSIFICATION	2.589045784578677E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999101906594	WITHOUT_CLASSIFICATION	8.980934065556256E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999987276919118	WITHOUT_CLASSIFICATION	1.2723080881761348E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999300556186	WITHOUT_CLASSIFICATION	6.99443814453088E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999971663602	WITHOUT_CLASSIFICATION	2.8336397232588965E-9	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998917636879	WITHOUT_CLASSIFICATION	1.0823631208297691E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992819172097	WITHOUT_CLASSIFICATION	7.180827903512675E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999918807161381	WITHOUT_CLASSIFICATION	8.119283861934675E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999918807161381	WITHOUT_CLASSIFICATION	8.119283861934675E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999960040135797	WITHOUT_CLASSIFICATION	3.995986420247928E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997851790146	WITHOUT_CLASSIFICATION	2.1482098549801973E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999962545062498	WITHOUT_CLASSIFICATION	3.745493750188636E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9998364209277426	WITHOUT_CLASSIFICATION	1.635790722573997E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999965700177812	WITHOUT_CLASSIFICATION	3.4299822188526546E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999965700177812	WITHOUT_CLASSIFICATION	3.4299822188526546E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999664128491195	WITHOUT_CLASSIFICATION	3.358715088049602E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999939071188123	WITHOUT_CLASSIFICATION	6.092881187725249E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998818083056417	WITHOUT_CLASSIFICATION	1.1819169435828679E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999931686873136	WITHOUT_CLASSIFICATION	6.831312686390658E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999992108358	WITHOUT_CLASSIFICATION	7.891642873220737E-10	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999997020382448	WITHOUT_CLASSIFICATION	2.9796175520329453E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999994728375703	WITHOUT_CLASSIFICATION	5.271624296773713E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999993249128145	WITHOUT_CLASSIFICATION	6.750871854717409E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999902622755	WITHOUT_CLASSIFICATION	9.737724529612804E-9	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961573617163	WITHOUT_CLASSIFICATION	3.842638283689234E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961573617163	WITHOUT_CLASSIFICATION	3.842638283689234E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999896228394736	WITHOUT_CLASSIFICATION	1.0377160526299368E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999825126131408	WITHOUT_CLASSIFICATION	1.7487386859313542E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999919599736434	WITHOUT_CLASSIFICATION	8.04002635651123E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999821571438379	WITHOUT_CLASSIFICATION	1.7842856162157862E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998438668458217	WITHOUT_CLASSIFICATION	1.5613315417836173E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942059887218	WITHOUT_CLASSIFICATION	5.794011278132956E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244435236236	WITHOUT_CLASSIFICATION	7.555647637633972E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997590569037	WITHOUT_CLASSIFICATION	2.4094309624061066E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999956910873312	WITHOUT_CLASSIFICATION	4.308912668759492E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999976773117402	WITHOUT_CLASSIFICATION	2.3226882598764865E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999114354733	WITHOUT_CLASSIFICATION	8.856452677006415E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988214446102	WITHOUT_CLASSIFICATION	1.178555389871875E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999990264784837	WITHOUT_CLASSIFICATION	9.735215162636022E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999084013833522	WITHOUT_CLASSIFICATION	9.159861664779632E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999857020214	WITHOUT_CLASSIFICATION	1.4297978602405635E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999908887923296	WITHOUT_CLASSIFICATION	9.111207670435415E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999954963959108	WITHOUT_CLASSIFICATION	4.503604089164287E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999967625924465	WITHOUT_CLASSIFICATION	3.2374075534407298E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999930852290652	WITHOUT_CLASSIFICATION	6.914770934819621E-6	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999553737968	WITHOUT_CLASSIFICATION	4.4626203151820856E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999975501832836	WITHOUT_CLASSIFICATION	2.4498167162702203E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999994501657743	WITHOUT_CLASSIFICATION	5.49834225745532E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999994501657743	WITHOUT_CLASSIFICATION	5.49834225745532E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999700364874	WITHOUT_CLASSIFICATION	2.996351260094943E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999876545885	WITHOUT_CLASSIFICATION	1.2345411425006219E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999688549954141	WITHOUT_CLASSIFICATION	3.1145004585833775E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999887665765286	WITHOUT_CLASSIFICATION	1.1233423471302857E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999971789203366	WITHOUT_CLASSIFICATION	2.8210796634360047E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999249863398	WITHOUT_CLASSIFICATION	7.501366024673056E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992701232967	WITHOUT_CLASSIFICATION	7.298767032514412E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999945847748	WITHOUT_CLASSIFICATION	5.415225102579654E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999980508312099	WITHOUT_CLASSIFICATION	1.9491687901564076E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999067653438	WITHOUT_CLASSIFICATION	9.323465619520333E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889421101106	WITHOUT_CLASSIFICATION	1.105788988937692E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999996166164833	WITHOUT_CLASSIFICATION	3.833835167698375E-7	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997493670241	WITHOUT_CLASSIFICATION	2.5063297591648373E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999983982161	WITHOUT_CLASSIFICATION	1.6017839039469128E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999997542323098	WITHOUT_CLASSIFICATION	2.4576769019350652E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999984981484151	WITHOUT_CLASSIFICATION	1.501851584826827E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999996588163952	WITHOUT_CLASSIFICATION	3.4118360486571483E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985488368115	WITHOUT_CLASSIFICATION	1.4511631884099231E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999997355541906	WITHOUT_CLASSIFICATION	2.644458094257232E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998279454896	WITHOUT_CLASSIFICATION	1.720545104056411E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999984928011673	WITHOUT_CLASSIFICATION	1.5071988327465962E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.99999999167202	WITHOUT_CLASSIFICATION	8.327979992935536E-9	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998673538862	WITHOUT_CLASSIFICATION	1.3264611386600878E-7	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999922052998	WITHOUT_CLASSIFICATION	7.794700321058167E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998097468775	WITHOUT_CLASSIFICATION	1.9025312244880938E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998097468775	WITHOUT_CLASSIFICATION	1.9025312244880938E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999997216085024	WITHOUT_CLASSIFICATION	2.78391497664596E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999881223728	WITHOUT_CLASSIFICATION	1.1877627164889491E-8	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999998523079621	WITHOUT_CLASSIFICATION	1.4769203797754632E-7	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999560926168	WITHOUT_CLASSIFICATION	4.390738326683709E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999960063792579	WITHOUT_CLASSIFICATION	3.993620742036162E-6	TEST
