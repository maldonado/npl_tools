//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9988311601753227	WITHOUT_CLASSIFICATION	0.0011688398246772116	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999988771819357	WITHOUT_CLASSIFICATION	1.1228180643088424E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989576380633	WITHOUT_CLASSIFICATION	1.042361936662308E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999976753266843	WITHOUT_CLASSIFICATION	2.3246733158142373E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986168551104	WITHOUT_CLASSIFICATION	1.3831448895756324E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986168551104	WITHOUT_CLASSIFICATION	1.3831448895756324E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999997931912746	WITHOUT_CLASSIFICATION	2.0680872539144436E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981036227933	WITHOUT_CLASSIFICATION	1.8963772066655092E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999909234112576	WITHOUT_CLASSIFICATION	9.076588742375209E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999993808570202	WITHOUT_CLASSIFICATION	6.191429797128975E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999970077744482	WITHOUT_CLASSIFICATION	2.9922255517183025E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999970077744482	WITHOUT_CLASSIFICATION	2.9922255517183025E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.999995758175639	WITHOUT_CLASSIFICATION	4.241824360955172E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999997868834032	WITHOUT_CLASSIFICATION	2.1311659672111417E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999363420505	WITHOUT_CLASSIFICATION	6.36579494954628E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999979037775966	WITHOUT_CLASSIFICATION	2.0962224035183088E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999796573764	WITHOUT_CLASSIFICATION	2.034262357329721E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999918903401321	WITHOUT_CLASSIFICATION	8.109659867964382E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999817869205564	WITHOUT_CLASSIFICATION	1.8213079443662728E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999880385348274	WITHOUT_CLASSIFICATION	1.1961465172507182E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999981269955326	WITHOUT_CLASSIFICATION	1.87300446739539E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998637712822736	WITHOUT_CLASSIFICATION	1.3622871772644716E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999866671025716	WITHOUT_CLASSIFICATION	1.333289742840293E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999898171357609	WITHOUT_CLASSIFICATION	1.018286423915688E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999990734761951	WITHOUT_CLASSIFICATION	9.265238047902224E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999882654860569	WITHOUT_CLASSIFICATION	1.1734513943175615E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999882654860569	WITHOUT_CLASSIFICATION	1.1734513943175615E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999999865035299	WITHOUT_CLASSIFICATION	1.3496470098499615E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999881554333768	WITHOUT_CLASSIFICATION	1.1844566623145736E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999995864223125	WITHOUT_CLASSIFICATION	4.1357768750486753E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991566915435	WITHOUT_CLASSIFICATION	8.433084564904679E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999862073082	WITHOUT_CLASSIFICATION	1.3792691834003138E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.5438653466804595	WITHOUT_CLASSIFICATION	0.45613465331954045	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5438653466804595	WITHOUT_CLASSIFICATION	0.45613465331954045	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999861284759306	WITHOUT_CLASSIFICATION	1.3871524069253605E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999871781309	WITHOUT_CLASSIFICATION	1.2821869169562607E-8	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999967805263	WITHOUT_CLASSIFICATION	3.2194736627445195E-9	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902904958076	WITHOUT_CLASSIFICATION	9.70950419248799E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999996278008245	WITHOUT_CLASSIFICATION	3.721991755148542E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905075372274	WITHOUT_CLASSIFICATION	9.49246277262668E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912838069613	WITHOUT_CLASSIFICATION	8.71619303860787E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994622916184	WITHOUT_CLASSIFICATION	5.377083815798485E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999780267309334	WITHOUT_CLASSIFICATION	2.1973269066499798E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999890451665	WITHOUT_CLASSIFICATION	1.0954833440585954E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999969715929243	WITHOUT_CLASSIFICATION	3.028407075718341E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999780267309334	WITHOUT_CLASSIFICATION	2.1973269066499798E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999969715929243	WITHOUT_CLASSIFICATION	3.028407075718341E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999983334924243	WITHOUT_CLASSIFICATION	1.666507575643398E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999984226538073	WITHOUT_CLASSIFICATION	1.577346192654904E-6	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999997565715133	WITHOUT_CLASSIFICATION	2.4342848670334154E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999593714345	WITHOUT_CLASSIFICATION	4.062856555466883E-8	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999655270283	WITHOUT_CLASSIFICATION	3.4472971773530017E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999890183524393	WITHOUT_CLASSIFICATION	1.0981647560716589E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999949550399981	WITHOUT_CLASSIFICATION	5.044960001857927E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999932392218382	WITHOUT_CLASSIFICATION	6.760778161728733E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998849539166	WITHOUT_CLASSIFICATION	1.1504608335815518E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999900804793094	WITHOUT_CLASSIFICATION	9.919520690698577E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999959054083597	WITHOUT_CLASSIFICATION	4.094591640279053E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999993291291447	WITHOUT_CLASSIFICATION	6.708708553643267E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999952440486	WITHOUT_CLASSIFICATION	4.755951413773364E-9	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999999738438075	WITHOUT_CLASSIFICATION	2.6156192503588065E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999992432022031	WITHOUT_CLASSIFICATION	7.567977967511061E-7	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999997435757219	WITHOUT_CLASSIFICATION	2.5642427817248335E-7	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999987548604063	WITHOUT_CLASSIFICATION	1.245139593665432E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999107846919	WITHOUT_CLASSIFICATION	8.921530806708942E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998682542357	WITHOUT_CLASSIFICATION	1.3174576433081455E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996587488674	WITHOUT_CLASSIFICATION	3.412511324918976E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999989902405637	WITHOUT_CLASSIFICATION	1.0097594363100419E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998001595333	WITHOUT_CLASSIFICATION	1.9984046674046868E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996273433319	WITHOUT_CLASSIFICATION	3.726566680579538E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999974573724681	WITHOUT_CLASSIFICATION	2.5426275318816178E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999895969882227	WITHOUT_CLASSIFICATION	1.040301177738565E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999995071716077	WITHOUT_CLASSIFICATION	4.928283923664262E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999997295491684	WITHOUT_CLASSIFICATION	2.704508316119833E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999985595826953	WITHOUT_CLASSIFICATION	1.4404173046272341E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999975836521504	WITHOUT_CLASSIFICATION	2.416347849501914E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999830944489	WITHOUT_CLASSIFICATION	1.6905551035315687E-8	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999637156047	WITHOUT_CLASSIFICATION	3.628439527513753E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999982738830272	WITHOUT_CLASSIFICATION	1.7261169727632468E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999994194059024	WITHOUT_CLASSIFICATION	5.805940976756143E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998124322187	WITHOUT_CLASSIFICATION	1.87567781408632E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999981899222191	WITHOUT_CLASSIFICATION	1.8100777807996447E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999848111075	WITHOUT_CLASSIFICATION	1.518889248042675E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998124322187	WITHOUT_CLASSIFICATION	1.87567781408632E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999950118688	WITHOUT_CLASSIFICATION	4.988131151156612E-9	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999995281530403	WITHOUT_CLASSIFICATION	4.718469598173218E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999980492381735	WITHOUT_CLASSIFICATION	1.9507618265433965E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999986861111082	WITHOUT_CLASSIFICATION	1.3138888918024261E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999993646064617	WITHOUT_CLASSIFICATION	6.353935383790137E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999313206861	WITHOUT_CLASSIFICATION	6.867931384967909E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999313206861	WITHOUT_CLASSIFICATION	6.867931384967909E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999964086123425	WITHOUT_CLASSIFICATION	3.5913876574806036E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999697357892	WITHOUT_CLASSIFICATION	3.026421077875546E-8	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999613756502216	WITHOUT_CLASSIFICATION	3.8624349778387164E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999996488264368	WITHOUT_CLASSIFICATION	3.5117356328343146E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999562576042	WITHOUT_CLASSIFICATION	4.374239584326726E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999997954385271	WITHOUT_CLASSIFICATION	2.0456147283036908E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999980404128062	WITHOUT_CLASSIFICATION	1.9595871937640752E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999998484648271	WITHOUT_CLASSIFICATION	1.5153517286336014E-7	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999992892451911	WITHOUT_CLASSIFICATION	7.107548090229412E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999985361925028	WITHOUT_CLASSIFICATION	1.4638074972334817E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997678121711	WITHOUT_CLASSIFICATION	2.3218782884672513E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997678121711	WITHOUT_CLASSIFICATION	2.3218782884672513E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999989064063112	WITHOUT_CLASSIFICATION	1.0935936888158198E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999986046757041	WITHOUT_CLASSIFICATION	1.3953242958360356E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999971693429306	WITHOUT_CLASSIFICATION	2.8306570693139327E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997678121711	WITHOUT_CLASSIFICATION	2.3218782884672513E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999989064063112	WITHOUT_CLASSIFICATION	1.0935936888158198E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999989064063112	WITHOUT_CLASSIFICATION	1.0935936888158198E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999981481489523	WITHOUT_CLASSIFICATION	1.8518510476619791E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999993938936846	WITHOUT_CLASSIFICATION	6.061063154513858E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997741707455	WITHOUT_CLASSIFICATION	2.2582925438714527E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999991337714688	WITHOUT_CLASSIFICATION	8.662285311811276E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999927460306	WITHOUT_CLASSIFICATION	7.253969396573855E-8	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999999927460306	WITHOUT_CLASSIFICATION	7.253969396573855E-8	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999979097134482	WITHOUT_CLASSIFICATION	2.090286551875064E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999982989604126	WITHOUT_CLASSIFICATION	1.7010395874059908E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999960208201478	WITHOUT_CLASSIFICATION	3.979179852178989E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999962956855588	WITHOUT_CLASSIFICATION	3.7043144412261875E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999962956855588	WITHOUT_CLASSIFICATION	3.7043144412261875E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999955666042833	WITHOUT_CLASSIFICATION	4.433395716652618E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999995117597104	WITHOUT_CLASSIFICATION	4.882402896469407E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999408709508848	WITHOUT_CLASSIFICATION	5.9129049115254584E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998913296972	WITHOUT_CLASSIFICATION	1.0867030271807491E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999997488380759	WITHOUT_CLASSIFICATION	2.5116192409988046E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997500687371	WITHOUT_CLASSIFICATION	2.4993126289396375E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999960015951612	WITHOUT_CLASSIFICATION	3.998404838833996E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999986454306729	WITHOUT_CLASSIFICATION	1.3545693270967768E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.999983994994373	WITHOUT_CLASSIFICATION	1.6005005627049845E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999408709508848	WITHOUT_CLASSIFICATION	5.9129049115254584E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999601878133132	WITHOUT_CLASSIFICATION	3.9812186686795584E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999975603496869	WITHOUT_CLASSIFICATION	2.4396503130047525E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999975603496869	WITHOUT_CLASSIFICATION	2.4396503130047525E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999770179846	WITHOUT_CLASSIFICATION	2.2982015336351087E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999999168730667	WITHOUT_CLASSIFICATION	8.312693335868897E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997604283201	WITHOUT_CLASSIFICATION	2.395716800121729E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999990053793931	WITHOUT_CLASSIFICATION	9.946206069231833E-7	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999878377628972	WITHOUT_CLASSIFICATION	1.216223710265799E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.999974212164309	WITHOUT_CLASSIFICATION	2.5787835691012737E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999991413086398	WITHOUT_CLASSIFICATION	8.586913602088617E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999999889284399	WITHOUT_CLASSIFICATION	1.1071560108088739E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997651688196	WITHOUT_CLASSIFICATION	2.3483118034799127E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997651688196	WITHOUT_CLASSIFICATION	2.3483118034799127E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9988311601753227	WITHOUT_CLASSIFICATION	0.0011688398246772116	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999989168661021	WITHOUT_CLASSIFICATION	1.0831338979232378E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.999998692042445	WITHOUT_CLASSIFICATION	1.3079575549975805E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999969803934536	WITHOUT_CLASSIFICATION	3.0196065462610167E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999984314304647	WITHOUT_CLASSIFICATION	1.5685695353161894E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999988058182442	WITHOUT_CLASSIFICATION	1.1941817558977481E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999979638114644	WITHOUT_CLASSIFICATION	2.0361885355794947E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995674202099	WITHOUT_CLASSIFICATION	4.325797901344721E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999969189511526	WITHOUT_CLASSIFICATION	3.0810488473829153E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.999992242805075	WITHOUT_CLASSIFICATION	7.757194925064243E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999982418161828	WITHOUT_CLASSIFICATION	1.7581838171670574E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989576380633	WITHOUT_CLASSIFICATION	1.042361936662308E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985602816399	WITHOUT_CLASSIFICATION	1.4397183600672248E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985602816399	WITHOUT_CLASSIFICATION	1.4397183600672248E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999973772982387	WITHOUT_CLASSIFICATION	2.622701761216769E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999999007397218	WITHOUT_CLASSIFICATION	9.926027819686619E-7	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999532958515	WITHOUT_CLASSIFICATION	4.670414860206196E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999946779366643	WITHOUT_CLASSIFICATION	5.322063335780161E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999983990127168	WITHOUT_CLASSIFICATION	1.6009872831849818E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999996348859458	WITHOUT_CLASSIFICATION	3.651140543089852E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986168551104	WITHOUT_CLASSIFICATION	1.3831448895756324E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997852411981	WITHOUT_CLASSIFICATION	2.1475880195396103E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999948464086916	WITHOUT_CLASSIFICATION	5.153591308336988E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999980149791649	WITHOUT_CLASSIFICATION	1.9850208351115783E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999984778784335	WITHOUT_CLASSIFICATION	1.5221215664553131E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999978465006922	WITHOUT_CLASSIFICATION	2.1534993077690758E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.999995455614037	WITHOUT_CLASSIFICATION	4.544385962919484E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999976939856094	WITHOUT_CLASSIFICATION	2.3060143904664267E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999996625077056	WITHOUT_CLASSIFICATION	3.374922943624548E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999992262721838	WITHOUT_CLASSIFICATION	7.737278162539469E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999986145853822	WITHOUT_CLASSIFICATION	1.38541461786394E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998278684115	WITHOUT_CLASSIFICATION	1.7213158846792994E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997926804411	WITHOUT_CLASSIFICATION	2.0731955881442003E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999965354773268	WITHOUT_CLASSIFICATION	3.4645226731398693E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.999992242805075	WITHOUT_CLASSIFICATION	7.757194925064243E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985602816399	WITHOUT_CLASSIFICATION	1.4397183600672248E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999976939856094	WITHOUT_CLASSIFICATION	2.3060143904664267E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999997931912746	WITHOUT_CLASSIFICATION	2.0680872539144436E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998385586879	WITHOUT_CLASSIFICATION	1.6144131204252928E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999994642910363	WITHOUT_CLASSIFICATION	5.357089637121486E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999997701441986	WITHOUT_CLASSIFICATION	2.2985580140921547E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999955307166035	WITHOUT_CLASSIFICATION	4.469283396393688E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997364631413	WITHOUT_CLASSIFICATION	2.6353685865362073E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999974398805401	WITHOUT_CLASSIFICATION	2.560119459935687E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999988966090693	WITHOUT_CLASSIFICATION	1.1033909307523461E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999456361718964	WITHOUT_CLASSIFICATION	5.436382810354489E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999977305589243	WITHOUT_CLASSIFICATION	2.269441075645889E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999913350368103	WITHOUT_CLASSIFICATION	8.664963189822785E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999913350368103	WITHOUT_CLASSIFICATION	8.664963189822785E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999966010832516	WITHOUT_CLASSIFICATION	3.398916748412486E-6	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999973563802793	WITHOUT_CLASSIFICATION	2.643619720579439E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999936953208247	WITHOUT_CLASSIFICATION	6.304679175370072E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999976421142636	WITHOUT_CLASSIFICATION	2.3578857364352227E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999969535132661	WITHOUT_CLASSIFICATION	3.04648673382471E-6	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999992584240435	WITHOUT_CLASSIFICATION	7.415759566354228E-7	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999828039861733	WITHOUT_CLASSIFICATION	1.7196013826715708E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981036227933	WITHOUT_CLASSIFICATION	1.8963772066655092E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999966867487216	WITHOUT_CLASSIFICATION	3.3132512785536294E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997636837508	WITHOUT_CLASSIFICATION	2.3631624925534252E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997636837508	WITHOUT_CLASSIFICATION	2.3631624925534252E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999993523809024	WITHOUT_CLASSIFICATION	6.476190975927144E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999978905677193	WITHOUT_CLASSIFICATION	2.109432280793243E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999995012249521	WITHOUT_CLASSIFICATION	4.987750478976429E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997487664353	WITHOUT_CLASSIFICATION	2.5123356471053345E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999970046649012	WITHOUT_CLASSIFICATION	2.9953350989755787E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999985031979381	WITHOUT_CLASSIFICATION	1.496802061904831E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.999992242805075	WITHOUT_CLASSIFICATION	7.757194925064243E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989576380633	WITHOUT_CLASSIFICATION	1.042361936662308E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999976939856094	WITHOUT_CLASSIFICATION	2.3060143904664267E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999976939856094	WITHOUT_CLASSIFICATION	2.3060143904664267E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999985244391327	WITHOUT_CLASSIFICATION	1.4755608672170502E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999985244391327	WITHOUT_CLASSIFICATION	1.4755608672170502E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999985880097417	WITHOUT_CLASSIFICATION	1.4119902582347654E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999970037981121	WITHOUT_CLASSIFICATION	2.9962018879911014E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999970037981121	WITHOUT_CLASSIFICATION	2.9962018879911014E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.999986220724817	WITHOUT_CLASSIFICATION	1.3779275183018585E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999986690930514	WITHOUT_CLASSIFICATION	1.330906948625819E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999925780423378	WITHOUT_CLASSIFICATION	7.42195766228996E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999588610676897	WITHOUT_CLASSIFICATION	4.113893231027662E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999999553470356	WITHOUT_CLASSIFICATION	4.465296440195819E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999993808570202	WITHOUT_CLASSIFICATION	6.191429797128975E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999993808570202	WITHOUT_CLASSIFICATION	6.191429797128975E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999980210564913	WITHOUT_CLASSIFICATION	1.978943508796412E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999996974155413	WITHOUT_CLASSIFICATION	3.0258445871402784E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999977062723019	WITHOUT_CLASSIFICATION	2.2937276981239667E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999937474158944	WITHOUT_CLASSIFICATION	6.25258410559348E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.999994564656322	WITHOUT_CLASSIFICATION	5.435343677983266E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999916614468265	WITHOUT_CLASSIFICATION	8.338553173593788E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999970077744482	WITHOUT_CLASSIFICATION	2.9922255517183025E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999936451575859	WITHOUT_CLASSIFICATION	6.354842414095324E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999936451575859	WITHOUT_CLASSIFICATION	6.354842414095324E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.999995758175639	WITHOUT_CLASSIFICATION	4.241824360955172E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.999995758175639	WITHOUT_CLASSIFICATION	4.241824360955172E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999971899297234	WITHOUT_CLASSIFICATION	2.810070276555135E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999971899297234	WITHOUT_CLASSIFICATION	2.810070276555135E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962734407372	WITHOUT_CLASSIFICATION	3.7265592628947614E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962734407372	WITHOUT_CLASSIFICATION	3.7265592628947614E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999993808570202	WITHOUT_CLASSIFICATION	6.191429797128975E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999970077744482	WITHOUT_CLASSIFICATION	2.9922255517183025E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999936451575859	WITHOUT_CLASSIFICATION	6.354842414095324E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999936451575859	WITHOUT_CLASSIFICATION	6.354842414095324E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.999995758175639	WITHOUT_CLASSIFICATION	4.241824360955172E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999971899297234	WITHOUT_CLASSIFICATION	2.810070276555135E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999971899297234	WITHOUT_CLASSIFICATION	2.810070276555135E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962734407372	WITHOUT_CLASSIFICATION	3.7265592628947614E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993902741443	WITHOUT_CLASSIFICATION	6.097258557130098E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999984044284641	WITHOUT_CLASSIFICATION	1.5955715358948814E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999951032037646	WITHOUT_CLASSIFICATION	4.896796235365004E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999987586293033	WITHOUT_CLASSIFICATION	1.241370696595591E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.99998725613637	WITHOUT_CLASSIFICATION	1.2743863630005289E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999964191383327	WITHOUT_CLASSIFICATION	3.5808616672509846E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999997261683967	WITHOUT_CLASSIFICATION	2.738316033046096E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999988383723604	WITHOUT_CLASSIFICATION	1.1616276395824868E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999988308664269	WITHOUT_CLASSIFICATION	1.1691335730250979E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996873585681	WITHOUT_CLASSIFICATION	3.126414318327618E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999992629113856	WITHOUT_CLASSIFICATION	7.37088614360472E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999981033473789	WITHOUT_CLASSIFICATION	1.8966526211247762E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999964086123425	WITHOUT_CLASSIFICATION	3.5913876574806036E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999964191383327	WITHOUT_CLASSIFICATION	3.5808616672509846E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999410193846646	WITHOUT_CLASSIFICATION	5.898061533532652E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999410193846646	WITHOUT_CLASSIFICATION	5.898061533532652E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999888741603182	WITHOUT_CLASSIFICATION	1.1125839681780027E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999673374651	WITHOUT_CLASSIFICATION	3.2662534905772807E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999673374651	WITHOUT_CLASSIFICATION	3.2662534905772807E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999998834145819	WITHOUT_CLASSIFICATION	1.1658541810929887E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999976951890104	WITHOUT_CLASSIFICATION	2.304810989621135E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999970436730098	WITHOUT_CLASSIFICATION	2.9563269901617065E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998913931383	WITHOUT_CLASSIFICATION	1.0860686172383048E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998913931383	WITHOUT_CLASSIFICATION	1.0860686172383048E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999796573764	WITHOUT_CLASSIFICATION	2.034262357329721E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999980112332	WITHOUT_CLASSIFICATION	1.9887667184661993E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999980112332	WITHOUT_CLASSIFICATION	1.9887667184661993E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999999887756224	WITHOUT_CLASSIFICATION	1.1224377690085115E-8	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999968199165866	WITHOUT_CLASSIFICATION	3.18008341342968E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.99999894913144	WITHOUT_CLASSIFICATION	1.0508685600131293E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999862481571322	WITHOUT_CLASSIFICATION	1.3751842867757234E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.999992255100152	WITHOUT_CLASSIFICATION	7.744899848102186E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999869692077344	WITHOUT_CLASSIFICATION	1.3030792265590783E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999918903401321	WITHOUT_CLASSIFICATION	8.109659867964382E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999908174860174	WITHOUT_CLASSIFICATION	9.182513982632818E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9990667685925607	WITHOUT_CLASSIFICATION	9.332314074392727E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999731454228789	WITHOUT_CLASSIFICATION	2.6854577121103986E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999785931398169	WITHOUT_CLASSIFICATION	2.1406860183082455E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999981269955326	WITHOUT_CLASSIFICATION	1.87300446739539E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996656375046	WITHOUT_CLASSIFICATION	3.3436249534796657E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999961774616299	WITHOUT_CLASSIFICATION	3.822538370008226E-6	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999985155801039	WITHOUT_CLASSIFICATION	1.4844198961887724E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999981269955326	WITHOUT_CLASSIFICATION	1.87300446739539E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999994682287677	WITHOUT_CLASSIFICATION	5.317712323109562E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998600512668	WITHOUT_CLASSIFICATION	1.399487331488604E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999853521252066	WITHOUT_CLASSIFICATION	1.4647874793461538E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999769511101798	WITHOUT_CLASSIFICATION	2.3048889820200694E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999932523441196	WITHOUT_CLASSIFICATION	6.747655880372416E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999897402621525	WITHOUT_CLASSIFICATION	1.0259737847484813E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999781405400632	WITHOUT_CLASSIFICATION	2.185945993683269E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999898171357609	WITHOUT_CLASSIFICATION	1.018286423915688E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999876224253008	WITHOUT_CLASSIFICATION	1.2377574699122132E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999990734761951	WITHOUT_CLASSIFICATION	9.265238047902224E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999970270051519	WITHOUT_CLASSIFICATION	2.9729948480553465E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999986850162846	WITHOUT_CLASSIFICATION	1.3149837153919086E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999876819314527	WITHOUT_CLASSIFICATION	1.2318068547266279E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999918903401321	WITHOUT_CLASSIFICATION	8.109659867964382E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999876224253008	WITHOUT_CLASSIFICATION	1.2377574699122132E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999970270051519	WITHOUT_CLASSIFICATION	2.9729948480553465E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999876819314527	WITHOUT_CLASSIFICATION	1.2318068547266279E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992663402235	WITHOUT_CLASSIFICATION	7.336597764599276E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999801348873177	WITHOUT_CLASSIFICATION	1.986511268220595E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994850141709	WITHOUT_CLASSIFICATION	5.149858291965741E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999882654860569	WITHOUT_CLASSIFICATION	1.1734513943175615E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999885897683415	WITHOUT_CLASSIFICATION	1.1410231658644739E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.99999952591061	WITHOUT_CLASSIFICATION	4.740893899254648E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999863498363547	WITHOUT_CLASSIFICATION	1.3650163645328415E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999990507350371	WITHOUT_CLASSIFICATION	9.492649627796376E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999921184619538	WITHOUT_CLASSIFICATION	7.881538046182049E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997338536958	WITHOUT_CLASSIFICATION	2.6614630413971414E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999956008449189	WITHOUT_CLASSIFICATION	4.399155081107551E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999992994001552	WITHOUT_CLASSIFICATION	7.005998447069117E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999246342051	WITHOUT_CLASSIFICATION	7.536579490030494E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999932543542434	WITHOUT_CLASSIFICATION	6.745645756720674E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.999987792204163	WITHOUT_CLASSIFICATION	1.2207795836947304E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999992062036301	WITHOUT_CLASSIFICATION	7.937963699014539E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999881554333768	WITHOUT_CLASSIFICATION	1.1844566623145736E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999907215751723	WITHOUT_CLASSIFICATION	9.278424827751333E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999897798838685	WITHOUT_CLASSIFICATION	1.0220116131424432E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999876224253008	WITHOUT_CLASSIFICATION	1.2377574699122132E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999988172329717	WITHOUT_CLASSIFICATION	1.1827670282700764E-6	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993910318778	WITHOUT_CLASSIFICATION	6.089681220920144E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999986841456397	WITHOUT_CLASSIFICATION	1.3158543602768493E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999842763776429	WITHOUT_CLASSIFICATION	1.5723622357194204E-5	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999919714140367	WITHOUT_CLASSIFICATION	8.028585963225134E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999996834828916	WITHOUT_CLASSIFICATION	3.1651710836318366E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999391553605	WITHOUT_CLASSIFICATION	6.08446394773827E-8	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999990193862154	WITHOUT_CLASSIFICATION	9.806137846150628E-7	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999854093428054	WITHOUT_CLASSIFICATION	1.4590657194567816E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999854996849007	WITHOUT_CLASSIFICATION	1.45003150992702E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999842096881874	WITHOUT_CLASSIFICATION	1.5790311812589298E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999876752882759	WITHOUT_CLASSIFICATION	1.2324711724134983E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999998488451387	WITHOUT_CLASSIFICATION	1.5115486123378954E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991566915435	WITHOUT_CLASSIFICATION	8.433084564904679E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999992212034621	WITHOUT_CLASSIFICATION	7.787965378705549E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999998510686611	WITHOUT_CLASSIFICATION	1.4893133889425782E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999976185624168	WITHOUT_CLASSIFICATION	2.381437583281137E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999979140313016	WITHOUT_CLASSIFICATION	2.085968698514393E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999958268585866	WITHOUT_CLASSIFICATION	4.173141413343732E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995122148158	WITHOUT_CLASSIFICATION	4.877851842933918E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999781654897	WITHOUT_CLASSIFICATION	2.1834510252558053E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999698517562	WITHOUT_CLASSIFICATION	3.014824380780532E-8	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.99999857783656	WITHOUT_CLASSIFICATION	1.422163439983088E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999968857261279	WITHOUT_CLASSIFICATION	3.114273872173664E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999998340272448	WITHOUT_CLASSIFICATION	1.6597275519663755E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999998340272448	WITHOUT_CLASSIFICATION	1.6597275519663755E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999810304803649	WITHOUT_CLASSIFICATION	1.896951963502719E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999996854554427	WITHOUT_CLASSIFICATION	3.1454455732864844E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.99999701176716	WITHOUT_CLASSIFICATION	2.988232840042861E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999994284209494	WITHOUT_CLASSIFICATION	5.715790506079941E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999982758953518	WITHOUT_CLASSIFICATION	1.7241046480884352E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999910515474719	WITHOUT_CLASSIFICATION	8.948452528101888E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999996681556114	WITHOUT_CLASSIFICATION	3.31844388571184E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999999519484331	WITHOUT_CLASSIFICATION	4.805156690864398E-7	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999986422733413	WITHOUT_CLASSIFICATION	1.3577266585730249E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999984669417146	WITHOUT_CLASSIFICATION	1.5330582853924617E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999969338225115	WITHOUT_CLASSIFICATION	3.0661774885895396E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999941989826983	WITHOUT_CLASSIFICATION	5.801017301704975E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999990521412923	WITHOUT_CLASSIFICATION	9.47858707672072E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999991699907105	WITHOUT_CLASSIFICATION	8.300092895583585E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809144534573	WITHOUT_CLASSIFICATION	1.9085546542712368E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942685672396	WITHOUT_CLASSIFICATION	5.731432760438069E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999993449639686	WITHOUT_CLASSIFICATION	6.550360313957314E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999995366558966	WITHOUT_CLASSIFICATION	4.633441033662459E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998349610046	WITHOUT_CLASSIFICATION	1.6503899544668723E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999961501277433	WITHOUT_CLASSIFICATION	3.849872256560064E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999931554261609	WITHOUT_CLASSIFICATION	6.844573839080608E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999931554261609	WITHOUT_CLASSIFICATION	6.844573839080608E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999877696121092	WITHOUT_CLASSIFICATION	1.2230387890816517E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999877696121092	WITHOUT_CLASSIFICATION	1.2230387890816517E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.99999857783656	WITHOUT_CLASSIFICATION	1.422163439983088E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999874322315371	WITHOUT_CLASSIFICATION	1.2567768462926709E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999528177532029	WITHOUT_CLASSIFICATION	4.7182246796991673E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997348918088667	WITHOUT_CLASSIFICATION	2.65108191133315E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999528177532029	WITHOUT_CLASSIFICATION	4.7182246796991673E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997348918088667	WITHOUT_CLASSIFICATION	2.65108191133315E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999968120115722	WITHOUT_CLASSIFICATION	3.187988427794061E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995879771306	WITHOUT_CLASSIFICATION	4.1202286936643565E-7	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999978174472216	WITHOUT_CLASSIFICATION	2.182552778378806E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999928359126263	WITHOUT_CLASSIFICATION	7.1640873737643155E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999995679615878	WITHOUT_CLASSIFICATION	4.3203841212443185E-7	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999995403568925	WITHOUT_CLASSIFICATION	4.596431075013294E-7	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998904351756	WITHOUT_CLASSIFICATION	1.0956482444821274E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994672109074	WITHOUT_CLASSIFICATION	5.327890926238971E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999794637269604	WITHOUT_CLASSIFICATION	2.0536273039505096E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999242254095	WITHOUT_CLASSIFICATION	7.577459050610462E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999999675969955	WITHOUT_CLASSIFICATION	3.240300450832131E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998111725559	WITHOUT_CLASSIFICATION	1.8882744408763564E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999948170870787	WITHOUT_CLASSIFICATION	5.1829129212592325E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999000188098669	WITHOUT_CLASSIFICATION	9.998119013303192E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999337483790597	WITHOUT_CLASSIFICATION	6.625162094029525E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.99998778986793	WITHOUT_CLASSIFICATION	1.221013207004259E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.99998778986793	WITHOUT_CLASSIFICATION	1.221013207004259E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999996696511991	WITHOUT_CLASSIFICATION	3.3034880089192827E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999968120115722	WITHOUT_CLASSIFICATION	3.187988427794061E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999956450018435	WITHOUT_CLASSIFICATION	4.35499815654968E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999998994805275	WITHOUT_CLASSIFICATION	1.0051947245399629E-7	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999984059425326	WITHOUT_CLASSIFICATION	1.5940574673429284E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999942096831848	WITHOUT_CLASSIFICATION	5.790316815240583E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999742477487087	WITHOUT_CLASSIFICATION	2.575225129131457E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999968120115722	WITHOUT_CLASSIFICATION	3.187988427794061E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999942096831848	WITHOUT_CLASSIFICATION	5.790316815240583E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999742477487087	WITHOUT_CLASSIFICATION	2.575225129131457E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999809777411954	WITHOUT_CLASSIFICATION	1.902225880460126E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999891613610566	WITHOUT_CLASSIFICATION	1.0838638943346914E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999997625258823	WITHOUT_CLASSIFICATION	2.374741177125112E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999968120115722	WITHOUT_CLASSIFICATION	3.187988427794061E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999968120115722	WITHOUT_CLASSIFICATION	3.187988427794061E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999925477997557	WITHOUT_CLASSIFICATION	7.452200244390678E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999950561702947	WITHOUT_CLASSIFICATION	4.943829705278254E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999936962012081	WITHOUT_CLASSIFICATION	6.303798791834087E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999984574050994	WITHOUT_CLASSIFICATION	1.5425949005957744E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.999994151210024	WITHOUT_CLASSIFICATION	5.848789976066992E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999986410724175	WITHOUT_CLASSIFICATION	1.358927582427827E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999974783518507	WITHOUT_CLASSIFICATION	2.5216481493006266E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999986892829157	WITHOUT_CLASSIFICATION	1.3107170842993147E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999997782593248	WITHOUT_CLASSIFICATION	2.2174067518528664E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999938108197085	WITHOUT_CLASSIFICATION	6.1891802914407745E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999996991115284	WITHOUT_CLASSIFICATION	3.0088847154001887E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999999704206501	WITHOUT_CLASSIFICATION	2.95793498964801E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999689342673	WITHOUT_CLASSIFICATION	3.10657326531019E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999994995456049	WITHOUT_CLASSIFICATION	5.004543951827441E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995577047663	WITHOUT_CLASSIFICATION	4.4229523368412993E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999375474616	WITHOUT_CLASSIFICATION	6.245253837847227E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902904958076	WITHOUT_CLASSIFICATION	9.70950419248799E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999994310585826	WITHOUT_CLASSIFICATION	5.689414173959397E-6	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999947102257832	WITHOUT_CLASSIFICATION	5.289774216694475E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999984995214237	WITHOUT_CLASSIFICATION	1.5004785762301313E-6	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999983391743182	WITHOUT_CLASSIFICATION	1.6608256817252052E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999333320803466	WITHOUT_CLASSIFICATION	6.666791965344624E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999333320803466	WITHOUT_CLASSIFICATION	6.666791965344624E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902904958076	WITHOUT_CLASSIFICATION	9.70950419248799E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999599097114444	WITHOUT_CLASSIFICATION	4.009028855562996E-5	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995708232183	WITHOUT_CLASSIFICATION	4.291767816995749E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999838983383907	WITHOUT_CLASSIFICATION	1.6101661609301447E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999848095403915	WITHOUT_CLASSIFICATION	1.519045960854551E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999822748676978	WITHOUT_CLASSIFICATION	1.7725132302201926E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999990021076032	WITHOUT_CLASSIFICATION	9.978923968390435E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999971803497822	WITHOUT_CLASSIFICATION	2.8196502177708343E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999997517400334	WITHOUT_CLASSIFICATION	2.4825996659304205E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999645405437	WITHOUT_CLASSIFICATION	3.5459456193245346E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999997722261212	WITHOUT_CLASSIFICATION	2.2777387879893857E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998598751204	WITHOUT_CLASSIFICATION	1.401248796006295E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999969250016582	WITHOUT_CLASSIFICATION	3.0749983419003448E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999922818279701	WITHOUT_CLASSIFICATION	7.718172029899777E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999429992987	WITHOUT_CLASSIFICATION	5.70007013592925E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997116189341	WITHOUT_CLASSIFICATION	2.8838106583477875E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999970149911235	WITHOUT_CLASSIFICATION	2.9850088766531893E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999993463138027	WITHOUT_CLASSIFICATION	6.536861974056141E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999991493876424	WITHOUT_CLASSIFICATION	8.506123575894831E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996678692284	WITHOUT_CLASSIFICATION	3.321307715286081E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999996063656118	WITHOUT_CLASSIFICATION	3.9363438811585367E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996450604105	WITHOUT_CLASSIFICATION	3.5493958945804537E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999995900922043	WITHOUT_CLASSIFICATION	4.099077956250356E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987828106471	WITHOUT_CLASSIFICATION	1.2171893528834478E-6	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949980917862	WITHOUT_CLASSIFICATION	5.001908213787518E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832776426766	WITHOUT_CLASSIFICATION	1.6722357323316535E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999064681188	WITHOUT_CLASSIFICATION	9.353188120222569E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571333202474	WITHOUT_CLASSIFICATION	4.286667975259148E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986764539096	WITHOUT_CLASSIFICATION	1.323546090402505E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791127255092	WITHOUT_CLASSIFICATION	2.088727449078417E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913956016618	WITHOUT_CLASSIFICATION	8.60439833811428E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999993487951951	WITHOUT_CLASSIFICATION	6.512048047517088E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999991985470594	WITHOUT_CLASSIFICATION	8.014529405637951E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968809047551	WITHOUT_CLASSIFICATION	3.11909524490792E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959621336584	WITHOUT_CLASSIFICATION	4.037866341551652E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983878425684	WITHOUT_CLASSIFICATION	1.6121574315337803E-6	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871233738357	WITHOUT_CLASSIFICATION	1.2876626164349912E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999419282769	WITHOUT_CLASSIFICATION	5.807172309530691E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966504829667	WITHOUT_CLASSIFICATION	3.3495170333519804E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946237927542	WITHOUT_CLASSIFICATION	5.376207245838519E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830456284285	WITHOUT_CLASSIFICATION	1.695437157147027E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999997547309321	WITHOUT_CLASSIFICATION	2.452690679309348E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987440896695	WITHOUT_CLASSIFICATION	1.2559103305395703E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999994872432555	WITHOUT_CLASSIFICATION	5.127567445988685E-7	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999816366151	WITHOUT_CLASSIFICATION	1.836338500874575E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999136379892	WITHOUT_CLASSIFICATION	8.6362010748885E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999171024387008	WITHOUT_CLASSIFICATION	8.28975612992229E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999935334185512	WITHOUT_CLASSIFICATION	6.466581448730125E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999981009648162	WITHOUT_CLASSIFICATION	1.8990351838036926E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999850787643826	WITHOUT_CLASSIFICATION	1.4921235617525919E-5	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999932250848934	WITHOUT_CLASSIFICATION	6.774915106614557E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999880159760275	WITHOUT_CLASSIFICATION	1.1984023972502264E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999837441028756	WITHOUT_CLASSIFICATION	1.6255897124395035E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999180468300897	WITHOUT_CLASSIFICATION	8.19531699102528E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999900269086021	WITHOUT_CLASSIFICATION	9.973091397847733E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999974681008026	WITHOUT_CLASSIFICATION	2.5318991974358406E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999996006309871	WITHOUT_CLASSIFICATION	3.9936901290010377E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999963455894326	WITHOUT_CLASSIFICATION	3.654410567420404E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999925152120006	WITHOUT_CLASSIFICATION	7.484787999458033E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998892403226	WITHOUT_CLASSIFICATION	1.1075967749294284E-7	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984839685431	WITHOUT_CLASSIFICATION	1.5160314568961773E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987869563136	WITHOUT_CLASSIFICATION	1.2130436864099345E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971996489331	WITHOUT_CLASSIFICATION	2.8003510669114664E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965093024209	WITHOUT_CLASSIFICATION	3.4906975791713566E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999885062204947	WITHOUT_CLASSIFICATION	1.1493779505211494E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999742331183	WITHOUT_CLASSIFICATION	2.576688173425373E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999992217953023	WITHOUT_CLASSIFICATION	7.782046977437412E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999977550161623	WITHOUT_CLASSIFICATION	2.2449838377217625E-6	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987876893082	WITHOUT_CLASSIFICATION	1.2123106918438146E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999984046922988	WITHOUT_CLASSIFICATION	1.595307701208514E-6	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999060649103	WITHOUT_CLASSIFICATION	9.393508970972449E-8	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999990411529585	WITHOUT_CLASSIFICATION	9.588470415563595E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998849789189	WITHOUT_CLASSIFICATION	1.1502108104949972E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999990549674415	WITHOUT_CLASSIFICATION	9.450325584763418E-7	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999992863312922	WITHOUT_CLASSIFICATION	7.136687077894092E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999991743689339	WITHOUT_CLASSIFICATION	8.256310660430784E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999997726474051	WITHOUT_CLASSIFICATION	2.2735259481343646E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999171024387008	WITHOUT_CLASSIFICATION	8.28975612992229E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997565204298	WITHOUT_CLASSIFICATION	2.434795701992398E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998142463561	WITHOUT_CLASSIFICATION	1.8575364402587224E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999960505272499	WITHOUT_CLASSIFICATION	3.9494727501130066E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999910364842	WITHOUT_CLASSIFICATION	8.963515798982586E-8	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994949209627	WITHOUT_CLASSIFICATION	5.050790372125517E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999964842359415	WITHOUT_CLASSIFICATION	3.5157640585075275E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999300623778635	WITHOUT_CLASSIFICATION	6.993762213652011E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999978570838376	WITHOUT_CLASSIFICATION	2.142916162390848E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999994695948978	WITHOUT_CLASSIFICATION	5.30405102184506E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996044361185	WITHOUT_CLASSIFICATION	3.955638815872981E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997926762709	WITHOUT_CLASSIFICATION	2.0732372909909945E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999994539478048	WITHOUT_CLASSIFICATION	5.46052195209681E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997004318688	WITHOUT_CLASSIFICATION	2.995681311900492E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999847411554	WITHOUT_CLASSIFICATION	1.5258844657574363E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999988338725754	WITHOUT_CLASSIFICATION	1.1661274246098554E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999998920558827	WITHOUT_CLASSIFICATION	1.0794411733617429E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999680988127748	WITHOUT_CLASSIFICATION	3.1901187225135804E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999545594803	WITHOUT_CLASSIFICATION	4.5440519725746596E-8	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999938084233763	WITHOUT_CLASSIFICATION	6.191576623655344E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999993045765935	WITHOUT_CLASSIFICATION	6.954234064616749E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999989529253361	WITHOUT_CLASSIFICATION	1.047074663828911E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999896504069217	WITHOUT_CLASSIFICATION	1.03495930783047E-5	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999974751968814	WITHOUT_CLASSIFICATION	2.524803118542635E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999939644383375	WITHOUT_CLASSIFICATION	6.03556166251782E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999995258724716	WITHOUT_CLASSIFICATION	4.7412752840375375E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999966300502144	WITHOUT_CLASSIFICATION	3.369949785556443E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998637712822736	WITHOUT_CLASSIFICATION	1.3622871772644716E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999970110327893	WITHOUT_CLASSIFICATION	2.9889672107795667E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999943539913845	WITHOUT_CLASSIFICATION	5.646008615501826E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999910441709	WITHOUT_CLASSIFICATION	8.955829189453369E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999171024387008	WITHOUT_CLASSIFICATION	8.28975612992229E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999991447363227	WITHOUT_CLASSIFICATION	8.552636773901879E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999873225645	WITHOUT_CLASSIFICATION	1.26774354948228E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996000753093	WITHOUT_CLASSIFICATION	3.999246907832539E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999171024387008	WITHOUT_CLASSIFICATION	8.28975612992229E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981261661673	WITHOUT_CLASSIFICATION	1.8738338326279126E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999989529253361	WITHOUT_CLASSIFICATION	1.047074663828911E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999934789864473	WITHOUT_CLASSIFICATION	6.521013552765292E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998039138685086	WITHOUT_CLASSIFICATION	1.9608613149124467E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999575553182	WITHOUT_CLASSIFICATION	4.244468170208551E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996044361185	WITHOUT_CLASSIFICATION	3.955638815872981E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997926762709	WITHOUT_CLASSIFICATION	2.0732372909909945E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999994539478048	WITHOUT_CLASSIFICATION	5.46052195209681E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999978988634376	WITHOUT_CLASSIFICATION	2.1011365625191367E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999990919399243	WITHOUT_CLASSIFICATION	9.080600757768096E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999925522153563	WITHOUT_CLASSIFICATION	7.447784643686361E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999962725689422	WITHOUT_CLASSIFICATION	3.7274310576908413E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999990815977413	WITHOUT_CLASSIFICATION	9.184022586462314E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999171024387008	WITHOUT_CLASSIFICATION	8.28975612992229E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997004318688	WITHOUT_CLASSIFICATION	2.995681311900492E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999847411554	WITHOUT_CLASSIFICATION	1.5258844657574363E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950920291981	WITHOUT_CLASSIFICATION	4.9079708018930765E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995819391265	WITHOUT_CLASSIFICATION	4.1806087356808124E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999963910377785	WITHOUT_CLASSIFICATION	3.608962221384791E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999942846436785	WITHOUT_CLASSIFICATION	5.7153563216332255E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999976830513863	WITHOUT_CLASSIFICATION	2.316948613758245E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999017662303	WITHOUT_CLASSIFICATION	9.823376971894036E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830456284285	WITHOUT_CLASSIFICATION	1.695437157147027E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999976677368605	WITHOUT_CLASSIFICATION	2.332263139384449E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999898813155158	WITHOUT_CLASSIFICATION	1.011868448419402E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999994556344507	WITHOUT_CLASSIFICATION	5.443655493115888E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998683476091	WITHOUT_CLASSIFICATION	1.3165239088483932E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995683702635	WITHOUT_CLASSIFICATION	4.3162973640825146E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571333202474	WITHOUT_CLASSIFICATION	4.286667975259148E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986764539096	WITHOUT_CLASSIFICATION	1.323546090402505E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959621336584	WITHOUT_CLASSIFICATION	4.037866341551652E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995683702635	WITHOUT_CLASSIFICATION	4.3162973640825146E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999102881727	WITHOUT_CLASSIFICATION	8.971182721442255E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996349532831	WITHOUT_CLASSIFICATION	3.650467168616872E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991046127475	WITHOUT_CLASSIFICATION	8.953872525018687E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999983536414753	WITHOUT_CLASSIFICATION	1.6463585246916062E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999999857481859	WITHOUT_CLASSIFICATION	1.4251814090435274E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999737505265209	WITHOUT_CLASSIFICATION	2.6249473479141035E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983878425684	WITHOUT_CLASSIFICATION	1.6121574315337803E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966504829667	WITHOUT_CLASSIFICATION	3.3495170333519804E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998849789189	WITHOUT_CLASSIFICATION	1.1502108104949972E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997158070661	WITHOUT_CLASSIFICATION	2.841929338632323E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999992917127363	WITHOUT_CLASSIFICATION	7.082872636707831E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999373917785	WITHOUT_CLASSIFICATION	6.26082215781583E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999928957338259	WITHOUT_CLASSIFICATION	7.1042661741143344E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999999815793601	WITHOUT_CLASSIFICATION	1.842063990546791E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999991527137934	WITHOUT_CLASSIFICATION	8.472862066882493E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999797393797957	WITHOUT_CLASSIFICATION	2.0260620204301886E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999645405437	WITHOUT_CLASSIFICATION	3.5459456193245346E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999992183990908	WITHOUT_CLASSIFICATION	7.816009091880235E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999126412871	WITHOUT_CLASSIFICATION	8.735871285544765E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999936707946864	WITHOUT_CLASSIFICATION	6.329205313544856E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999965283539066	WITHOUT_CLASSIFICATION	3.4716460933547714E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999880671654636	WITHOUT_CLASSIFICATION	1.1932834536388755E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999963189145455	WITHOUT_CLASSIFICATION	3.681085454580116E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998178712943	WITHOUT_CLASSIFICATION	1.8212870577641871E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998986807418	WITHOUT_CLASSIFICATION	1.013192581907845E-6	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994545777581	WITHOUT_CLASSIFICATION	5.454222418355804E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999965963730499	WITHOUT_CLASSIFICATION	3.4036269501654103E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999966386903429	WITHOUT_CLASSIFICATION	3.361309657015904E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996637408004	WITHOUT_CLASSIFICATION	3.362591996525405E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997009185465	WITHOUT_CLASSIFICATION	2.990814535630182E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996266395201	WITHOUT_CLASSIFICATION	3.7336047989365226E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998791460617	WITHOUT_CLASSIFICATION	1.2085393830006994E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999970849358344	WITHOUT_CLASSIFICATION	2.9150641656775833E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999951224687957	WITHOUT_CLASSIFICATION	4.8775312042401885E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994667330347	WITHOUT_CLASSIFICATION	5.332669653682692E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999967007387294	WITHOUT_CLASSIFICATION	3.2992612706240784E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996038284433	WITHOUT_CLASSIFICATION	3.9617155670332784E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989663171364	WITHOUT_CLASSIFICATION	1.0336828635992357E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999990091701786	WITHOUT_CLASSIFICATION	9.908298214284445E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999996177466377	WITHOUT_CLASSIFICATION	3.8225336232792504E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999999863031162	WITHOUT_CLASSIFICATION	1.369688380775369E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999996825356313	WITHOUT_CLASSIFICATION	3.17464368767984E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997657400965817	WITHOUT_CLASSIFICATION	2.3425990341832854E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997989448781849	WITHOUT_CLASSIFICATION	2.0105512181507057E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999924284945614	WITHOUT_CLASSIFICATION	7.571505438649312E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998561944196	WITHOUT_CLASSIFICATION	1.4380558041310964E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999949613825372	WITHOUT_CLASSIFICATION	5.038617462787538E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999988567900395	WITHOUT_CLASSIFICATION	1.1432099604732217E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999997260667344	WITHOUT_CLASSIFICATION	2.7393326569380024E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999990871306706	WITHOUT_CLASSIFICATION	9.128693294631104E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999952874247471	WITHOUT_CLASSIFICATION	4.712575252949496E-6	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996718081117	WITHOUT_CLASSIFICATION	3.281918883684776E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998891168764557	WITHOUT_CLASSIFICATION	1.1088312354434857E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999276326883	WITHOUT_CLASSIFICATION	7.236731177284478E-8	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999994600420037	WITHOUT_CLASSIFICATION	5.399579962985376E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999976525974917	WITHOUT_CLASSIFICATION	2.3474025082847326E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999778800447217	WITHOUT_CLASSIFICATION	2.2119955278341974E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999992907264305	WITHOUT_CLASSIFICATION	7.092735695986118E-7	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999992406845973	WITHOUT_CLASSIFICATION	7.593154028015124E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999887328951895	WITHOUT_CLASSIFICATION	1.126710481043593E-5	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997937203734	WITHOUT_CLASSIFICATION	2.0627962647855107E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999998685071856	WITHOUT_CLASSIFICATION	1.3149281440583188E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999982581250272	WITHOUT_CLASSIFICATION	1.7418749728062551E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999988388331968	WITHOUT_CLASSIFICATION	1.1611668031170273E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999991760242904	WITHOUT_CLASSIFICATION	8.239757096005176E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999925266345877	WITHOUT_CLASSIFICATION	7.473365412282348E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999994502011618	WITHOUT_CLASSIFICATION	5.497988382976937E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999992912209947	WITHOUT_CLASSIFICATION	7.087790052403225E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995532549267	WITHOUT_CLASSIFICATION	4.4674507334799694E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999990385637364	WITHOUT_CLASSIFICATION	9.614362635949877E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998225339485	WITHOUT_CLASSIFICATION	1.7746605148196258E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999986076711	WITHOUT_CLASSIFICATION	1.3923289019818805E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.99999922240516	WITHOUT_CLASSIFICATION	7.775948399900467E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999995503983278	WITHOUT_CLASSIFICATION	4.496016722614253E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999988126255968	WITHOUT_CLASSIFICATION	1.1873744032384839E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999958154789034	WITHOUT_CLASSIFICATION	4.184521096569566E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999943023520892	WITHOUT_CLASSIFICATION	5.6976479108350735E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999967508348862	WITHOUT_CLASSIFICATION	3.2491651138594794E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999977452655903	WITHOUT_CLASSIFICATION	2.2547344097010708E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999988142717197	WITHOUT_CLASSIFICATION	1.1857282803773496E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999987283002021	WITHOUT_CLASSIFICATION	1.27169979796485E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999995416771247	WITHOUT_CLASSIFICATION	4.583228753643082E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999950701710012	WITHOUT_CLASSIFICATION	4.929828998811929E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999987073697455	WITHOUT_CLASSIFICATION	1.2926302545659668E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999994822622421	WITHOUT_CLASSIFICATION	5.177377578318285E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999720974796659	WITHOUT_CLASSIFICATION	2.7902520334226415E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999762820398725	WITHOUT_CLASSIFICATION	2.3717960127441165E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999979749783928	WITHOUT_CLASSIFICATION	2.025021607205868E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999930084451986	WITHOUT_CLASSIFICATION	6.991554801484054E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999953959911463	WITHOUT_CLASSIFICATION	4.604008853685286E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997117061545	WITHOUT_CLASSIFICATION	2.882938454762455E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999994572365498	WITHOUT_CLASSIFICATION	5.427634502591893E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999851153184931	WITHOUT_CLASSIFICATION	1.4884681506853145E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999937158657793	WITHOUT_CLASSIFICATION	6.2841342205851165E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999996156201798	WITHOUT_CLASSIFICATION	3.843798201731359E-7	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998068636515	WITHOUT_CLASSIFICATION	1.9313634844288553E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999976203460387	WITHOUT_CLASSIFICATION	2.3796539611992726E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999904120523574	WITHOUT_CLASSIFICATION	9.587947642583097E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999899007206532	WITHOUT_CLASSIFICATION	1.0099279346903064E-5	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999965103626699	WITHOUT_CLASSIFICATION	3.4896373302134897E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999762459654624	WITHOUT_CLASSIFICATION	2.37540345374977E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999712889489439	WITHOUT_CLASSIFICATION	2.8711051056023243E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999560953558444	WITHOUT_CLASSIFICATION	4.390464415547055E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999339895116668	WITHOUT_CLASSIFICATION	6.601048833314081E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999938696756081	WITHOUT_CLASSIFICATION	6.130324391888628E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992832714174	WITHOUT_CLASSIFICATION	7.167285826593104E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998440855845	WITHOUT_CLASSIFICATION	1.559144154545504E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999979473221854	WITHOUT_CLASSIFICATION	2.0526778147114395E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999910702373678	WITHOUT_CLASSIFICATION	8.929762632278963E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999967922040891	WITHOUT_CLASSIFICATION	3.2077959109033634E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999979473221854	WITHOUT_CLASSIFICATION	2.0526778147114395E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999990345421926	WITHOUT_CLASSIFICATION	9.65457807356762E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999916088201901	WITHOUT_CLASSIFICATION	8.391179809987805E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999995514140299	WITHOUT_CLASSIFICATION	4.48585970137901E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999978632242426	WITHOUT_CLASSIFICATION	2.1367757575371774E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999995018655321	WITHOUT_CLASSIFICATION	4.981344678907437E-7	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999953520675575	WITHOUT_CLASSIFICATION	4.647932442514202E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998875714620125	WITHOUT_CLASSIFICATION	1.1242853798747021E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999973463273636	WITHOUT_CLASSIFICATION	2.653672636463277E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999999829660523	WITHOUT_CLASSIFICATION	1.7033947695881152E-7	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999850861180068	WITHOUT_CLASSIFICATION	1.4913881993170706E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999991231689621	WITHOUT_CLASSIFICATION	8.768310380301039E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999999655553882	WITHOUT_CLASSIFICATION	3.4444611798784666E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998407424391	WITHOUT_CLASSIFICATION	1.5925756100951653E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998985901293	WITHOUT_CLASSIFICATION	1.0140987070757207E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997484706267	WITHOUT_CLASSIFICATION	2.5152937324892687E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998025539239231	WITHOUT_CLASSIFICATION	1.9744607607683653E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999920067348723	WITHOUT_CLASSIFICATION	7.993265127730149E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999920067348723	WITHOUT_CLASSIFICATION	7.993265127730149E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996572824772	WITHOUT_CLASSIFICATION	3.427175227895309E-7	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999832907014904	WITHOUT_CLASSIFICATION	1.6709298509612454E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999929882556933	WITHOUT_CLASSIFICATION	7.011744306781877E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999834163216302	WITHOUT_CLASSIFICATION	1.6583678369749897E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995754801204	WITHOUT_CLASSIFICATION	4.245198794780728E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997653248399258	WITHOUT_CLASSIFICATION	2.3467516007428594E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999959653297751	WITHOUT_CLASSIFICATION	4.034670224913576E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997780926634	WITHOUT_CLASSIFICATION	2.2190733651864045E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999987229211079	WITHOUT_CLASSIFICATION	1.2770788920186816E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999985046946948	WITHOUT_CLASSIFICATION	1.495305305281535E-6	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999969488614	WITHOUT_CLASSIFICATION	3.051138513828261E-9	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999636548531	WITHOUT_CLASSIFICATION	3.634514702861095E-8	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999974887011067	WITHOUT_CLASSIFICATION	2.511298893225162E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999921882654118	WITHOUT_CLASSIFICATION	7.811734588190282E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999981477473949	WITHOUT_CLASSIFICATION	1.8522526050985042E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999963189145455	WITHOUT_CLASSIFICATION	3.681085454580116E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999977788152011	WITHOUT_CLASSIFICATION	2.2211847988677007E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999987043148316	WITHOUT_CLASSIFICATION	1.2956851683841802E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999998960985061	WITHOUT_CLASSIFICATION	1.039014939008054E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9978496346304712	WITHOUT_CLASSIFICATION	0.002150365369528763	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999996732447884	WITHOUT_CLASSIFICATION	3.2675521150409216E-7	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.999980292107303	WITHOUT_CLASSIFICATION	1.9707892696946268E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999999906545967	WITHOUT_CLASSIFICATION	9.345403293395663E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999314467047	WITHOUT_CLASSIFICATION	6.855329524179816E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999988389571596	WITHOUT_CLASSIFICATION	1.1610428404644902E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999972451654996	WITHOUT_CLASSIFICATION	2.7548345003970887E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997823868568	WITHOUT_CLASSIFICATION	2.1761314323302892E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999963508224485	WITHOUT_CLASSIFICATION	3.649177551533474E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999999771128057	WITHOUT_CLASSIFICATION	2.2887194329545008E-8	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999940342892263	WITHOUT_CLASSIFICATION	5.965710773743987E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9997669288329809	WITHOUT_CLASSIFICATION	2.3307116701905238E-4	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999961959743355	WITHOUT_CLASSIFICATION	3.804025664547039E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.999978062874711	WITHOUT_CLASSIFICATION	2.1937125288905075E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999888419135551	WITHOUT_CLASSIFICATION	1.1158086444919652E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999951346630903	WITHOUT_CLASSIFICATION	4.865336909731077E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999903976905614	WITHOUT_CLASSIFICATION	9.60230943856925E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999122048747697	WITHOUT_CLASSIFICATION	8.779512523021747E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999974052150435	WITHOUT_CLASSIFICATION	2.5947849563501856E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996196820198	WITHOUT_CLASSIFICATION	3.8031798026131055E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999874934755392	WITHOUT_CLASSIFICATION	1.2506524460707642E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999993571173972	WITHOUT_CLASSIFICATION	6.42882602872443E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999996515051558	WITHOUT_CLASSIFICATION	3.484948442395276E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999629753024	WITHOUT_CLASSIFICATION	3.702469772185398E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999518770529	WITHOUT_CLASSIFICATION	4.812294696454661E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999986299753063	WITHOUT_CLASSIFICATION	1.3700246936302657E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999810704179	WITHOUT_CLASSIFICATION	1.8929582080989373E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986723705806	WITHOUT_CLASSIFICATION	1.327629419364415E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995336213718	WITHOUT_CLASSIFICATION	4.663786281476379E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995594652217	WITHOUT_CLASSIFICATION	4.405347783790898E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999805568633	WITHOUT_CLASSIFICATION	1.944313671064521E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999996038361297	WITHOUT_CLASSIFICATION	3.961638702872493E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983156947746	WITHOUT_CLASSIFICATION	1.6843052253398372E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999852383711	WITHOUT_CLASSIFICATION	1.4761628926811613E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996494457636	WITHOUT_CLASSIFICATION	3.5055423643223174E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996357319022	WITHOUT_CLASSIFICATION	3.642680977557741E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996494457636	WITHOUT_CLASSIFICATION	3.5055423643223174E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998309479340055	WITHOUT_CLASSIFICATION	1.6905206599449667E-4	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999951534177391	WITHOUT_CLASSIFICATION	4.8465822608378536E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999977232066429	WITHOUT_CLASSIFICATION	2.2767933570968873E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997942280412	WITHOUT_CLASSIFICATION	2.0577195868213448E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999991681181905	WITHOUT_CLASSIFICATION	8.318818095398006E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999938915317691	WITHOUT_CLASSIFICATION	6.108468230900856E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993588655184	WITHOUT_CLASSIFICATION	6.411344817068774E-7	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999990744663338	WITHOUT_CLASSIFICATION	9.25533666087531E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999849988372	WITHOUT_CLASSIFICATION	1.5001162743399014E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999999583654521	WITHOUT_CLASSIFICATION	4.1634548019837886E-8	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999998102769505	WITHOUT_CLASSIFICATION	1.8972304951042683E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999532058798	WITHOUT_CLASSIFICATION	4.679412024353056E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999631078169527	WITHOUT_CLASSIFICATION	3.6892183047200266E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999368244878	WITHOUT_CLASSIFICATION	6.317551211529427E-8	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999998384733042	WITHOUT_CLASSIFICATION	1.6152669573524413E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999486589063	WITHOUT_CLASSIFICATION	5.134109374978365E-8	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999868823537955	WITHOUT_CLASSIFICATION	1.3117646204584634E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999868823537955	WITHOUT_CLASSIFICATION	1.3117646204584634E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999985670458458	WITHOUT_CLASSIFICATION	1.4329541542624602E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999940339412611	WITHOUT_CLASSIFICATION	5.9660587390272E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998504258573	WITHOUT_CLASSIFICATION	1.4957414271156787E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999895258214	WITHOUT_CLASSIFICATION	1.0474178592022684E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998930349211	WITHOUT_CLASSIFICATION	1.0696507889574018E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999992914787679	WITHOUT_CLASSIFICATION	7.085212320941598E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999995884256133	WITHOUT_CLASSIFICATION	4.1157438665918836E-7	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999954075002223	WITHOUT_CLASSIFICATION	4.592499777650408E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999986226345786	WITHOUT_CLASSIFICATION	1.3773654214593936E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999981748873515	WITHOUT_CLASSIFICATION	1.825112648460441E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999974254377084	WITHOUT_CLASSIFICATION	2.574562291492596E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998524215982	WITHOUT_CLASSIFICATION	1.475784017840033E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998559079615	WITHOUT_CLASSIFICATION	1.4409203851508497E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999997951966403	WITHOUT_CLASSIFICATION	2.0480335974568793E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997309544809	WITHOUT_CLASSIFICATION	2.690455190612792E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999995761541945	WITHOUT_CLASSIFICATION	4.238458054409735E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999971157868555	WITHOUT_CLASSIFICATION	2.8842131444439093E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999973266829026	WITHOUT_CLASSIFICATION	2.673317097476101E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999986101255733	WITHOUT_CLASSIFICATION	1.3898744266219035E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996028910734	WITHOUT_CLASSIFICATION	3.971089265262459E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999914322723754	WITHOUT_CLASSIFICATION	8.567727624559488E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999993568036266	WITHOUT_CLASSIFICATION	6.431963732870235E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999991739272174	WITHOUT_CLASSIFICATION	8.26072782524501E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999961380884369	WITHOUT_CLASSIFICATION	3.861911563067349E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999980230589172	WITHOUT_CLASSIFICATION	1.976941082786102E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999973497967192	WITHOUT_CLASSIFICATION	2.650203280703717E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999988097824362	WITHOUT_CLASSIFICATION	1.1902175638065388E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999953030752877	WITHOUT_CLASSIFICATION	4.696924712347374E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999877929611548	WITHOUT_CLASSIFICATION	1.2207038845171226E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999959417284039	WITHOUT_CLASSIFICATION	4.058271596131832E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999994334879835	WITHOUT_CLASSIFICATION	5.665120165165457E-7	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999997901436934	WITHOUT_CLASSIFICATION	2.0985630645292294E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999976151477589	WITHOUT_CLASSIFICATION	2.384852241096894E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999999274527433	WITHOUT_CLASSIFICATION	7.254725670672647E-7	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999967254831094	WITHOUT_CLASSIFICATION	3.2745168905818255E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992349516419	WITHOUT_CLASSIFICATION	7.650483581029479E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999991537969263	WITHOUT_CLASSIFICATION	8.462030737228529E-7	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999973885312184	WITHOUT_CLASSIFICATION	2.6114687815839907E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999999871497863	WITHOUT_CLASSIFICATION	1.2850213712712508E-7	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999995950333475	WITHOUT_CLASSIFICATION	4.049666525449659E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999991411919954	WITHOUT_CLASSIFICATION	8.58808004720007E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997651391341	WITHOUT_CLASSIFICATION	2.348608657967628E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999958267193029	WITHOUT_CLASSIFICATION	4.173280697172616E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999979303856374	WITHOUT_CLASSIFICATION	2.069614362608897E-6	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999991592074607	WITHOUT_CLASSIFICATION	8.407925393164814E-7	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999997231506341	WITHOUT_CLASSIFICATION	2.7684936593485853E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999255080886	WITHOUT_CLASSIFICATION	7.449191136854516E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999983845317634	WITHOUT_CLASSIFICATION	1.6154682366706157E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999964436086586	WITHOUT_CLASSIFICATION	3.5563913414571045E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997182841798	WITHOUT_CLASSIFICATION	2.81715820247056E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993162589478	WITHOUT_CLASSIFICATION	6.837410522862289E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999888566326388	WITHOUT_CLASSIFICATION	1.114336736125519E-5	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998019780736	WITHOUT_CLASSIFICATION	1.9802192654151517E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999970145594793	WITHOUT_CLASSIFICATION	2.9854405206237083E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999913539892479	WITHOUT_CLASSIFICATION	8.646010752092128E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981261661673	WITHOUT_CLASSIFICATION	1.8738338326279126E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981261661673	WITHOUT_CLASSIFICATION	1.8738338326279126E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999983808427803	WITHOUT_CLASSIFICATION	1.6191572198135627E-6	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999916238722286	WITHOUT_CLASSIFICATION	8.376127771330272E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999940746442141	WITHOUT_CLASSIFICATION	5.925355785972976E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999992606397228	WITHOUT_CLASSIFICATION	7.393602773436591E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996643425293	WITHOUT_CLASSIFICATION	3.356574707337045E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999994478105642	WITHOUT_CLASSIFICATION	5.521894358689907E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999992072071063	WITHOUT_CLASSIFICATION	7.927928936439556E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999992195206641	WITHOUT_CLASSIFICATION	7.804793359621093E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999725873894549	WITHOUT_CLASSIFICATION	2.741261054504233E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998997538045	WITHOUT_CLASSIFICATION	1.0024619544474055E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999966256198168	WITHOUT_CLASSIFICATION	3.3743801831487572E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999997697024725	WITHOUT_CLASSIFICATION	2.3029752750131104E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999233972391303	WITHOUT_CLASSIFICATION	7.660276086981023E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999994334887743	WITHOUT_CLASSIFICATION	5.665112257032616E-7	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999986131348066	WITHOUT_CLASSIFICATION	1.3868651933968224E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999985015633049	WITHOUT_CLASSIFICATION	1.4984366949932535E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999738711518	WITHOUT_CLASSIFICATION	2.6128848141121E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999718502013565	WITHOUT_CLASSIFICATION	2.8149798643612822E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999646751239128	WITHOUT_CLASSIFICATION	3.532487608712027E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999983148348963	WITHOUT_CLASSIFICATION	1.6851651037048698E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999903932332	WITHOUT_CLASSIFICATION	9.606766851074255E-9	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999943462688429	WITHOUT_CLASSIFICATION	5.653731157037147E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999615498291095	WITHOUT_CLASSIFICATION	3.845017089055771E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999040095099	WITHOUT_CLASSIFICATION	9.599049010866948E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999353749957	WITHOUT_CLASSIFICATION	6.46250042565527E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999999327468698	WITHOUT_CLASSIFICATION	6.725313012692453E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999999387327552	WITHOUT_CLASSIFICATION	6.126724483666529E-8	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99986637673898	WITHOUT_CLASSIFICATION	1.3362326101995555E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999721988488168	WITHOUT_CLASSIFICATION	2.7801151183138257E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999615498291095	WITHOUT_CLASSIFICATION	3.845017089055771E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998725799486	WITHOUT_CLASSIFICATION	1.2742005134188421E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999985132836	WITHOUT_CLASSIFICATION	1.4867164692178918E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997724701650359	WITHOUT_CLASSIFICATION	2.2752983496421926E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999956611475942	WITHOUT_CLASSIFICATION	4.338852405737131E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999991978927208	WITHOUT_CLASSIFICATION	8.021072790202027E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999890062464337	WITHOUT_CLASSIFICATION	1.0993753566385884E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999998830658412	WITHOUT_CLASSIFICATION	1.1693415886732026E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999974902783691	WITHOUT_CLASSIFICATION	2.5097216308111706E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999815793110494	WITHOUT_CLASSIFICATION	1.842068895060244E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999956611475942	WITHOUT_CLASSIFICATION	4.338852405737131E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999978525770092	WITHOUT_CLASSIFICATION	2.147422990847362E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999997335205421	WITHOUT_CLASSIFICATION	2.664794578924714E-6	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999991801460442	WITHOUT_CLASSIFICATION	8.198539558302519E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999602171948004	WITHOUT_CLASSIFICATION	3.9782805199578406E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999992051345714	WITHOUT_CLASSIFICATION	7.948654286610717E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999974254377084	WITHOUT_CLASSIFICATION	2.574562291492596E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999993695001465	WITHOUT_CLASSIFICATION	6.304998534838796E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995271309058	WITHOUT_CLASSIFICATION	4.7286909416626465E-7	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999995961406355	WITHOUT_CLASSIFICATION	4.0385936451365157E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999992746290326	WITHOUT_CLASSIFICATION	7.253709674708955E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999925250080054	WITHOUT_CLASSIFICATION	7.474991994576953E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999937752271904	WITHOUT_CLASSIFICATION	6.224772809662781E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999943687267072	WITHOUT_CLASSIFICATION	5.6312732927477995E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999955685754346	WITHOUT_CLASSIFICATION	4.4314245654320475E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999766055250047	WITHOUT_CLASSIFICATION	2.3394474995344462E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999943867281814	WITHOUT_CLASSIFICATION	5.6132718185898815E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999914297377912	WITHOUT_CLASSIFICATION	8.57026220880452E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999997424228945	WITHOUT_CLASSIFICATION	2.575771054947514E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999989522779431	WITHOUT_CLASSIFICATION	1.047722056963851E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999991992020569	WITHOUT_CLASSIFICATION	8.007979430948631E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999997641323448	WITHOUT_CLASSIFICATION	2.3586765523989132E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999985193294961	WITHOUT_CLASSIFICATION	1.480670503937845E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999998620854496	WITHOUT_CLASSIFICATION	1.379145504326708E-7	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995933348046	WITHOUT_CLASSIFICATION	4.06665195414052E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999997357329133	WITHOUT_CLASSIFICATION	2.642670866732492E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999899096385555	WITHOUT_CLASSIFICATION	1.0090361444480016E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999968872475496	WITHOUT_CLASSIFICATION	3.112752450384636E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999949479769215	WITHOUT_CLASSIFICATION	5.052023078582614E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999925352693794	WITHOUT_CLASSIFICATION	7.4647306206372385E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999979537221005	WITHOUT_CLASSIFICATION	2.046277899456525E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999826858864724	WITHOUT_CLASSIFICATION	1.731411352745955E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999624106013278	WITHOUT_CLASSIFICATION	3.7589398672058584E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999995834825084	WITHOUT_CLASSIFICATION	4.1651749157983167E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976334514561	WITHOUT_CLASSIFICATION	2.366548543932902E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996619918828	WITHOUT_CLASSIFICATION	3.3800811720022805E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999953934239021	WITHOUT_CLASSIFICATION	4.6065760979299465E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999942510467463	WITHOUT_CLASSIFICATION	5.748953253652416E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998322194207	WITHOUT_CLASSIFICATION	1.6778057930469627E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999359354235	WITHOUT_CLASSIFICATION	6.406457653832415E-8	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999972600087957	WITHOUT_CLASSIFICATION	2.7399912042854665E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999980333266062	WITHOUT_CLASSIFICATION	1.9666733938334394E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999984723458025	WITHOUT_CLASSIFICATION	1.5276541974940768E-6	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999997413588119	WITHOUT_CLASSIFICATION	2.5864118810514825E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999980763220361	WITHOUT_CLASSIFICATION	1.923677963988878E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994172966472	WITHOUT_CLASSIFICATION	5.827033527960661E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999992862881034	WITHOUT_CLASSIFICATION	7.137118966713463E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999990348097058	WITHOUT_CLASSIFICATION	9.65190294200332E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999995614261007	WITHOUT_CLASSIFICATION	4.38573899399195E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999876416321002	WITHOUT_CLASSIFICATION	1.2358367899790936E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999983448661995	WITHOUT_CLASSIFICATION	1.655133800546883E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999887431424221	WITHOUT_CLASSIFICATION	1.1256857577925731E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999995105760746	WITHOUT_CLASSIFICATION	4.894239254702588E-7	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999988507312988	WITHOUT_CLASSIFICATION	1.1492687012377137E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999954228496286	WITHOUT_CLASSIFICATION	4.57715037139669E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999990182746188	WITHOUT_CLASSIFICATION	9.817253812614955E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999833186101779	WITHOUT_CLASSIFICATION	1.6681389822165008E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999996134981384	WITHOUT_CLASSIFICATION	3.865018615755296E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999233198805	WITHOUT_CLASSIFICATION	7.668011945762656E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999952079905764	WITHOUT_CLASSIFICATION	4.79200942364968E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999973636672285	WITHOUT_CLASSIFICATION	2.636332771566584E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999998136363871	WITHOUT_CLASSIFICATION	1.8636361298827906E-7	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999318839601842	WITHOUT_CLASSIFICATION	6.811603981584944E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976334514561	WITHOUT_CLASSIFICATION	2.366548543932902E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999999619239218	WITHOUT_CLASSIFICATION	3.8076078203658066E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999522209998	WITHOUT_CLASSIFICATION	4.777900019097225E-8	TEST
// switch	WITHOUT_CLASSIFICATION	0.999996164719504	WITHOUT_CLASSIFICATION	3.835280495961129E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999994431086161	WITHOUT_CLASSIFICATION	5.568913838873209E-7	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999997714460882	WITHOUT_CLASSIFICATION	2.285539118648519E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999455568713	WITHOUT_CLASSIFICATION	5.444312870289298E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994573001367	WITHOUT_CLASSIFICATION	5.426998631925808E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997676033328	WITHOUT_CLASSIFICATION	2.323966672417667E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999993125669127	WITHOUT_CLASSIFICATION	6.874330874212065E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999990561812271	WITHOUT_CLASSIFICATION	9.438187730242006E-7	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999769055004	WITHOUT_CLASSIFICATION	2.309449969294487E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998353528052812	WITHOUT_CLASSIFICATION	1.6464719471875517E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999984705315709	WITHOUT_CLASSIFICATION	1.5294684291722762E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999995125262277	WITHOUT_CLASSIFICATION	4.8747377230318855E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998309479340055	WITHOUT_CLASSIFICATION	1.6905206599449667E-4	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999987650821207	WITHOUT_CLASSIFICATION	1.2349178792438877E-6	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999797815734	WITHOUT_CLASSIFICATION	2.021842657552938E-8	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999992110168896	WITHOUT_CLASSIFICATION	7.889831104751739E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999996968582445	WITHOUT_CLASSIFICATION	3.0314175550473993E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999757472739	WITHOUT_CLASSIFICATION	2.4252726101543247E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999957105664541	WITHOUT_CLASSIFICATION	4.2894335459357935E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999957105664541	WITHOUT_CLASSIFICATION	4.2894335459357935E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999984809149751	WITHOUT_CLASSIFICATION	1.519085024899297E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999993276392113	WITHOUT_CLASSIFICATION	6.723607887196327E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999997669293307	WITHOUT_CLASSIFICATION	2.3307066926346293E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999987288733244	WITHOUT_CLASSIFICATION	1.2711266756252652E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999994874152464	WITHOUT_CLASSIFICATION	5.125847535790919E-7	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999993017597057	WITHOUT_CLASSIFICATION	6.982402942542376E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999972938978826	WITHOUT_CLASSIFICATION	2.7061021173262785E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997104554317	WITHOUT_CLASSIFICATION	2.8954456837939E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997104554317	WITHOUT_CLASSIFICATION	2.8954456837939E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999999722259545	WITHOUT_CLASSIFICATION	2.7774045504628337E-7	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999996492472349	WITHOUT_CLASSIFICATION	3.507527650921069E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998226019199	WITHOUT_CLASSIFICATION	1.7739808019517543E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999967466696632	WITHOUT_CLASSIFICATION	3.2533303368667538E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999967466696632	WITHOUT_CLASSIFICATION	3.2533303368667538E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999967466696632	WITHOUT_CLASSIFICATION	3.2533303368667538E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999953686444256	WITHOUT_CLASSIFICATION	4.631355574420872E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999992920605786	WITHOUT_CLASSIFICATION	7.079394214559375E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999999196230143	WITHOUT_CLASSIFICATION	8.037698569143901E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999913598164775	WITHOUT_CLASSIFICATION	8.640183522556964E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999962143406044	WITHOUT_CLASSIFICATION	3.785659395576288E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999981317862989	WITHOUT_CLASSIFICATION	1.8682137011710052E-6	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999997780663094	WITHOUT_CLASSIFICATION	2.2193369077887207E-7	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999998183767579	WITHOUT_CLASSIFICATION	1.8162324209001501E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999993743131385	WITHOUT_CLASSIFICATION	6.256868615996693E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.999999057342366	WITHOUT_CLASSIFICATION	9.426576340357922E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999991039231866	WITHOUT_CLASSIFICATION	8.960768133665999E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999886512482301	WITHOUT_CLASSIFICATION	1.134875176993021E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999990996431997	WITHOUT_CLASSIFICATION	9.003568003671854E-7	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999993319231734	WITHOUT_CLASSIFICATION	6.680768266442614E-7	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999997405099829	WITHOUT_CLASSIFICATION	2.594900170965718E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999974718644484	WITHOUT_CLASSIFICATION	2.5281355516162875E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999972774578677	WITHOUT_CLASSIFICATION	2.7225421323062445E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999972774578677	WITHOUT_CLASSIFICATION	2.7225421323062445E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999979488397023	WITHOUT_CLASSIFICATION	2.0511602977036876E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999979488397023	WITHOUT_CLASSIFICATION	2.0511602977036876E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999795918503638	WITHOUT_CLASSIFICATION	2.040814963623075E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999572530225866	WITHOUT_CLASSIFICATION	4.274697741338727E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999572530225866	WITHOUT_CLASSIFICATION	4.274697741338727E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999677555777102	WITHOUT_CLASSIFICATION	3.224442228980655E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999508941294899	WITHOUT_CLASSIFICATION	4.910587051015689E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999915801799916	WITHOUT_CLASSIFICATION	8.419820008550342E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999957105664541	WITHOUT_CLASSIFICATION	4.2894335459357935E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999984023325327	WITHOUT_CLASSIFICATION	1.5976674672854732E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999508941294899	WITHOUT_CLASSIFICATION	4.910587051015689E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999719359435205	WITHOUT_CLASSIFICATION	2.806405647949606E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999987736293416	WITHOUT_CLASSIFICATION	1.22637065832647E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999844880318328	WITHOUT_CLASSIFICATION	1.55119681672016E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999928777484137	WITHOUT_CLASSIFICATION	7.122251586219456E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999985619899189	WITHOUT_CLASSIFICATION	1.4380100811230411E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999949342334946	WITHOUT_CLASSIFICATION	5.0657665054013325E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996473268598	WITHOUT_CLASSIFICATION	3.526731402682674E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999951823407145	WITHOUT_CLASSIFICATION	4.81765928556226E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998719905395962	WITHOUT_CLASSIFICATION	1.2800946040380972E-4	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999998271094601	WITHOUT_CLASSIFICATION	1.7289053997306388E-7	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999998816486512	WITHOUT_CLASSIFICATION	1.1835134890701498E-7	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999964841417947	WITHOUT_CLASSIFICATION	3.515858205350666E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999982187879484	WITHOUT_CLASSIFICATION	1.7812120515550405E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999966745072277	WITHOUT_CLASSIFICATION	3.325492772243482E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999317321946	WITHOUT_CLASSIFICATION	6.826780536257034E-8	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999981460554542	WITHOUT_CLASSIFICATION	1.853944545703643E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999994748258577	WITHOUT_CLASSIFICATION	5.251741422928639E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999989485708964	WITHOUT_CLASSIFICATION	1.0514291035769525E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999989485708964	WITHOUT_CLASSIFICATION	1.0514291035769525E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999816750345566	WITHOUT_CLASSIFICATION	1.832496544346003E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999967824276168	WITHOUT_CLASSIFICATION	3.2175723833190568E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999913221789354	WITHOUT_CLASSIFICATION	8.677821064629957E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999968063371398	WITHOUT_CLASSIFICATION	3.1936628602319447E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999929468995142	WITHOUT_CLASSIFICATION	7.053100485815192E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999997322226968	WITHOUT_CLASSIFICATION	2.677773031402564E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999856083219	WITHOUT_CLASSIFICATION	1.439167811331557E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999967494827278	WITHOUT_CLASSIFICATION	3.250517272116612E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999807867623409	WITHOUT_CLASSIFICATION	1.921323765909765E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999848002434186	WITHOUT_CLASSIFICATION	1.5199756581345174E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999992826529431	WITHOUT_CLASSIFICATION	7.17347056943901E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998353528052812	WITHOUT_CLASSIFICATION	1.6464719471875517E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998079485017	WITHOUT_CLASSIFICATION	1.9205149828412186E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999632106809	WITHOUT_CLASSIFICATION	3.678931910660779E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999973810287885	WITHOUT_CLASSIFICATION	2.618971211434147E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999740576810238	WITHOUT_CLASSIFICATION	2.5942318976210137E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984772008474	WITHOUT_CLASSIFICATION	1.5227991525530426E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984772008474	WITHOUT_CLASSIFICATION	1.5227991525530426E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999894564926781	WITHOUT_CLASSIFICATION	1.0543507321946616E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997063795651	WITHOUT_CLASSIFICATION	2.9362043490796706E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999999373423487	WITHOUT_CLASSIFICATION	6.265765130232217E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999992944802815	WITHOUT_CLASSIFICATION	7.055197184746599E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999976800189087	WITHOUT_CLASSIFICATION	2.3199810912788296E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999932205417323	WITHOUT_CLASSIFICATION	6.7794582677020704E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999979431490391	WITHOUT_CLASSIFICATION	2.0568509608886076E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999971010131574	WITHOUT_CLASSIFICATION	2.8989868425822877E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998121398838	WITHOUT_CLASSIFICATION	1.8786011620210774E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999639668026	WITHOUT_CLASSIFICATION	3.603319739692313E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999995672755212	WITHOUT_CLASSIFICATION	4.327244788137603E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999971010131574	WITHOUT_CLASSIFICATION	2.8989868425822877E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998728725652	WITHOUT_CLASSIFICATION	1.2712743488194122E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999978401688203	WITHOUT_CLASSIFICATION	2.159831179612206E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999230042201	WITHOUT_CLASSIFICATION	7.699577985949932E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999977140881608	WITHOUT_CLASSIFICATION	2.285911839134266E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999983060847698	WITHOUT_CLASSIFICATION	1.6939152301756996E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998049469193	WITHOUT_CLASSIFICATION	1.950530807899327E-7	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999994903793185	WITHOUT_CLASSIFICATION	5.096206815577659E-7	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999990767475353	WITHOUT_CLASSIFICATION	9.232524646651797E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999320279513	WITHOUT_CLASSIFICATION	6.797204870095272E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999984857100556	WITHOUT_CLASSIFICATION	1.5142899443769364E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999997348374943	WITHOUT_CLASSIFICATION	2.651625057210849E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999996888166478	WITHOUT_CLASSIFICATION	3.11183352223219E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999981386018548	WITHOUT_CLASSIFICATION	1.8613981451684694E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999979099785672	WITHOUT_CLASSIFICATION	2.0900214327885823E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999989698681425	WITHOUT_CLASSIFICATION	1.03013185746282E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999997743585312	WITHOUT_CLASSIFICATION	2.256414688459211E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998342494051	WITHOUT_CLASSIFICATION	1.6575059492775865E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999981957066362	WITHOUT_CLASSIFICATION	1.8042933637631259E-6	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999973818000035	WITHOUT_CLASSIFICATION	2.61819999639108E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996630453182	WITHOUT_CLASSIFICATION	3.3695468188408815E-7	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996477596219	WITHOUT_CLASSIFICATION	3.522403781033599E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998405528694	WITHOUT_CLASSIFICATION	1.5944713074650825E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999948655786957	WITHOUT_CLASSIFICATION	5.13442130433674E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999884716820694	WITHOUT_CLASSIFICATION	1.1528317930657064E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998761489214	WITHOUT_CLASSIFICATION	1.238510786135627E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999975603496869	WITHOUT_CLASSIFICATION	2.4396503130047525E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994108700552	WITHOUT_CLASSIFICATION	5.891299447042983E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999383177657	WITHOUT_CLASSIFICATION	6.168223429526357E-8	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999676252544	WITHOUT_CLASSIFICATION	3.237474553414422E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999793795581821	WITHOUT_CLASSIFICATION	2.0620441817988576E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998831630736	WITHOUT_CLASSIFICATION	1.1683692634659642E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999997137314015	WITHOUT_CLASSIFICATION	2.8626859851412716E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999999504144993	WITHOUT_CLASSIFICATION	4.958550069749961E-8	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998057882701	WITHOUT_CLASSIFICATION	1.9421172990768756E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998278278343	WITHOUT_CLASSIFICATION	1.7217216568252023E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999999902890853	WITHOUT_CLASSIFICATION	9.710914684630356E-8	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997621883855	WITHOUT_CLASSIFICATION	2.3781161452453065E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999995618943551	WITHOUT_CLASSIFICATION	4.381056448252306E-7	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999981591960392	WITHOUT_CLASSIFICATION	1.8408039608264202E-6	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999994067081008	WITHOUT_CLASSIFICATION	5.932918991377078E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999005605189	WITHOUT_CLASSIFICATION	9.943948106482328E-8	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999956936761834	WITHOUT_CLASSIFICATION	4.306323816702659E-6	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998953555216	WITHOUT_CLASSIFICATION	1.0464447833566192E-7	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999994629262569	WITHOUT_CLASSIFICATION	5.370737430609959E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999995901180384	WITHOUT_CLASSIFICATION	4.098819615112686E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999996958159381	WITHOUT_CLASSIFICATION	3.041840619845363E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998251756907	WITHOUT_CLASSIFICATION	1.748243092140018E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999990480726569	WITHOUT_CLASSIFICATION	9.51927343014626E-7	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999945447344426	WITHOUT_CLASSIFICATION	5.45526555748384E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999983255655305	WITHOUT_CLASSIFICATION	1.6744344694279818E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954446428313	WITHOUT_CLASSIFICATION	4.555357168741407E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997802067189	WITHOUT_CLASSIFICATION	2.1979328115290417E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999996481321893	WITHOUT_CLASSIFICATION	3.518678107427284E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997718219438	WITHOUT_CLASSIFICATION	2.2817805634772453E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999945082921	WITHOUT_CLASSIFICATION	5.491707903774025E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999997506360215	WITHOUT_CLASSIFICATION	2.493639784925277E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999981782288708	WITHOUT_CLASSIFICATION	1.8217711291545764E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998350899068	WITHOUT_CLASSIFICATION	1.6491009318170337E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999998925736947	WITHOUT_CLASSIFICATION	1.0742630533601619E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999955814586906	WITHOUT_CLASSIFICATION	4.418541309375006E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999973083180017	WITHOUT_CLASSIFICATION	2.6916819982980223E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999964752887135	WITHOUT_CLASSIFICATION	3.5247112866093347E-6	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999994010068858	WITHOUT_CLASSIFICATION	5.989931141773646E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999997715507636	WITHOUT_CLASSIFICATION	2.2844923639324803E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999960333944308	WITHOUT_CLASSIFICATION	3.966605569232509E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999802944029045	WITHOUT_CLASSIFICATION	1.9705597095505555E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954446428313	WITHOUT_CLASSIFICATION	4.555357168741407E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999927488311059	WITHOUT_CLASSIFICATION	7.251168894061987E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999946844807913	WITHOUT_CLASSIFICATION	5.315519208629554E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999998163181366	WITHOUT_CLASSIFICATION	1.836818633979737E-6	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998882436297	WITHOUT_CLASSIFICATION	1.1175637018499428E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999998664354381	WITHOUT_CLASSIFICATION	1.335645618847987E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.99999988469175	WITHOUT_CLASSIFICATION	1.1530824994511279E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998121398838	WITHOUT_CLASSIFICATION	1.8786011620210774E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999679020724	WITHOUT_CLASSIFICATION	3.209792773753983E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998278278343	WITHOUT_CLASSIFICATION	1.7217216568252023E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999988598983993	WITHOUT_CLASSIFICATION	1.1401016006663538E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996109878369	WITHOUT_CLASSIFICATION	3.8901216313645264E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996822094187	WITHOUT_CLASSIFICATION	3.177905812728286E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996352480425	WITHOUT_CLASSIFICATION	3.647519575032182E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999997636535968	WITHOUT_CLASSIFICATION	2.3634640319888068E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999998992277428	WITHOUT_CLASSIFICATION	1.0077225728447816E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999990496343111	WITHOUT_CLASSIFICATION	9.5036568892766E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999936817686255	WITHOUT_CLASSIFICATION	6.318231374514315E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999979579326504	WITHOUT_CLASSIFICATION	2.042067349532301E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997361766426	WITHOUT_CLASSIFICATION	2.638233574075934E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992221041093	WITHOUT_CLASSIFICATION	7.778958906512445E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999997384317922	WITHOUT_CLASSIFICATION	2.615682078042949E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997747058821	WITHOUT_CLASSIFICATION	2.252941179265085E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997747058821	WITHOUT_CLASSIFICATION	2.252941179265085E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999748647953	WITHOUT_CLASSIFICATION	2.513520470310683E-7	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999963802443749	WITHOUT_CLASSIFICATION	3.619755625287066E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999726600122	WITHOUT_CLASSIFICATION	2.733998786416926E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999559189134	WITHOUT_CLASSIFICATION	4.40810865053604E-8	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999994898589011	WITHOUT_CLASSIFICATION	5.101410989090102E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999994475759839	WITHOUT_CLASSIFICATION	5.524240160310832E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999000120072	WITHOUT_CLASSIFICATION	9.998799275444103E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999998409454684	WITHOUT_CLASSIFICATION	1.5905453159874687E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999534289824	WITHOUT_CLASSIFICATION	4.6571017567168255E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999985833500784	WITHOUT_CLASSIFICATION	1.416649921604988E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999998749098203	WITHOUT_CLASSIFICATION	1.2509017971142734E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999998684365227	WITHOUT_CLASSIFICATION	1.3156347725494287E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999063048851	WITHOUT_CLASSIFICATION	9.369511482877379E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999564401725	WITHOUT_CLASSIFICATION	4.355982757938463E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999995231749044	WITHOUT_CLASSIFICATION	4.768250955531651E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999988467485783	WITHOUT_CLASSIFICATION	1.1532514217145186E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999966994407943	WITHOUT_CLASSIFICATION	3.3005592056652194E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999988856669412	WITHOUT_CLASSIFICATION	1.1143330587958691E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999961244842427	WITHOUT_CLASSIFICATION	3.875515757299704E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999992979268185	WITHOUT_CLASSIFICATION	7.020731815004969E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997503888415	WITHOUT_CLASSIFICATION	2.4961115847644866E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999995675487158	WITHOUT_CLASSIFICATION	4.3245128424658324E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999992188209211	WITHOUT_CLASSIFICATION	7.811790789166399E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998778272380532	WITHOUT_CLASSIFICATION	1.2217276194684084E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999993621605522	WITHOUT_CLASSIFICATION	6.3783944781490484E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997793737619	WITHOUT_CLASSIFICATION	2.2062623805220857E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998598751204	WITHOUT_CLASSIFICATION	1.401248796006295E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999993487606047	WITHOUT_CLASSIFICATION	6.512393952606377E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999975231188015	WITHOUT_CLASSIFICATION	2.476881198505166E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999841811409	WITHOUT_CLASSIFICATION	1.5818859026656146E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998637712822736	WITHOUT_CLASSIFICATION	1.3622871772644716E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999800824665875	WITHOUT_CLASSIFICATION	1.991753341248931E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999996777816058	WITHOUT_CLASSIFICATION	3.222183941579563E-7	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999998300538819	WITHOUT_CLASSIFICATION	1.6994611812814527E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999977088986449	WITHOUT_CLASSIFICATION	2.291101355173361E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999341728746	WITHOUT_CLASSIFICATION	6.582712538151718E-8	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999652737636668	WITHOUT_CLASSIFICATION	3.472623633323448E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999994882851	WITHOUT_CLASSIFICATION	5.11714900032884E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999984586576548	WITHOUT_CLASSIFICATION	1.5413423452661987E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993397228342	WITHOUT_CLASSIFICATION	6.602771657504069E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996758996371	WITHOUT_CLASSIFICATION	3.2410036290257954E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998002412934	WITHOUT_CLASSIFICATION	1.9975870656348838E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998937888597005	WITHOUT_CLASSIFICATION	1.0621114029961435E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999955785365415	WITHOUT_CLASSIFICATION	4.4214634584958495E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999903060573796	WITHOUT_CLASSIFICATION	9.69394262037645E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991046127475	WITHOUT_CLASSIFICATION	8.953872525018687E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9970049724206412	WITHOUT_CLASSIFICATION	0.0029950275793587406	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999983033305567	WITHOUT_CLASSIFICATION	1.696669443309322E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997315398618	WITHOUT_CLASSIFICATION	2.684601382048423E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999989960927215	WITHOUT_CLASSIFICATION	1.0039072784612767E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983683392745	WITHOUT_CLASSIFICATION	1.6316607255316819E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999013587209	WITHOUT_CLASSIFICATION	9.86412791618645E-8	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999990436128953	WITHOUT_CLASSIFICATION	9.56387104839281E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999965687858235	WITHOUT_CLASSIFICATION	3.431214176367845E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999996823528213	WITHOUT_CLASSIFICATION	3.176471786554211E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999884534787	WITHOUT_CLASSIFICATION	1.154652123649105E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999946639219652	WITHOUT_CLASSIFICATION	5.3360780348264706E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999990679629271	WITHOUT_CLASSIFICATION	9.320370728903672E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999983100032069	WITHOUT_CLASSIFICATION	1.6899967931371158E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999991448781881	WITHOUT_CLASSIFICATION	8.551218120265042E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999992823036903	WITHOUT_CLASSIFICATION	7.176963098213443E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999936661394663	WITHOUT_CLASSIFICATION	6.333860533634831E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999997908662493	WITHOUT_CLASSIFICATION	2.0913375074461556E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999923354703624	WITHOUT_CLASSIFICATION	7.664529637616086E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999067663381	WITHOUT_CLASSIFICATION	9.323366193408211E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999950224404035	WITHOUT_CLASSIFICATION	4.977559596510843E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999708849005587	WITHOUT_CLASSIFICATION	2.9115099441262348E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999985738255023	WITHOUT_CLASSIFICATION	1.4261744977251006E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999985034556552	WITHOUT_CLASSIFICATION	1.4965443446874167E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999988646255903	WITHOUT_CLASSIFICATION	1.1353744097194528E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999985034556552	WITHOUT_CLASSIFICATION	1.4965443446874167E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998421713747	WITHOUT_CLASSIFICATION	1.578286252538315E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999998869547009	WITHOUT_CLASSIFICATION	1.1304529909412457E-7	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999995251086587	WITHOUT_CLASSIFICATION	4.748913412801047E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997366134143	WITHOUT_CLASSIFICATION	2.6338658571715636E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999119712089	WITHOUT_CLASSIFICATION	8.802879110153529E-7	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999448498146	WITHOUT_CLASSIFICATION	5.515018540288226E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999966403056543	WITHOUT_CLASSIFICATION	3.3596943457872743E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999957548748387	WITHOUT_CLASSIFICATION	4.2451251612732566E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999949346118255	WITHOUT_CLASSIFICATION	5.065388174501859E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999955761522539	WITHOUT_CLASSIFICATION	4.423847746087792E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999987018981927	WITHOUT_CLASSIFICATION	1.298101807247785E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999992717401677	WITHOUT_CLASSIFICATION	7.282598322597369E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999984390888329	WITHOUT_CLASSIFICATION	1.560911167074497E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999576121865	WITHOUT_CLASSIFICATION	4.238781352578994E-8	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999994912374573	WITHOUT_CLASSIFICATION	5.087625427774008E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997971001642	WITHOUT_CLASSIFICATION	2.0289983575491757E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999993427043501	WITHOUT_CLASSIFICATION	6.572956498981252E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999993042213916	WITHOUT_CLASSIFICATION	6.957786084373028E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995667078104	WITHOUT_CLASSIFICATION	4.3329218960509343E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999843811186738	WITHOUT_CLASSIFICATION	1.5618881326122364E-5	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999959301005389	WITHOUT_CLASSIFICATION	4.069899461159881E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999898753252544	WITHOUT_CLASSIFICATION	1.0124674745589217E-5	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999907965099245	WITHOUT_CLASSIFICATION	9.203490075554763E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999998570008782	WITHOUT_CLASSIFICATION	1.4299912171770754E-7	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999997487792841	WITHOUT_CLASSIFICATION	2.512207158978695E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999987492352015	WITHOUT_CLASSIFICATION	1.2507647985736882E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999828206492269	WITHOUT_CLASSIFICATION	1.7179350772987404E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999915805390253	WITHOUT_CLASSIFICATION	8.419460974748236E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999989413073817	WITHOUT_CLASSIFICATION	1.0586926183307209E-6	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999393903669028	WITHOUT_CLASSIFICATION	6.060963309710663E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999084146411881	WITHOUT_CLASSIFICATION	9.158535881194917E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999884671924	WITHOUT_CLASSIFICATION	1.1532807602197938E-8	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999994489861136	WITHOUT_CLASSIFICATION	5.510138863997849E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999971834517344	WITHOUT_CLASSIFICATION	2.816548265575191E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999994448725361	WITHOUT_CLASSIFICATION	5.551274638247543E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999766275076565	WITHOUT_CLASSIFICATION	2.3372492343577043E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999920838959776	WITHOUT_CLASSIFICATION	7.916104022437594E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999989993150884	WITHOUT_CLASSIFICATION	1.0006849115804077E-6	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999729773429289	WITHOUT_CLASSIFICATION	2.702265707111378E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999820995198825	WITHOUT_CLASSIFICATION	1.7900480117518934E-5	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999995228165638	WITHOUT_CLASSIFICATION	4.771834362099779E-7	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999960416819162	WITHOUT_CLASSIFICATION	3.9583180836871465E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996000753093	WITHOUT_CLASSIFICATION	3.999246907832539E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999987492352015	WITHOUT_CLASSIFICATION	1.2507647985736882E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999700813601133	WITHOUT_CLASSIFICATION	2.9918639886605895E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999997392895076	WITHOUT_CLASSIFICATION	2.6071049243827364E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999960180063755	WITHOUT_CLASSIFICATION	3.981993624538331E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999943689736555	WITHOUT_CLASSIFICATION	5.6310263445805985E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999949501006465	WITHOUT_CLASSIFICATION	5.0498993534944235E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998267445007	WITHOUT_CLASSIFICATION	1.7325549932377208E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999987372670055	WITHOUT_CLASSIFICATION	1.2627329944639647E-6	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999988609714027	WITHOUT_CLASSIFICATION	1.1390285972969524E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999980235601914	WITHOUT_CLASSIFICATION	1.9764398085985264E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999993152546177	WITHOUT_CLASSIFICATION	6.847453822277936E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999994729957967	WITHOUT_CLASSIFICATION	5.270042033060585E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996732712155	WITHOUT_CLASSIFICATION	3.2672878450292555E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999612984117656	WITHOUT_CLASSIFICATION	3.870158823440933E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999935166049969	WITHOUT_CLASSIFICATION	6.483395003066709E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999995717942619	WITHOUT_CLASSIFICATION	4.282057380440309E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998579581243	WITHOUT_CLASSIFICATION	1.4204187570038517E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999985200740882	WITHOUT_CLASSIFICATION	1.479925911856857E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999989805806762	WITHOUT_CLASSIFICATION	1.0194193238683742E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999998877725359	WITHOUT_CLASSIFICATION	1.1222746401084372E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999700813601133	WITHOUT_CLASSIFICATION	2.9918639886605895E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999962290577387	WITHOUT_CLASSIFICATION	3.7709422612727595E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997855594152	WITHOUT_CLASSIFICATION	2.1444058474874352E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999999539633225	WITHOUT_CLASSIFICATION	4.603667750621315E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999990650626561	WITHOUT_CLASSIFICATION	9.349373438232109E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999644404803805	WITHOUT_CLASSIFICATION	3.5559519619586524E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999946775394859	WITHOUT_CLASSIFICATION	5.32246051410925E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999946775394859	WITHOUT_CLASSIFICATION	5.32246051410925E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999392703168	WITHOUT_CLASSIFICATION	6.072968321801182E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999946775394859	WITHOUT_CLASSIFICATION	5.32246051410925E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999946775394859	WITHOUT_CLASSIFICATION	5.32246051410925E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999971795157512	WITHOUT_CLASSIFICATION	2.820484248843275E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999975461893622	WITHOUT_CLASSIFICATION	2.4538106378164505E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999988704278114	WITHOUT_CLASSIFICATION	1.1295721886222984E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992579737359	WITHOUT_CLASSIFICATION	7.420262639882565E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999985712893749	WITHOUT_CLASSIFICATION	1.4287106251595756E-6	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998770647363	WITHOUT_CLASSIFICATION	1.229352637331442E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999980595798779	WITHOUT_CLASSIFICATION	1.9404201221292357E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999996416111915	WITHOUT_CLASSIFICATION	3.5838880850852373E-7	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999993684374555	WITHOUT_CLASSIFICATION	6.315625444898881E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999794741071187	WITHOUT_CLASSIFICATION	2.052589288132863E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999999522857801	WITHOUT_CLASSIFICATION	4.771421988545519E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999751344884994	WITHOUT_CLASSIFICATION	2.4865511500551916E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999962670934733	WITHOUT_CLASSIFICATION	3.732906526677101E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999684997553254	WITHOUT_CLASSIFICATION	3.1500244674601475E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999988589077897	WITHOUT_CLASSIFICATION	1.1410922103278368E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999918425881256	WITHOUT_CLASSIFICATION	8.157411874479259E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983156947746	WITHOUT_CLASSIFICATION	1.6843052253398372E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.99999812306639	WITHOUT_CLASSIFICATION	1.8769336099884352E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999960963565684	WITHOUT_CLASSIFICATION	3.903643431671498E-6	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999969325757589	WITHOUT_CLASSIFICATION	3.067424241101636E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999998611432834	WITHOUT_CLASSIFICATION	1.3885671661170267E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999976490305609	WITHOUT_CLASSIFICATION	2.350969439182062E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983156947746	WITHOUT_CLASSIFICATION	1.6843052253398372E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999828206492269	WITHOUT_CLASSIFICATION	1.7179350772987404E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999970848701122	WITHOUT_CLASSIFICATION	2.9151298877792177E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998791460617	WITHOUT_CLASSIFICATION	1.2085393830006994E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994667330347	WITHOUT_CLASSIFICATION	5.332669653682692E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999924508187916	WITHOUT_CLASSIFICATION	7.549181208394691E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999990201817599	WITHOUT_CLASSIFICATION	9.79818240092044E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999951625633449	WITHOUT_CLASSIFICATION	4.837436655180012E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999985029945959	WITHOUT_CLASSIFICATION	1.4970054041321813E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999953999434514	WITHOUT_CLASSIFICATION	4.600056548583757E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999983490356898	WITHOUT_CLASSIFICATION	1.6509643102114062E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999958038108023	WITHOUT_CLASSIFICATION	4.196189197701662E-6	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999923361755224	WITHOUT_CLASSIFICATION	7.663824477546573E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999993840598751	WITHOUT_CLASSIFICATION	6.15940124855808E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999953067446312	WITHOUT_CLASSIFICATION	4.693255368734139E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999957625452126	WITHOUT_CLASSIFICATION	4.237454787341028E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999108899135	WITHOUT_CLASSIFICATION	8.911008658999203E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999998516354935	WITHOUT_CLASSIFICATION	1.4836450648027822E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999993538368603	WITHOUT_CLASSIFICATION	6.461631397666056E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999996859793379	WITHOUT_CLASSIFICATION	3.14020662129144E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999249010239	WITHOUT_CLASSIFICATION	7.509897611112662E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999799277835782	WITHOUT_CLASSIFICATION	2.0072216421802277E-5	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999832795487005	WITHOUT_CLASSIFICATION	1.6720451299610756E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999915428584	WITHOUT_CLASSIFICATION	8.457141597411263E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999953999434514	WITHOUT_CLASSIFICATION	4.600056548583757E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999937610968733	WITHOUT_CLASSIFICATION	6.238903126635485E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999978701266488	WITHOUT_CLASSIFICATION	2.129873351294208E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999991243859045	WITHOUT_CLASSIFICATION	8.756140953661716E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999951119072629	WITHOUT_CLASSIFICATION	4.888092737168817E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921656515733	WITHOUT_CLASSIFICATION	7.834348426778947E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.99998422586228	WITHOUT_CLASSIFICATION	1.5774137720108875E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999906824515533	WITHOUT_CLASSIFICATION	9.31754844666762E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999994822914051	WITHOUT_CLASSIFICATION	5.177085948318326E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.999986617436193	WITHOUT_CLASSIFICATION	1.3382563806948179E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999929621556934	WITHOUT_CLASSIFICATION	7.0378443065449134E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999172235067	WITHOUT_CLASSIFICATION	8.277649332512343E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999926537761841	WITHOUT_CLASSIFICATION	7.3462238159760265E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999991248358404	WITHOUT_CLASSIFICATION	8.751641595924863E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999613436119	WITHOUT_CLASSIFICATION	3.8656388106770645E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999995860019179	WITHOUT_CLASSIFICATION	4.139980821238013E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999790529144239	WITHOUT_CLASSIFICATION	2.0947085576131435E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999172235067	WITHOUT_CLASSIFICATION	8.277649332512343E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999996228028352	WITHOUT_CLASSIFICATION	3.7719716486144426E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999988356787369	WITHOUT_CLASSIFICATION	1.1643212630112045E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999985131956073	WITHOUT_CLASSIFICATION	1.4868043927700774E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999985325367268	WITHOUT_CLASSIFICATION	1.4674632732610827E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999990023407914	WITHOUT_CLASSIFICATION	9.976592085549246E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999879355449	WITHOUT_CLASSIFICATION	1.2064455053341054E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999029477513	WITHOUT_CLASSIFICATION	9.705224856776518E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971618097597	WITHOUT_CLASSIFICATION	2.8381902401972794E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983658022936	WITHOUT_CLASSIFICATION	1.634197706394341E-6	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988461853176	WITHOUT_CLASSIFICATION	1.1538146823608366E-6	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890216970057	WITHOUT_CLASSIFICATION	1.0978302994426909E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886312555941	WITHOUT_CLASSIFICATION	1.1368744405926707E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999424562023	WITHOUT_CLASSIFICATION	5.7543797709032E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999424562023	WITHOUT_CLASSIFICATION	5.7543797709032E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999995063079976	WITHOUT_CLASSIFICATION	4.9369200240688815E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999985469231857	WITHOUT_CLASSIFICATION	1.4530768143272316E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999992285601377	WITHOUT_CLASSIFICATION	7.714398623129708E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999983038118192	WITHOUT_CLASSIFICATION	1.6961881807671737E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999967572565958	WITHOUT_CLASSIFICATION	3.242743404259333E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963586476277	WITHOUT_CLASSIFICATION	3.641352372282046E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877272524332	WITHOUT_CLASSIFICATION	1.2272747566900965E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909646680244	WITHOUT_CLASSIFICATION	9.035331975645239E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999988630964086	WITHOUT_CLASSIFICATION	1.13690359141412E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994022984792	WITHOUT_CLASSIFICATION	5.977015208039548E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963586476277	WITHOUT_CLASSIFICATION	3.641352372282046E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877272524332	WITHOUT_CLASSIFICATION	1.2272747566900965E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909646680244	WITHOUT_CLASSIFICATION	9.035331975645239E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999976103396346	WITHOUT_CLASSIFICATION	2.3896603654517776E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999757626713769	WITHOUT_CLASSIFICATION	2.423732862310868E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999996702451466	WITHOUT_CLASSIFICATION	3.2975485337111925E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999994997190325	WITHOUT_CLASSIFICATION	5.002809675052586E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999935675934309	WITHOUT_CLASSIFICATION	6.432406568984627E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998536610017	WITHOUT_CLASSIFICATION	1.4633899815701867E-7	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999964053995728	WITHOUT_CLASSIFICATION	3.594600427178897E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999832763722244	WITHOUT_CLASSIFICATION	1.672362777560943E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999430858848876	WITHOUT_CLASSIFICATION	5.691411511247061E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999935898550598	WITHOUT_CLASSIFICATION	6.410144940208655E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999995269806465	WITHOUT_CLASSIFICATION	4.7301935336911607E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999999514794104	WITHOUT_CLASSIFICATION	4.852058960364088E-7	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999983712656774	WITHOUT_CLASSIFICATION	1.6287343225726963E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999994969107368	WITHOUT_CLASSIFICATION	5.030892632527901E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999942129164379	WITHOUT_CLASSIFICATION	5.787083562138414E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999946363684271	WITHOUT_CLASSIFICATION	5.363631572939392E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997131010344174	WITHOUT_CLASSIFICATION	2.868989655826582E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999113271786135	WITHOUT_CLASSIFICATION	8.867282138649015E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999981124542915	WITHOUT_CLASSIFICATION	1.8875457086233374E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999919304123044	WITHOUT_CLASSIFICATION	8.069587695511551E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999993941710285	WITHOUT_CLASSIFICATION	6.058289714917661E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997819351724	WITHOUT_CLASSIFICATION	2.180648277126861E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999990362237782	WITHOUT_CLASSIFICATION	9.637762218702076E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999973738200811	WITHOUT_CLASSIFICATION	2.626179918854602E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999992144996215	WITHOUT_CLASSIFICATION	7.855003784936347E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999953064921946	WITHOUT_CLASSIFICATION	4.6935078053886605E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994181796444	WITHOUT_CLASSIFICATION	5.8182035560224974E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578340745523	WITHOUT_CLASSIFICATION	4.216592544783662E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999990953885	WITHOUT_CLASSIFICATION	9.046114982031813E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944225290134	WITHOUT_CLASSIFICATION	5.577470986591843E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839580501463	WITHOUT_CLASSIFICATION	1.604194985376399E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999899007206532	WITHOUT_CLASSIFICATION	1.0099279346903064E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999899007206532	WITHOUT_CLASSIFICATION	1.0099279346903064E-5	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999954583586323	WITHOUT_CLASSIFICATION	4.541641367651148E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999996837289822	WITHOUT_CLASSIFICATION	3.1627101771816556E-7	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999911164863488	WITHOUT_CLASSIFICATION	8.883513651244019E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998353528052812	WITHOUT_CLASSIFICATION	1.6464719471875517E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999991283889993	WITHOUT_CLASSIFICATION	8.716110007531545E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999918950610563	WITHOUT_CLASSIFICATION	8.104938943719447E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999403186915701	WITHOUT_CLASSIFICATION	5.968130842986149E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999981014121831	WITHOUT_CLASSIFICATION	1.898587816789533E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992832714174	WITHOUT_CLASSIFICATION	7.167285826593104E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995274704661	WITHOUT_CLASSIFICATION	4.725295339033294E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941551187292	WITHOUT_CLASSIFICATION	5.844881270773431E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988508547453	WITHOUT_CLASSIFICATION	1.1491452547099013E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958549045996	WITHOUT_CLASSIFICATION	4.145095400321819E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969528071496	WITHOUT_CLASSIFICATION	3.0471928503935797E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971220092869	WITHOUT_CLASSIFICATION	2.877990713132797E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974989689601	WITHOUT_CLASSIFICATION	2.5010310399668656E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972628323497	WITHOUT_CLASSIFICATION	2.737167650344502E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982381753671	WITHOUT_CLASSIFICATION	1.7618246328669962E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959239572779	WITHOUT_CLASSIFICATION	4.076042722186196E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997724658835	WITHOUT_CLASSIFICATION	2.2753411650859944E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999359525484	WITHOUT_CLASSIFICATION	6.404745155951301E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999960305887974	WITHOUT_CLASSIFICATION	3.969411202605884E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999726817602094	WITHOUT_CLASSIFICATION	2.7318239790583472E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999189631554	WITHOUT_CLASSIFICATION	8.103684463495243E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999464159991	WITHOUT_CLASSIFICATION	5.358400079777176E-8	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999961179173494	WITHOUT_CLASSIFICATION	3.882082650573016E-6	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998454092438	WITHOUT_CLASSIFICATION	1.5459075622980226E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999986915514075	WITHOUT_CLASSIFICATION	1.3084485924154916E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999726817602094	WITHOUT_CLASSIFICATION	2.7318239790583472E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999726817602094	WITHOUT_CLASSIFICATION	2.7318239790583472E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999996220718775	WITHOUT_CLASSIFICATION	3.7792812249218963E-6	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999980455467188	WITHOUT_CLASSIFICATION	1.9544532812967626E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999806225682	WITHOUT_CLASSIFICATION	1.9377431803600431E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999992057390357	WITHOUT_CLASSIFICATION	7.942609643018286E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999982187879484	WITHOUT_CLASSIFICATION	1.7812120515550405E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999919304123044	WITHOUT_CLASSIFICATION	8.069587695511551E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999988798244671	WITHOUT_CLASSIFICATION	1.1201755328480969E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999990156662084	WITHOUT_CLASSIFICATION	9.843337915590541E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999977243992005	WITHOUT_CLASSIFICATION	2.275600799531428E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982884976963	WITHOUT_CLASSIFICATION	1.7115023037315796E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999937521573795	WITHOUT_CLASSIFICATION	6.247842620543144E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996040906542	WITHOUT_CLASSIFICATION	3.959093457378566E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996685994951	WITHOUT_CLASSIFICATION	3.3140050498992957E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996685994951	WITHOUT_CLASSIFICATION	3.3140050498992957E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999987010185795	WITHOUT_CLASSIFICATION	1.2989814204972335E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999987010185795	WITHOUT_CLASSIFICATION	1.2989814204972335E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999656127831541	WITHOUT_CLASSIFICATION	3.438721684593324E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912542141971	WITHOUT_CLASSIFICATION	8.745785802949823E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999718129587897	WITHOUT_CLASSIFICATION	2.8187041210379567E-5	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661805257347	WITHOUT_CLASSIFICATION	3.3819474265274144E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999999869821438	WITHOUT_CLASSIFICATION	1.3017856193810083E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999997219255902	WITHOUT_CLASSIFICATION	2.780744098336178E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993865251793	WITHOUT_CLASSIFICATION	6.13474820589151E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997925400994	WITHOUT_CLASSIFICATION	2.0745990049159623E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996080544662	WITHOUT_CLASSIFICATION	3.919455338155176E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9996427041053801	WITHOUT_CLASSIFICATION	3.572958946198199E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995311415915	WITHOUT_CLASSIFICATION	4.6885840853209294E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999982911041208	WITHOUT_CLASSIFICATION	1.7088958792215839E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999914991455577	WITHOUT_CLASSIFICATION	8.500854442217409E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999988033002902	WITHOUT_CLASSIFICATION	1.1966997096972689E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999955614239634	WITHOUT_CLASSIFICATION	4.438576036672512E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999994102502625	WITHOUT_CLASSIFICATION	5.89749737444078E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999994102502625	WITHOUT_CLASSIFICATION	5.89749737444078E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999995048379828	WITHOUT_CLASSIFICATION	4.951620171495813E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999436653031	WITHOUT_CLASSIFICATION	5.6334696837036936E-8	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997821656367	WITHOUT_CLASSIFICATION	2.1783436335860546E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999916238913434	WITHOUT_CLASSIFICATION	8.376108656517653E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955770818244	WITHOUT_CLASSIFICATION	4.422918175586845E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366218565879	WITHOUT_CLASSIFICATION	6.337814341213665E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999856153458	WITHOUT_CLASSIFICATION	1.438465419308495E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992291158692	WITHOUT_CLASSIFICATION	7.708841307797599E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999994464644938	WITHOUT_CLASSIFICATION	5.535355061749642E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999305260291	WITHOUT_CLASSIFICATION	6.947397087558717E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999917032052	WITHOUT_CLASSIFICATION	8.29679478418999E-9	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997892686507	WITHOUT_CLASSIFICATION	2.1073134925793856E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995577047663	WITHOUT_CLASSIFICATION	4.4229523368412993E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999913505885972	WITHOUT_CLASSIFICATION	8.649411402793688E-6	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999942236453194	WITHOUT_CLASSIFICATION	5.7763546805978395E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999919932664969	WITHOUT_CLASSIFICATION	8.006733503178726E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986942281558	WITHOUT_CLASSIFICATION	1.3057718442032758E-6	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999966791331283	WITHOUT_CLASSIFICATION	3.3208668717682987E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999974480317722	WITHOUT_CLASSIFICATION	2.5519682279237575E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996732133108	WITHOUT_CLASSIFICATION	3.2678668921977893E-7	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999888120884028	WITHOUT_CLASSIFICATION	1.118791159702209E-5	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999994507173562	WITHOUT_CLASSIFICATION	5.492826437942177E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999977687846556	WITHOUT_CLASSIFICATION	2.2312153444284412E-6	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999985885688015	WITHOUT_CLASSIFICATION	1.4114311985525743E-6	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999995726893845	WITHOUT_CLASSIFICATION	4.273106155009179E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999980236167769	WITHOUT_CLASSIFICATION	1.9763832231031302E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999987400693054	WITHOUT_CLASSIFICATION	1.2599306945059296E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999957757178051	WITHOUT_CLASSIFICATION	4.224282194892082E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999420505142	WITHOUT_CLASSIFICATION	5.7949485732150164E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999888419135551	WITHOUT_CLASSIFICATION	1.1158086444919652E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999931229774	WITHOUT_CLASSIFICATION	6.877022622741037E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999969070373913	WITHOUT_CLASSIFICATION	3.0929626087446264E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999959665117879	WITHOUT_CLASSIFICATION	4.033488212130659E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999639680245	WITHOUT_CLASSIFICATION	3.603197550647133E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999166887598968	WITHOUT_CLASSIFICATION	8.331124010317703E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999949033863283	WITHOUT_CLASSIFICATION	5.096613671648238E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999738711518	WITHOUT_CLASSIFICATION	2.6128848141121E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997900167199	WITHOUT_CLASSIFICATION	2.0998328007403782E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999258771737	WITHOUT_CLASSIFICATION	7.412282624951509E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999993214378669	WITHOUT_CLASSIFICATION	6.785621331647186E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999997162219755	WITHOUT_CLASSIFICATION	2.8377802456388703E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999986894116123	WITHOUT_CLASSIFICATION	1.3105883877366395E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998835659253	WITHOUT_CLASSIFICATION	1.1643407467800269E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998880544969	WITHOUT_CLASSIFICATION	1.1194550313248662E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995022784668	WITHOUT_CLASSIFICATION	4.977215332939952E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999909241685851	WITHOUT_CLASSIFICATION	9.075831414864173E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999851123808626	WITHOUT_CLASSIFICATION	1.488761913730346E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999868823537955	WITHOUT_CLASSIFICATION	1.3117646204584634E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999995951014682	WITHOUT_CLASSIFICATION	4.0489853175559817E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9990752441867887	WITHOUT_CLASSIFICATION	9.247558132112234E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999980855116344	WITHOUT_CLASSIFICATION	1.914488365685216E-6	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999946691042023	WITHOUT_CLASSIFICATION	5.3308957976479615E-6	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999981004255138	WITHOUT_CLASSIFICATION	1.8995744861023669E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999852780799765	WITHOUT_CLASSIFICATION	1.4721920023458107E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999994186707065	WITHOUT_CLASSIFICATION	5.813292933954023E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.999992949222049	WITHOUT_CLASSIFICATION	7.050777951039973E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999555395540588	WITHOUT_CLASSIFICATION	4.446044594118848E-5	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.999997954435047	WITHOUT_CLASSIFICATION	2.0455649529599067E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999741557548	WITHOUT_CLASSIFICATION	2.584424520022086E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999718464185572	WITHOUT_CLASSIFICATION	2.8153581442791222E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999996422763642	WITHOUT_CLASSIFICATION	3.5772363590537367E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999956655296003	WITHOUT_CLASSIFICATION	4.334470399754115E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999996989254422	WITHOUT_CLASSIFICATION	3.0107455779134704E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999993233170014	WITHOUT_CLASSIFICATION	6.766829985555627E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999592748293689	WITHOUT_CLASSIFICATION	4.0725170631174785E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999997687617743	WITHOUT_CLASSIFICATION	2.3123822566339336E-7	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999386992559	WITHOUT_CLASSIFICATION	6.130074407900723E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999963220373147	WITHOUT_CLASSIFICATION	3.677962685385694E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999615498291095	WITHOUT_CLASSIFICATION	3.845017089055771E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999615498291095	WITHOUT_CLASSIFICATION	3.845017089055771E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999991084794464	WITHOUT_CLASSIFICATION	8.915205534952124E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999985580086378	WITHOUT_CLASSIFICATION	1.4419913622108734E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999996930499278	WITHOUT_CLASSIFICATION	3.069500722058135E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999986102550514	WITHOUT_CLASSIFICATION	1.3897449484712618E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999996063706108	WITHOUT_CLASSIFICATION	3.9362938918819147E-7	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999989537622591	WITHOUT_CLASSIFICATION	1.0462377408334789E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999811106579	WITHOUT_CLASSIFICATION	1.888934212928406E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997661903215	WITHOUT_CLASSIFICATION	2.3380967854487985E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999993098577682	WITHOUT_CLASSIFICATION	6.901422317844774E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999822354304	WITHOUT_CLASSIFICATION	1.7764569618712155E-8	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999995322978008	WITHOUT_CLASSIFICATION	4.6770219924149494E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999710681825	WITHOUT_CLASSIFICATION	2.893181750179721E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999916845253478	WITHOUT_CLASSIFICATION	8.315474652263422E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999997054355005	WITHOUT_CLASSIFICATION	2.9456449952838945E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999976182639528	WITHOUT_CLASSIFICATION	2.3817360472195306E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999975782558619	WITHOUT_CLASSIFICATION	2.421744138148511E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999974372792589	WITHOUT_CLASSIFICATION	2.5627207410175706E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999999779400144	WITHOUT_CLASSIFICATION	2.2059985646469272E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999779993728969	WITHOUT_CLASSIFICATION	2.2000627103189143E-5	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999844967406549	WITHOUT_CLASSIFICATION	1.5503259344993157E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999972959282644	WITHOUT_CLASSIFICATION	2.7040717356161844E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999973822508395	WITHOUT_CLASSIFICATION	2.6177491605768082E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999992441868691	WITHOUT_CLASSIFICATION	7.558131307263285E-7	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999964651610012	WITHOUT_CLASSIFICATION	3.5348389988098883E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996594292487	WITHOUT_CLASSIFICATION	3.4057075132467303E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999978102423855	WITHOUT_CLASSIFICATION	2.189757614384717E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999890284720107	WITHOUT_CLASSIFICATION	1.0971527989346763E-5	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999860254882728	WITHOUT_CLASSIFICATION	1.3974511727331723E-5	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999991651755894	WITHOUT_CLASSIFICATION	8.348244105877469E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999971665768538	WITHOUT_CLASSIFICATION	2.83342314620384E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999993788902853	WITHOUT_CLASSIFICATION	6.211097146367457E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999975792736846	WITHOUT_CLASSIFICATION	2.420726315402917E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999980762282087	WITHOUT_CLASSIFICATION	1.923771791254286E-6	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.999999140182684	WITHOUT_CLASSIFICATION	8.598173159721247E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998894694991161	WITHOUT_CLASSIFICATION	1.1053050088386642E-4	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998894694991161	WITHOUT_CLASSIFICATION	1.1053050088386642E-4	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999995689307213	WITHOUT_CLASSIFICATION	4.3106927876817157E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999934001005405	WITHOUT_CLASSIFICATION	6.5998994594738725E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999973703658703	WITHOUT_CLASSIFICATION	2.6296341297509326E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999992330144736	WITHOUT_CLASSIFICATION	7.669855264274196E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999436358388	WITHOUT_CLASSIFICATION	5.6364161173525713E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999993524757221	WITHOUT_CLASSIFICATION	6.475242779215945E-7	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999869301462524	WITHOUT_CLASSIFICATION	1.306985374766319E-5	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999030920386	WITHOUT_CLASSIFICATION	9.69079615166738E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999825771454863	WITHOUT_CLASSIFICATION	1.7422854513705787E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999070967385	WITHOUT_CLASSIFICATION	9.290326152727976E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999995137950387	WITHOUT_CLASSIFICATION	4.862049612734008E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999998066954163	WITHOUT_CLASSIFICATION	1.9330458365253498E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999992965945651	WITHOUT_CLASSIFICATION	7.034054349874191E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999997097059463	WITHOUT_CLASSIFICATION	2.902940537565257E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999960389335201	WITHOUT_CLASSIFICATION	3.9610664799729115E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999995781817018	WITHOUT_CLASSIFICATION	4.2181829816972234E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999995781817018	WITHOUT_CLASSIFICATION	4.2181829816972234E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999992178537298	WITHOUT_CLASSIFICATION	7.821462701944426E-7	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999994360004697	WITHOUT_CLASSIFICATION	5.639995302648753E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999902280317662	WITHOUT_CLASSIFICATION	9.77196823382448E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999949728466819	WITHOUT_CLASSIFICATION	5.027153318095516E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99986637673898	WITHOUT_CLASSIFICATION	1.3362326101995555E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999975269936513	WITHOUT_CLASSIFICATION	2.4730063487779862E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995190475938	WITHOUT_CLASSIFICATION	4.809524062042259E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995190475938	WITHOUT_CLASSIFICATION	4.809524062042259E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999994120788633	WITHOUT_CLASSIFICATION	5.879211366865948E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996383919394	WITHOUT_CLASSIFICATION	3.616080607130557E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999996659604743	WITHOUT_CLASSIFICATION	3.3403952568695343E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999949826787	WITHOUT_CLASSIFICATION	5.017321316367215E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999998833618466	WITHOUT_CLASSIFICATION	1.1663815345666983E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999602171948004	WITHOUT_CLASSIFICATION	3.9782805199578406E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999647587539	WITHOUT_CLASSIFICATION	3.524124618602581E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999915801799916	WITHOUT_CLASSIFICATION	8.419820008550342E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999957792923272	WITHOUT_CLASSIFICATION	4.2207076727919775E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999873419794539	WITHOUT_CLASSIFICATION	1.2658020545995857E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999954228496286	WITHOUT_CLASSIFICATION	4.57715037139669E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999994431086161	WITHOUT_CLASSIFICATION	5.568913838873209E-7	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999996030552748	WITHOUT_CLASSIFICATION	3.9694472511086893E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999795918503638	WITHOUT_CLASSIFICATION	2.040814963623075E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999975231188015	WITHOUT_CLASSIFICATION	2.476881198505166E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999942140543101	WITHOUT_CLASSIFICATION	5.7859456898752484E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999941664737256	WITHOUT_CLASSIFICATION	5.833526274391391E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999899343776941	WITHOUT_CLASSIFICATION	1.0065622305757209E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999942957766839	WITHOUT_CLASSIFICATION	5.704223316051833E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999999382643457	WITHOUT_CLASSIFICATION	6.173565428642404E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999982437895821	WITHOUT_CLASSIFICATION	1.7562104178287315E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999677555777102	WITHOUT_CLASSIFICATION	3.224442228980655E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999580672033135	WITHOUT_CLASSIFICATION	4.193279668653092E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998771696352	WITHOUT_CLASSIFICATION	1.2283036481605692E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999993960979499	WITHOUT_CLASSIFICATION	6.039020501602367E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999995882890388	WITHOUT_CLASSIFICATION	4.1171096128176203E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999958148156509	WITHOUT_CLASSIFICATION	4.185184349163504E-6	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999994320466271	WITHOUT_CLASSIFICATION	5.679533728012838E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998428386806	WITHOUT_CLASSIFICATION	1.5716131937410394E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984772008474	WITHOUT_CLASSIFICATION	1.5227991525530426E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999966423855625	WITHOUT_CLASSIFICATION	3.3576144375376177E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999116253083611	WITHOUT_CLASSIFICATION	8.837469163893581E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999951199118472	WITHOUT_CLASSIFICATION	4.880088152847095E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997540357277	WITHOUT_CLASSIFICATION	2.459642723377481E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999890792032019	WITHOUT_CLASSIFICATION	1.0920796798084248E-5	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999622898689345	WITHOUT_CLASSIFICATION	3.7710131065422495E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999853179564466	WITHOUT_CLASSIFICATION	1.4682043553364902E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999965543774694	WITHOUT_CLASSIFICATION	3.4456225307246793E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999964058655871	WITHOUT_CLASSIFICATION	3.5941344129023263E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983673440661	WITHOUT_CLASSIFICATION	1.6326559339954824E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997785006912	WITHOUT_CLASSIFICATION	2.2149930874939892E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999993148244493	WITHOUT_CLASSIFICATION	6.851755507594107E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999978422904879	WITHOUT_CLASSIFICATION	2.1577095120902665E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999989431602644	WITHOUT_CLASSIFICATION	1.056839735627128E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999983425654	WITHOUT_CLASSIFICATION	1.657434606680455E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999993296040491	WITHOUT_CLASSIFICATION	6.703959509114239E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999964058655871	WITHOUT_CLASSIFICATION	3.5941344129023263E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983673440661	WITHOUT_CLASSIFICATION	1.6326559339954824E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999854635776333	WITHOUT_CLASSIFICATION	1.4536422366724524E-5	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999912122824988	WITHOUT_CLASSIFICATION	8.78771750121371E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997486847061	WITHOUT_CLASSIFICATION	2.513152939540637E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999995398485308	WITHOUT_CLASSIFICATION	4.60151469197499E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990509001289	WITHOUT_CLASSIFICATION	9.490998710679312E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999138528299	WITHOUT_CLASSIFICATION	8.614717002933798E-8	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999642800006467	WITHOUT_CLASSIFICATION	3.571999935319722E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999921897228843	WITHOUT_CLASSIFICATION	7.81027711573261E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999998976655033	WITHOUT_CLASSIFICATION	1.0233449669575215E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998816969782891	WITHOUT_CLASSIFICATION	1.1830302171094966E-4	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999998694656045	WITHOUT_CLASSIFICATION	1.305343955523908E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998816969782891	WITHOUT_CLASSIFICATION	1.1830302171094966E-4	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.99999989758963	WITHOUT_CLASSIFICATION	1.0241036993064327E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999989795183099	WITHOUT_CLASSIFICATION	1.0204816900907639E-5	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999998903452304	WITHOUT_CLASSIFICATION	1.096547695730836E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944261259885	WITHOUT_CLASSIFICATION	5.573874011404982E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999998309426605	WITHOUT_CLASSIFICATION	1.6905733951020403E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9999633214936886	WITHOUT_CLASSIFICATION	3.6678506311330925E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999633214936886	WITHOUT_CLASSIFICATION	3.6678506311330925E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999853340430894	WITHOUT_CLASSIFICATION	1.4665956910570885E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999924436936907	WITHOUT_CLASSIFICATION	7.5563063093640834E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999798802550214	WITHOUT_CLASSIFICATION	2.0119744978525658E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999951943840064	WITHOUT_CLASSIFICATION	4.805615993632802E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999991482489757	WITHOUT_CLASSIFICATION	8.517510242309472E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999980479955766	WITHOUT_CLASSIFICATION	1.952004423472263E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999987992348025	WITHOUT_CLASSIFICATION	1.20076519748746E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999967672128668	WITHOUT_CLASSIFICATION	3.2327871333499885E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999876819314527	WITHOUT_CLASSIFICATION	1.2318068547266279E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999815203453863	WITHOUT_CLASSIFICATION	1.84796546136122E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999920197766428	WITHOUT_CLASSIFICATION	7.980223357154208E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999978361686541	WITHOUT_CLASSIFICATION	2.1638313459331936E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999564744319474	WITHOUT_CLASSIFICATION	4.352556805255429E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999977127548612	WITHOUT_CLASSIFICATION	2.287245138848078E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999877847368365	WITHOUT_CLASSIFICATION	1.2215263163518701E-5	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999994668232712	WITHOUT_CLASSIFICATION	5.331767287314455E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999975450789228	WITHOUT_CLASSIFICATION	2.4549210772085405E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999950322494561	WITHOUT_CLASSIFICATION	4.967750543877172E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999879025937282	WITHOUT_CLASSIFICATION	1.2097406271885836E-5	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998448144308927	WITHOUT_CLASSIFICATION	1.5518556910734863E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999961189438447	WITHOUT_CLASSIFICATION	3.881056155318722E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999755906639891	WITHOUT_CLASSIFICATION	2.4409336010883566E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999998774649907	WITHOUT_CLASSIFICATION	1.2253500929342894E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999901026098296	WITHOUT_CLASSIFICATION	9.89739017042719E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999866810767658	WITHOUT_CLASSIFICATION	1.331892323428216E-5	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999622553115982	WITHOUT_CLASSIFICATION	3.7744688401762925E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997118738176	WITHOUT_CLASSIFICATION	2.881261823460232E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999950571947393	WITHOUT_CLASSIFICATION	4.94280526070532E-5	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999979702497562	WITHOUT_CLASSIFICATION	2.029750243826139E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999978624848304	WITHOUT_CLASSIFICATION	2.137515169638688E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999573860031607	WITHOUT_CLASSIFICATION	4.261399683930283E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999971485728342	WITHOUT_CLASSIFICATION	2.8514271659372446E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999987992348025	WITHOUT_CLASSIFICATION	1.20076519748746E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999993280449473	WITHOUT_CLASSIFICATION	6.71955052649071E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.999981379873123	WITHOUT_CLASSIFICATION	1.862012687703908E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9994894483465985	WITHOUT_CLASSIFICATION	5.105516534015772E-4	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999966208571779	WITHOUT_CLASSIFICATION	3.379142822183929E-6	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999986561513317	WITHOUT_CLASSIFICATION	1.3438486682413215E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999985272942439	WITHOUT_CLASSIFICATION	1.4727057560074427E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999951943840064	WITHOUT_CLASSIFICATION	4.805615993632802E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999951943840064	WITHOUT_CLASSIFICATION	4.805615993632802E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999816503709272	WITHOUT_CLASSIFICATION	1.8349629072737146E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999973797332199	WITHOUT_CLASSIFICATION	2.6202667800515334E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999843792429959	WITHOUT_CLASSIFICATION	1.562075700407754E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999805384232404	WITHOUT_CLASSIFICATION	1.9461576759559344E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999962063561522	WITHOUT_CLASSIFICATION	3.7936438478434457E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999950719239808	WITHOUT_CLASSIFICATION	4.928076019179619E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999968186654447	WITHOUT_CLASSIFICATION	3.1813345553709933E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999995885393915	WITHOUT_CLASSIFICATION	4.114606085042923E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999943955363305	WITHOUT_CLASSIFICATION	5.604463669504816E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999978388038935	WITHOUT_CLASSIFICATION	2.161196106401414E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999888803322645	WITHOUT_CLASSIFICATION	1.1119667735527454E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998576554235721	WITHOUT_CLASSIFICATION	1.4234457642791707E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999813990829658	WITHOUT_CLASSIFICATION	1.8600917034223895E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999978388038935	WITHOUT_CLASSIFICATION	2.161196106401414E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975100885012	WITHOUT_CLASSIFICATION	2.4899114987967527E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999966103163457	WITHOUT_CLASSIFICATION	3.3896836543140766E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999939405785391	WITHOUT_CLASSIFICATION	6.05942146103965E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9989627995394743	WITHOUT_CLASSIFICATION	0.0010372004605256912	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998576554235721	WITHOUT_CLASSIFICATION	1.4234457642791707E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999984758244924	WITHOUT_CLASSIFICATION	1.5241755075606718E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998361623694	WITHOUT_CLASSIFICATION	1.638376306385384E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999770503893	WITHOUT_CLASSIFICATION	2.2949610692012228E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999860393589	WITHOUT_CLASSIFICATION	1.3960641048260544E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999130858122404	WITHOUT_CLASSIFICATION	8.691418775964604E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999961585773147	WITHOUT_CLASSIFICATION	3.841422685210341E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999992902926412	WITHOUT_CLASSIFICATION	7.097073586937016E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999947902771262	WITHOUT_CLASSIFICATION	5.209722873766864E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999672464510002	WITHOUT_CLASSIFICATION	3.2753548999755693E-5	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999768969816276	WITHOUT_CLASSIFICATION	2.3103018372405352E-5	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999999909882919	WITHOUT_CLASSIFICATION	9.011708102218575E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998189275097	WITHOUT_CLASSIFICATION	1.810724903824903E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999978388038935	WITHOUT_CLASSIFICATION	2.161196106401414E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999984758244924	WITHOUT_CLASSIFICATION	1.5241755075606718E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999770503893	WITHOUT_CLASSIFICATION	2.2949610692012228E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999982341587678	WITHOUT_CLASSIFICATION	1.7658412321761843E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999935810709699	WITHOUT_CLASSIFICATION	6.41892903011386E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.999998757165228	WITHOUT_CLASSIFICATION	1.2428347719556615E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998576554235721	WITHOUT_CLASSIFICATION	1.4234457642791707E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999972385861023	WITHOUT_CLASSIFICATION	2.7614138976110706E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999932922720892	WITHOUT_CLASSIFICATION	6.707727910765029E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999981269955326	WITHOUT_CLASSIFICATION	1.87300446739539E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999882654860569	WITHOUT_CLASSIFICATION	1.1734513943175615E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999947902771262	WITHOUT_CLASSIFICATION	5.209722873766864E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975100885012	WITHOUT_CLASSIFICATION	2.4899114987967527E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999861817657841	WITHOUT_CLASSIFICATION	1.3818234215870643E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.99998029558965	WITHOUT_CLASSIFICATION	1.9704410349994205E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999869918319039	WITHOUT_CLASSIFICATION	1.300816809613742E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999882137564242	WITHOUT_CLASSIFICATION	1.1786243575883667E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999967453668924	WITHOUT_CLASSIFICATION	3.254633107624549E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999931159218232	WITHOUT_CLASSIFICATION	6.8840781768753614E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999955172867021	WITHOUT_CLASSIFICATION	4.482713297928092E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944261259885	WITHOUT_CLASSIFICATION	5.573874011404982E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964597119896	WITHOUT_CLASSIFICATION	3.540288010449407E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999808499135	WITHOUT_CLASSIFICATION	1.9150086493627501E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999982479167577	WITHOUT_CLASSIFICATION	1.7520832421935793E-6	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999990042378457	WITHOUT_CLASSIFICATION	9.957621543474804E-7	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999993316415391	WITHOUT_CLASSIFICATION	6.683584609759679E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999990618285179	WITHOUT_CLASSIFICATION	9.381714820867719E-7	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999978754553607	WITHOUT_CLASSIFICATION	2.1245446393374562E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999994475283274	WITHOUT_CLASSIFICATION	5.524716726062596E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999882654860569	WITHOUT_CLASSIFICATION	1.1734513943175615E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999647417128366	WITHOUT_CLASSIFICATION	3.525828716346576E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999893297164978	WITHOUT_CLASSIFICATION	1.0670283502135033E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999398820827479	WITHOUT_CLASSIFICATION	6.0117917252159434E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999938626562566	WITHOUT_CLASSIFICATION	6.137343743488305E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999896239976952	WITHOUT_CLASSIFICATION	1.0376002304846665E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999972077680351	WITHOUT_CLASSIFICATION	2.7922319648722466E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999910208338256	WITHOUT_CLASSIFICATION	8.979166174444895E-6	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999840327862778	WITHOUT_CLASSIFICATION	1.59672137222647E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996772944685	WITHOUT_CLASSIFICATION	3.2270553151605366E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998936929963228	WITHOUT_CLASSIFICATION	1.0630700367719682E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999877447294749	WITHOUT_CLASSIFICATION	1.2255270525046671E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999752855426446	WITHOUT_CLASSIFICATION	2.4714457355378874E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999985277801203	WITHOUT_CLASSIFICATION	1.4722198796533848E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999507508997874	WITHOUT_CLASSIFICATION	4.924910021274956E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999927095582	WITHOUT_CLASSIFICATION	7.290441775729538E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999999764222014	WITHOUT_CLASSIFICATION	2.3577798596264017E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999996813713753	WITHOUT_CLASSIFICATION	3.1862862478077933E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999663093741	WITHOUT_CLASSIFICATION	3.3690625904114695E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997558143165	WITHOUT_CLASSIFICATION	2.441856834530391E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999904399505972	WITHOUT_CLASSIFICATION	9.560049402742165E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999936101113063	WITHOUT_CLASSIFICATION	6.38988869367465E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999984609718822	WITHOUT_CLASSIFICATION	1.5390281178469061E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999978577635625	WITHOUT_CLASSIFICATION	2.1422364375222898E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999996470783892	WITHOUT_CLASSIFICATION	3.529216107365589E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996140227398	WITHOUT_CLASSIFICATION	3.8597726014498253E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9983423566336973	WITHOUT_CLASSIFICATION	0.001657643366302672	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999694380006505	WITHOUT_CLASSIFICATION	3.056199934945064E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999948284848346	WITHOUT_CLASSIFICATION	5.171515165362534E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999973275887726	WITHOUT_CLASSIFICATION	2.672411227523471E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.998097711893401	WITHOUT_CLASSIFICATION	0.0019022881065990569	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999991705712113	WITHOUT_CLASSIFICATION	8.294287887433096E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999984857100556	WITHOUT_CLASSIFICATION	1.5142899443769364E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999999548498558	WITHOUT_CLASSIFICATION	4.5150144191502584E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999679020724	WITHOUT_CLASSIFICATION	3.209792773753983E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999997026408541	WITHOUT_CLASSIFICATION	2.973591459010975E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995789375262	WITHOUT_CLASSIFICATION	4.2106247377454414E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999991796450525	WITHOUT_CLASSIFICATION	8.20354947585066E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999998664229401	WITHOUT_CLASSIFICATION	1.3357705989518148E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995789375262	WITHOUT_CLASSIFICATION	4.2106247377454414E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999997026408541	WITHOUT_CLASSIFICATION	2.973591459010975E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999991796450525	WITHOUT_CLASSIFICATION	8.20354947585066E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999955767574804	WITHOUT_CLASSIFICATION	4.423242519585926E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999993238744704	WITHOUT_CLASSIFICATION	6.76125529473824E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999868484272	WITHOUT_CLASSIFICATION	1.315157275981506E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999990270147749	WITHOUT_CLASSIFICATION	9.729852249514838E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999795667915	WITHOUT_CLASSIFICATION	2.043320850355491E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999856822184836	WITHOUT_CLASSIFICATION	1.4317781516515968E-5	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999510827139407	WITHOUT_CLASSIFICATION	4.89172860593151E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999925987322814	WITHOUT_CLASSIFICATION	7.401267718617496E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999992117894849	WITHOUT_CLASSIFICATION	7.882105151010354E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999963955643293	WITHOUT_CLASSIFICATION	3.6044356707011086E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999992372876149	WITHOUT_CLASSIFICATION	7.627123851322591E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999860747831844	WITHOUT_CLASSIFICATION	1.3925216815559999E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998667265291	WITHOUT_CLASSIFICATION	1.3327347101960102E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999947116622471	WITHOUT_CLASSIFICATION	5.2883377529345725E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998483721559	WITHOUT_CLASSIFICATION	1.5162784407068985E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999711472995867	WITHOUT_CLASSIFICATION	2.88527004132986E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997555626003	WITHOUT_CLASSIFICATION	2.4443739969442024E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999994721480318	WITHOUT_CLASSIFICATION	5.27851968162245E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998658905496	WITHOUT_CLASSIFICATION	1.341094504718992E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999985779913343	WITHOUT_CLASSIFICATION	1.4220086656674252E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999987286882962	WITHOUT_CLASSIFICATION	1.2713117038298066E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999799295324	WITHOUT_CLASSIFICATION	2.007046759165952E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999965123810085	WITHOUT_CLASSIFICATION	3.487618991427093E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999994721126816	WITHOUT_CLASSIFICATION	5.278873183171841E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999998455192364	WITHOUT_CLASSIFICATION	1.5448076360071733E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999998455192364	WITHOUT_CLASSIFICATION	1.5448076360071733E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996460663535	WITHOUT_CLASSIFICATION	3.5393364650223404E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996460663535	WITHOUT_CLASSIFICATION	3.5393364650223404E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999952148236368	WITHOUT_CLASSIFICATION	4.785176363126949E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997555626003	WITHOUT_CLASSIFICATION	2.4443739969442024E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999998907192178	WITHOUT_CLASSIFICATION	1.0928078220385683E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999988613928615	WITHOUT_CLASSIFICATION	1.1386071385439553E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999976713241618	WITHOUT_CLASSIFICATION	2.3286758381384493E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999976713241618	WITHOUT_CLASSIFICATION	2.3286758381384493E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999972636196793	WITHOUT_CLASSIFICATION	2.736380320725223E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999899647609934	WITHOUT_CLASSIFICATION	1.0035239006660288E-5	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999996305909141	WITHOUT_CLASSIFICATION	3.6940908586429674E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999958966612527	WITHOUT_CLASSIFICATION	4.103338747297165E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999987223904538	WITHOUT_CLASSIFICATION	1.2776095461913447E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999980553266	WITHOUT_CLASSIFICATION	1.9446733758304723E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999917424046829	WITHOUT_CLASSIFICATION	8.257595317085733E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999998239607385	WITHOUT_CLASSIFICATION	1.7603926149695967E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999949831717276	WITHOUT_CLASSIFICATION	5.016828272334852E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.99999788400446	WITHOUT_CLASSIFICATION	2.115995540113604E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999993178526553	WITHOUT_CLASSIFICATION	6.821473447915255E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999919722307985	WITHOUT_CLASSIFICATION	8.027769201400464E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999956305798083	WITHOUT_CLASSIFICATION	4.36942019164402E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999913703425444	WITHOUT_CLASSIFICATION	8.629657455528009E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999911617829101	WITHOUT_CLASSIFICATION	8.838217089741385E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999932029710501	WITHOUT_CLASSIFICATION	6.79702894999316E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865199821844	WITHOUT_CLASSIFICATION	1.3480017815646963E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999967581657465	WITHOUT_CLASSIFICATION	3.2418342534464445E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999996883999461	WITHOUT_CLASSIFICATION	3.1160005381044434E-7	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999993390416312	WITHOUT_CLASSIFICATION	6.609583688545419E-7	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999998724303129	WITHOUT_CLASSIFICATION	1.2756968703814086E-7	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999996507899427	WITHOUT_CLASSIFICATION	3.4921005731208244E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999993108563705	WITHOUT_CLASSIFICATION	6.891436293705215E-7	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998412308573	WITHOUT_CLASSIFICATION	1.5876914269572393E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998353528052812	WITHOUT_CLASSIFICATION	1.6464719471875517E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995516845569	WITHOUT_CLASSIFICATION	4.483154431277259E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999752855426446	WITHOUT_CLASSIFICATION	2.4714457355378874E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999992377805761	WITHOUT_CLASSIFICATION	7.622194239271631E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999992928843274	WITHOUT_CLASSIFICATION	7.071156726016377E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883802640092	WITHOUT_CLASSIFICATION	1.1619735990896796E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986589607706	WITHOUT_CLASSIFICATION	1.3410392294620968E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999917145145082	WITHOUT_CLASSIFICATION	8.285485491826202E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999917145145082	WITHOUT_CLASSIFICATION	8.285485491826202E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999999247152886	WITHOUT_CLASSIFICATION	7.528471133391983E-8	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999954860276559	WITHOUT_CLASSIFICATION	4.513972344149831E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999987165080325	WITHOUT_CLASSIFICATION	1.2834919674509945E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999987165080325	WITHOUT_CLASSIFICATION	1.2834919674509945E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999981782288708	WITHOUT_CLASSIFICATION	1.8217711291545764E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999786524296775	WITHOUT_CLASSIFICATION	2.134757032239613E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999981058162354	WITHOUT_CLASSIFICATION	1.8941837646268412E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999982187879484	WITHOUT_CLASSIFICATION	1.7812120515550405E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999950820147809	WITHOUT_CLASSIFICATION	4.917985219015104E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999997681389592	WITHOUT_CLASSIFICATION	2.3186104088912217E-7	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.999995319467768	WITHOUT_CLASSIFICATION	4.680532231976773E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993902741443	WITHOUT_CLASSIFICATION	6.097258557130098E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998057386936	WITHOUT_CLASSIFICATION	1.9426130637320123E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998057386936	WITHOUT_CLASSIFICATION	1.9426130637320123E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999889818276	WITHOUT_CLASSIFICATION	1.1018172395434586E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999643376702	WITHOUT_CLASSIFICATION	3.5662329801268174E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.99999643376702	WITHOUT_CLASSIFICATION	3.5662329801268174E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998949486306	WITHOUT_CLASSIFICATION	1.0505136926835225E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999992471439444	WITHOUT_CLASSIFICATION	7.528560555775317E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9986587237365604	WITHOUT_CLASSIFICATION	0.0013412762634396607	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999977831590801	WITHOUT_CLASSIFICATION	2.216840919970843E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999998727089822	WITHOUT_CLASSIFICATION	1.2729101779911803E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999989904816293	WITHOUT_CLASSIFICATION	1.0095183706384354E-6	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999978824144233	WITHOUT_CLASSIFICATION	2.1175855766453045E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998945682248195	WITHOUT_CLASSIFICATION	1.0543177518051201E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999871394214784	WITHOUT_CLASSIFICATION	1.2860578521427094E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999597290010321	WITHOUT_CLASSIFICATION	4.027099896787993E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999739916358	WITHOUT_CLASSIFICATION	2.600836425635515E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999997302123157	WITHOUT_CLASSIFICATION	2.697876843315211E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999822748676978	WITHOUT_CLASSIFICATION	1.7725132302201926E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999822748676978	WITHOUT_CLASSIFICATION	1.7725132302201926E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999822748676978	WITHOUT_CLASSIFICATION	1.7725132302201926E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999822748676978	WITHOUT_CLASSIFICATION	1.7725132302201926E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999949179195933	WITHOUT_CLASSIFICATION	5.082080406705457E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999999554486829	WITHOUT_CLASSIFICATION	4.4551316989027864E-8	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999920830127988	WITHOUT_CLASSIFICATION	7.916987201195467E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999198056935524	WITHOUT_CLASSIFICATION	8.019430644763391E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999963889038105	WITHOUT_CLASSIFICATION	3.611096189488127E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999984699096851	WITHOUT_CLASSIFICATION	1.5300903149631387E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999932199451801	WITHOUT_CLASSIFICATION	6.780054819880185E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999971163109407	WITHOUT_CLASSIFICATION	2.883689059271217E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999892598019182	WITHOUT_CLASSIFICATION	1.0740198081769346E-5	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997709834345	WITHOUT_CLASSIFICATION	2.2901656557117557E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999997491994694	WITHOUT_CLASSIFICATION	2.5080053048865994E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995476922314	WITHOUT_CLASSIFICATION	4.5230776862323213E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9960707745656157	WITHOUT_CLASSIFICATION	0.003929225434384359	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999075006084	WITHOUT_CLASSIFICATION	9.249939155587306E-8	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999938305958221	WITHOUT_CLASSIFICATION	6.169404177883173E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995476922314	WITHOUT_CLASSIFICATION	4.5230776862323213E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999997984128708	WITHOUT_CLASSIFICATION	2.015871291975517E-6	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999477498528	WITHOUT_CLASSIFICATION	5.225014717850531E-8	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999997468107503	WITHOUT_CLASSIFICATION	2.531892497142077E-7	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999998374590011	WITHOUT_CLASSIFICATION	1.625409987891679E-7	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998284415186	WITHOUT_CLASSIFICATION	1.7155848141596926E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998333429007	WITHOUT_CLASSIFICATION	1.666570993575771E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999576118236	WITHOUT_CLASSIFICATION	4.238817649773545E-8	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999963073496535	WITHOUT_CLASSIFICATION	3.692650346427197E-6	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998556580979	WITHOUT_CLASSIFICATION	1.4434190204990241E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999971923248668	WITHOUT_CLASSIFICATION	2.8076751332732614E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997105653274	WITHOUT_CLASSIFICATION	2.894346725303653E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999989144695748	WITHOUT_CLASSIFICATION	1.0855304252106647E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999940016276798	WITHOUT_CLASSIFICATION	5.9983723201047335E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999307246217392	WITHOUT_CLASSIFICATION	6.927537826082268E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996654351943	WITHOUT_CLASSIFICATION	3.3456480574193195E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999996142935286	WITHOUT_CLASSIFICATION	3.8570647142550185E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998831359361	WITHOUT_CLASSIFICATION	1.1686406394514076E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984228583293	WITHOUT_CLASSIFICATION	1.5771416706906686E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996521882272	WITHOUT_CLASSIFICATION	3.4781177286870837E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984228583293	WITHOUT_CLASSIFICATION	1.5771416706906686E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999997239924549	WITHOUT_CLASSIFICATION	2.7600754509867626E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989759884129	WITHOUT_CLASSIFICATION	1.024011587062913E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999978864798771	WITHOUT_CLASSIFICATION	2.113520123020258E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999996261618264	WITHOUT_CLASSIFICATION	3.7383817359590823E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998831359361	WITHOUT_CLASSIFICATION	1.1686406394514076E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996521882272	WITHOUT_CLASSIFICATION	3.4781177286870837E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999997239924549	WITHOUT_CLASSIFICATION	2.7600754509867626E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995563499414	WITHOUT_CLASSIFICATION	4.436500585676512E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999973849813699	WITHOUT_CLASSIFICATION	2.6150186301873844E-6	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999772343207229	WITHOUT_CLASSIFICATION	2.2765679277044064E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999945738511086	WITHOUT_CLASSIFICATION	5.4261488914123196E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999953582759503	WITHOUT_CLASSIFICATION	4.641724049741384E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999997577912902	WITHOUT_CLASSIFICATION	2.422087097308369E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865199821844	WITHOUT_CLASSIFICATION	1.3480017815646963E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989759884129	WITHOUT_CLASSIFICATION	1.024011587062913E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999993312693266	WITHOUT_CLASSIFICATION	6.687306734046879E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999995925473324	WITHOUT_CLASSIFICATION	4.074526675374035E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997653082383	WITHOUT_CLASSIFICATION	2.346917615554506E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865199821844	WITHOUT_CLASSIFICATION	1.3480017815646963E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999945676657451	WITHOUT_CLASSIFICATION	5.432334254978378E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865199821844	WITHOUT_CLASSIFICATION	1.3480017815646963E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999974424129274	WITHOUT_CLASSIFICATION	2.5575870725185413E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993397228342	WITHOUT_CLASSIFICATION	6.602771657504069E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999650960713804	WITHOUT_CLASSIFICATION	3.490392861951272E-5	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999748939262576	WITHOUT_CLASSIFICATION	2.51060737423536E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999983033305567	WITHOUT_CLASSIFICATION	1.696669443309322E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999993644655102	WITHOUT_CLASSIFICATION	6.355344898498419E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999999993314791	WITHOUT_CLASSIFICATION	6.6852090299130624E-9	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999984484076088	WITHOUT_CLASSIFICATION	1.5515923912378116E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999875379235356	WITHOUT_CLASSIFICATION	1.2462076464540319E-5	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999856011629505	WITHOUT_CLASSIFICATION	1.4398837049437408E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999615498291095	WITHOUT_CLASSIFICATION	3.845017089055771E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999982035738315	WITHOUT_CLASSIFICATION	1.7964261684962875E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9986587237365604	WITHOUT_CLASSIFICATION	0.0013412762634396607	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999891768652421	WITHOUT_CLASSIFICATION	1.082313475787139E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999993630893687	WITHOUT_CLASSIFICATION	6.369106314649171E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999695105445414	WITHOUT_CLASSIFICATION	3.0489455458661453E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998937888597005	WITHOUT_CLASSIFICATION	1.0621114029961435E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999977215962292	WITHOUT_CLASSIFICATION	2.2784037707680183E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992816157568	WITHOUT_CLASSIFICATION	7.183842431094735E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999999875795109	WITHOUT_CLASSIFICATION	1.2420489101869592E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999955567921981	WITHOUT_CLASSIFICATION	4.443207801907995E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999778934591	WITHOUT_CLASSIFICATION	2.2106540910549645E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999988111757279	WITHOUT_CLASSIFICATION	1.1888242721612403E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9986707025480495	WITHOUT_CLASSIFICATION	0.001329297451950611	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999921203643892	WITHOUT_CLASSIFICATION	7.879635610768295E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999968085625365	WITHOUT_CLASSIFICATION	3.191437463447265E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999988130686789	WITHOUT_CLASSIFICATION	1.1869313210883966E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999540611501994	WITHOUT_CLASSIFICATION	4.5938849800666284E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999410193846646	WITHOUT_CLASSIFICATION	5.898061533532652E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999994666446377	WITHOUT_CLASSIFICATION	5.333553622267616E-7	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999998231773888	WITHOUT_CLASSIFICATION	1.76822611105663E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999998582263747	WITHOUT_CLASSIFICATION	1.4177362534197568E-7	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999692063223092	WITHOUT_CLASSIFICATION	3.0793677690855495E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999833810575532	WITHOUT_CLASSIFICATION	1.6618942446748794E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.999126417500063	WITHOUT_CLASSIFICATION	8.735824999370353E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999708849005587	WITHOUT_CLASSIFICATION	2.9115099441262348E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999709040012111	WITHOUT_CLASSIFICATION	2.909599878879245E-5	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999833518107836	WITHOUT_CLASSIFICATION	1.664818921643108E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999927070073814	WITHOUT_CLASSIFICATION	7.292992618583216E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999984782527558	WITHOUT_CLASSIFICATION	1.521747244214114E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9983345404835343	WITHOUT_CLASSIFICATION	0.0016654595164656543	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997749706147	WITHOUT_CLASSIFICATION	2.2502938543878812E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999963162358588	WITHOUT_CLASSIFICATION	3.6837641410936933E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999809775102385	WITHOUT_CLASSIFICATION	1.902248976153329E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999809775102385	WITHOUT_CLASSIFICATION	1.902248976153329E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998556127622	WITHOUT_CLASSIFICATION	1.4438723775173927E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999984484076088	WITHOUT_CLASSIFICATION	1.5515923912378116E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999932786795663	WITHOUT_CLASSIFICATION	6.7213204336098555E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999911898483451	WITHOUT_CLASSIFICATION	8.810151654921406E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999793523111	WITHOUT_CLASSIFICATION	2.0647688829523112E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999997817541356	WITHOUT_CLASSIFICATION	2.1824586437743372E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999891550780957	WITHOUT_CLASSIFICATION	1.084492190425407E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998394478898983	WITHOUT_CLASSIFICATION	1.6055211010175725E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999952413718018	WITHOUT_CLASSIFICATION	4.7586281981792945E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999988828466113	WITHOUT_CLASSIFICATION	1.1171533887844524E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999997814326919	WITHOUT_CLASSIFICATION	2.185673081036506E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999993689556762	WITHOUT_CLASSIFICATION	6.310443237193641E-7	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999999872150011	WITHOUT_CLASSIFICATION	1.2784998908001495E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999958886959247	WITHOUT_CLASSIFICATION	4.1113040753433655E-6	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999874423075494	WITHOUT_CLASSIFICATION	1.2557692450580289E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999083898866	WITHOUT_CLASSIFICATION	9.161011348616505E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999956489828259	WITHOUT_CLASSIFICATION	4.3510171740579E-6	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999791571224	WITHOUT_CLASSIFICATION	2.08428775970945E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999995581790077	WITHOUT_CLASSIFICATION	4.4182099223451396E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999760948826	WITHOUT_CLASSIFICATION	2.390511749975087E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999993703083806	WITHOUT_CLASSIFICATION	6.296916194199101E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999994626300339	WITHOUT_CLASSIFICATION	5.373699661137751E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999987463401154	WITHOUT_CLASSIFICATION	1.2536598845214535E-6	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999002021245	WITHOUT_CLASSIFICATION	9.979787548921108E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9983345404835343	WITHOUT_CLASSIFICATION	0.0016654595164656543	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999753582673	WITHOUT_CLASSIFICATION	2.4641732640096122E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999999877298713	WITHOUT_CLASSIFICATION	1.2270128695127204E-7	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996779639964	WITHOUT_CLASSIFICATION	3.2203600362345627E-7	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999971134981959	WITHOUT_CLASSIFICATION	2.8865018041036823E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999996061287947	WITHOUT_CLASSIFICATION	3.938712054311957E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999973377406858	WITHOUT_CLASSIFICATION	2.662259314251766E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999961963552527	WITHOUT_CLASSIFICATION	3.8036447472340857E-6	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999983295632806	WITHOUT_CLASSIFICATION	1.6704367193537813E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999993505948553	WITHOUT_CLASSIFICATION	6.494051446671692E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999984453226646	WITHOUT_CLASSIFICATION	1.5546773353497085E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999966960605252	WITHOUT_CLASSIFICATION	3.303939474898651E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999386084624577	WITHOUT_CLASSIFICATION	6.139153754229682E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999984336713337	WITHOUT_CLASSIFICATION	1.5663286663360488E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999997321095826	WITHOUT_CLASSIFICATION	2.6789041737171086E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997673973038	WITHOUT_CLASSIFICATION	2.3260269622706006E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997673973038	WITHOUT_CLASSIFICATION	2.3260269622706006E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999988639194766	WITHOUT_CLASSIFICATION	1.136080523427091E-6	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999948167233073	WITHOUT_CLASSIFICATION	5.183276692793523E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999971692925541	WITHOUT_CLASSIFICATION	2.830707445842543E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999971692925541	WITHOUT_CLASSIFICATION	2.830707445842543E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999992679312656	WITHOUT_CLASSIFICATION	7.320687344512114E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999751344884994	WITHOUT_CLASSIFICATION	2.4865511500551916E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999990153990598	WITHOUT_CLASSIFICATION	9.846009402082188E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999618590782	WITHOUT_CLASSIFICATION	3.8140921784445195E-8	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999940071662169	WITHOUT_CLASSIFICATION	5.992833783119078E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999967991699751	WITHOUT_CLASSIFICATION	3.2008300248951804E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999990750531209	WITHOUT_CLASSIFICATION	9.249468791049268E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999990750531209	WITHOUT_CLASSIFICATION	9.249468791049268E-7	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999946222186075	WITHOUT_CLASSIFICATION	5.37778139255509E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999096144102	WITHOUT_CLASSIFICATION	9.038558989163118E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999824043356155	WITHOUT_CLASSIFICATION	1.7595664384538992E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999992141727001	WITHOUT_CLASSIFICATION	7.858272999385309E-7	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999992141727001	WITHOUT_CLASSIFICATION	7.858272999385309E-7	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999987934114128	WITHOUT_CLASSIFICATION	1.2065885871853073E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999982862595375	WITHOUT_CLASSIFICATION	1.7137404625757758E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999993506407475	WITHOUT_CLASSIFICATION	6.493592524689407E-7	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999987525307711	WITHOUT_CLASSIFICATION	1.2474692289787363E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999999948039256	WITHOUT_CLASSIFICATION	5.196074400701598E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999946731265045	WITHOUT_CLASSIFICATION	5.326873495463669E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999992036781312	WITHOUT_CLASSIFICATION	7.963218687510462E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.999996567044944	WITHOUT_CLASSIFICATION	3.432955056060666E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999934398470894	WITHOUT_CLASSIFICATION	6.560152910560683E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999990769924828	WITHOUT_CLASSIFICATION	9.230075172511266E-7	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999934162932835	WITHOUT_CLASSIFICATION	6.583706716409748E-6	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999860659474868	WITHOUT_CLASSIFICATION	1.3934052513083651E-5	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999936479950903	WITHOUT_CLASSIFICATION	6.3520049097166435E-6	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999971896146848	WITHOUT_CLASSIFICATION	2.810385315242334E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999960927045273	WITHOUT_CLASSIFICATION	3.907295472738204E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999263179726	WITHOUT_CLASSIFICATION	7.368202740747448E-8	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999994605971496	WITHOUT_CLASSIFICATION	5.394028503167146E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999974747078668	WITHOUT_CLASSIFICATION	2.525292133149151E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999997151010207	WITHOUT_CLASSIFICATION	2.8489897932239447E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999962795015964	WITHOUT_CLASSIFICATION	3.720498403643687E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999965954441787	WITHOUT_CLASSIFICATION	3.404555821380491E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999964609338865	WITHOUT_CLASSIFICATION	3.5390661134208237E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999871089043892	WITHOUT_CLASSIFICATION	1.289109561072559E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999941619341782	WITHOUT_CLASSIFICATION	5.8380658217533634E-6	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999225840841015	WITHOUT_CLASSIFICATION	7.741591589854992E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999998246935586	WITHOUT_CLASSIFICATION	1.7530644126650897E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999997459608493	WITHOUT_CLASSIFICATION	2.5403915070194424E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999584941051778	WITHOUT_CLASSIFICATION	4.150589482216224E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994663407032	WITHOUT_CLASSIFICATION	5.33659296676486E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999942129164379	WITHOUT_CLASSIFICATION	5.787083562138414E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997819351724	WITHOUT_CLASSIFICATION	2.180648277126861E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999994818138946	WITHOUT_CLASSIFICATION	5.181861053610553E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996927382717	WITHOUT_CLASSIFICATION	3.0726172826436087E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999954553469307	WITHOUT_CLASSIFICATION	4.544653069393878E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999587050516427	WITHOUT_CLASSIFICATION	4.129494835718621E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999917179118594	WITHOUT_CLASSIFICATION	8.282088140544818E-6	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999957779239339	WITHOUT_CLASSIFICATION	4.2220760661223336E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999962575780427	WITHOUT_CLASSIFICATION	3.742421957276681E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999995403657056	WITHOUT_CLASSIFICATION	4.5963429440753477E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995899312065	WITHOUT_CLASSIFICATION	4.1006879342564076E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999996073455414	WITHOUT_CLASSIFICATION	3.9265445859479367E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999980928034431	WITHOUT_CLASSIFICATION	1.9071965569397684E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999982547201658	WITHOUT_CLASSIFICATION	1.7452798341930273E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999997984065601	WITHOUT_CLASSIFICATION	2.0159344006945827E-7	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999988529115441	WITHOUT_CLASSIFICATION	1.1470884559156131E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999909401645375	WITHOUT_CLASSIFICATION	9.059835462619065E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999966614541115	WITHOUT_CLASSIFICATION	3.3385458885332173E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999911764210238	WITHOUT_CLASSIFICATION	8.823578976226566E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999512888915	WITHOUT_CLASSIFICATION	4.871110850262948E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999963207232617	WITHOUT_CLASSIFICATION	3.6792767381643203E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999997702257271	WITHOUT_CLASSIFICATION	2.2977427285964438E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999185256144	WITHOUT_CLASSIFICATION	8.14743854812666E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999602565535	WITHOUT_CLASSIFICATION	3.9743446607512435E-8	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999995541848	WITHOUT_CLASSIFICATION	4.45815118529798E-10	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999937581431503	WITHOUT_CLASSIFICATION	6.241856849709229E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999071267992	WITHOUT_CLASSIFICATION	9.287320081226433E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999997509575879	WITHOUT_CLASSIFICATION	2.4904241209954974E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999997468655174	WITHOUT_CLASSIFICATION	2.531344826018904E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998078257974	WITHOUT_CLASSIFICATION	1.9217420256996186E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999994203318789	WITHOUT_CLASSIFICATION	5.796681211332685E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999439223136	WITHOUT_CLASSIFICATION	5.607768639170508E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999439223136	WITHOUT_CLASSIFICATION	5.607768639170508E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999980872104	WITHOUT_CLASSIFICATION	1.9127895381897806E-9	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999998764679275	WITHOUT_CLASSIFICATION	1.2353207254842577E-7	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998988172224	WITHOUT_CLASSIFICATION	1.0118277757438935E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999700446934	WITHOUT_CLASSIFICATION	2.9955306637821974E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998845279385	WITHOUT_CLASSIFICATION	1.154720615028458E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999954153828692	WITHOUT_CLASSIFICATION	4.584617130871083E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999698188381	WITHOUT_CLASSIFICATION	3.018116194799983E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999117987707	WITHOUT_CLASSIFICATION	8.820122931772164E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999998721362898	WITHOUT_CLASSIFICATION	1.2786371019677908E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999996819235374	WITHOUT_CLASSIFICATION	3.1807646266919836E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999766246974	WITHOUT_CLASSIFICATION	2.337530261709461E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999654134740144	WITHOUT_CLASSIFICATION	3.458652598572881E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999631620646	WITHOUT_CLASSIFICATION	3.683793539667321E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999998831629365	WITHOUT_CLASSIFICATION	1.1683706356543228E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999790529144239	WITHOUT_CLASSIFICATION	2.0947085576131435E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999790529144239	WITHOUT_CLASSIFICATION	2.0947085576131435E-5	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999991984872068	WITHOUT_CLASSIFICATION	8.015127932730964E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999996631241733	WITHOUT_CLASSIFICATION	3.3687582669836753E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999960327704494	WITHOUT_CLASSIFICATION	3.96722955067375E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998689188616	WITHOUT_CLASSIFICATION	1.3108113838545524E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999172235067	WITHOUT_CLASSIFICATION	8.277649332512343E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999842560413157	WITHOUT_CLASSIFICATION	1.5743958684338313E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999837717789459	WITHOUT_CLASSIFICATION	1.6228221054153458E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999983629593325	WITHOUT_CLASSIFICATION	1.6370406674913004E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998822297148	WITHOUT_CLASSIFICATION	1.1777028525211143E-7	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999633700944	WITHOUT_CLASSIFICATION	3.6629905663652264E-8	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997977015592	WITHOUT_CLASSIFICATION	2.0229844083144504E-7	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999978471775357	WITHOUT_CLASSIFICATION	2.152822464238373E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999475222298	WITHOUT_CLASSIFICATION	5.247777019914218E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994798692603	WITHOUT_CLASSIFICATION	5.201307396852649E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999976160675015	WITHOUT_CLASSIFICATION	2.3839324984398863E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997565204298	WITHOUT_CLASSIFICATION	2.434795701992398E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999575553182	WITHOUT_CLASSIFICATION	4.244468170208551E-8	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994512173032	WITHOUT_CLASSIFICATION	5.487826968146004E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999993723436237	WITHOUT_CLASSIFICATION	6.276563762199791E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999132159293	WITHOUT_CLASSIFICATION	8.678407059716075E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998163434617	WITHOUT_CLASSIFICATION	1.8365653839152405E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997692887141	WITHOUT_CLASSIFICATION	2.3071128597027532E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999962005935756	WITHOUT_CLASSIFICATION	3.7994064244453733E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999548378173754	WITHOUT_CLASSIFICATION	4.516218262454488E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999999514794104	WITHOUT_CLASSIFICATION	4.852058960364088E-7	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998469369195	WITHOUT_CLASSIFICATION	1.5306308054616097E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999255384429	WITHOUT_CLASSIFICATION	7.446155708301433E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999995262142773	WITHOUT_CLASSIFICATION	4.737857226086899E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999778703925	WITHOUT_CLASSIFICATION	2.2129607528917297E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999979457747686	WITHOUT_CLASSIFICATION	2.054225231427737E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999835306690313	WITHOUT_CLASSIFICATION	1.6469330968673875E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999963063238532	WITHOUT_CLASSIFICATION	3.6936761468678144E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999647520433	WITHOUT_CLASSIFICATION	3.524795669650711E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998511418884	WITHOUT_CLASSIFICATION	1.4885811151697264E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999996955313408	WITHOUT_CLASSIFICATION	3.044686591042904E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999447661975	WITHOUT_CLASSIFICATION	5.5233802416040184E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999181885693	WITHOUT_CLASSIFICATION	8.181143071313296E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997243068872	WITHOUT_CLASSIFICATION	2.756931127748852E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999991453005405	WITHOUT_CLASSIFICATION	8.54699459617502E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999118254099	WITHOUT_CLASSIFICATION	8.817459008956018E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999966408034523	WITHOUT_CLASSIFICATION	3.359196547611981E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999966408034523	WITHOUT_CLASSIFICATION	3.359196547611981E-6	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998023460059	WITHOUT_CLASSIFICATION	1.9765399401681277E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995462872361	WITHOUT_CLASSIFICATION	4.537127639119477E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999603146662	WITHOUT_CLASSIFICATION	3.968533379135504E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999999408367366	WITHOUT_CLASSIFICATION	5.91632634032583E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999423106259	WITHOUT_CLASSIFICATION	5.7689374155698104E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999989556875035	WITHOUT_CLASSIFICATION	1.0443124963818066E-6	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999836687065	WITHOUT_CLASSIFICATION	1.6331293582636338E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999982273383894	WITHOUT_CLASSIFICATION	1.7726616106319646E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999990612196303	WITHOUT_CLASSIFICATION	9.387803696479676E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976091963875	WITHOUT_CLASSIFICATION	2.3908036125483713E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989442140901	WITHOUT_CLASSIFICATION	1.0557859099057515E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999726817602094	WITHOUT_CLASSIFICATION	2.7318239790583472E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999989700044715	WITHOUT_CLASSIFICATION	1.0299955285962157E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999999615113481	WITHOUT_CLASSIFICATION	3.8488651893829087E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999953013674	WITHOUT_CLASSIFICATION	4.698632648109363E-9	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998081228034	WITHOUT_CLASSIFICATION	1.9187719664705822E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999986737362054	WITHOUT_CLASSIFICATION	1.32626379449028E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999462345062	WITHOUT_CLASSIFICATION	5.3765493719197974E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999980275223327	WITHOUT_CLASSIFICATION	1.9724776673675002E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999987862131079	WITHOUT_CLASSIFICATION	1.213786892080924E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999995432413346	WITHOUT_CLASSIFICATION	4.567586654287607E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998549411772	WITHOUT_CLASSIFICATION	1.450588229720775E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999995575934901	WITHOUT_CLASSIFICATION	4.424065098195116E-7	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999933351280689	WITHOUT_CLASSIFICATION	6.664871931180909E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999950131974009	WITHOUT_CLASSIFICATION	4.986802599174784E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999924473055521	WITHOUT_CLASSIFICATION	7.5526944478879E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999717813001	WITHOUT_CLASSIFICATION	2.821869989881623E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999997931010686	WITHOUT_CLASSIFICATION	2.0689893131301453E-7	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999976314562	WITHOUT_CLASSIFICATION	2.368543936827012E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999997965135332	WITHOUT_CLASSIFICATION	2.0348646673866005E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999863522852	WITHOUT_CLASSIFICATION	1.3647714774536483E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999997801269414	WITHOUT_CLASSIFICATION	2.1987305854405442E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999631184217	WITHOUT_CLASSIFICATION	3.688157834270343E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997361766426	WITHOUT_CLASSIFICATION	2.638233574075934E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999998135104602	WITHOUT_CLASSIFICATION	1.8648953986410905E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999998570008782	WITHOUT_CLASSIFICATION	1.4299912171770754E-7	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999894959068746	WITHOUT_CLASSIFICATION	1.0504093125387989E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999674620772	WITHOUT_CLASSIFICATION	3.253792279068165E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999998522697056	WITHOUT_CLASSIFICATION	1.4773029434665416E-7	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999913202168321	WITHOUT_CLASSIFICATION	8.679783167890685E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993051829037	WITHOUT_CLASSIFICATION	6.94817096194541E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994406658644	WITHOUT_CLASSIFICATION	5.593341354763096E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999855830790154	WITHOUT_CLASSIFICATION	1.4416920984629459E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999940832838516	WITHOUT_CLASSIFICATION	5.91671614836237E-6	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999695138237	WITHOUT_CLASSIFICATION	3.048617624825558E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999105899079	WITHOUT_CLASSIFICATION	8.941009206147898E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997050473522	WITHOUT_CLASSIFICATION	2.9495264775592354E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999631620646	WITHOUT_CLASSIFICATION	3.683793539667321E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999997693012153	WITHOUT_CLASSIFICATION	2.3069878477055803E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998974108486	WITHOUT_CLASSIFICATION	1.0258915134357729E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999998448599717	WITHOUT_CLASSIFICATION	1.5514002818116666E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999851645383	WITHOUT_CLASSIFICATION	1.4835461755353168E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999969608955721	WITHOUT_CLASSIFICATION	3.039104427864622E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999993293221345	WITHOUT_CLASSIFICATION	6.706778654033866E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999805947432	WITHOUT_CLASSIFICATION	1.940525680119346E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999322731727	WITHOUT_CLASSIFICATION	6.772682726776005E-8	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995311415915	WITHOUT_CLASSIFICATION	4.6885840853209294E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999997436623577	WITHOUT_CLASSIFICATION	2.5633764226775437E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999808648804	WITHOUT_CLASSIFICATION	1.9135119614876172E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999990650626561	WITHOUT_CLASSIFICATION	9.349373438232109E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999944658645	WITHOUT_CLASSIFICATION	5.534135491863067E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999826128071	WITHOUT_CLASSIFICATION	1.7387192908913615E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933373339076	WITHOUT_CLASSIFICATION	6.66266609239249E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999943646283209	WITHOUT_CLASSIFICATION	5.635371678999551E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999786685782238	WITHOUT_CLASSIFICATION	2.1331421776174733E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999992552540067	WITHOUT_CLASSIFICATION	7.447459932733158E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999995568566391	WITHOUT_CLASSIFICATION	4.4314336087105845E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933373339076	WITHOUT_CLASSIFICATION	6.66266609239249E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999987946902615	WITHOUT_CLASSIFICATION	1.2053097384328543E-6	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999710408601	WITHOUT_CLASSIFICATION	2.8959139844946026E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999119262877	WITHOUT_CLASSIFICATION	8.807371232505895E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999675227822	WITHOUT_CLASSIFICATION	3.247721769794136E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.99999790537633	WITHOUT_CLASSIFICATION	2.0946236699845322E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996691888983	WITHOUT_CLASSIFICATION	3.3081110175521617E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999984498688	WITHOUT_CLASSIFICATION	1.550131273891256E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999939994867	WITHOUT_CLASSIFICATION	6.000513370058592E-9	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999062739701	WITHOUT_CLASSIFICATION	9.3726029919782E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999987899153056	WITHOUT_CLASSIFICATION	1.2100846945282032E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999781995425819	WITHOUT_CLASSIFICATION	2.1800457418029894E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999886259789975	WITHOUT_CLASSIFICATION	1.1374021002458212E-5	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999984959131868	WITHOUT_CLASSIFICATION	1.5040868132180725E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999938074889	WITHOUT_CLASSIFICATION	6.192511119564843E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999983187617335	WITHOUT_CLASSIFICATION	1.681238266516439E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999002021245	WITHOUT_CLASSIFICATION	9.979787548921108E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999584028877	WITHOUT_CLASSIFICATION	4.1597112323813577E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999310189723	WITHOUT_CLASSIFICATION	6.898102769990457E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999802542986311	WITHOUT_CLASSIFICATION	1.974570136890941E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999994969998988	WITHOUT_CLASSIFICATION	5.03000101134795E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999868661927	WITHOUT_CLASSIFICATION	1.3133807306845606E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998756275115	WITHOUT_CLASSIFICATION	1.2437248853812632E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.999994742211693	WITHOUT_CLASSIFICATION	5.257788307024731E-6	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999243487345	WITHOUT_CLASSIFICATION	7.56512653967218E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994504824687	WITHOUT_CLASSIFICATION	5.49517531271734E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999989117926299	WITHOUT_CLASSIFICATION	1.088207370096245E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999999594837177	WITHOUT_CLASSIFICATION	4.051628228286844E-8	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986942281558	WITHOUT_CLASSIFICATION	1.3057718442032758E-6	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999998944836384	WITHOUT_CLASSIFICATION	1.0551636156176428E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999853733975101	WITHOUT_CLASSIFICATION	1.462660248994421E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999985565021298	WITHOUT_CLASSIFICATION	1.443497870267564E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999902641756973	WITHOUT_CLASSIFICATION	9.735824302813198E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999995098667993	WITHOUT_CLASSIFICATION	4.901332006014389E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999998258113679	WITHOUT_CLASSIFICATION	1.7418863207654122E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999742639452	WITHOUT_CLASSIFICATION	2.573605479513485E-7	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997230512796	WITHOUT_CLASSIFICATION	2.7694872045430836E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999281284028	WITHOUT_CLASSIFICATION	7.187159726750348E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999897213596	WITHOUT_CLASSIFICATION	1.0278640420700843E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998964025935	WITHOUT_CLASSIFICATION	1.0359740654423415E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996594292487	WITHOUT_CLASSIFICATION	3.4057075132467303E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999988278967603	WITHOUT_CLASSIFICATION	1.1721032396416E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999988278967603	WITHOUT_CLASSIFICATION	1.1721032396416E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999993524757221	WITHOUT_CLASSIFICATION	6.475242779215945E-7	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999070967385	WITHOUT_CLASSIFICATION	9.290326152727976E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999949728466819	WITHOUT_CLASSIFICATION	5.027153318095516E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.5438653466804595	WITHOUT_CLASSIFICATION	0.45613465331954045	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999982187879484	WITHOUT_CLASSIFICATION	1.7812120515550405E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999982187879484	WITHOUT_CLASSIFICATION	1.7812120515550405E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999907490494401	WITHOUT_CLASSIFICATION	9.250950559876254E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999942140543101	WITHOUT_CLASSIFICATION	5.7859456898752484E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999440968009022	WITHOUT_CLASSIFICATION	5.590319909776128E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999580672033135	WITHOUT_CLASSIFICATION	4.193279668653092E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999965106914	WITHOUT_CLASSIFICATION	3.4893085864270057E-9	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999981973819296	WITHOUT_CLASSIFICATION	1.8026180703663208E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998094011545	WITHOUT_CLASSIFICATION	1.9059884553925844E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997989583839	WITHOUT_CLASSIFICATION	2.010416161496009E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999908864409	WITHOUT_CLASSIFICATION	9.11355909934626E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972212235253	WITHOUT_CLASSIFICATION	2.77877647473717E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972212235253	WITHOUT_CLASSIFICATION	2.77877647473717E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999257089767232	WITHOUT_CLASSIFICATION	7.429102327690063E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999947902771262	WITHOUT_CLASSIFICATION	5.209722873766864E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999961585773147	WITHOUT_CLASSIFICATION	3.841422685210341E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999734786688611	WITHOUT_CLASSIFICATION	2.6521331138825584E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999501644285784	WITHOUT_CLASSIFICATION	4.983557142162464E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964597119896	WITHOUT_CLASSIFICATION	3.540288010449407E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514970718092	WITHOUT_CLASSIFICATION	4.8502928190894835E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998708036492	WITHOUT_CLASSIFICATION	1.2919635091801493E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999859790236898	WITHOUT_CLASSIFICATION	1.4020976310098277E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999957737783485	WITHOUT_CLASSIFICATION	4.226221651543645E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999790716704	WITHOUT_CLASSIFICATION	2.0928329653925813E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999987899153056	WITHOUT_CLASSIFICATION	1.2100846945282032E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997153659017	WITHOUT_CLASSIFICATION	2.8463409837133826E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999705575127373	WITHOUT_CLASSIFICATION	2.9442487262647464E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999788029114	WITHOUT_CLASSIFICATION	2.1197088601363263E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999986123451774	WITHOUT_CLASSIFICATION	1.3876548225522675E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999941449637336	WITHOUT_CLASSIFICATION	5.8550362663905465E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999949535227404	WITHOUT_CLASSIFICATION	5.046477259533016E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999861024216437	WITHOUT_CLASSIFICATION	1.3897578356359931E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999997592781995	WITHOUT_CLASSIFICATION	2.407218004551272E-7	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999992574040321	WITHOUT_CLASSIFICATION	7.425959678560011E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999999608543714	WITHOUT_CLASSIFICATION	3.914562860138614E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999999608543714	WITHOUT_CLASSIFICATION	3.914562860138614E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995476922314	WITHOUT_CLASSIFICATION	4.5230776862323213E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999857521225	WITHOUT_CLASSIFICATION	1.4247877405433162E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999756495519491	WITHOUT_CLASSIFICATION	2.4350448051034732E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999879062809555	WITHOUT_CLASSIFICATION	1.2093719044512699E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999986861111082	WITHOUT_CLASSIFICATION	1.3138888918024261E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999999977655197	WITHOUT_CLASSIFICATION	2.2344803021093168E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996654351943	WITHOUT_CLASSIFICATION	3.3456480574193195E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999999190521	WITHOUT_CLASSIFICATION	8.09479143115773E-10	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995563499414	WITHOUT_CLASSIFICATION	4.436500585676512E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999593714345	WITHOUT_CLASSIFICATION	4.062856555466883E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865199821844	WITHOUT_CLASSIFICATION	1.3480017815646963E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999999858369275	WITHOUT_CLASSIFICATION	1.4163072503153119E-7	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999999819145765	WITHOUT_CLASSIFICATION	1.808542349921645E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999952440486	WITHOUT_CLASSIFICATION	4.755951413773364E-9	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999987760379888	WITHOUT_CLASSIFICATION	1.2239620111583655E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996273433319	WITHOUT_CLASSIFICATION	3.726566680579538E-7	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999997881026438	WITHOUT_CLASSIFICATION	2.1189735625581494E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999974573724681	WITHOUT_CLASSIFICATION	2.5426275318816178E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999998542918211	WITHOUT_CLASSIFICATION	1.4570817882029864E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999985374206823	WITHOUT_CLASSIFICATION	1.4625793175695287E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999993911973399	WITHOUT_CLASSIFICATION	6.088026601283652E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998111807223	WITHOUT_CLASSIFICATION	1.888192777141504E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999993506407475	WITHOUT_CLASSIFICATION	6.493592524689407E-7	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998923187338	WITHOUT_CLASSIFICATION	1.076812662131648E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999313206861	WITHOUT_CLASSIFICATION	6.867931384967909E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999313206861	WITHOUT_CLASSIFICATION	6.867931384967909E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999995117597104	WITHOUT_CLASSIFICATION	4.882402896469407E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997604283201	WITHOUT_CLASSIFICATION	2.395716800121729E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999716760472	WITHOUT_CLASSIFICATION	2.8323952772085898E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998455708191	WITHOUT_CLASSIFICATION	1.5442918086917736E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999985813677403	WITHOUT_CLASSIFICATION	1.4186322596647945E-6	TEST
