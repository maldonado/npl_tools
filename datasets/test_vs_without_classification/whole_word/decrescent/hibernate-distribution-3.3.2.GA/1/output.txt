//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998052681950313	WITHOUT_CLASSIFICATION	1.947318049687035E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999392693883379	WITHOUT_CLASSIFICATION	6.073061166208671E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999633664451708	WITHOUT_CLASSIFICATION	3.663355482913027E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999520558370675	WITHOUT_CLASSIFICATION	4.794416293257734E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999520558370675	WITHOUT_CLASSIFICATION	4.794416293257734E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999146738726234	WITHOUT_CLASSIFICATION	8.532612737654997E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999151635898934	WITHOUT_CLASSIFICATION	8.483641010663238E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999573705803427	WITHOUT_CLASSIFICATION	4.2629419657295515E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999657443718036	WITHOUT_CLASSIFICATION	3.425562819641473E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999064677042134	WITHOUT_CLASSIFICATION	9.35322957864995E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999064677042134	WITHOUT_CLASSIFICATION	9.35322957864995E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.999893832522153	WITHOUT_CLASSIFICATION	1.0616747784698978E-4	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999720477926769	WITHOUT_CLASSIFICATION	2.7952207323077606E-5	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999401519208635	WITHOUT_CLASSIFICATION	5.9848079136386985E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996504581907728	WITHOUT_CLASSIFICATION	3.495418092271631E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999729973182752	WITHOUT_CLASSIFICATION	2.7002681724782603E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9998893751798947	WITHOUT_CLASSIFICATION	1.1062482010537416E-4	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9997453290549099	WITHOUT_CLASSIFICATION	2.5467094509015785E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999733201971794	WITHOUT_CLASSIFICATION	2.6679802820557086E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999362238512797	WITHOUT_CLASSIFICATION	6.37761487203459E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999388940767654	WITHOUT_CLASSIFICATION	6.110592323458723E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999916097428819	WITHOUT_CLASSIFICATION	8.390257118094135E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9996066659999762	WITHOUT_CLASSIFICATION	3.9333400002392185E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9986262740669279	WITHOUT_CLASSIFICATION	0.0013737259330720646	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9986262740669279	WITHOUT_CLASSIFICATION	0.0013737259330720646	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999896727208378	WITHOUT_CLASSIFICATION	1.0327279162212705E-4	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999472360049239	WITHOUT_CLASSIFICATION	5.2763995076157055E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999896631218829	WITHOUT_CLASSIFICATION	1.0336878117173477E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998453047793223	WITHOUT_CLASSIFICATION	1.5469522067771625E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999420679666213	WITHOUT_CLASSIFICATION	5.793203337858512E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999453365362048	WITHOUT_CLASSIFICATION	5.466346379515262E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999658136911619	WITHOUT_CLASSIFICATION	3.4186308838017E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998094123120193	WITHOUT_CLASSIFICATION	1.9058768798070695E-4	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9993296437618251	WITHOUT_CLASSIFICATION	6.703562381749319E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999244051490629	WITHOUT_CLASSIFICATION	7.559485093710528E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999033386762151	WITHOUT_CLASSIFICATION	9.666132378490563E-5	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999967544320504	WITHOUT_CLASSIFICATION	3.245567949615448E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999978315754867	WITHOUT_CLASSIFICATION	2.1684245132633067E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997280138802721	WITHOUT_CLASSIFICATION	2.71986119727943E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997845840079371	WITHOUT_CLASSIFICATION	2.154159920628183E-4	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999989855432733	WITHOUT_CLASSIFICATION	1.014456726694548E-5	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997910776821506	WITHOUT_CLASSIFICATION	2.089223178494537E-4	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999226909199794	WITHOUT_CLASSIFICATION	7.730908002049568E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9996198263005667	WITHOUT_CLASSIFICATION	3.80173699433411E-4	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998101032759642	WITHOUT_CLASSIFICATION	1.8989672403579773E-4	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9998648274768881	WITHOUT_CLASSIFICATION	1.3517252311187657E-4	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999529580568558	WITHOUT_CLASSIFICATION	4.704194314415897E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999544742678164	WITHOUT_CLASSIFICATION	4.552573218362516E-5	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999791301259756	WITHOUT_CLASSIFICATION	2.086987402442329E-5	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999431060326953	WITHOUT_CLASSIFICATION	5.6893967304562085E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999731313953784	WITHOUT_CLASSIFICATION	2.6868604621661176E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999655600175594	WITHOUT_CLASSIFICATION	3.4439982440556405E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999881754605106	WITHOUT_CLASSIFICATION	1.1824539489469596E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999896219104396	WITHOUT_CLASSIFICATION	1.0378089560379588E-5	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999710826959071	WITHOUT_CLASSIFICATION	2.8917304092887608E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998773836947695	WITHOUT_CLASSIFICATION	1.2261630523051332E-4	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999666777893147	WITHOUT_CLASSIFICATION	3.332221068536122E-5	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999857624688714	WITHOUT_CLASSIFICATION	1.4237531128528573E-5	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999989174938867	WITHOUT_CLASSIFICATION	1.082506113298593E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998881423973919	WITHOUT_CLASSIFICATION	1.11857602608155E-4	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999968328712091	WITHOUT_CLASSIFICATION	3.1671287908965286E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999546439518584	WITHOUT_CLASSIFICATION	4.535604814155906E-5	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999860696535762	WITHOUT_CLASSIFICATION	1.3930346423825553E-5	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998392261700827	WITHOUT_CLASSIFICATION	1.6077382991723827E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998653911210725	WITHOUT_CLASSIFICATION	1.3460887892754227E-4	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999604546540664	WITHOUT_CLASSIFICATION	3.954534593375783E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999948255862453	WITHOUT_CLASSIFICATION	5.174413754698532E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998653911210725	WITHOUT_CLASSIFICATION	1.3460887892754227E-4	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999983241401645	WITHOUT_CLASSIFICATION	1.6758598354388122E-6	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9995993001787715	WITHOUT_CLASSIFICATION	4.006998212283627E-4	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9998597024573195	WITHOUT_CLASSIFICATION	1.402975426806222E-4	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999714052625085	WITHOUT_CLASSIFICATION	2.8594737491440365E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998646950585577	WITHOUT_CLASSIFICATION	1.353049414423672E-4	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998646950585577	WITHOUT_CLASSIFICATION	1.353049414423672E-4	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9995057015024579	WITHOUT_CLASSIFICATION	4.942984975421866E-4	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9995844940480265	WITHOUT_CLASSIFICATION	4.1550595197345903E-4	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999897137185773	WITHOUT_CLASSIFICATION	1.0286281422772865E-5	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999684010370917	WITHOUT_CLASSIFICATION	3.1598962908244335E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999694918652089	WITHOUT_CLASSIFICATION	3.0508134791088525E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999838980996133	WITHOUT_CLASSIFICATION	1.6101900386680694E-5	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999675170951997	WITHOUT_CLASSIFICATION	3.248290480026596E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999624616783046	WITHOUT_CLASSIFICATION	3.7538321695354666E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999225424776235	WITHOUT_CLASSIFICATION	7.745752237649373E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999225424776235	WITHOUT_CLASSIFICATION	7.745752237649373E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999839986144813	WITHOUT_CLASSIFICATION	1.6001385518663442E-5	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999442299315219	WITHOUT_CLASSIFICATION	5.577006847810116E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999225424776235	WITHOUT_CLASSIFICATION	7.745752237649373E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999442496562183	WITHOUT_CLASSIFICATION	5.5750343781721684E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999492674978012	WITHOUT_CLASSIFICATION	5.073250219874669E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999586249180462	WITHOUT_CLASSIFICATION	4.1375081953760296E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998779750937611	WITHOUT_CLASSIFICATION	1.2202490623893055E-4	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998949195694624	WITHOUT_CLASSIFICATION	1.050804305375884E-4	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998949195694624	WITHOUT_CLASSIFICATION	1.050804305375884E-4	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9996146539678558	WITHOUT_CLASSIFICATION	3.853460321442294E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994542151725136	WITHOUT_CLASSIFICATION	5.457848274862819E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.999944355606454	WITHOUT_CLASSIFICATION	5.5644393545989936E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999377658354017	WITHOUT_CLASSIFICATION	6.223416459822382E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999377658354017	WITHOUT_CLASSIFICATION	6.223416459822382E-5	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9994513381123523	WITHOUT_CLASSIFICATION	5.486618876476321E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999332671172991	WITHOUT_CLASSIFICATION	6.673288270088385E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9896824910628008	WITHOUT_CLASSIFICATION	0.010317508937199215	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999810159299867	WITHOUT_CLASSIFICATION	1.8984070013305954E-5	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9982613794152578	WITHOUT_CLASSIFICATION	0.001738620584742137	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999849735086842	WITHOUT_CLASSIFICATION	1.5026491315694116E-5	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997960966294256	WITHOUT_CLASSIFICATION	2.039033705743063E-4	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995624093524347	WITHOUT_CLASSIFICATION	4.375906475654066E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9896824910628008	WITHOUT_CLASSIFICATION	0.010317508937199215	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999737664437443	WITHOUT_CLASSIFICATION	2.623355625570165E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999969523187149	WITHOUT_CLASSIFICATION	3.047681285098204E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999969523187149	WITHOUT_CLASSIFICATION	3.047681285098204E-5	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999671804577732	WITHOUT_CLASSIFICATION	3.2819542226727486E-5	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9996228824631638	WITHOUT_CLASSIFICATION	3.7711753683614764E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998769743069577	WITHOUT_CLASSIFICATION	1.2302569304240541E-4	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9985692323515127	WITHOUT_CLASSIFICATION	0.0014307676484872447	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9995589295675418	WITHOUT_CLASSIFICATION	4.410704324582105E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9997379149184241	WITHOUT_CLASSIFICATION	2.6208508157586814E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999911473489854	WITHOUT_CLASSIFICATION	8.8526510145546E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9997660679213556	WITHOUT_CLASSIFICATION	2.339320786444139E-4	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999897371105907	WITHOUT_CLASSIFICATION	1.0262889409319305E-5	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999897371105907	WITHOUT_CLASSIFICATION	1.0262889409319305E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998052681950313	WITHOUT_CLASSIFICATION	1.947318049687035E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999749272428143	WITHOUT_CLASSIFICATION	2.50727571856443E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999407762068805	WITHOUT_CLASSIFICATION	5.922379311945799E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999939331255194	WITHOUT_CLASSIFICATION	6.06687448061722E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999442756690946	WITHOUT_CLASSIFICATION	5.5724330905484367E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.99995810742568	WITHOUT_CLASSIFICATION	4.189257431988888E-5	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999009815478882	WITHOUT_CLASSIFICATION	9.901845211181163E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9998117144224465	WITHOUT_CLASSIFICATION	1.8828557755341772E-4	TEST
// dup	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999606035658928	WITHOUT_CLASSIFICATION	3.939643410717897E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.99995810742568	WITHOUT_CLASSIFICATION	4.189257431988888E-5	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9995251457828676	WITHOUT_CLASSIFICATION	4.748542171323308E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999721750957619	WITHOUT_CLASSIFICATION	2.7824904238079595E-5	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999443701707728	WITHOUT_CLASSIFICATION	5.562982922728099E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999718250362217	WITHOUT_CLASSIFICATION	2.8174963778226898E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999753867931049	WITHOUT_CLASSIFICATION	2.4613206895030262E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999520558370675	WITHOUT_CLASSIFICATION	4.794416293257734E-5	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999662728462265	WITHOUT_CLASSIFICATION	3.3727153773564626E-5	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999592479818061	WITHOUT_CLASSIFICATION	4.07520181939551E-5	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999610658281864	WITHOUT_CLASSIFICATION	3.893417181353492E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999719200415051	WITHOUT_CLASSIFICATION	2.8079958494869805E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999395020799376	WITHOUT_CLASSIFICATION	6.0497920062300585E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999939761697762	WITHOUT_CLASSIFICATION	6.023830223803406E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999571727774895	WITHOUT_CLASSIFICATION	4.28272225104996E-5	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999972774682869	WITHOUT_CLASSIFICATION	2.722531713095056E-5	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999754481489228	WITHOUT_CLASSIFICATION	2.4551851077251265E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999146738726234	WITHOUT_CLASSIFICATION	8.532612737654997E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999587734566371	WITHOUT_CLASSIFICATION	4.122654336296742E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998560972659434	WITHOUT_CLASSIFICATION	1.4390273405662652E-4	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999561844088826	WITHOUT_CLASSIFICATION	4.3815591117356364E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999580369750235	WITHOUT_CLASSIFICATION	4.196302497652153E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998826281467316	WITHOUT_CLASSIFICATION	1.1737185326833298E-4	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9995670468089339	WITHOUT_CLASSIFICATION	4.329531910660618E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997833140986794	WITHOUT_CLASSIFICATION	2.166859013206927E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997833140986794	WITHOUT_CLASSIFICATION	2.166859013206927E-4	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999458541708519	WITHOUT_CLASSIFICATION	5.414582914807638E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999855732756546	WITHOUT_CLASSIFICATION	1.4426724345279802E-5	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9994113167007265	WITHOUT_CLASSIFICATION	5.886832992735073E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999407762068805	WITHOUT_CLASSIFICATION	5.922379311945799E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999181860867129	WITHOUT_CLASSIFICATION	8.181391328710356E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999660054172584	WITHOUT_CLASSIFICATION	3.3994582741635905E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999663615426448	WITHOUT_CLASSIFICATION	3.363845735512664E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999151635898934	WITHOUT_CLASSIFICATION	8.483641010663238E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999953865606699	WITHOUT_CLASSIFICATION	4.613439330105369E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999953865606699	WITHOUT_CLASSIFICATION	4.613439330105369E-5	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999953865606699	WITHOUT_CLASSIFICATION	4.613439330105369E-5	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999716614707215	WITHOUT_CLASSIFICATION	2.8338529278538893E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999953865606699	WITHOUT_CLASSIFICATION	4.613439330105369E-5	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999355128116293	WITHOUT_CLASSIFICATION	6.448718837068231E-5	TEST
// int	WITHOUT_CLASSIFICATION	0.9998892398651095	WITHOUT_CLASSIFICATION	1.1076013489052498E-4	TEST
// return	WITHOUT_CLASSIFICATION	0.9999362739174333	WITHOUT_CLASSIFICATION	6.372608256666972E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999758771635288	WITHOUT_CLASSIFICATION	2.4122836471181244E-5	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999441823936946	WITHOUT_CLASSIFICATION	5.5817606305286065E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999760506675103	WITHOUT_CLASSIFICATION	2.394933248975674E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999657443718036	WITHOUT_CLASSIFICATION	3.425562819641473E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999657443718036	WITHOUT_CLASSIFICATION	3.425562819641473E-5	TEST
// not array	WITHOUT_CLASSIFICATION	0.9998720595690356	WITHOUT_CLASSIFICATION	1.2794043096441425E-4	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.999963791868764	WITHOUT_CLASSIFICATION	3.620813123599625E-5	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9998908514147051	WITHOUT_CLASSIFICATION	1.0914858529489898E-4	TEST
// byte	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// char	WITHOUT_CLASSIFICATION	0.9998901412454547	WITHOUT_CLASSIFICATION	1.0985875454522826E-4	TEST
// short	WITHOUT_CLASSIFICATION	0.9998893212636547	WITHOUT_CLASSIFICATION	1.10678736345195E-4	TEST
// double	WITHOUT_CLASSIFICATION	0.9999064677042134	WITHOUT_CLASSIFICATION	9.35322957864995E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// float	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// long	WITHOUT_CLASSIFICATION	0.999893832522153	WITHOUT_CLASSIFICATION	1.0616747784698978E-4	TEST
// long	WITHOUT_CLASSIFICATION	0.999893832522153	WITHOUT_CLASSIFICATION	1.0616747784698978E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999649348249253	WITHOUT_CLASSIFICATION	3.506517507465527E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999649348249253	WITHOUT_CLASSIFICATION	3.506517507465527E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999175437644965	WITHOUT_CLASSIFICATION	8.245623550343771E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999175437644965	WITHOUT_CLASSIFICATION	8.245623550343771E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999657443718036	WITHOUT_CLASSIFICATION	3.425562819641473E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999064677042134	WITHOUT_CLASSIFICATION	9.35322957864995E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// float	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// long	WITHOUT_CLASSIFICATION	0.999893832522153	WITHOUT_CLASSIFICATION	1.0616747784698978E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999649348249253	WITHOUT_CLASSIFICATION	3.506517507465527E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999649348249253	WITHOUT_CLASSIFICATION	3.506517507465527E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999175437644965	WITHOUT_CLASSIFICATION	8.245623550343771E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999525283566906	WITHOUT_CLASSIFICATION	4.7471643309340273E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9994914185037431	WITHOUT_CLASSIFICATION	5.085814962568046E-4	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998741282141613	WITHOUT_CLASSIFICATION	1.258717858386805E-4	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9993567362393384	WITHOUT_CLASSIFICATION	6.432637606615707E-4	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998384618472423	WITHOUT_CLASSIFICATION	1.6153815275774878E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9998891257432857	WITHOUT_CLASSIFICATION	1.1087425671437427E-4	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996664726128925	WITHOUT_CLASSIFICATION	3.335273871075041E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999824937931334	WITHOUT_CLASSIFICATION	1.7506206866598392E-4	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998190437737169	WITHOUT_CLASSIFICATION	1.809562262832068E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997992945224145	WITHOUT_CLASSIFICATION	2.007054775856942E-4	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999226753452564	WITHOUT_CLASSIFICATION	7.732465474367374E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999259232709165	WITHOUT_CLASSIFICATION	7.407672908350773E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9998891257432857	WITHOUT_CLASSIFICATION	1.1087425671437427E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998101021395279	WITHOUT_CLASSIFICATION	1.8989786047207913E-4	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999413075811142	WITHOUT_CLASSIFICATION	5.869241888578369E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999413075811142	WITHOUT_CLASSIFICATION	5.869241888578369E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9993395303111962	WITHOUT_CLASSIFICATION	6.604696888038722E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997945388948823	WITHOUT_CLASSIFICATION	2.054611051177659E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.99541031181984	WITHOUT_CLASSIFICATION	0.0045896881801601045	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999435689136918	WITHOUT_CLASSIFICATION	5.643108630808025E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999435689136918	WITHOUT_CLASSIFICATION	5.643108630808025E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999729973182752	WITHOUT_CLASSIFICATION	2.7002681724782603E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999593586467449	WITHOUT_CLASSIFICATION	4.0641353255151835E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999593586467449	WITHOUT_CLASSIFICATION	4.0641353255151835E-5	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9985922479498586	WITHOUT_CLASSIFICATION	0.0014077520501414435	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999626941944622	WITHOUT_CLASSIFICATION	3.730580553774272E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999733201971794	WITHOUT_CLASSIFICATION	2.6679802820557086E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.99144209004326	WITHOUT_CLASSIFICATION	0.008557909956739898	TEST
// ID	WITHOUT_CLASSIFICATION	0.9998893751798947	WITHOUT_CLASSIFICATION	1.1062482010537416E-4	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999440538239864	WITHOUT_CLASSIFICATION	5.594617601370313E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999478190151786	WITHOUT_CLASSIFICATION	5.218098482137406E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9981912477723853	WITHOUT_CLASSIFICATION	0.0018087522276146765	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999388694863611	WITHOUT_CLASSIFICATION	6.113051363880581E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999916097428819	WITHOUT_CLASSIFICATION	8.390257118094135E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999983700188203	WITHOUT_CLASSIFICATION	1.6299811796566819E-6	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999580282557622	WITHOUT_CLASSIFICATION	4.1971744237810846E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999733201971794	WITHOUT_CLASSIFICATION	2.6679802820557086E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999632658708105	WITHOUT_CLASSIFICATION	3.673412918949929E-5	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999593154528661	WITHOUT_CLASSIFICATION	4.0684547133942474E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999580282557622	WITHOUT_CLASSIFICATION	4.1971744237810846E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999632658708105	WITHOUT_CLASSIFICATION	3.673412918949929E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998563808340382	WITHOUT_CLASSIFICATION	1.4361916596177362E-4	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998563808340382	WITHOUT_CLASSIFICATION	1.4361916596177362E-4	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.999961077646551	WITHOUT_CLASSIFICATION	3.8922353449114375E-5	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997945597449555	WITHOUT_CLASSIFICATION	2.0544025504453753E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9998725508346196	WITHOUT_CLASSIFICATION	1.2744916538040983E-4	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9992369935136864	WITHOUT_CLASSIFICATION	7.630064863135828E-4	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999545616508416	WITHOUT_CLASSIFICATION	4.543834915835722E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999501068178762	WITHOUT_CLASSIFICATION	4.9893182123747315E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9997899631234621	WITHOUT_CLASSIFICATION	2.1003687653787782E-4	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999545616508416	WITHOUT_CLASSIFICATION	4.543834915835722E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997576075600885	WITHOUT_CLASSIFICATION	2.423924399116372E-4	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999580282557622	WITHOUT_CLASSIFICATION	4.1971744237810846E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998436496867802	WITHOUT_CLASSIFICATION	1.5635031321974913E-4	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999570119265375	WITHOUT_CLASSIFICATION	4.298807346256269E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9989394024861846	WITHOUT_CLASSIFICATION	0.0010605975138154242	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999801218751234	WITHOUT_CLASSIFICATION	1.9878124876520408E-5	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999955535807381	WITHOUT_CLASSIFICATION	4.446419261902902E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999968984168914	WITHOUT_CLASSIFICATION	3.101583108576275E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998872251754535	WITHOUT_CLASSIFICATION	1.1277482454645644E-4	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998615018445187	WITHOUT_CLASSIFICATION	1.3849815548119763E-4	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999581229204338	WITHOUT_CLASSIFICATION	4.1877079566121655E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.99986378362114	WITHOUT_CLASSIFICATION	1.3621637885992245E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999916097428819	WITHOUT_CLASSIFICATION	8.390257118094135E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.999941857967995	WITHOUT_CLASSIFICATION	5.8142032005118086E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9992762741673651	WITHOUT_CLASSIFICATION	7.237258326348023E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999821734401267	WITHOUT_CLASSIFICATION	1.7826559873255855E-5	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999800028931825	WITHOUT_CLASSIFICATION	1.999710681759744E-5	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999800028931825	WITHOUT_CLASSIFICATION	1.999710681759744E-5	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999364958792238	WITHOUT_CLASSIFICATION	6.350412077616939E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999807215503409	WITHOUT_CLASSIFICATION	1.927844965902189E-5	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999793213962933	WITHOUT_CLASSIFICATION	2.0678603706734737E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9974881593807827	WITHOUT_CLASSIFICATION	0.002511840619217285	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996054983402581	WITHOUT_CLASSIFICATION	3.945016597418711E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998978158803354	WITHOUT_CLASSIFICATION	1.0218411966453284E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998978158803354	WITHOUT_CLASSIFICATION	1.0218411966453284E-4	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999369290227061	WITHOUT_CLASSIFICATION	6.307097729387314E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9997165058814995	WITHOUT_CLASSIFICATION	2.834941185005311E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999393211453852	WITHOUT_CLASSIFICATION	6.06788546147119E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996046995936649	WITHOUT_CLASSIFICATION	3.953004063349864E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9996039335787278	WITHOUT_CLASSIFICATION	3.9606642127222103E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999452458941038	WITHOUT_CLASSIFICATION	5.475410589607123E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9993501657068014	WITHOUT_CLASSIFICATION	6.498342931985331E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9994354107399017	WITHOUT_CLASSIFICATION	5.645892600982525E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999247781134933	WITHOUT_CLASSIFICATION	7.522188650661524E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999598165127963	WITHOUT_CLASSIFICATION	4.0183487203725597E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999219889325672	WITHOUT_CLASSIFICATION	7.801106743277462E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9997016216764901	WITHOUT_CLASSIFICATION	2.98378323509939E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341735819354	WITHOUT_CLASSIFICATION	6.582641806459834E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999215611609913	WITHOUT_CLASSIFICATION	7.843883900875696E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9970445142250586	WITHOUT_CLASSIFICATION	0.002955485774941479	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999687503795521	WITHOUT_CLASSIFICATION	3.1249620447862424E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9995674474773847	WITHOUT_CLASSIFICATION	4.3255252261535106E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999873689726481	WITHOUT_CLASSIFICATION	1.2631027351839192E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9998969869661644	WITHOUT_CLASSIFICATION	1.0301303383573415E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9998969869661644	WITHOUT_CLASSIFICATION	1.0301303383573415E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9997255683943762	WITHOUT_CLASSIFICATION	2.744316056238231E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9997255683943762	WITHOUT_CLASSIFICATION	2.744316056238231E-4	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9974881593807827	WITHOUT_CLASSIFICATION	0.002511840619217285	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997623538728869	WITHOUT_CLASSIFICATION	2.3764612711311498E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9909444279601263	WITHOUT_CLASSIFICATION	0.009055572039873673	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9909444279601263	WITHOUT_CLASSIFICATION	0.009055572039873673	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989783759721967	WITHOUT_CLASSIFICATION	0.0010216240278033359	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998053465091978	WITHOUT_CLASSIFICATION	1.9465349080201994E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999949745842461	WITHOUT_CLASSIFICATION	5.025415753979695E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999904217181047	WITHOUT_CLASSIFICATION	9.578281895360647E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993353913661316	WITHOUT_CLASSIFICATION	6.646086338684525E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9889035455085007	WITHOUT_CLASSIFICATION	0.01109645449149932	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999931827290321	WITHOUT_CLASSIFICATION	6.817270967893837E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9995414909633179	WITHOUT_CLASSIFICATION	4.5850903668207536E-4	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9984234413736389	WITHOUT_CLASSIFICATION	0.0015765586263611466	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9998345242486516	WITHOUT_CLASSIFICATION	1.654757513483255E-4	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999215453043175	WITHOUT_CLASSIFICATION	7.845469568243758E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999670511903964	WITHOUT_CLASSIFICATION	3.29488096036173E-5	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999805707101379	WITHOUT_CLASSIFICATION	1.942928986209456E-5	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9995259838864569	WITHOUT_CLASSIFICATION	4.740161135431276E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9995259838864569	WITHOUT_CLASSIFICATION	4.740161135431276E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997707752297192	WITHOUT_CLASSIFICATION	2.292247702808352E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997707752297192	WITHOUT_CLASSIFICATION	2.292247702808352E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999948434703969	WITHOUT_CLASSIFICATION	5.156529603172784E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989783759721967	WITHOUT_CLASSIFICATION	0.0010216240278033359	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999163664145605	WITHOUT_CLASSIFICATION	8.363358543943685E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996589660813007	WITHOUT_CLASSIFICATION	3.4103391869937403E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998216319717239	WITHOUT_CLASSIFICATION	1.7836802827611193E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995966166968653	WITHOUT_CLASSIFICATION	4.0338330313469936E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7858091800859017	WITHOUT_CLASSIFICATION	0.2141908199140984	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989783759721967	WITHOUT_CLASSIFICATION	0.0010216240278033359	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995966166968653	WITHOUT_CLASSIFICATION	4.0338330313469936E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7858091800859017	WITHOUT_CLASSIFICATION	0.2141908199140984	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995055224023288	WITHOUT_CLASSIFICATION	4.944775976711516E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999581552444742	WITHOUT_CLASSIFICATION	4.184475552586079E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9995842524928887	WITHOUT_CLASSIFICATION	4.1574750711135476E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989783759721967	WITHOUT_CLASSIFICATION	0.0010216240278033359	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989783759721967	WITHOUT_CLASSIFICATION	0.0010216240278033359	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999718144885845	WITHOUT_CLASSIFICATION	2.8185511415541675E-5	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999718144885845	WITHOUT_CLASSIFICATION	2.8185511415541675E-5	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9998904816712647	WITHOUT_CLASSIFICATION	1.0951832873534556E-4	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999783150191841	WITHOUT_CLASSIFICATION	2.168498081587824E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996616156591712	WITHOUT_CLASSIFICATION	3.383843408287837E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999993714114158	WITHOUT_CLASSIFICATION	6.285885841915268E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998329957977793	WITHOUT_CLASSIFICATION	1.6700420222081093E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999968131634239	WITHOUT_CLASSIFICATION	3.186836576100233E-5	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999762374620829	WITHOUT_CLASSIFICATION	2.3762537917112363E-5	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.999906070514136	WITHOUT_CLASSIFICATION	9.39294858639416E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999897194140385	WITHOUT_CLASSIFICATION	1.0280585961602209E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999933929515193	WITHOUT_CLASSIFICATION	6.6070484807037515E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999276834129993	WITHOUT_CLASSIFICATION	7.231658700065295E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999804994192247	WITHOUT_CLASSIFICATION	1.950058077524514E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9986930363357072	WITHOUT_CLASSIFICATION	0.0013069636642928724	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998453047793223	WITHOUT_CLASSIFICATION	1.5469522067771625E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996230616115457	WITHOUT_CLASSIFICATION	3.7693838845434497E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9994969564084488	WITHOUT_CLASSIFICATION	5.030435915511465E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997123447819319	WITHOUT_CLASSIFICATION	2.87655218068047E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998453047793223	WITHOUT_CLASSIFICATION	1.5469522067771625E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.982433404415975	WITHOUT_CLASSIFICATION	0.017566595584025003	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.996821912567272	WITHOUT_CLASSIFICATION	0.0031780874327278943	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9883683870635062	WITHOUT_CLASSIFICATION	0.011631612936493917	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998662921762358	WITHOUT_CLASSIFICATION	1.3370782376411985E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999927208928585	WITHOUT_CLASSIFICATION	7.279107141565522E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999767495062601	WITHOUT_CLASSIFICATION	2.3250493739779895E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999914320290004	WITHOUT_CLASSIFICATION	8.567970999602429E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999038977480279	WITHOUT_CLASSIFICATION	9.610225197207479E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998984987601219	WITHOUT_CLASSIFICATION	1.0150123987798147E-4	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999916738722815	WITHOUT_CLASSIFICATION	8.326127718597357E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998977889079746	WITHOUT_CLASSIFICATION	1.0221109202531933E-4	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999768932928794	WITHOUT_CLASSIFICATION	2.310670712055869E-5	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738626376875	WITHOUT_CLASSIFICATION	2.6137362312442164E-5	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999327258916174	WITHOUT_CLASSIFICATION	6.727410838258765E-5	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999094248046803	WITHOUT_CLASSIFICATION	9.057519531975762E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812913337176	WITHOUT_CLASSIFICATION	1.870866628237144E-5	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999688863193047	WITHOUT_CLASSIFICATION	3.111368069517788E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997293373579623	WITHOUT_CLASSIFICATION	2.706626420377028E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999736393489781	WITHOUT_CLASSIFICATION	2.6360651021934913E-5	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999417542506807	WITHOUT_CLASSIFICATION	5.8245749319308434E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999417542506807	WITHOUT_CLASSIFICATION	5.8245749319308434E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341343960708	WITHOUT_CLASSIFICATION	6.586560392913444E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152110650034	WITHOUT_CLASSIFICATION	8.478893499667553E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999467602115668	WITHOUT_CLASSIFICATION	5.323978843321816E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999048921033282	WITHOUT_CLASSIFICATION	9.510789667177238E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341101257316	WITHOUT_CLASSIFICATION	6.588987426841341E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999368570422139	WITHOUT_CLASSIFICATION	6.314295778615894E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931579940804	WITHOUT_CLASSIFICATION	6.8420059195985E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944045590482	WITHOUT_CLASSIFICATION	5.595440951791889E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998901792305441	WITHOUT_CLASSIFICATION	1.0982076945586777E-4	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997725702384616	WITHOUT_CLASSIFICATION	2.2742976153845412E-4	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978710712529	WITHOUT_CLASSIFICATION	2.12892874710331E-5	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999987265906391	WITHOUT_CLASSIFICATION	1.273409360903899E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9977996954930299	WITHOUT_CLASSIFICATION	0.0022003045069699965	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997589335365844	WITHOUT_CLASSIFICATION	2.4106646341561828E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995055224023288	WITHOUT_CLASSIFICATION	4.944775976711516E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999344777927819	WITHOUT_CLASSIFICATION	6.552220721811273E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999646906935307	WITHOUT_CLASSIFICATION	3.530930646939359E-5	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999193491972771	WITHOUT_CLASSIFICATION	8.065080272280574E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999850272529874	WITHOUT_CLASSIFICATION	1.4972747012607137E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999365521563566	WITHOUT_CLASSIFICATION	6.344784364339741E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999184892416264	WITHOUT_CLASSIFICATION	8.151075837363747E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838941264991	WITHOUT_CLASSIFICATION	1.6105873500909265E-5	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999151664563565	WITHOUT_CLASSIFICATION	8.483354364345947E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9996865018778647	WITHOUT_CLASSIFICATION	3.13498122135346E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999118895860631	WITHOUT_CLASSIFICATION	8.81104139368503E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999597523577204	WITHOUT_CLASSIFICATION	4.0247642279615746E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999898906248036	WITHOUT_CLASSIFICATION	1.0109375196398728E-4	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999243566598712	WITHOUT_CLASSIFICATION	7.564334012873435E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998666769668376	WITHOUT_CLASSIFICATION	1.333230331623396E-4	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999145786051198	WITHOUT_CLASSIFICATION	8.54213948802641E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999297380654208	WITHOUT_CLASSIFICATION	7.026193457917225E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999700954591368	WITHOUT_CLASSIFICATION	2.990454086306849E-5	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999370915076434	WITHOUT_CLASSIFICATION	6.290849235647323E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999784826306011	WITHOUT_CLASSIFICATION	2.151736939895891E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999509704489742	WITHOUT_CLASSIFICATION	4.902955102582825E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999946869037236	WITHOUT_CLASSIFICATION	5.3130962764028055E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9977996954930299	WITHOUT_CLASSIFICATION	0.0022003045069699965	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999579310740503	WITHOUT_CLASSIFICATION	4.2068925949696784E-5	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999566076754546	WITHOUT_CLASSIFICATION	4.339232454537816E-5	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999961002162886	WITHOUT_CLASSIFICATION	3.899783711395138E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978710712529	WITHOUT_CLASSIFICATION	2.12892874710331E-5	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999519071854748	WITHOUT_CLASSIFICATION	4.8092814525162575E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9994464167029399	WITHOUT_CLASSIFICATION	5.535832970602166E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999251575451608	WITHOUT_CLASSIFICATION	7.484245483925934E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998423632220877	WITHOUT_CLASSIFICATION	1.5763677791232048E-4	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997735942796723	WITHOUT_CLASSIFICATION	2.2640572032770465E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999168734738494	WITHOUT_CLASSIFICATION	8.312652615060788E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998364708585048	WITHOUT_CLASSIFICATION	1.6352914149523202E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999702909754459	WITHOUT_CLASSIFICATION	2.9709024554141838E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999500423210413	WITHOUT_CLASSIFICATION	4.9957678958648475E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995055224023288	WITHOUT_CLASSIFICATION	4.944775976711516E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978710712529	WITHOUT_CLASSIFICATION	2.12892874710331E-5	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999708996118366	WITHOUT_CLASSIFICATION	2.910038816339992E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998605805845755	WITHOUT_CLASSIFICATION	1.394194154245363E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999649390894905	WITHOUT_CLASSIFICATION	3.506091050952868E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9995156245360786	WITHOUT_CLASSIFICATION	4.843754639214871E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998876681362193	WITHOUT_CLASSIFICATION	1.1233186378062646E-4	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999970149364794	WITHOUT_CLASSIFICATION	2.9850635205984095E-5	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999819538474264	WITHOUT_CLASSIFICATION	1.8046152573674445E-5	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9998776359256519	WITHOUT_CLASSIFICATION	1.2236407434800285E-4	TEST
/*	WITHOUT_CLASSIFICATION	0.9997453290549099	WITHOUT_CLASSIFICATION	2.5467094509015785E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997377360106381	WITHOUT_CLASSIFICATION	2.6226398936195233E-4	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996213582971218	WITHOUT_CLASSIFICATION	3.786417028781549E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978710712529	WITHOUT_CLASSIFICATION	2.12892874710331E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9977996954930299	WITHOUT_CLASSIFICATION	0.0022003045069699965	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9994996901411791	WITHOUT_CLASSIFICATION	5.003098588207775E-4	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999444079294909	WITHOUT_CLASSIFICATION	5.5592070509038785E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9983897435856239	WITHOUT_CLASSIFICATION	0.001610256414375997	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9977996954930299	WITHOUT_CLASSIFICATION	0.0022003045069699965	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998773432531649	WITHOUT_CLASSIFICATION	1.226567468351139E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999649390894905	WITHOUT_CLASSIFICATION	3.506091050952868E-5	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9984348821470939	WITHOUT_CLASSIFICATION	0.0015651178529060387	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9963594951450695	WITHOUT_CLASSIFICATION	0.003640504854930554	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999878570905242	WITHOUT_CLASSIFICATION	1.2142909475792348E-4	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997735942796723	WITHOUT_CLASSIFICATION	2.2640572032770465E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999671542242091	WITHOUT_CLASSIFICATION	3.2845775790911134E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.999962866902987	WITHOUT_CLASSIFICATION	3.7133097013082604E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998862001337725	WITHOUT_CLASSIFICATION	1.1379986622751741E-4	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999659341855399	WITHOUT_CLASSIFICATION	3.4065814460074605E-5	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999907206311347	WITHOUT_CLASSIFICATION	9.279368865284282E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9977996954930299	WITHOUT_CLASSIFICATION	0.0022003045069699965	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999168734738494	WITHOUT_CLASSIFICATION	8.312652615060788E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998364708585048	WITHOUT_CLASSIFICATION	1.6352914149523202E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779393226003	WITHOUT_CLASSIFICATION	2.2060677399759823E-5	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816053378631	WITHOUT_CLASSIFICATION	1.8394662136907363E-5	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999257725733469	WITHOUT_CLASSIFICATION	7.42274266531871E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999481466337659	WITHOUT_CLASSIFICATION	5.185336623406938E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999613791885786	WITHOUT_CLASSIFICATION	3.8620811421313156E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998586335613944	WITHOUT_CLASSIFICATION	1.4136643860559054E-4	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9995052383420384	WITHOUT_CLASSIFICATION	4.947616579616894E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998734012071356	WITHOUT_CLASSIFICATION	1.2659879286439665E-4	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999692425783757	WITHOUT_CLASSIFICATION	3.075742162420194E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999368570422139	WITHOUT_CLASSIFICATION	6.314295778615894E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999622498950336	WITHOUT_CLASSIFICATION	3.7750104966425704E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999919918284791	WITHOUT_CLASSIFICATION	8.008171520903197E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338397519438	WITHOUT_CLASSIFICATION	6.616024805616856E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998272837562224	WITHOUT_CLASSIFICATION	1.7271624377764253E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931579940804	WITHOUT_CLASSIFICATION	6.8420059195985E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313606961436	WITHOUT_CLASSIFICATION	6.863930385643756E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999700954591368	WITHOUT_CLASSIFICATION	2.990454086306849E-5	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.99945973214259	WITHOUT_CLASSIFICATION	5.402678574100838E-4	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999915201921665	WITHOUT_CLASSIFICATION	8.479807833492485E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999185041848635	WITHOUT_CLASSIFICATION	8.149581513648448E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999327458799366	WITHOUT_CLASSIFICATION	6.725412006338589E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999720267290533	WITHOUT_CLASSIFICATION	2.797327094680506E-5	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9990627583460967	WITHOUT_CLASSIFICATION	9.372416539033537E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998454884670486	WITHOUT_CLASSIFICATION	1.545115329514188E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999914320290004	WITHOUT_CLASSIFICATION	8.567970999602429E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999532531985862	WITHOUT_CLASSIFICATION	4.6746801413767396E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998782708019075	WITHOUT_CLASSIFICATION	1.2172919809252371E-4	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999645557080675	WITHOUT_CLASSIFICATION	3.5444291932519474E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999570766797535	WITHOUT_CLASSIFICATION	4.292332024642236E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999512858260194	WITHOUT_CLASSIFICATION	4.8714173980599975E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998694120309856	WITHOUT_CLASSIFICATION	1.3058796901446344E-4	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999959807161623	WITHOUT_CLASSIFICATION	4.01928383769347E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596549884583	WITHOUT_CLASSIFICATION	4.034501154166045E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999922172103791	WITHOUT_CLASSIFICATION	7.782789620899163E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999885242245265	WITHOUT_CLASSIFICATION	1.1475775473500155E-4	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999743010373017	WITHOUT_CLASSIFICATION	2.5698962698317826E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999740669710212	WITHOUT_CLASSIFICATION	2.5933028978821706E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999557390894525	WITHOUT_CLASSIFICATION	4.426091054755833E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999592678016208	WITHOUT_CLASSIFICATION	4.073219837917727E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998613496717166	WITHOUT_CLASSIFICATION	1.386503282834942E-4	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998549123254925	WITHOUT_CLASSIFICATION	1.4508767450738404E-4	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999557390894525	WITHOUT_CLASSIFICATION	4.426091054755833E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998559039066888	WITHOUT_CLASSIFICATION	1.4409609331117438E-4	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999059676066088	WITHOUT_CLASSIFICATION	9.403239339122266E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343634333191	WITHOUT_CLASSIFICATION	6.563656668096116E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999858249190382	WITHOUT_CLASSIFICATION	1.4175080961747793E-5	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999382349526205	WITHOUT_CLASSIFICATION	6.176504737954873E-5	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999822846956746	WITHOUT_CLASSIFICATION	1.771530432543906E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999584776798432	WITHOUT_CLASSIFICATION	4.152232015673347E-5	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998199314883949	WITHOUT_CLASSIFICATION	1.8006851160507457E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998199314883949	WITHOUT_CLASSIFICATION	1.8006851160507457E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999830163486219	WITHOUT_CLASSIFICATION	1.698365137819208E-5	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999862971405985	WITHOUT_CLASSIFICATION	1.3702859401469475E-5	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999278884417231	WITHOUT_CLASSIFICATION	7.211155827692634E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999454325159072	WITHOUT_CLASSIFICATION	5.4567484092849074E-5	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999958008982358	WITHOUT_CLASSIFICATION	4.199101764163423E-6	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998291070821151	WITHOUT_CLASSIFICATION	1.7089291788486495E-4	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9998013850023217	WITHOUT_CLASSIFICATION	1.9861499767819237E-4	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999362447131117	WITHOUT_CLASSIFICATION	6.37552868883122E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9995141846615069	WITHOUT_CLASSIFICATION	4.85815338493204E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999883944063859	WITHOUT_CLASSIFICATION	1.1605593614079824E-5	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998365071822366	WITHOUT_CLASSIFICATION	1.6349281776339945E-4	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9993875019020233	WITHOUT_CLASSIFICATION	6.124980979766427E-4	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999544879712589	WITHOUT_CLASSIFICATION	4.551202874105079E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9993162816221015	WITHOUT_CLASSIFICATION	6.837183778984155E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998139634563021	WITHOUT_CLASSIFICATION	1.8603654369782991E-4	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9992094682899393	WITHOUT_CLASSIFICATION	7.905317100607487E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999573886123889	WITHOUT_CLASSIFICATION	4.261138761093652E-5	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997484039968946	WITHOUT_CLASSIFICATION	2.515960031054751E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999498393235192	WITHOUT_CLASSIFICATION	5.016067648087338E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999188869721597	WITHOUT_CLASSIFICATION	8.11130278403599E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999742413126531	WITHOUT_CLASSIFICATION	2.5758687346769748E-5	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999188966057402	WITHOUT_CLASSIFICATION	8.110339425979709E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999265323620478	WITHOUT_CLASSIFICATION	7.346763795218073E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999753377518288	WITHOUT_CLASSIFICATION	2.466224817122246E-5	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999614223782561	WITHOUT_CLASSIFICATION	3.857762174380391E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999503543076208	WITHOUT_CLASSIFICATION	4.964569237916237E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999889250116729	WITHOUT_CLASSIFICATION	1.1074988327032965E-5	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999649492302237	WITHOUT_CLASSIFICATION	3.505076977630023E-5	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.989257198648181	WITHOUT_CLASSIFICATION	0.010742801351819002	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998983242324604	WITHOUT_CLASSIFICATION	1.0167576753959763E-4	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9998896459447998	WITHOUT_CLASSIFICATION	1.1035405520017507E-4	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998072214922886	WITHOUT_CLASSIFICATION	1.9277850771137056E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998453152330675	WITHOUT_CLASSIFICATION	1.546847669323747E-4	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996363873739532	WITHOUT_CLASSIFICATION	3.6361262604686244E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999580395035514	WITHOUT_CLASSIFICATION	4.1960496448622884E-5	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.997465058410323	WITHOUT_CLASSIFICATION	0.0025349415896770058	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9988354401700934	WITHOUT_CLASSIFICATION	0.0011645598299065258	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9997366241326242	WITHOUT_CLASSIFICATION	2.63375867375703E-4	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9995413703222953	WITHOUT_CLASSIFICATION	4.5862967770476443E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999250792665524	WITHOUT_CLASSIFICATION	7.492073344752447E-5	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995055224023288	WITHOUT_CLASSIFICATION	4.944775976711516E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995055224023288	WITHOUT_CLASSIFICATION	4.944775976711516E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998295012211963	WITHOUT_CLASSIFICATION	1.7049877880375837E-4	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998151689012623	WITHOUT_CLASSIFICATION	1.8483109873767195E-4	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995098738689325	WITHOUT_CLASSIFICATION	4.901261310674103E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999829715252666	WITHOUT_CLASSIFICATION	1.7028474733429363E-5	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999172614858526	WITHOUT_CLASSIFICATION	8.273851414736275E-5	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9992755200845864	WITHOUT_CLASSIFICATION	7.244799154136587E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9994621644464156	WITHOUT_CLASSIFICATION	5.378355535844179E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.994020709563198	WITHOUT_CLASSIFICATION	0.005979290436802061	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996581353110795	WITHOUT_CLASSIFICATION	3.41864688920607E-4	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999763620832804	WITHOUT_CLASSIFICATION	2.3637916719601137E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994554400494127	WITHOUT_CLASSIFICATION	5.445599505873701E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9992804396760385	WITHOUT_CLASSIFICATION	7.195603239614545E-4	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994488060975488	WITHOUT_CLASSIFICATION	5.511939024511528E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995120939097547	WITHOUT_CLASSIFICATION	4.879060902453169E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998362804959888	WITHOUT_CLASSIFICATION	1.6371950401120213E-4	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999826977834451	WITHOUT_CLASSIFICATION	1.730221655491036E-5	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999997143137378	WITHOUT_CLASSIFICATION	2.856862622409097E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999727936931125	WITHOUT_CLASSIFICATION	2.7206306887492303E-5	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999401155351445	WITHOUT_CLASSIFICATION	5.988446485553898E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9995585709501522	WITHOUT_CLASSIFICATION	4.41429049847797E-4	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999727936931125	WITHOUT_CLASSIFICATION	2.7206306887492303E-5	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999576915307521	WITHOUT_CLASSIFICATION	4.230846924791784E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999671375278741	WITHOUT_CLASSIFICATION	3.2862472125835495E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996478234037488	WITHOUT_CLASSIFICATION	3.5217659625115397E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997497693886374	WITHOUT_CLASSIFICATION	2.5023061136256837E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.999958694834649	WITHOUT_CLASSIFICATION	4.130516535091416E-5	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999600662034446	WITHOUT_CLASSIFICATION	3.9933796555478856E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999251527245231	WITHOUT_CLASSIFICATION	7.484727547692168E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999928167569114	WITHOUT_CLASSIFICATION	7.183243088559071E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999152026344611	WITHOUT_CLASSIFICATION	8.479736553894642E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999617988478108	WITHOUT_CLASSIFICATION	3.8201152189201E-5	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9992462403629557	WITHOUT_CLASSIFICATION	7.53759637044201E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999574653285368	WITHOUT_CLASSIFICATION	4.253467146331806E-5	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998236334419834	WITHOUT_CLASSIFICATION	1.7636655801661955E-4	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999522114832464	WITHOUT_CLASSIFICATION	4.7788516753531056E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9986066438443084	WITHOUT_CLASSIFICATION	0.0013933561556915594	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999718071507926	WITHOUT_CLASSIFICATION	2.8192849207502563E-5	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999099079681258	WITHOUT_CLASSIFICATION	9.009203187411093E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9870209450526323	WITHOUT_CLASSIFICATION	0.012979054947367775	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999960798998738	WITHOUT_CLASSIFICATION	3.920100126145821E-6	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999595367574942	WITHOUT_CLASSIFICATION	4.0463242505941254E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9947415954849396	WITHOUT_CLASSIFICATION	0.0052584045150605024	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998462849226105	WITHOUT_CLASSIFICATION	1.5371507738947988E-4	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999996818235759	WITHOUT_CLASSIFICATION	3.1817642410307528E-6	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9996574192049303	WITHOUT_CLASSIFICATION	3.425807950696513E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9995177407013629	WITHOUT_CLASSIFICATION	4.8225929863708817E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999678029844624	WITHOUT_CLASSIFICATION	3.219701553767032E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998694120309856	WITHOUT_CLASSIFICATION	1.3058796901446344E-4	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998559482923305	WITHOUT_CLASSIFICATION	1.4405170766950928E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999668839018181	WITHOUT_CLASSIFICATION	3.3116098181887885E-4	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999936088084413	WITHOUT_CLASSIFICATION	6.391191558704405E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9965524885168867	WITHOUT_CLASSIFICATION	0.0034475114831131644	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998789257943526	WITHOUT_CLASSIFICATION	1.2107420564744879E-4	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9989057763166237	WITHOUT_CLASSIFICATION	0.0010942236833763577	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9995014173138898	WITHOUT_CLASSIFICATION	4.985826861103203E-4	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999592580964134	WITHOUT_CLASSIFICATION	4.074190358672998E-5	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999803923988584	WITHOUT_CLASSIFICATION	1.960760114158912E-5	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999803980880378	WITHOUT_CLASSIFICATION	1.9601911962246646E-5	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999589892690035	WITHOUT_CLASSIFICATION	4.101073099645233E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999615548886012	WITHOUT_CLASSIFICATION	3.844511139878454E-5	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9980386212934057	WITHOUT_CLASSIFICATION	0.001961378706594302	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997326616224685	WITHOUT_CLASSIFICATION	2.6733837753144897E-4	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999181530958877	WITHOUT_CLASSIFICATION	8.184690411223815E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998029246848169	WITHOUT_CLASSIFICATION	1.9707531518309274E-4	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997734211032044	WITHOUT_CLASSIFICATION	2.2657889679548546E-4	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998064939552671	WITHOUT_CLASSIFICATION	1.9350604473282747E-4	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9992730135712501	WITHOUT_CLASSIFICATION	7.269864287499269E-4	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999051978818627	WITHOUT_CLASSIFICATION	9.480211813724244E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998052842153795	WITHOUT_CLASSIFICATION	1.9471578462045108E-4	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999822765693626	WITHOUT_CLASSIFICATION	1.7723430637409907E-5	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999205286686476	WITHOUT_CLASSIFICATION	7.947133135238357E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997577562976501	WITHOUT_CLASSIFICATION	2.4224370234979153E-4	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999504466057061	WITHOUT_CLASSIFICATION	4.955339429394861E-5	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999755385257804	WITHOUT_CLASSIFICATION	2.4461474219611267E-5	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999984627507148	WITHOUT_CLASSIFICATION	1.5372492850969489E-6	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9997822284766339	WITHOUT_CLASSIFICATION	2.1777152336604447E-4	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9987065019428769	WITHOUT_CLASSIFICATION	0.0012934980571231098	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896344836822	WITHOUT_CLASSIFICATION	1.1036551631779737E-4	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998531559171916	WITHOUT_CLASSIFICATION	1.4684408280844517E-4	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999203469864582	WITHOUT_CLASSIFICATION	7.965301354181187E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9996706748504585	WITHOUT_CLASSIFICATION	3.2932514954154353E-4	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999704680596955	WITHOUT_CLASSIFICATION	2.95319403045224E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998338984674617	WITHOUT_CLASSIFICATION	1.6610153253831815E-4	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999355883612314	WITHOUT_CLASSIFICATION	6.441163876859595E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999596089725775	WITHOUT_CLASSIFICATION	4.039102742251418E-5	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896344836822	WITHOUT_CLASSIFICATION	1.1036551631779737E-4	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999596089725775	WITHOUT_CLASSIFICATION	4.039102742251418E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998202616014299	WITHOUT_CLASSIFICATION	1.7973839857009246E-4	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999723836313344	WITHOUT_CLASSIFICATION	2.7616368665527378E-5	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999634949678602	WITHOUT_CLASSIFICATION	3.650503213983472E-5	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999712674585884	WITHOUT_CLASSIFICATION	2.8732541411591875E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999001929055001	WITHOUT_CLASSIFICATION	9.980709449978038E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9993211838531884	WITHOUT_CLASSIFICATION	6.788161468116359E-4	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999923380094313	WITHOUT_CLASSIFICATION	7.661990568696027E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999790603620698	WITHOUT_CLASSIFICATION	2.0939637930061817E-5	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999925843862568	WITHOUT_CLASSIFICATION	7.415613743192516E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999069512613173	WITHOUT_CLASSIFICATION	9.304873868270055E-5	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999738748479883	WITHOUT_CLASSIFICATION	2.6125152011774785E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999183939693924	WITHOUT_CLASSIFICATION	8.160603060759144E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9987481114894218	WITHOUT_CLASSIFICATION	0.0012518885105782423	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9928260909296707	WITHOUT_CLASSIFICATION	0.007173909070329319	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9997124905928844	WITHOUT_CLASSIFICATION	2.87509407115628E-4	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999686224907606	WITHOUT_CLASSIFICATION	3.1377509239441496E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998029826810112	WITHOUT_CLASSIFICATION	1.9701731898883108E-4	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998029826810112	WITHOUT_CLASSIFICATION	1.9701731898883108E-4	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999763620832804	WITHOUT_CLASSIFICATION	2.3637916719601137E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999787218113545	WITHOUT_CLASSIFICATION	2.1278188645474047E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999367026011399	WITHOUT_CLASSIFICATION	6.32973988601431E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999898646138625	WITHOUT_CLASSIFICATION	1.0135386137513676E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999170312047737	WITHOUT_CLASSIFICATION	8.296879522628582E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999988102266645	WITHOUT_CLASSIFICATION	1.1897733355017705E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9988248472104587	WITHOUT_CLASSIFICATION	0.0011751527895413148	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9995471643778058	WITHOUT_CLASSIFICATION	4.528356221943111E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999703234452578	WITHOUT_CLASSIFICATION	2.96765547421105E-5	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998211165969471	WITHOUT_CLASSIFICATION	1.788834030528923E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999267318893792	WITHOUT_CLASSIFICATION	7.326811062078067E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999858909447483	WITHOUT_CLASSIFICATION	1.4109055251623694E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999640741085144	WITHOUT_CLASSIFICATION	3.5925891485692564E-5	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997555725054911	WITHOUT_CLASSIFICATION	2.4442749450884844E-4	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999630409491128	WITHOUT_CLASSIFICATION	3.69590508872611E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999759120115712	WITHOUT_CLASSIFICATION	2.4087988428811948E-4	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999324857829848	WITHOUT_CLASSIFICATION	6.751421701517881E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994083176830492	WITHOUT_CLASSIFICATION	5.916823169509177E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9998551420933868	WITHOUT_CLASSIFICATION	1.448579066131772E-4	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999929080069839	WITHOUT_CLASSIFICATION	7.091993016092733E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999579478362933	WITHOUT_CLASSIFICATION	4.2052163706651455E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999854434461662	WITHOUT_CLASSIFICATION	1.4556553833737529E-5	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999977548352406	WITHOUT_CLASSIFICATION	2.2451647593976747E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999961395941536	WITHOUT_CLASSIFICATION	3.860405846397282E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9995857719652289	WITHOUT_CLASSIFICATION	4.1422803477111767E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999892846940506	WITHOUT_CLASSIFICATION	1.0715305949456426E-5	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9981316528049397	WITHOUT_CLASSIFICATION	0.001868347195060415	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994585898763776	WITHOUT_CLASSIFICATION	5.414101236224171E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998963663564372	WITHOUT_CLASSIFICATION	1.0363364356277812E-4	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9986072878931556	WITHOUT_CLASSIFICATION	0.001392712106844483	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997509654544622	WITHOUT_CLASSIFICATION	2.4903454553785575E-4	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9953453195703287	WITHOUT_CLASSIFICATION	0.004654680429671264	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9989662035444948	WITHOUT_CLASSIFICATION	0.0010337964555052234	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996531422030662	WITHOUT_CLASSIFICATION	3.468577969337671E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999959634243803	WITHOUT_CLASSIFICATION	4.036575619706191E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999204541514173	WITHOUT_CLASSIFICATION	7.954584858268138E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999031479948602	WITHOUT_CLASSIFICATION	9.685200513968119E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999976915583896	WITHOUT_CLASSIFICATION	2.3084416103973344E-5	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9997271740111916	WITHOUT_CLASSIFICATION	2.728259888084225E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999941826554107	WITHOUT_CLASSIFICATION	5.817344589304807E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999156886842165	WITHOUT_CLASSIFICATION	8.431131578341289E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9994775659980961	WITHOUT_CLASSIFICATION	5.22434001903789E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999173260676367	WITHOUT_CLASSIFICATION	8.26739323633108E-5	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999612212909323	WITHOUT_CLASSIFICATION	3.8778709067688205E-5	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999400350858848	WITHOUT_CLASSIFICATION	5.996491411510625E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999947020853426	WITHOUT_CLASSIFICATION	5.297914657454398E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999542657568669	WITHOUT_CLASSIFICATION	4.573424313317232E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998945241227962	WITHOUT_CLASSIFICATION	1.054758772036687E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999156886842165	WITHOUT_CLASSIFICATION	8.431131578341289E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998459092493506	WITHOUT_CLASSIFICATION	1.5409075064938286E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9990759931060391	WITHOUT_CLASSIFICATION	9.240068939608513E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999654642284395	WITHOUT_CLASSIFICATION	3.453577156053094E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.999841367392807	WITHOUT_CLASSIFICATION	1.5863260719299648E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998773432531649	WITHOUT_CLASSIFICATION	1.226567468351139E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998773432531649	WITHOUT_CLASSIFICATION	1.226567468351139E-4	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9997449333975958	WITHOUT_CLASSIFICATION	2.550666024040546E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9998919369106395	WITHOUT_CLASSIFICATION	1.0806308936041963E-4	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9990397541469246	WITHOUT_CLASSIFICATION	9.602458530753392E-4	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998067394624887	WITHOUT_CLASSIFICATION	1.93260537511193E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999527076215035	WITHOUT_CLASSIFICATION	4.729237849646802E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999921621045358	WITHOUT_CLASSIFICATION	7.837895464152091E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9992905698999444	WITHOUT_CLASSIFICATION	7.094301000555072E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998687619364783	WITHOUT_CLASSIFICATION	1.312380635217102E-4	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994245787072696	WITHOUT_CLASSIFICATION	5.754212927303633E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998342460600214	WITHOUT_CLASSIFICATION	1.6575393997876758E-4	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999853788466287	WITHOUT_CLASSIFICATION	1.4621153371298845E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995227777016333	WITHOUT_CLASSIFICATION	4.772222983666157E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999988070981755	WITHOUT_CLASSIFICATION	1.192901824510011E-5	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9987260953316048	WITHOUT_CLASSIFICATION	0.0012739046683951352	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9979737089754159	WITHOUT_CLASSIFICATION	0.002026291024583996	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999958168676323	WITHOUT_CLASSIFICATION	4.183132367726063E-6	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998553106462904	WITHOUT_CLASSIFICATION	1.446893537095789E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999884073916011	WITHOUT_CLASSIFICATION	1.1592608398943057E-5	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999972402786509	WITHOUT_CLASSIFICATION	2.7597213490995285E-5	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999876137845612	WITHOUT_CLASSIFICATION	1.238621543883159E-5	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999762675824597	WITHOUT_CLASSIFICATION	2.3732417540283282E-5	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9974017396630431	WITHOUT_CLASSIFICATION	0.0025982603369568637	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9997540790961761	WITHOUT_CLASSIFICATION	2.4592090382385636E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999271343255415	WITHOUT_CLASSIFICATION	7.28656744585623E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999975154968677	WITHOUT_CLASSIFICATION	2.4845031323556933E-6	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998116733437188	WITHOUT_CLASSIFICATION	1.883266562813337E-4	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9929649515135516	WITHOUT_CLASSIFICATION	0.007035048486448416	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9989885010655226	WITHOUT_CLASSIFICATION	0.0010114989344774553	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998116733437188	WITHOUT_CLASSIFICATION	1.883266562813337E-4	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999555246717378	WITHOUT_CLASSIFICATION	4.447532826228961E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9968807173279056	WITHOUT_CLASSIFICATION	0.003119282672094329	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998320809073283	WITHOUT_CLASSIFICATION	1.6791909267179034E-4	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9994916035431869	WITHOUT_CLASSIFICATION	5.083964568131668E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996374501549152	WITHOUT_CLASSIFICATION	3.6254984508473026E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999267318893792	WITHOUT_CLASSIFICATION	7.326811062078067E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9995546193883499	WITHOUT_CLASSIFICATION	4.453806116501795E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9990627583460967	WITHOUT_CLASSIFICATION	9.372416539033537E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999135331684421	WITHOUT_CLASSIFICATION	8.64668315578787E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999609302378347	WITHOUT_CLASSIFICATION	3.9069762165407285E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9987827048050218	WITHOUT_CLASSIFICATION	0.0012172951949781172	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999448397129752	WITHOUT_CLASSIFICATION	5.5160287024892366E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9987073829287156	WITHOUT_CLASSIFICATION	0.0012926170712842867	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9997994807730659	WITHOUT_CLASSIFICATION	2.0051922693412332E-4	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999071613402639	WITHOUT_CLASSIFICATION	9.283865973612846E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999064304806347	WITHOUT_CLASSIFICATION	9.35695193652519E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999665293337218	WITHOUT_CLASSIFICATION	3.3470666278191077E-5	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999572427422427	WITHOUT_CLASSIFICATION	4.2757257757382E-5	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999815928077913	WITHOUT_CLASSIFICATION	1.8407192208681014E-5	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998028511968967	WITHOUT_CLASSIFICATION	1.9714880310330143E-4	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999183665073531	WITHOUT_CLASSIFICATION	8.163349264691084E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999892441113088	WITHOUT_CLASSIFICATION	1.0755888691214365E-4	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999979040443531	WITHOUT_CLASSIFICATION	2.09595564689576E-5	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999588602654912	WITHOUT_CLASSIFICATION	4.113973450876509E-5	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9994891590355398	WITHOUT_CLASSIFICATION	5.108409644601551E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998684314243482	WITHOUT_CLASSIFICATION	1.3156857565169622E-4	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9992007518639637	WITHOUT_CLASSIFICATION	7.992481360362814E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999627370128434	WITHOUT_CLASSIFICATION	3.726298715646271E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999426953406678	WITHOUT_CLASSIFICATION	5.7304659332236674E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341306209293	WITHOUT_CLASSIFICATION	6.586937907066231E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927559403625	WITHOUT_CLASSIFICATION	7.244059637501378E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9997982656985113	WITHOUT_CLASSIFICATION	2.0173430148879028E-4	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999731948756024	WITHOUT_CLASSIFICATION	2.6805124397535037E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999576712881125	WITHOUT_CLASSIFICATION	4.23287118874721E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999997399172221	WITHOUT_CLASSIFICATION	2.6008277789961805E-6	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999743891973046	WITHOUT_CLASSIFICATION	2.5610802695328368E-5	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999694242770137	WITHOUT_CLASSIFICATION	3.0575722986258804E-5	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999339034552059	WITHOUT_CLASSIFICATION	6.609654479405627E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999871236359402	WITHOUT_CLASSIFICATION	1.2876364059804281E-5	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999089426061226	WITHOUT_CLASSIFICATION	9.105739387731207E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999414954358765	WITHOUT_CLASSIFICATION	5.850456412342981E-5	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999373584304896	WITHOUT_CLASSIFICATION	6.264156951039601E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998934430326545	WITHOUT_CLASSIFICATION	1.0655696734546447E-4	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999989128711206	WITHOUT_CLASSIFICATION	1.0871288794009035E-5	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999102560766238	WITHOUT_CLASSIFICATION	8.974392337622016E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999582325954548	WITHOUT_CLASSIFICATION	4.176740454526026E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9975074036158625	WITHOUT_CLASSIFICATION	0.0024925963841375114	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999159530040458	WITHOUT_CLASSIFICATION	8.404699595412381E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999594058245589	WITHOUT_CLASSIFICATION	4.059417544119184E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999738898877637	WITHOUT_CLASSIFICATION	2.6110112236286904E-5	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998145734725963	WITHOUT_CLASSIFICATION	1.8542652740364803E-4	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9995746599818262	WITHOUT_CLASSIFICATION	4.2534001817386705E-4	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999215755913011	WITHOUT_CLASSIFICATION	7.842440869886363E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9913079915414443	WITHOUT_CLASSIFICATION	0.008692008458555691	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999937777118659	WITHOUT_CLASSIFICATION	6.222288134087614E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999878015071982	WITHOUT_CLASSIFICATION	1.2198492801789107E-4	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9988671802249582	WITHOUT_CLASSIFICATION	0.0011328197750418213	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998042180903736	WITHOUT_CLASSIFICATION	1.9578190962652795E-4	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341306209293	WITHOUT_CLASSIFICATION	6.586937907066231E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999164369783531	WITHOUT_CLASSIFICATION	8.356302164690404E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999958135242002	WITHOUT_CLASSIFICATION	4.186475799845676E-6	TEST
// switch	WITHOUT_CLASSIFICATION	0.9998890766948749	WITHOUT_CLASSIFICATION	1.1092330512511073E-4	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999742487275636	WITHOUT_CLASSIFICATION	2.5751272436427436E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999855289188967	WITHOUT_CLASSIFICATION	1.4471081103176578E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998939931546965	WITHOUT_CLASSIFICATION	1.0600684530341545E-4	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927462371021	WITHOUT_CLASSIFICATION	7.253762897897304E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999028438678117	WITHOUT_CLASSIFICATION	9.71561321882372E-5	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999927377714285	WITHOUT_CLASSIFICATION	7.262228571459296E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999317600450491	WITHOUT_CLASSIFICATION	6.823995495080796E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999744886795587	WITHOUT_CLASSIFICATION	2.5511320441259834E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994470527552085	WITHOUT_CLASSIFICATION	5.529472447915029E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999691259827836	WITHOUT_CLASSIFICATION	3.087401721625474E-5	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998885942423134	WITHOUT_CLASSIFICATION	1.1140575768671206E-4	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998202616014299	WITHOUT_CLASSIFICATION	1.7973839857009246E-4	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999981654844297	WITHOUT_CLASSIFICATION	1.8345155704168625E-6	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999971564784131	WITHOUT_CLASSIFICATION	2.8435215868258416E-6	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999712906272984	WITHOUT_CLASSIFICATION	2.870937270163334E-5	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999568913256355	WITHOUT_CLASSIFICATION	4.3108674364538E-5	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999976876803764	WITHOUT_CLASSIFICATION	2.3123196235964264E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999602197990473	WITHOUT_CLASSIFICATION	3.978020095270396E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999602197990473	WITHOUT_CLASSIFICATION	3.978020095270396E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997909491715071	WITHOUT_CLASSIFICATION	2.090508284929062E-4	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999565019932677	WITHOUT_CLASSIFICATION	4.349800673234749E-5	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999575203342914	WITHOUT_CLASSIFICATION	4.2479665708634896E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999333939424105	WITHOUT_CLASSIFICATION	6.660605758947593E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999494900290676	WITHOUT_CLASSIFICATION	5.050997093229426E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999992439024097	WITHOUT_CLASSIFICATION	7.560975903131905E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999743392700503	WITHOUT_CLASSIFICATION	2.566072994967234E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9972310777690637	WITHOUT_CLASSIFICATION	0.002768922230936366	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9972310777690637	WITHOUT_CLASSIFICATION	0.002768922230936366	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9988208964396631	WITHOUT_CLASSIFICATION	0.0011791035603369348	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999711545776866	WITHOUT_CLASSIFICATION	2.8845422313408936E-5	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998601978239671	WITHOUT_CLASSIFICATION	1.398021760329697E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999782251738832	WITHOUT_CLASSIFICATION	2.177482611679949E-5	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999850661489201	WITHOUT_CLASSIFICATION	1.493385107989813E-4	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999940958696073	WITHOUT_CLASSIFICATION	5.9041303926950785E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999536334294382	WITHOUT_CLASSIFICATION	4.636657056187977E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998320940489895	WITHOUT_CLASSIFICATION	1.67905951010381E-4	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999757790425533	WITHOUT_CLASSIFICATION	2.422095744671311E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999959923736113	WITHOUT_CLASSIFICATION	4.007626388813426E-6	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998280536185526	WITHOUT_CLASSIFICATION	1.719463814472705E-4	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990403791898634	WITHOUT_CLASSIFICATION	9.596208101366646E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999217782271436	WITHOUT_CLASSIFICATION	7.822177285647128E-5	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998213744111806	WITHOUT_CLASSIFICATION	1.7862558881936508E-4	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998673241748224	WITHOUT_CLASSIFICATION	1.3267582517756204E-4	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999807557592618	WITHOUT_CLASSIFICATION	1.924424073820136E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999969381184386	WITHOUT_CLASSIFICATION	3.061881561442642E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999844683693901	WITHOUT_CLASSIFICATION	1.5531630609869988E-5	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999979231806131	WITHOUT_CLASSIFICATION	2.0768193868941457E-5	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999960438407799	WITHOUT_CLASSIFICATION	3.956159220097875E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999602197990473	WITHOUT_CLASSIFICATION	3.978020095270396E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999621867053975	WITHOUT_CLASSIFICATION	3.781329460247786E-5	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999385445722656	WITHOUT_CLASSIFICATION	6.145542773434278E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999506595305644	WITHOUT_CLASSIFICATION	4.9340469435680444E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999409663171402	WITHOUT_CLASSIFICATION	5.903368285975227E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999647892293572	WITHOUT_CLASSIFICATION	3.521077064271045E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999948972402474	WITHOUT_CLASSIFICATION	5.102759752599429E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999109218528034	WITHOUT_CLASSIFICATION	8.907814719670557E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999957320782377	WITHOUT_CLASSIFICATION	4.2679217623008877E-5	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998702670880134	WITHOUT_CLASSIFICATION	1.2973291198660044E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999761899768911	WITHOUT_CLASSIFICATION	2.381002310893434E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999471420461022	WITHOUT_CLASSIFICATION	5.2857953897821516E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999871671993882	WITHOUT_CLASSIFICATION	1.2832800611849931E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999041383999889	WITHOUT_CLASSIFICATION	9.58616000110792E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999071030749512	WITHOUT_CLASSIFICATION	9.289692504876918E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999759581773775	WITHOUT_CLASSIFICATION	2.4041822622531507E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999915185597124	WITHOUT_CLASSIFICATION	8.481440287695426E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999615467567919	WITHOUT_CLASSIFICATION	3.845324320817804E-5	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999923578920799	WITHOUT_CLASSIFICATION	7.642107920151911E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999320831739965	WITHOUT_CLASSIFICATION	6.791682600346863E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999320831739965	WITHOUT_CLASSIFICATION	6.791682600346863E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999608210145614	WITHOUT_CLASSIFICATION	3.917898543856369E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999748168237924	WITHOUT_CLASSIFICATION	2.5183176207615105E-5	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999960789506958	WITHOUT_CLASSIFICATION	3.921049304205048E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999406252071029	WITHOUT_CLASSIFICATION	5.937479289700893E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999533764752105	WITHOUT_CLASSIFICATION	4.662352478936482E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999725337167429	WITHOUT_CLASSIFICATION	2.7466283257206106E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999949394628228	WITHOUT_CLASSIFICATION	5.060537177200166E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999482213873578	WITHOUT_CLASSIFICATION	5.1778612642096015E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999693849694762	WITHOUT_CLASSIFICATION	3.061503052380987E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999905865672981	WITHOUT_CLASSIFICATION	9.413432701905569E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999276041178548	WITHOUT_CLASSIFICATION	7.23958821452639E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994504233359522	WITHOUT_CLASSIFICATION	5.495766640477205E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999985193103949	WITHOUT_CLASSIFICATION	1.4806896050771428E-6	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999785066694684	WITHOUT_CLASSIFICATION	2.1493330531592072E-5	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999968530237593	WITHOUT_CLASSIFICATION	3.1469762406952386E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997547989195974	WITHOUT_CLASSIFICATION	2.4520108040260684E-4	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999967191538788	WITHOUT_CLASSIFICATION	3.280846121237456E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999967191538788	WITHOUT_CLASSIFICATION	3.280846121237456E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998995891561543	WITHOUT_CLASSIFICATION	1.0041084384578663E-4	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999983776448083	WITHOUT_CLASSIFICATION	1.622355191653801E-6	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998895502139402	WITHOUT_CLASSIFICATION	1.104497860597927E-4	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998895502139402	WITHOUT_CLASSIFICATION	1.104497860597927E-4	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998229011748501	WITHOUT_CLASSIFICATION	1.7709882514992914E-4	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996036156207257	WITHOUT_CLASSIFICATION	3.963843792743322E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9992134519770656	WITHOUT_CLASSIFICATION	7.865480229344336E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999874037051754	WITHOUT_CLASSIFICATION	1.2596294824543147E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999456018318709	WITHOUT_CLASSIFICATION	5.439816812918305E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992892479183738	WITHOUT_CLASSIFICATION	7.107520816260655E-4	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999742573449698	WITHOUT_CLASSIFICATION	2.574265503019852E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999874037051754	WITHOUT_CLASSIFICATION	1.2596294824543147E-5	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999387569888578	WITHOUT_CLASSIFICATION	6.12430111421934E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999676880810093	WITHOUT_CLASSIFICATION	3.231191899060637E-5	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999959964997129	WITHOUT_CLASSIFICATION	4.003500287069014E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999568804292145	WITHOUT_CLASSIFICATION	4.31195707854642E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999928057255072	WITHOUT_CLASSIFICATION	7.194274492756929E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999458695477473	WITHOUT_CLASSIFICATION	5.413045225276498E-5	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995429539218279	WITHOUT_CLASSIFICATION	4.5704607817211365E-4	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999475852016336	WITHOUT_CLASSIFICATION	5.2414798366231845E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999937036004761	WITHOUT_CLASSIFICATION	6.296399523883089E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998074891261053	WITHOUT_CLASSIFICATION	1.9251087389465094E-4	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999134023310787	WITHOUT_CLASSIFICATION	8.65976689212646E-5	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999982357060916	WITHOUT_CLASSIFICATION	1.7642939084069646E-5	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999784842774517	WITHOUT_CLASSIFICATION	2.1515722548232773E-5	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999792762305512	WITHOUT_CLASSIFICATION	2.072376944881341E-5	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999977174433562	WITHOUT_CLASSIFICATION	2.2825566437926792E-5	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999569587258553	WITHOUT_CLASSIFICATION	4.3041274144691374E-5	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9981859685614409	WITHOUT_CLASSIFICATION	0.0018140314385590843	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999404356767633	WITHOUT_CLASSIFICATION	5.9564323236829786E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999404356767633	WITHOUT_CLASSIFICATION	5.9564323236829786E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995429539218279	WITHOUT_CLASSIFICATION	4.5704607817211365E-4	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999454143011673	WITHOUT_CLASSIFICATION	5.458569883269642E-4	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999824589202695	WITHOUT_CLASSIFICATION	1.754107973060685E-5	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.998690369233634	WITHOUT_CLASSIFICATION	0.0013096307663660422	TEST
// #2	WITHOUT_CLASSIFICATION	0.9998889733854253	WITHOUT_CLASSIFICATION	1.1102661457478977E-4	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999695027725309	WITHOUT_CLASSIFICATION	3.0497227469145146E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999969523187149	WITHOUT_CLASSIFICATION	3.047681285098204E-5	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999947452863292	WITHOUT_CLASSIFICATION	5.254713670802616E-5	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998452335799719	WITHOUT_CLASSIFICATION	1.547664200280881E-4	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999914793783178	WITHOUT_CLASSIFICATION	8.520621682163419E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998897617029534	WITHOUT_CLASSIFICATION	1.1023829704650333E-4	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999993211026412	WITHOUT_CLASSIFICATION	6.78897358785594E-6	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999700604860785	WITHOUT_CLASSIFICATION	2.9939513921423002E-5	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999551505921666	WITHOUT_CLASSIFICATION	4.484940783340216E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9996540012310444	WITHOUT_CLASSIFICATION	3.4599876895551567E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999439744053175	WITHOUT_CLASSIFICATION	5.6025594682470144E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999721859370203	WITHOUT_CLASSIFICATION	2.7814062979696106E-5	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999997831766453	WITHOUT_CLASSIFICATION	2.1682335469430113E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999926803344603	WITHOUT_CLASSIFICATION	7.3196655397487644E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9997852501956881	WITHOUT_CLASSIFICATION	2.1474980431193753E-4	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999958870557924	WITHOUT_CLASSIFICATION	4.112944207614441E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9978843037934585	WITHOUT_CLASSIFICATION	0.0021156962065414244	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9995479271090344	WITHOUT_CLASSIFICATION	4.5207289096557717E-4	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999148195190232	WITHOUT_CLASSIFICATION	8.518048097680349E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999442582829889	WITHOUT_CLASSIFICATION	5.5741717011169446E-5	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999690389306263	WITHOUT_CLASSIFICATION	3.0961069373838926E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999127702112853	WITHOUT_CLASSIFICATION	8.722978871462871E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9984979966151536	WITHOUT_CLASSIFICATION	0.0015020033848464473	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999290961497073	WITHOUT_CLASSIFICATION	7.09038502926645E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999447246719614	WITHOUT_CLASSIFICATION	5.527532803869212E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999643580061011	WITHOUT_CLASSIFICATION	3.564199389903388E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999439744053175	WITHOUT_CLASSIFICATION	5.6025594682470144E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999552438176431	WITHOUT_CLASSIFICATION	4.4756182356877255E-5	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999820437584298	WITHOUT_CLASSIFICATION	1.795624157019741E-5	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999689068167551	WITHOUT_CLASSIFICATION	3.1093183244999905E-5	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999774024527683	WITHOUT_CLASSIFICATION	2.259754723166317E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997000646787382	WITHOUT_CLASSIFICATION	2.999353212618148E-4	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999870892433296	WITHOUT_CLASSIFICATION	1.2910756670426462E-5	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999553589940748	WITHOUT_CLASSIFICATION	4.464100592524255E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999322294902449	WITHOUT_CLASSIFICATION	6.777050975509992E-5	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999395045660486	WITHOUT_CLASSIFICATION	6.0495433951507855E-5	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999315061995322	WITHOUT_CLASSIFICATION	6.849380046779758E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999525144931365	WITHOUT_CLASSIFICATION	4.7485506863561034E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999102992760223	WITHOUT_CLASSIFICATION	8.970072397770764E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994380621004096	WITHOUT_CLASSIFICATION	5.619378995903393E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997744950644306	WITHOUT_CLASSIFICATION	2.2550493556943522E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997688216917905	WITHOUT_CLASSIFICATION	2.3117830820951844E-4	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999839209443251	WITHOUT_CLASSIFICATION	1.6079055674893362E-5	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996529054354099	WITHOUT_CLASSIFICATION	3.4709456459011576E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999987323273408	WITHOUT_CLASSIFICATION	1.2676726592037784E-5	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999478475254948	WITHOUT_CLASSIFICATION	5.2152474505159325E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998894231418788	WITHOUT_CLASSIFICATION	1.1057685812112625E-4	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999456018318709	WITHOUT_CLASSIFICATION	5.439816812918305E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999363630876684	WITHOUT_CLASSIFICATION	6.363691233151154E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999439744053175	WITHOUT_CLASSIFICATION	5.6025594682470144E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999556162357477	WITHOUT_CLASSIFICATION	4.438376425232639E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999190873158809	WITHOUT_CLASSIFICATION	8.091268411913179E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999690995368937	WITHOUT_CLASSIFICATION	3.0900463106241925E-5	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999690995368937	WITHOUT_CLASSIFICATION	3.0900463106241925E-5	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999231090047107	WITHOUT_CLASSIFICATION	7.689099528932943E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999919384683857	WITHOUT_CLASSIFICATION	8.061531614217953E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999616345177399	WITHOUT_CLASSIFICATION	3.8365482260118995E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9998436598508452	WITHOUT_CLASSIFICATION	1.5634014915480215E-4	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998016015433784	WITHOUT_CLASSIFICATION	1.983984566215119E-4	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999972070210795	WITHOUT_CLASSIFICATION	2.7929789205323394E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99987689204608	WITHOUT_CLASSIFICATION	1.2310795391996975E-4	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999928044202706	WITHOUT_CLASSIFICATION	7.195579729365676E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999825114418959	WITHOUT_CLASSIFICATION	1.7488558104188003E-5	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999825114418959	WITHOUT_CLASSIFICATION	1.7488558104188003E-5	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999062305043281	WITHOUT_CLASSIFICATION	9.376949567183468E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9985174771578548	WITHOUT_CLASSIFICATION	0.0014825228421451587	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999581058282828	WITHOUT_CLASSIFICATION	4.1894171717166015E-5	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9993615118337238	WITHOUT_CLASSIFICATION	6.38488166276243E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999784718761253	WITHOUT_CLASSIFICATION	2.1528123874709374E-5	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999796470196253	WITHOUT_CLASSIFICATION	2.035298037465066E-5	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999898948535328	WITHOUT_CLASSIFICATION	1.0105146467161484E-5	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999900389082418	WITHOUT_CLASSIFICATION	9.961091758212331E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999210883087989	WITHOUT_CLASSIFICATION	7.891169120112134E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999952693982505	WITHOUT_CLASSIFICATION	4.730601749496479E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999338535369501	WITHOUT_CLASSIFICATION	6.614646304981819E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999338535369501	WITHOUT_CLASSIFICATION	6.614646304981819E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994066914387	WITHOUT_CLASSIFICATION	5.933085612123983E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998579424022322	WITHOUT_CLASSIFICATION	1.420575977678175E-4	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999759333879591	WITHOUT_CLASSIFICATION	2.4066612040911773E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9994462092106214	WITHOUT_CLASSIFICATION	5.537907893786171E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999915359202637	WITHOUT_CLASSIFICATION	8.464079736332063E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999766059595446	WITHOUT_CLASSIFICATION	2.3394040455367504E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999020401693512	WITHOUT_CLASSIFICATION	9.79598306487186E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999711072741051	WITHOUT_CLASSIFICATION	2.8892725894810573E-5	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999826611313827	WITHOUT_CLASSIFICATION	1.733886861743307E-5	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999272758731739	WITHOUT_CLASSIFICATION	7.272412682609087E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999969744046123	WITHOUT_CLASSIFICATION	3.0255953876909376E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155076164067	WITHOUT_CLASSIFICATION	8.44923835933279E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998984987601219	WITHOUT_CLASSIFICATION	1.0150123987798147E-4	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999635830419926	WITHOUT_CLASSIFICATION	3.6416958007442146E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994513381123523	WITHOUT_CLASSIFICATION	5.486618876476321E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978710712529	WITHOUT_CLASSIFICATION	2.12892874710331E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9997453290549099	WITHOUT_CLASSIFICATION	2.5467094509015785E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9994969564084488	WITHOUT_CLASSIFICATION	5.030435915511465E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999919970287283	WITHOUT_CLASSIFICATION	8.002971271620003E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999978801198505	WITHOUT_CLASSIFICATION	2.1198801494624327E-6	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999244383306785	WITHOUT_CLASSIFICATION	7.55616693215279E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995298595604082	WITHOUT_CLASSIFICATION	4.701404395918282E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999858453751683	WITHOUT_CLASSIFICATION	1.4154624831552665E-5	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999601761526228	WITHOUT_CLASSIFICATION	3.982384737709627E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999620793439518	WITHOUT_CLASSIFICATION	3.792065604825319E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999456101813211	WITHOUT_CLASSIFICATION	5.438981867898031E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999842107950939	WITHOUT_CLASSIFICATION	1.578920490612821E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9995322602205243	WITHOUT_CLASSIFICATION	4.677397794757483E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338397519438	WITHOUT_CLASSIFICATION	6.616024805616856E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9994892061538189	WITHOUT_CLASSIFICATION	5.107938461810983E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999871618580916	WITHOUT_CLASSIFICATION	1.2838141908370273E-5	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9997806571727118	WITHOUT_CLASSIFICATION	2.1934282728813763E-4	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999664693571276	WITHOUT_CLASSIFICATION	3.353064287237923E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332529018584	WITHOUT_CLASSIFICATION	6.674709814158751E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999906091316125	WITHOUT_CLASSIFICATION	9.39086838739492E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998983866730602	WITHOUT_CLASSIFICATION	1.016133269398708E-4	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999688493016682	WITHOUT_CLASSIFICATION	3.115069833180565E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.99997147789204	WITHOUT_CLASSIFICATION	2.8522107959983895E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999423169760484	WITHOUT_CLASSIFICATION	5.768302395166514E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999655604686582	WITHOUT_CLASSIFICATION	3.4439531341803783E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999647023791671	WITHOUT_CLASSIFICATION	3.5297620832858116E-5	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999666921749165	WITHOUT_CLASSIFICATION	3.330782508357382E-5	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999151607531145	WITHOUT_CLASSIFICATION	8.48392468854581E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997360918325593	WITHOUT_CLASSIFICATION	2.639081674406432E-4	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999833033875212	WITHOUT_CLASSIFICATION	1.6696612478779808E-5	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999417438641236	WITHOUT_CLASSIFICATION	5.825613587638644E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999967854115257	WITHOUT_CLASSIFICATION	3.214588474297305E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999803748432182	WITHOUT_CLASSIFICATION	1.9625156781757366E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9997541821657927	WITHOUT_CLASSIFICATION	2.458178342072589E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999727651908277	WITHOUT_CLASSIFICATION	2.72348091723619E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.99998112735261	WITHOUT_CLASSIFICATION	1.8872647390005124E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999219836479377	WITHOUT_CLASSIFICATION	7.801635206232997E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998692119863885	WITHOUT_CLASSIFICATION	1.3078801361146312E-4	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999219836479377	WITHOUT_CLASSIFICATION	7.801635206232997E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999918378930289	WITHOUT_CLASSIFICATION	8.162106971155167E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999994039499719	WITHOUT_CLASSIFICATION	5.960500281057979E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999976966251238	WITHOUT_CLASSIFICATION	2.3033748761918083E-5	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999781209030872	WITHOUT_CLASSIFICATION	2.1879096912739462E-5	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999708887145103	WITHOUT_CLASSIFICATION	2.9111285489713944E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999976966251238	WITHOUT_CLASSIFICATION	2.3033748761918083E-5	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999860084169081	WITHOUT_CLASSIFICATION	1.399158309183414E-5	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9987345129300536	WITHOUT_CLASSIFICATION	0.0012654870699463853	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999377606513696	WITHOUT_CLASSIFICATION	6.223934863037403E-5	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999757655002396	WITHOUT_CLASSIFICATION	2.4234499760378082E-5	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999797242308626	WITHOUT_CLASSIFICATION	2.0275769137443003E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999793115240223	WITHOUT_CLASSIFICATION	2.0688475977624494E-5	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999944948834194	WITHOUT_CLASSIFICATION	5.50511658061965E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9997541893862774	WITHOUT_CLASSIFICATION	2.458106137226642E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999794335300115	WITHOUT_CLASSIFICATION	2.056646998849936E-5	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999922538633145	WITHOUT_CLASSIFICATION	7.746136685496851E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999892269274017	WITHOUT_CLASSIFICATION	1.0773072598303892E-4	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999931379905247	WITHOUT_CLASSIFICATION	6.8620094753245105E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999974771413688	WITHOUT_CLASSIFICATION	2.5228586312106922E-6	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9993005376099587	WITHOUT_CLASSIFICATION	6.994623900412194E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999985463437067	WITHOUT_CLASSIFICATION	1.453656293315236E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999451337156267	WITHOUT_CLASSIFICATION	5.486628437329455E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9947949600170574	WITHOUT_CLASSIFICATION	0.005205039982942721	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998067399667214	WITHOUT_CLASSIFICATION	1.9326003327859733E-4	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999916369722859	WITHOUT_CLASSIFICATION	8.36302771409412E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9994510878174245	WITHOUT_CLASSIFICATION	5.489121825753842E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996484204416233	WITHOUT_CLASSIFICATION	3.515795583767177E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9997296042594508	WITHOUT_CLASSIFICATION	2.703957405492145E-4	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9991991575712306	WITHOUT_CLASSIFICATION	8.008424287694443E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999402870351171	WITHOUT_CLASSIFICATION	5.9712964882899965E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999985881265312	WITHOUT_CLASSIFICATION	1.4118734688969237E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999672114433844	WITHOUT_CLASSIFICATION	3.278855661563684E-5	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9998133711599528	WITHOUT_CLASSIFICATION	1.8662884004713544E-4	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998325877304387	WITHOUT_CLASSIFICATION	1.6741226956121003E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999494709789207	WITHOUT_CLASSIFICATION	5.052902107929565E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9983897435856239	WITHOUT_CLASSIFICATION	0.001610256414375997	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9994510878174245	WITHOUT_CLASSIFICATION	5.489121825753842E-4	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999600806012581	WITHOUT_CLASSIFICATION	3.991939874200491E-5	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995246581388171	WITHOUT_CLASSIFICATION	4.7534186118289545E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9970845574720276	WITHOUT_CLASSIFICATION	0.0029154425279724404	TEST
//special case	WITHOUT_CLASSIFICATION	0.9997778943389155	WITHOUT_CLASSIFICATION	2.22105661084479E-4	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999689997325937	WITHOUT_CLASSIFICATION	3.1000267406387745E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998645641384295	WITHOUT_CLASSIFICATION	1.3543586157058405E-4	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998576174177385	WITHOUT_CLASSIFICATION	1.4238258226140088E-4	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999162338662748	WITHOUT_CLASSIFICATION	8.376613372512423E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9996801517669502	WITHOUT_CLASSIFICATION	3.1984823304974326E-4	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9995292448146315	WITHOUT_CLASSIFICATION	4.7075518536851503E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9998686376485955	WITHOUT_CLASSIFICATION	1.3136235140458639E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998187615732094	WITHOUT_CLASSIFICATION	1.812384267906349E-4	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999753279536037	WITHOUT_CLASSIFICATION	2.4672046396293634E-5	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9997035233265886	WITHOUT_CLASSIFICATION	2.9647667341138254E-4	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998025912015027	WITHOUT_CLASSIFICATION	1.9740879849719926E-4	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999777948794178	WITHOUT_CLASSIFICATION	2.2205120582070372E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9995695985652893	WITHOUT_CLASSIFICATION	4.3040143471067806E-4	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997351488663109	WITHOUT_CLASSIFICATION	2.6485113368920985E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9980845945533495	WITHOUT_CLASSIFICATION	0.0019154054466504337	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998464640113429	WITHOUT_CLASSIFICATION	1.5353598865711413E-4	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9998708267002501	WITHOUT_CLASSIFICATION	1.2917329975000255E-4	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9998708267002501	WITHOUT_CLASSIFICATION	1.2917329975000255E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999927208928585	WITHOUT_CLASSIFICATION	7.279107141565522E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9998708267002501	WITHOUT_CLASSIFICATION	1.2917329975000255E-4	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9998708267002501	WITHOUT_CLASSIFICATION	1.2917329975000255E-4	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998467491178267	WITHOUT_CLASSIFICATION	1.5325088217336112E-4	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9956448460703181	WITHOUT_CLASSIFICATION	0.00435515392968179	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999767495062601	WITHOUT_CLASSIFICATION	2.3250493739779895E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999212203192234	WITHOUT_CLASSIFICATION	7.877968077652653E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999723686081523	WITHOUT_CLASSIFICATION	2.7631391847701816E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9970056308157599	WITHOUT_CLASSIFICATION	0.0029943691842401446	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998362804959888	WITHOUT_CLASSIFICATION	1.6371950401120213E-4	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9984657996540771	WITHOUT_CLASSIFICATION	0.0015342003459229358	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9984141702489966	WITHOUT_CLASSIFICATION	0.0015858297510034408	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999842749788908	WITHOUT_CLASSIFICATION	1.5725021109198057E-4	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9986784603078986	WITHOUT_CLASSIFICATION	0.0013215396921014194	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9984213170144084	WITHOUT_CLASSIFICATION	0.0015786829855916039	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9991583929385133	WITHOUT_CLASSIFICATION	8.416070614868405E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9973941067871028	WITHOUT_CLASSIFICATION	0.002605893212897111	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998338984674617	WITHOUT_CLASSIFICATION	1.6610153253831815E-4	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998454481698121	WITHOUT_CLASSIFICATION	1.5455183018790616E-4	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9991322050559196	WITHOUT_CLASSIFICATION	8.677949440804321E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9983760530544855	WITHOUT_CLASSIFICATION	0.0016239469455144647	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999933702062843	WITHOUT_CLASSIFICATION	6.629793715667472E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999295170432804	WITHOUT_CLASSIFICATION	7.048295671960795E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998338984674617	WITHOUT_CLASSIFICATION	1.6610153253831815E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996484204416233	WITHOUT_CLASSIFICATION	3.515795583767177E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9997282311947052	WITHOUT_CLASSIFICATION	2.717688052947658E-4	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999592678016208	WITHOUT_CLASSIFICATION	4.073219837917727E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999557390894525	WITHOUT_CLASSIFICATION	4.426091054755833E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9997404413450403	WITHOUT_CLASSIFICATION	2.5955865495971305E-4	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999816615770951	WITHOUT_CLASSIFICATION	1.833842290489086E-5	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9996640741653104	WITHOUT_CLASSIFICATION	3.3592583468951764E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999439189442596	WITHOUT_CLASSIFICATION	5.608105574034428E-5	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999717737660638	WITHOUT_CLASSIFICATION	2.8226233936143295E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9997697741646732	WITHOUT_CLASSIFICATION	2.302258353269316E-4	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999728417381136	WITHOUT_CLASSIFICATION	2.7158261886395534E-4	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998647850804124	WITHOUT_CLASSIFICATION	1.3521491958757336E-4	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999899082988286	WITHOUT_CLASSIFICATION	1.0091701171420884E-5	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999968220006678	WITHOUT_CLASSIFICATION	3.177999332206461E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999344057568857	WITHOUT_CLASSIFICATION	6.559424311429921E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999441477777199	WITHOUT_CLASSIFICATION	5.585222228016185E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999934130695264	WITHOUT_CLASSIFICATION	6.586930473591299E-5	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999208725105301	WITHOUT_CLASSIFICATION	7.912748946984293E-5	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999303683840256	WITHOUT_CLASSIFICATION	6.963161597438489E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997591421571248	WITHOUT_CLASSIFICATION	2.4085784287525416E-4	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996838655111168	WITHOUT_CLASSIFICATION	3.1613448888326935E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9996055821490164	WITHOUT_CLASSIFICATION	3.944178509835912E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999996451616174	WITHOUT_CLASSIFICATION	3.5483838260354446E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999717737660638	WITHOUT_CLASSIFICATION	2.8226233936143295E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9997283223759224	WITHOUT_CLASSIFICATION	2.7167762407757473E-4	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9997285432690284	WITHOUT_CLASSIFICATION	2.7145673097151856E-4	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9993458942444032	WITHOUT_CLASSIFICATION	6.541057555966984E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998734012071356	WITHOUT_CLASSIFICATION	1.2659879286439665E-4	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.999725765447846	WITHOUT_CLASSIFICATION	2.742345521539844E-4	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9998615018445187	WITHOUT_CLASSIFICATION	1.3849815548119763E-4	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999581627879129	WITHOUT_CLASSIFICATION	4.1837212087062545E-5	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9998615018445187	WITHOUT_CLASSIFICATION	1.3849815548119763E-4	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9997255838375674	WITHOUT_CLASSIFICATION	2.7441616243267423E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999147338569709	WITHOUT_CLASSIFICATION	8.526614302907756E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999901659892589	WITHOUT_CLASSIFICATION	9.834010741090225E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997897230040769	WITHOUT_CLASSIFICATION	2.102769959231361E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9985337488468687	WITHOUT_CLASSIFICATION	0.0014662511531311623	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998462301656095	WITHOUT_CLASSIFICATION	1.5376983439048276E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991031119631852	WITHOUT_CLASSIFICATION	8.968880368147423E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999147338569709	WITHOUT_CLASSIFICATION	8.526614302907756E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998590865720891	WITHOUT_CLASSIFICATION	1.4091342791092224E-4	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999680520641245	WITHOUT_CLASSIFICATION	3.194793587550742E-4	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999188869721597	WITHOUT_CLASSIFICATION	8.11130278403599E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998357124438456	WITHOUT_CLASSIFICATION	1.6428755615435837E-4	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999800028931825	WITHOUT_CLASSIFICATION	1.999710681759744E-5	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997536489469053	WITHOUT_CLASSIFICATION	2.4635105309466193E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999674870500828	WITHOUT_CLASSIFICATION	3.251294991727378E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999308056323042	WITHOUT_CLASSIFICATION	6.919436769575453E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226753452564	WITHOUT_CLASSIFICATION	7.732465474367374E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346354560189	WITHOUT_CLASSIFICATION	6.536454398106243E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346354560189	WITHOUT_CLASSIFICATION	6.536454398106243E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346354560189	WITHOUT_CLASSIFICATION	6.536454398106243E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999923393738009	WITHOUT_CLASSIFICATION	7.66062619894695E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999923393738009	WITHOUT_CLASSIFICATION	7.66062619894695E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9996721205811778	WITHOUT_CLASSIFICATION	3.2787941882220993E-4	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999762280503685	WITHOUT_CLASSIFICATION	2.3771949631587657E-5	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999580708114305	WITHOUT_CLASSIFICATION	4.192918856950751E-5	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999601445989589	WITHOUT_CLASSIFICATION	3.9855401041246026E-5	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9996279765345462	WITHOUT_CLASSIFICATION	3.7202346545384476E-4	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152638267065	WITHOUT_CLASSIFICATION	8.473617329362694E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999920191172578	WITHOUT_CLASSIFICATION	7.980882742188286E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999183367980246	WITHOUT_CLASSIFICATION	8.1663201975475E-5	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200074998466	WITHOUT_CLASSIFICATION	7.999250015348742E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152638267065	WITHOUT_CLASSIFICATION	8.473617329362694E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999920191172578	WITHOUT_CLASSIFICATION	7.980882742188286E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999397784871479	WITHOUT_CLASSIFICATION	6.0221512851991064E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996025639803235	WITHOUT_CLASSIFICATION	3.974360196764123E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999863826606326	WITHOUT_CLASSIFICATION	1.3617339367491484E-5	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999908790590002	WITHOUT_CLASSIFICATION	9.12094099979807E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9996571019810194	WITHOUT_CLASSIFICATION	3.4289801898057683E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9992966384083504	WITHOUT_CLASSIFICATION	7.033615916496832E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999404654112757	WITHOUT_CLASSIFICATION	5.953458872430139E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996842684507823	WITHOUT_CLASSIFICATION	3.1573154921766893E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9993025161939575	WITHOUT_CLASSIFICATION	6.974838060425105E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999430947668039	WITHOUT_CLASSIFICATION	5.690523319607187E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999406767141877	WITHOUT_CLASSIFICATION	5.932328581222604E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997640409772438	WITHOUT_CLASSIFICATION	2.3595902275611714E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9949442991914895	WITHOUT_CLASSIFICATION	0.005055700808510434	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9998875164697484	WITHOUT_CLASSIFICATION	1.124835302515408E-4	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996683811112909	WITHOUT_CLASSIFICATION	3.31618888709089E-4	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999306309686626	WITHOUT_CLASSIFICATION	6.936903133729075E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999828473447914	WITHOUT_CLASSIFICATION	1.715265520860316E-4	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9997726190102344	WITHOUT_CLASSIFICATION	2.2738098976554118E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999915601277044	WITHOUT_CLASSIFICATION	8.439872295597177E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999900420625001	WITHOUT_CLASSIFICATION	9.957937499791046E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9995641401570464	WITHOUT_CLASSIFICATION	4.358598429535562E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999303155447052	WITHOUT_CLASSIFICATION	6.968445529482233E-5	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152040732472	WITHOUT_CLASSIFICATION	8.479592675272917E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773768407231	WITHOUT_CLASSIFICATION	1.226231592769541E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994554400494127	WITHOUT_CLASSIFICATION	5.445599505873701E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9994554400494127	WITHOUT_CLASSIFICATION	5.445599505873701E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997882974004764	WITHOUT_CLASSIFICATION	2.117025995237089E-4	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999831980080899	WITHOUT_CLASSIFICATION	1.6801991910228806E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996880265013558	WITHOUT_CLASSIFICATION	3.1197349864421224E-4	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999797302886619	WITHOUT_CLASSIFICATION	2.0269711338059506E-5	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997498168970962	WITHOUT_CLASSIFICATION	2.5018310290372754E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9992765222753184	WITHOUT_CLASSIFICATION	7.234777246815478E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999837262417023	WITHOUT_CLASSIFICATION	1.6273758297806103E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999826977834451	WITHOUT_CLASSIFICATION	1.730221655491036E-5	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9997176372442561	WITHOUT_CLASSIFICATION	2.823627557438838E-4	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992236182620994	WITHOUT_CLASSIFICATION	7.763817379006308E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99767202722142	WITHOUT_CLASSIFICATION	0.0023279727785799373	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999840045043593	WITHOUT_CLASSIFICATION	1.599549564067191E-5	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999483157751193	WITHOUT_CLASSIFICATION	5.168422488051281E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9996779642312555	WITHOUT_CLASSIFICATION	3.22035768744434E-4	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9998277742074223	WITHOUT_CLASSIFICATION	1.7222579257763617E-4	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999908054638544	WITHOUT_CLASSIFICATION	9.194536145489488E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99767202722142	WITHOUT_CLASSIFICATION	0.0023279727785799373	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99767202722142	WITHOUT_CLASSIFICATION	0.0023279727785799373	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9953761932602989	WITHOUT_CLASSIFICATION	0.0046238067397011235	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999712422155845	WITHOUT_CLASSIFICATION	2.8757784415492494E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9834131440858459	WITHOUT_CLASSIFICATION	0.016586855914154045	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999775689867874	WITHOUT_CLASSIFICATION	2.243101321262943E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999071030749512	WITHOUT_CLASSIFICATION	9.289692504876918E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996683811112909	WITHOUT_CLASSIFICATION	3.31618888709089E-4	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9990258246785871	WITHOUT_CLASSIFICATION	9.741753214128461E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999711262194598	WITHOUT_CLASSIFICATION	2.8873780540187107E-5	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999450193127797	WITHOUT_CLASSIFICATION	5.498068722025333E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909350543222	WITHOUT_CLASSIFICATION	1.0906494567785274E-4	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999645324473874	WITHOUT_CLASSIFICATION	3.546755261269649E-5	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999326073070139	WITHOUT_CLASSIFICATION	6.739269298605756E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999705560128748	WITHOUT_CLASSIFICATION	2.9443987125345046E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999705560128748	WITHOUT_CLASSIFICATION	2.9443987125345046E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999705560128748	WITHOUT_CLASSIFICATION	2.9443987125345046E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999705560128748	WITHOUT_CLASSIFICATION	2.9443987125345046E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176250432287	WITHOUT_CLASSIFICATION	8.237495677141209E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9941289428581316	WITHOUT_CLASSIFICATION	0.005871057141868345	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998609523278585	WITHOUT_CLASSIFICATION	1.390476721413937E-4	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997765609214119	WITHOUT_CLASSIFICATION	2.2343907858804864E-4	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152187820751	WITHOUT_CLASSIFICATION	8.47812179249118E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194939370958	WITHOUT_CLASSIFICATION	8.050606290423944E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999240340935884	WITHOUT_CLASSIFICATION	7.596590641163696E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999552748524904	WITHOUT_CLASSIFICATION	4.472514750969975E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998981181114283	WITHOUT_CLASSIFICATION	1.018818885717399E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999252907628207	WITHOUT_CLASSIFICATION	7.470923717931084E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999065038678453	WITHOUT_CLASSIFICATION	9.34961321546681E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999459906514431	WITHOUT_CLASSIFICATION	5.400934855701274E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.999753741179344	WITHOUT_CLASSIFICATION	2.4625882065600145E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999646421883939	WITHOUT_CLASSIFICATION	3.5357811606174635E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999646421883939	WITHOUT_CLASSIFICATION	3.5357811606174635E-5	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999891567359791	WITHOUT_CLASSIFICATION	1.0843264020867581E-5	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999512605845429	WITHOUT_CLASSIFICATION	4.873941545717485E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999728966627267	WITHOUT_CLASSIFICATION	2.710333727331454E-5	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999781245081666	WITHOUT_CLASSIFICATION	2.1875491833367097E-5	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346354560189	WITHOUT_CLASSIFICATION	6.536454398106243E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999823585528316	WITHOUT_CLASSIFICATION	1.7641447168435634E-5	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.99998145620645	WITHOUT_CLASSIFICATION	1.8543793550102215E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998856258298805	WITHOUT_CLASSIFICATION	1.1437417011953754E-4	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999150452566701	WITHOUT_CLASSIFICATION	8.49547433299381E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999168359123168	WITHOUT_CLASSIFICATION	8.316408768312673E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999633054832687	WITHOUT_CLASSIFICATION	3.669451673134711E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999306474966269	WITHOUT_CLASSIFICATION	6.935250337314649E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997130410982873	WITHOUT_CLASSIFICATION	2.869589017126646E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999164039049011	WITHOUT_CLASSIFICATION	8.359609509896548E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999895035149612	WITHOUT_CLASSIFICATION	1.0496485038798097E-4	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999982420846887	WITHOUT_CLASSIFICATION	1.7579153113038892E-5	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999407648034907	WITHOUT_CLASSIFICATION	5.923519650921964E-5	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9998095465159258	WITHOUT_CLASSIFICATION	1.9045348407415895E-4	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999867376332353	WITHOUT_CLASSIFICATION	1.3262366764675762E-5	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999051836810721	WITHOUT_CLASSIFICATION	9.481631892797745E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999824510561242	WITHOUT_CLASSIFICATION	1.754894387585999E-5	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998424326533112	WITHOUT_CLASSIFICATION	1.5756734668878386E-4	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999369583944514	WITHOUT_CLASSIFICATION	6.304160554855442E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9996193983887681	WITHOUT_CLASSIFICATION	3.8060161123191734E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9997787360322898	WITHOUT_CLASSIFICATION	2.2126396771007716E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997734211032044	WITHOUT_CLASSIFICATION	2.2657889679548546E-4	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999985516463845	WITHOUT_CLASSIFICATION	1.4483536154616577E-6	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9985014636725403	WITHOUT_CLASSIFICATION	0.001498536327459777	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9992889962549206	WITHOUT_CLASSIFICATION	7.110037450794111E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999737848776831	WITHOUT_CLASSIFICATION	2.6215122317007453E-5	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9983218896536142	WITHOUT_CLASSIFICATION	0.0016781103463857153	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999958168676323	WITHOUT_CLASSIFICATION	4.183132367726063E-6	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999958623891397	WITHOUT_CLASSIFICATION	4.1376108603026296E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999232558485114	WITHOUT_CLASSIFICATION	7.674415148863268E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997250188620184	WITHOUT_CLASSIFICATION	2.7498113798162644E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999236126099734	WITHOUT_CLASSIFICATION	7.638739002667139E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999404971355492	WITHOUT_CLASSIFICATION	5.9502864450763474E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9994807835038056	WITHOUT_CLASSIFICATION	5.192164961943987E-4	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998963325036787	WITHOUT_CLASSIFICATION	1.036674963212982E-4	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998783636848697	WITHOUT_CLASSIFICATION	1.2163631513020344E-4	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9989737000644369	WITHOUT_CLASSIFICATION	0.0010262999355631394	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998964492444483	WITHOUT_CLASSIFICATION	1.0355075555161975E-4	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998029826810112	WITHOUT_CLASSIFICATION	1.9701731898883108E-4	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999372759819042	WITHOUT_CLASSIFICATION	6.27240180958682E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9992763209812062	WITHOUT_CLASSIFICATION	7.23679018793816E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998385012405095	WITHOUT_CLASSIFICATION	1.614987594905055E-4	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9950404933585104	WITHOUT_CLASSIFICATION	0.004959506641489573	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999225898335965	WITHOUT_CLASSIFICATION	7.741016640347452E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9946713356632544	WITHOUT_CLASSIFICATION	0.005328664336745663	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998311525752623	WITHOUT_CLASSIFICATION	1.688474247377086E-4	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.999959240869764	WITHOUT_CLASSIFICATION	4.0759130236079436E-5	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9995684338178665	WITHOUT_CLASSIFICATION	4.315661821334357E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998825672273498	WITHOUT_CLASSIFICATION	1.1743277265016527E-4	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999446766691966	WITHOUT_CLASSIFICATION	5.5323330803430186E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996386350716797	WITHOUT_CLASSIFICATION	3.6136492832028667E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999792236094203	WITHOUT_CLASSIFICATION	2.0776390579697547E-5	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998776586786623	WITHOUT_CLASSIFICATION	1.2234132133773185E-4	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999619660967147	WITHOUT_CLASSIFICATION	3.803390328518099E-5	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998025011762887	WITHOUT_CLASSIFICATION	1.9749882371129424E-4	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999337133034865	WITHOUT_CLASSIFICATION	6.628669651355685E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998444457007466	WITHOUT_CLASSIFICATION	1.555542992533681E-4	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999024109186	WITHOUT_CLASSIFICATION	9.758908141495434E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9995165893397996	WITHOUT_CLASSIFICATION	4.8341066020036327E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9974627738345048	WITHOUT_CLASSIFICATION	0.00253722616549513	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999734539549329	WITHOUT_CLASSIFICATION	2.6546045067164545E-5	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9996540172605387	WITHOUT_CLASSIFICATION	3.459827394613164E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999990494345082	WITHOUT_CLASSIFICATION	9.50565491798001E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999293708537945	WITHOUT_CLASSIFICATION	7.062914620547059E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999820474956086	WITHOUT_CLASSIFICATION	1.795250439148407E-5	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999693859043897	WITHOUT_CLASSIFICATION	3.061409561037801E-5	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997931806600778	WITHOUT_CLASSIFICATION	2.0681933992222222E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999197091693254	WITHOUT_CLASSIFICATION	8.029083067458307E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999619989842796	WITHOUT_CLASSIFICATION	3.800101572037974E-5	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999968629890076	WITHOUT_CLASSIFICATION	3.137010992393367E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9997724133291367	WITHOUT_CLASSIFICATION	2.275866708632269E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999957447621057	WITHOUT_CLASSIFICATION	4.255237894289907E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998709168052543	WITHOUT_CLASSIFICATION	1.2908319474563373E-4	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9995041226645743	WITHOUT_CLASSIFICATION	4.958773354256495E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999451337156267	WITHOUT_CLASSIFICATION	5.486628437329455E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996446259185651	WITHOUT_CLASSIFICATION	3.553740814348906E-4	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999762811691518	WITHOUT_CLASSIFICATION	2.3718830848168242E-5	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999915189637979	WITHOUT_CLASSIFICATION	8.481036202102519E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9997586829583526	WITHOUT_CLASSIFICATION	2.413170416474266E-4	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997834331359896	WITHOUT_CLASSIFICATION	2.165668640102887E-4	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995782877053829	WITHOUT_CLASSIFICATION	4.217122946170404E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9988308360327748	WITHOUT_CLASSIFICATION	0.0011691639672252998	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996559325500588	WITHOUT_CLASSIFICATION	3.440674499412109E-4	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999612226163608	WITHOUT_CLASSIFICATION	3.8777383639200096E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9997339522852522	WITHOUT_CLASSIFICATION	2.6604771474785915E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998982352724352	WITHOUT_CLASSIFICATION	1.0176472756485288E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996772974390149	WITHOUT_CLASSIFICATION	3.2270256098507563E-4	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998634735270151	WITHOUT_CLASSIFICATION	1.3652647298501589E-4	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999929809232019	WITHOUT_CLASSIFICATION	7.019076798104022E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9996420813449963	WITHOUT_CLASSIFICATION	3.579186550037903E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999718641582476	WITHOUT_CLASSIFICATION	2.8135841752408177E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998667507618058	WITHOUT_CLASSIFICATION	1.3324923819429035E-4	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998667507618058	WITHOUT_CLASSIFICATION	1.3324923819429035E-4	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998283441871373	WITHOUT_CLASSIFICATION	1.7165581286262408E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9996804397591872	WITHOUT_CLASSIFICATION	3.1956024081280604E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999153231208486	WITHOUT_CLASSIFICATION	8.46768791513648E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999041055260992	WITHOUT_CLASSIFICATION	9.589447390073174E-5	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998923002766219	WITHOUT_CLASSIFICATION	1.0769972337819265E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981494440694999	WITHOUT_CLASSIFICATION	0.0018505559305000536	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999085762637279	WITHOUT_CLASSIFICATION	9.142373627211013E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998939310882263	WITHOUT_CLASSIFICATION	1.0606891177361984E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9941713086866505	WITHOUT_CLASSIFICATION	0.0058286913133494414	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999611516198247	WITHOUT_CLASSIFICATION	3.8848380175310115E-5	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999926443172784	WITHOUT_CLASSIFICATION	7.355682721600678E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995638765413095	WITHOUT_CLASSIFICATION	4.3612345869053793E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999654626044617	WITHOUT_CLASSIFICATION	3.4537395538197097E-5	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999723217759802	WITHOUT_CLASSIFICATION	2.767822401979949E-5	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9995693446437858	WITHOUT_CLASSIFICATION	4.3065535621430735E-4	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9996902425418148	WITHOUT_CLASSIFICATION	3.097574581852273E-4	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9996902425418148	WITHOUT_CLASSIFICATION	3.097574581852273E-4	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999805148564512	WITHOUT_CLASSIFICATION	1.9485143548813685E-5	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995926647226104	WITHOUT_CLASSIFICATION	4.0733527738960433E-4	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999528173373431	WITHOUT_CLASSIFICATION	4.7182662656804364E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999454738529221	WITHOUT_CLASSIFICATION	5.4526147078047196E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999740344603644	WITHOUT_CLASSIFICATION	2.5965539635653745E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.999951120937797	WITHOUT_CLASSIFICATION	4.887906220295587E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.999951120937797	WITHOUT_CLASSIFICATION	4.887906220295587E-5	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999365609483907	WITHOUT_CLASSIFICATION	6.343905160939849E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999853939794617	WITHOUT_CLASSIFICATION	1.4606020538214128E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9995561345765274	WITHOUT_CLASSIFICATION	4.438654234725615E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999929062573283	WITHOUT_CLASSIFICATION	7.093742671593912E-6	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998616097520703	WITHOUT_CLASSIFICATION	1.3839024792966048E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999893920431341	WITHOUT_CLASSIFICATION	1.0607956865901748E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999960438407799	WITHOUT_CLASSIFICATION	3.956159220097875E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999870437833032	WITHOUT_CLASSIFICATION	1.29562166968947E-5	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9993857554019164	WITHOUT_CLASSIFICATION	6.142445980836016E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999738898877637	WITHOUT_CLASSIFICATION	2.6110112236286904E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999742487275636	WITHOUT_CLASSIFICATION	2.5751272436427436E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.967448465214064	WITHOUT_CLASSIFICATION	0.032551534785936	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999648586216068	WITHOUT_CLASSIFICATION	3.514137839326253E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994513381123523	WITHOUT_CLASSIFICATION	5.486618876476321E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998024992562445	WITHOUT_CLASSIFICATION	1.9750074375535687E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9998393076795713	WITHOUT_CLASSIFICATION	1.6069232042866772E-4	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9996285147993514	WITHOUT_CLASSIFICATION	3.714852006485548E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999532886737752	WITHOUT_CLASSIFICATION	4.6711326224856225E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999393533980826	WITHOUT_CLASSIFICATION	6.0646601917326496E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999508627174157	WITHOUT_CLASSIFICATION	4.9137282584124355E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996138476316331	WITHOUT_CLASSIFICATION	3.861523683668812E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999625470588479	WITHOUT_CLASSIFICATION	3.7452941152217385E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999329957840699	WITHOUT_CLASSIFICATION	6.700421593017353E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999339094430612	WITHOUT_CLASSIFICATION	6.609055693880845E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9995961382326832	WITHOUT_CLASSIFICATION	4.0386176731676665E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998576702459276	WITHOUT_CLASSIFICATION	1.4232975407231038E-4	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999686709263804	WITHOUT_CLASSIFICATION	3.13290736195376E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999967191538788	WITHOUT_CLASSIFICATION	3.280846121237456E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994211297001203	WITHOUT_CLASSIFICATION	5.78870299879601E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9995493414061126	WITHOUT_CLASSIFICATION	4.506585938873868E-4	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9995758872664572	WITHOUT_CLASSIFICATION	4.241127335427993E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9994893143542061	WITHOUT_CLASSIFICATION	5.106856457938996E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997883047934188	WITHOUT_CLASSIFICATION	2.1169520658112474E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9998951378718564	WITHOUT_CLASSIFICATION	1.0486212814356039E-4	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999898438390614	WITHOUT_CLASSIFICATION	1.0156160938617221E-5	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996593009060716	WITHOUT_CLASSIFICATION	3.4069909392841976E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999857304639309	WITHOUT_CLASSIFICATION	1.4269536069210918E-5	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999648342112117	WITHOUT_CLASSIFICATION	3.516578878832959E-5	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9996060146199804	WITHOUT_CLASSIFICATION	3.9398538001957507E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998053759327786	WITHOUT_CLASSIFICATION	1.946240672213897E-4	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999991059289557	WITHOUT_CLASSIFICATION	8.940710443070563E-6	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994492878982033	WITHOUT_CLASSIFICATION	5.507121017967419E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996593009060716	WITHOUT_CLASSIFICATION	3.4069909392841976E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9995816771300953	WITHOUT_CLASSIFICATION	4.1832286990478584E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997862514079706	WITHOUT_CLASSIFICATION	2.137485920294228E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999675649167103	WITHOUT_CLASSIFICATION	3.2435083289720454E-5	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998770637659528	WITHOUT_CLASSIFICATION	1.2293623404718086E-4	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9996996549336796	WITHOUT_CLASSIFICATION	3.0034506632028475E-4	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999122081253338	WITHOUT_CLASSIFICATION	8.779187466619501E-5	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996516770730985	WITHOUT_CLASSIFICATION	3.4832292690133783E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.999889265001444	WITHOUT_CLASSIFICATION	1.1073499855595892E-4	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999691799948545	WITHOUT_CLASSIFICATION	3.082000514557783E-5	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999886784108954	WITHOUT_CLASSIFICATION	1.1321589104601076E-4	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999755468230423	WITHOUT_CLASSIFICATION	2.4453176957561883E-5	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999886784108954	WITHOUT_CLASSIFICATION	1.1321589104601076E-4	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999016641826716	WITHOUT_CLASSIFICATION	9.833581732844502E-5	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994527240672287	WITHOUT_CLASSIFICATION	5.472759327712798E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999016641826716	WITHOUT_CLASSIFICATION	9.833581732844502E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994651552680281	WITHOUT_CLASSIFICATION	5.34844731971908E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998544835179503	WITHOUT_CLASSIFICATION	1.4551648204981125E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9992903092383371	WITHOUT_CLASSIFICATION	7.096907616629604E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9992903092383371	WITHOUT_CLASSIFICATION	7.096907616629604E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9994621644464156	WITHOUT_CLASSIFICATION	5.378355535844179E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9994661602782284	WITHOUT_CLASSIFICATION	5.338397217716562E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9994621644464156	WITHOUT_CLASSIFICATION	5.378355535844179E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996075584280596	WITHOUT_CLASSIFICATION	3.9244157194046265E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9997758504536921	WITHOUT_CLASSIFICATION	2.2414954630783164E-4	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997263524547004	WITHOUT_CLASSIFICATION	2.7364754529959705E-4	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994598962970836	WITHOUT_CLASSIFICATION	5.401037029163674E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//columns	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999894784235015	WITHOUT_CLASSIFICATION	1.0521576498496795E-4	TEST
//types	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999582842112928	WITHOUT_CLASSIFICATION	4.1715788707182216E-5	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999484461505386	WITHOUT_CLASSIFICATION	5.155384946141515E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999139698852934	WITHOUT_CLASSIFICATION	8.603011470656234E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999103922798699	WITHOUT_CLASSIFICATION	8.960772013011801E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999871189273332	WITHOUT_CLASSIFICATION	1.288107266685411E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999914090990232	WITHOUT_CLASSIFICATION	8.590900976842741E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999985096305894	WITHOUT_CLASSIFICATION	1.490369410597905E-5	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997212910636983	WITHOUT_CLASSIFICATION	2.7870893630162024E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997266978741056	WITHOUT_CLASSIFICATION	2.73302125894463E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999226033633865	WITHOUT_CLASSIFICATION	7.739663661350532E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9995348552186109	WITHOUT_CLASSIFICATION	4.651447813891279E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997800608081071	WITHOUT_CLASSIFICATION	2.1993919189281376E-4	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999592435472892	WITHOUT_CLASSIFICATION	4.075645271080609E-4	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9994271426964165	WITHOUT_CLASSIFICATION	5.72857303583453E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999402785685103	WITHOUT_CLASSIFICATION	5.9721431489782536E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997263524547004	WITHOUT_CLASSIFICATION	2.7364754529959705E-4	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999638689488952	WITHOUT_CLASSIFICATION	3.613105110480206E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.99973759937921	WITHOUT_CLASSIFICATION	2.6240062079001063E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9973583333750856	WITHOUT_CLASSIFICATION	0.0026416666249143117	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9997323211898254	WITHOUT_CLASSIFICATION	2.676788101746709E-4	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999757710226389	WITHOUT_CLASSIFICATION	2.4228977361164852E-5	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9996899484496944	WITHOUT_CLASSIFICATION	3.100515503055242E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996075584280596	WITHOUT_CLASSIFICATION	3.9244157194046265E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996075584280596	WITHOUT_CLASSIFICATION	3.9244157194046265E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9997752498100594	WITHOUT_CLASSIFICATION	2.2475018994068058E-4	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9996899484496944	WITHOUT_CLASSIFICATION	3.100515503055242E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9997613560374581	WITHOUT_CLASSIFICATION	2.3864396254180096E-4	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9889998185761761	WITHOUT_CLASSIFICATION	0.011000181423823856	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999762648401009	WITHOUT_CLASSIFICATION	2.3735159899043986E-5	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999684158659494	WITHOUT_CLASSIFICATION	3.158413405064365E-5	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999310614350365	WITHOUT_CLASSIFICATION	6.893856496347396E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9995117603090753	WITHOUT_CLASSIFICATION	4.882396909247168E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999979915470912	WITHOUT_CLASSIFICATION	2.0084529087952E-5	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999484461505386	WITHOUT_CLASSIFICATION	5.155384946141515E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9997274021433415	WITHOUT_CLASSIFICATION	2.7259785665848706E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999979915470912	WITHOUT_CLASSIFICATION	2.0084529087952E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999800028931825	WITHOUT_CLASSIFICATION	1.999710681759744E-5	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999969691190708	WITHOUT_CLASSIFICATION	3.030880929334592E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998404536985389	WITHOUT_CLASSIFICATION	1.5954630146098475E-4	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.999896162877916	WITHOUT_CLASSIFICATION	1.0383712208400225E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998348309329126	WITHOUT_CLASSIFICATION	1.6516906708738304E-4	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999945929142448	WITHOUT_CLASSIFICATION	5.407085755235767E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999989367255557	WITHOUT_CLASSIFICATION	1.0632744443068706E-5	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999895004339405	WITHOUT_CLASSIFICATION	1.0499566059430551E-5	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999484222563354	WITHOUT_CLASSIFICATION	5.1577743664506824E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998543640165584	WITHOUT_CLASSIFICATION	1.4563598344163233E-4	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998771374445632	WITHOUT_CLASSIFICATION	1.2286255543681403E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999979915470912	WITHOUT_CLASSIFICATION	2.0084529087952E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998348309329126	WITHOUT_CLASSIFICATION	1.6516906708738304E-4	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999989367255557	WITHOUT_CLASSIFICATION	1.0632744443068706E-5	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998256099091104	WITHOUT_CLASSIFICATION	1.7439009088964476E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999910375693585	WITHOUT_CLASSIFICATION	8.962430641443568E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999438090710492	WITHOUT_CLASSIFICATION	5.6190928950854956E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9995407335924713	WITHOUT_CLASSIFICATION	4.592664075287259E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999636274499603	WITHOUT_CLASSIFICATION	3.637255003979113E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999800028931825	WITHOUT_CLASSIFICATION	1.999710681759744E-5	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9997262009831787	WITHOUT_CLASSIFICATION	2.737990168212602E-4	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9995352470423066	WITHOUT_CLASSIFICATION	4.6475295769352526E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9982643492168776	WITHOUT_CLASSIFICATION	0.0017356507831223814	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9982643492168776	WITHOUT_CLASSIFICATION	0.0017356507831223814	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9998694120309856	WITHOUT_CLASSIFICATION	1.3058796901446344E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994651552680281	WITHOUT_CLASSIFICATION	5.34844731971908E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398530603931	WITHOUT_CLASSIFICATION	6.0146939607001406E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999888924438888	WITHOUT_CLASSIFICATION	1.1107556111203742E-4	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9994622306300238	WITHOUT_CLASSIFICATION	5.377693699761688E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998726195330617	WITHOUT_CLASSIFICATION	1.2738046693824893E-4	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998542423557341	WITHOUT_CLASSIFICATION	1.4575764426589746E-4	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999787109945799	WITHOUT_CLASSIFICATION	2.128900542008465E-5	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999581606098971	WITHOUT_CLASSIFICATION	4.1839390102968094E-5	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997243353827393	WITHOUT_CLASSIFICATION	2.756646172606758E-4	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999393073403098	WITHOUT_CLASSIFICATION	6.069265969021582E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9996214823607655	WITHOUT_CLASSIFICATION	3.7851763923442953E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999897502092435	WITHOUT_CLASSIFICATION	1.0249790756451287E-5	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996302208347164	WITHOUT_CLASSIFICATION	3.6977916528366353E-4	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996071192654069	WITHOUT_CLASSIFICATION	3.928807345930716E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998738683783145	WITHOUT_CLASSIFICATION	1.261316216854918E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997545458941137	WITHOUT_CLASSIFICATION	2.454541058862479E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9997492058027626	WITHOUT_CLASSIFICATION	2.5079419723742267E-4	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9996765041401655	WITHOUT_CLASSIFICATION	3.234958598345044E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9995701712165191	WITHOUT_CLASSIFICATION	4.2982878348085505E-4	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997514020561835	WITHOUT_CLASSIFICATION	2.4859794381657473E-4	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999138195259252	WITHOUT_CLASSIFICATION	8.618047407481131E-5	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999127882792105	WITHOUT_CLASSIFICATION	8.721172078949613E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999677119169831	WITHOUT_CLASSIFICATION	3.22880830169501E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999768556199388	WITHOUT_CLASSIFICATION	2.3144380061183372E-5	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999456449066161	WITHOUT_CLASSIFICATION	5.4355093383897095E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9982246423731244	WITHOUT_CLASSIFICATION	0.0017753576268755668	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999197800293986	WITHOUT_CLASSIFICATION	8.021997060140784E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9998875164697484	WITHOUT_CLASSIFICATION	1.124835302515408E-4	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999740073183628	WITHOUT_CLASSIFICATION	2.599268163711764E-5	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999195000115699	WITHOUT_CLASSIFICATION	8.04999884300853E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9953747788013795	WITHOUT_CLASSIFICATION	0.0046252211986205025	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9984257071967901	WITHOUT_CLASSIFICATION	0.001574292803209883	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9985094823606697	WITHOUT_CLASSIFICATION	0.001490517639330336	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999656543694467	WITHOUT_CLASSIFICATION	3.434563055320394E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9996095812467339	WITHOUT_CLASSIFICATION	3.904187532661427E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997304342227161	WITHOUT_CLASSIFICATION	2.6956577728396445E-4	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998074891261053	WITHOUT_CLASSIFICATION	1.9251087389465094E-4	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997547495915325	WITHOUT_CLASSIFICATION	2.4525040846738315E-4	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999363630876684	WITHOUT_CLASSIFICATION	6.363691233151154E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999885216031467	WITHOUT_CLASSIFICATION	1.1478396853303267E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999927342588837	WITHOUT_CLASSIFICATION	7.265741116299945E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999602640205726	WITHOUT_CLASSIFICATION	3.973597942742178E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999879299001868	WITHOUT_CLASSIFICATION	1.207009981317588E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999927342588837	WITHOUT_CLASSIFICATION	7.265741116299945E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999885216031467	WITHOUT_CLASSIFICATION	1.1478396853303267E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999602640205726	WITHOUT_CLASSIFICATION	3.973597942742178E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999662958412003	WITHOUT_CLASSIFICATION	3.370415879956721E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999932689363051	WITHOUT_CLASSIFICATION	6.731063694889058E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9988756254070073	WITHOUT_CLASSIFICATION	0.0011243745929927376	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999717414622777	WITHOUT_CLASSIFICATION	2.8258537722293473E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999877190981158	WITHOUT_CLASSIFICATION	1.2280901884285554E-5	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998518483942661	WITHOUT_CLASSIFICATION	1.481516057338417E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9952667332456603	WITHOUT_CLASSIFICATION	0.004733266754339729	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9990454497536884	WITHOUT_CLASSIFICATION	9.545502463117905E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9997697603276507	WITHOUT_CLASSIFICATION	2.3023967234935046E-4	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998901107788799	WITHOUT_CLASSIFICATION	1.0988922112006501E-4	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999583414117024	WITHOUT_CLASSIFICATION	4.165858829762331E-5	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9996238335034238	WITHOUT_CLASSIFICATION	3.7616649657621617E-4	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999046750092371	WITHOUT_CLASSIFICATION	9.532499076297932E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998154704835335	WITHOUT_CLASSIFICATION	1.8452951646657037E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998393329496201	WITHOUT_CLASSIFICATION	1.6066705037992126E-4	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9995624062553216	WITHOUT_CLASSIFICATION	4.375937446784288E-4	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997614820180208	WITHOUT_CLASSIFICATION	2.3851798197914396E-4	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999879741222824	WITHOUT_CLASSIFICATION	1.2025877717756753E-5	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999987527964262	WITHOUT_CLASSIFICATION	1.2472035737962303E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999102465189365	WITHOUT_CLASSIFICATION	8.975348106358661E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999535318826032	WITHOUT_CLASSIFICATION	4.646811739684553E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999643407066071	WITHOUT_CLASSIFICATION	3.565929339295708E-5	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.99985779116809	WITHOUT_CLASSIFICATION	1.422088319100574E-4	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999731212291846	WITHOUT_CLASSIFICATION	2.6878770815400363E-4	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999102465189365	WITHOUT_CLASSIFICATION	8.975348106358661E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999102465189365	WITHOUT_CLASSIFICATION	8.975348106358661E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999786951462839	WITHOUT_CLASSIFICATION	2.1304853716048604E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999786951462839	WITHOUT_CLASSIFICATION	2.1304853716048604E-5	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9995484336076575	WITHOUT_CLASSIFICATION	4.515663923425043E-4	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997614820180208	WITHOUT_CLASSIFICATION	2.3851798197914396E-4	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998053840074794	WITHOUT_CLASSIFICATION	1.9461599252054126E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999674514339354	WITHOUT_CLASSIFICATION	3.254856606452648E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997647290005995	WITHOUT_CLASSIFICATION	2.3527099940041043E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997647290005995	WITHOUT_CLASSIFICATION	2.3527099940041043E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998382547539877	WITHOUT_CLASSIFICATION	1.6174524601237538E-4	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9866888363185977	WITHOUT_CLASSIFICATION	0.013311163681402153	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999942755554674	WITHOUT_CLASSIFICATION	5.72444453260065E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.999709846628415	WITHOUT_CLASSIFICATION	2.901533715850229E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9990046696117707	WITHOUT_CLASSIFICATION	9.953303882293202E-4	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999993056362	WITHOUT_CLASSIFICATION	6.943638000745517E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999702336508651	WITHOUT_CLASSIFICATION	2.976634913482954E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9986796865581854	WITHOUT_CLASSIFICATION	0.0013203134418146014	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9998116060231048	WITHOUT_CLASSIFICATION	1.883939768951981E-4	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999894712711623	WITHOUT_CLASSIFICATION	1.0528728837736533E-5	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998426666157553	WITHOUT_CLASSIFICATION	1.5733338424478132E-4	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9983566120531537	WITHOUT_CLASSIFICATION	0.0016433879468462616	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9991526235185927	WITHOUT_CLASSIFICATION	8.473764814072184E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999411174719357	WITHOUT_CLASSIFICATION	5.888252806438859E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186737627428	WITHOUT_CLASSIFICATION	8.13262372572179E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999803003450431	WITHOUT_CLASSIFICATION	1.969965495686444E-5	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9989450659150372	WITHOUT_CLASSIFICATION	0.001054934084962807	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9994497751671435	WITHOUT_CLASSIFICATION	5.502248328564533E-4	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999841217590895	WITHOUT_CLASSIFICATION	1.5878240910565158E-5	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9982428702691621	WITHOUT_CLASSIFICATION	0.001757129730837821	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999892751195554	WITHOUT_CLASSIFICATION	1.0724880444623281E-5	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999959121316565	WITHOUT_CLASSIFICATION	4.0878683434980494E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994470527552085	WITHOUT_CLASSIFICATION	5.529472447915029E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999528482875288	WITHOUT_CLASSIFICATION	4.715171247122088E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9996765041401655	WITHOUT_CLASSIFICATION	3.234958598345044E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998052557383448	WITHOUT_CLASSIFICATION	1.947442616552449E-4	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999962141141979	WITHOUT_CLASSIFICATION	3.7858858020302416E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999145107257689	WITHOUT_CLASSIFICATION	8.548927423114862E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9997278892510338	WITHOUT_CLASSIFICATION	2.72110748966242E-4	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9997278892510338	WITHOUT_CLASSIFICATION	2.72110748966242E-4	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999530399479886	WITHOUT_CLASSIFICATION	4.6960052011527664E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999498387181482	WITHOUT_CLASSIFICATION	5.0161281851728E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999219785236906	WITHOUT_CLASSIFICATION	7.802147630936501E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999219785236906	WITHOUT_CLASSIFICATION	7.802147630936501E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997000646787382	WITHOUT_CLASSIFICATION	2.999353212618148E-4	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996964274661401	WITHOUT_CLASSIFICATION	3.0357253385992973E-4	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9997515962422415	WITHOUT_CLASSIFICATION	2.4840375775847615E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999071030749512	WITHOUT_CLASSIFICATION	9.289692504876918E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.999728417381136	WITHOUT_CLASSIFICATION	2.7158261886395534E-4	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9987796326794216	WITHOUT_CLASSIFICATION	0.0012203673205783928	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999525283566906	WITHOUT_CLASSIFICATION	4.7471643309340273E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999185937122737	WITHOUT_CLASSIFICATION	8.140628772632786E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999185937122737	WITHOUT_CLASSIFICATION	8.140628772632786E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999918304040648	WITHOUT_CLASSIFICATION	8.169595935107759E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9998269022050862	WITHOUT_CLASSIFICATION	1.7309779491380837E-4	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9998269022050862	WITHOUT_CLASSIFICATION	1.7309779491380837E-4	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999244782864594	WITHOUT_CLASSIFICATION	7.552171354072631E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999394751813241	WITHOUT_CLASSIFICATION	6.052481867594747E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999822925269208	WITHOUT_CLASSIFICATION	1.7707473079248276E-5	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999744321908197	WITHOUT_CLASSIFICATION	2.5567809180305156E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9995596964690785	WITHOUT_CLASSIFICATION	4.4030353092149846E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9991777110537835	WITHOUT_CLASSIFICATION	8.22288946216503E-4	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9988347510353619	WITHOUT_CLASSIFICATION	0.0011652489646380455	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998884315136407	WITHOUT_CLASSIFICATION	1.115684863593317E-4	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9980957098318487	WITHOUT_CLASSIFICATION	0.0019042901681511964	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999416940081132	WITHOUT_CLASSIFICATION	5.83059918867664E-5	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999876185979475	WITHOUT_CLASSIFICATION	1.2381402052544678E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999036995365552	WITHOUT_CLASSIFICATION	9.6300463444769E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997243203717293	WITHOUT_CLASSIFICATION	2.7567962827064626E-4	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9997260227970022	WITHOUT_CLASSIFICATION	2.739772029978291E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999525968085985	WITHOUT_CLASSIFICATION	4.740319140148926E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9995346753655877	WITHOUT_CLASSIFICATION	4.6532463441233867E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991370595828002	WITHOUT_CLASSIFICATION	8.629404171998312E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9996180294255479	WITHOUT_CLASSIFICATION	3.8197057445212175E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999985651580272	WITHOUT_CLASSIFICATION	1.4348419727346925E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.999824570191282	WITHOUT_CLASSIFICATION	1.7542980871795624E-4	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999440119251055	WITHOUT_CLASSIFICATION	5.598807489464088E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997823344328327	WITHOUT_CLASSIFICATION	2.1766556716736214E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9919810433428299	WITHOUT_CLASSIFICATION	0.0080189566571701	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9924594532637637	WITHOUT_CLASSIFICATION	0.007540546736236229	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999779511719502	WITHOUT_CLASSIFICATION	2.204882804979316E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997823344328327	WITHOUT_CLASSIFICATION	2.1766556716736214E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9222998872288565	WITHOUT_CLASSIFICATION	0.07770011277114348	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999991846183266	WITHOUT_CLASSIFICATION	8.153816733930623E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998837816364632	WITHOUT_CLASSIFICATION	1.1621836353683358E-4	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997119254840844	WITHOUT_CLASSIFICATION	2.880745159156621E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999726826076694	WITHOUT_CLASSIFICATION	2.731739233068061E-5	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9996483222729229	WITHOUT_CLASSIFICATION	3.516777270771321E-4	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999978295636651	WITHOUT_CLASSIFICATION	2.170436334907073E-5	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998756826067735	WITHOUT_CLASSIFICATION	1.243173932264684E-4	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999039563590392	WITHOUT_CLASSIFICATION	9.604364096089391E-5	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999862913590785	WITHOUT_CLASSIFICATION	1.3708640921434523E-5	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999039563590392	WITHOUT_CLASSIFICATION	9.604364096089391E-5	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999511239420311	WITHOUT_CLASSIFICATION	4.887605796888284E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995816911034819	WITHOUT_CLASSIFICATION	4.1830889651805315E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9968104077051865	WITHOUT_CLASSIFICATION	0.0031895922948135935	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999721133456165	WITHOUT_CLASSIFICATION	2.7886654383495162E-5	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999840158247536	WITHOUT_CLASSIFICATION	1.598417524645631E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999287770207794	WITHOUT_CLASSIFICATION	7.122297922066053E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999600130601639	WITHOUT_CLASSIFICATION	3.998693983608202E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998790233058599	WITHOUT_CLASSIFICATION	1.209766941400637E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999600130601639	WITHOUT_CLASSIFICATION	3.998693983608202E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999664349802403	WITHOUT_CLASSIFICATION	3.3565019759745145E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996130869358196	WITHOUT_CLASSIFICATION	3.8691306418029824E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998877894621802	WITHOUT_CLASSIFICATION	1.122105378199332E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9991611550535904	WITHOUT_CLASSIFICATION	8.388449464097261E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999287770207794	WITHOUT_CLASSIFICATION	7.122297922066053E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998790233058599	WITHOUT_CLASSIFICATION	1.209766941400637E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999664349802403	WITHOUT_CLASSIFICATION	3.3565019759745145E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999506386519146	WITHOUT_CLASSIFICATION	4.9361348085440805E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9997335420688169	WITHOUT_CLASSIFICATION	2.6645793118317294E-4	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9998699821537661	WITHOUT_CLASSIFICATION	1.3001784623397478E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9998773492800611	WITHOUT_CLASSIFICATION	1.22650719938883E-4	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998586874075309	WITHOUT_CLASSIFICATION	1.4131259246912234E-4	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999454763027099	WITHOUT_CLASSIFICATION	5.452369729011944E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186737627428	WITHOUT_CLASSIFICATION	8.13262372572179E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996130869358196	WITHOUT_CLASSIFICATION	3.8691306418029824E-4	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999916713689304	WITHOUT_CLASSIFICATION	8.328631069573021E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991233740811186	WITHOUT_CLASSIFICATION	8.766259188813597E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999404420750357	WITHOUT_CLASSIFICATION	5.95579249642679E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186737627428	WITHOUT_CLASSIFICATION	8.13262372572179E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997658239547322	WITHOUT_CLASSIFICATION	2.3417604526779987E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186737627428	WITHOUT_CLASSIFICATION	8.13262372572179E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998734167103347	WITHOUT_CLASSIFICATION	1.2658328966533817E-4	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999620793439518	WITHOUT_CLASSIFICATION	3.792065604825319E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9994467391902971	WITHOUT_CLASSIFICATION	5.532608097028678E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999660780948011	WITHOUT_CLASSIFICATION	3.392190519891544E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999871618580916	WITHOUT_CLASSIFICATION	1.2838141908370273E-5	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999579780076167	WITHOUT_CLASSIFICATION	4.202199238331972E-5	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999746559023651	WITHOUT_CLASSIFICATION	2.5344097634785866E-5	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998583231483044	WITHOUT_CLASSIFICATION	1.416768516956864E-4	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996267955347632	WITHOUT_CLASSIFICATION	3.732044652368783E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9994003460488873	WITHOUT_CLASSIFICATION	5.996539511126937E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999954860099299	WITHOUT_CLASSIFICATION	4.5139900700445515E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9994003460488873	WITHOUT_CLASSIFICATION	5.996539511126937E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9870869902455073	WITHOUT_CLASSIFICATION	0.012913009754492796	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999658478685081	WITHOUT_CLASSIFICATION	3.415213149186882E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999957365070744	WITHOUT_CLASSIFICATION	4.26349292557599E-6	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999156113118693	WITHOUT_CLASSIFICATION	8.43886881306213E-5	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9993193774879761	WITHOUT_CLASSIFICATION	6.806225120238718E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999959566705952	WITHOUT_CLASSIFICATION	4.043329404914794E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999890264561208	WITHOUT_CLASSIFICATION	1.0973543879179477E-5	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983826588927317	WITHOUT_CLASSIFICATION	0.001617341107268288	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983826588927317	WITHOUT_CLASSIFICATION	0.001617341107268288	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999434619842904	WITHOUT_CLASSIFICATION	5.653801570955166E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998781710548668	WITHOUT_CLASSIFICATION	1.2182894513323105E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999364709385619	WITHOUT_CLASSIFICATION	6.352906143814086E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999981036710005	WITHOUT_CLASSIFICATION	1.8963289994031108E-6	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999837984761331	WITHOUT_CLASSIFICATION	1.620152386695054E-5	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9994990759910882	WITHOUT_CLASSIFICATION	5.009240089117266E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999727651908277	WITHOUT_CLASSIFICATION	2.72348091723619E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9989796304653066	WITHOUT_CLASSIFICATION	0.0010203695346933713	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9989963715509339	WITHOUT_CLASSIFICATION	0.0010036284490660939	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9979395747046899	WITHOUT_CLASSIFICATION	0.0020604252953101377	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999821772683991	WITHOUT_CLASSIFICATION	1.7822731600877193E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999781209030872	WITHOUT_CLASSIFICATION	2.1879096912739462E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994642147009457	WITHOUT_CLASSIFICATION	5.357852990542327E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.99972523445182	WITHOUT_CLASSIFICATION	2.7476554817995906E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.99972523445182	WITHOUT_CLASSIFICATION	2.7476554817995906E-4	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9997670767847938	WITHOUT_CLASSIFICATION	2.329232152061532E-4	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998583231483044	WITHOUT_CLASSIFICATION	1.416768516956864E-4	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999654646815321	WITHOUT_CLASSIFICATION	3.4535318467894305E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999483779407892	WITHOUT_CLASSIFICATION	5.162205921079112E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998031612387859	WITHOUT_CLASSIFICATION	1.9683876121420394E-4	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999694402810504	WITHOUT_CLASSIFICATION	3.055971894958264E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998316966699601	WITHOUT_CLASSIFICATION	1.6830333003994377E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999696429541815	WITHOUT_CLASSIFICATION	3.035704581849716E-4	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999086297334102	WITHOUT_CLASSIFICATION	9.137026658972823E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999762260213351	WITHOUT_CLASSIFICATION	2.3773978664986224E-5	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999950609690492	WITHOUT_CLASSIFICATION	4.939030950788492E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998203727291421	WITHOUT_CLASSIFICATION	1.7962727085786507E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999941852297858	WITHOUT_CLASSIFICATION	5.814770214188846E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999962122122104	WITHOUT_CLASSIFICATION	3.7877877895848416E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9996038595309147	WITHOUT_CLASSIFICATION	3.961404690853474E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999839479611033	WITHOUT_CLASSIFICATION	1.6052038896746496E-5	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999647018968236	WITHOUT_CLASSIFICATION	3.529810317625579E-5	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999953717750205	WITHOUT_CLASSIFICATION	4.628224979483069E-6	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999969143510757	WITHOUT_CLASSIFICATION	3.0856489241656396E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999469937166783	WITHOUT_CLASSIFICATION	5.30062833217832E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999627855011397	WITHOUT_CLASSIFICATION	3.7214498860303427E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999738819216083	WITHOUT_CLASSIFICATION	2.6118078391743407E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999721193202951	WITHOUT_CLASSIFICATION	2.7880679704953804E-5	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999696512635398	WITHOUT_CLASSIFICATION	3.0348736460182417E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999702991128115	WITHOUT_CLASSIFICATION	2.9700887188402557E-5	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9995449058237081	WITHOUT_CLASSIFICATION	4.550941762918841E-4	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9991001989709741	WITHOUT_CLASSIFICATION	8.998010290257384E-4	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9989468122864781	WITHOUT_CLASSIFICATION	0.001053187713521891	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9988785814753737	WITHOUT_CLASSIFICATION	0.0011214185246263464	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999152638267065	WITHOUT_CLASSIFICATION	8.473617329362694E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999167576850507	WITHOUT_CLASSIFICATION	8.324231494932335E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999155840317213	WITHOUT_CLASSIFICATION	8.441596827871433E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999094431235379	WITHOUT_CLASSIFICATION	9.055687646200706E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9948460241008584	WITHOUT_CLASSIFICATION	0.0051539758991416005	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9965989527740649	WITHOUT_CLASSIFICATION	0.003401047225935056	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999846307074206	WITHOUT_CLASSIFICATION	1.53692925793615E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9993991998964613	WITHOUT_CLASSIFICATION	6.008001035387829E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9993991998964613	WITHOUT_CLASSIFICATION	6.008001035387829E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998441567604682	WITHOUT_CLASSIFICATION	1.5584323953168276E-4	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998879405424419	WITHOUT_CLASSIFICATION	1.1205945755807595E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9987814077594214	WITHOUT_CLASSIFICATION	0.0012185922405785964	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9987814077594214	WITHOUT_CLASSIFICATION	0.0012185922405785964	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999787205960687	WITHOUT_CLASSIFICATION	2.127940393136966E-5	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999842749788908	WITHOUT_CLASSIFICATION	1.5725021109198057E-4	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9996961188500222	WITHOUT_CLASSIFICATION	3.038811499777429E-4	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999762499948764	WITHOUT_CLASSIFICATION	2.3750005123540065E-5	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999153920735661	WITHOUT_CLASSIFICATION	8.460792643394625E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999753777586582	WITHOUT_CLASSIFICATION	2.4622241341796935E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999753777586582	WITHOUT_CLASSIFICATION	2.4622241341796935E-5	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9995750122505201	WITHOUT_CLASSIFICATION	4.249877494797586E-4	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996075584280596	WITHOUT_CLASSIFICATION	3.9244157194046265E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999647596430215	WITHOUT_CLASSIFICATION	3.524035697854505E-5	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999861811909645	WITHOUT_CLASSIFICATION	1.381880903538422E-5	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999745060571891	WITHOUT_CLASSIFICATION	2.5493942810867044E-5	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999382908629239	WITHOUT_CLASSIFICATION	6.170913707612226E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999895046327892	WITHOUT_CLASSIFICATION	1.0495367210711607E-5	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999579828647526	WITHOUT_CLASSIFICATION	4.2017135247534276E-5	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999853431583006	WITHOUT_CLASSIFICATION	1.4656841699367429E-5	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999765163890212	WITHOUT_CLASSIFICATION	2.3483610978743773E-5	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999732110296325	WITHOUT_CLASSIFICATION	2.6788970367455725E-5	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998896271568778	WITHOUT_CLASSIFICATION	1.1037284312228297E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999510532464767	WITHOUT_CLASSIFICATION	4.89467535233157E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.99939846856105	WITHOUT_CLASSIFICATION	6.015314389500828E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9992716557304125	WITHOUT_CLASSIFICATION	7.283442695874726E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999840713709786	WITHOUT_CLASSIFICATION	1.5928629021503572E-5	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.99995798536083	WITHOUT_CLASSIFICATION	4.2014639170076155E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9993009669328293	WITHOUT_CLASSIFICATION	6.990330671706058E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999896045555678	WITHOUT_CLASSIFICATION	1.0395444432149839E-5	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999538520954961	WITHOUT_CLASSIFICATION	4.614790450382423E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999247773271644	WITHOUT_CLASSIFICATION	7.522267283556613E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997992514140857	WITHOUT_CLASSIFICATION	2.007485859144164E-4	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999053111692773	WITHOUT_CLASSIFICATION	9.468883072267637E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993523267643438	WITHOUT_CLASSIFICATION	6.476732356562032E-4	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.998248419581776	WITHOUT_CLASSIFICATION	0.00175158041822403	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9994257791214867	WITHOUT_CLASSIFICATION	5.742208785133182E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9992752346930408	WITHOUT_CLASSIFICATION	7.247653069591877E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999910162978349	WITHOUT_CLASSIFICATION	8.983702165046213E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999832775091886	WITHOUT_CLASSIFICATION	1.672249081149543E-5	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999906204690924	WITHOUT_CLASSIFICATION	9.379530907682594E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999406767141877	WITHOUT_CLASSIFICATION	5.932328581222604E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999828473447914	WITHOUT_CLASSIFICATION	1.715265520860316E-4	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999594261843199	WITHOUT_CLASSIFICATION	4.0573815680194E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999430168419752	WITHOUT_CLASSIFICATION	5.698315802490907E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999721338924148	WITHOUT_CLASSIFICATION	2.7866107585251035E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996037452901051	WITHOUT_CLASSIFICATION	3.962547098949498E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999934819492805	WITHOUT_CLASSIFICATION	6.51805071949377E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999757079398526	WITHOUT_CLASSIFICATION	2.429206014734653E-5	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999860295014538	WITHOUT_CLASSIFICATION	1.3970498546290883E-5	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999674387961663	WITHOUT_CLASSIFICATION	3.256120383366289E-5	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.99995851759836	WITHOUT_CLASSIFICATION	4.148240164005282E-5	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999614660250727	WITHOUT_CLASSIFICATION	3.8533974927249396E-5	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999580225238346	WITHOUT_CLASSIFICATION	4.197747616537679E-5	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999580842895089	WITHOUT_CLASSIFICATION	4.191571049107225E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999778599084869	WITHOUT_CLASSIFICATION	2.2140091513080278E-5	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999390002205266	WITHOUT_CLASSIFICATION	6.099977947330306E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999820758022712	WITHOUT_CLASSIFICATION	1.7924197728759117E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999983867687821	WITHOUT_CLASSIFICATION	1.613231217902077E-5	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998886853310651	WITHOUT_CLASSIFICATION	1.1131466893491617E-4	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998211181088742	WITHOUT_CLASSIFICATION	1.7888189112581448E-4	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9891434439010075	WITHOUT_CLASSIFICATION	0.010856556098992508	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999792894155541	WITHOUT_CLASSIFICATION	2.0710584445761908E-5	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999735387910452	WITHOUT_CLASSIFICATION	2.646120895480097E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999189079678698	WITHOUT_CLASSIFICATION	8.109203213028155E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999677552647034	WITHOUT_CLASSIFICATION	3.224473529660741E-5	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999551416588595	WITHOUT_CLASSIFICATION	4.485834114045211E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999831355973654	WITHOUT_CLASSIFICATION	1.686440263459734E-5	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9995492803085813	WITHOUT_CLASSIFICATION	4.5071969141875594E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999890999150415	WITHOUT_CLASSIFICATION	1.0900084958508E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999890999150415	WITHOUT_CLASSIFICATION	1.0900084958508E-5	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999476184916966	WITHOUT_CLASSIFICATION	5.2381508303464626E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999637541572833	WITHOUT_CLASSIFICATION	3.624584271671746E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999546207452951	WITHOUT_CLASSIFICATION	4.5379254704880675E-5	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999922192896928	WITHOUT_CLASSIFICATION	7.78071030712394E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999509734965414	WITHOUT_CLASSIFICATION	4.9026503458559965E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9982185786835498	WITHOUT_CLASSIFICATION	0.0017814213164502738	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999617410751206	WITHOUT_CLASSIFICATION	3.82589248793463E-5	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999981296276648	WITHOUT_CLASSIFICATION	1.870372335202291E-6	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999906320896413	WITHOUT_CLASSIFICATION	9.367910358708919E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999316451304109	WITHOUT_CLASSIFICATION	6.835486958915053E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999563532787034	WITHOUT_CLASSIFICATION	4.364672129666587E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9976933514154792	WITHOUT_CLASSIFICATION	0.0023066485845208012	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999344503291934	WITHOUT_CLASSIFICATION	6.554967080663986E-5	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998880815995543	WITHOUT_CLASSIFICATION	1.1191840044566679E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991031119631852	WITHOUT_CLASSIFICATION	8.968880368147423E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991031119631852	WITHOUT_CLASSIFICATION	8.968880368147423E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999626941944622	WITHOUT_CLASSIFICATION	3.730580553774272E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998982651445666	WITHOUT_CLASSIFICATION	1.017348554335028E-4	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9996756134978234	WITHOUT_CLASSIFICATION	3.2438650217652695E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999966861933933	WITHOUT_CLASSIFICATION	3.313806606719847E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999147338569709	WITHOUT_CLASSIFICATION	8.526614302907756E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251343249755	WITHOUT_CLASSIFICATION	7.486567502441357E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9996888873342301	WITHOUT_CLASSIFICATION	3.1111266576990063E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9997903754973441	WITHOUT_CLASSIFICATION	2.096245026558414E-4	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999970252624075	WITHOUT_CLASSIFICATION	2.9747375926109853E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999358885136579	WITHOUT_CLASSIFICATION	6.411148634207857E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999539033661115	WITHOUT_CLASSIFICATION	4.609663388855085E-5	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9989991608968432	WITHOUT_CLASSIFICATION	0.0010008391031567985	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999858471340144	WITHOUT_CLASSIFICATION	1.415286598559321E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999630328140685	WITHOUT_CLASSIFICATION	3.6967185931472835E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9994109419981696	WITHOUT_CLASSIFICATION	5.890580018304358E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999579310740503	WITHOUT_CLASSIFICATION	4.2068925949696784E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999878570905242	WITHOUT_CLASSIFICATION	1.2142909475792348E-4	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999840356948777	WITHOUT_CLASSIFICATION	1.596430512225374E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998922470447822	WITHOUT_CLASSIFICATION	1.077529552177595E-4	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999815818470845	WITHOUT_CLASSIFICATION	1.8418152915475115E-5	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999636636798553	WITHOUT_CLASSIFICATION	3.633632014469446E-5	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999988574674741	WITHOUT_CLASSIFICATION	1.142532526004079E-6	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999203743911207	WITHOUT_CLASSIFICATION	7.962560887938731E-5	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996842684507823	WITHOUT_CLASSIFICATION	3.1573154921766893E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9996748137695103	WITHOUT_CLASSIFICATION	3.251862304896982E-4	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999839110397711	WITHOUT_CLASSIFICATION	1.6088960228852817E-5	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999628198938587	WITHOUT_CLASSIFICATION	3.718010614130854E-4	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9996859171625059	WITHOUT_CLASSIFICATION	3.140828374941211E-4	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999724583954592	WITHOUT_CLASSIFICATION	2.754160454068144E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9993929872764725	WITHOUT_CLASSIFICATION	6.070127235274225E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999263274693417	WITHOUT_CLASSIFICATION	7.367253065821185E-5	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999565272229552	WITHOUT_CLASSIFICATION	4.347277704481155E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999664846840101	WITHOUT_CLASSIFICATION	3.3515315990034276E-5	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999723714112884	WITHOUT_CLASSIFICATION	2.7628588711553723E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999385489362511	WITHOUT_CLASSIFICATION	6.145106374894002E-5	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999851276856034	WITHOUT_CLASSIFICATION	1.4872314396563262E-5	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998990670374391	WITHOUT_CLASSIFICATION	1.0093296256080233E-4	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999203236372604	WITHOUT_CLASSIFICATION	7.967636273960879E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9997750370878025	WITHOUT_CLASSIFICATION	2.2496291219748995E-4	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998301582945662	WITHOUT_CLASSIFICATION	1.6984170543365355E-4	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998301582945662	WITHOUT_CLASSIFICATION	1.6984170543365355E-4	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999338911442758	WITHOUT_CLASSIFICATION	6.610885572419459E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998657916406488	WITHOUT_CLASSIFICATION	1.3420835935119282E-4	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999397187567711	WITHOUT_CLASSIFICATION	6.028124322873896E-5	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999556741714509	WITHOUT_CLASSIFICATION	4.4325828549030315E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9983836161010641	WITHOUT_CLASSIFICATION	0.0016163838989358855	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998767103296017	WITHOUT_CLASSIFICATION	1.232896703982401E-4	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997190562295043	WITHOUT_CLASSIFICATION	2.809437704957282E-4	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9969752598810544	WITHOUT_CLASSIFICATION	0.0030247401189454656	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999772620846623	WITHOUT_CLASSIFICATION	2.273791533777182E-5	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172421150424	WITHOUT_CLASSIFICATION	8.275788495759614E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99767202722142	WITHOUT_CLASSIFICATION	0.0023279727785799373	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9973462782487078	WITHOUT_CLASSIFICATION	0.002653721751292161	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999982249532242	WITHOUT_CLASSIFICATION	1.7750467757963407E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999442194354276	WITHOUT_CLASSIFICATION	5.5780564572566836E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9985580669881419	WITHOUT_CLASSIFICATION	0.001441933011858145	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999970418748612	WITHOUT_CLASSIFICATION	2.9581251387118063E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999958163381749	WITHOUT_CLASSIFICATION	4.183661825070339E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998723949382898	WITHOUT_CLASSIFICATION	1.2760506171015064E-4	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999431421396211	WITHOUT_CLASSIFICATION	5.6857860378905587E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999034327287	WITHOUT_CLASSIFICATION	9.656727130199901E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999140594701662	WITHOUT_CLASSIFICATION	8.594052983379024E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997870723356703	WITHOUT_CLASSIFICATION	2.1292766432953405E-4	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9995111806607359	WITHOUT_CLASSIFICATION	4.888193392642467E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999402345374246	WITHOUT_CLASSIFICATION	5.976546257535214E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999801078416265	WITHOUT_CLASSIFICATION	1.989215837354442E-5	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998660053134379	WITHOUT_CLASSIFICATION	1.339946865620012E-4	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999822006870367	WITHOUT_CLASSIFICATION	1.779931296332847E-5	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999879158377203	WITHOUT_CLASSIFICATION	1.2084162279699868E-4	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999832139097908	WITHOUT_CLASSIFICATION	1.6786090209184874E-5	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999921300891845	WITHOUT_CLASSIFICATION	7.86991081556311E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999943088835546	WITHOUT_CLASSIFICATION	5.691116445371671E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999958279125594	WITHOUT_CLASSIFICATION	4.172087440661961E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999972070210795	WITHOUT_CLASSIFICATION	2.7929789205323394E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998211623371158	WITHOUT_CLASSIFICATION	1.7883766288415983E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998067399667214	WITHOUT_CLASSIFICATION	1.9326003327859733E-4	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999824713609079	WITHOUT_CLASSIFICATION	1.752863909207607E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999942506627517	WITHOUT_CLASSIFICATION	5.7493372483082254E-5	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999796925489698	WITHOUT_CLASSIFICATION	2.030745103019116E-5	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998727096452902	WITHOUT_CLASSIFICATION	1.27290354709921E-4	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999715468117223	WITHOUT_CLASSIFICATION	2.8453188277607328E-5	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994053435509	WITHOUT_CLASSIFICATION	5.946564490904142E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999771272894852	WITHOUT_CLASSIFICATION	2.2872710514825724E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9996210486187845	WITHOUT_CLASSIFICATION	3.7895138121546776E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9988863056270251	WITHOUT_CLASSIFICATION	0.001113694372974889	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996207385902925	WITHOUT_CLASSIFICATION	3.7926140970745556E-4	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999793221172162	WITHOUT_CLASSIFICATION	2.0677882783798964E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999344503291934	WITHOUT_CLASSIFICATION	6.554967080663986E-5	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999920307658714	WITHOUT_CLASSIFICATION	7.969234128606012E-5	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999836020852764	WITHOUT_CLASSIFICATION	1.639791472366167E-5	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9979293080243268	WITHOUT_CLASSIFICATION	0.0020706919756731932	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999884355010868	WITHOUT_CLASSIFICATION	1.15644989132204E-5	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999768968447693	WITHOUT_CLASSIFICATION	2.3103155230733262E-5	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996223771419738	WITHOUT_CLASSIFICATION	3.7762285802622866E-4	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999005402015095	WITHOUT_CLASSIFICATION	9.945979849037192E-5	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9981545629978485	WITHOUT_CLASSIFICATION	0.0018454370021514352	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998981181114283	WITHOUT_CLASSIFICATION	1.018818885717399E-4	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999655787060535	WITHOUT_CLASSIFICATION	3.442129394647791E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9993908248238903	WITHOUT_CLASSIFICATION	6.091751761096279E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9980845945533495	WITHOUT_CLASSIFICATION	0.0019154054466504337	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997787654154633	WITHOUT_CLASSIFICATION	2.2123458453676576E-4	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999122081253338	WITHOUT_CLASSIFICATION	8.779187466619501E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994683898143452	WITHOUT_CLASSIFICATION	5.316101856549021E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9994466353155246	WITHOUT_CLASSIFICATION	5.533646844754528E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999947904760812	WITHOUT_CLASSIFICATION	5.20952391873855E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999385581767405	WITHOUT_CLASSIFICATION	6.144182325949071E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994683898143452	WITHOUT_CLASSIFICATION	5.316101856549021E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.997110614353244	WITHOUT_CLASSIFICATION	0.0028893856467558767	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9997025139623366	WITHOUT_CLASSIFICATION	2.974860376634628E-4	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999883440796211	WITHOUT_CLASSIFICATION	1.1655920378882694E-5	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997215328756524	WITHOUT_CLASSIFICATION	2.7846712434768733E-4	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9973932740828281	WITHOUT_CLASSIFICATION	0.0026067259171719424	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997519192617907	WITHOUT_CLASSIFICATION	2.480807382092678E-4	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999955272335884	WITHOUT_CLASSIFICATION	4.47276641152915E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9997615185392286	WITHOUT_CLASSIFICATION	2.3848146077153895E-4	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999136438308086	WITHOUT_CLASSIFICATION	8.635616919141797E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999618520254026	WITHOUT_CLASSIFICATION	3.8147974597429926E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.997682006197448	WITHOUT_CLASSIFICATION	0.0023179938025519936	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9897125736569541	WITHOUT_CLASSIFICATION	0.010287426343045955	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999866851462339	WITHOUT_CLASSIFICATION	1.3314853766030643E-5	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999967953546395	WITHOUT_CLASSIFICATION	3.204645360496595E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9995345885409577	WITHOUT_CLASSIFICATION	4.654114590423454E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999738819216083	WITHOUT_CLASSIFICATION	2.6118078391743407E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999968097765655	WITHOUT_CLASSIFICATION	3.190223434536932E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999897640021921	WITHOUT_CLASSIFICATION	1.0235997807821102E-5	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9986593896215976	WITHOUT_CLASSIFICATION	0.0013406103784023573	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9997716759740525	WITHOUT_CLASSIFICATION	2.2832402594760826E-4	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999961069177252	WITHOUT_CLASSIFICATION	3.893082274829446E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999676268212424	WITHOUT_CLASSIFICATION	3.23731787574995E-5	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9998634510473208	WITHOUT_CLASSIFICATION	1.365489526791876E-4	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999978789349068	WITHOUT_CLASSIFICATION	2.121065093221841E-6	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999980409643202	WITHOUT_CLASSIFICATION	1.95903567980088E-5	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999488513740733	WITHOUT_CLASSIFICATION	5.114862592663972E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9985058137431895	WITHOUT_CLASSIFICATION	0.0014941862568105327	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997130410982873	WITHOUT_CLASSIFICATION	2.869589017126646E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999237008479617	WITHOUT_CLASSIFICATION	7.629915203825522E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9995980383038421	WITHOUT_CLASSIFICATION	4.0196169615793923E-4	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999946544062457	WITHOUT_CLASSIFICATION	5.34559375430648E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996328129973847	WITHOUT_CLASSIFICATION	3.671870026153315E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999222390186583	WITHOUT_CLASSIFICATION	7.776098134168542E-5	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999937504147102	WITHOUT_CLASSIFICATION	6.249585289901758E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997590441845787	WITHOUT_CLASSIFICATION	2.4095581542134001E-4	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999654880904704	WITHOUT_CLASSIFICATION	3.45119095296354E-5	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9996707212789029	WITHOUT_CLASSIFICATION	3.292787210970975E-4	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999829737785313	WITHOUT_CLASSIFICATION	1.7026221468718957E-5	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999901260857388	WITHOUT_CLASSIFICATION	9.873914261264674E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996559325500588	WITHOUT_CLASSIFICATION	3.440674499412109E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997110495677308	WITHOUT_CLASSIFICATION	2.8895043226918047E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997110495677308	WITHOUT_CLASSIFICATION	2.8895043226918047E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981494440694999	WITHOUT_CLASSIFICATION	0.0018505559305000536	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999611516198247	WITHOUT_CLASSIFICATION	3.8848380175310115E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999454738529221	WITHOUT_CLASSIFICATION	5.4526147078047196E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9986262740669279	WITHOUT_CLASSIFICATION	0.0013737259330720646	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999071030749512	WITHOUT_CLASSIFICATION	9.289692504876918E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999071030749512	WITHOUT_CLASSIFICATION	9.289692504876918E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999626242311129	WITHOUT_CLASSIFICATION	3.737576888708364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998024992562445	WITHOUT_CLASSIFICATION	1.9750074375535687E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998889598572059	WITHOUT_CLASSIFICATION	1.1104014279407712E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996138476316331	WITHOUT_CLASSIFICATION	3.861523683668812E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9991609152316656	WITHOUT_CLASSIFICATION	8.390847683343013E-4	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999468340520585	WITHOUT_CLASSIFICATION	5.316594794143165E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999953135543725	WITHOUT_CLASSIFICATION	4.686445627469037E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999327186999752	WITHOUT_CLASSIFICATION	6.728130002479531E-5	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999940240334667	WITHOUT_CLASSIFICATION	5.975966533297651E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996306751420161	WITHOUT_CLASSIFICATION	3.693248579838368E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996306751420161	WITHOUT_CLASSIFICATION	3.693248579838368E-4	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999720410110306	WITHOUT_CLASSIFICATION	2.79589889694053E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999579656889772	WITHOUT_CLASSIFICATION	4.203431102268956E-5	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9994535082023752	WITHOUT_CLASSIFICATION	5.46491797624796E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998890924295808	WITHOUT_CLASSIFICATION	1.1090757041915484E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398530603931	WITHOUT_CLASSIFICATION	6.0146939607001406E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915135883772	WITHOUT_CLASSIFICATION	8.486411622801025E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999559060989907	WITHOUT_CLASSIFICATION	4.4093901009301876E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999099874951001	WITHOUT_CLASSIFICATION	9.001250489992605E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997878604953363	WITHOUT_CLASSIFICATION	2.1213950466369706E-4	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9997149763339094	WITHOUT_CLASSIFICATION	2.8502366609058316E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999618520254026	WITHOUT_CLASSIFICATION	3.8147974597429926E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999455433046852	WITHOUT_CLASSIFICATION	5.445669531477377E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9983188869803967	WITHOUT_CLASSIFICATION	0.001681113019603241	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999374926658254	WITHOUT_CLASSIFICATION	6.250733417459109E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998252179805126	WITHOUT_CLASSIFICATION	1.7478201948735816E-4	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995326463297213	WITHOUT_CLASSIFICATION	4.6735367027876977E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994460069437623	WITHOUT_CLASSIFICATION	5.539930562377556E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998187640192181	WITHOUT_CLASSIFICATION	1.812359807819557E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999104854655451	WITHOUT_CLASSIFICATION	8.951453445487896E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9994665417589407	WITHOUT_CLASSIFICATION	5.334582410593914E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997755796319061	WITHOUT_CLASSIFICATION	2.244203680938353E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997755796319061	WITHOUT_CLASSIFICATION	2.244203680938353E-4	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997823344328327	WITHOUT_CLASSIFICATION	2.1766556716736214E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999991757281014	WITHOUT_CLASSIFICATION	8.242718985913814E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997255349766508	WITHOUT_CLASSIFICATION	2.744650233492337E-4	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9973838714334328	WITHOUT_CLASSIFICATION	0.0026161285665671783	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9998597024573195	WITHOUT_CLASSIFICATION	1.402975426806222E-4	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999598491681327	WITHOUT_CLASSIFICATION	4.015083186721154E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999721133456165	WITHOUT_CLASSIFICATION	2.7886654383495162E-5	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999984425936859	WITHOUT_CLASSIFICATION	1.557406314095564E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999506386519146	WITHOUT_CLASSIFICATION	4.9361348085440805E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999033386762151	WITHOUT_CLASSIFICATION	9.666132378490563E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186737627428	WITHOUT_CLASSIFICATION	8.13262372572179E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9996009617231616	WITHOUT_CLASSIFICATION	3.9903827683838533E-4	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999920002814902	WITHOUT_CLASSIFICATION	7.999718509926372E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9996198263005667	WITHOUT_CLASSIFICATION	3.80173699433411E-4	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9997482279847879	WITHOUT_CLASSIFICATION	2.51772015212109E-4	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999896219104396	WITHOUT_CLASSIFICATION	1.0378089560379588E-5	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.99999449203417	WITHOUT_CLASSIFICATION	5.50796582995757E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999710826959071	WITHOUT_CLASSIFICATION	2.8917304092887608E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996351347499602	WITHOUT_CLASSIFICATION	3.648652500397634E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999730508763683	WITHOUT_CLASSIFICATION	2.6949123631701295E-4	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999361042003618	WITHOUT_CLASSIFICATION	6.389579963815374E-5	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9998073072254549	WITHOUT_CLASSIFICATION	1.9269277454504212E-4	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999745060571891	WITHOUT_CLASSIFICATION	2.5493942810867044E-5	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9988514766637612	WITHOUT_CLASSIFICATION	0.001148523336238749	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998646950585577	WITHOUT_CLASSIFICATION	1.353049414423672E-4	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998646950585577	WITHOUT_CLASSIFICATION	1.353049414423672E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999332671172991	WITHOUT_CLASSIFICATION	6.673288270088385E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998769743069577	WITHOUT_CLASSIFICATION	1.2302569304240541E-4	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998755947694825	WITHOUT_CLASSIFICATION	1.2440523051741094E-4	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999463372639302	WITHOUT_CLASSIFICATION	5.366273606984346E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999581946036328	WITHOUT_CLASSIFICATION	4.1805396367342306E-5	TEST
