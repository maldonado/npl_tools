//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999577394868226	WITHOUT_CLASSIFICATION	4.226051317726518E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9996519901793246	WITHOUT_CLASSIFICATION	3.4800982067536256E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999907015182342	WITHOUT_CLASSIFICATION	9.298481765764134E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999912904576114	WITHOUT_CLASSIFICATION	8.709542388538245E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999912904576114	WITHOUT_CLASSIFICATION	8.709542388538245E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999740906620112	WITHOUT_CLASSIFICATION	2.5909337988845918E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999969196556417	WITHOUT_CLASSIFICATION	3.0803443582964986E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999773307934475	WITHOUT_CLASSIFICATION	2.2669206552485808E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999961594268911	WITHOUT_CLASSIFICATION	3.840573108888231E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999440708728472	WITHOUT_CLASSIFICATION	5.592912715275171E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999440708728472	WITHOUT_CLASSIFICATION	5.592912715275171E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998956850908162	WITHOUT_CLASSIFICATION	1.0431490918388353E-4	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999964541100888	WITHOUT_CLASSIFICATION	3.545889911300872E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999793205733695	WITHOUT_CLASSIFICATION	2.0679426630515783E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997782854085672	WITHOUT_CLASSIFICATION	2.2171459143281882E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999893743956927	WITHOUT_CLASSIFICATION	1.062560430737082E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.999928677015691	WITHOUT_CLASSIFICATION	7.132298430907188E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.999617154358166	WITHOUT_CLASSIFICATION	3.828456418339083E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999883387559432	WITHOUT_CLASSIFICATION	1.1661244056859729E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999933289105609	WITHOUT_CLASSIFICATION	6.671089439054395E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999933289105609	WITHOUT_CLASSIFICATION	6.671089439054395E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999738008859206	WITHOUT_CLASSIFICATION	2.6199114079429904E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999284109689727	WITHOUT_CLASSIFICATION	7.15890310273493E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999855269625747	WITHOUT_CLASSIFICATION	1.4473037425297614E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999613183465317	WITHOUT_CLASSIFICATION	3.868165346829122E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999547098057678	WITHOUT_CLASSIFICATION	4.5290194232059556E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5803135754555916	WITHOUT_CLASSIFICATION	0.4196864245444084	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5803135754555916	WITHOUT_CLASSIFICATION	0.4196864245444084	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999716142589026	WITHOUT_CLASSIFICATION	2.838574109740755E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996168736697753	WITHOUT_CLASSIFICATION	3.831263302247595E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999969281247151	WITHOUT_CLASSIFICATION	3.071875284903178E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998837360772802	WITHOUT_CLASSIFICATION	1.1626392271988743E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999807890360527	WITHOUT_CLASSIFICATION	1.921096394740988E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968719159454	WITHOUT_CLASSIFICATION	3.1280840545975527E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999933588022637	WITHOUT_CLASSIFICATION	6.641197736300028E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999715914305818	WITHOUT_CLASSIFICATION	2.8408569418274542E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999385906220281	WITHOUT_CLASSIFICATION	6.140937797197865E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999385906220281	WITHOUT_CLASSIFICATION	6.140937797197865E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999420447636868	WITHOUT_CLASSIFICATION	5.795523631315498E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999665382691352	WITHOUT_CLASSIFICATION	3.346173086484899E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999611289751336	WITHOUT_CLASSIFICATION	3.8871024866405146E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999900367370277	WITHOUT_CLASSIFICATION	9.963262972355274E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999986635517042	WITHOUT_CLASSIFICATION	1.3364482958789178E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999998586974547	WITHOUT_CLASSIFICATION	1.4130254534275595E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999622522841943	WITHOUT_CLASSIFICATION	3.774771580570084E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999592479902281	WITHOUT_CLASSIFICATION	4.075200977199348E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999949004754686	WITHOUT_CLASSIFICATION	5.099524531394434E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999566492530123	WITHOUT_CLASSIFICATION	4.335074698767588E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999879503215224	WITHOUT_CLASSIFICATION	1.2049678477581791E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999933917319777	WITHOUT_CLASSIFICATION	6.60826802246875E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999898052518612	WITHOUT_CLASSIFICATION	1.0194748138845453E-5	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999889838064492	WITHOUT_CLASSIFICATION	1.101619355080252E-4	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999960946096681	WITHOUT_CLASSIFICATION	3.9053903319006515E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999892675383439	WITHOUT_CLASSIFICATION	1.073246165601045E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999950011881719	WITHOUT_CLASSIFICATION	4.998811828180451E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999920172358159	WITHOUT_CLASSIFICATION	7.982764184045749E-6	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999672581491219	WITHOUT_CLASSIFICATION	3.274185087811775E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999865350630156	WITHOUT_CLASSIFICATION	1.3464936984464386E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999533033738166	WITHOUT_CLASSIFICATION	4.6696626183485314E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999990009397126	WITHOUT_CLASSIFICATION	9.990602873962337E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979122108541	WITHOUT_CLASSIFICATION	2.0877891458761735E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999646333218056	WITHOUT_CLASSIFICATION	3.536667819431252E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999954359732269	WITHOUT_CLASSIFICATION	4.564026773112328E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999915884520487	WITHOUT_CLASSIFICATION	8.411547951394807E-6	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999987994558833	WITHOUT_CLASSIFICATION	1.200544116696605E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999980604545097	WITHOUT_CLASSIFICATION	1.939545490303732E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999932793610679	WITHOUT_CLASSIFICATION	6.720638932139152E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999267373684834	WITHOUT_CLASSIFICATION	7.326263151658595E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999992546026503	WITHOUT_CLASSIFICATION	7.453973497379544E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999950662985854	WITHOUT_CLASSIFICATION	4.93370141457174E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998652888402549	WITHOUT_CLASSIFICATION	1.347111597450368E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999709799715487	WITHOUT_CLASSIFICATION	2.902002845137725E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999867344184691	WITHOUT_CLASSIFICATION	1.3265581530932893E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999844136127786	WITHOUT_CLASSIFICATION	1.55863872214164E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999709799715487	WITHOUT_CLASSIFICATION	2.902002845137725E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999675013317	WITHOUT_CLASSIFICATION	3.2498668300380613E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999374714190632	WITHOUT_CLASSIFICATION	6.252858093675651E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999899651393119	WITHOUT_CLASSIFICATION	1.0034860687964832E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.999992261914113	WITHOUT_CLASSIFICATION	7.738085887115121E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999783204991399	WITHOUT_CLASSIFICATION	2.167950086012445E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999783204991399	WITHOUT_CLASSIFICATION	2.167950086012445E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999386036989358	WITHOUT_CLASSIFICATION	6.139630106421382E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999470796614238	WITHOUT_CLASSIFICATION	5.292033857629855E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999829031895668	WITHOUT_CLASSIFICATION	1.709681043319886E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999968308305416	WITHOUT_CLASSIFICATION	3.169169458460519E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999888380283622	WITHOUT_CLASSIFICATION	1.1161971637741514E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999846814349291	WITHOUT_CLASSIFICATION	1.5318565070865785E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999959589529287	WITHOUT_CLASSIFICATION	4.041047071252781E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999911050121504	WITHOUT_CLASSIFICATION	8.894987849571615E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999891931967745	WITHOUT_CLASSIFICATION	1.0806803225461916E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999942472978881	WITHOUT_CLASSIFICATION	5.752702111915251E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999942472978881	WITHOUT_CLASSIFICATION	5.752702111915251E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937790510804	WITHOUT_CLASSIFICATION	6.22094891954262E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999997266092956	WITHOUT_CLASSIFICATION	2.7339070440933184E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999989604856936	WITHOUT_CLASSIFICATION	1.0395143064008104E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999942472978881	WITHOUT_CLASSIFICATION	5.752702111915251E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937790510804	WITHOUT_CLASSIFICATION	6.22094891954262E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937790510804	WITHOUT_CLASSIFICATION	6.22094891954262E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999909810777244	WITHOUT_CLASSIFICATION	9.018922275445839E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999812611042322	WITHOUT_CLASSIFICATION	1.8738895767839013E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999845525287246	WITHOUT_CLASSIFICATION	1.5447471275347848E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999356618631107	WITHOUT_CLASSIFICATION	6.433813688924647E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999812920220553	WITHOUT_CLASSIFICATION	1.8707977944718755E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999812920220553	WITHOUT_CLASSIFICATION	1.8707977944718755E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999890090084931	WITHOUT_CLASSIFICATION	1.0990991506895344E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997265282061267	WITHOUT_CLASSIFICATION	2.7347179387334836E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.99999234889091	WITHOUT_CLASSIFICATION	7.651109089936425E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999918361058114	WITHOUT_CLASSIFICATION	8.163894188612457E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999918361058114	WITHOUT_CLASSIFICATION	8.163894188612457E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997324584706322	WITHOUT_CLASSIFICATION	2.675415293677512E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999984620815944	WITHOUT_CLASSIFICATION	1.537918405601818E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9978026771040944	WITHOUT_CLASSIFICATION	0.002197322895905606	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999950508200195	WITHOUT_CLASSIFICATION	4.949179980564335E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9996196167062743	WITHOUT_CLASSIFICATION	3.8038329372580137E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999928894041334	WITHOUT_CLASSIFICATION	7.110595866607395E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999751135787566	WITHOUT_CLASSIFICATION	2.4886421243326125E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9992238108348287	WITHOUT_CLASSIFICATION	7.761891651712815E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9978026771040944	WITHOUT_CLASSIFICATION	0.002197322895905606	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9998601800464901	WITHOUT_CLASSIFICATION	1.398199535098042E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960866897235	WITHOUT_CLASSIFICATION	3.9133102763870965E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960866897235	WITHOUT_CLASSIFICATION	3.9133102763870965E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9998177105185868	WITHOUT_CLASSIFICATION	1.8228948141317785E-4	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998420074119109	WITHOUT_CLASSIFICATION	1.579925880892293E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998479071847981	WITHOUT_CLASSIFICATION	1.5209281520190717E-4	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9993980859088467	WITHOUT_CLASSIFICATION	6.01914091153269E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9992647593757	WITHOUT_CLASSIFICATION	7.352406243000196E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998650348695048	WITHOUT_CLASSIFICATION	1.3496513049509712E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999980319003263	WITHOUT_CLASSIFICATION	1.968099673730922E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999991999151505	WITHOUT_CLASSIFICATION	8.000848494971978E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999981248635141	WITHOUT_CLASSIFICATION	1.875136485944027E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999981248635141	WITHOUT_CLASSIFICATION	1.875136485944027E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999577394868226	WITHOUT_CLASSIFICATION	4.226051317726518E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999875308503609	WITHOUT_CLASSIFICATION	1.2469149639039036E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999764054179429	WITHOUT_CLASSIFICATION	2.3594582057140805E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999980904467358	WITHOUT_CLASSIFICATION	1.909553264209541E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999826874549691	WITHOUT_CLASSIFICATION	1.7312545030886616E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999937493797857	WITHOUT_CLASSIFICATION	6.250620214233377E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999685007754557	WITHOUT_CLASSIFICATION	3.149922454422415E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9998404158792988	WITHOUT_CLASSIFICATION	1.595841207010681E-4	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999285547280886	WITHOUT_CLASSIFICATION	7.144527191129299E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999855447005265	WITHOUT_CLASSIFICATION	1.4455299473372287E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999937493797857	WITHOUT_CLASSIFICATION	6.250620214233377E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9997173725193735	WITHOUT_CLASSIFICATION	2.8262748062644227E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999910297583678	WITHOUT_CLASSIFICATION	8.97024163211235E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999810556559543	WITHOUT_CLASSIFICATION	1.8944344045608077E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999901285934134	WITHOUT_CLASSIFICATION	9.871406586643914E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999909320667553	WITHOUT_CLASSIFICATION	9.067933244750587E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999912904576114	WITHOUT_CLASSIFICATION	8.709542388538245E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999907704738648	WITHOUT_CLASSIFICATION	9.229526135235527E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999944499934565	WITHOUT_CLASSIFICATION	5.550006543476725E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999873274305631	WITHOUT_CLASSIFICATION	1.2672569437061721E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999898157483296	WITHOUT_CLASSIFICATION	1.0184251670444685E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999933289046302	WITHOUT_CLASSIFICATION	6.671095369747526E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999813874761189	WITHOUT_CLASSIFICATION	1.861252388107347E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999819771292744	WITHOUT_CLASSIFICATION	1.802287072560297E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999918426316303	WITHOUT_CLASSIFICATION	8.1573683697279E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999917388270975	WITHOUT_CLASSIFICATION	8.261172902647933E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999898957216814	WITHOUT_CLASSIFICATION	1.010427831853924E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999285547280886	WITHOUT_CLASSIFICATION	7.144527191129299E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999933289046302	WITHOUT_CLASSIFICATION	6.671095369747526E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999740906620112	WITHOUT_CLASSIFICATION	2.5909337988845918E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999855951735096	WITHOUT_CLASSIFICATION	1.4404826490500548E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999300055396341	WITHOUT_CLASSIFICATION	6.999446036589822E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999980368211684	WITHOUT_CLASSIFICATION	1.963178831597839E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999933703272165	WITHOUT_CLASSIFICATION	6.629672783546222E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999799169809196	WITHOUT_CLASSIFICATION	2.008301908030492E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9997635193720446	WITHOUT_CLASSIFICATION	2.3648062795545574E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999291315196304	WITHOUT_CLASSIFICATION	7.086848036965597E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999291315196304	WITHOUT_CLASSIFICATION	7.086848036965597E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999823301075883	WITHOUT_CLASSIFICATION	1.7669892411706124E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999947992340842	WITHOUT_CLASSIFICATION	5.200765915823942E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997416694993834	WITHOUT_CLASSIFICATION	2.5833050061668865E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999740239402374	WITHOUT_CLASSIFICATION	2.5976059762566142E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999838808432422	WITHOUT_CLASSIFICATION	1.6119156757775752E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999887466514199	WITHOUT_CLASSIFICATION	1.12533485799858E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999902332322514	WITHOUT_CLASSIFICATION	9.766767748493446E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999969196556417	WITHOUT_CLASSIFICATION	3.0803443582964986E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999935213133585	WITHOUT_CLASSIFICATION	6.4786866413943544E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999935213133585	WITHOUT_CLASSIFICATION	6.4786866413943544E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999935213133585	WITHOUT_CLASSIFICATION	6.4786866413943544E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999872802027542	WITHOUT_CLASSIFICATION	1.2719797245856673E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999935213133585	WITHOUT_CLASSIFICATION	6.4786866413943544E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999990628583971	WITHOUT_CLASSIFICATION	9.371416028914268E-6	TEST
// int	WITHOUT_CLASSIFICATION	0.9999333414807586	WITHOUT_CLASSIFICATION	6.665851924139968E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999633843721463	WITHOUT_CLASSIFICATION	3.661562785380795E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999285547280886	WITHOUT_CLASSIFICATION	7.144527191129299E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999933289046302	WITHOUT_CLASSIFICATION	6.671095369747526E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999933289046302	WITHOUT_CLASSIFICATION	6.671095369747526E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999787046932829	WITHOUT_CLASSIFICATION	2.1295306717027195E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999965979957044	WITHOUT_CLASSIFICATION	3.4020042956318673E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999849076675367	WITHOUT_CLASSIFICATION	1.5092332463245004E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999922799500734	WITHOUT_CLASSIFICATION	7.720049926594042E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999961594268911	WITHOUT_CLASSIFICATION	3.840573108888231E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999961594268911	WITHOUT_CLASSIFICATION	3.840573108888231E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999904753966954	WITHOUT_CLASSIFICATION	9.524603304632086E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999940597968588	WITHOUT_CLASSIFICATION	5.940203141062437E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9998432452064661	WITHOUT_CLASSIFICATION	1.567547935340512E-4	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999336329283504	WITHOUT_CLASSIFICATION	6.636707164960432E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999552455488111	WITHOUT_CLASSIFICATION	4.475445118897303E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999288692806566	WITHOUT_CLASSIFICATION	7.113071934331246E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999440708728472	WITHOUT_CLASSIFICATION	5.592912715275171E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999285017932363	WITHOUT_CLASSIFICATION	7.149820676363609E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999285017932363	WITHOUT_CLASSIFICATION	7.149820676363609E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998956850908162	WITHOUT_CLASSIFICATION	1.0431490918388353E-4	TEST
// long	WITHOUT_CLASSIFICATION	0.9998956850908162	WITHOUT_CLASSIFICATION	1.0431490918388353E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999996017061571	WITHOUT_CLASSIFICATION	3.982938428923919E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999996017061571	WITHOUT_CLASSIFICATION	3.982938428923919E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690579187963	WITHOUT_CLASSIFICATION	3.094208120366031E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690579187963	WITHOUT_CLASSIFICATION	3.094208120366031E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999961594268911	WITHOUT_CLASSIFICATION	3.840573108888231E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999440708728472	WITHOUT_CLASSIFICATION	5.592912715275171E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999285017932363	WITHOUT_CLASSIFICATION	7.149820676363609E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999285017932363	WITHOUT_CLASSIFICATION	7.149820676363609E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998956850908162	WITHOUT_CLASSIFICATION	1.0431490918388353E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999996017061571	WITHOUT_CLASSIFICATION	3.982938428923919E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999996017061571	WITHOUT_CLASSIFICATION	3.982938428923919E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690579187963	WITHOUT_CLASSIFICATION	3.094208120366031E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999827267286153	WITHOUT_CLASSIFICATION	1.7273271384721975E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999260654466186	WITHOUT_CLASSIFICATION	7.393455338141174E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999747764096512	WITHOUT_CLASSIFICATION	2.5223590348864332E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999548192836916	WITHOUT_CLASSIFICATION	4.5180716308366725E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999383263904401	WITHOUT_CLASSIFICATION	6.167360955988573E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999284234332692	WITHOUT_CLASSIFICATION	7.157656673087215E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997214167774441	WITHOUT_CLASSIFICATION	2.7858322255595115E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.99995295315558	WITHOUT_CLASSIFICATION	4.704684441990857E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9996940671952256	WITHOUT_CLASSIFICATION	3.05932804774419E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999869762835395	WITHOUT_CLASSIFICATION	1.3023716460488277E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999725324341922	WITHOUT_CLASSIFICATION	2.746756580779708E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999782410868703	WITHOUT_CLASSIFICATION	2.175891312978648E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999386036989358	WITHOUT_CLASSIFICATION	6.139630106421382E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999284234332692	WITHOUT_CLASSIFICATION	7.157656673087215E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993359853245875	WITHOUT_CLASSIFICATION	6.64014675412627E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993359853245875	WITHOUT_CLASSIFICATION	6.64014675412627E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999965105561913	WITHOUT_CLASSIFICATION	3.489443808711481E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999739038767717	WITHOUT_CLASSIFICATION	2.609612322824945E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999739038767717	WITHOUT_CLASSIFICATION	2.609612322824945E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9996984408900189	WITHOUT_CLASSIFICATION	3.015591099811644E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998841463267376	WITHOUT_CLASSIFICATION	1.1585367326238207E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9981543376701739	WITHOUT_CLASSIFICATION	0.001845662329826027	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999764152783402	WITHOUT_CLASSIFICATION	2.358472165972448E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999764152783402	WITHOUT_CLASSIFICATION	2.358472165972448E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999893743956927	WITHOUT_CLASSIFICATION	1.062560430737082E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999967560193526	WITHOUT_CLASSIFICATION	3.243980647520276E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999967560193526	WITHOUT_CLASSIFICATION	3.243980647520276E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999015136749231	WITHOUT_CLASSIFICATION	9.848632507685189E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999828017055115	WITHOUT_CLASSIFICATION	1.7198294488515208E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999883387559432	WITHOUT_CLASSIFICATION	1.1661244056859729E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9833439023031413	WITHOUT_CLASSIFICATION	0.01665609769685883	TEST
// ID	WITHOUT_CLASSIFICATION	0.999928677015691	WITHOUT_CLASSIFICATION	7.132298430907188E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999983506738452	WITHOUT_CLASSIFICATION	1.6493261547956574E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999565593052582	WITHOUT_CLASSIFICATION	4.344069474176728E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997030034600354	WITHOUT_CLASSIFICATION	2.9699653996454015E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999728864198368	WITHOUT_CLASSIFICATION	2.711358016316601E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999613183465317	WITHOUT_CLASSIFICATION	3.868165346829122E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999993063180107	WITHOUT_CLASSIFICATION	6.936819892661997E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999283915957946	WITHOUT_CLASSIFICATION	7.160840420540722E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999787044330023	WITHOUT_CLASSIFICATION	2.1295566997732306E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999787072557487	WITHOUT_CLASSIFICATION	2.129274425129834E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999933387339535	WITHOUT_CLASSIFICATION	6.661266046510111E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999883387559432	WITHOUT_CLASSIFICATION	1.1661244056859729E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999953763020283	WITHOUT_CLASSIFICATION	4.623697971709724E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.999993495181082	WITHOUT_CLASSIFICATION	6.504818917965788E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999284115733328	WITHOUT_CLASSIFICATION	7.158842666728402E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999933387339535	WITHOUT_CLASSIFICATION	6.661266046510111E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999953763020283	WITHOUT_CLASSIFICATION	4.623697971709724E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999284115733328	WITHOUT_CLASSIFICATION	7.158842666728402E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999326920907184	WITHOUT_CLASSIFICATION	6.730790928159855E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999326920907184	WITHOUT_CLASSIFICATION	6.730790928159855E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999933289105609	WITHOUT_CLASSIFICATION	6.671089439054395E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999940168260568	WITHOUT_CLASSIFICATION	5.983173943132345E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996935822292347	WITHOUT_CLASSIFICATION	3.064177707653759E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999680599899534	WITHOUT_CLASSIFICATION	3.194001004647876E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999885436059183	WITHOUT_CLASSIFICATION	1.1456394081686329E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999968296005115	WITHOUT_CLASSIFICATION	3.170399488491705E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999786278471746	WITHOUT_CLASSIFICATION	2.137215282549893E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999965739550782	WITHOUT_CLASSIFICATION	3.42604492182311E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999968296005115	WITHOUT_CLASSIFICATION	3.170399488491705E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999284109689727	WITHOUT_CLASSIFICATION	7.15890310273493E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999326977712457	WITHOUT_CLASSIFICATION	6.730222875429188E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999933387339535	WITHOUT_CLASSIFICATION	6.661266046510111E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999854518015872	WITHOUT_CLASSIFICATION	1.4548198412843713E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999935343389613	WITHOUT_CLASSIFICATION	6.465661038573217E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996606854875865	WITHOUT_CLASSIFICATION	3.393145124136022E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999941956794631	WITHOUT_CLASSIFICATION	5.804320536902721E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999514547526402	WITHOUT_CLASSIFICATION	4.8545247359787015E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999990527548269	WITHOUT_CLASSIFICATION	9.472451730364941E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999533597717656	WITHOUT_CLASSIFICATION	4.6640228234426164E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999736190976212	WITHOUT_CLASSIFICATION	2.6380902378887824E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999993354792955	WITHOUT_CLASSIFICATION	6.645207044976039E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999787046932829	WITHOUT_CLASSIFICATION	2.1295306717027195E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999683815328668	WITHOUT_CLASSIFICATION	3.1618467133137166E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999613183465317	WITHOUT_CLASSIFICATION	3.868165346829122E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999794907038428	WITHOUT_CLASSIFICATION	2.0509296157147552E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9996999559385412	WITHOUT_CLASSIFICATION	3.000440614588402E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999938091915174	WITHOUT_CLASSIFICATION	6.190808482634985E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999972096598283	WITHOUT_CLASSIFICATION	2.7903401716197477E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999972188416906	WITHOUT_CLASSIFICATION	2.7811583094766144E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999740154783281	WITHOUT_CLASSIFICATION	2.598452167191476E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999897257634935	WITHOUT_CLASSIFICATION	1.0274236506463345E-5	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999585761492008	WITHOUT_CLASSIFICATION	4.142385079922799E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999810678810833	WITHOUT_CLASSIFICATION	1.893211891671043E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998284348925199	WITHOUT_CLASSIFICATION	1.715651074801035E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999546591523689	WITHOUT_CLASSIFICATION	4.534084763119323E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999546591523689	WITHOUT_CLASSIFICATION	4.534084763119323E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999802440816397	WITHOUT_CLASSIFICATION	1.9755918360303922E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999798964348429	WITHOUT_CLASSIFICATION	2.010356515718178E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999078806060853	WITHOUT_CLASSIFICATION	9.211939391478452E-5	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999978913862469	WITHOUT_CLASSIFICATION	2.108613753103969E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998024439115634	WITHOUT_CLASSIFICATION	1.9755608843667394E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998090882385058	WITHOUT_CLASSIFICATION	1.9091176149432624E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999840263737215	WITHOUT_CLASSIFICATION	1.5973626278417507E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9989264175865328	WITHOUT_CLASSIFICATION	0.0010735824134671902	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997716735247548	WITHOUT_CLASSIFICATION	2.2832647524514429E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999653367262562	WITHOUT_CLASSIFICATION	3.4663273743889484E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999879856325722	WITHOUT_CLASSIFICATION	1.2014367427892847E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999749446617978	WITHOUT_CLASSIFICATION	2.505533820211075E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998999531349202	WITHOUT_CLASSIFICATION	1.0004686507985395E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760101104853	WITHOUT_CLASSIFICATION	2.3989889514667802E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758347462272	WITHOUT_CLASSIFICATION	2.4165253772860395E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999978686066489	WITHOUT_CLASSIFICATION	2.1313933511070783E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999778078128895	WITHOUT_CLASSIFICATION	2.2192187110567336E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999377755483164	WITHOUT_CLASSIFICATION	6.222445168362694E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999947885668112	WITHOUT_CLASSIFICATION	5.211433188786928E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999420438108382	WITHOUT_CLASSIFICATION	5.7956189161786406E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999420438108382	WITHOUT_CLASSIFICATION	5.7956189161786406E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999380425042685	WITHOUT_CLASSIFICATION	6.195749573140428E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999380425042685	WITHOUT_CLASSIFICATION	6.195749573140428E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999810678810833	WITHOUT_CLASSIFICATION	1.893211891671043E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9996466693908846	WITHOUT_CLASSIFICATION	3.5333060911535874E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9988975765374686	WITHOUT_CLASSIFICATION	0.0011024234625314623	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998957814235427	WITHOUT_CLASSIFICATION	1.0421857645720068E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9988975765374686	WITHOUT_CLASSIFICATION	0.0011024234625314623	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998957814235427	WITHOUT_CLASSIFICATION	1.0421857645720068E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999655117517473	WITHOUT_CLASSIFICATION	3.448824825269515E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998732694457299	WITHOUT_CLASSIFICATION	1.267305542701839E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999984875477973	WITHOUT_CLASSIFICATION	1.5124522026699446E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999960399828859	WITHOUT_CLASSIFICATION	3.960017114097628E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996085905682559	WITHOUT_CLASSIFICATION	3.914094317441133E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9991248975002821	WITHOUT_CLASSIFICATION	8.751024997178689E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999280320884945	WITHOUT_CLASSIFICATION	7.196791150557123E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9992874156718063	WITHOUT_CLASSIFICATION	7.125843281937327E-4	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998623787496256	WITHOUT_CLASSIFICATION	1.3762125037451E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999924268307048	WITHOUT_CLASSIFICATION	7.573169295344967E-6	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999875766343058	WITHOUT_CLASSIFICATION	1.2423365694184844E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999937366402645	WITHOUT_CLASSIFICATION	6.263359735449353E-6	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999956463568163	WITHOUT_CLASSIFICATION	4.3536431837830715E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998204780186669	WITHOUT_CLASSIFICATION	1.7952198133305153E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998204780186669	WITHOUT_CLASSIFICATION	1.7952198133305153E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992748007850906	WITHOUT_CLASSIFICATION	7.251992149093924E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992748007850906	WITHOUT_CLASSIFICATION	7.251992149093924E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999982324652343	WITHOUT_CLASSIFICATION	1.7675347656766525E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999655117517473	WITHOUT_CLASSIFICATION	3.448824825269515E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999980378117237	WITHOUT_CLASSIFICATION	1.9621882763120094E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999885270319756	WITHOUT_CLASSIFICATION	1.1472968024402703E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9995216241687584	WITHOUT_CLASSIFICATION	4.7837583124153753E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993962937211162	WITHOUT_CLASSIFICATION	6.037062788837776E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9928655464887196	WITHOUT_CLASSIFICATION	0.007134453511280503	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999655117517473	WITHOUT_CLASSIFICATION	3.448824825269515E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993962937211162	WITHOUT_CLASSIFICATION	6.037062788837776E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9928655464887196	WITHOUT_CLASSIFICATION	0.007134453511280503	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9994960564416854	WITHOUT_CLASSIFICATION	5.039435583146501E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999934209395642	WITHOUT_CLASSIFICATION	6.579060435743145E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999462830146606	WITHOUT_CLASSIFICATION	5.371698533933006E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999655117517473	WITHOUT_CLASSIFICATION	3.448824825269515E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999655117517473	WITHOUT_CLASSIFICATION	3.448824825269515E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999966180069332	WITHOUT_CLASSIFICATION	3.381993066952169E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999965726818116	WITHOUT_CLASSIFICATION	3.427318188408373E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999882467355417	WITHOUT_CLASSIFICATION	1.1753264458246903E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999901156930558	WITHOUT_CLASSIFICATION	9.884306944145128E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998677557007264	WITHOUT_CLASSIFICATION	1.3224429927366613E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999987499584928	WITHOUT_CLASSIFICATION	1.250041507155433E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998898985359072	WITHOUT_CLASSIFICATION	1.1010146409290981E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999902374105523	WITHOUT_CLASSIFICATION	9.762589447800751E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999925872837772	WITHOUT_CLASSIFICATION	7.412716222878807E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999801350213658	WITHOUT_CLASSIFICATION	1.986497863418982E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999882527356253	WITHOUT_CLASSIFICATION	1.1747264374785367E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999876223692866	WITHOUT_CLASSIFICATION	1.2377630713397876E-5	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999977842785451	WITHOUT_CLASSIFICATION	2.2157214548978875E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999829069835265	WITHOUT_CLASSIFICATION	1.7093016473404435E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685977199174	WITHOUT_CLASSIFICATION	3.140228008261551E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995211889869448	WITHOUT_CLASSIFICATION	4.7881101305525246E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998837360772802	WITHOUT_CLASSIFICATION	1.1626392271988743E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998324285557062	WITHOUT_CLASSIFICATION	1.67571444293765E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997697429923433	WITHOUT_CLASSIFICATION	2.3025700765673802E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998957814235427	WITHOUT_CLASSIFICATION	1.0421857645720068E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997447708750009	WITHOUT_CLASSIFICATION	2.552291249990827E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998837360772802	WITHOUT_CLASSIFICATION	1.1626392271988743E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993575917047153	WITHOUT_CLASSIFICATION	6.424082952847508E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996831379717389	WITHOUT_CLASSIFICATION	3.1686202826117075E-4	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9964948567812281	WITHOUT_CLASSIFICATION	0.0035051432187719993	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999457032638426	WITHOUT_CLASSIFICATION	5.429673615742151E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999382205932937	WITHOUT_CLASSIFICATION	6.1779406706286E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999921157375309	WITHOUT_CLASSIFICATION	7.884262469168796E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999980422673605	WITHOUT_CLASSIFICATION	1.9577326395111773E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999983277917078	WITHOUT_CLASSIFICATION	1.6722082922138196E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999973734324229	WITHOUT_CLASSIFICATION	2.6265675770991266E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999527890569561	WITHOUT_CLASSIFICATION	4.721094304391789E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999711114872963	WITHOUT_CLASSIFICATION	2.888851270364761E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999688168903264	WITHOUT_CLASSIFICATION	3.118310967368102E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999969460235155	WITHOUT_CLASSIFICATION	3.053976484530676E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923433079706	WITHOUT_CLASSIFICATION	7.656692029411424E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997128509499328	WITHOUT_CLASSIFICATION	2.871490500672529E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999946348084711	WITHOUT_CLASSIFICATION	5.3651915290306516E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999490899056308	WITHOUT_CLASSIFICATION	5.091009436916752E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927482089536	WITHOUT_CLASSIFICATION	7.251791046442948E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999641079971415	WITHOUT_CLASSIFICATION	3.5892002858426326E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.99985016682762	WITHOUT_CLASSIFICATION	1.4983317238002476E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999997220817244	WITHOUT_CLASSIFICATION	2.779182755992784E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860024583035	WITHOUT_CLASSIFICATION	1.399754169646716E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859040601085	WITHOUT_CLASSIFICATION	1.4095939891610384E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785054253028	WITHOUT_CLASSIFICATION	2.1494574697179403E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969135849028	WITHOUT_CLASSIFICATION	3.086415097198807E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999674121660819	WITHOUT_CLASSIFICATION	3.2587833918063447E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999622208969844	WITHOUT_CLASSIFICATION	3.777910301562141E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787109736897	WITHOUT_CLASSIFICATION	2.1289026310184265E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810545601721	WITHOUT_CLASSIFICATION	1.8945439827944423E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778657767665	WITHOUT_CLASSIFICATION	2.213422323352646E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880373900362	WITHOUT_CLASSIFICATION	1.196260996379857E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977616281931	WITHOUT_CLASSIFICATION	2.2383718068961987E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776348682297	WITHOUT_CLASSIFICATION	2.236513177030736E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999793247692417	WITHOUT_CLASSIFICATION	2.067523075834767E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686229093893	WITHOUT_CLASSIFICATION	3.137709061071786E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999874391810907	WITHOUT_CLASSIFICATION	1.2560818909331703E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940210846123	WITHOUT_CLASSIFICATION	5.978915387629033E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999995872234687	WITHOUT_CLASSIFICATION	4.127765313786097E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990032749638055	WITHOUT_CLASSIFICATION	9.967250361944773E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998858125046981	WITHOUT_CLASSIFICATION	1.1418749530192646E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9994960564416854	WITHOUT_CLASSIFICATION	5.039435583146501E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999787109224365	WITHOUT_CLASSIFICATION	2.1289077563507333E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999792113588639	WITHOUT_CLASSIFICATION	2.0788641136104894E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999993367467657	WITHOUT_CLASSIFICATION	6.632532342976402E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999971156544484	WITHOUT_CLASSIFICATION	2.8843455517116117E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999823236182611	WITHOUT_CLASSIFICATION	1.7676381738817275E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999978245591424	WITHOUT_CLASSIFICATION	2.175440857598091E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999870027629572	WITHOUT_CLASSIFICATION	1.2997237042886033E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714373498828	WITHOUT_CLASSIFICATION	2.8562650117205714E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736179991626	WITHOUT_CLASSIFICATION	2.638200083728932E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950683154922	WITHOUT_CLASSIFICATION	4.931684507788934E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714583658201	WITHOUT_CLASSIFICATION	2.854163417991117E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998598425111515	WITHOUT_CLASSIFICATION	1.4015748884859812E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999476633475537	WITHOUT_CLASSIFICATION	5.2336652446328276E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999870346660881	WITHOUT_CLASSIFICATION	1.2965333911891781E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999859321320571	WITHOUT_CLASSIFICATION	1.4067867943012566E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772638479189	WITHOUT_CLASSIFICATION	2.2736152081159034E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999749706612429	WITHOUT_CLASSIFICATION	2.5029338757173832E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.99998352381803	WITHOUT_CLASSIFICATION	1.6476181970011196E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999794882492197	WITHOUT_CLASSIFICATION	2.051175078038709E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999937998159889	WITHOUT_CLASSIFICATION	6.200184011095917E-6	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999141780657621	WITHOUT_CLASSIFICATION	8.582193423786656E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999770524648871	WITHOUT_CLASSIFICATION	2.294753511287445E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999764585523652	WITHOUT_CLASSIFICATION	2.3541447634895846E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999821311605624	WITHOUT_CLASSIFICATION	1.7868839437538556E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990032749638055	WITHOUT_CLASSIFICATION	9.967250361944773E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999971698114067	WITHOUT_CLASSIFICATION	2.830188593328893E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999942177397396	WITHOUT_CLASSIFICATION	5.782260260405835E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999874789731152	WITHOUT_CLASSIFICATION	1.2521026884655718E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940210846123	WITHOUT_CLASSIFICATION	5.978915387629033E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999871534590691	WITHOUT_CLASSIFICATION	1.2846540930863338E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9993402519026162	WITHOUT_CLASSIFICATION	6.597480973838587E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999827876378065	WITHOUT_CLASSIFICATION	1.7212362193548578E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999974462047669	WITHOUT_CLASSIFICATION	2.553795233094929E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999368046733547	WITHOUT_CLASSIFICATION	6.319532664536784E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999686723826942	WITHOUT_CLASSIFICATION	3.132761730584689E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999706783822886	WITHOUT_CLASSIFICATION	2.9321617711432385E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999729004011892	WITHOUT_CLASSIFICATION	2.709959881074949E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999785125075369	WITHOUT_CLASSIFICATION	2.1487492463095516E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996267325274707	WITHOUT_CLASSIFICATION	3.7326747252930956E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999713288555893	WITHOUT_CLASSIFICATION	2.8671144410848108E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9994960564416854	WITHOUT_CLASSIFICATION	5.039435583146501E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940210846123	WITHOUT_CLASSIFICATION	5.978915387629033E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999804077423349	WITHOUT_CLASSIFICATION	1.959225766512915E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998600822371315	WITHOUT_CLASSIFICATION	1.3991776286838986E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999949657866921	WITHOUT_CLASSIFICATION	5.034213307800616E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.99988142497751	WITHOUT_CLASSIFICATION	1.185750224901132E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999681027395573	WITHOUT_CLASSIFICATION	3.189726044275339E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999993437102018	WITHOUT_CLASSIFICATION	6.562897981921541E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999959320265305	WITHOUT_CLASSIFICATION	4.067973469490872E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999532861337967	WITHOUT_CLASSIFICATION	4.6713866203203496E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.999617154358166	WITHOUT_CLASSIFICATION	3.828456418339083E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999418596876851	WITHOUT_CLASSIFICATION	5.814031231493057E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998144490079132	WITHOUT_CLASSIFICATION	1.8555099208686018E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940210846123	WITHOUT_CLASSIFICATION	5.978915387629033E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990032749638055	WITHOUT_CLASSIFICATION	9.967250361944773E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999465630204382	WITHOUT_CLASSIFICATION	5.343697956185188E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999967837321564	WITHOUT_CLASSIFICATION	3.2162678436677236E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987393650473081	WITHOUT_CLASSIFICATION	0.001260634952691925	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990032749638055	WITHOUT_CLASSIFICATION	9.967250361944773E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999543208800798	WITHOUT_CLASSIFICATION	4.5679119920119354E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999949657866921	WITHOUT_CLASSIFICATION	5.034213307800616E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999727852020396	WITHOUT_CLASSIFICATION	2.7214797960392693E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9960160582641505	WITHOUT_CLASSIFICATION	0.003983941735849479	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999693044871311	WITHOUT_CLASSIFICATION	3.069551286891062E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999368046733547	WITHOUT_CLASSIFICATION	6.319532664536784E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999686723826942	WITHOUT_CLASSIFICATION	3.132761730584689E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999706783822886	WITHOUT_CLASSIFICATION	2.9321617711432385E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999894854921483	WITHOUT_CLASSIFICATION	1.0514507851818514E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999770271949011	WITHOUT_CLASSIFICATION	2.297280509890923E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999590390768501	WITHOUT_CLASSIFICATION	4.0960923149833304E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999939897121013	WITHOUT_CLASSIFICATION	6.0102878987176E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999735121035924	WITHOUT_CLASSIFICATION	2.648789640755781E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990032749638055	WITHOUT_CLASSIFICATION	9.967250361944773E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999729004011892	WITHOUT_CLASSIFICATION	2.709959881074949E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999785125075369	WITHOUT_CLASSIFICATION	2.1487492463095516E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959716397554	WITHOUT_CLASSIFICATION	4.028360244603306E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962011317816	WITHOUT_CLASSIFICATION	3.798868218476384E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999758708546443	WITHOUT_CLASSIFICATION	2.4129145355618115E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999798639848022	WITHOUT_CLASSIFICATION	2.013601519785275E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999734188064937	WITHOUT_CLASSIFICATION	2.6581193506342635E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999076447403711	WITHOUT_CLASSIFICATION	9.235525962881601E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998882010925078	WITHOUT_CLASSIFICATION	1.1179890749222255E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999506480311318	WITHOUT_CLASSIFICATION	4.935196886828085E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999688485416457	WITHOUT_CLASSIFICATION	3.115145835432301E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999787046932829	WITHOUT_CLASSIFICATION	2.1295306717027195E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810545601721	WITHOUT_CLASSIFICATION	1.8945439827944423E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999787046932829	WITHOUT_CLASSIFICATION	2.1295306717027195E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999821975896116	WITHOUT_CLASSIFICATION	1.7802410388478398E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999719658524897	WITHOUT_CLASSIFICATION	2.803414751024859E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782296263209	WITHOUT_CLASSIFICATION	2.1770373679071593E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999989751213467	WITHOUT_CLASSIFICATION	1.0248786533023127E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999380808912993	WITHOUT_CLASSIFICATION	6.191910870064041E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778657767665	WITHOUT_CLASSIFICATION	2.213422323352646E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776159437039	WITHOUT_CLASSIFICATION	2.238405629609695E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999937998159889	WITHOUT_CLASSIFICATION	6.200184011095917E-6	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999735836614815	WITHOUT_CLASSIFICATION	2.641633851850177E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.99998742336617	WITHOUT_CLASSIFICATION	1.2576633830148903E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999864453310886	WITHOUT_CLASSIFICATION	1.35546689114042E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9996324679721705	WITHOUT_CLASSIFICATION	3.6753202782948313E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999969959588745	WITHOUT_CLASSIFICATION	3.0040411255581997E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9993749681429669	WITHOUT_CLASSIFICATION	6.250318570331113E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999271115359067	WITHOUT_CLASSIFICATION	7.288846409327235E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999983277917078	WITHOUT_CLASSIFICATION	1.6722082922138196E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999808938613328	WITHOUT_CLASSIFICATION	1.9106138667145417E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999775057708535	WITHOUT_CLASSIFICATION	2.2494229146433743E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999887213749932	WITHOUT_CLASSIFICATION	1.12786250068484E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999803147448744	WITHOUT_CLASSIFICATION	1.9685255125678825E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999965149240183	WITHOUT_CLASSIFICATION	3.485075981545076E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999747115522121	WITHOUT_CLASSIFICATION	2.5288447787938618E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986865581331	WITHOUT_CLASSIFICATION	1.3134418669061003E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870010046111	WITHOUT_CLASSIFICATION	1.29989953887708E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999625439842509	WITHOUT_CLASSIFICATION	3.7456015749052685E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999726387285298	WITHOUT_CLASSIFICATION	2.7361271470174015E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999638330711426	WITHOUT_CLASSIFICATION	3.61669288574161E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999631600941464	WITHOUT_CLASSIFICATION	3.6839905853552905E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999855500482796	WITHOUT_CLASSIFICATION	1.444995172038817E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999894370083615	WITHOUT_CLASSIFICATION	1.0562991638472987E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999970935610156	WITHOUT_CLASSIFICATION	2.906438984393114E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.99996521568095	WITHOUT_CLASSIFICATION	3.478431905006928E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999855500482796	WITHOUT_CLASSIFICATION	1.444995172038817E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999627275313305	WITHOUT_CLASSIFICATION	3.727246866944082E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999602125376064	WITHOUT_CLASSIFICATION	3.9787462393739946E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766860624719	WITHOUT_CLASSIFICATION	2.3313937528120928E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999954684524066	WITHOUT_CLASSIFICATION	4.531547593394466E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999990847145679	WITHOUT_CLASSIFICATION	9.15285432200436E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999824125757618	WITHOUT_CLASSIFICATION	1.75874242381556E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.99999559307833	WITHOUT_CLASSIFICATION	4.406921670054148E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998145379032343	WITHOUT_CLASSIFICATION	1.8546209676575926E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998145379032343	WITHOUT_CLASSIFICATION	1.8546209676575926E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999974595511123	WITHOUT_CLASSIFICATION	2.540448887732664E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999971682458625	WITHOUT_CLASSIFICATION	2.8317541375212316E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999765606735812	WITHOUT_CLASSIFICATION	2.3439326418709157E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999994807333973	WITHOUT_CLASSIFICATION	5.19266602708996E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999993742598081	WITHOUT_CLASSIFICATION	6.257401918736244E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999676482330812	WITHOUT_CLASSIFICATION	3.2351766918901725E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999533260554321	WITHOUT_CLASSIFICATION	4.6673944567991794E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999848097458761	WITHOUT_CLASSIFICATION	1.5190254123867969E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999530698119664	WITHOUT_CLASSIFICATION	4.693018803362828E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999983027875433	WITHOUT_CLASSIFICATION	1.697212456689351E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999950418368278	WITHOUT_CLASSIFICATION	4.9581631722022985E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999631184862526	WITHOUT_CLASSIFICATION	3.688151374736581E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999381718028083	WITHOUT_CLASSIFICATION	6.182819719169683E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999905021937862	WITHOUT_CLASSIFICATION	9.49780621382577E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999540873403109	WITHOUT_CLASSIFICATION	4.591265968911218E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9995730113409622	WITHOUT_CLASSIFICATION	4.2698865903785104E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999917279526273	WITHOUT_CLASSIFICATION	8.27204737281285E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9995694593382172	WITHOUT_CLASSIFICATION	4.3054066178283435E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999805018996324	WITHOUT_CLASSIFICATION	1.9498100367644665E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999932846523773	WITHOUT_CLASSIFICATION	6.715347622700537E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999884794816024	WITHOUT_CLASSIFICATION	1.1520518397560294E-5	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999287702178704	WITHOUT_CLASSIFICATION	7.12297821295752E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999866808255893	WITHOUT_CLASSIFICATION	1.3319174410752258E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999908812102336	WITHOUT_CLASSIFICATION	9.118789766421668E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999701989811269	WITHOUT_CLASSIFICATION	2.9801018873059567E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999883425432037	WITHOUT_CLASSIFICATION	1.1657456796447577E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999976106234997	WITHOUT_CLASSIFICATION	2.3893765002316388E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999967000573197	WITHOUT_CLASSIFICATION	3.299942680230028E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9997647630488623	WITHOUT_CLASSIFICATION	2.3523695113776178E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999933613126347	WITHOUT_CLASSIFICATION	6.638687365174868E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999739122803895	WITHOUT_CLASSIFICATION	2.6087719610559136E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999703671637392	WITHOUT_CLASSIFICATION	2.9632836260835062E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999057286733041	WITHOUT_CLASSIFICATION	9.427132669591971E-5	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999091471115498	WITHOUT_CLASSIFICATION	9.085288845024941E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998581052305822	WITHOUT_CLASSIFICATION	1.4189476941792536E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999934993192192	WITHOUT_CLASSIFICATION	6.5006807808617565E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996353219603341	WITHOUT_CLASSIFICATION	3.6467803966583687E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996917480651252	WITHOUT_CLASSIFICATION	3.082519348747952E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999866522286325	WITHOUT_CLASSIFICATION	1.3347771367539592E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998262734691463	WITHOUT_CLASSIFICATION	1.737265308536827E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998811085209441	WITHOUT_CLASSIFICATION	1.188914790558162E-4	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9994960564416854	WITHOUT_CLASSIFICATION	5.039435583146501E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9994960564416854	WITHOUT_CLASSIFICATION	5.039435583146501E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999733389749001	WITHOUT_CLASSIFICATION	2.666102509984711E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999861868141279	WITHOUT_CLASSIFICATION	1.3813185872090156E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995433879130101	WITHOUT_CLASSIFICATION	4.566120869899835E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999954112250341	WITHOUT_CLASSIFICATION	4.588774965879437E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999913508363236	WITHOUT_CLASSIFICATION	8.64916367638861E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9993432969006409	WITHOUT_CLASSIFICATION	6.5670309935901E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997192120130877	WITHOUT_CLASSIFICATION	2.8078798691226297E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9994930558107554	WITHOUT_CLASSIFICATION	5.069441892445908E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999514434371458	WITHOUT_CLASSIFICATION	4.855656285415629E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999899645869712	WITHOUT_CLASSIFICATION	1.0035413028798222E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993624405174948	WITHOUT_CLASSIFICATION	6.375594825051271E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999183786533248	WITHOUT_CLASSIFICATION	8.162134667525823E-5	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999711819245441	WITHOUT_CLASSIFICATION	2.8818075455914745E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998156573302788	WITHOUT_CLASSIFICATION	1.843426697211418E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999676861152026	WITHOUT_CLASSIFICATION	3.2313884797391794E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999983636199221	WITHOUT_CLASSIFICATION	1.636380077924262E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999169419977	WITHOUT_CLASSIFICATION	8.30580022385892E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999986195756672	WITHOUT_CLASSIFICATION	1.380424332860986E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999432903420087	WITHOUT_CLASSIFICATION	5.6709657991366913E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999231481025733	WITHOUT_CLASSIFICATION	7.685189742673538E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999986195756672	WITHOUT_CLASSIFICATION	1.380424332860986E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999715675195266	WITHOUT_CLASSIFICATION	2.843248047329846E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999859465747648	WITHOUT_CLASSIFICATION	1.4053425235142038E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998519541273094	WITHOUT_CLASSIFICATION	1.4804587269067216E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998732365294467	WITHOUT_CLASSIFICATION	1.2676347055330715E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999934145952479	WITHOUT_CLASSIFICATION	6.585404752059505E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999885317803822	WITHOUT_CLASSIFICATION	1.1468219617878185E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997090466037606	WITHOUT_CLASSIFICATION	2.909533962394295E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999747852034999	WITHOUT_CLASSIFICATION	2.521479650008491E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999972710604202	WITHOUT_CLASSIFICATION	2.7289395798021287E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999688077369929	WITHOUT_CLASSIFICATION	3.119226300716143E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999938495181612	WITHOUT_CLASSIFICATION	6.150481838859633E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998749208749523	WITHOUT_CLASSIFICATION	1.250791250475855E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999949237613042	WITHOUT_CLASSIFICATION	5.076238695817143E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999892829870424	WITHOUT_CLASSIFICATION	1.0717012957608506E-5	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999775615007037	WITHOUT_CLASSIFICATION	2.2438499296390434E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9992386921643932	WITHOUT_CLASSIFICATION	7.613078356068126E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999900166054035	WITHOUT_CLASSIFICATION	9.9833945964807E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999531296101306	WITHOUT_CLASSIFICATION	4.687038986928474E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.999032532703094	WITHOUT_CLASSIFICATION	9.674672969061185E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9998031053177012	WITHOUT_CLASSIFICATION	1.9689468229885674E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999994854213567	WITHOUT_CLASSIFICATION	5.145786432174219E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999866205477849	WITHOUT_CLASSIFICATION	1.337945221518287E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999264269859613	WITHOUT_CLASSIFICATION	7.357301403862685E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999918284953038	WITHOUT_CLASSIFICATION	8.171504696237822E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999519978612	WITHOUT_CLASSIFICATION	4.800213879574969E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998415290487005	WITHOUT_CLASSIFICATION	1.584709512995431E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9998653457801747	WITHOUT_CLASSIFICATION	1.3465421982525002E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999924724035844	WITHOUT_CLASSIFICATION	7.5275964156049365E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999747115522121	WITHOUT_CLASSIFICATION	2.5288447787938618E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994966321942951	WITHOUT_CLASSIFICATION	5.03367805704975E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999639003231859	WITHOUT_CLASSIFICATION	3.609967681401382E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999611505842199	WITHOUT_CLASSIFICATION	3.8849415780210114E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9974064249874937	WITHOUT_CLASSIFICATION	0.002593575012506368	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998923221409559	WITHOUT_CLASSIFICATION	1.0767785904413472E-4	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9998882235915529	WITHOUT_CLASSIFICATION	1.117764084471611E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999772615779166	WITHOUT_CLASSIFICATION	2.2738422083502174E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999903918663043	WITHOUT_CLASSIFICATION	9.608133695578968E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999958055444979	WITHOUT_CLASSIFICATION	4.194455502120085E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999958061657813	WITHOUT_CLASSIFICATION	4.193834218706447E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999870233470344	WITHOUT_CLASSIFICATION	1.2976652965561606E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999955547506486	WITHOUT_CLASSIFICATION	4.445249351405073E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9892797938387117	WITHOUT_CLASSIFICATION	0.010720206161288309	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999598724119048	WITHOUT_CLASSIFICATION	4.01275880952534E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.99996063124347	WITHOUT_CLASSIFICATION	3.936875653003316E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999919268178763	WITHOUT_CLASSIFICATION	8.073182123701659E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999932917689062	WITHOUT_CLASSIFICATION	6.708231093796044E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999777903806352	WITHOUT_CLASSIFICATION	2.2209619364817816E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999394535426501	WITHOUT_CLASSIFICATION	6.0546457349734696E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999814188688511	WITHOUT_CLASSIFICATION	1.8581131148869834E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999777183441049	WITHOUT_CLASSIFICATION	2.2281655895100238E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999956014540711	WITHOUT_CLASSIFICATION	4.398545928888145E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999853265525607	WITHOUT_CLASSIFICATION	1.467344743930499E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999471395103656	WITHOUT_CLASSIFICATION	5.286048963444401E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999963450599144	WITHOUT_CLASSIFICATION	3.6549400856765184E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999934640224808	WITHOUT_CLASSIFICATION	6.5359775191986394E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999473946546	WITHOUT_CLASSIFICATION	5.260534539445114E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999727515894667	WITHOUT_CLASSIFICATION	2.7248410533290543E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9997537796259535	WITHOUT_CLASSIFICATION	2.462203740465599E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702481266806	WITHOUT_CLASSIFICATION	2.9751873319434798E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619281107978	WITHOUT_CLASSIFICATION	3.807188920234289E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636246096806	WITHOUT_CLASSIFICATION	3.63753903194914E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999955402145565	WITHOUT_CLASSIFICATION	4.4597854435178004E-6	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999890324385279	WITHOUT_CLASSIFICATION	1.0967561472133664E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931336500492	WITHOUT_CLASSIFICATION	6.866349950825256E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999995787135518	WITHOUT_CLASSIFICATION	4.2128644816430747E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999939794149116	WITHOUT_CLASSIFICATION	6.02058508844483E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700816742682	WITHOUT_CLASSIFICATION	2.991832573188586E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999939794149116	WITHOUT_CLASSIFICATION	6.02058508844483E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999366922179898	WITHOUT_CLASSIFICATION	6.33077820102746E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999994609018453	WITHOUT_CLASSIFICATION	5.390981546901467E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999949980073168	WITHOUT_CLASSIFICATION	5.001992683226839E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999027913117211	WITHOUT_CLASSIFICATION	9.720868827890511E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999508066754567	WITHOUT_CLASSIFICATION	4.9193324543373365E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9945835696593024	WITHOUT_CLASSIFICATION	0.005416430340697569	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999998004171231	WITHOUT_CLASSIFICATION	1.995828769080815E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999934763197041	WITHOUT_CLASSIFICATION	6.5236802958868826E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999976204903822	WITHOUT_CLASSIFICATION	2.379509617801277E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997248337509141	WITHOUT_CLASSIFICATION	2.751662490858069E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999902703906609	WITHOUT_CLASSIFICATION	9.729609339075351E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999874489310961	WITHOUT_CLASSIFICATION	1.2551068903803233E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.99927259735528	WITHOUT_CLASSIFICATION	7.274026447200677E-4	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9984866380188098	WITHOUT_CLASSIFICATION	0.0015133619811902894	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999592410774042	WITHOUT_CLASSIFICATION	4.075892259589285E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999966087014865	WITHOUT_CLASSIFICATION	3.3912985133590336E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999318866350088	WITHOUT_CLASSIFICATION	6.811336499119188E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999318866350088	WITHOUT_CLASSIFICATION	6.811336499119188E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998968595341967	WITHOUT_CLASSIFICATION	1.0314046580334165E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999773225084878	WITHOUT_CLASSIFICATION	2.2677491512217943E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999796814693873	WITHOUT_CLASSIFICATION	2.0318530612616688E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999837603301391	WITHOUT_CLASSIFICATION	1.623966986088533E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999799185874461	WITHOUT_CLASSIFICATION	2.008141255392434E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999920168749039	WITHOUT_CLASSIFICATION	7.983125096089627E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9984229007177933	WITHOUT_CLASSIFICATION	0.0015770992822067285	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998987475179261	WITHOUT_CLASSIFICATION	1.0125248207391941E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999950803676867	WITHOUT_CLASSIFICATION	4.919632313310883E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999894536906893	WITHOUT_CLASSIFICATION	1.0546309310747442E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999322244825298	WITHOUT_CLASSIFICATION	6.777551747015751E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999819903805577	WITHOUT_CLASSIFICATION	1.8009619442216376E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999902187267647	WITHOUT_CLASSIFICATION	9.781273235316326E-6	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999316207561134	WITHOUT_CLASSIFICATION	6.837924388655414E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999884395502802	WITHOUT_CLASSIFICATION	1.156044971979513E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999770813876445	WITHOUT_CLASSIFICATION	2.2918612355503882E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999761740906697	WITHOUT_CLASSIFICATION	2.38259093302078E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997258488769895	WITHOUT_CLASSIFICATION	2.7415112301051777E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999585923605899	WITHOUT_CLASSIFICATION	4.14076394100065E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999879757840655	WITHOUT_CLASSIFICATION	1.202421593447899E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999552634551545	WITHOUT_CLASSIFICATION	4.473654484556552E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999946414649855	WITHOUT_CLASSIFICATION	5.3585350144371814E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999843239364417	WITHOUT_CLASSIFICATION	1.567606355835038E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999881748355892	WITHOUT_CLASSIFICATION	1.1825164410794579E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9998242939287729	WITHOUT_CLASSIFICATION	1.7570607122705312E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999946191141404	WITHOUT_CLASSIFICATION	5.3808858595580914E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9986765032059705	WITHOUT_CLASSIFICATION	0.0013234967940295248	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9996814202225296	WITHOUT_CLASSIFICATION	3.18579777470388E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999380806069691	WITHOUT_CLASSIFICATION	6.191939303090252E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999537628985858	WITHOUT_CLASSIFICATION	4.6237101414265E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9993399912880607	WITHOUT_CLASSIFICATION	6.600087119391553E-4	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999233967904657	WITHOUT_CLASSIFICATION	7.660320953436649E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9953617737670881	WITHOUT_CLASSIFICATION	0.00463822623291195	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998904674375756	WITHOUT_CLASSIFICATION	1.0953256242449847E-4	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997633189687843	WITHOUT_CLASSIFICATION	2.366810312155634E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.99998617512765	WITHOUT_CLASSIFICATION	1.3824872349913074E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999660890014713	WITHOUT_CLASSIFICATION	3.3910998528699326E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999684578850174	WITHOUT_CLASSIFICATION	3.154211498263503E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999990929002723	WITHOUT_CLASSIFICATION	9.07099727704454E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995908161227204	WITHOUT_CLASSIFICATION	4.0918387727969255E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999508006278444	WITHOUT_CLASSIFICATION	4.919937215557413E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689611964949	WITHOUT_CLASSIFICATION	3.1038803505011255E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999380137223001	WITHOUT_CLASSIFICATION	6.198627769986161E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998960262198908	WITHOUT_CLASSIFICATION	1.0397378010928043E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999900964012254	WITHOUT_CLASSIFICATION	9.903598774633047E-6	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999976487113318	WITHOUT_CLASSIFICATION	2.35128866824204E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999871252105423	WITHOUT_CLASSIFICATION	1.2874789457544619E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999920630082205	WITHOUT_CLASSIFICATION	7.936991779472721E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999844379994429	WITHOUT_CLASSIFICATION	1.5562000557044297E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999694479602288	WITHOUT_CLASSIFICATION	3.055203977125457E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689611964949	WITHOUT_CLASSIFICATION	3.1038803505011255E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997986095884062	WITHOUT_CLASSIFICATION	2.0139041159381377E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998373326317632	WITHOUT_CLASSIFICATION	1.6266736823687466E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999778620705754	WITHOUT_CLASSIFICATION	2.2137929424682058E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999687578806263	WITHOUT_CLASSIFICATION	3.1242119373672666E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999543208800798	WITHOUT_CLASSIFICATION	4.5679119920119354E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999543208800798	WITHOUT_CLASSIFICATION	4.5679119920119354E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9970807743858746	WITHOUT_CLASSIFICATION	0.002919225614125342	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999619196728585	WITHOUT_CLASSIFICATION	3.808032714137881E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999053769462843	WITHOUT_CLASSIFICATION	9.462305371573674E-5	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999557687542088	WITHOUT_CLASSIFICATION	4.423124579133818E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999847127401387	WITHOUT_CLASSIFICATION	1.5287259861269355E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999974909389601	WITHOUT_CLASSIFICATION	2.5090610399828586E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9992714358407373	WITHOUT_CLASSIFICATION	7.285641592626964E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999458167951651	WITHOUT_CLASSIFICATION	5.418320483486336E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997388800752859	WITHOUT_CLASSIFICATION	2.611199247141381E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999469451290852	WITHOUT_CLASSIFICATION	5.3054870914884105E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998671936506395	WITHOUT_CLASSIFICATION	1.3280634936058852E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998035811767673	WITHOUT_CLASSIFICATION	1.9641882323274178E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999981593182905	WITHOUT_CLASSIFICATION	1.8406817095553466E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999082539272227	WITHOUT_CLASSIFICATION	9.174607277721856E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999339566060936	WITHOUT_CLASSIFICATION	6.604339390640234E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999609750382	WITHOUT_CLASSIFICATION	3.902496179801246E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998745891605755	WITHOUT_CLASSIFICATION	1.254108394244147E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998074292613766	WITHOUT_CLASSIFICATION	1.925707386234428E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999982744565625	WITHOUT_CLASSIFICATION	1.7255434374402654E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997551426282455	WITHOUT_CLASSIFICATION	2.448573717544684E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999927571429323	WITHOUT_CLASSIFICATION	7.2428570676116534E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999967533033699	WITHOUT_CLASSIFICATION	3.246696630124014E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999981767937168	WITHOUT_CLASSIFICATION	1.8232062831999866E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.998875095436058	WITHOUT_CLASSIFICATION	0.00112490456394189	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999851785483325	WITHOUT_CLASSIFICATION	1.4821451667510245E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999631699764581	WITHOUT_CLASSIFICATION	3.683002354186395E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999841285437395	WITHOUT_CLASSIFICATION	1.587145626048362E-5	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999972120915381	WITHOUT_CLASSIFICATION	2.7879084619063216E-5	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999568146614711	WITHOUT_CLASSIFICATION	4.318533852889747E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999687086070279	WITHOUT_CLASSIFICATION	3.1291392972037814E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999972120915381	WITHOUT_CLASSIFICATION	2.7879084619063216E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999903517053833	WITHOUT_CLASSIFICATION	9.64829461675585E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9991159256007622	WITHOUT_CLASSIFICATION	8.840743992378029E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999624665858551	WITHOUT_CLASSIFICATION	3.753341414489013E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999604343893219	WITHOUT_CLASSIFICATION	3.956561067811599E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997179295158196	WITHOUT_CLASSIFICATION	2.8207048418039525E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999322244825298	WITHOUT_CLASSIFICATION	6.777551747015751E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9995527388802309	WITHOUT_CLASSIFICATION	4.472611197690494E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993749681429669	WITHOUT_CLASSIFICATION	6.250318570331113E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999960709525649	WITHOUT_CLASSIFICATION	3.929047435104146E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999988183318665	WITHOUT_CLASSIFICATION	1.1816681335016284E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9996671606587559	WITHOUT_CLASSIFICATION	3.328393412440311E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999745934781767	WITHOUT_CLASSIFICATION	2.5406521823301533E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999604349851516	WITHOUT_CLASSIFICATION	3.9565014848401035E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999651168126925	WITHOUT_CLASSIFICATION	3.488318730744527E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999633454264222	WITHOUT_CLASSIFICATION	3.665457357787107E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999849563529023	WITHOUT_CLASSIFICATION	1.5043647097699045E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999942731853967	WITHOUT_CLASSIFICATION	5.726814603295349E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999948762383967	WITHOUT_CLASSIFICATION	5.123761603350975E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999973237221632	WITHOUT_CLASSIFICATION	2.6762778368373024E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999647763506484	WITHOUT_CLASSIFICATION	3.522364935158785E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999739933338941	WITHOUT_CLASSIFICATION	2.600666610579802E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999743778191179	WITHOUT_CLASSIFICATION	2.562218088211502E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999954682176281	WITHOUT_CLASSIFICATION	4.531782371978043E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997082627371078	WITHOUT_CLASSIFICATION	2.91737262892229E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999955601634447	WITHOUT_CLASSIFICATION	4.4398365552910625E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996649640759853	WITHOUT_CLASSIFICATION	3.3503592401469594E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998970246282689	WITHOUT_CLASSIFICATION	1.0297537173113156E-4	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997428112667165	WITHOUT_CLASSIFICATION	2.571887332835402E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999942853068489	WITHOUT_CLASSIFICATION	5.714693151144675E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999859304432259	WITHOUT_CLASSIFICATION	1.4069556773982437E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723796416446	WITHOUT_CLASSIFICATION	2.7620358355406957E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756726621227	WITHOUT_CLASSIFICATION	2.4327337877210947E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999846433083812	WITHOUT_CLASSIFICATION	1.5356691618782468E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999927435331784	WITHOUT_CLASSIFICATION	7.256466821647469E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999926829524224	WITHOUT_CLASSIFICATION	7.317047577620873E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999997201148367	WITHOUT_CLASSIFICATION	2.7988516329128016E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999950551426002	WITHOUT_CLASSIFICATION	4.944857399781784E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999930991973913	WITHOUT_CLASSIFICATION	6.9008026086445465E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999862919813527	WITHOUT_CLASSIFICATION	1.3708018647197318E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999969088686694	WITHOUT_CLASSIFICATION	3.0911313305106803E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999983349847606	WITHOUT_CLASSIFICATION	1.665015239406176E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999920682678988	WITHOUT_CLASSIFICATION	7.931732101246461E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999920015473316	WITHOUT_CLASSIFICATION	7.998452668405333E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999697872246369	WITHOUT_CLASSIFICATION	3.021277536303711E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.99999734826286	WITHOUT_CLASSIFICATION	2.6517371399795844E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999994950021316	WITHOUT_CLASSIFICATION	5.049978684019902E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999756691582699	WITHOUT_CLASSIFICATION	2.4330841730102593E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998835398637858	WITHOUT_CLASSIFICATION	1.1646013621428339E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999348843791892	WITHOUT_CLASSIFICATION	6.511562081078845E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999823680214365	WITHOUT_CLASSIFICATION	1.763197856352812E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999963781554306	WITHOUT_CLASSIFICATION	3.62184456934877E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999021365405011	WITHOUT_CLASSIFICATION	9.786345949898032E-5	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999133173543853	WITHOUT_CLASSIFICATION	8.668264561477133E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999980274265443	WITHOUT_CLASSIFICATION	1.9725734557088287E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995292202034224	WITHOUT_CLASSIFICATION	4.707797965776514E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999989176803709	WITHOUT_CLASSIFICATION	1.0823196291690184E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999901795212531	WITHOUT_CLASSIFICATION	9.820478746943936E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9994624997643109	WITHOUT_CLASSIFICATION	5.375002356890532E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999292535240686	WITHOUT_CLASSIFICATION	7.074647593135744E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723796416446	WITHOUT_CLASSIFICATION	2.7620358355406957E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999661319057153	WITHOUT_CLASSIFICATION	3.3868094284686844E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999995559419629	WITHOUT_CLASSIFICATION	4.440580371865201E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999326026815444	WITHOUT_CLASSIFICATION	6.739731845557293E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999612440464921	WITHOUT_CLASSIFICATION	3.875595350788558E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999827497738121	WITHOUT_CLASSIFICATION	1.725022618793882E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999584304991748	WITHOUT_CLASSIFICATION	4.1569500825338105E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731949779598	WITHOUT_CLASSIFICATION	2.6805022040123895E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999980031572867	WITHOUT_CLASSIFICATION	1.9968427132534068E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999990999256506	WITHOUT_CLASSIFICATION	9.000743494788082E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999460287844802	WITHOUT_CLASSIFICATION	5.397121551969192E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999965578587672	WITHOUT_CLASSIFICATION	3.44214123276526E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999708744581278	WITHOUT_CLASSIFICATION	2.9125541872199016E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999916212288262	WITHOUT_CLASSIFICATION	8.378771173795632E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999798026506311	WITHOUT_CLASSIFICATION	2.0197349368886133E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999366922179898	WITHOUT_CLASSIFICATION	6.33077820102746E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997715573223	WITHOUT_CLASSIFICATION	2.2844267766322158E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999991933825041	WITHOUT_CLASSIFICATION	8.066174958415894E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999929690781264	WITHOUT_CLASSIFICATION	7.0309218735849185E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999963335610573	WITHOUT_CLASSIFICATION	3.6664389427042158E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999994962511954	WITHOUT_CLASSIFICATION	5.037488046536285E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999832356282143	WITHOUT_CLASSIFICATION	1.6764371785714586E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999832356282143	WITHOUT_CLASSIFICATION	1.6764371785714586E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999815154872804	WITHOUT_CLASSIFICATION	1.84845127195288E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999968045771691	WITHOUT_CLASSIFICATION	3.1954228308606913E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999906220283657	WITHOUT_CLASSIFICATION	9.377971634209724E-6	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999863362217654	WITHOUT_CLASSIFICATION	1.3663778234593211E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999475946133496	WITHOUT_CLASSIFICATION	5.240538665034192E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999949194785456	WITHOUT_CLASSIFICATION	5.0805214543292205E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999812162331871	WITHOUT_CLASSIFICATION	1.878376681287123E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999015252710884	WITHOUT_CLASSIFICATION	9.847472891156772E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999015252710884	WITHOUT_CLASSIFICATION	9.847472891156772E-5	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995678160620938	WITHOUT_CLASSIFICATION	4.321839379062408E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.99999110147163	WITHOUT_CLASSIFICATION	8.898528370117065E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998507270002146	WITHOUT_CLASSIFICATION	1.492729997853144E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999993417587305	WITHOUT_CLASSIFICATION	6.582412695130864E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999993417587305	WITHOUT_CLASSIFICATION	6.582412695130864E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999993417587305	WITHOUT_CLASSIFICATION	6.582412695130864E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999615089606811	WITHOUT_CLASSIFICATION	3.849103931887824E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.99998319442434	WITHOUT_CLASSIFICATION	1.6805575659979662E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999828700707979	WITHOUT_CLASSIFICATION	1.7129929202115725E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999576753606706	WITHOUT_CLASSIFICATION	4.232463932941791E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999952240951169	WITHOUT_CLASSIFICATION	4.775904883184284E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999993473726577	WITHOUT_CLASSIFICATION	6.526273422368148E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999274636646299	WITHOUT_CLASSIFICATION	7.25363353701328E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990442759960133	WITHOUT_CLASSIFICATION	9.557240039866334E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999926744728148	WITHOUT_CLASSIFICATION	7.325527185136892E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999934708173418	WITHOUT_CLASSIFICATION	6.529182658167743E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999743382183374	WITHOUT_CLASSIFICATION	2.56617816625774E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.99988349424697	WITHOUT_CLASSIFICATION	1.1650575303001269E-4	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999861491288722	WITHOUT_CLASSIFICATION	1.3850871127737238E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999977646867261	WITHOUT_CLASSIFICATION	2.2353132739875953E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999908741090735	WITHOUT_CLASSIFICATION	9.125890926493626E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999948365695986	WITHOUT_CLASSIFICATION	5.1634304013696715E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999956606369418	WITHOUT_CLASSIFICATION	4.33936305823262E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999832356282143	WITHOUT_CLASSIFICATION	1.6764371785714586E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999917547710842	WITHOUT_CLASSIFICATION	8.245228915749425E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999928253162129	WITHOUT_CLASSIFICATION	7.174683787121689E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999695745106817	WITHOUT_CLASSIFICATION	3.0425489318271927E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999802385447542	WITHOUT_CLASSIFICATION	1.9761455245891978E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999896903985934	WITHOUT_CLASSIFICATION	1.0309601406494577E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999984861527191	WITHOUT_CLASSIFICATION	1.5138472808464525E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999645689498826	WITHOUT_CLASSIFICATION	3.543105011738829E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999940162541259	WITHOUT_CLASSIFICATION	5.983745874131138E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999303859912196	WITHOUT_CLASSIFICATION	6.961400878038484E-5	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999939226195045	WITHOUT_CLASSIFICATION	6.077380495493354E-6	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997913873073769	WITHOUT_CLASSIFICATION	2.086126926230383E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999797753674491	WITHOUT_CLASSIFICATION	2.022463255100768E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.999955524362099	WITHOUT_CLASSIFICATION	4.447563790110895E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999402730429883	WITHOUT_CLASSIFICATION	5.972695701176315E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999832386583445	WITHOUT_CLASSIFICATION	1.676134165542615E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999994515715438	WITHOUT_CLASSIFICATION	5.484284561948267E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999974189449766	WITHOUT_CLASSIFICATION	2.5810550232695036E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999981824379744	WITHOUT_CLASSIFICATION	1.8175620255877729E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999880955046381	WITHOUT_CLASSIFICATION	1.1904495361834547E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999880955046381	WITHOUT_CLASSIFICATION	1.1904495361834547E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999872026289468	WITHOUT_CLASSIFICATION	1.2797371053161203E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999965380306605	WITHOUT_CLASSIFICATION	3.4619693395445146E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999870509716697	WITHOUT_CLASSIFICATION	1.2949028330256167E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999813141189529	WITHOUT_CLASSIFICATION	1.868588104708531E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999482951007507	WITHOUT_CLASSIFICATION	5.1704899249318616E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999764902213274	WITHOUT_CLASSIFICATION	2.3509778672707573E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999839083343616	WITHOUT_CLASSIFICATION	1.6091665638385044E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998629552152487	WITHOUT_CLASSIFICATION	1.3704478475131288E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999932023875658	WITHOUT_CLASSIFICATION	6.7976124340592524E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999907425829805	WITHOUT_CLASSIFICATION	9.257417019509065E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999363092517002	WITHOUT_CLASSIFICATION	6.369074829984645E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997104822757868	WITHOUT_CLASSIFICATION	2.8951772421314923E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999990259344468	WITHOUT_CLASSIFICATION	9.740655531809089E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999950136754779	WITHOUT_CLASSIFICATION	4.986324522093747E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999995943291915	WITHOUT_CLASSIFICATION	4.0567080853468656E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999209937754661	WITHOUT_CLASSIFICATION	7.900622453395983E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991967039399	WITHOUT_CLASSIFICATION	8.03296060201109E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991967039399	WITHOUT_CLASSIFICATION	8.03296060201109E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999786186936517	WITHOUT_CLASSIFICATION	2.138130634841761E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999219716917	WITHOUT_CLASSIFICATION	7.802830825004576E-8	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999422911259641	WITHOUT_CLASSIFICATION	5.770887403593508E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999422911259641	WITHOUT_CLASSIFICATION	5.770887403593508E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999010305443652	WITHOUT_CLASSIFICATION	9.896945563482106E-5	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999056572590002	WITHOUT_CLASSIFICATION	9.434274099985624E-5	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995854241186379	WITHOUT_CLASSIFICATION	4.145758813620432E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999977065480388	WITHOUT_CLASSIFICATION	2.2934519613211456E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999618221447504	WITHOUT_CLASSIFICATION	3.8177855249667924E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999255822563488	WITHOUT_CLASSIFICATION	7.441774365124303E-5	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999664748398621	WITHOUT_CLASSIFICATION	3.352516013795236E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999977065480388	WITHOUT_CLASSIFICATION	2.2934519613211456E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999958656209686	WITHOUT_CLASSIFICATION	4.134379031390159E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999918361551283	WITHOUT_CLASSIFICATION	8.163844871655192E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999969884302571	WITHOUT_CLASSIFICATION	3.011569742928903E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999589735131919	WITHOUT_CLASSIFICATION	4.102648680817019E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999737270786535	WITHOUT_CLASSIFICATION	2.6272921346512367E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999923049041489	WITHOUT_CLASSIFICATION	7.695095850981894E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999773605604191	WITHOUT_CLASSIFICATION	2.2639439580994226E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999863369781404	WITHOUT_CLASSIFICATION	1.3663021859463337E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999981246377205	WITHOUT_CLASSIFICATION	1.875362279569262E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999913744920098	WITHOUT_CLASSIFICATION	8.625507990217302E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998710565978236	WITHOUT_CLASSIFICATION	1.289434021763649E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999960926043572	WITHOUT_CLASSIFICATION	3.907395642894804E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999936942398008	WITHOUT_CLASSIFICATION	6.305760199201093E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999964596741553	WITHOUT_CLASSIFICATION	3.540325844855629E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999930769805944	WITHOUT_CLASSIFICATION	6.923019405576217E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999934274258105	WITHOUT_CLASSIFICATION	6.57257418940665E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9992836984016218	WITHOUT_CLASSIFICATION	7.163015983782386E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999279853463612	WITHOUT_CLASSIFICATION	7.201465363882017E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999279853463612	WITHOUT_CLASSIFICATION	7.201465363882017E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999773605604191	WITHOUT_CLASSIFICATION	2.2639439580994226E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999818062859699	WITHOUT_CLASSIFICATION	1.819371403018695E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999977064897245	WITHOUT_CLASSIFICATION	2.2935102754502288E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998446388110371	WITHOUT_CLASSIFICATION	1.5536118896279367E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999284043582642	WITHOUT_CLASSIFICATION	7.159564173573017E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999923570055428	WITHOUT_CLASSIFICATION	7.64299445730683E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960866897235	WITHOUT_CLASSIFICATION	3.9133102763870965E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999914024269698	WITHOUT_CLASSIFICATION	8.597573030121916E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999580012171975	WITHOUT_CLASSIFICATION	4.1998782802478356E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999998367090149	WITHOUT_CLASSIFICATION	1.632909850949782E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999862610915756	WITHOUT_CLASSIFICATION	1.3738908424289025E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999998707120934	WITHOUT_CLASSIFICATION	1.2928790661120093E-6	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999941978458702	WITHOUT_CLASSIFICATION	5.802154129864448E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999882988256755	WITHOUT_CLASSIFICATION	1.1701174324523267E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999849759837023	WITHOUT_CLASSIFICATION	1.5024016297857416E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999728242139426	WITHOUT_CLASSIFICATION	2.7175786057348793E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999994391255927	WITHOUT_CLASSIFICATION	5.608744072886139E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999971251607339	WITHOUT_CLASSIFICATION	2.874839266123244E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999975607486558	WITHOUT_CLASSIFICATION	2.4392513441790198E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999374510094264	WITHOUT_CLASSIFICATION	6.254899057356664E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999900188329253	WITHOUT_CLASSIFICATION	9.981167074722465E-6	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999940826315952	WITHOUT_CLASSIFICATION	5.9173684047905475E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999808222295451	WITHOUT_CLASSIFICATION	1.9177770454929645E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999855059347845	WITHOUT_CLASSIFICATION	1.4494065215548489E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999954307969945	WITHOUT_CLASSIFICATION	4.569203005451136E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999776603841669	WITHOUT_CLASSIFICATION	2.2339615833075602E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999866069879966	WITHOUT_CLASSIFICATION	1.3393012003456447E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9987754980130231	WITHOUT_CLASSIFICATION	0.0012245019869769162	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997559401572802	WITHOUT_CLASSIFICATION	2.440598427198433E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999757414365071	WITHOUT_CLASSIFICATION	2.4258563492887514E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999820207390802	WITHOUT_CLASSIFICATION	1.797926091981125E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999722156243799	WITHOUT_CLASSIFICATION	2.7784375620047527E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999924493221396	WITHOUT_CLASSIFICATION	7.550677860430105E-6	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999962985878439	WITHOUT_CLASSIFICATION	3.7014121559984375E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999969302831119	WITHOUT_CLASSIFICATION	3.0697168880185537E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999924432340526	WITHOUT_CLASSIFICATION	7.556765947402212E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999227544403284	WITHOUT_CLASSIFICATION	7.724555967150629E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999966507156174	WITHOUT_CLASSIFICATION	3.349284382596551E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999866170811011	WITHOUT_CLASSIFICATION	1.3382918898784913E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997921944320777	WITHOUT_CLASSIFICATION	2.0780556792238063E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999929321768645	WITHOUT_CLASSIFICATION	7.067823135570743E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999606483074175	WITHOUT_CLASSIFICATION	3.9351692582575325E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999844929375159	WITHOUT_CLASSIFICATION	1.5507062484094588E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999044985711619	WITHOUT_CLASSIFICATION	9.550142883804567E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998885707129772	WITHOUT_CLASSIFICATION	1.114292870229075E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998346017973703	WITHOUT_CLASSIFICATION	1.6539820262982335E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999443050907598	WITHOUT_CLASSIFICATION	5.569490924019865E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999981766786903	WITHOUT_CLASSIFICATION	1.823321309772704E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998201282693455	WITHOUT_CLASSIFICATION	1.7987173065458383E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999991676560462	WITHOUT_CLASSIFICATION	8.323439537987665E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999755481752797	WITHOUT_CLASSIFICATION	2.445182472029532E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999228084610705	WITHOUT_CLASSIFICATION	7.719153892954127E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999618221447504	WITHOUT_CLASSIFICATION	3.8177855249667924E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9994152288479751	WITHOUT_CLASSIFICATION	5.847711520250067E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999728242139426	WITHOUT_CLASSIFICATION	2.7175786057348793E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999869734761736	WITHOUT_CLASSIFICATION	1.3026523826463575E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999818681814683	WITHOUT_CLASSIFICATION	1.813181853161711E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999972302318837	WITHOUT_CLASSIFICATION	2.76976811629327E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999972081477789	WITHOUT_CLASSIFICATION	2.7918522211414805E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999842934727268	WITHOUT_CLASSIFICATION	1.5706527273219083E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999985456374407	WITHOUT_CLASSIFICATION	1.4543625592523947E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999873932985158	WITHOUT_CLASSIFICATION	1.2606701484124939E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999836349717415	WITHOUT_CLASSIFICATION	1.6365028258514716E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999656153749148	WITHOUT_CLASSIFICATION	3.438462508520533E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985153636136	WITHOUT_CLASSIFICATION	1.484636386384865E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999437547256553	WITHOUT_CLASSIFICATION	5.6245274344678554E-5	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999993816437771	WITHOUT_CLASSIFICATION	6.183562227999511E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999997306681579	WITHOUT_CLASSIFICATION	2.6933184209175374E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999997306681579	WITHOUT_CLASSIFICATION	2.6933184209175374E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999417639183692	WITHOUT_CLASSIFICATION	5.823608163090798E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999697668393149	WITHOUT_CLASSIFICATION	3.0233160685103966E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999975696354231	WITHOUT_CLASSIFICATION	2.430364576960883E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9987769957243174	WITHOUT_CLASSIFICATION	0.0012230042756825822	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999946793642519	WITHOUT_CLASSIFICATION	5.320635748202807E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999946443604658	WITHOUT_CLASSIFICATION	5.355639534180498E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999004002	WITHOUT_CLASSIFICATION	9.959979999306441E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999748933956232	WITHOUT_CLASSIFICATION	2.5106604376758438E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999768951585791	WITHOUT_CLASSIFICATION	2.3104841420879286E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999850558996988	WITHOUT_CLASSIFICATION	1.4944100301179019E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999779601013441	WITHOUT_CLASSIFICATION	2.2039898655836954E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999779601013441	WITHOUT_CLASSIFICATION	2.2039898655836954E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999216210431	WITHOUT_CLASSIFICATION	7.837895683925271E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999833831611011	WITHOUT_CLASSIFICATION	1.661683889886132E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999945731174729	WITHOUT_CLASSIFICATION	5.4268825271634396E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999838187607812	WITHOUT_CLASSIFICATION	1.618123921879988E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999989099257409	WITHOUT_CLASSIFICATION	1.0900742590943132E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999872130861711	WITHOUT_CLASSIFICATION	1.2786913828956636E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999957763972915	WITHOUT_CLASSIFICATION	4.223602708500672E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999986832550394	WITHOUT_CLASSIFICATION	1.3167449606884456E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999916096039254	WITHOUT_CLASSIFICATION	8.390396074622131E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999588091850361	WITHOUT_CLASSIFICATION	4.119081496381446E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999874285599151	WITHOUT_CLASSIFICATION	1.257144008480882E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590803425	WITHOUT_CLASSIFICATION	3.134091965746191E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999527890569561	WITHOUT_CLASSIFICATION	4.721094304391789E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999959135878648	WITHOUT_CLASSIFICATION	4.086412135270708E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997324584706322	WITHOUT_CLASSIFICATION	2.675415293677512E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940210846123	WITHOUT_CLASSIFICATION	5.978915387629033E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.999617154358166	WITHOUT_CLASSIFICATION	3.828456418339083E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997697429923433	WITHOUT_CLASSIFICATION	2.3025700765673802E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999957514356367	WITHOUT_CLASSIFICATION	4.2485643633669405E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999990243263296	WITHOUT_CLASSIFICATION	9.75673670441044E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997551426282455	WITHOUT_CLASSIFICATION	2.448573717544684E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999706754037305	WITHOUT_CLASSIFICATION	2.9324596269453784E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999844985907012	WITHOUT_CLASSIFICATION	1.5501409298799984E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999940862910699	WITHOUT_CLASSIFICATION	5.913708930036442E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999732733488063	WITHOUT_CLASSIFICATION	2.6726651193705073E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999891442788569	WITHOUT_CLASSIFICATION	1.0855721143024394E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864103825588	WITHOUT_CLASSIFICATION	1.3589617441155807E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999997923569216	WITHOUT_CLASSIFICATION	2.0764307839329845E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9996722912897518	WITHOUT_CLASSIFICATION	3.2770871024821144E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782296263209	WITHOUT_CLASSIFICATION	2.1770373679071593E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9987927629985296	WITHOUT_CLASSIFICATION	0.0012072370014704226	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998365534566	WITHOUT_CLASSIFICATION	1.6344654340435199E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999662420592187	WITHOUT_CLASSIFICATION	3.3757940781317E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999990186684227	WITHOUT_CLASSIFICATION	9.81331577307603E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808238919193	WITHOUT_CLASSIFICATION	1.9176108080651753E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999986759528915	WITHOUT_CLASSIFICATION	1.3240471085312565E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999806092091942	WITHOUT_CLASSIFICATION	1.9390790805771286E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999883774484626	WITHOUT_CLASSIFICATION	1.1622551537323533E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999988201545854	WITHOUT_CLASSIFICATION	1.1798454145934739E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999889512752295	WITHOUT_CLASSIFICATION	1.104872477054958E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998377985101657	WITHOUT_CLASSIFICATION	1.6220148983425711E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999951696233007	WITHOUT_CLASSIFICATION	4.830376699310001E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999959494429772	WITHOUT_CLASSIFICATION	4.050557022764301E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999685941290165	WITHOUT_CLASSIFICATION	3.140587098351624E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999367514050208	WITHOUT_CLASSIFICATION	6.324859497916544E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999946370716287	WITHOUT_CLASSIFICATION	5.362928371255464E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999938373669497	WITHOUT_CLASSIFICATION	6.162633050298302E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999991332283108	WITHOUT_CLASSIFICATION	8.667716892003489E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99997285110759	WITHOUT_CLASSIFICATION	2.7148892409987543E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998504627434184	WITHOUT_CLASSIFICATION	1.495372565817081E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999927581141228	WITHOUT_CLASSIFICATION	7.241885877226429E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999962818191609	WITHOUT_CLASSIFICATION	3.718180839014875E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999891008749414	WITHOUT_CLASSIFICATION	1.08991250585911E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999713034353264	WITHOUT_CLASSIFICATION	2.86965646736249E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999891008749414	WITHOUT_CLASSIFICATION	1.08991250585911E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999910584917363	WITHOUT_CLASSIFICATION	8.941508263769285E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999982381734622	WITHOUT_CLASSIFICATION	1.7618265377290603E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999920260837044	WITHOUT_CLASSIFICATION	7.973916295575834E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998064245951	WITHOUT_CLASSIFICATION	1.935754049035284E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999929868376374	WITHOUT_CLASSIFICATION	7.013162362577156E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999920260837044	WITHOUT_CLASSIFICATION	7.973916295575834E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999952682352802	WITHOUT_CLASSIFICATION	4.731764719743982E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999857035594899	WITHOUT_CLASSIFICATION	1.4296440510104533E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999949756574363	WITHOUT_CLASSIFICATION	5.0243425637193705E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999942114390103	WITHOUT_CLASSIFICATION	5.788560989627864E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999758661534566	WITHOUT_CLASSIFICATION	2.413384654336147E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999967403897865	WITHOUT_CLASSIFICATION	3.2596102135045426E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999976840826935	WITHOUT_CLASSIFICATION	2.3159173065199288E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9997576534736818	WITHOUT_CLASSIFICATION	2.4234652631821603E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999963853661634	WITHOUT_CLASSIFICATION	3.6146338365549853E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999967698667181	WITHOUT_CLASSIFICATION	3.2301332818684473E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999677648008602	WITHOUT_CLASSIFICATION	3.2235199139726884E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.99999860077361	WITHOUT_CLASSIFICATION	1.3992263899600617E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998534660111	WITHOUT_CLASSIFICATION	1.4653398883793043E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998880295895741	WITHOUT_CLASSIFICATION	1.1197041042589839E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999927593379415	WITHOUT_CLASSIFICATION	7.2406620583931234E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997097468663421	WITHOUT_CLASSIFICATION	2.9025313365797534E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9973709627562084	WITHOUT_CLASSIFICATION	0.002629037243791558	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999971057429061	WITHOUT_CLASSIFICATION	2.8942570939265936E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999722897291845	WITHOUT_CLASSIFICATION	2.7710270815502904E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9989004035497018	WITHOUT_CLASSIFICATION	0.0010995964502982423	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998186199996613	WITHOUT_CLASSIFICATION	1.8138000033863093E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.999951061700419	WITHOUT_CLASSIFICATION	4.8938299580973694E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998758571600596	WITHOUT_CLASSIFICATION	1.2414283994042664E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9997759005371865	WITHOUT_CLASSIFICATION	2.2409946281352157E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999380582301088	WITHOUT_CLASSIFICATION	6.194176989119752E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999722319034736	WITHOUT_CLASSIFICATION	2.7768096526405944E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999987027261988	WITHOUT_CLASSIFICATION	1.2972738010564024E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999940280029707	WITHOUT_CLASSIFICATION	5.9719970293472995E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999704265118091	WITHOUT_CLASSIFICATION	2.9573488190829717E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998836594666495	WITHOUT_CLASSIFICATION	1.1634053335051213E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999748275095688	WITHOUT_CLASSIFICATION	2.517249043127929E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987393650473081	WITHOUT_CLASSIFICATION	0.001260634952691925	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9989004035497018	WITHOUT_CLASSIFICATION	0.0010995964502982423	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999912496255674	WITHOUT_CLASSIFICATION	8.750374432529015E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995189410806824	WITHOUT_CLASSIFICATION	4.8105891931759533E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996770072636316	WITHOUT_CLASSIFICATION	3.229927363683582E-4	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999432213589144	WITHOUT_CLASSIFICATION	5.6778641085468895E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999640198701281	WITHOUT_CLASSIFICATION	3.598012987188121E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999786566480745	WITHOUT_CLASSIFICATION	2.134335192550929E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999928403512159	WITHOUT_CLASSIFICATION	7.159648784100338E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999722878148841	WITHOUT_CLASSIFICATION	2.771218511590048E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999652485872593	WITHOUT_CLASSIFICATION	3.4751412740716584E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9997819412670771	WITHOUT_CLASSIFICATION	2.1805873292289415E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9996106873889269	WITHOUT_CLASSIFICATION	3.8931261107306043E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999471393261158	WITHOUT_CLASSIFICATION	5.2860673884310427E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999954918752783	WITHOUT_CLASSIFICATION	4.508124721732935E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999185766239298	WITHOUT_CLASSIFICATION	8.142337607011808E-5	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999323260212031	WITHOUT_CLASSIFICATION	6.767397879687095E-5	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999967474999172	WITHOUT_CLASSIFICATION	3.2525000828717954E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999008270250375	WITHOUT_CLASSIFICATION	9.91729749625248E-5	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999116886148798	WITHOUT_CLASSIFICATION	8.831138512020599E-5	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998877966050135	WITHOUT_CLASSIFICATION	1.1220339498652294E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999807233591053	WITHOUT_CLASSIFICATION	1.9276640894699954E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999875948655162	WITHOUT_CLASSIFICATION	1.2405134483681844E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999875948655162	WITHOUT_CLASSIFICATION	1.2405134483681844E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999921157375309	WITHOUT_CLASSIFICATION	7.884262469168796E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999875948655162	WITHOUT_CLASSIFICATION	1.2405134483681844E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999875948655162	WITHOUT_CLASSIFICATION	1.2405134483681844E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999775708364274	WITHOUT_CLASSIFICATION	2.242916357268126E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9983420886844994	WITHOUT_CLASSIFICATION	0.001657911315500623	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999687702445605	WITHOUT_CLASSIFICATION	3.122975543946008E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999687702445605	WITHOUT_CLASSIFICATION	3.122975543946008E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999980422673605	WITHOUT_CLASSIFICATION	1.9577326395111773E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999746937614234	WITHOUT_CLASSIFICATION	2.5306238576671353E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998856748267293	WITHOUT_CLASSIFICATION	1.1432517327070857E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9947961621254898	WITHOUT_CLASSIFICATION	0.0052038378745101884	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999676839264208	WITHOUT_CLASSIFICATION	3.2316073579224026E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996839741891732	WITHOUT_CLASSIFICATION	3.160258108267923E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995334441371988	WITHOUT_CLASSIFICATION	4.665558628012237E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999691178146979	WITHOUT_CLASSIFICATION	3.088218530215731E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999474255086119	WITHOUT_CLASSIFICATION	5.257449138810904E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9993955817057033	WITHOUT_CLASSIFICATION	6.044182942966775E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997276757905054	WITHOUT_CLASSIFICATION	2.723242094945537E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.998616932161201	WITHOUT_CLASSIFICATION	0.0013830678387990122	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931336500492	WITHOUT_CLASSIFICATION	6.866349950825256E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999170280951578	WITHOUT_CLASSIFICATION	8.29719048422354E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997942025277007	WITHOUT_CLASSIFICATION	2.057974722992625E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9992714032116619	WITHOUT_CLASSIFICATION	7.285967883380673E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999983292173676	WITHOUT_CLASSIFICATION	1.67078263237764E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999920544038486	WITHOUT_CLASSIFICATION	7.945596151379334E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931336500492	WITHOUT_CLASSIFICATION	6.866349950825256E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998186199996613	WITHOUT_CLASSIFICATION	1.8138000033863093E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999422440365987	WITHOUT_CLASSIFICATION	5.77559634013111E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999894370083615	WITHOUT_CLASSIFICATION	1.0562991638472987E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999855500482796	WITHOUT_CLASSIFICATION	1.444995172038817E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999476904753982	WITHOUT_CLASSIFICATION	5.230952460180676E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999972801055649	WITHOUT_CLASSIFICATION	2.719894435057532E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998930349248849	WITHOUT_CLASSIFICATION	1.0696507511505399E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999933326228421	WITHOUT_CLASSIFICATION	6.667377157943004E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999916593756133	WITHOUT_CLASSIFICATION	8.340624386653115E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999794988016142	WITHOUT_CLASSIFICATION	2.0501198385804155E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999420956493044	WITHOUT_CLASSIFICATION	5.790435069556055E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999312218131948	WITHOUT_CLASSIFICATION	6.877818680509701E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999976463406958	WITHOUT_CLASSIFICATION	2.353659304159024E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999881564012929	WITHOUT_CLASSIFICATION	1.1843598707059724E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998806206242032	WITHOUT_CLASSIFICATION	1.1937937579674891E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999839696566506	WITHOUT_CLASSIFICATION	1.6030343349384305E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999944749725597	WITHOUT_CLASSIFICATION	5.525027440415043E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999950582750154	WITHOUT_CLASSIFICATION	4.941724984559957E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999746955267605	WITHOUT_CLASSIFICATION	2.530447323947119E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999530214690433	WITHOUT_CLASSIFICATION	4.697853095674981E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998658235934589	WITHOUT_CLASSIFICATION	1.3417640654116844E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998104416230167	WITHOUT_CLASSIFICATION	1.8955837698336013E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999213792357	WITHOUT_CLASSIFICATION	7.862076430278944E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999916593756133	WITHOUT_CLASSIFICATION	8.340624386653115E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999498466563549	WITHOUT_CLASSIFICATION	5.015334364512478E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999411198964753	WITHOUT_CLASSIFICATION	5.8880103524711595E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996826640493099	WITHOUT_CLASSIFICATION	3.1733595069008923E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999506480311318	WITHOUT_CLASSIFICATION	4.935196886828085E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999380318161433	WITHOUT_CLASSIFICATION	6.196818385669063E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999736190976212	WITHOUT_CLASSIFICATION	2.6380902378887824E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999934782870313	WITHOUT_CLASSIFICATION	6.5217129686955E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999736278869402	WITHOUT_CLASSIFICATION	2.6372113059835387E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999406751955878	WITHOUT_CLASSIFICATION	5.9324804412231693E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999809780047766	WITHOUT_CLASSIFICATION	1.902199522343798E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999971175738736	WITHOUT_CLASSIFICATION	2.8824261264581324E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997941606208475	WITHOUT_CLASSIFICATION	2.0583937915250267E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999225285644365	WITHOUT_CLASSIFICATION	7.747143556351122E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998925737345453	WITHOUT_CLASSIFICATION	1.0742626545475533E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997311007763863	WITHOUT_CLASSIFICATION	2.6889922361374163E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999809780047766	WITHOUT_CLASSIFICATION	1.902199522343798E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999713499758062	WITHOUT_CLASSIFICATION	2.865002419379361E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999638221674316	WITHOUT_CLASSIFICATION	3.617783256841295E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999932846523773	WITHOUT_CLASSIFICATION	6.715347622700537E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999000582988025	WITHOUT_CLASSIFICATION	9.994170119749712E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999972093568262	WITHOUT_CLASSIFICATION	2.7906431738163354E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999678352700219	WITHOUT_CLASSIFICATION	3.216472997822306E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999824703242943	WITHOUT_CLASSIFICATION	1.752967570561217E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657928993787	WITHOUT_CLASSIFICATION	3.4207100621253754E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725247718402	WITHOUT_CLASSIFICATION	2.7475228159764225E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718218882874	WITHOUT_CLASSIFICATION	2.8178111712676575E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718218882874	WITHOUT_CLASSIFICATION	2.8178111712676575E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718218882874	WITHOUT_CLASSIFICATION	2.8178111712676575E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978365775402	WITHOUT_CLASSIFICATION	2.1634224597931436E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978365775402	WITHOUT_CLASSIFICATION	2.1634224597931436E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9986661666283745	WITHOUT_CLASSIFICATION	0.001333833371625488	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999968355919543	WITHOUT_CLASSIFICATION	3.164408045711859E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999933888677234	WITHOUT_CLASSIFICATION	6.6111322766518044E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999944992487884	WITHOUT_CLASSIFICATION	5.500751211600873E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998953582862589	WITHOUT_CLASSIFICATION	1.0464171374113701E-4	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687025559156	WITHOUT_CLASSIFICATION	3.1297444084363624E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692735605635	WITHOUT_CLASSIFICATION	3.0726439436545044E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999990110905848	WITHOUT_CLASSIFICATION	9.889094152520231E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733181031144	WITHOUT_CLASSIFICATION	2.6681896885523746E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687025559156	WITHOUT_CLASSIFICATION	3.1297444084363624E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692735605635	WITHOUT_CLASSIFICATION	3.0726439436545044E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999653553595654	WITHOUT_CLASSIFICATION	3.4644640434476693E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996620533216561	WITHOUT_CLASSIFICATION	3.379466783438604E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999984698344904	WITHOUT_CLASSIFICATION	1.5301655095645967E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999487145708396	WITHOUT_CLASSIFICATION	5.128542916048963E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998654153031226	WITHOUT_CLASSIFICATION	1.345846968773859E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998131328033962	WITHOUT_CLASSIFICATION	1.8686719660382657E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999787046932829	WITHOUT_CLASSIFICATION	2.1295306717027195E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999985201452047	WITHOUT_CLASSIFICATION	1.479854795314054E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998880109375087	WITHOUT_CLASSIFICATION	1.1198906249132533E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9996906588881378	WITHOUT_CLASSIFICATION	3.0934111186217884E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999983866333722	WITHOUT_CLASSIFICATION	1.613366627798293E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978761492344	WITHOUT_CLASSIFICATION	2.123850765605709E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998997336568191	WITHOUT_CLASSIFICATION	1.0026634318098238E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9993130212984827	WITHOUT_CLASSIFICATION	6.869787015173886E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999746001330844	WITHOUT_CLASSIFICATION	2.5399866915740026E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999687953263227	WITHOUT_CLASSIFICATION	3.1204673677297976E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999792238800521	WITHOUT_CLASSIFICATION	2.077611994790499E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999093287792891	WITHOUT_CLASSIFICATION	9.067122071084653E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9995540293131693	WITHOUT_CLASSIFICATION	4.459706868306475E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999996779792065	WITHOUT_CLASSIFICATION	3.220207935013003E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999913312060098	WITHOUT_CLASSIFICATION	8.668793990274584E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996740642048952	WITHOUT_CLASSIFICATION	3.259357951047943E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686045692905	WITHOUT_CLASSIFICATION	3.139543070949681E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999995054264767	WITHOUT_CLASSIFICATION	4.945735233040532E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689611169577	WITHOUT_CLASSIFICATION	3.103888304238303E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661072516164	WITHOUT_CLASSIFICATION	3.3892748383628655E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993624405174948	WITHOUT_CLASSIFICATION	6.375594825051271E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993624405174948	WITHOUT_CLASSIFICATION	6.375594825051271E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999826395660424	WITHOUT_CLASSIFICATION	1.736043395765357E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999980068248525	WITHOUT_CLASSIFICATION	1.9931751474679315E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999547251420815	WITHOUT_CLASSIFICATION	4.52748579186293E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999962427516181	WITHOUT_CLASSIFICATION	3.757248381916814E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998653121745186	WITHOUT_CLASSIFICATION	1.346878254814449E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9993535672859073	WITHOUT_CLASSIFICATION	6.464327140926524E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999984571366987	WITHOUT_CLASSIFICATION	1.5428633013386125E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999983636199221	WITHOUT_CLASSIFICATION	1.636380077924262E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695050406762	WITHOUT_CLASSIFICATION	3.049495932376453E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692971776568	WITHOUT_CLASSIFICATION	3.070282234327901E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693463789833	WITHOUT_CLASSIFICATION	3.065362101671489E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999743918282603	WITHOUT_CLASSIFICATION	2.56081717397374E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9993396640341293	WITHOUT_CLASSIFICATION	6.603359658705876E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990877012102363	WITHOUT_CLASSIFICATION	9.122987897637575E-4	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999955211791975	WITHOUT_CLASSIFICATION	4.478820802504489E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999732526446345	WITHOUT_CLASSIFICATION	2.6747355365456998E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999571697525976	WITHOUT_CLASSIFICATION	4.283024740234778E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999160320425898	WITHOUT_CLASSIFICATION	8.396795741020831E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999990680484013	WITHOUT_CLASSIFICATION	9.319515987045632E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990877012102363	WITHOUT_CLASSIFICATION	9.122987897637575E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990877012102363	WITHOUT_CLASSIFICATION	9.122987897637575E-4	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9988633923078559	WITHOUT_CLASSIFICATION	0.0011366076921441066	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999857810545101	WITHOUT_CLASSIFICATION	1.4218945489811744E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9959392911061703	WITHOUT_CLASSIFICATION	0.004060708893829733	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999940132151992	WITHOUT_CLASSIFICATION	5.98678480071273E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999402730429883	WITHOUT_CLASSIFICATION	5.972695701176315E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999687953263227	WITHOUT_CLASSIFICATION	3.1204673677297976E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998228562496154	WITHOUT_CLASSIFICATION	1.771437503846089E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999910905669211	WITHOUT_CLASSIFICATION	8.909433078865283E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999799068832982	WITHOUT_CLASSIFICATION	2.0093116701796717E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741590760143	WITHOUT_CLASSIFICATION	2.584092398582933E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999949088244806	WITHOUT_CLASSIFICATION	5.091175519492008E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970774733182	WITHOUT_CLASSIFICATION	2.922526681812346E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999742809675578	WITHOUT_CLASSIFICATION	2.5719032442132215E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999742809675578	WITHOUT_CLASSIFICATION	2.5719032442132215E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999742809675578	WITHOUT_CLASSIFICATION	2.5719032442132215E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999742809675578	WITHOUT_CLASSIFICATION	2.5719032442132215E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733665491419	WITHOUT_CLASSIFICATION	2.6633450858146516E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9992964215034396	WITHOUT_CLASSIFICATION	7.035784965604317E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999722513687186	WITHOUT_CLASSIFICATION	2.774863128152091E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999818115774317	WITHOUT_CLASSIFICATION	1.8188422568270922E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686769245105	WITHOUT_CLASSIFICATION	3.132307548952949E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750056444382	WITHOUT_CLASSIFICATION	2.4994355561753243E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999833589495857	WITHOUT_CLASSIFICATION	1.664105041429594E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.999992509938159	WITHOUT_CLASSIFICATION	7.490061841035802E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999588615797325	WITHOUT_CLASSIFICATION	4.113842026748738E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999704674703944	WITHOUT_CLASSIFICATION	2.9532529605529846E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999970668575454	WITHOUT_CLASSIFICATION	2.933142454592474E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999809469954002	WITHOUT_CLASSIFICATION	1.9053004599795132E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998773675004677	WITHOUT_CLASSIFICATION	1.2263249953227027E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999924419193287	WITHOUT_CLASSIFICATION	7.558080671274603E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999924419193287	WITHOUT_CLASSIFICATION	7.558080671274603E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999985916528493	WITHOUT_CLASSIFICATION	1.4083471507051128E-5	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999874051785593	WITHOUT_CLASSIFICATION	1.259482144069946E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999991255366829	WITHOUT_CLASSIFICATION	8.744633171543131E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686450981746	WITHOUT_CLASSIFICATION	3.135490182543415E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999924099096699	WITHOUT_CLASSIFICATION	7.590090330222184E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718218882874	WITHOUT_CLASSIFICATION	2.8178111712676575E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999981862405783	WITHOUT_CLASSIFICATION	1.8137594216401722E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999979534310736	WITHOUT_CLASSIFICATION	2.046568926393121E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999972251296644	WITHOUT_CLASSIFICATION	2.7748703355516653E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999559366649682	WITHOUT_CLASSIFICATION	4.4063335031859394E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685977199174	WITHOUT_CLASSIFICATION	3.140228008261551E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999551143845563	WITHOUT_CLASSIFICATION	4.488561544365494E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999982001179765	WITHOUT_CLASSIFICATION	1.7998820234996653E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999947340088359	WITHOUT_CLASSIFICATION	5.265991164230743E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999803612227064	WITHOUT_CLASSIFICATION	1.963877729358772E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999777752149802	WITHOUT_CLASSIFICATION	2.2224785019723047E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999786201019738	WITHOUT_CLASSIFICATION	2.1379898026113033E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999952118494387	WITHOUT_CLASSIFICATION	4.788150561285744E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999997876971995	WITHOUT_CLASSIFICATION	2.1230280049143646E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999752989481304	WITHOUT_CLASSIFICATION	2.470105186952456E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995876321391	WITHOUT_CLASSIFICATION	4.123678608339327E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998879125523458	WITHOUT_CLASSIFICATION	1.1208744765420036E-4	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999953703106242	WITHOUT_CLASSIFICATION	4.62968937569276E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999688847069848	WITHOUT_CLASSIFICATION	3.111529301524859E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999687750711519	WITHOUT_CLASSIFICATION	3.1224928848087954E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998175281529318	WITHOUT_CLASSIFICATION	1.8247184706814246E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999812825637604	WITHOUT_CLASSIFICATION	1.871743623961676E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999932917689062	WITHOUT_CLASSIFICATION	6.708231093796044E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999989099900031	WITHOUT_CLASSIFICATION	1.090009996902936E-6	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999233001987313	WITHOUT_CLASSIFICATION	7.669980126875598E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9996747592285531	WITHOUT_CLASSIFICATION	3.252407714469245E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999951969787032	WITHOUT_CLASSIFICATION	4.803021296807848E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9950824304455146	WITHOUT_CLASSIFICATION	0.004917569554485461	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999609750382	WITHOUT_CLASSIFICATION	3.902496179801246E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999856553552132	WITHOUT_CLASSIFICATION	1.4344644786703063E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999776872864324	WITHOUT_CLASSIFICATION	2.231271356757272E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998717419549545	WITHOUT_CLASSIFICATION	1.282580450453702E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999782548421304	WITHOUT_CLASSIFICATION	2.174515786961062E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999842214648732	WITHOUT_CLASSIFICATION	1.5778535126706856E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999380839984419	WITHOUT_CLASSIFICATION	6.19160015580514E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999993471187876	WITHOUT_CLASSIFICATION	6.5288121241212405E-6	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999950642554701	WITHOUT_CLASSIFICATION	4.935744529906066E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996520534066717	WITHOUT_CLASSIFICATION	3.4794659332830795E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999563251528664	WITHOUT_CLASSIFICATION	4.367484713367073E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999318866350088	WITHOUT_CLASSIFICATION	6.811336499119188E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999809001267013	WITHOUT_CLASSIFICATION	1.9099873298805112E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9995344839065583	WITHOUT_CLASSIFICATION	4.655160934416501E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999332692805081	WITHOUT_CLASSIFICATION	6.673071949199968E-5	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9984560057499747	WITHOUT_CLASSIFICATION	0.0015439942500252435	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999842795582244	WITHOUT_CLASSIFICATION	1.5720441775556423E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9970608658583395	WITHOUT_CLASSIFICATION	0.0029391341416603544	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999685360463983	WITHOUT_CLASSIFICATION	3.146395360157063E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999964449887218	WITHOUT_CLASSIFICATION	3.5550112783202906E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996993734871319	WITHOUT_CLASSIFICATION	3.006265128680136E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999253565067939	WITHOUT_CLASSIFICATION	7.464349320606176E-5	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999847285788097	WITHOUT_CLASSIFICATION	1.5271421190269257E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9993038751797504	WITHOUT_CLASSIFICATION	6.961248202496447E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999922119090165	WITHOUT_CLASSIFICATION	7.788090983413294E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999564257053624	WITHOUT_CLASSIFICATION	4.3574294637715064E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997545328360156	WITHOUT_CLASSIFICATION	2.4546716398444573E-4	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999316998098328	WITHOUT_CLASSIFICATION	6.830019016720497E-5	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999863305528611	WITHOUT_CLASSIFICATION	1.3669447138846405E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999973136642858	WITHOUT_CLASSIFICATION	2.6863357141925303E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999559167852	WITHOUT_CLASSIFICATION	4.408321479931663E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9998834965437772	WITHOUT_CLASSIFICATION	1.1650345622273599E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9994470472520547	WITHOUT_CLASSIFICATION	5.52952747945239E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999912604871398	WITHOUT_CLASSIFICATION	8.739512860303937E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997644232295355	WITHOUT_CLASSIFICATION	2.3557677046440924E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999987835590098	WITHOUT_CLASSIFICATION	1.2164409901955566E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999977300576771	WITHOUT_CLASSIFICATION	2.269942322897871E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999989902584906	WITHOUT_CLASSIFICATION	1.0097415093709432E-6	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999969501289735	WITHOUT_CLASSIFICATION	3.049871026388272E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999057137481433	WITHOUT_CLASSIFICATION	9.428625185667869E-5	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999552239513001	WITHOUT_CLASSIFICATION	4.477604870000181E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999940344571833	WITHOUT_CLASSIFICATION	5.965542816714134E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999704260369879	WITHOUT_CLASSIFICATION	2.957396301210677E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9998775555268086	WITHOUT_CLASSIFICATION	1.2244447319143686E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999410630442	WITHOUT_CLASSIFICATION	5.893695580660322E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999138622561908	WITHOUT_CLASSIFICATION	8.613774380921832E-5	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.99990513986835	WITHOUT_CLASSIFICATION	9.486013165007914E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9997097468663421	WITHOUT_CLASSIFICATION	2.9025313365797534E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999301566630531	WITHOUT_CLASSIFICATION	6.984333694697327E-5	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999993865725346	WITHOUT_CLASSIFICATION	6.1342746540521785E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999784273861625	WITHOUT_CLASSIFICATION	2.1572613837565873E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999886382341425	WITHOUT_CLASSIFICATION	1.136176585752862E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999323565470276	WITHOUT_CLASSIFICATION	6.764345297241072E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999902190202237	WITHOUT_CLASSIFICATION	9.780979776304783E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999845440482125	WITHOUT_CLASSIFICATION	1.5455951787502235E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999637429818842	WITHOUT_CLASSIFICATION	3.625701811581071E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998208219800427	WITHOUT_CLASSIFICATION	1.7917801995732312E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998756053108715	WITHOUT_CLASSIFICATION	1.2439468912861323E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998607382682505	WITHOUT_CLASSIFICATION	1.3926173174956313E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999943551478066	WITHOUT_CLASSIFICATION	5.644852193388204E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999755706640807	WITHOUT_CLASSIFICATION	2.4429335919250142E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999780449534283	WITHOUT_CLASSIFICATION	2.1955046571727024E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999979919376357	WITHOUT_CLASSIFICATION	2.0080623642959622E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999007113710211	WITHOUT_CLASSIFICATION	9.928862897898516E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999933504517562	WITHOUT_CLASSIFICATION	6.649548243782887E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999674934277317	WITHOUT_CLASSIFICATION	3.2506572268267506E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999674934277317	WITHOUT_CLASSIFICATION	3.2506572268267506E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998004590161577	WITHOUT_CLASSIFICATION	1.9954098384225436E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998486538506707	WITHOUT_CLASSIFICATION	1.513461493293429E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999687315298776	WITHOUT_CLASSIFICATION	3.1268470122477635E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9997140215125624	WITHOUT_CLASSIFICATION	2.859784874376356E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999876672070463	WITHOUT_CLASSIFICATION	1.2332792953576356E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9987054021619652	WITHOUT_CLASSIFICATION	0.0012945978380347475	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9991930650607052	WITHOUT_CLASSIFICATION	8.069349392949017E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999928160029492	WITHOUT_CLASSIFICATION	7.1839970508442854E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9994176831613135	WITHOUT_CLASSIFICATION	5.823168386865074E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999932639475494	WITHOUT_CLASSIFICATION	6.736052450609275E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999778514767808	WITHOUT_CLASSIFICATION	2.2148523219348265E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998753560727578	WITHOUT_CLASSIFICATION	1.24643927242228E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999978356724194	WITHOUT_CLASSIFICATION	2.1643275805424516E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999964682183341	WITHOUT_CLASSIFICATION	3.5317816657966723E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999397431438852	WITHOUT_CLASSIFICATION	6.0256856114776714E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999844379220323	WITHOUT_CLASSIFICATION	1.5562077967761846E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999844379220323	WITHOUT_CLASSIFICATION	1.5562077967761846E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999930218042521	WITHOUT_CLASSIFICATION	6.978195747908984E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999206286451838	WITHOUT_CLASSIFICATION	7.937135481615008E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999925193663572	WITHOUT_CLASSIFICATION	7.480633642852583E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999801293608714	WITHOUT_CLASSIFICATION	1.9870639128535955E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999941986046069	WITHOUT_CLASSIFICATION	5.801395393115327E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999905223813638	WITHOUT_CLASSIFICATION	9.477618636210245E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999905223813638	WITHOUT_CLASSIFICATION	9.477618636210245E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999621153230885	WITHOUT_CLASSIFICATION	3.788467691144134E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999755492812978	WITHOUT_CLASSIFICATION	2.4450718702258874E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999611877690852	WITHOUT_CLASSIFICATION	3.8812230914751676E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999332133137	WITHOUT_CLASSIFICATION	6.678668627091082E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999636325479724	WITHOUT_CLASSIFICATION	3.636745202769151E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999965165334541	WITHOUT_CLASSIFICATION	3.4834665458114244E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999956606369418	WITHOUT_CLASSIFICATION	4.33936305823262E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982920312838	WITHOUT_CLASSIFICATION	1.7079687162264278E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998388010532165	WITHOUT_CLASSIFICATION	1.6119894678348653E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999963781554306	WITHOUT_CLASSIFICATION	3.62184456934877E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999612440464921	WITHOUT_CLASSIFICATION	3.875595350788558E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9963820259490259	WITHOUT_CLASSIFICATION	0.0036179740509740725	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999881936645415	WITHOUT_CLASSIFICATION	1.180633545854113E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997324584706322	WITHOUT_CLASSIFICATION	2.675415293677512E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999195441981579	WITHOUT_CLASSIFICATION	8.04558018421623E-5	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999717985970917	WITHOUT_CLASSIFICATION	2.8201402908298132E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999103238952922	WITHOUT_CLASSIFICATION	8.967610470782215E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999698246899993	WITHOUT_CLASSIFICATION	3.0175310000683487E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999664911264469	WITHOUT_CLASSIFICATION	3.3508873553212024E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999825877222819	WITHOUT_CLASSIFICATION	1.7412277718168075E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999246781936311	WITHOUT_CLASSIFICATION	7.532180636892258E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999879628744406	WITHOUT_CLASSIFICATION	1.2037125559477671E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999709376762835	WITHOUT_CLASSIFICATION	2.9062323716454288E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999586315608003	WITHOUT_CLASSIFICATION	4.1368439199724747E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999454508960276	WITHOUT_CLASSIFICATION	5.4549103972330686E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999892733618739	WITHOUT_CLASSIFICATION	1.0726638125984647E-5	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999943125676138	WITHOUT_CLASSIFICATION	5.6874323862045935E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991967039399	WITHOUT_CLASSIFICATION	8.03296060201109E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998519555232876	WITHOUT_CLASSIFICATION	1.480444767124511E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999380468746338	WITHOUT_CLASSIFICATION	6.195312536612359E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999587969332143	WITHOUT_CLASSIFICATION	4.120306678567945E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9994899532130797	WITHOUT_CLASSIFICATION	5.100467869203462E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998212045735583	WITHOUT_CLASSIFICATION	1.787954264416526E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998374050631725	WITHOUT_CLASSIFICATION	1.625949368275149E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999654555348675	WITHOUT_CLASSIFICATION	3.454446513257393E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999956388817977	WITHOUT_CLASSIFICATION	4.36111820234259E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999933299589502	WITHOUT_CLASSIFICATION	6.6700410497785535E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995961952588889	WITHOUT_CLASSIFICATION	4.038047411112225E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999997491104832	WITHOUT_CLASSIFICATION	2.508895168064058E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999945542882449	WITHOUT_CLASSIFICATION	5.445711755085907E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998037416851624	WITHOUT_CLASSIFICATION	1.962583148376564E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999591152386481	WITHOUT_CLASSIFICATION	4.08847613518247E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999991047304072	WITHOUT_CLASSIFICATION	8.952695927882989E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997926482214956	WITHOUT_CLASSIFICATION	2.0735177850437125E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999933299589502	WITHOUT_CLASSIFICATION	6.6700410497785535E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995961952588889	WITHOUT_CLASSIFICATION	4.038047411112225E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9990978487297588	WITHOUT_CLASSIFICATION	9.02151270241161E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999008114371442	WITHOUT_CLASSIFICATION	9.918856285580469E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999943180412998	WITHOUT_CLASSIFICATION	5.681958700275435E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999709458152808	WITHOUT_CLASSIFICATION	2.905418471923627E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999578227282047	WITHOUT_CLASSIFICATION	4.217727179529573E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998749177228513	WITHOUT_CLASSIFICATION	1.2508227714872833E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998356141652699	WITHOUT_CLASSIFICATION	1.643858347300846E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.999931956846718	WITHOUT_CLASSIFICATION	6.804315328210763E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999927814430084	WITHOUT_CLASSIFICATION	7.218556991591099E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999951183075167	WITHOUT_CLASSIFICATION	4.881692483296784E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999936924714344	WITHOUT_CLASSIFICATION	6.3075285655622735E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999951183075167	WITHOUT_CLASSIFICATION	4.881692483296784E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998084353873649	WITHOUT_CLASSIFICATION	1.9156461263514346E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997213047221175	WITHOUT_CLASSIFICATION	2.7869527788246555E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998084353873649	WITHOUT_CLASSIFICATION	1.9156461263514346E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746480666973	WITHOUT_CLASSIFICATION	1.2535193330267234E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999588966711697	WITHOUT_CLASSIFICATION	4.1103328830359476E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9993529103289907	WITHOUT_CLASSIFICATION	6.470896710093568E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9993529103289907	WITHOUT_CLASSIFICATION	6.470896710093568E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997192120130877	WITHOUT_CLASSIFICATION	2.8078798691226297E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997210090661951	WITHOUT_CLASSIFICATION	2.789909338048346E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997192120130877	WITHOUT_CLASSIFICATION	2.8078798691226297E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998031775641067	WITHOUT_CLASSIFICATION	1.968224358931473E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999110170430265	WITHOUT_CLASSIFICATION	8.898295697344585E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999402180421784	WITHOUT_CLASSIFICATION	5.978195782160421E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9993719930790518	WITHOUT_CLASSIFICATION	6.280069209481584E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999284115733328	WITHOUT_CLASSIFICATION	7.158842666728402E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999381437870483	WITHOUT_CLASSIFICATION	6.1856212951666E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999690016603484	WITHOUT_CLASSIFICATION	3.0998339651596064E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999934239858927	WITHOUT_CLASSIFICATION	6.576014107279927E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999765936427235	WITHOUT_CLASSIFICATION	2.3406357276504425E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999988875063819	WITHOUT_CLASSIFICATION	1.1124936181000085E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999844004814946	WITHOUT_CLASSIFICATION	1.559951850540905E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999895505905624	WITHOUT_CLASSIFICATION	1.0449409437533E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999972756954763	WITHOUT_CLASSIFICATION	2.7243045237881014E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999787554646568	WITHOUT_CLASSIFICATION	2.1244535343211884E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999950801580896	WITHOUT_CLASSIFICATION	4.919841910434693E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999876743308298	WITHOUT_CLASSIFICATION	1.2325669170191027E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999389673036804	WITHOUT_CLASSIFICATION	6.103269631972589E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999808243206981	WITHOUT_CLASSIFICATION	1.9175679301874532E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9991288930903128	WITHOUT_CLASSIFICATION	8.711069096870723E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999595414474723	WITHOUT_CLASSIFICATION	4.0458552527705695E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999517434490295	WITHOUT_CLASSIFICATION	4.8256550970634026E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995109259684644	WITHOUT_CLASSIFICATION	4.890740315357208E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999828216864346	WITHOUT_CLASSIFICATION	1.7178313565390227E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999402180421784	WITHOUT_CLASSIFICATION	5.978195782160421E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999894033304072	WITHOUT_CLASSIFICATION	1.0596669592756624E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998656587102025	WITHOUT_CLASSIFICATION	1.34341289797492E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9974117137620284	WITHOUT_CLASSIFICATION	0.002588286237971517	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999392901827882	WITHOUT_CLASSIFICATION	6.070981721184999E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999962987519116	WITHOUT_CLASSIFICATION	3.7012480882218902E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999028870348287	WITHOUT_CLASSIFICATION	9.711296517133005E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998031775641067	WITHOUT_CLASSIFICATION	1.968224358931473E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998031775641067	WITHOUT_CLASSIFICATION	1.968224358931473E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999939186898753	WITHOUT_CLASSIFICATION	6.081310124693103E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998961893155298	WITHOUT_CLASSIFICATION	1.0381068447019969E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999448108408239	WITHOUT_CLASSIFICATION	5.518915917612062E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999939628164554	WITHOUT_CLASSIFICATION	6.0371835446169075E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9988087482142672	WITHOUT_CLASSIFICATION	0.001191251785732714	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999925344701027	WITHOUT_CLASSIFICATION	7.465529897272912E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999965523577911	WITHOUT_CLASSIFICATION	3.447642208875996E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999904395145702	WITHOUT_CLASSIFICATION	9.560485429897825E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999867106671281	WITHOUT_CLASSIFICATION	1.328933287189845E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937555097902	WITHOUT_CLASSIFICATION	6.244490209769053E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999765936427235	WITHOUT_CLASSIFICATION	2.3406357276504425E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999382059623926	WITHOUT_CLASSIFICATION	6.179403760738674E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937555097902	WITHOUT_CLASSIFICATION	6.244490209769053E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999997351145721	WITHOUT_CLASSIFICATION	2.6488542789721902E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999996044190961	WITHOUT_CLASSIFICATION	3.95580903962476E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999317356896967	WITHOUT_CLASSIFICATION	6.826431030324083E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998329706625964	WITHOUT_CLASSIFICATION	1.670293374036249E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999644964862474	WITHOUT_CLASSIFICATION	3.550351375260505E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999995310747832	WITHOUT_CLASSIFICATION	4.6892521684601965E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999984101889547	WITHOUT_CLASSIFICATION	1.5898110452077411E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999780404284353	WITHOUT_CLASSIFICATION	2.195957156472446E-5	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999876004538353	WITHOUT_CLASSIFICATION	1.2399546164618991E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999541125127738	WITHOUT_CLASSIFICATION	4.588748722617662E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999091652905876	WITHOUT_CLASSIFICATION	9.083470941249211E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937555097902	WITHOUT_CLASSIFICATION	6.244490209769053E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999644964862474	WITHOUT_CLASSIFICATION	3.550351375260505E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999984101889547	WITHOUT_CLASSIFICATION	1.5898110452077411E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999157946721493	WITHOUT_CLASSIFICATION	8.420532785064386E-5	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999999249157153	WITHOUT_CLASSIFICATION	7.508428470650995E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999801756818522	WITHOUT_CLASSIFICATION	1.982431814782377E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997628236692818	WITHOUT_CLASSIFICATION	2.3717633071822664E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999954714873903	WITHOUT_CLASSIFICATION	4.528512609728932E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999933289105609	WITHOUT_CLASSIFICATION	6.671089439054395E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999997351145721	WITHOUT_CLASSIFICATION	2.6488542789721902E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997552044388888	WITHOUT_CLASSIFICATION	2.44795561111195E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999389544347365	WITHOUT_CLASSIFICATION	6.104556526348891E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997270969128872	WITHOUT_CLASSIFICATION	2.7290308711279475E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998200362940052	WITHOUT_CLASSIFICATION	1.7996370599489964E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998167767408117	WITHOUT_CLASSIFICATION	1.8322325918824348E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999740725809253	WITHOUT_CLASSIFICATION	2.5927419074707517E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746480666973	WITHOUT_CLASSIFICATION	1.2535193330267234E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897928266712	WITHOUT_CLASSIFICATION	1.020717332871293E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999403264708793	WITHOUT_CLASSIFICATION	5.967352912069063E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998656648301676	WITHOUT_CLASSIFICATION	1.3433516983233683E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999699435458846	WITHOUT_CLASSIFICATION	3.005645411542927E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999566297043002	WITHOUT_CLASSIFICATION	4.337029569986856E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999941792191314	WITHOUT_CLASSIFICATION	5.8207808686429834E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999933924367304	WITHOUT_CLASSIFICATION	6.60756326954326E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999618074965451	WITHOUT_CLASSIFICATION	3.8192503454890885E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999933289105609	WITHOUT_CLASSIFICATION	6.671089439054395E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999381734583987	WITHOUT_CLASSIFICATION	6.182654160122021E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999787205946175	WITHOUT_CLASSIFICATION	2.1279405382590703E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9998132837389015	WITHOUT_CLASSIFICATION	1.867162610984019E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999976298017336	WITHOUT_CLASSIFICATION	2.370198266455709E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999262227701344	WITHOUT_CLASSIFICATION	7.377722986555551E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998188053294675	WITHOUT_CLASSIFICATION	1.8119467053256185E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998563830073363	WITHOUT_CLASSIFICATION	1.43616992663727E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999357940073158	WITHOUT_CLASSIFICATION	6.420599268420862E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999493786746666	WITHOUT_CLASSIFICATION	5.062132533336863E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998864432237421	WITHOUT_CLASSIFICATION	1.1355677625799947E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999497976318893	WITHOUT_CLASSIFICATION	5.020236811071073E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999430574563258	WITHOUT_CLASSIFICATION	5.694254367408295E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999975406044895	WITHOUT_CLASSIFICATION	2.45939551050507E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999884684822622	WITHOUT_CLASSIFICATION	1.1531517737839044E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999784202271842	WITHOUT_CLASSIFICATION	2.15797728159117E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999960956772224	WITHOUT_CLASSIFICATION	3.904322777613925E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999667559423477	WITHOUT_CLASSIFICATION	3.3244057652333505E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996719971429147	WITHOUT_CLASSIFICATION	3.280028570853275E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999652007694841	WITHOUT_CLASSIFICATION	3.479923051594197E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999748085956909	WITHOUT_CLASSIFICATION	2.5191404309104615E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999993992330726	WITHOUT_CLASSIFICATION	6.007669274054522E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999564410087524	WITHOUT_CLASSIFICATION	4.355899124760602E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.995627068877174	WITHOUT_CLASSIFICATION	0.004372931122825972	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9991936064977174	WITHOUT_CLASSIFICATION	8.063935022826944E-4	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996983971039414	WITHOUT_CLASSIFICATION	3.016028960586388E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999712941154382	WITHOUT_CLASSIFICATION	2.8705884561813314E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994701876502283	WITHOUT_CLASSIFICATION	5.298123497716167E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999797365998445	WITHOUT_CLASSIFICATION	2.0263400155380374E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999913744920098	WITHOUT_CLASSIFICATION	8.625507990217302E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.99998440893842	WITHOUT_CLASSIFICATION	1.5591061580022403E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9994152288479751	WITHOUT_CLASSIFICATION	5.847711520250067E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999944631907559	WITHOUT_CLASSIFICATION	5.536809244073005E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999577849565573	WITHOUT_CLASSIFICATION	4.2215043442609476E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999731609227975	WITHOUT_CLASSIFICATION	2.6839077202549338E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999401272475787	WITHOUT_CLASSIFICATION	5.987275242127241E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999577849565573	WITHOUT_CLASSIFICATION	4.2215043442609476E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999944631907559	WITHOUT_CLASSIFICATION	5.536809244073005E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999731609227975	WITHOUT_CLASSIFICATION	2.6839077202549338E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999464554592571	WITHOUT_CLASSIFICATION	5.354454074301639E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999812513289568	WITHOUT_CLASSIFICATION	1.8748671043192754E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995486751782684	WITHOUT_CLASSIFICATION	4.51324821731557E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999913736622753	WITHOUT_CLASSIFICATION	8.62633772468586E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999986144168983	WITHOUT_CLASSIFICATION	1.3855831016240137E-6	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9976412931906031	WITHOUT_CLASSIFICATION	0.002358706809396888	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999335930873891	WITHOUT_CLASSIFICATION	6.640691261089232E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998456634715812	WITHOUT_CLASSIFICATION	1.543365284187442E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999848228198935	WITHOUT_CLASSIFICATION	1.5177180106459173E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999259924735155	WITHOUT_CLASSIFICATION	7.400752648441733E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999937766901931	WITHOUT_CLASSIFICATION	6.223309806844849E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999131276775027	WITHOUT_CLASSIFICATION	8.687232249720368E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999976049216235	WITHOUT_CLASSIFICATION	2.395078376496609E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999198554954332	WITHOUT_CLASSIFICATION	8.014450456673821E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999677534174504	WITHOUT_CLASSIFICATION	3.2246582549569906E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999849141682047	WITHOUT_CLASSIFICATION	1.5085831795470635E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999668178518408	WITHOUT_CLASSIFICATION	3.318214815922588E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999984883914877	WITHOUT_CLASSIFICATION	1.511608512248278E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999858696644852	WITHOUT_CLASSIFICATION	1.4130335514661393E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999652057961219	WITHOUT_CLASSIFICATION	3.479420387811723E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999622314254908	WITHOUT_CLASSIFICATION	3.7768574509238564E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999970720073527	WITHOUT_CLASSIFICATION	2.9279926474401576E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998887557292727	WITHOUT_CLASSIFICATION	1.1124427072722893E-4	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999777362634085	WITHOUT_CLASSIFICATION	2.2263736591622092E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999652057961219	WITHOUT_CLASSIFICATION	3.479420387811723E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999652057961219	WITHOUT_CLASSIFICATION	3.479420387811723E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999952939210754	WITHOUT_CLASSIFICATION	4.706078924549109E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999952939210754	WITHOUT_CLASSIFICATION	4.706078924549109E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999775285257987	WITHOUT_CLASSIFICATION	2.2471474201401442E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999668178518408	WITHOUT_CLASSIFICATION	3.318214815922588E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998945447953125	WITHOUT_CLASSIFICATION	1.054552046875215E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999901363528246	WITHOUT_CLASSIFICATION	9.863647175302408E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998985073956433	WITHOUT_CLASSIFICATION	1.0149260435666569E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998985073956433	WITHOUT_CLASSIFICATION	1.0149260435666569E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999573706781133	WITHOUT_CLASSIFICATION	4.262932188661904E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9992194106064752	WITHOUT_CLASSIFICATION	7.805893935246836E-4	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999890385100726	WITHOUT_CLASSIFICATION	1.096148992742656E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.999910142003013	WITHOUT_CLASSIFICATION	8.985799698696685E-5	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999021796298578	WITHOUT_CLASSIFICATION	9.782037014219124E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999756260363	WITHOUT_CLASSIFICATION	2.4373963757434644E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999757734688549	WITHOUT_CLASSIFICATION	2.4226531145160076E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998431179941046	WITHOUT_CLASSIFICATION	1.5688200589545042E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999224271907238	WITHOUT_CLASSIFICATION	7.757280927622693E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999957432063692	WITHOUT_CLASSIFICATION	4.256793630766544E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999405538582161	WITHOUT_CLASSIFICATION	5.9446141783814195E-5	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998010739180783	WITHOUT_CLASSIFICATION	1.9892608192184706E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998022278579111	WITHOUT_CLASSIFICATION	1.9777214208890605E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.99993802980792	WITHOUT_CLASSIFICATION	6.197019207994715E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9993931365970676	WITHOUT_CLASSIFICATION	6.068634029323083E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999980138308489	WITHOUT_CLASSIFICATION	1.9861691511073817E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720506452238	WITHOUT_CLASSIFICATION	2.7949354776232182E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999930817709549	WITHOUT_CLASSIFICATION	6.918229045046628E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999867435360322	WITHOUT_CLASSIFICATION	1.3256463967787702E-5	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999970664633089	WITHOUT_CLASSIFICATION	2.933536691173863E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999902940188355	WITHOUT_CLASSIFICATION	9.705981164447062E-6	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999227231901334	WITHOUT_CLASSIFICATION	7.727680986664346E-5	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999960027759404	WITHOUT_CLASSIFICATION	3.997224059547458E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999918575828529	WITHOUT_CLASSIFICATION	8.142417147126077E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999708744581278	WITHOUT_CLASSIFICATION	2.9125541872199016E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999886031434918	WITHOUT_CLASSIFICATION	1.1396856508143334E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998864432237421	WITHOUT_CLASSIFICATION	1.1355677625799947E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999260295442243	WITHOUT_CLASSIFICATION	7.39704557757302E-5	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999989154147693	WITHOUT_CLASSIFICATION	1.084585230744697E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687269055509	WITHOUT_CLASSIFICATION	3.127309444895079E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968048574633	WITHOUT_CLASSIFICATION	3.195142536700438E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999406966164316	WITHOUT_CLASSIFICATION	5.930338356843526E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999406966164316	WITHOUT_CLASSIFICATION	5.930338356843526E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999885596635976	WITHOUT_CLASSIFICATION	1.1440336402302213E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.999993530200326	WITHOUT_CLASSIFICATION	6.46979967400629E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999932465823939	WITHOUT_CLASSIFICATION	6.7534176062494E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999932465823939	WITHOUT_CLASSIFICATION	6.7534176062494E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999227544403284	WITHOUT_CLASSIFICATION	7.724555967150629E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999230301135595	WITHOUT_CLASSIFICATION	7.69698864404485E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999720904613395	WITHOUT_CLASSIFICATION	2.790953866044028E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999402730429883	WITHOUT_CLASSIFICATION	5.972695701176315E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999420956493044	WITHOUT_CLASSIFICATION	5.790435069556055E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9991316523508854	WITHOUT_CLASSIFICATION	8.683476491146327E-4	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999827267286153	WITHOUT_CLASSIFICATION	1.7273271384721975E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999758514093704	WITHOUT_CLASSIFICATION	2.414859062963136E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999758514093704	WITHOUT_CLASSIFICATION	2.414859062963136E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999990946201762	WITHOUT_CLASSIFICATION	9.053798238027221E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999578352774317	WITHOUT_CLASSIFICATION	4.216472256837233E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999578352774317	WITHOUT_CLASSIFICATION	4.216472256837233E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999793695041667	WITHOUT_CLASSIFICATION	2.063049583338114E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999809972264634	WITHOUT_CLASSIFICATION	1.9002773536583497E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999960664327896	WITHOUT_CLASSIFICATION	3.933567210471158E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999874447868073	WITHOUT_CLASSIFICATION	1.2555213192526296E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998075054399205	WITHOUT_CLASSIFICATION	1.9249456007953871E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999735388667402	WITHOUT_CLASSIFICATION	2.646113325972961E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9995852770939256	WITHOUT_CLASSIFICATION	4.147229060743165E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999955498484036	WITHOUT_CLASSIFICATION	4.450151596410936E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996963253049137	WITHOUT_CLASSIFICATION	3.03674695086265E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999958885347077	WITHOUT_CLASSIFICATION	4.111465292320122E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999897171084541	WITHOUT_CLASSIFICATION	1.0282891546004566E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999382205932937	WITHOUT_CLASSIFICATION	6.1779406706286E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999382205932937	WITHOUT_CLASSIFICATION	6.1779406706286E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999382205932937	WITHOUT_CLASSIFICATION	6.1779406706286E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999382205932937	WITHOUT_CLASSIFICATION	6.1779406706286E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999741643357175	WITHOUT_CLASSIFICATION	2.5835664282502224E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999273374046099	WITHOUT_CLASSIFICATION	7.266259539008725E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999397400304195	WITHOUT_CLASSIFICATION	6.0259969580478514E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999723291120383	WITHOUT_CLASSIFICATION	2.7670887961696316E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9994023287585365	WITHOUT_CLASSIFICATION	5.976712414634401E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991654906399884	WITHOUT_CLASSIFICATION	8.345093600116394E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997778649405681	WITHOUT_CLASSIFICATION	2.2213505943191863E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995657744469	WITHOUT_CLASSIFICATION	4.342255530486532E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999821425713978	WITHOUT_CLASSIFICATION	1.7857428602248763E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999802258511218	WITHOUT_CLASSIFICATION	1.9774148878282553E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997860169374831	WITHOUT_CLASSIFICATION	2.139830625167545E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9471190583911478	WITHOUT_CLASSIFICATION	0.05288094160885218	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997638871817608	WITHOUT_CLASSIFICATION	2.3611281823929055E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999597879441169	WITHOUT_CLASSIFICATION	4.021205588308356E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997860169374831	WITHOUT_CLASSIFICATION	2.139830625167545E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9870025089059183	WITHOUT_CLASSIFICATION	0.012997491094081612	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999977464042681	WITHOUT_CLASSIFICATION	2.2535957318808298E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999103834405498	WITHOUT_CLASSIFICATION	8.961655945007366E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998703996589342	WITHOUT_CLASSIFICATION	1.296003410657562E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999796144261572	WITHOUT_CLASSIFICATION	2.0385573842802206E-4	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999241134058731	WITHOUT_CLASSIFICATION	7.588659412701664E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999998151440821	WITHOUT_CLASSIFICATION	1.8485591789528779E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999939023213099	WITHOUT_CLASSIFICATION	6.097678690101552E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905613831885	WITHOUT_CLASSIFICATION	9.438616811558911E-6	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999942971067697	WITHOUT_CLASSIFICATION	5.702893230305601E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905613831885	WITHOUT_CLASSIFICATION	9.438616811558911E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999862750343083	WITHOUT_CLASSIFICATION	1.3724965691757621E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998937663168681	WITHOUT_CLASSIFICATION	1.062336831318353E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995765654558633	WITHOUT_CLASSIFICATION	4.23434544136744E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999972525235025	WITHOUT_CLASSIFICATION	2.7474764974794928E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999998012830389	WITHOUT_CLASSIFICATION	1.9871696109756366E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999637432429958	WITHOUT_CLASSIFICATION	3.6256757004134324E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999987102966779	WITHOUT_CLASSIFICATION	1.2897033220990094E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997961761651456	WITHOUT_CLASSIFICATION	2.0382383485436444E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999987102966779	WITHOUT_CLASSIFICATION	1.2897033220990094E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999871159364819	WITHOUT_CLASSIFICATION	1.288406351799041E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999643731567055	WITHOUT_CLASSIFICATION	3.5626843294422615E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999749791256838	WITHOUT_CLASSIFICATION	2.5020874316195995E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9995141737838552	WITHOUT_CLASSIFICATION	4.858262161447945E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999637432429958	WITHOUT_CLASSIFICATION	3.6256757004134324E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997961761651456	WITHOUT_CLASSIFICATION	2.0382383485436444E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999871159364819	WITHOUT_CLASSIFICATION	1.288406351799041E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999569318279623	WITHOUT_CLASSIFICATION	4.3068172037631775E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999403390160277	WITHOUT_CLASSIFICATION	5.966098397219483E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.999975086962954	WITHOUT_CLASSIFICATION	2.491303704608009E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999759621008946	WITHOUT_CLASSIFICATION	2.4037899105346673E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999988563112865	WITHOUT_CLASSIFICATION	1.1436887134943695E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999928242984354	WITHOUT_CLASSIFICATION	7.1757015645648955E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720506452238	WITHOUT_CLASSIFICATION	2.7949354776232182E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999643731567055	WITHOUT_CLASSIFICATION	3.5626843294422615E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999976391262807	WITHOUT_CLASSIFICATION	2.360873719300177E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998246074367813	WITHOUT_CLASSIFICATION	1.7539256321872677E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999979613969804	WITHOUT_CLASSIFICATION	2.0386030196067E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720506452238	WITHOUT_CLASSIFICATION	2.7949354776232182E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999919374568789	WITHOUT_CLASSIFICATION	8.062543121106022E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720506452238	WITHOUT_CLASSIFICATION	2.7949354776232182E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999742336215159	WITHOUT_CLASSIFICATION	2.5766378484178223E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999891442788569	WITHOUT_CLASSIFICATION	1.0855721143024394E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998311793062552	WITHOUT_CLASSIFICATION	1.6882069374476668E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999780060121839	WITHOUT_CLASSIFICATION	2.1993987816093955E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998365534566	WITHOUT_CLASSIFICATION	1.6344654340435199E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999933282859778	WITHOUT_CLASSIFICATION	6.6717140223016075E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999914545145008	WITHOUT_CLASSIFICATION	8.54548549917739E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999908415558382	WITHOUT_CLASSIFICATION	9.158444161812158E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997748734917594	WITHOUT_CLASSIFICATION	2.2512650824045425E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9995083030427795	WITHOUT_CLASSIFICATION	4.916969572204166E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999985620160985	WITHOUT_CLASSIFICATION	1.437983901413298E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9995080505617094	WITHOUT_CLASSIFICATION	4.919494382904858E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9975283796610156	WITHOUT_CLASSIFICATION	0.0024716203389843748	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999380814304083	WITHOUT_CLASSIFICATION	6.19185695917182E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999857604233885	WITHOUT_CLASSIFICATION	1.4239576611454873E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997042628007	WITHOUT_CLASSIFICATION	2.9573719929216515E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999957913631106	WITHOUT_CLASSIFICATION	4.208636889389897E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999306207927923	WITHOUT_CLASSIFICATION	6.937920720769708E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999984029185605	WITHOUT_CLASSIFICATION	1.5970814395644569E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999950728740321	WITHOUT_CLASSIFICATION	4.927125967862405E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994139515542465	WITHOUT_CLASSIFICATION	5.860484457535001E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994139515542465	WITHOUT_CLASSIFICATION	5.860484457535001E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999899456967666	WITHOUT_CLASSIFICATION	1.0054303233452825E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999834714366804	WITHOUT_CLASSIFICATION	1.652856331953663E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993359853245875	WITHOUT_CLASSIFICATION	6.64014675412627E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999776909255045	WITHOUT_CLASSIFICATION	2.2309074495505707E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995826291632	WITHOUT_CLASSIFICATION	4.173708367670613E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999993978863533	WITHOUT_CLASSIFICATION	6.021136466945597E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998203367359471	WITHOUT_CLASSIFICATION	1.796632640529496E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9994839986677381	WITHOUT_CLASSIFICATION	5.160013322619474E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.971748895242339	WITHOUT_CLASSIFICATION	0.028251104757661103	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999927581141228	WITHOUT_CLASSIFICATION	7.241885877226429E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996556374943255	WITHOUT_CLASSIFICATION	3.4436250567445475E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9998330544619666	WITHOUT_CLASSIFICATION	1.6694553803348945E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9985553652636192	WITHOUT_CLASSIFICATION	0.0014446347363807838	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999921087575012	WITHOUT_CLASSIFICATION	7.891242498764517E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998064245951	WITHOUT_CLASSIFICATION	1.935754049035284E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997291872140021	WITHOUT_CLASSIFICATION	2.708127859978689E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999685410770774	WITHOUT_CLASSIFICATION	3.1458922922520095E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999685410770774	WITHOUT_CLASSIFICATION	3.1458922922520095E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999967162835944	WITHOUT_CLASSIFICATION	3.283716405641937E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999908415558382	WITHOUT_CLASSIFICATION	9.158444161812158E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9997322193880617	WITHOUT_CLASSIFICATION	2.677806119383755E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996743838776954	WITHOUT_CLASSIFICATION	3.2561612230452505E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999951116347251	WITHOUT_CLASSIFICATION	4.8883652749184485E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999852093361372	WITHOUT_CLASSIFICATION	1.479066386291146E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998865976411646	WITHOUT_CLASSIFICATION	1.1340235883532929E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9993644552858852	WITHOUT_CLASSIFICATION	6.355447141147136E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999723010940603	WITHOUT_CLASSIFICATION	2.7698905939788344E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999138446429527	WITHOUT_CLASSIFICATION	8.615535704734788E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999967290844254	WITHOUT_CLASSIFICATION	3.2709155745645198E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991573968053	WITHOUT_CLASSIFICATION	8.426031947080193E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999805154577253	WITHOUT_CLASSIFICATION	1.9484542274689242E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999445724581588	WITHOUT_CLASSIFICATION	5.542754184112649E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999988285390262	WITHOUT_CLASSIFICATION	1.1714609737968201E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998378523382411	WITHOUT_CLASSIFICATION	1.6214766175901186E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999948582708528	WITHOUT_CLASSIFICATION	5.14172914722893E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999970044861778	WITHOUT_CLASSIFICATION	2.995513822349556E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999999030094201	WITHOUT_CLASSIFICATION	9.69905799000594E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999998558282119	WITHOUT_CLASSIFICATION	1.4417178809837048E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999678802455875	WITHOUT_CLASSIFICATION	3.2119754412553534E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999830240141976	WITHOUT_CLASSIFICATION	1.6975985802407108E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999835875142294	WITHOUT_CLASSIFICATION	1.641248577058284E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999926980106122	WITHOUT_CLASSIFICATION	7.301989387803775E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999541315548254	WITHOUT_CLASSIFICATION	4.5868445174611586E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999910346420825	WITHOUT_CLASSIFICATION	8.965357917501462E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9977808957238125	WITHOUT_CLASSIFICATION	0.00221910427618744	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999138732312769	WITHOUT_CLASSIFICATION	8.612676872308811E-5	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999416910832621	WITHOUT_CLASSIFICATION	5.830891673782468E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997791648594071	WITHOUT_CLASSIFICATION	2.2083514059291118E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999687164126136	WITHOUT_CLASSIFICATION	3.128358738645824E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999699113650377	WITHOUT_CLASSIFICATION	3.0088634962369753E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999706014972258	WITHOUT_CLASSIFICATION	2.9398502774183708E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999873357954532	WITHOUT_CLASSIFICATION	1.2664204546929378E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9955449391605289	WITHOUT_CLASSIFICATION	0.00445506083947113	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991496688796823	WITHOUT_CLASSIFICATION	8.503311203177054E-4	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999882745178221	WITHOUT_CLASSIFICATION	1.17254821777719E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999923888464718	WITHOUT_CLASSIFICATION	7.61115352819156E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999923888464718	WITHOUT_CLASSIFICATION	7.61115352819156E-5	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999813291410133	WITHOUT_CLASSIFICATION	1.8670858986656184E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999895284404828	WITHOUT_CLASSIFICATION	1.0471559517128306E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.998932769186502	WITHOUT_CLASSIFICATION	0.0010672308134980525	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.998932769186502	WITHOUT_CLASSIFICATION	0.0010672308134980525	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999953524231581	WITHOUT_CLASSIFICATION	4.64757684194407E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999691178146979	WITHOUT_CLASSIFICATION	3.088218530215731E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999901742296161	WITHOUT_CLASSIFICATION	9.825770383997011E-6	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999991897024944	WITHOUT_CLASSIFICATION	8.102975056589113E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999971529234085	WITHOUT_CLASSIFICATION	2.8470765915051552E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999925043489951	WITHOUT_CLASSIFICATION	7.495651004937319E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999925043489951	WITHOUT_CLASSIFICATION	7.495651004937319E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999543194462635	WITHOUT_CLASSIFICATION	4.568055373655673E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998031775641067	WITHOUT_CLASSIFICATION	1.968224358931473E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999933293310709	WITHOUT_CLASSIFICATION	6.670668929091004E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999933293310709	WITHOUT_CLASSIFICATION	6.670668929091004E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999946596074217	WITHOUT_CLASSIFICATION	5.34039257828032E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999972514488286	WITHOUT_CLASSIFICATION	2.748551171311803E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999976384356799	WITHOUT_CLASSIFICATION	2.3615643200734557E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999763628571803	WITHOUT_CLASSIFICATION	2.3637142819677984E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999913103642767	WITHOUT_CLASSIFICATION	8.689635723350168E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999933515805042	WITHOUT_CLASSIFICATION	6.648419495731483E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999997871049926	WITHOUT_CLASSIFICATION	2.1289500739709622E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.99999521788496	WITHOUT_CLASSIFICATION	4.7821150399054405E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999950153022565	WITHOUT_CLASSIFICATION	4.984697743408613E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998843538985595	WITHOUT_CLASSIFICATION	1.1564610144055871E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998138443893153	WITHOUT_CLASSIFICATION	1.8615561068469492E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.999803480151083	WITHOUT_CLASSIFICATION	1.9651984891696025E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9997370290663316	WITHOUT_CLASSIFICATION	2.629709336684904E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999982272175206	WITHOUT_CLASSIFICATION	1.7727824793101996E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999933734860638	WITHOUT_CLASSIFICATION	6.626513936228301E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996526290594113	WITHOUT_CLASSIFICATION	3.473709405887589E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999924166594347	WITHOUT_CLASSIFICATION	7.5833405652500945E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999972488346096	WITHOUT_CLASSIFICATION	2.7511653904074373E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999925241829655	WITHOUT_CLASSIFICATION	7.475817034493695E-6	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999671226581582	WITHOUT_CLASSIFICATION	3.287734184165162E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999870654857993	WITHOUT_CLASSIFICATION	1.2934514200677168E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999311971726121	WITHOUT_CLASSIFICATION	6.880282738780128E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9976966196127939	WITHOUT_CLASSIFICATION	0.0023033803872060197	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9993847858828523	WITHOUT_CLASSIFICATION	6.152141171477149E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9993350477815985	WITHOUT_CLASSIFICATION	6.649522184015373E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999964018283316	WITHOUT_CLASSIFICATION	3.5981716683553463E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999906446640456	WITHOUT_CLASSIFICATION	9.355335954385916E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999979775619872	WITHOUT_CLASSIFICATION	2.0224380128853834E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978761492344	WITHOUT_CLASSIFICATION	2.123850765605709E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999093287792891	WITHOUT_CLASSIFICATION	9.067122071084653E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999765910788585	WITHOUT_CLASSIFICATION	2.3408921141518E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999825236049689	WITHOUT_CLASSIFICATION	1.7476395031030243E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999992533881694	WITHOUT_CLASSIFICATION	7.466118306049457E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998021729943888	WITHOUT_CLASSIFICATION	1.9782700561118985E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999709878725246	WITHOUT_CLASSIFICATION	2.9012127475327914E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999941789315732	WITHOUT_CLASSIFICATION	5.821068426815165E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999964884374188	WITHOUT_CLASSIFICATION	3.5115625810955763E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999979057283609	WITHOUT_CLASSIFICATION	2.0942716391143746E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999941611572524	WITHOUT_CLASSIFICATION	5.838842747560391E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999937920991891	WITHOUT_CLASSIFICATION	6.207900810839388E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.999993422219833	WITHOUT_CLASSIFICATION	6.5777801670621024E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999935324582733	WITHOUT_CLASSIFICATION	6.467541726634749E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999993542474924	WITHOUT_CLASSIFICATION	6.45752507495869E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999924007375052	WITHOUT_CLASSIFICATION	7.599262494836952E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999560546904284	WITHOUT_CLASSIFICATION	4.394530957160663E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999970503647576	WITHOUT_CLASSIFICATION	2.9496352424982818E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999974945981735	WITHOUT_CLASSIFICATION	2.505401826496721E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999898193287978	WITHOUT_CLASSIFICATION	1.0180671202149432E-5	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9944179386449591	WITHOUT_CLASSIFICATION	0.005582061355040887	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999986713752865	WITHOUT_CLASSIFICATION	1.3286247134495984E-6	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999985810006784	WITHOUT_CLASSIFICATION	1.41899932152526E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999775063762384	WITHOUT_CLASSIFICATION	2.249362376162133E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999980376160676	WITHOUT_CLASSIFICATION	1.9623839323460225E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999865597281311	WITHOUT_CLASSIFICATION	1.3440271868870225E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999946883688265	WITHOUT_CLASSIFICATION	5.311631173475703E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998308688940913	WITHOUT_CLASSIFICATION	1.6913110590870698E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991154343554	WITHOUT_CLASSIFICATION	8.845656445935949E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991154343554	WITHOUT_CLASSIFICATION	8.845656445935949E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999806368791208	WITHOUT_CLASSIFICATION	1.9363120879248225E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999868442550557	WITHOUT_CLASSIFICATION	1.3155744944266296E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999951173851871	WITHOUT_CLASSIFICATION	4.882614812880686E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999966582953822	WITHOUT_CLASSIFICATION	3.3417046177304167E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999775202973955	WITHOUT_CLASSIFICATION	2.247970260459767E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996095177754097	WITHOUT_CLASSIFICATION	3.9048222459026397E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999942282200317	WITHOUT_CLASSIFICATION	5.771779968220141E-6	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997635105108	WITHOUT_CLASSIFICATION	2.364894891890595E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999757073560165	WITHOUT_CLASSIFICATION	2.4292643983592032E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999894156251298	WITHOUT_CLASSIFICATION	1.0584374870134618E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999865249645097	WITHOUT_CLASSIFICATION	1.3475035490369792E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9992403258896678	WITHOUT_CLASSIFICATION	7.596741103321596E-4	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974790833972	WITHOUT_CLASSIFICATION	2.5209166028781277E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998398478213523	WITHOUT_CLASSIFICATION	1.6015217864774004E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997311007763863	WITHOUT_CLASSIFICATION	2.6889922361374163E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997311007763863	WITHOUT_CLASSIFICATION	2.6889922361374163E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999828017055115	WITHOUT_CLASSIFICATION	1.7198294488515208E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999795373322685	WITHOUT_CLASSIFICATION	2.0462667731502444E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998664295771953	WITHOUT_CLASSIFICATION	1.3357042280470768E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999996017588819	WITHOUT_CLASSIFICATION	3.982411181847306E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999809780047766	WITHOUT_CLASSIFICATION	1.902199522343798E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747844905079	WITHOUT_CLASSIFICATION	2.521550949202516E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998657677154656	WITHOUT_CLASSIFICATION	1.3423228453444123E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999742572494276	WITHOUT_CLASSIFICATION	2.574275057252788E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999984974135758	WITHOUT_CLASSIFICATION	1.5025864242687872E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997007694272964	WITHOUT_CLASSIFICATION	2.992305727035746E-4	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999944076058862	WITHOUT_CLASSIFICATION	5.592394113774975E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997850778752729	WITHOUT_CLASSIFICATION	2.149221247270367E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999969828119054	WITHOUT_CLASSIFICATION	3.0171880945941E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999875297972564	WITHOUT_CLASSIFICATION	1.2470202743698855E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999563770823269	WITHOUT_CLASSIFICATION	4.362291767316337E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999971698114067	WITHOUT_CLASSIFICATION	2.830188593328893E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999693044871311	WITHOUT_CLASSIFICATION	3.069551286891062E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999650332967879	WITHOUT_CLASSIFICATION	3.496670321216553E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999470229286543	WITHOUT_CLASSIFICATION	5.297707134573185E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999980761188672	WITHOUT_CLASSIFICATION	1.9238811328033E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999991200335378	WITHOUT_CLASSIFICATION	8.79966462197379E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997938647918	WITHOUT_CLASSIFICATION	2.061352081447139E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999929168644663	WITHOUT_CLASSIFICATION	7.0831355337208835E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999380126145736	WITHOUT_CLASSIFICATION	6.198738542634625E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998880109375087	WITHOUT_CLASSIFICATION	1.1198906249132533E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999825138658714	WITHOUT_CLASSIFICATION	1.7486134128589134E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999975898583509	WITHOUT_CLASSIFICATION	2.4101416491078453E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999939393589509	WITHOUT_CLASSIFICATION	6.0606410490829E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999785667720462	WITHOUT_CLASSIFICATION	2.1433227953701186E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999924364261713	WITHOUT_CLASSIFICATION	7.5635738287807E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9998114198673742	WITHOUT_CLASSIFICATION	1.8858013262586126E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999980591885426	WITHOUT_CLASSIFICATION	1.940811457504471E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999876347339667	WITHOUT_CLASSIFICATION	1.2365266033420016E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999889770020687	WITHOUT_CLASSIFICATION	1.1022997931262537E-5	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999541550300762	WITHOUT_CLASSIFICATION	4.584496992388502E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999956185041723	WITHOUT_CLASSIFICATION	4.381495827735228E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999832093198537	WITHOUT_CLASSIFICATION	1.6790680146253876E-5	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999828338908853	WITHOUT_CLASSIFICATION	1.716610911468751E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999636236408446	WITHOUT_CLASSIFICATION	3.637635915540674E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999975528804833	WITHOUT_CLASSIFICATION	2.4471195167183677E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999622441100778	WITHOUT_CLASSIFICATION	3.775588992216032E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999622441100778	WITHOUT_CLASSIFICATION	3.775588992216032E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999780155510963	WITHOUT_CLASSIFICATION	2.1984448903678635E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999888938591209	WITHOUT_CLASSIFICATION	1.1106140879074658E-5	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9994595405381391	WITHOUT_CLASSIFICATION	5.40459461860967E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999776120346672	WITHOUT_CLASSIFICATION	2.2387965332864162E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999854496038658	WITHOUT_CLASSIFICATION	1.4550396134116713E-5	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999768347724157	WITHOUT_CLASSIFICATION	2.3165227584300773E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999728688102958	WITHOUT_CLASSIFICATION	2.7131189704241195E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9994431272087773	WITHOUT_CLASSIFICATION	5.568727912228212E-4	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999996251984964	WITHOUT_CLASSIFICATION	3.7480150360046806E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693772284899	WITHOUT_CLASSIFICATION	3.062277151011987E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692929450362	WITHOUT_CLASSIFICATION	3.070705496373473E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990877012102363	WITHOUT_CLASSIFICATION	9.122987897637575E-4	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9970785865533924	WITHOUT_CLASSIFICATION	0.0029214134466075225	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999986450942268	WITHOUT_CLASSIFICATION	1.3549057732818945E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999804466507454	WITHOUT_CLASSIFICATION	1.9553349254592E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9986336448316746	WITHOUT_CLASSIFICATION	0.0013663551683253004	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999979282563478	WITHOUT_CLASSIFICATION	2.0717436520734504E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999991735978686	WITHOUT_CLASSIFICATION	8.264021313461032E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999556785970259	WITHOUT_CLASSIFICATION	4.4321402973988845E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999908701266479	WITHOUT_CLASSIFICATION	9.129873352110069E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999877332266	WITHOUT_CLASSIFICATION	1.2266773386276395E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998564595612707	WITHOUT_CLASSIFICATION	1.4354043872934715E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999794043189159	WITHOUT_CLASSIFICATION	2.0595681084159677E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997921622618775	WITHOUT_CLASSIFICATION	2.078377381224456E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999635890545887	WITHOUT_CLASSIFICATION	3.641094541132327E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999987086592835	WITHOUT_CLASSIFICATION	1.2913407165137093E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999946195357993	WITHOUT_CLASSIFICATION	5.380464200725607E-6	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9991720800219915	WITHOUT_CLASSIFICATION	8.279199780085747E-4	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999917607094048	WITHOUT_CLASSIFICATION	8.239290595200919E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999954091041151	WITHOUT_CLASSIFICATION	4.590895884917812E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999998513976724	WITHOUT_CLASSIFICATION	1.4860232760358468E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999965025919774	WITHOUT_CLASSIFICATION	3.497408022686586E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999982549575104	WITHOUT_CLASSIFICATION	1.7450424895604085E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985153636136	WITHOUT_CLASSIFICATION	1.484636386384865E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999768319565631	WITHOUT_CLASSIFICATION	2.3168043436970366E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999971057429061	WITHOUT_CLASSIFICATION	2.8942570939265936E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999992220762935	WITHOUT_CLASSIFICATION	7.779237064897806E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9995560155967206	WITHOUT_CLASSIFICATION	4.4398440327938175E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999939113551789	WITHOUT_CLASSIFICATION	6.088644821023604E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999779798929318	WITHOUT_CLASSIFICATION	2.2020107068121712E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999947863499191	WITHOUT_CLASSIFICATION	5.213650080781405E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998284464907	WITHOUT_CLASSIFICATION	1.7155350916136589E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999987031711209	WITHOUT_CLASSIFICATION	1.2968288790426026E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999323231879432	WITHOUT_CLASSIFICATION	6.767681205676105E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9973443978113283	WITHOUT_CLASSIFICATION	0.0026556021886715827	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999279274101798	WITHOUT_CLASSIFICATION	7.20725898202568E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999994879484119	WITHOUT_CLASSIFICATION	5.120515882383777E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974790833972	WITHOUT_CLASSIFICATION	2.5209166028781277E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999968358015032	WITHOUT_CLASSIFICATION	3.1641984968173836E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995276938054	WITHOUT_CLASSIFICATION	4.7230619452755757E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999667370146174	WITHOUT_CLASSIFICATION	3.326298538274422E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999973099357208	WITHOUT_CLASSIFICATION	2.6900642792288395E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999909536589954	WITHOUT_CLASSIFICATION	9.04634100464143E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999828515832823	WITHOUT_CLASSIFICATION	1.7148416717674706E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998359118939639	WITHOUT_CLASSIFICATION	1.6408810603618572E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9980462748828921	WITHOUT_CLASSIFICATION	0.001953725117107863	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999588615797325	WITHOUT_CLASSIFICATION	4.113842026748738E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999932071983522	WITHOUT_CLASSIFICATION	6.792801647866677E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9994600557592417	WITHOUT_CLASSIFICATION	5.399442407582677E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998877966050135	WITHOUT_CLASSIFICATION	1.1220339498652294E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999886775128299	WITHOUT_CLASSIFICATION	1.1322487170057553E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998950192564044	WITHOUT_CLASSIFICATION	1.0498074359547777E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998520021482878	WITHOUT_CLASSIFICATION	1.4799785171209582E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999721382769188	WITHOUT_CLASSIFICATION	2.7861723081203007E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998309048831	WITHOUT_CLASSIFICATION	1.6909511697619315E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999995260977448	WITHOUT_CLASSIFICATION	4.73902255208907E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998520021482878	WITHOUT_CLASSIFICATION	1.4799785171209582E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994805551724714	WITHOUT_CLASSIFICATION	5.194448275285536E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999996618727003	WITHOUT_CLASSIFICATION	3.3812729977828004E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999997718184432	WITHOUT_CLASSIFICATION	2.2818155668359958E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999915128878047	WITHOUT_CLASSIFICATION	8.487112195217362E-6	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998323507546658	WITHOUT_CLASSIFICATION	1.6764924533418127E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999652725060195	WITHOUT_CLASSIFICATION	3.4727493980452654E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999978916003844	WITHOUT_CLASSIFICATION	2.108399615606769E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9987747820639779	WITHOUT_CLASSIFICATION	0.0012252179360221647	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999727252242569	WITHOUT_CLASSIFICATION	2.7274775743095394E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999308532090773	WITHOUT_CLASSIFICATION	6.914679092270957E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994400876295739	WITHOUT_CLASSIFICATION	5.599123704261152E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9919704253424441	WITHOUT_CLASSIFICATION	0.008029574657555928	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999971744748485	WITHOUT_CLASSIFICATION	2.825525151486252E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999980428923129	WITHOUT_CLASSIFICATION	1.9571076870969743E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999653287949166	WITHOUT_CLASSIFICATION	3.46712050833528E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999835875142294	WITHOUT_CLASSIFICATION	1.641248577058284E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999836184553279	WITHOUT_CLASSIFICATION	1.6381544672166586E-5	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999983428654656	WITHOUT_CLASSIFICATION	1.65713453441056E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9978973421460454	WITHOUT_CLASSIFICATION	0.002102657853954451	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999921829213336	WITHOUT_CLASSIFICATION	7.817078666395238E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999967343070904	WITHOUT_CLASSIFICATION	3.265692909585691E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999958354257139	WITHOUT_CLASSIFICATION	4.1645742861088395E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999846025095943	WITHOUT_CLASSIFICATION	1.5397490405601505E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999187088975	WITHOUT_CLASSIFICATION	8.129110241934147E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999991037671463	WITHOUT_CLASSIFICATION	8.962328536752977E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999638805866657	WITHOUT_CLASSIFICATION	3.611941333435941E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997086749572199	WITHOUT_CLASSIFICATION	2.9132504278007483E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999803612227064	WITHOUT_CLASSIFICATION	1.963877729358772E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999492687761505	WITHOUT_CLASSIFICATION	5.073122384941562E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999980769358131	WITHOUT_CLASSIFICATION	1.923064186841279E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999981050646575	WITHOUT_CLASSIFICATION	1.8949353425995745E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999002445024479	WITHOUT_CLASSIFICATION	9.975549755213374E-5	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999961672759651	WITHOUT_CLASSIFICATION	3.832724034875077E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999989642099096	WITHOUT_CLASSIFICATION	1.0357900903902447E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999361423383222	WITHOUT_CLASSIFICATION	6.385766167790163E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995342641568	WITHOUT_CLASSIFICATION	4.657358432918064E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999941506017869	WITHOUT_CLASSIFICATION	5.849398213161619E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999910160440315	WITHOUT_CLASSIFICATION	8.98395596847515E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999205328765	WITHOUT_CLASSIFICATION	7.946712350086272E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999637429818842	WITHOUT_CLASSIFICATION	3.625701811581071E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999256355161399	WITHOUT_CLASSIFICATION	7.436448386014479E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999256355161399	WITHOUT_CLASSIFICATION	7.436448386014479E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9987054021619652	WITHOUT_CLASSIFICATION	0.0012945978380347475	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999932639475494	WITHOUT_CLASSIFICATION	6.736052450609275E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999801293608714	WITHOUT_CLASSIFICATION	1.9870639128535955E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5803135754555916	WITHOUT_CLASSIFICATION	0.4196864245444084	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999402730429883	WITHOUT_CLASSIFICATION	5.972695701176315E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999402730429883	WITHOUT_CLASSIFICATION	5.972695701176315E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999914649719985	WITHOUT_CLASSIFICATION	8.535028001366796E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999195441981579	WITHOUT_CLASSIFICATION	8.04558018421623E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999283906277159	WITHOUT_CLASSIFICATION	7.160937228417748E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999246781936311	WITHOUT_CLASSIFICATION	7.532180636892258E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999702332762257	WITHOUT_CLASSIFICATION	2.9766723774381502E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999906274179424	WITHOUT_CLASSIFICATION	9.372582057551226E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999983960169505	WITHOUT_CLASSIFICATION	1.6039830495141717E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997664107567067	WITHOUT_CLASSIFICATION	2.3358924329331204E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998288905231647	WITHOUT_CLASSIFICATION	1.7110947683525796E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998906359842418	WITHOUT_CLASSIFICATION	1.093640157581411E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998906359842418	WITHOUT_CLASSIFICATION	1.093640157581411E-4	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998758258103283	WITHOUT_CLASSIFICATION	1.241741896717315E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999933281082755	WITHOUT_CLASSIFICATION	6.67189172453698E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997163858693346	WITHOUT_CLASSIFICATION	2.83614130665406E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9994302299144502	WITHOUT_CLASSIFICATION	5.697700855497969E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897928266712	WITHOUT_CLASSIFICATION	1.020717332871293E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685932925364	WITHOUT_CLASSIFICATION	3.1406707463529576E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999886969315166	WITHOUT_CLASSIFICATION	1.1303068483467237E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999043467163813	WITHOUT_CLASSIFICATION	9.565328361863525E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999775718270044	WITHOUT_CLASSIFICATION	2.242817299560401E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999904970364981	WITHOUT_CLASSIFICATION	9.502963501890346E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999308532090773	WITHOUT_CLASSIFICATION	6.914679092270957E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999832218625876	WITHOUT_CLASSIFICATION	1.677813741238914E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994042577692227	WITHOUT_CLASSIFICATION	5.957422307773706E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999760960860719	WITHOUT_CLASSIFICATION	2.3903913928203575E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999266153019031	WITHOUT_CLASSIFICATION	7.338469809689908E-5	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997518214787094	WITHOUT_CLASSIFICATION	2.4817852129058936E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9997082655711818	WITHOUT_CLASSIFICATION	2.9173442881834946E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995734747692465	WITHOUT_CLASSIFICATION	4.2652523075346134E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999847960935301	WITHOUT_CLASSIFICATION	1.5203906469788296E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9996735119034817	WITHOUT_CLASSIFICATION	3.264880965182582E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999948415148052	WITHOUT_CLASSIFICATION	5.158485194803109E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999948415148052	WITHOUT_CLASSIFICATION	5.158485194803109E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997860169374831	WITHOUT_CLASSIFICATION	2.139830625167545E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999581217813	WITHOUT_CLASSIFICATION	4.187821857176691E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999381489436794	WITHOUT_CLASSIFICATION	6.185105632055538E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995202952250902	WITHOUT_CLASSIFICATION	4.797047749098014E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999899651393119	WITHOUT_CLASSIFICATION	1.0034860687964832E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999944928675737	WITHOUT_CLASSIFICATION	5.507132426310234E-6	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999972525235025	WITHOUT_CLASSIFICATION	2.7474764974794928E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999994663768771	WITHOUT_CLASSIFICATION	5.336231228357118E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999569318279623	WITHOUT_CLASSIFICATION	4.3068172037631775E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999900367370277	WITHOUT_CLASSIFICATION	9.963262972355274E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720506452238	WITHOUT_CLASSIFICATION	2.7949354776232182E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999984500162561	WITHOUT_CLASSIFICATION	1.5499837438968467E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999977269776864	WITHOUT_CLASSIFICATION	2.2730223134758886E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999898052518612	WITHOUT_CLASSIFICATION	1.0194748138845453E-5	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999861769886156	WITHOUT_CLASSIFICATION	1.3823011384333503E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979122108541	WITHOUT_CLASSIFICATION	2.0877891458761735E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999901750901435	WITHOUT_CLASSIFICATION	9.824909856431933E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999646333218056	WITHOUT_CLASSIFICATION	3.536667819431252E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998903048942569	WITHOUT_CLASSIFICATION	1.0969510574308788E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999956676263695	WITHOUT_CLASSIFICATION	4.332373630569991E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999926671801579	WITHOUT_CLASSIFICATION	7.3328198421213376E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999996990808847	WITHOUT_CLASSIFICATION	3.009191152763128E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999976384356799	WITHOUT_CLASSIFICATION	2.3615643200734557E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999569964357756	WITHOUT_CLASSIFICATION	4.300356422435826E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999783204991399	WITHOUT_CLASSIFICATION	2.167950086012445E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999783204991399	WITHOUT_CLASSIFICATION	2.167950086012445E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999984620815944	WITHOUT_CLASSIFICATION	1.537918405601818E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998479071847981	WITHOUT_CLASSIFICATION	1.5209281520190717E-4	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999881377376925	WITHOUT_CLASSIFICATION	1.1862262307536581E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999970034846818	WITHOUT_CLASSIFICATION	2.996515318220521E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999860548698569	WITHOUT_CLASSIFICATION	1.3945130142978121E-5	TEST
