//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999178242174697	WITHOUT_CLASSIFICATION	8.217578253025338E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999514471026809	WITHOUT_CLASSIFICATION	4.855289731909639E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999893057819882	WITHOUT_CLASSIFICATION	1.069421801185316E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999879100851929	WITHOUT_CLASSIFICATION	1.2089914807049229E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999879100851929	WITHOUT_CLASSIFICATION	1.2089914807049229E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999661334733505	WITHOUT_CLASSIFICATION	3.3866526649451876E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999675819942758	WITHOUT_CLASSIFICATION	3.2418005724092316E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999864929604521	WITHOUT_CLASSIFICATION	1.3507039547846044E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958001533241	WITHOUT_CLASSIFICATION	4.19984667589791E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999222127689847	WITHOUT_CLASSIFICATION	7.778723101531425E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999222127689847	WITHOUT_CLASSIFICATION	7.778723101531425E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998570309280757	WITHOUT_CLASSIFICATION	1.429690719242949E-4	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999964982045663	WITHOUT_CLASSIFICATION	3.501795433784021E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999744150054576	WITHOUT_CLASSIFICATION	2.558499454242172E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9995804171817324	WITHOUT_CLASSIFICATION	4.195828182676024E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999868509811572	WITHOUT_CLASSIFICATION	1.3149018842722418E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999012178676976	WITHOUT_CLASSIFICATION	9.878213230240539E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9994715991359052	WITHOUT_CLASSIFICATION	5.284008640947194E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999847154535016	WITHOUT_CLASSIFICATION	1.5284546498278852E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999927472965197	WITHOUT_CLASSIFICATION	7.2527034803661714E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999927472965197	WITHOUT_CLASSIFICATION	7.2527034803661714E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999969329813008	WITHOUT_CLASSIFICATION	3.067018699191744E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999007647960722	WITHOUT_CLASSIFICATION	9.923520392785551E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997912973674605	WITHOUT_CLASSIFICATION	2.0870263253942338E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999594898519131	WITHOUT_CLASSIFICATION	4.051014808692718E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999621263637176	WITHOUT_CLASSIFICATION	3.787363628234004E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.542541168083056	WITHOUT_CLASSIFICATION	0.457458831916944	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.542541168083056	WITHOUT_CLASSIFICATION	0.457458831916944	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999727843863533	WITHOUT_CLASSIFICATION	2.721561364672638E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9995916292927371	WITHOUT_CLASSIFICATION	4.0837070726285735E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999957518145215	WITHOUT_CLASSIFICATION	4.24818547848957E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998106014601948	WITHOUT_CLASSIFICATION	1.893985398052573E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999762737024989	WITHOUT_CLASSIFICATION	2.372629750114301E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669678596199	WITHOUT_CLASSIFICATION	3.3032140380109384E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999926553373608	WITHOUT_CLASSIFICATION	7.344662639093916E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999691381444374	WITHOUT_CLASSIFICATION	3.086185556268116E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999097117297147	WITHOUT_CLASSIFICATION	9.02882702853205E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999097117297147	WITHOUT_CLASSIFICATION	9.02882702853205E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999153834121267	WITHOUT_CLASSIFICATION	8.461658787327303E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999629431658438	WITHOUT_CLASSIFICATION	3.7056834156190565E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999699850806898	WITHOUT_CLASSIFICATION	3.0014919310157605E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999898969496747	WITHOUT_CLASSIFICATION	1.0103050325382121E-5	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999988672119411	WITHOUT_CLASSIFICATION	1.1327880589794552E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999999784499149	WITHOUT_CLASSIFICATION	2.1550085113866303E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9994832011413719	WITHOUT_CLASSIFICATION	5.167988586279825E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999946578646179	WITHOUT_CLASSIFICATION	5.342135382093854E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999954425651884	WITHOUT_CLASSIFICATION	4.557434811674712E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999380627680017	WITHOUT_CLASSIFICATION	6.193723199827554E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999830587577639	WITHOUT_CLASSIFICATION	1.694124223600238E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999928184139285	WITHOUT_CLASSIFICATION	7.181586071551365E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999860728002151	WITHOUT_CLASSIFICATION	1.3927199784908839E-5	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998618869839149	WITHOUT_CLASSIFICATION	1.3811301608505772E-4	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999937294225243	WITHOUT_CLASSIFICATION	6.2705774756482295E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999899260090112	WITHOUT_CLASSIFICATION	1.0073990988804948E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999927499384632	WITHOUT_CLASSIFICATION	7.2500615367678325E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999888457831222	WITHOUT_CLASSIFICATION	1.1154216877748728E-5	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999640580197737	WITHOUT_CLASSIFICATION	3.594198022635115E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999840633794657	WITHOUT_CLASSIFICATION	1.5936620534410895E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999483922661027	WITHOUT_CLASSIFICATION	5.1607733897289175E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999989211854495	WITHOUT_CLASSIFICATION	1.078814550496526E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999974706596436	WITHOUT_CLASSIFICATION	2.529340356362636E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999561729545406	WITHOUT_CLASSIFICATION	4.382704545939343E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999930123883572	WITHOUT_CLASSIFICATION	6.987611642716402E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999890176019535	WITHOUT_CLASSIFICATION	1.0982398046551416E-5	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999988612743103	WITHOUT_CLASSIFICATION	1.1387256897625767E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999708264049895	WITHOUT_CLASSIFICATION	2.917359501065168E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999917234066874	WITHOUT_CLASSIFICATION	8.276593312696487E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998790485048645	WITHOUT_CLASSIFICATION	1.2095149513552335E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999998678364171	WITHOUT_CLASSIFICATION	1.3216358289511629E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999942638926382	WITHOUT_CLASSIFICATION	5.736107361854733E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998165401973209	WITHOUT_CLASSIFICATION	1.8345980267918386E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999662415155927	WITHOUT_CLASSIFICATION	3.375848440737298E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999822813463537	WITHOUT_CLASSIFICATION	1.7718653646372473E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999893040292442	WITHOUT_CLASSIFICATION	1.0695970755624389E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999662415155927	WITHOUT_CLASSIFICATION	3.375848440737298E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999995823449684	WITHOUT_CLASSIFICATION	4.176550315591609E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999276187908398	WITHOUT_CLASSIFICATION	7.238120916021672E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999988558145011	WITHOUT_CLASSIFICATION	1.1441854989040601E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999891973598858	WITHOUT_CLASSIFICATION	1.080264011413564E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768340729802	WITHOUT_CLASSIFICATION	2.3165927019715364E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768340729802	WITHOUT_CLASSIFICATION	2.3165927019715364E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999097335672823	WITHOUT_CLASSIFICATION	9.026643271768264E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999659433579436	WITHOUT_CLASSIFICATION	3.4056642056410636E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999787694400991	WITHOUT_CLASSIFICATION	2.123055990079317E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999958865817675	WITHOUT_CLASSIFICATION	4.113418232394194E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999855066887362	WITHOUT_CLASSIFICATION	1.4493311263734361E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999817407832153	WITHOUT_CLASSIFICATION	1.8259216784641446E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999941857642511	WITHOUT_CLASSIFICATION	5.814235748836263E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.99998982812196	WITHOUT_CLASSIFICATION	1.0171878039999166E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999878290764388	WITHOUT_CLASSIFICATION	1.217092356110157E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999516442868138	WITHOUT_CLASSIFICATION	4.835571318605897E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999516442868138	WITHOUT_CLASSIFICATION	4.835571318605897E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999922735923987	WITHOUT_CLASSIFICATION	7.726407601301881E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999996305054493	WITHOUT_CLASSIFICATION	3.6949455069881957E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999873282240849	WITHOUT_CLASSIFICATION	1.2671775915164479E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999516442868138	WITHOUT_CLASSIFICATION	4.835571318605897E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999922735923987	WITHOUT_CLASSIFICATION	7.726407601301881E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999922735923987	WITHOUT_CLASSIFICATION	7.726407601301881E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999890534217017	WITHOUT_CLASSIFICATION	1.0946578298323523E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999769719549186	WITHOUT_CLASSIFICATION	2.302804508134221E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999762624002279	WITHOUT_CLASSIFICATION	2.3737599772079522E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999051211775687	WITHOUT_CLASSIFICATION	9.487882243128443E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999795661056265	WITHOUT_CLASSIFICATION	2.0433894373375858E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999795661056265	WITHOUT_CLASSIFICATION	2.0433894373375858E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998281608281302	WITHOUT_CLASSIFICATION	1.7183917186981202E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996087637159708	WITHOUT_CLASSIFICATION	3.9123628402907857E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999926291011938	WITHOUT_CLASSIFICATION	7.370898806232064E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999909029885742	WITHOUT_CLASSIFICATION	9.097011425889306E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999909029885742	WITHOUT_CLASSIFICATION	9.097011425889306E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999634002097522	WITHOUT_CLASSIFICATION	3.6599790247800537E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999759533126305	WITHOUT_CLASSIFICATION	2.404668736950285E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972107557361714	WITHOUT_CLASSIFICATION	0.002789244263828632	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999939805997138	WITHOUT_CLASSIFICATION	6.019400286209829E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9994815898279493	WITHOUT_CLASSIFICATION	5.18410172050674E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999908936724258	WITHOUT_CLASSIFICATION	9.106327574197718E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999640656487625	WITHOUT_CLASSIFICATION	3.593435123748664E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.998560532578509	WITHOUT_CLASSIFICATION	0.0014394674214910285	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972107557361714	WITHOUT_CLASSIFICATION	0.002789244263828632	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9997972382479745	WITHOUT_CLASSIFICATION	2.0276175202553284E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955414502123	WITHOUT_CLASSIFICATION	4.458549787691765E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955414502123	WITHOUT_CLASSIFICATION	4.458549787691765E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9997888882938492	WITHOUT_CLASSIFICATION	2.11111706150827E-4	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9996181433499756	WITHOUT_CLASSIFICATION	3.8185665002448706E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999527826642959	WITHOUT_CLASSIFICATION	4.7217335704096254E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9990248159757417	WITHOUT_CLASSIFICATION	9.751840242582742E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.998654613942227	WITHOUT_CLASSIFICATION	0.0013453860577730041	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998035122328746	WITHOUT_CLASSIFICATION	1.964877671254459E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999978413927461	WITHOUT_CLASSIFICATION	2.1586072539467697E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999902011510577	WITHOUT_CLASSIFICATION	9.798848942228822E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999974154455139	WITHOUT_CLASSIFICATION	2.5845544860010144E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999974154455139	WITHOUT_CLASSIFICATION	2.5845544860010144E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999178242174697	WITHOUT_CLASSIFICATION	8.217578253025338E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999848719259854	WITHOUT_CLASSIFICATION	1.5128074014542828E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999701001414768	WITHOUT_CLASSIFICATION	2.9899858523249995E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999762790002588	WITHOUT_CLASSIFICATION	2.372099974125866E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999786015534409	WITHOUT_CLASSIFICATION	2.1398446559136427E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999993299895958	WITHOUT_CLASSIFICATION	6.70010404200689E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999683590541977	WITHOUT_CLASSIFICATION	3.164094580227711E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9997771388248239	WITHOUT_CLASSIFICATION	2.228611751760373E-4	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999010634163423	WITHOUT_CLASSIFICATION	9.893658365759994E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999830645043152	WITHOUT_CLASSIFICATION	1.6935495684872705E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.999993299895958	WITHOUT_CLASSIFICATION	6.70010404200689E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9996096342974009	WITHOUT_CLASSIFICATION	3.9036570259913864E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999905025536373	WITHOUT_CLASSIFICATION	9.497446362690412E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999765734705368	WITHOUT_CLASSIFICATION	2.342652946326711E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999864436527208	WITHOUT_CLASSIFICATION	1.3556347279106436E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999989428148697	WITHOUT_CLASSIFICATION	1.0571851303091964E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999879100851929	WITHOUT_CLASSIFICATION	1.2089914807049229E-5	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999895386625214	WITHOUT_CLASSIFICATION	1.0461337478609798E-5	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999936707214007	WITHOUT_CLASSIFICATION	6.329278599383797E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999850570010048	WITHOUT_CLASSIFICATION	1.4942998995058938E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999862094568297	WITHOUT_CLASSIFICATION	1.3790543170238658E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999927475186451	WITHOUT_CLASSIFICATION	7.252481354954557E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999805391619274	WITHOUT_CLASSIFICATION	1.9460838072505792E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999813679613808	WITHOUT_CLASSIFICATION	1.8632038619226334E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999886104091081	WITHOUT_CLASSIFICATION	1.1389590891831254E-5	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999904721581637	WITHOUT_CLASSIFICATION	9.527841836273856E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999863016315302	WITHOUT_CLASSIFICATION	1.3698368469756178E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999010634163423	WITHOUT_CLASSIFICATION	9.893658365759994E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999927475186451	WITHOUT_CLASSIFICATION	7.252481354954557E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999661334733505	WITHOUT_CLASSIFICATION	3.3866526649451876E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999820070156435	WITHOUT_CLASSIFICATION	1.7992984356477463E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999255294255346	WITHOUT_CLASSIFICATION	7.447057446534243E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999748585294229	WITHOUT_CLASSIFICATION	2.5141470577090795E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999992789437828	WITHOUT_CLASSIFICATION	7.2105621720186504E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999748396460652	WITHOUT_CLASSIFICATION	2.5160353934760294E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9995372416366771	WITHOUT_CLASSIFICATION	4.627583633229154E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998963118850446	WITHOUT_CLASSIFICATION	1.0368811495539309E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998963118850446	WITHOUT_CLASSIFICATION	1.0368811495539309E-4	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999801565753196	WITHOUT_CLASSIFICATION	1.9843424680504074E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999966765076104	WITHOUT_CLASSIFICATION	3.323492389503067E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9996241581886084	WITHOUT_CLASSIFICATION	3.758418113915741E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999670781056649	WITHOUT_CLASSIFICATION	3.292189433499609E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999820627555354	WITHOUT_CLASSIFICATION	1.7937244464611638E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999859742807838	WITHOUT_CLASSIFICATION	1.4025719216147205E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999879877567374	WITHOUT_CLASSIFICATION	1.2012243262697005E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999675819942758	WITHOUT_CLASSIFICATION	3.2418005724092316E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999917018374379	WITHOUT_CLASSIFICATION	8.298162562105945E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999917018374379	WITHOUT_CLASSIFICATION	8.298162562105945E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999917018374379	WITHOUT_CLASSIFICATION	8.298162562105945E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999823976317442	WITHOUT_CLASSIFICATION	1.7602368255775095E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999917018374379	WITHOUT_CLASSIFICATION	8.298162562105945E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999898018970615	WITHOUT_CLASSIFICATION	1.0198102938475867E-5	TEST
// int	WITHOUT_CLASSIFICATION	0.999906874871289	WITHOUT_CLASSIFICATION	9.312512871093797E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999451549433569	WITHOUT_CLASSIFICATION	5.484505664313049E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999010634163423	WITHOUT_CLASSIFICATION	9.893658365759994E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999927475186451	WITHOUT_CLASSIFICATION	7.252481354954557E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999927475186451	WITHOUT_CLASSIFICATION	7.252481354954557E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999736214669844	WITHOUT_CLASSIFICATION	2.6378533015518625E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999960048387165	WITHOUT_CLASSIFICATION	3.995161283494436E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999828613661272	WITHOUT_CLASSIFICATION	1.7138633872686223E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999951966198319	WITHOUT_CLASSIFICATION	4.8033801680514866E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958001533241	WITHOUT_CLASSIFICATION	4.19984667589791E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958001533241	WITHOUT_CLASSIFICATION	4.19984667589791E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999895456261569	WITHOUT_CLASSIFICATION	1.0454373843063946E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999928124188501	WITHOUT_CLASSIFICATION	7.187581149986397E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9997789576872717	WITHOUT_CLASSIFICATION	2.2104231272831722E-4	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999072946779759	WITHOUT_CLASSIFICATION	9.270532202410958E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999347719266628	WITHOUT_CLASSIFICATION	6.522807333719635E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999015056497996	WITHOUT_CLASSIFICATION	9.849435020035257E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999222127689847	WITHOUT_CLASSIFICATION	7.778723101531425E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999008807491168	WITHOUT_CLASSIFICATION	9.911925088331487E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999008807491168	WITHOUT_CLASSIFICATION	9.911925088331487E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998570309280757	WITHOUT_CLASSIFICATION	1.429690719242949E-4	TEST
// long	WITHOUT_CLASSIFICATION	0.9998570309280757	WITHOUT_CLASSIFICATION	1.429690719242949E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999957560584096	WITHOUT_CLASSIFICATION	4.2439415904396E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999957560584096	WITHOUT_CLASSIFICATION	4.2439415904396E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999673714683847	WITHOUT_CLASSIFICATION	3.262853161537061E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999673714683847	WITHOUT_CLASSIFICATION	3.262853161537061E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958001533241	WITHOUT_CLASSIFICATION	4.19984667589791E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999222127689847	WITHOUT_CLASSIFICATION	7.778723101531425E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999008807491168	WITHOUT_CLASSIFICATION	9.911925088331487E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999008807491168	WITHOUT_CLASSIFICATION	9.911925088331487E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9998570309280757	WITHOUT_CLASSIFICATION	1.429690719242949E-4	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999957560584096	WITHOUT_CLASSIFICATION	4.2439415904396E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999957560584096	WITHOUT_CLASSIFICATION	4.2439415904396E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999673714683847	WITHOUT_CLASSIFICATION	3.262853161537061E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999977497258591	WITHOUT_CLASSIFICATION	2.2502741408968367E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998878051794265	WITHOUT_CLASSIFICATION	1.1219482057342405E-4	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999599533476449	WITHOUT_CLASSIFICATION	4.004665235502902E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999567318684571	WITHOUT_CLASSIFICATION	4.326813154297829E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998830478559323	WITHOUT_CLASSIFICATION	1.1695214406778597E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999007900000806	WITHOUT_CLASSIFICATION	9.920999991940699E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996011898868183	WITHOUT_CLASSIFICATION	3.9881011318163717E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999486924589442	WITHOUT_CLASSIFICATION	5.1307541055710856E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9994574087434253	WITHOUT_CLASSIFICATION	5.425912565748102E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999866832078594	WITHOUT_CLASSIFICATION	1.3316792140602906E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999716123264735	WITHOUT_CLASSIFICATION	2.8387673526538674E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999767886312482	WITHOUT_CLASSIFICATION	2.3211368751859277E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999097335672823	WITHOUT_CLASSIFICATION	9.026643271768264E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999007900000806	WITHOUT_CLASSIFICATION	9.920999991940699E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9987565965832221	WITHOUT_CLASSIFICATION	0.0012434034167778825	TEST
//noop	WITHOUT_CLASSIFICATION	0.9987565965832221	WITHOUT_CLASSIFICATION	0.0012434034167778825	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999603929096385	WITHOUT_CLASSIFICATION	3.960709036150302E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999805316713826	WITHOUT_CLASSIFICATION	1.9468328617417546E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999805316713826	WITHOUT_CLASSIFICATION	1.9468328617417546E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9994862292609232	WITHOUT_CLASSIFICATION	5.137707390767283E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997962608527858	WITHOUT_CLASSIFICATION	2.0373914721411737E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9978464241744903	WITHOUT_CLASSIFICATION	0.0021535758255096593	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999733282324947	WITHOUT_CLASSIFICATION	2.6671767505299687E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999733282324947	WITHOUT_CLASSIFICATION	2.6671767505299687E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999868509811572	WITHOUT_CLASSIFICATION	1.3149018842722418E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999973028170669	WITHOUT_CLASSIFICATION	2.697182933146958E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999973028170669	WITHOUT_CLASSIFICATION	2.697182933146958E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998583391636442	WITHOUT_CLASSIFICATION	1.416608363557254E-4	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999807813723838	WITHOUT_CLASSIFICATION	1.921862761617348E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999847154535016	WITHOUT_CLASSIFICATION	1.5284546498278852E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9812570676940093	WITHOUT_CLASSIFICATION	0.018742932305990695	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999012178676976	WITHOUT_CLASSIFICATION	9.878213230240539E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999790818349673	WITHOUT_CLASSIFICATION	2.091816503271259E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999453382413289	WITHOUT_CLASSIFICATION	5.466175867113311E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997327288522163	WITHOUT_CLASSIFICATION	2.6727114778368933E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999584849750347	WITHOUT_CLASSIFICATION	4.1515024965320784E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999594898519131	WITHOUT_CLASSIFICATION	4.051014808692718E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999990083779459	WITHOUT_CLASSIFICATION	9.916220541528781E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999736221150682	WITHOUT_CLASSIFICATION	2.6377884931731712E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999736249042358	WITHOUT_CLASSIFICATION	2.6375095764208003E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999927569083111	WITHOUT_CLASSIFICATION	7.243091688865327E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999847154535016	WITHOUT_CLASSIFICATION	1.5284546498278852E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999947204620087	WITHOUT_CLASSIFICATION	5.279537991365297E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999929199801016	WITHOUT_CLASSIFICATION	7.080019898288106E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999007670271558	WITHOUT_CLASSIFICATION	9.923297284415158E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999927569083111	WITHOUT_CLASSIFICATION	7.243091688865327E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999947204620087	WITHOUT_CLASSIFICATION	5.279537991365297E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999007670271558	WITHOUT_CLASSIFICATION	9.923297284415158E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999328224998538	WITHOUT_CLASSIFICATION	6.71775001462526E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999328224998538	WITHOUT_CLASSIFICATION	6.71775001462526E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999927472965197	WITHOUT_CLASSIFICATION	7.2527034803661714E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999935436999152	WITHOUT_CLASSIFICATION	6.456300084746542E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997091596989892	WITHOUT_CLASSIFICATION	2.9084030101081355E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999614441776103	WITHOUT_CLASSIFICATION	3.855582238970404E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999872198420865	WITHOUT_CLASSIFICATION	1.2780157913556266E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999697720868472	WITHOUT_CLASSIFICATION	3.022791315284604E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999742872055131	WITHOUT_CLASSIFICATION	2.5712794486832504E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999963318982583	WITHOUT_CLASSIFICATION	3.6681017416501058E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999697720868472	WITHOUT_CLASSIFICATION	3.022791315284604E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999007647960722	WITHOUT_CLASSIFICATION	9.923520392785551E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999037014774417	WITHOUT_CLASSIFICATION	9.629852255829581E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999927569083111	WITHOUT_CLASSIFICATION	7.243091688865327E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999844015301232	WITHOUT_CLASSIFICATION	1.5598469876788508E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999915786516519	WITHOUT_CLASSIFICATION	8.421348348218343E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996181821515536	WITHOUT_CLASSIFICATION	3.818178484463061E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999924058402307	WITHOUT_CLASSIFICATION	7.594159769237357E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999423468316635	WITHOUT_CLASSIFICATION	5.765316833657377E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999988151433453	WITHOUT_CLASSIFICATION	1.1848566546794576E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999519509392066	WITHOUT_CLASSIFICATION	4.804906079344752E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999601218022951	WITHOUT_CLASSIFICATION	3.987819770502715E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999927817808583	WITHOUT_CLASSIFICATION	7.218219141752385E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999736214669844	WITHOUT_CLASSIFICATION	2.6378533015518625E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999648304489491	WITHOUT_CLASSIFICATION	3.516955105089885E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999594898519131	WITHOUT_CLASSIFICATION	4.051014808692718E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.99997478331755	WITHOUT_CLASSIFICATION	2.5216682449963935E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997572204404418	WITHOUT_CLASSIFICATION	2.427795595580984E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999926408070124	WITHOUT_CLASSIFICATION	7.359192987482104E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999996712006657	WITHOUT_CLASSIFICATION	3.2879933431506734E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999967226700904	WITHOUT_CLASSIFICATION	3.2773299095912823E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999972149485735	WITHOUT_CLASSIFICATION	2.7850514264920466E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999896543939737	WITHOUT_CLASSIFICATION	1.0345606026244041E-5	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999402963917813	WITHOUT_CLASSIFICATION	5.970360821876115E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996855345714476	WITHOUT_CLASSIFICATION	3.1446542855244954E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997180832250762	WITHOUT_CLASSIFICATION	2.8191677492381923E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999318696086595	WITHOUT_CLASSIFICATION	6.813039134043491E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999318696086595	WITHOUT_CLASSIFICATION	6.813039134043491E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996690630244099	WITHOUT_CLASSIFICATION	3.3093697558999257E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999775958035554	WITHOUT_CLASSIFICATION	2.2404196444552046E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998596894311907	WITHOUT_CLASSIFICATION	1.4031056880927425E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999739822581154	WITHOUT_CLASSIFICATION	2.6017741884649927E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996690763064197	WITHOUT_CLASSIFICATION	3.3092369358029753E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9996825832346553	WITHOUT_CLASSIFICATION	3.1741676534466796E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999798018230195	WITHOUT_CLASSIFICATION	2.0198176980530307E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9992240805550604	WITHOUT_CLASSIFICATION	7.759194449395542E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996220604216344	WITHOUT_CLASSIFICATION	3.7793957836559797E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999384096439801	WITHOUT_CLASSIFICATION	6.159035601990461E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999863566955208	WITHOUT_CLASSIFICATION	1.3643304479031458E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999715794914608	WITHOUT_CLASSIFICATION	2.8420508539294885E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998506209952979	WITHOUT_CLASSIFICATION	1.4937900470221076E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743386581078	WITHOUT_CLASSIFICATION	2.5661341892237734E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731375107339	WITHOUT_CLASSIFICATION	2.6862489266176718E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999687160164626	WITHOUT_CLASSIFICATION	3.128398353736357E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999751331277368	WITHOUT_CLASSIFICATION	2.4866872263318522E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999923876951187	WITHOUT_CLASSIFICATION	7.612304881307747E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999923990349492	WITHOUT_CLASSIFICATION	7.6009650507785366E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999169514662094	WITHOUT_CLASSIFICATION	8.304853379064037E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999169514662094	WITHOUT_CLASSIFICATION	8.304853379064037E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999088773563674	WITHOUT_CLASSIFICATION	9.112264363261239E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999088773563674	WITHOUT_CLASSIFICATION	9.112264363261239E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996855345714476	WITHOUT_CLASSIFICATION	3.1446542855244954E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9994644476816408	WITHOUT_CLASSIFICATION	5.355523183592092E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9983067528013373	WITHOUT_CLASSIFICATION	0.0016932471986626444	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998515650712276	WITHOUT_CLASSIFICATION	1.4843492877239972E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9983067528013373	WITHOUT_CLASSIFICATION	0.0016932471986626444	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998515650712276	WITHOUT_CLASSIFICATION	1.4843492877239972E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994910676477035	WITHOUT_CLASSIFICATION	5.089323522965379E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997722157659892	WITHOUT_CLASSIFICATION	2.277842340109216E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999979483928393	WITHOUT_CLASSIFICATION	2.051607160693209E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999944093972694	WITHOUT_CLASSIFICATION	5.590602730637927E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999296612607178	WITHOUT_CLASSIFICATION	7.033873928219938E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9985203387655689	WITHOUT_CLASSIFICATION	0.0014796612344310706	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999904446683849	WITHOUT_CLASSIFICATION	9.555331615094808E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9987195378832021	WITHOUT_CLASSIFICATION	0.001280462116797799	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996885510928777	WITHOUT_CLASSIFICATION	3.114489071223108E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999900014091693	WITHOUT_CLASSIFICATION	9.998590830779761E-6	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999862337980211	WITHOUT_CLASSIFICATION	1.3766201978814855E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999927966839913	WITHOUT_CLASSIFICATION	7.203316008636006E-6	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999993854913315	WITHOUT_CLASSIFICATION	6.14508668495974E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999746345520887	WITHOUT_CLASSIFICATION	2.536544791130244E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999746345520887	WITHOUT_CLASSIFICATION	2.536544791130244E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987024759908273	WITHOUT_CLASSIFICATION	0.0012975240091727626	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987024759908273	WITHOUT_CLASSIFICATION	0.0012975240091727626	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999980114561208	WITHOUT_CLASSIFICATION	1.9885438791741234E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994910676477035	WITHOUT_CLASSIFICATION	5.089323522965379E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999780031227682	WITHOUT_CLASSIFICATION	2.1996877231783705E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998525242385057	WITHOUT_CLASSIFICATION	1.4747576149433137E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9995136134738527	WITHOUT_CLASSIFICATION	4.8638652614731604E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9990446104284822	WITHOUT_CLASSIFICATION	9.553895715177512E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9916521135895981	WITHOUT_CLASSIFICATION	0.00834788641040184	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994910676477035	WITHOUT_CLASSIFICATION	5.089323522965379E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9990446104284822	WITHOUT_CLASSIFICATION	9.553895715177512E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9916521135895981	WITHOUT_CLASSIFICATION	0.00834788641040184	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9992220685348305	WITHOUT_CLASSIFICATION	7.779314651695734E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999928547991727	WITHOUT_CLASSIFICATION	7.145200827411942E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999221829643032	WITHOUT_CLASSIFICATION	7.781703569678619E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994910676477035	WITHOUT_CLASSIFICATION	5.089323522965379E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994910676477035	WITHOUT_CLASSIFICATION	5.089323522965379E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999961093420711	WITHOUT_CLASSIFICATION	3.890657928967068E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999960792497284	WITHOUT_CLASSIFICATION	3.920750271581498E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.999979431289014	WITHOUT_CLASSIFICATION	2.056871098595637E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999878763797099	WITHOUT_CLASSIFICATION	1.2123620290105618E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997785328524895	WITHOUT_CLASSIFICATION	2.2146714751042189E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999985626885142	WITHOUT_CLASSIFICATION	1.4373114858630163E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998728331595395	WITHOUT_CLASSIFICATION	1.2716684046046325E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999877425930833	WITHOUT_CLASSIFICATION	1.2257406916638087E-5	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999902702894494	WITHOUT_CLASSIFICATION	9.72971055069427E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999768902352664	WITHOUT_CLASSIFICATION	2.3109764733651697E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999984442917253	WITHOUT_CLASSIFICATION	1.5557082747043352E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999846576776005	WITHOUT_CLASSIFICATION	1.5342322399489653E-5	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999749841639004	WITHOUT_CLASSIFICATION	2.5015836099645634E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999796880659294	WITHOUT_CLASSIFICATION	2.0311934070566017E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668383171623	WITHOUT_CLASSIFICATION	3.3161682837788425E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9996311595182814	WITHOUT_CLASSIFICATION	3.68840481718692E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998106014601948	WITHOUT_CLASSIFICATION	1.893985398052573E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9997332709097319	WITHOUT_CLASSIFICATION	2.667290902681011E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996505348399489	WITHOUT_CLASSIFICATION	3.49465160051098E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998515650712276	WITHOUT_CLASSIFICATION	1.4843492877239972E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9995571580691798	WITHOUT_CLASSIFICATION	4.4284193082023813E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998106014601948	WITHOUT_CLASSIFICATION	1.893985398052573E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995234584091164	WITHOUT_CLASSIFICATION	4.765415908836171E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9987757186288678	WITHOUT_CLASSIFICATION	0.0012242813711320865	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9943775524612027	WITHOUT_CLASSIFICATION	0.005622447538797232	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999037611469573	WITHOUT_CLASSIFICATION	9.62388530427023E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999092721366309	WITHOUT_CLASSIFICATION	9.07278633690426E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999931583478511	WITHOUT_CLASSIFICATION	6.841652148931199E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999849279759788	WITHOUT_CLASSIFICATION	1.5072024021154897E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999985745857378	WITHOUT_CLASSIFICATION	1.425414262097145E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999969029902905	WITHOUT_CLASSIFICATION	3.09700970949892E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999492360507991	WITHOUT_CLASSIFICATION	5.076394920085192E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999654593673512	WITHOUT_CLASSIFICATION	3.4540632648908614E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999658375164636	WITHOUT_CLASSIFICATION	3.416248353648556E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999996799893744	WITHOUT_CLASSIFICATION	3.200106256012215E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991753758229	WITHOUT_CLASSIFICATION	8.24624177100225E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9995899002910669	WITHOUT_CLASSIFICATION	4.1009970893312724E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999921842893227	WITHOUT_CLASSIFICATION	7.815710677393469E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999233778528851	WITHOUT_CLASSIFICATION	7.662214711486425E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915957866375	WITHOUT_CLASSIFICATION	8.404213362510652E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999637992765924	WITHOUT_CLASSIFICATION	3.620072340757201E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997709116689707	WITHOUT_CLASSIFICATION	2.2908833102920975E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999965853488489	WITHOUT_CLASSIFICATION	3.4146511509740736E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845026972145	WITHOUT_CLASSIFICATION	1.5497302785548398E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843727193719	WITHOUT_CLASSIFICATION	1.5627280628037238E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765813858548	WITHOUT_CLASSIFICATION	2.3418614145276276E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674064118493	WITHOUT_CLASSIFICATION	3.2593588150667415E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999656123875128	WITHOUT_CLASSIFICATION	3.438761248718794E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999590448133384	WITHOUT_CLASSIFICATION	4.09551866615994E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765910866847	WITHOUT_CLASSIFICATION	2.340891331522555E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794162795513	WITHOUT_CLASSIFICATION	2.0583720448713768E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759119455753	WITHOUT_CLASSIFICATION	2.4088054424768366E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868261208785	WITHOUT_CLASSIFICATION	1.3173879121463398E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754847744549	WITHOUT_CLASSIFICATION	2.4515225545110364E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999755016086793	WITHOUT_CLASSIFICATION	2.4498391320669385E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999775483773968	WITHOUT_CLASSIFICATION	2.2451622603195188E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668680077439	WITHOUT_CLASSIFICATION	3.313199225605518E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999810820566777	WITHOUT_CLASSIFICATION	1.891794332231716E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999935773698677	WITHOUT_CLASSIFICATION	6.42263013233612E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999997534708476	WITHOUT_CLASSIFICATION	2.465291524334888E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9986803213038294	WITHOUT_CLASSIFICATION	0.0013196786961705838	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998249952638015	WITHOUT_CLASSIFICATION	1.7500473619857482E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9992220685348305	WITHOUT_CLASSIFICATION	7.779314651695734E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999736304961578	WITHOUT_CLASSIFICATION	2.636950384210028E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999745226424714	WITHOUT_CLASSIFICATION	2.5477357528503453E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999927824274365	WITHOUT_CLASSIFICATION	7.217572563483989E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999962469186799	WITHOUT_CLASSIFICATION	3.7530813199617866E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999767568040826	WITHOUT_CLASSIFICATION	2.3243195917418506E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999764765499998	WITHOUT_CLASSIFICATION	2.352345000026618E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999836068041301	WITHOUT_CLASSIFICATION	1.639319586982376E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700528376011	WITHOUT_CLASSIFICATION	2.994716239893022E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725604521048	WITHOUT_CLASSIFICATION	2.7439547895201945E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994511040518	WITHOUT_CLASSIFICATION	5.48895948200998E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700786703388	WITHOUT_CLASSIFICATION	2.9921329661216436E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998471323920067	WITHOUT_CLASSIFICATION	1.5286760799319013E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999405515770842	WITHOUT_CLASSIFICATION	5.9448422915811364E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999851387733582	WITHOUT_CLASSIFICATION	1.4861226641887478E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999846340977104	WITHOUT_CLASSIFICATION	1.5365902289534127E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999544706903774	WITHOUT_CLASSIFICATION	4.552930962268462E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999734759903355	WITHOUT_CLASSIFICATION	2.6524009664435493E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999545000792253	WITHOUT_CLASSIFICATION	4.54999207748446E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999778876570891	WITHOUT_CLASSIFICATION	2.211234291088097E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999930117176031	WITHOUT_CLASSIFICATION	6.988282396951612E-6	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998945434815684	WITHOUT_CLASSIFICATION	1.0545651843170313E-4	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999679774742468	WITHOUT_CLASSIFICATION	3.202252575319986E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999656914114661	WITHOUT_CLASSIFICATION	3.4308588533803395E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999748788829765	WITHOUT_CLASSIFICATION	2.5121117023404502E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9986803213038294	WITHOUT_CLASSIFICATION	0.0013196786961705838	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999909114517987	WITHOUT_CLASSIFICATION	9.088548201164117E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999938352326799	WITHOUT_CLASSIFICATION	6.164767320022442E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999857113898968	WITHOUT_CLASSIFICATION	1.4288610103107237E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999935773698677	WITHOUT_CLASSIFICATION	6.42263013233612E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999839618645288	WITHOUT_CLASSIFICATION	1.6038135471162643E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9990889251206245	WITHOUT_CLASSIFICATION	9.110748793754105E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999836008702702	WITHOUT_CLASSIFICATION	1.6399129729814636E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999733159798286	WITHOUT_CLASSIFICATION	2.66840201714154E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999931572545132	WITHOUT_CLASSIFICATION	6.842745486796881E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999668863340647	WITHOUT_CLASSIFICATION	3.3113665935196946E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999690905081768	WITHOUT_CLASSIFICATION	3.090949182307608E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99997066901929	WITHOUT_CLASSIFICATION	2.9330980710109735E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999712283435275	WITHOUT_CLASSIFICATION	2.877165647250242E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997979983605739	WITHOUT_CLASSIFICATION	2.0200163942616265E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999572685470501	WITHOUT_CLASSIFICATION	4.273145294984266E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9992220685348305	WITHOUT_CLASSIFICATION	7.779314651695734E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999935773698677	WITHOUT_CLASSIFICATION	6.42263013233612E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999783735661234	WITHOUT_CLASSIFICATION	2.162643387658649E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998415790626244	WITHOUT_CLASSIFICATION	1.584209373755341E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999943719027987	WITHOUT_CLASSIFICATION	5.628097201228983E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998106144967646	WITHOUT_CLASSIFICATION	1.8938550323550966E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.99996115217574	WITHOUT_CLASSIFICATION	3.884782425992651E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999924179689884	WITHOUT_CLASSIFICATION	7.582031011608357E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999957149337791	WITHOUT_CLASSIFICATION	4.285066220881402E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999365072447427	WITHOUT_CLASSIFICATION	6.349275525722886E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9994715991359052	WITHOUT_CLASSIFICATION	5.284008640947194E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999161823248498	WITHOUT_CLASSIFICATION	8.381767515024444E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996952511648896	WITHOUT_CLASSIFICATION	3.0474883511044816E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999935773698677	WITHOUT_CLASSIFICATION	6.42263013233612E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9986803213038294	WITHOUT_CLASSIFICATION	0.0013196786961705838	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999209764568127	WITHOUT_CLASSIFICATION	7.902354318731779E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999968316810879	WITHOUT_CLASSIFICATION	3.1683189121236255E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9990177828358802	WITHOUT_CLASSIFICATION	9.822171641198597E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9986803213038294	WITHOUT_CLASSIFICATION	0.0013196786961705838	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999390137136093	WITHOUT_CLASSIFICATION	6.0986286390651864E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999943719027987	WITHOUT_CLASSIFICATION	5.628097201228983E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9995836642382823	WITHOUT_CLASSIFICATION	4.163357617177862E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9963703120079535	WITHOUT_CLASSIFICATION	0.003629687992046464	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999648958876771	WITHOUT_CLASSIFICATION	3.510411232280869E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999931572545132	WITHOUT_CLASSIFICATION	6.842745486796881E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999668863340647	WITHOUT_CLASSIFICATION	3.3113665935196946E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999690905081768	WITHOUT_CLASSIFICATION	3.090949182307608E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999888484182559	WITHOUT_CLASSIFICATION	1.1151581744133716E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999721544892445	WITHOUT_CLASSIFICATION	2.7845510755475862E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999367642312953	WITHOUT_CLASSIFICATION	6.323576870468605E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999993131563405	WITHOUT_CLASSIFICATION	6.8684365949516345E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999849931513456	WITHOUT_CLASSIFICATION	1.5006848654524005E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9986803213038294	WITHOUT_CLASSIFICATION	0.0013196786961705838	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99997066901929	WITHOUT_CLASSIFICATION	2.9330980710109735E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999712283435275	WITHOUT_CLASSIFICATION	2.877165647250242E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965218469434	WITHOUT_CLASSIFICATION	3.4781530564762036E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965569420207	WITHOUT_CLASSIFICATION	3.4430579793631373E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999740191224303	WITHOUT_CLASSIFICATION	2.5980877569678888E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999762368415375	WITHOUT_CLASSIFICATION	2.3763158462530877E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999729187804801	WITHOUT_CLASSIFICATION	2.7081219519913522E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999036908766096	WITHOUT_CLASSIFICATION	9.630912339036364E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999118833602578	WITHOUT_CLASSIFICATION	8.811663974222326E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999472360837207	WITHOUT_CLASSIFICATION	5.276391627923716E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999664790224652	WITHOUT_CLASSIFICATION	3.3520977534790755E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999736214669844	WITHOUT_CLASSIFICATION	2.6378533015518625E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794162795513	WITHOUT_CLASSIFICATION	2.0583720448713768E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999736214669844	WITHOUT_CLASSIFICATION	2.6378533015518625E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999813512148692	WITHOUT_CLASSIFICATION	1.8648785130749008E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999698316753789	WITHOUT_CLASSIFICATION	3.0168324621114596E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976250564835	WITHOUT_CLASSIFICATION	2.3749435165022658E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999877403906926	WITHOUT_CLASSIFICATION	1.225960930742425E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999089773123436	WITHOUT_CLASSIFICATION	9.102268765634216E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759119455753	WITHOUT_CLASSIFICATION	2.4088054424768366E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754846851008	WITHOUT_CLASSIFICATION	2.4515314899194575E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999930117176031	WITHOUT_CLASSIFICATION	6.988282396951612E-6	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999743757858512	WITHOUT_CLASSIFICATION	2.5624214148789187E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999857160365799	WITHOUT_CLASSIFICATION	1.4283963420057414E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999836465876908	WITHOUT_CLASSIFICATION	1.6353412309209856E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995204697809461	WITHOUT_CLASSIFICATION	4.795302190538821E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999996257039374	WITHOUT_CLASSIFICATION	3.7429606261215273E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999156221594924	WITHOUT_CLASSIFICATION	8.43778405075904E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998761130187247	WITHOUT_CLASSIFICATION	1.2388698127530545E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999985745857378	WITHOUT_CLASSIFICATION	1.425414262097145E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999766202180176	WITHOUT_CLASSIFICATION	2.3379781982440794E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999750970060659	WITHOUT_CLASSIFICATION	2.4902993934017847E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999873023707456	WITHOUT_CLASSIFICATION	1.2697629254294378E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999795243441011	WITHOUT_CLASSIFICATION	2.0475655898897057E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999946764787974	WITHOUT_CLASSIFICATION	5.323521202551474E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999596364021465	WITHOUT_CLASSIFICATION	4.036359785362092E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849691158362	WITHOUT_CLASSIFICATION	1.5030884163669949E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851642724679	WITHOUT_CLASSIFICATION	1.4835727532201433E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999617314913312	WITHOUT_CLASSIFICATION	3.826850866875905E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999973997296431	WITHOUT_CLASSIFICATION	2.6002703568940774E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999584211828524	WITHOUT_CLASSIFICATION	4.157881714757013E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999575539624342	WITHOUT_CLASSIFICATION	4.244603756580437E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999834639650597	WITHOUT_CLASSIFICATION	1.653603494039308E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999875596707103	WITHOUT_CLASSIFICATION	1.2440329289698068E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999716691931363	WITHOUT_CLASSIFICATION	2.833080686367687E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999623776248588	WITHOUT_CLASSIFICATION	3.762237514108301E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999834639650597	WITHOUT_CLASSIFICATION	1.653603494039308E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999400914657028	WITHOUT_CLASSIFICATION	5.9908534297177956E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999583052379721	WITHOUT_CLASSIFICATION	4.1694762027800226E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736764803	WITHOUT_CLASSIFICATION	2.632351969999649E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999947621000603	WITHOUT_CLASSIFICATION	5.237899939657581E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999986881897812	WITHOUT_CLASSIFICATION	1.3118102188242326E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999773362660181	WITHOUT_CLASSIFICATION	2.2663733981879764E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999949154909417	WITHOUT_CLASSIFICATION	5.084509058381021E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996654401144287	WITHOUT_CLASSIFICATION	3.3455988557126086E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9996654401144287	WITHOUT_CLASSIFICATION	3.3455988557126086E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999973804545297	WITHOUT_CLASSIFICATION	2.6195454703946026E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999966884555735	WITHOUT_CLASSIFICATION	3.3115444264717893E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999607064710427	WITHOUT_CLASSIFICATION	3.929352895729827E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999949983466079	WITHOUT_CLASSIFICATION	5.001653392208613E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.99999917868941	WITHOUT_CLASSIFICATION	8.213105900737618E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999705293310863	WITHOUT_CLASSIFICATION	2.9470668913747764E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999925433177591	WITHOUT_CLASSIFICATION	7.456682240902412E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999793182629577	WITHOUT_CLASSIFICATION	2.06817370423192E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999444034696794	WITHOUT_CLASSIFICATION	5.5596530320666444E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999978685427535	WITHOUT_CLASSIFICATION	2.131457246469758E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999514640793503	WITHOUT_CLASSIFICATION	4.853592064957941E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999538650917406	WITHOUT_CLASSIFICATION	4.6134908259443176E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999144097721515	WITHOUT_CLASSIFICATION	8.55902278485539E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999823869252313	WITHOUT_CLASSIFICATION	1.761307476869999E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999308161022751	WITHOUT_CLASSIFICATION	6.918389772489363E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9993890691360209	WITHOUT_CLASSIFICATION	6.109308639791049E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999911218165954	WITHOUT_CLASSIFICATION	8.878183404581194E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9994073127962132	WITHOUT_CLASSIFICATION	5.926872037867196E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999756024564362	WITHOUT_CLASSIFICATION	2.4397543563799488E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999307989878725	WITHOUT_CLASSIFICATION	6.920101212757958E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999987155198288	WITHOUT_CLASSIFICATION	1.2844801712086391E-5	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999256139832687	WITHOUT_CLASSIFICATION	7.438601673130071E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999870623130077	WITHOUT_CLASSIFICATION	1.2937686992299768E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999898946100045	WITHOUT_CLASSIFICATION	1.0105389995495585E-5	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999662742069239	WITHOUT_CLASSIFICATION	3.372579307618027E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999876506880762	WITHOUT_CLASSIFICATION	1.234931192384852E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999969389836856	WITHOUT_CLASSIFICATION	3.061016314543873E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999959402963623	WITHOUT_CLASSIFICATION	4.05970363772083E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996989177308211	WITHOUT_CLASSIFICATION	3.010822691789199E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999927865243614	WITHOUT_CLASSIFICATION	7.213475638533099E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999721124140721	WITHOUT_CLASSIFICATION	2.7887585927854188E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999509953693958	WITHOUT_CLASSIFICATION	4.900463060415048E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998439886540851	WITHOUT_CLASSIFICATION	1.5601134591494942E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998314434603608	WITHOUT_CLASSIFICATION	1.685565396393311E-4	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997503794105252	WITHOUT_CLASSIFICATION	2.4962058947483395E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999929027656578	WITHOUT_CLASSIFICATION	7.097234342151449E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995518467896722	WITHOUT_CLASSIFICATION	4.4815321032780353E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9994763472011077	WITHOUT_CLASSIFICATION	5.236527988922788E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999583149634672	WITHOUT_CLASSIFICATION	4.168503653268228E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998390573215221	WITHOUT_CLASSIFICATION	1.6094267847776216E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999825234789187	WITHOUT_CLASSIFICATION	1.747652108130966E-4	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9992220685348305	WITHOUT_CLASSIFICATION	7.779314651695734E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9992220685348305	WITHOUT_CLASSIFICATION	7.779314651695734E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999730152419739	WITHOUT_CLASSIFICATION	2.698475802613408E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999850548158078	WITHOUT_CLASSIFICATION	1.494518419227522E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9993290591065193	WITHOUT_CLASSIFICATION	6.709408934807927E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999946488792082	WITHOUT_CLASSIFICATION	5.351120791813929E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999901717554759	WITHOUT_CLASSIFICATION	9.828244524099251E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9987654223691538	WITHOUT_CLASSIFICATION	0.0012345776308462758	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9996050614219684	WITHOUT_CLASSIFICATION	3.9493857803171885E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9990185395592263	WITHOUT_CLASSIFICATION	9.81460440773697E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999451371944698	WITHOUT_CLASSIFICATION	5.48628055303104E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998280596520308	WITHOUT_CLASSIFICATION	1.7194034796923766E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9990745568437954	WITHOUT_CLASSIFICATION	9.254431562046139E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999160717432389	WITHOUT_CLASSIFICATION	8.39282567611288E-5	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995857310697547	WITHOUT_CLASSIFICATION	4.1426893024529044E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997126926126211	WITHOUT_CLASSIFICATION	2.8730738737892163E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999508505787265	WITHOUT_CLASSIFICATION	4.9149421273615594E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999998210201019	WITHOUT_CLASSIFICATION	1.7897989810086982E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999315460626	WITHOUT_CLASSIFICATION	6.845393749351424E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999985587899062	WITHOUT_CLASSIFICATION	1.441210093851114E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999372119728892	WITHOUT_CLASSIFICATION	6.278802711079044E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999192373575723	WITHOUT_CLASSIFICATION	8.076264242762383E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999985587899062	WITHOUT_CLASSIFICATION	1.441210093851114E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999603877350711	WITHOUT_CLASSIFICATION	3.9612264928823616E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999816707010496	WITHOUT_CLASSIFICATION	1.8329298950476675E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998414854901853	WITHOUT_CLASSIFICATION	1.585145098147516E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998645039558507	WITHOUT_CLASSIFICATION	1.3549604414929282E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999928747902889	WITHOUT_CLASSIFICATION	7.125209711120363E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999868237343728	WITHOUT_CLASSIFICATION	1.3176265627257678E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9995849188613053	WITHOUT_CLASSIFICATION	4.1508113869475764E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999734142357416	WITHOUT_CLASSIFICATION	2.6585764258431623E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999968269070938	WITHOUT_CLASSIFICATION	3.1730929062715453E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999671327333023	WITHOUT_CLASSIFICATION	3.2867266697747696E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999937812114079	WITHOUT_CLASSIFICATION	6.218788592052951E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999413175231093	WITHOUT_CLASSIFICATION	5.868247689062566E-5	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999946503554329	WITHOUT_CLASSIFICATION	5.349644567164438E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999848494772394	WITHOUT_CLASSIFICATION	1.5150522760634382E-5	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999979380570989	WITHOUT_CLASSIFICATION	2.0619429010965042E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9990554107615	WITHOUT_CLASSIFICATION	9.445892384999606E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999909642297148	WITHOUT_CLASSIFICATION	9.035770285220617E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999945547431821	WITHOUT_CLASSIFICATION	5.445256817915652E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9983275451338421	WITHOUT_CLASSIFICATION	0.0016724548661579072	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9996691773311732	WITHOUT_CLASSIFICATION	3.3082266882677606E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996649205418	WITHOUT_CLASSIFICATION	3.350794582325503E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999828273505252	WITHOUT_CLASSIFICATION	1.717264947472616E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998844539806254	WITHOUT_CLASSIFICATION	1.1554601937451582E-4	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999901834647474	WITHOUT_CLASSIFICATION	9.816535252593837E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999995158834512	WITHOUT_CLASSIFICATION	4.841165488087352E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997799501725341	WITHOUT_CLASSIFICATION	2.2004982746577913E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9998194606461208	WITHOUT_CLASSIFICATION	1.80539353879188E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999885989355302	WITHOUT_CLASSIFICATION	1.1401064469862918E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999596364021465	WITHOUT_CLASSIFICATION	4.036359785362092E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9995099210496401	WITHOUT_CLASSIFICATION	4.900789503598993E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999932419418569	WITHOUT_CLASSIFICATION	6.758058143100679E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999519895649779	WITHOUT_CLASSIFICATION	4.801043502209399E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9974296208213697	WITHOUT_CLASSIFICATION	0.002570379178630334	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998638624728872	WITHOUT_CLASSIFICATION	1.361375271129256E-4	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9998214266272376	WITHOUT_CLASSIFICATION	1.7857337276251092E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999713098377542	WITHOUT_CLASSIFICATION	2.8690162245835746E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999988768741942	WITHOUT_CLASSIFICATION	1.123125805801795E-5	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999949442834305	WITHOUT_CLASSIFICATION	5.055716569505406E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999949450325525	WITHOUT_CLASSIFICATION	5.054967447501025E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999984270966502	WITHOUT_CLASSIFICATION	1.572903349799028E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999937576405794	WITHOUT_CLASSIFICATION	6.2423594206538E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9896848595388775	WITHOUT_CLASSIFICATION	0.010315140461122451	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999350509535089	WITHOUT_CLASSIFICATION	6.494904649117315E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999321505930808	WITHOUT_CLASSIFICATION	6.784940691917191E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998596540869525	WITHOUT_CLASSIFICATION	1.403459130473869E-4	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999012548344456	WITHOUT_CLASSIFICATION	9.874516555440266E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999604368620797	WITHOUT_CLASSIFICATION	3.9563137920371135E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999155583157812	WITHOUT_CLASSIFICATION	8.444168421893642E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999683407748459	WITHOUT_CLASSIFICATION	3.165922515409478E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999603852026229	WITHOUT_CLASSIFICATION	3.961479737700426E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999944715131308	WITHOUT_CLASSIFICATION	5.528486869161383E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999811139512802	WITHOUT_CLASSIFICATION	1.8886048719772606E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999221340922928	WITHOUT_CLASSIFICATION	7.786590770721447E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999961624191113	WITHOUT_CLASSIFICATION	3.837580888717156E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999992559448044	WITHOUT_CLASSIFICATION	7.440551955930952E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999992506083192	WITHOUT_CLASSIFICATION	7.493916808609634E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999673185492477	WITHOUT_CLASSIFICATION	3.268145075234272E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9996648268197154	WITHOUT_CLASSIFICATION	3.351731802845584E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659496988398	WITHOUT_CLASSIFICATION	3.4050301160181273E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999599614719243	WITHOUT_CLASSIFICATION	4.003852807573193E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999606627534222	WITHOUT_CLASSIFICATION	3.933724657785347E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999947851614905	WITHOUT_CLASSIFICATION	5.21483850941863E-6	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999870887850615	WITHOUT_CLASSIFICATION	1.2911214938410246E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999929919811208	WITHOUT_CLASSIFICATION	7.008018879186922E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999994417599714	WITHOUT_CLASSIFICATION	5.582400286679304E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999993198070831	WITHOUT_CLASSIFICATION	6.801929168951794E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999656640061263	WITHOUT_CLASSIFICATION	3.43359938736177E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999993198070831	WITHOUT_CLASSIFICATION	6.801929168951794E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999406848320201	WITHOUT_CLASSIFICATION	5.9315167979893305E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999922433702595	WITHOUT_CLASSIFICATION	7.756629740505746E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999944053923062	WITHOUT_CLASSIFICATION	5.594607693752622E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998954353471722	WITHOUT_CLASSIFICATION	1.0456465282784302E-4	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999343876157322	WITHOUT_CLASSIFICATION	6.561238426792439E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9937434120333012	WITHOUT_CLASSIFICATION	0.006256587966698811	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999974472849161	WITHOUT_CLASSIFICATION	2.552715083877733E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999921811098076	WITHOUT_CLASSIFICATION	7.818890192430554E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999969210489588	WITHOUT_CLASSIFICATION	3.078951041133231E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997155421008606	WITHOUT_CLASSIFICATION	2.844578991393584E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999889002525933	WITHOUT_CLASSIFICATION	1.1099747406650564E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999880796690562	WITHOUT_CLASSIFICATION	1.1920330943742253E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990959934011847	WITHOUT_CLASSIFICATION	9.040065988152479E-4	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9982993034261372	WITHOUT_CLASSIFICATION	0.0017006965738629348	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999559450096401	WITHOUT_CLASSIFICATION	4.4054990359807775E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999964584882121	WITHOUT_CLASSIFICATION	3.54151178803331E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999012546241447	WITHOUT_CLASSIFICATION	9.874537585529173E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999012546241447	WITHOUT_CLASSIFICATION	9.874537585529173E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998212642346757	WITHOUT_CLASSIFICATION	1.7873576532424909E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999765504518208	WITHOUT_CLASSIFICATION	2.3449548179242567E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999738407487985	WITHOUT_CLASSIFICATION	2.6159251201522557E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999757043764225	WITHOUT_CLASSIFICATION	2.4295623577534725E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999755382149599	WITHOUT_CLASSIFICATION	2.4461785040156886E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999888841686069	WITHOUT_CLASSIFICATION	1.1115831393050822E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9981020335999035	WITHOUT_CLASSIFICATION	0.0018979664000965634	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998423513244487	WITHOUT_CLASSIFICATION	1.5764867555135174E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999937986193147	WITHOUT_CLASSIFICATION	6.201380685303023E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999890365268259	WITHOUT_CLASSIFICATION	1.096347317413431E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999272213856231	WITHOUT_CLASSIFICATION	7.277861437690092E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999974836916088	WITHOUT_CLASSIFICATION	2.5163083912000056E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999893538918861	WITHOUT_CLASSIFICATION	1.0646108113798966E-5	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999111933162732	WITHOUT_CLASSIFICATION	8.88066837267564E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999867092729962	WITHOUT_CLASSIFICATION	1.3290727003780518E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999754025235447	WITHOUT_CLASSIFICATION	2.4597476455449708E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999585655108658	WITHOUT_CLASSIFICATION	4.143448913415977E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995875066461224	WITHOUT_CLASSIFICATION	4.1249335387760836E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999247063118832	WITHOUT_CLASSIFICATION	7.529368811680364E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999837262104834	WITHOUT_CLASSIFICATION	1.6273789516684124E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999428838974654	WITHOUT_CLASSIFICATION	5.711610253456061E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999961206276831	WITHOUT_CLASSIFICATION	3.87937231699343E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999873269901576	WITHOUT_CLASSIFICATION	1.2673009842437238E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999863497794383	WITHOUT_CLASSIFICATION	1.3650220561589203E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9997485911580557	WITHOUT_CLASSIFICATION	2.5140884194425753E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999920391540754	WITHOUT_CLASSIFICATION	7.960845924495125E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9977592702672526	WITHOUT_CLASSIFICATION	0.00224072973274727	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9995583414555516	WITHOUT_CLASSIFICATION	4.4165854444845436E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999089716128049	WITHOUT_CLASSIFICATION	9.102838719508448E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999088457260368	WITHOUT_CLASSIFICATION	9.1154273963292E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9989983270706158	WITHOUT_CLASSIFICATION	0.0010016729293842999	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999110465338653	WITHOUT_CLASSIFICATION	8.895346613463184E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9933385359447208	WITHOUT_CLASSIFICATION	0.006661464055279148	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9997946062374138	WITHOUT_CLASSIFICATION	2.053937625862657E-4	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996273573102809	WITHOUT_CLASSIFICATION	3.726426897191057E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999817486168007	WITHOUT_CLASSIFICATION	1.8251383199402984E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999610189147524	WITHOUT_CLASSIFICATION	3.898108524770079E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999579073450288	WITHOUT_CLASSIFICATION	4.209265497122367E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999887929087613	WITHOUT_CLASSIFICATION	1.1207091238747988E-5	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999520505410211	WITHOUT_CLASSIFICATION	4.7949458978898763E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999475534501592	WITHOUT_CLASSIFICATION	5.244654984092067E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967230655842	WITHOUT_CLASSIFICATION	3.276934415796934E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999088435147312	WITHOUT_CLASSIFICATION	9.11564852688993E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999851456825044	WITHOUT_CLASSIFICATION	1.485431749561175E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999902475886097	WITHOUT_CLASSIFICATION	9.752411390269104E-6	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999973341246274	WITHOUT_CLASSIFICATION	2.665875372619E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999839500157476	WITHOUT_CLASSIFICATION	1.6049984252375706E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999889505755408	WITHOUT_CLASSIFICATION	1.1049424459156186E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999828655401971	WITHOUT_CLASSIFICATION	1.7134459802881776E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999599646572274	WITHOUT_CLASSIFICATION	4.003534277254377E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967230655842	WITHOUT_CLASSIFICATION	3.276934415796934E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999673746623071	WITHOUT_CLASSIFICATION	3.26253376929128E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997434695825257	WITHOUT_CLASSIFICATION	2.565304174742224E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999635059198408	WITHOUT_CLASSIFICATION	3.649408015910177E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999534243365497	WITHOUT_CLASSIFICATION	4.657566345035654E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999390137136093	WITHOUT_CLASSIFICATION	6.0986286390651864E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999390137136093	WITHOUT_CLASSIFICATION	6.0986286390651864E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9985502317655783	WITHOUT_CLASSIFICATION	0.001449768234421771	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999313175036374	WITHOUT_CLASSIFICATION	6.86824963625182E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998815651453927	WITHOUT_CLASSIFICATION	1.184348546072272E-4	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999592415759871	WITHOUT_CLASSIFICATION	4.075842401277124E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999848153069515	WITHOUT_CLASSIFICATION	1.518469304853264E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999970798865768	WITHOUT_CLASSIFICATION	2.9201134232556213E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9989929073836799	WITHOUT_CLASSIFICATION	0.0010070926163201234	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999912462313046	WITHOUT_CLASSIFICATION	8.753768695405839E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996163279575736	WITHOUT_CLASSIFICATION	3.8367204242641264E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999150026883596	WITHOUT_CLASSIFICATION	8.499731164033238E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997628019273284	WITHOUT_CLASSIFICATION	2.371980726716131E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9996585819772849	WITHOUT_CLASSIFICATION	3.414180227151675E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999978196603111	WITHOUT_CLASSIFICATION	2.180339688798998E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999376648103941	WITHOUT_CLASSIFICATION	6.233518960583863E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993029583208398	WITHOUT_CLASSIFICATION	6.970416791601965E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999994467503404	WITHOUT_CLASSIFICATION	5.532496595906389E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997375405676776	WITHOUT_CLASSIFICATION	2.624594323223564E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996819977678881	WITHOUT_CLASSIFICATION	3.180022321119851E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999975088403514	WITHOUT_CLASSIFICATION	2.491159648469886E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996606858051896	WITHOUT_CLASSIFICATION	3.3931419481026694E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999932100558785	WITHOUT_CLASSIFICATION	6.7899441215766205E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999955612358025	WITHOUT_CLASSIFICATION	4.43876419758567E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999975865363397	WITHOUT_CLASSIFICATION	2.4134636601658056E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.997983105553164	WITHOUT_CLASSIFICATION	0.002016894446836008	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999836748053292	WITHOUT_CLASSIFICATION	1.6325194670797207E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999473409099922	WITHOUT_CLASSIFICATION	5.265909000779084E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999884242414337	WITHOUT_CLASSIFICATION	1.1575758566144469E-5	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999750774282741	WITHOUT_CLASSIFICATION	2.492257172602924E-5	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9991734645974111	WITHOUT_CLASSIFICATION	8.265354025889272E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999461440390708	WITHOUT_CLASSIFICATION	5.385596092929024E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999750774282741	WITHOUT_CLASSIFICATION	2.492257172602924E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999912331690538	WITHOUT_CLASSIFICATION	8.7668309462731E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9993858978753388	WITHOUT_CLASSIFICATION	6.141021246612982E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999761812474572	WITHOUT_CLASSIFICATION	2.3818752542652086E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9993360223674632	WITHOUT_CLASSIFICATION	6.639776325367494E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999559592955425	WITHOUT_CLASSIFICATION	4.404070445750865E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999272213856231	WITHOUT_CLASSIFICATION	7.277861437690092E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9993143902964565	WITHOUT_CLASSIFICATION	6.856097035435393E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999156221594924	WITHOUT_CLASSIFICATION	8.43778405075904E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999925589239395	WITHOUT_CLASSIFICATION	7.441076060496049E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999879852975967	WITHOUT_CLASSIFICATION	1.2014702403286399E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9993659839093372	WITHOUT_CLASSIFICATION	6.340160906628356E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999692335731687	WITHOUT_CLASSIFICATION	3.076642683127417E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9995818272498667	WITHOUT_CLASSIFICATION	4.181727501333748E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999620032518749	WITHOUT_CLASSIFICATION	3.7996748125091086E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999609996396772	WITHOUT_CLASSIFICATION	3.9000360322795546E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999781020487211	WITHOUT_CLASSIFICATION	2.1897951278892695E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999925214651374	WITHOUT_CLASSIFICATION	7.478534862564259E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.999992514038557	WITHOUT_CLASSIFICATION	7.485961443011323E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999963263110037	WITHOUT_CLASSIFICATION	3.6736889963224815E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999582510669326	WITHOUT_CLASSIFICATION	4.1748933067333244E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999729472269309	WITHOUT_CLASSIFICATION	2.705277306910892E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999682956933539	WITHOUT_CLASSIFICATION	3.1704306646060886E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999994022498159	WITHOUT_CLASSIFICATION	5.977501840985422E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999583287578012	WITHOUT_CLASSIFICATION	4.167124219879383E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999944409501828	WITHOUT_CLASSIFICATION	5.559049817208317E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9994881468264712	WITHOUT_CLASSIFICATION	5.118531735288074E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999089461934765	WITHOUT_CLASSIFICATION	9.105380652359084E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9996140773775217	WITHOUT_CLASSIFICATION	3.859226224783763E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999937103259435	WITHOUT_CLASSIFICATION	6.2896740564346355E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.999982595495165	WITHOUT_CLASSIFICATION	1.7404504835093445E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704200233676	WITHOUT_CLASSIFICATION	2.957997663241604E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734413230714	WITHOUT_CLASSIFICATION	2.6558676928548018E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999832580460986	WITHOUT_CLASSIFICATION	1.6741953901399792E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999902517270879	WITHOUT_CLASSIFICATION	9.748272912098237E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999911261257148	WITHOUT_CLASSIFICATION	8.873874285073902E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999996784155352	WITHOUT_CLASSIFICATION	3.2158446480118305E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.99999376987392	WITHOUT_CLASSIFICATION	6.230126080029568E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999920914672134	WITHOUT_CLASSIFICATION	7.908532786678226E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999865313907446	WITHOUT_CLASSIFICATION	1.3468609255427366E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999996293149631	WITHOUT_CLASSIFICATION	3.7068503690536234E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999751075952239	WITHOUT_CLASSIFICATION	2.4892404776068293E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999926308947417	WITHOUT_CLASSIFICATION	7.369105258400813E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999084662245484	WITHOUT_CLASSIFICATION	9.15337754516424E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999666737578979	WITHOUT_CLASSIFICATION	3.332624210203995E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999966072850324	WITHOUT_CLASSIFICATION	3.392714967685717E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999935908183436	WITHOUT_CLASSIFICATION	6.4091816563591775E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999707789851989	WITHOUT_CLASSIFICATION	2.9221014801050793E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998573744306593	WITHOUT_CLASSIFICATION	1.4262556934063357E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999474017015846	WITHOUT_CLASSIFICATION	5.259829841534903E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999976126628488	WITHOUT_CLASSIFICATION	2.387337151191521E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999961043797289	WITHOUT_CLASSIFICATION	3.895620271186221E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998866678135897	WITHOUT_CLASSIFICATION	1.1333218641022721E-4	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999222932012163	WITHOUT_CLASSIFICATION	7.77067987837488E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999779693797898	WITHOUT_CLASSIFICATION	2.203062021018751E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994877926766508	WITHOUT_CLASSIFICATION	5.122073233492901E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999986537896235	WITHOUT_CLASSIFICATION	1.3462103764751036E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999898573296064	WITHOUT_CLASSIFICATION	1.0142670393597832E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992830040373725	WITHOUT_CLASSIFICATION	7.169959626275535E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999339499848325	WITHOUT_CLASSIFICATION	6.605001516745045E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704200233676	WITHOUT_CLASSIFICATION	2.957997663241604E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999618241571827	WITHOUT_CLASSIFICATION	3.8175842817291394E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999994333575775	WITHOUT_CLASSIFICATION	5.666424226466707E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999080582149041	WITHOUT_CLASSIFICATION	9.194178509578825E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999559551660869	WITHOUT_CLASSIFICATION	4.404483391316529E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999775506828321	WITHOUT_CLASSIFICATION	2.2449317167981404E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999426195883304	WITHOUT_CLASSIFICATION	5.7380411669530695E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717125790595	WITHOUT_CLASSIFICATION	2.8287420940612017E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999966965090835	WITHOUT_CLASSIFICATION	3.3034909164470702E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999986168382087	WITHOUT_CLASSIFICATION	1.3831617912561783E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999492892077892	WITHOUT_CLASSIFICATION	5.071079221075629E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999995871998493	WITHOUT_CLASSIFICATION	4.128001507021899E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999584007873736	WITHOUT_CLASSIFICATION	4.159921262639738E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999898964986952	WITHOUT_CLASSIFICATION	1.0103501304711916E-5	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999800430143757	WITHOUT_CLASSIFICATION	1.995698562424804E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999406848320201	WITHOUT_CLASSIFICATION	5.9315167979893305E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999996923802958	WITHOUT_CLASSIFICATION	3.076197041118928E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999989985278077	WITHOUT_CLASSIFICATION	1.0014721923174567E-6	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999921374059573	WITHOUT_CLASSIFICATION	7.862594042770614E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999959321556152	WITHOUT_CLASSIFICATION	4.067844384850868E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999992497471363	WITHOUT_CLASSIFICATION	7.502528636690986E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999746232577844	WITHOUT_CLASSIFICATION	2.537674221559642E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999746232577844	WITHOUT_CLASSIFICATION	2.537674221559642E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999829738059093	WITHOUT_CLASSIFICATION	1.7026194090700088E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999960595117754	WITHOUT_CLASSIFICATION	3.940488224633403E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999901160406055	WITHOUT_CLASSIFICATION	9.883959394492825E-6	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999842189089296	WITHOUT_CLASSIFICATION	1.5781091070418103E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999319792674056	WITHOUT_CLASSIFICATION	6.802073259439743E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999933353908048	WITHOUT_CLASSIFICATION	6.664609195111973E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999741237520046	WITHOUT_CLASSIFICATION	2.5876247995447116E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998849855662714	WITHOUT_CLASSIFICATION	1.1501443372851779E-4	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998849855662714	WITHOUT_CLASSIFICATION	1.1501443372851779E-4	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9993202383037234	WITHOUT_CLASSIFICATION	6.797616962765956E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999880555604915	WITHOUT_CLASSIFICATION	1.1944439508493364E-5	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998158299615062	WITHOUT_CLASSIFICATION	1.8417003849377058E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999921787732604	WITHOUT_CLASSIFICATION	7.821226739629935E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999921787732604	WITHOUT_CLASSIFICATION	7.821226739629935E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999921787732604	WITHOUT_CLASSIFICATION	7.821226739629935E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999609288579148	WITHOUT_CLASSIFICATION	3.9071142085184654E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999781674163127	WITHOUT_CLASSIFICATION	2.183258368727039E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999786631674211	WITHOUT_CLASSIFICATION	2.1336832578888757E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999621590020228	WITHOUT_CLASSIFICATION	3.7840997977175315E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999945174074761	WITHOUT_CLASSIFICATION	5.482592523872057E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999993844141777	WITHOUT_CLASSIFICATION	6.155858222187273E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999552102962183	WITHOUT_CLASSIFICATION	4.478970378179447E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990819284489855	WITHOUT_CLASSIFICATION	9.180715510144736E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999917283223665	WITHOUT_CLASSIFICATION	8.271677633587593E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999929669382057	WITHOUT_CLASSIFICATION	7.033061794199334E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999700212177342	WITHOUT_CLASSIFICATION	2.9978782265871986E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998657637464844	WITHOUT_CLASSIFICATION	1.3423625351557047E-4	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999794080063872	WITHOUT_CLASSIFICATION	2.0591993612773412E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999971023809483	WITHOUT_CLASSIFICATION	2.8976190516345223E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999886438695054	WITHOUT_CLASSIFICATION	1.1356130494646223E-5	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999922334500475	WITHOUT_CLASSIFICATION	7.766549952509217E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999949321138387	WITHOUT_CLASSIFICATION	5.0678861612491474E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999746232577844	WITHOUT_CLASSIFICATION	2.537674221559642E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999897632336385	WITHOUT_CLASSIFICATION	1.0236766361418422E-5	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999885810315147	WITHOUT_CLASSIFICATION	1.1418968485452213E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999650576124474	WITHOUT_CLASSIFICATION	3.4942387552739444E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999975641491974	WITHOUT_CLASSIFICATION	2.4358508025960624E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999868596862914	WITHOUT_CLASSIFICATION	1.3140313708618464E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999981634561159	WITHOUT_CLASSIFICATION	1.8365438840609784E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999500606427254	WITHOUT_CLASSIFICATION	4.993935727458305E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999939489236626	WITHOUT_CLASSIFICATION	6.051076337440976E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999209582731968	WITHOUT_CLASSIFICATION	7.904172680315046E-5	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999931763298125	WITHOUT_CLASSIFICATION	6.823670187362599E-6	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997150473954458	WITHOUT_CLASSIFICATION	2.8495260455413293E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999733825938733	WITHOUT_CLASSIFICATION	2.661740612680921E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999367537780052	WITHOUT_CLASSIFICATION	6.324622199482595E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999200603562005	WITHOUT_CLASSIFICATION	7.993964379948895E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999773802522309	WITHOUT_CLASSIFICATION	2.2619747769063725E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999992538596078	WITHOUT_CLASSIFICATION	7.461403922419481E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999964745433357	WITHOUT_CLASSIFICATION	3.525456664274301E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999987585081191	WITHOUT_CLASSIFICATION	1.2414918808973614E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999847804279703	WITHOUT_CLASSIFICATION	1.5219572029791796E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999847804279703	WITHOUT_CLASSIFICATION	1.5219572029791796E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999852823766423	WITHOUT_CLASSIFICATION	1.47176233575965E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999957095776654	WITHOUT_CLASSIFICATION	4.290422334622648E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999985180057445	WITHOUT_CLASSIFICATION	1.48199425550185E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999770059491284	WITHOUT_CLASSIFICATION	2.2994050871605916E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999463053509922	WITHOUT_CLASSIFICATION	5.3694649007868665E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999673471576059	WITHOUT_CLASSIFICATION	3.2652842394014704E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999826238098802	WITHOUT_CLASSIFICATION	1.7376190119765306E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998640328478949	WITHOUT_CLASSIFICATION	1.359671521049414E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999917257128563	WITHOUT_CLASSIFICATION	8.274287143759585E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999890882608573	WITHOUT_CLASSIFICATION	1.0911739142672453E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999405702060229	WITHOUT_CLASSIFICATION	5.9429793977144546E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995868307719985	WITHOUT_CLASSIFICATION	4.131692280014959E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999986923361952	WITHOUT_CLASSIFICATION	1.30766380482036E-6	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999945862105593	WITHOUT_CLASSIFICATION	5.413789440846373E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999994569465228	WITHOUT_CLASSIFICATION	5.430534771678749E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999298708063985	WITHOUT_CLASSIFICATION	7.012919360150458E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989250310449	WITHOUT_CLASSIFICATION	1.0749689550465498E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989250310449	WITHOUT_CLASSIFICATION	1.0749689550465498E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999693957047078	WITHOUT_CLASSIFICATION	3.0604295292320015E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998774340109	WITHOUT_CLASSIFICATION	1.225659891420498E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999433168827097	WITHOUT_CLASSIFICATION	5.668311729027874E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999433168827097	WITHOUT_CLASSIFICATION	5.668311729027874E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999077815326113	WITHOUT_CLASSIFICATION	9.221846738869757E-5	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998953637109517	WITHOUT_CLASSIFICATION	1.0463628904832941E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993783536908812	WITHOUT_CLASSIFICATION	6.216463091188427E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999967759557428	WITHOUT_CLASSIFICATION	3.224044257189061E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999603563086993	WITHOUT_CLASSIFICATION	3.964369130079396E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999044794978935	WITHOUT_CLASSIFICATION	9.552050210643033E-5	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999698581002509	WITHOUT_CLASSIFICATION	3.0141899749161557E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999967759557428	WITHOUT_CLASSIFICATION	3.224044257189061E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999969254569154	WITHOUT_CLASSIFICATION	3.0745430845997176E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999989785722877	WITHOUT_CLASSIFICATION	1.0214277123059425E-5	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999960927406976	WITHOUT_CLASSIFICATION	3.9072593024684454E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999555960676545	WITHOUT_CLASSIFICATION	4.440393234557969E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999713265121858	WITHOUT_CLASSIFICATION	2.8673487814275453E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999906208007214	WITHOUT_CLASSIFICATION	9.379199278661243E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999768402316764	WITHOUT_CLASSIFICATION	2.3159768323598008E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999862007789322	WITHOUT_CLASSIFICATION	1.3799221067700827E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999975200206566	WITHOUT_CLASSIFICATION	2.479979343401343E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999858149313534	WITHOUT_CLASSIFICATION	1.4185068646452142E-5	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998355650386376	WITHOUT_CLASSIFICATION	1.6443496136252337E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999958867056903	WITHOUT_CLASSIFICATION	4.113294309810293E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999925980752105	WITHOUT_CLASSIFICATION	7.401924789498718E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999956541715498	WITHOUT_CLASSIFICATION	4.345828450151811E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999919322533827	WITHOUT_CLASSIFICATION	8.067746617424055E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999925627743538	WITHOUT_CLASSIFICATION	7.437225646278852E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9992007436627406	WITHOUT_CLASSIFICATION	7.992563372593564E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999264811580745	WITHOUT_CLASSIFICATION	7.351884192551431E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999264811580745	WITHOUT_CLASSIFICATION	7.351884192551431E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999768402316764	WITHOUT_CLASSIFICATION	2.3159768323598008E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999791496959742	WITHOUT_CLASSIFICATION	2.0850304025777303E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999924637833911	WITHOUT_CLASSIFICATION	7.536216608860064E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999849270395567	WITHOUT_CLASSIFICATION	1.5072960443304477E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999007400999301	WITHOUT_CLASSIFICATION	9.925990006995746E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999888255674582	WITHOUT_CLASSIFICATION	1.1174432541802407E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955414502123	WITHOUT_CLASSIFICATION	4.458549787691765E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999912061882466	WITHOUT_CLASSIFICATION	8.79381175351722E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999537323462238	WITHOUT_CLASSIFICATION	4.6267653776211786E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999980610179037	WITHOUT_CLASSIFICATION	1.9389820963514016E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999869300538751	WITHOUT_CLASSIFICATION	1.3069946124984803E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999990838534165	WITHOUT_CLASSIFICATION	9.161465833791387E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999929653630559	WITHOUT_CLASSIFICATION	7.0346369441384235E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999857590019123	WITHOUT_CLASSIFICATION	1.4240998087604277E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999759440415575	WITHOUT_CLASSIFICATION	2.4055958442477523E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999688583385281	WITHOUT_CLASSIFICATION	3.1141661471912426E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999933245713588	WITHOUT_CLASSIFICATION	6.675428641120893E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999971394868966	WITHOUT_CLASSIFICATION	2.860513103324211E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999969387573278	WITHOUT_CLASSIFICATION	3.061242672238023E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999943231309334	WITHOUT_CLASSIFICATION	5.6768690666076105E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999888585935314	WITHOUT_CLASSIFICATION	1.1141406468519181E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999258855630571	WITHOUT_CLASSIFICATION	7.411443694295545E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999975743857435	WITHOUT_CLASSIFICATION	2.4256142564968236E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999810577583101	WITHOUT_CLASSIFICATION	1.894224168981893E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999948499048376	WITHOUT_CLASSIFICATION	5.150095162436199E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999701725805304	WITHOUT_CLASSIFICATION	2.9827419469518928E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999853775195171	WITHOUT_CLASSIFICATION	1.4622480482864262E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9979957004077951	WITHOUT_CLASSIFICATION	0.002004299592204946	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997558883014939	WITHOUT_CLASSIFICATION	2.441116985061473E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999737510520804	WITHOUT_CLASSIFICATION	2.6248947919564576E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999798293112032	WITHOUT_CLASSIFICATION	2.0170688796757266E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999683712498437	WITHOUT_CLASSIFICATION	3.162875015632935E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999908141760557	WITHOUT_CLASSIFICATION	9.185823944377682E-6	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999950529920435	WITHOUT_CLASSIFICATION	4.9470079564814864E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999962209435136	WITHOUT_CLASSIFICATION	3.7790564865098836E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999914987650986	WITHOUT_CLASSIFICATION	8.501234901416383E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999346279265473	WITHOUT_CLASSIFICATION	6.53720734527227E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999960849162477	WITHOUT_CLASSIFICATION	3.915083752357727E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999836297392503	WITHOUT_CLASSIFICATION	1.637026074978139E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997805818069365	WITHOUT_CLASSIFICATION	2.1941819306346312E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999912798841953	WITHOUT_CLASSIFICATION	8.720115804720739E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999685504917923	WITHOUT_CLASSIFICATION	3.1449508207636954E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999795811851235	WITHOUT_CLASSIFICATION	2.0418814876541695E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9997980932591839	WITHOUT_CLASSIFICATION	2.0190674081607262E-4	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998310601600069	WITHOUT_CLASSIFICATION	1.689398399931233E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998278240942995	WITHOUT_CLASSIFICATION	1.7217590570057427E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999541011664518	WITHOUT_CLASSIFICATION	4.589883354819824E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999975415924456	WITHOUT_CLASSIFICATION	2.458407554435257E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997464608107998	WITHOUT_CLASSIFICATION	2.535391892002237E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999987838410519	WITHOUT_CLASSIFICATION	1.216158948073678E-6	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999973385252409	WITHOUT_CLASSIFICATION	2.6614747590970598E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999218740636454	WITHOUT_CLASSIFICATION	7.812593635449237E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999603563086993	WITHOUT_CLASSIFICATION	3.964369130079396E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999383563432912	WITHOUT_CLASSIFICATION	6.164365670879792E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999688583385281	WITHOUT_CLASSIFICATION	3.1141661471912426E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999828820703515	WITHOUT_CLASSIFICATION	1.7117929648532484E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999791237641448	WITHOUT_CLASSIFICATION	2.0876235855303066E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999967589118571	WITHOUT_CLASSIFICATION	3.241088142855744E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999967558562394	WITHOUT_CLASSIFICATION	3.2441437607023736E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999834354472944	WITHOUT_CLASSIFICATION	1.6564552705588487E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999984453282921	WITHOUT_CLASSIFICATION	1.5546717079795793E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999829376195694	WITHOUT_CLASSIFICATION	1.706238043066446E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999800053734962	WITHOUT_CLASSIFICATION	1.9994626503795523E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999614804322233	WITHOUT_CLASSIFICATION	3.8519567776741585E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999979270287778	WITHOUT_CLASSIFICATION	2.0729712222128686E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99992053418907	WITHOUT_CLASSIFICATION	7.946581093002627E-5	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999999303183244	WITHOUT_CLASSIFICATION	6.968167559376283E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999968238895803	WITHOUT_CLASSIFICATION	3.176110419718536E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999968238895803	WITHOUT_CLASSIFICATION	3.176110419718536E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999474444115473	WITHOUT_CLASSIFICATION	5.2555588452710293E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995932943621675	WITHOUT_CLASSIFICATION	4.0670563783243833E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999971444226897	WITHOUT_CLASSIFICATION	2.855577310283097E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9980037813790131	WITHOUT_CLASSIFICATION	0.0019962186209868597	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999910608686678	WITHOUT_CLASSIFICATION	8.93913133211763E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999920388388289	WITHOUT_CLASSIFICATION	7.961161171176903E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999998446263404	WITHOUT_CLASSIFICATION	1.553736596076363E-6	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999689119670355	WITHOUT_CLASSIFICATION	3.1088032964496656E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999738752607517	WITHOUT_CLASSIFICATION	2.6124739248377918E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999812115577206	WITHOUT_CLASSIFICATION	1.878844227942746E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999763756320778	WITHOUT_CLASSIFICATION	2.3624367922153616E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999763756320778	WITHOUT_CLASSIFICATION	2.3624367922153616E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998894056485	WITHOUT_CLASSIFICATION	1.105943514870542E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999805983272947	WITHOUT_CLASSIFICATION	1.9401672705355595E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999930699171508	WITHOUT_CLASSIFICATION	6.930082849164124E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999759299186065	WITHOUT_CLASSIFICATION	2.407008139349202E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999986586228351	WITHOUT_CLASSIFICATION	1.3413771648735173E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999855819110252	WITHOUT_CLASSIFICATION	1.4418088974882815E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999464277134678	WITHOUT_CLASSIFICATION	5.357228653232541E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999979285178624	WITHOUT_CLASSIFICATION	2.07148213754202E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999895429119753	WITHOUT_CLASSIFICATION	1.045708802468378E-5	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999694021745746	WITHOUT_CLASSIFICATION	3.059782542529511E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999985623214108	WITHOUT_CLASSIFICATION	1.4376785892099017E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966907472485	WITHOUT_CLASSIFICATION	3.309252751503767E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999492360507991	WITHOUT_CLASSIFICATION	5.076394920085192E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999945336037639	WITHOUT_CLASSIFICATION	5.46639623607387E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999634002097522	WITHOUT_CLASSIFICATION	3.6599790247800537E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999935773698677	WITHOUT_CLASSIFICATION	6.42263013233612E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9994715991359052	WITHOUT_CLASSIFICATION	5.284008640947194E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996505348399489	WITHOUT_CLASSIFICATION	3.49465160051098E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999943022962934	WITHOUT_CLASSIFICATION	5.697703706652046E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999987961761546	WITHOUT_CLASSIFICATION	1.2038238454452882E-6	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996606858051896	WITHOUT_CLASSIFICATION	3.3931419481026694E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999576499297695	WITHOUT_CLASSIFICATION	4.235007023042437E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997821528686779	WITHOUT_CLASSIFICATION	2.1784713132213794E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999928110945229	WITHOUT_CLASSIFICATION	7.188905477147634E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999674226824925	WITHOUT_CLASSIFICATION	3.257731750749572E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999880830442642	WITHOUT_CLASSIFICATION	1.191695573567707E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849745344376	WITHOUT_CLASSIFICATION	1.5025465562507873E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999972565188034	WITHOUT_CLASSIFICATION	2.7434811964878398E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9995490814502959	WITHOUT_CLASSIFICATION	4.509185497042556E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976250564835	WITHOUT_CLASSIFICATION	2.3749435165022658E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9979354404583078	WITHOUT_CLASSIFICATION	0.002064559541692204	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999978965552991	WITHOUT_CLASSIFICATION	2.1034447008540184E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999764844217451	WITHOUT_CLASSIFICATION	2.3515578254886873E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999887532314888	WITHOUT_CLASSIFICATION	1.1246768511113637E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784555182497	WITHOUT_CLASSIFICATION	2.1544481750239116E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999998136044567	WITHOUT_CLASSIFICATION	1.8639554330413349E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999765256630895	WITHOUT_CLASSIFICATION	2.347433691061562E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999866632287151	WITHOUT_CLASSIFICATION	1.3336771284906714E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999830367830164	WITHOUT_CLASSIFICATION	1.6963216983709385E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999880415663096	WITHOUT_CLASSIFICATION	1.195843369029439E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998199415569816	WITHOUT_CLASSIFICATION	1.8005844301842127E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999945546232613	WITHOUT_CLASSIFICATION	5.445376738660938E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999955542596607	WITHOUT_CLASSIFICATION	4.4457403392970404E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999668332268618	WITHOUT_CLASSIFICATION	3.316677313822852E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999150900394164	WITHOUT_CLASSIFICATION	8.490996058365276E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999936801509816	WITHOUT_CLASSIFICATION	6.319849018389259E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999929835901929	WITHOUT_CLASSIFICATION	7.016409807108333E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999890271665853	WITHOUT_CLASSIFICATION	1.0972833414754871E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999594774376295	WITHOUT_CLASSIFICATION	4.052256237050758E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998896297556066	WITHOUT_CLASSIFICATION	1.1037024439348275E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991836391649	WITHOUT_CLASSIFICATION	8.163608350970522E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999952484002369	WITHOUT_CLASSIFICATION	4.751599763050332E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999873218266526	WITHOUT_CLASSIFICATION	1.2678173347391195E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999676480113947	WITHOUT_CLASSIFICATION	3.2351988605212906E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999873218266526	WITHOUT_CLASSIFICATION	1.2678173347391195E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999915287335515	WITHOUT_CLASSIFICATION	8.47126644857043E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999978628345336	WITHOUT_CLASSIFICATION	2.1371654663667724E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999913248637741	WITHOUT_CLASSIFICATION	8.675136226028814E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999978091189922	WITHOUT_CLASSIFICATION	2.1908810078219158E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999911944247263	WITHOUT_CLASSIFICATION	8.805575273691864E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999913248637741	WITHOUT_CLASSIFICATION	8.675136226028814E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999933681116591	WITHOUT_CLASSIFICATION	6.631888340924676E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997738338194513	WITHOUT_CLASSIFICATION	2.2616618054875935E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999945399869904	WITHOUT_CLASSIFICATION	5.460013009633822E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999938979517199	WITHOUT_CLASSIFICATION	6.102048280122776E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999702479091941	WITHOUT_CLASSIFICATION	2.975209080584075E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.99999612443307	WITHOUT_CLASSIFICATION	3.87556693002647E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999971360591855	WITHOUT_CLASSIFICATION	2.863940814605614E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996986398587451	WITHOUT_CLASSIFICATION	3.013601412548918E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999958837101621	WITHOUT_CLASSIFICATION	4.1162898378699394E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999956262838064	WITHOUT_CLASSIFICATION	4.373716193587275E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999706526493697	WITHOUT_CLASSIFICATION	2.9347350630295955E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999983001117115	WITHOUT_CLASSIFICATION	1.6998882884023094E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997962490826	WITHOUT_CLASSIFICATION	2.037509173848769E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998817997315701	WITHOUT_CLASSIFICATION	1.1820026842989985E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999914777237148	WITHOUT_CLASSIFICATION	8.52227628513338E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999586304459144	WITHOUT_CLASSIFICATION	4.136955408559548E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9978161371375891	WITHOUT_CLASSIFICATION	0.002183862862410925	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999965670713117	WITHOUT_CLASSIFICATION	3.4329286883880966E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999709298908251	WITHOUT_CLASSIFICATION	2.9070109174779326E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.998402067267434	WITHOUT_CLASSIFICATION	0.0015979327325660675	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996980709484207	WITHOUT_CLASSIFICATION	3.0192905157938826E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.999931126994087	WITHOUT_CLASSIFICATION	6.887300591300331E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998177638107907	WITHOUT_CLASSIFICATION	1.8223618920934888E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9996457584921558	WITHOUT_CLASSIFICATION	3.542415078442899E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.99990892776333	WITHOUT_CLASSIFICATION	9.107223667004344E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999655507637202	WITHOUT_CLASSIFICATION	3.444923627993006E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999988544120548	WITHOUT_CLASSIFICATION	1.1455879451053195E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999920406379965	WITHOUT_CLASSIFICATION	7.959362003483323E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999577848895649	WITHOUT_CLASSIFICATION	4.2215110434998956E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9997789168863375	WITHOUT_CLASSIFICATION	2.2108311366249094E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999727721819514	WITHOUT_CLASSIFICATION	2.7227818048670686E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9990177828358802	WITHOUT_CLASSIFICATION	9.822171641198597E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.998402067267434	WITHOUT_CLASSIFICATION	0.0015979327325660675	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999887366081592	WITHOUT_CLASSIFICATION	1.1263391840880229E-5	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9992745727527272	WITHOUT_CLASSIFICATION	7.254272472728091E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9995041724116949	WITHOUT_CLASSIFICATION	4.958275883050747E-4	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999117743490942	WITHOUT_CLASSIFICATION	8.822565090579041E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999465010412467	WITHOUT_CLASSIFICATION	5.349895875327023E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999640518637546	WITHOUT_CLASSIFICATION	3.594813624535552E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999127048839609	WITHOUT_CLASSIFICATION	8.729511603915486E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999709275258742	WITHOUT_CLASSIFICATION	2.907247412581794E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999952915245059	WITHOUT_CLASSIFICATION	4.7084754941010176E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9996423660913308	WITHOUT_CLASSIFICATION	3.576339086691123E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9995811025734254	WITHOUT_CLASSIFICATION	4.1889742657463553E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999039056799351	WITHOUT_CLASSIFICATION	9.609432006480447E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999945665942289	WITHOUT_CLASSIFICATION	5.433405771054693E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998671486377851	WITHOUT_CLASSIFICATION	1.3285136221475756E-4	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999886440768358	WITHOUT_CLASSIFICATION	1.1355923164199432E-4	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999950279713203	WITHOUT_CLASSIFICATION	4.972028679648244E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998951774354249	WITHOUT_CLASSIFICATION	1.0482256457517007E-4	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998847537886199	WITHOUT_CLASSIFICATION	1.1524621138004686E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999033397118486	WITHOUT_CLASSIFICATION	9.666028815142573E-5	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999783982370455	WITHOUT_CLASSIFICATION	2.160176295449969E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999986161959979	WITHOUT_CLASSIFICATION	1.3838040021051759E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999986161959979	WITHOUT_CLASSIFICATION	1.3838040021051759E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999931583478511	WITHOUT_CLASSIFICATION	6.841652148931199E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999986161959979	WITHOUT_CLASSIFICATION	1.3838040021051759E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999986161959979	WITHOUT_CLASSIFICATION	1.3838040021051759E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999609560964101	WITHOUT_CLASSIFICATION	3.90439035898754E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9981771305708425	WITHOUT_CLASSIFICATION	0.0018228694291575697	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999670029807118	WITHOUT_CLASSIFICATION	3.29970192882023E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999670029807118	WITHOUT_CLASSIFICATION	3.29970192882023E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999849279759788	WITHOUT_CLASSIFICATION	1.5072024021154897E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999842252726657	WITHOUT_CLASSIFICATION	1.577472733428635E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998350791402567	WITHOUT_CLASSIFICATION	1.6492085974324823E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9902888071246069	WITHOUT_CLASSIFICATION	0.00971119287539322	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999508452676618	WITHOUT_CLASSIFICATION	4.9154732338282163E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996334419668842	WITHOUT_CLASSIFICATION	3.6655803311589594E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994562042503539	WITHOUT_CLASSIFICATION	5.437957496461246E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999507136859155	WITHOUT_CLASSIFICATION	4.92863140846691E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9992815819031681	WITHOUT_CLASSIFICATION	7.184180968319354E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9993058649413061	WITHOUT_CLASSIFICATION	6.941350586939112E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996222696114915	WITHOUT_CLASSIFICATION	3.77730388508537E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9978418921897035	WITHOUT_CLASSIFICATION	0.002158107810296424	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999929919811208	WITHOUT_CLASSIFICATION	7.008018879186922E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998701330796774	WITHOUT_CLASSIFICATION	1.2986692032263377E-4	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9996977128535391	WITHOUT_CLASSIFICATION	3.0228714646086475E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9991929242237366	WITHOUT_CLASSIFICATION	8.0707577626329E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999978301568625	WITHOUT_CLASSIFICATION	2.169843137443461E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999903409899596	WITHOUT_CLASSIFICATION	9.659010040409771E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999929919811208	WITHOUT_CLASSIFICATION	7.008018879186922E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996980709484207	WITHOUT_CLASSIFICATION	3.0192905157938826E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.999915410743558	WITHOUT_CLASSIFICATION	8.458925644188194E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999875596707103	WITHOUT_CLASSIFICATION	1.2440329289698068E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999834639650597	WITHOUT_CLASSIFICATION	1.653603494039308E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999229219594026	WITHOUT_CLASSIFICATION	7.707804059735994E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999964693577382	WITHOUT_CLASSIFICATION	3.5306422616660013E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998951360704811	WITHOUT_CLASSIFICATION	1.0486392951887101E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999916703142754	WITHOUT_CLASSIFICATION	8.329685724562047E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999887847990498	WITHOUT_CLASSIFICATION	1.1215200950149128E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999640823164718	WITHOUT_CLASSIFICATION	3.5917683528166524E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999158592273296	WITHOUT_CLASSIFICATION	8.41407726704184E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999248225138152	WITHOUT_CLASSIFICATION	7.517748618482364E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999972042664318	WITHOUT_CLASSIFICATION	2.7957335681574037E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999887356103525	WITHOUT_CLASSIFICATION	1.1264389647443865E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.99989329966868	WITHOUT_CLASSIFICATION	1.0670033131998087E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999797978995606	WITHOUT_CLASSIFICATION	2.0202100439318298E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999920804970357	WITHOUT_CLASSIFICATION	7.919502964188591E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999939405858744	WITHOUT_CLASSIFICATION	6.059414125565276E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999740613663741	WITHOUT_CLASSIFICATION	2.5938633625859244E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999593500310726	WITHOUT_CLASSIFICATION	4.06499689272729E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997950399789313	WITHOUT_CLASSIFICATION	2.0496002106878006E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999686519039922	WITHOUT_CLASSIFICATION	3.1348096007798715E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999998677339397	WITHOUT_CLASSIFICATION	1.3226606027107768E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999887847990498	WITHOUT_CLASSIFICATION	1.1215200950149128E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999344190088542	WITHOUT_CLASSIFICATION	6.558099114581294E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999161149003714	WITHOUT_CLASSIFICATION	8.388509962864533E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9995548869003488	WITHOUT_CLASSIFICATION	4.451130996512429E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999472360837207	WITHOUT_CLASSIFICATION	5.276391627923716E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999088633754524	WITHOUT_CLASSIFICATION	9.113662454757847E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999601218022951	WITHOUT_CLASSIFICATION	3.987819770502715E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999930029595961	WITHOUT_CLASSIFICATION	6.997040403750226E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999601218022951	WITHOUT_CLASSIFICATION	3.987819770502715E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999125489123893	WITHOUT_CLASSIFICATION	8.745108761057538E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999975986858204	WITHOUT_CLASSIFICATION	2.4013141795940856E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999958673752513	WITHOUT_CLASSIFICATION	4.132624748806848E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9996924598553929	WITHOUT_CLASSIFICATION	3.0754014460710073E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9987477211841121	WITHOUT_CLASSIFICATION	0.0012522788158877743	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999835115259974	WITHOUT_CLASSIFICATION	1.6488474002590496E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995540147912413	WITHOUT_CLASSIFICATION	4.4598520875869537E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999975986858204	WITHOUT_CLASSIFICATION	2.4013141795940856E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999662457666686	WITHOUT_CLASSIFICATION	3.375423333134221E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999552398424432	WITHOUT_CLASSIFICATION	4.476015755689275E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999307989878725	WITHOUT_CLASSIFICATION	6.920101212757958E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999122311897496	WITHOUT_CLASSIFICATION	8.776881025038616E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999967112965762	WITHOUT_CLASSIFICATION	3.2887034239035493E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999806674193782	WITHOUT_CLASSIFICATION	1.933258062176655E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999809788130644	WITHOUT_CLASSIFICATION	1.9021186935690956E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999658126431933	WITHOUT_CLASSIFICATION	3.4187356806777886E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716123264735	WITHOUT_CLASSIFICATION	2.8387673526538674E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706025698913	WITHOUT_CLASSIFICATION	2.93974301085727E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706025698913	WITHOUT_CLASSIFICATION	2.93974301085727E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706025698913	WITHOUT_CLASSIFICATION	2.93974301085727E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999973513153593	WITHOUT_CLASSIFICATION	2.6486846407580423E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999973513153593	WITHOUT_CLASSIFICATION	2.6486846407580423E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9975368143009029	WITHOUT_CLASSIFICATION	0.0024631856990969653	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999960857729524	WITHOUT_CLASSIFICATION	3.9142270476104745E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999928405193834	WITHOUT_CLASSIFICATION	7.159480616540852E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999993697090352	WITHOUT_CLASSIFICATION	6.302909647940387E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998859843249922	WITHOUT_CLASSIFICATION	1.1401567500771659E-4	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669549992578	WITHOUT_CLASSIFICATION	3.304500074216297E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999675896722333	WITHOUT_CLASSIFICATION	3.241032776674134E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999998594155677	WITHOUT_CLASSIFICATION	1.405844322884622E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971702721821	WITHOUT_CLASSIFICATION	2.8297278178939993E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669549992578	WITHOUT_CLASSIFICATION	3.304500074216297E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999675896722333	WITHOUT_CLASSIFICATION	3.241032776674134E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999958521366164	WITHOUT_CLASSIFICATION	4.1478633835928714E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995307348965465	WITHOUT_CLASSIFICATION	4.692651034533997E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999980013191991	WITHOUT_CLASSIFICATION	1.9986808009363274E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999491942638296	WITHOUT_CLASSIFICATION	5.080573617030876E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997679082599311	WITHOUT_CLASSIFICATION	2.3209174006885323E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9996664601182367	WITHOUT_CLASSIFICATION	3.3353988176326797E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999736214669844	WITHOUT_CLASSIFICATION	2.6378533015518625E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999805132859587	WITHOUT_CLASSIFICATION	1.9486714041393825E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998424061043165	WITHOUT_CLASSIFICATION	1.5759389568355527E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9993940650764693	WITHOUT_CLASSIFICATION	6.05934923530568E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999820717858073	WITHOUT_CLASSIFICATION	1.7928214192661232E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999750050930324	WITHOUT_CLASSIFICATION	2.4994906967537004E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998273691378898	WITHOUT_CLASSIFICATION	1.726308621101664E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9985645763325478	WITHOUT_CLASSIFICATION	0.0014354236674521512	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999675385544842	WITHOUT_CLASSIFICATION	3.246144551584468E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999955013048717	WITHOUT_CLASSIFICATION	4.498695128295329E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999671248004168	WITHOUT_CLASSIFICATION	3.287519958322782E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998909679814486	WITHOUT_CLASSIFICATION	1.0903201855133756E-4	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9993747468717115	WITHOUT_CLASSIFICATION	6.252531282884546E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999975242901846	WITHOUT_CLASSIFICATION	2.4757098153772494E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999931614856888	WITHOUT_CLASSIFICATION	6.8385143111351185E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9994853601777732	WITHOUT_CLASSIFICATION	5.146398222267128E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999931073263609	WITHOUT_CLASSIFICATION	6.892673639138193E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670609982579	WITHOUT_CLASSIFICATION	3.2939001742186586E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639663196436	WITHOUT_CLASSIFICATION	3.603368035652212E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9990745568437954	WITHOUT_CLASSIFICATION	9.254431562046139E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9990745568437954	WITHOUT_CLASSIFICATION	9.254431562046139E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999716294537632	WITHOUT_CLASSIFICATION	2.837054623692434E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999970484206193	WITHOUT_CLASSIFICATION	2.951579380740409E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999485756132073	WITHOUT_CLASSIFICATION	5.142438679278961E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999952782061283	WITHOUT_CLASSIFICATION	4.721793871675283E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997912286364361	WITHOUT_CLASSIFICATION	2.0877136356402295E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9987961539132313	WITHOUT_CLASSIFICATION	0.0012038460867686426	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.999998272194316	WITHOUT_CLASSIFICATION	1.7278056840318608E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999998210201019	WITHOUT_CLASSIFICATION	1.7897989810086982E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999719378404004	WITHOUT_CLASSIFICATION	2.806215959963501E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992578167090911	WITHOUT_CLASSIFICATION	7.421832909089664E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9974937353160795	WITHOUT_CLASSIFICATION	0.0025062646839204045	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999920566730088	WITHOUT_CLASSIFICATION	7.943326991195573E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999595713555554	WITHOUT_CLASSIFICATION	4.0428644444680664E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999427751144495	WITHOUT_CLASSIFICATION	5.722488555058953E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.99988496083194	WITHOUT_CLASSIFICATION	1.1503916806001495E-4	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999990449158282	WITHOUT_CLASSIFICATION	9.550841718159682E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9974937353160795	WITHOUT_CLASSIFICATION	0.0025062646839204045	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9974937353160795	WITHOUT_CLASSIFICATION	0.0025062646839204045	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9986451187758749	WITHOUT_CLASSIFICATION	0.0013548812241250337	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999836164363325	WITHOUT_CLASSIFICATION	1.638356366755044E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9908398345268535	WITHOUT_CLASSIFICATION	0.009160165473146476	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999922810161741	WITHOUT_CLASSIFICATION	7.718983825869755E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999200603562005	WITHOUT_CLASSIFICATION	7.993964379948895E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999955013048717	WITHOUT_CLASSIFICATION	4.498695128295329E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997507604105877	WITHOUT_CLASSIFICATION	2.492395894122566E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999880402154518	WITHOUT_CLASSIFICATION	1.1959784548065863E-5	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999751934305836	WITHOUT_CLASSIFICATION	2.480656941639126E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693045487482	WITHOUT_CLASSIFICATION	3.069545125172259E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999971271687287	WITHOUT_CLASSIFICATION	2.8728312713312554E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669155283889	WITHOUT_CLASSIFICATION	3.3084471611084194E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999973493495226	WITHOUT_CLASSIFICATION	2.650650477397025E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999973493495226	WITHOUT_CLASSIFICATION	2.650650477397025E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999973493495226	WITHOUT_CLASSIFICATION	2.650650477397025E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999973493495226	WITHOUT_CLASSIFICATION	2.650650477397025E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711133675961	WITHOUT_CLASSIFICATION	2.8886632403815686E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9992192347730747	WITHOUT_CLASSIFICATION	7.807652269253918E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999653762830089	WITHOUT_CLASSIFICATION	3.462371699116545E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999773626143412	WITHOUT_CLASSIFICATION	2.263738565872727E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966902879595	WITHOUT_CLASSIFICATION	3.3097120405016576E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738742818725	WITHOUT_CLASSIFICATION	2.6125718127486182E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999827858063709	WITHOUT_CLASSIFICATION	1.7214193629194836E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999904145424342	WITHOUT_CLASSIFICATION	9.585457565864913E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999518769297601	WITHOUT_CLASSIFICATION	4.812307023993364E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999691630580672	WITHOUT_CLASSIFICATION	3.083694193285774E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999518224866857	WITHOUT_CLASSIFICATION	4.817751331435247E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999762777595442	WITHOUT_CLASSIFICATION	2.3722240455694744E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.999819197959975	WITHOUT_CLASSIFICATION	1.808020400249938E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999917497941072	WITHOUT_CLASSIFICATION	8.250205892810289E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999917497941072	WITHOUT_CLASSIFICATION	8.250205892810289E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999831623608313	WITHOUT_CLASSIFICATION	1.683763916869341E-5	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999841264036999	WITHOUT_CLASSIFICATION	1.587359630011474E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999988560864735	WITHOUT_CLASSIFICATION	1.1439135264981825E-6	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669013578415	WITHOUT_CLASSIFICATION	3.3098642158451326E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999904997327966	WITHOUT_CLASSIFICATION	9.500267203426424E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706025698913	WITHOUT_CLASSIFICATION	2.93974301085727E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999977362564177	WITHOUT_CLASSIFICATION	2.263743582297901E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999753172947722	WITHOUT_CLASSIFICATION	2.468270522790506E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999961178519143	WITHOUT_CLASSIFICATION	3.882148085676626E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999458692113735	WITHOUT_CLASSIFICATION	5.413078862647915E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668383171623	WITHOUT_CLASSIFICATION	3.3161682837788425E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999325732713037	WITHOUT_CLASSIFICATION	6.742672869629813E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999847533137481	WITHOUT_CLASSIFICATION	1.5246686251943527E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999938860570813	WITHOUT_CLASSIFICATION	6.113942918783308E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999817194275743	WITHOUT_CLASSIFICATION	1.828057242571165E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999973464209022	WITHOUT_CLASSIFICATION	2.65357909780072E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999733376035059	WITHOUT_CLASSIFICATION	2.6662396494086156E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999993977211353	WITHOUT_CLASSIFICATION	6.0227886470222865E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999985271392666	WITHOUT_CLASSIFICATION	1.4728607334726767E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999973740109157	WITHOUT_CLASSIFICATION	2.625989084295216E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993682586281	WITHOUT_CLASSIFICATION	6.317413718184049E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998682752916426	WITHOUT_CLASSIFICATION	1.317247083574888E-4	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999945518088555	WITHOUT_CLASSIFICATION	5.44819114442043E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999607996847618	WITHOUT_CLASSIFICATION	3.920031523821822E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999562084346778	WITHOUT_CLASSIFICATION	4.37915653222289E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9996969981635879	WITHOUT_CLASSIFICATION	3.030018364121007E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999974550930055	WITHOUT_CLASSIFICATION	2.5449069945041034E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999012548344456	WITHOUT_CLASSIFICATION	9.874516555440266E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999990843484503	WITHOUT_CLASSIFICATION	9.156515496401669E-7	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998534941969783	WITHOUT_CLASSIFICATION	1.4650580302171836E-4	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9992657490372044	WITHOUT_CLASSIFICATION	7.342509627955693E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999941992137388	WITHOUT_CLASSIFICATION	5.800786261122896E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.995056170431532	WITHOUT_CLASSIFICATION	0.004943829568468006	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999994467503404	WITHOUT_CLASSIFICATION	5.532496595906389E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999829149962073	WITHOUT_CLASSIFICATION	1.708500379274583E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999770433000125	WITHOUT_CLASSIFICATION	2.2956699987528185E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997944801836027	WITHOUT_CLASSIFICATION	2.0551981639728293E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999707080219493	WITHOUT_CLASSIFICATION	2.929197805065326E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999837221644904	WITHOUT_CLASSIFICATION	1.6277835509677042E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999312163461436	WITHOUT_CLASSIFICATION	6.878365385647379E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999914764566139	WITHOUT_CLASSIFICATION	8.523543386025379E-6	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999300408654904	WITHOUT_CLASSIFICATION	6.995913450953094E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9994871708595542	WITHOUT_CLASSIFICATION	5.12829140445846E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999114508498861	WITHOUT_CLASSIFICATION	8.854915011389124E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999012546241447	WITHOUT_CLASSIFICATION	9.874537585529173E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999801345270857	WITHOUT_CLASSIFICATION	1.9865472914287734E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9991851297512807	WITHOUT_CLASSIFICATION	8.148702487192827E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998977438904358	WITHOUT_CLASSIFICATION	1.0225610956414795E-4	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9970864991966125	WITHOUT_CLASSIFICATION	0.002913500803387531	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999790708234563	WITHOUT_CLASSIFICATION	2.092917654370026E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9970214555496695	WITHOUT_CLASSIFICATION	0.0029785444503305234	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999521558944514	WITHOUT_CLASSIFICATION	4.784410554862914E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999958963810661	WITHOUT_CLASSIFICATION	4.103618933954704E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9995258913182199	WITHOUT_CLASSIFICATION	4.741086817801162E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998800707766001	WITHOUT_CLASSIFICATION	1.1992922339984286E-4	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999980279243142	WITHOUT_CLASSIFICATION	1.9720756857875307E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9988182680006786	WITHOUT_CLASSIFICATION	0.0011817319993212992	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999904934676741	WITHOUT_CLASSIFICATION	9.506532325789479E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999925959717717	WITHOUT_CLASSIFICATION	7.404028228295239E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998841718684727	WITHOUT_CLASSIFICATION	1.1582813152733048E-4	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998717368548335	WITHOUT_CLASSIFICATION	1.2826314516636256E-4	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999841660543443	WITHOUT_CLASSIFICATION	1.5833945655821108E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999662579374071	WITHOUT_CLASSIFICATION	3.374206259285066E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993809466905	WITHOUT_CLASSIFICATION	6.190533095271037E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9998205994137163	WITHOUT_CLASSIFICATION	1.7940058628382528E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995856712672652	WITHOUT_CLASSIFICATION	4.143287327348854E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999905021957219	WITHOUT_CLASSIFICATION	9.49780427804798E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9996667904589905	WITHOUT_CLASSIFICATION	3.332095410094156E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999985167516434	WITHOUT_CLASSIFICATION	1.4832483565896877E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999727401719959	WITHOUT_CLASSIFICATION	2.7259828004095377E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999977688248044	WITHOUT_CLASSIFICATION	2.2311751956860855E-6	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999971145235762	WITHOUT_CLASSIFICATION	2.8854764238685686E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998341884460807	WITHOUT_CLASSIFICATION	1.658115539192859E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999600755830789	WITHOUT_CLASSIFICATION	3.992441692103195E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999920044704158	WITHOUT_CLASSIFICATION	7.99552958423589E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999722523294292	WITHOUT_CLASSIFICATION	2.7747670570797705E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9998203671372391	WITHOUT_CLASSIFICATION	1.7963286276090137E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999992231264221	WITHOUT_CLASSIFICATION	7.768735780184058E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998683865265251	WITHOUT_CLASSIFICATION	1.31613473474886E-4	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998658781184699	WITHOUT_CLASSIFICATION	1.3412188153001425E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999586304459144	WITHOUT_CLASSIFICATION	4.136955408559548E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999008418285067	WITHOUT_CLASSIFICATION	9.91581714933035E-5	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999934950291459	WITHOUT_CLASSIFICATION	6.5049708540199145E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999765737873341	WITHOUT_CLASSIFICATION	2.3426212665924065E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999866691783295	WITHOUT_CLASSIFICATION	1.3330821670504275E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999883030196117	WITHOUT_CLASSIFICATION	1.1696980388307415E-4	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998323388321381	WITHOUT_CLASSIFICATION	1.67661167861871E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998785491935743	WITHOUT_CLASSIFICATION	1.2145080642562582E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999512747334398	WITHOUT_CLASSIFICATION	4.872526656020812E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997072244818168	WITHOUT_CLASSIFICATION	2.927755181832722E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998146301897058	WITHOUT_CLASSIFICATION	1.853698102941452E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998670399347174	WITHOUT_CLASSIFICATION	1.329600652826128E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999253127564854	WITHOUT_CLASSIFICATION	7.468724351454934E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999793020997194	WITHOUT_CLASSIFICATION	2.0697900280679502E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999717897372342	WITHOUT_CLASSIFICATION	2.82102627657278E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999743159773032	WITHOUT_CLASSIFICATION	2.5684022696808984E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998434693660467	WITHOUT_CLASSIFICATION	1.565306339532164E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.999991661120899	WITHOUT_CLASSIFICATION	8.338879100971872E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999401611150366	WITHOUT_CLASSIFICATION	5.98388849632762E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999401611150366	WITHOUT_CLASSIFICATION	5.98388849632762E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9996887406294475	WITHOUT_CLASSIFICATION	3.112593705525082E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997519155880665	WITHOUT_CLASSIFICATION	2.4808441193352416E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999670279217303	WITHOUT_CLASSIFICATION	3.2972078269680764E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998267190587332	WITHOUT_CLASSIFICATION	1.7328094126675857E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999917833764133	WITHOUT_CLASSIFICATION	8.216623586772897E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9979677452168308	WITHOUT_CLASSIFICATION	0.0020322547831691986	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9991239522804926	WITHOUT_CLASSIFICATION	8.760477195073872E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999902111189645	WITHOUT_CLASSIFICATION	9.78888103544815E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9992841216013473	WITHOUT_CLASSIFICATION	7.158783986527943E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999991263855709	WITHOUT_CLASSIFICATION	8.736144291020657E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999704214045627	WITHOUT_CLASSIFICATION	2.957859543732827E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999899322403291	WITHOUT_CLASSIFICATION	1.0067759670903305E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999957528575888	WITHOUT_CLASSIFICATION	4.247142411183899E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999954994122913	WITHOUT_CLASSIFICATION	4.500587708719028E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999359838634615	WITHOUT_CLASSIFICATION	6.401613653855023E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999813577617032	WITHOUT_CLASSIFICATION	1.864223829690131E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999813577617032	WITHOUT_CLASSIFICATION	1.864223829690131E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999927801805677	WITHOUT_CLASSIFICATION	7.219819432326123E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999187038998621	WITHOUT_CLASSIFICATION	8.129610013791872E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999913923484293	WITHOUT_CLASSIFICATION	8.607651570653964E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999757738812116	WITHOUT_CLASSIFICATION	2.422611878843361E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999923608712943	WITHOUT_CLASSIFICATION	7.639128705683189E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999870384278765	WITHOUT_CLASSIFICATION	1.2961572123444957E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999870384278765	WITHOUT_CLASSIFICATION	1.2961572123444957E-5	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999600886941675	WITHOUT_CLASSIFICATION	3.991130583247948E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999798391838373	WITHOUT_CLASSIFICATION	2.0160816162722865E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999372017138335	WITHOUT_CLASSIFICATION	6.279828616654077E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999308726637	WITHOUT_CLASSIFICATION	6.912733623983096E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999561497827639	WITHOUT_CLASSIFICATION	4.385021723609805E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999958783112124	WITHOUT_CLASSIFICATION	4.121688787596488E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999949321138387	WITHOUT_CLASSIFICATION	5.0678861612491474E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979671571926	WITHOUT_CLASSIFICATION	2.0328428073814623E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998489688228526	WITHOUT_CLASSIFICATION	1.5103117714740572E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999961043797289	WITHOUT_CLASSIFICATION	3.895620271186221E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999559551660869	WITHOUT_CLASSIFICATION	4.404483391316529E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9961012896750241	WITHOUT_CLASSIFICATION	0.003898710324975922	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999854487952609	WITHOUT_CLASSIFICATION	1.455120473917455E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999634002097522	WITHOUT_CLASSIFICATION	3.6599790247800537E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998655459472348	WITHOUT_CLASSIFICATION	1.3445405276526348E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999579507370814	WITHOUT_CLASSIFICATION	4.2049262918606615E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998831404144414	WITHOUT_CLASSIFICATION	1.1685958555862931E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999623644794229	WITHOUT_CLASSIFICATION	3.763552057714228E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999577519989495	WITHOUT_CLASSIFICATION	4.2248001050392466E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999817034651262	WITHOUT_CLASSIFICATION	1.8296534873780536E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998784116562855	WITHOUT_CLASSIFICATION	1.2158834371450292E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999869163028058	WITHOUT_CLASSIFICATION	1.3083697194269939E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999670011862027	WITHOUT_CLASSIFICATION	3.2998813797288886E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999515595498836	WITHOUT_CLASSIFICATION	4.84404501162808E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999184591116782	WITHOUT_CLASSIFICATION	8.154088832178237E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999851468554475	WITHOUT_CLASSIFICATION	1.4853144552539563E-5	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999994425888436	WITHOUT_CLASSIFICATION	5.574111564056109E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989250310449	WITHOUT_CLASSIFICATION	1.0749689550465498E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997759830870213	WITHOUT_CLASSIFICATION	2.2401691297859412E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.999908881545346	WITHOUT_CLASSIFICATION	9.111845465412991E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999581810954166	WITHOUT_CLASSIFICATION	4.181890458352766E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9992861674259393	WITHOUT_CLASSIFICATION	7.138325740607018E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997310689533625	WITHOUT_CLASSIFICATION	2.689310466374543E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997744276216287	WITHOUT_CLASSIFICATION	2.2557237837127341E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999506612057356	WITHOUT_CLASSIFICATION	4.933879426431393E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999968124305995	WITHOUT_CLASSIFICATION	3.187569400640916E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999927463769926	WITHOUT_CLASSIFICATION	7.253623007373253E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993133253515754	WITHOUT_CLASSIFICATION	6.866746484246164E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999970775605838	WITHOUT_CLASSIFICATION	2.922439416136689E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999943363791789	WITHOUT_CLASSIFICATION	5.663620821077962E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9996720900839692	WITHOUT_CLASSIFICATION	3.2790991603078766E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999167107697353	WITHOUT_CLASSIFICATION	8.328923026463079E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999981908722224	WITHOUT_CLASSIFICATION	1.8091277776593197E-6	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9996291119487188	WITHOUT_CLASSIFICATION	3.708880512811553E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999927463769926	WITHOUT_CLASSIFICATION	7.253623007373253E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993133253515754	WITHOUT_CLASSIFICATION	6.866746484246164E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9989062207652143	WITHOUT_CLASSIFICATION	0.0010937792347857688	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998275535774402	WITHOUT_CLASSIFICATION	1.7244642255975898E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999935486323704	WITHOUT_CLASSIFICATION	6.451367629557847E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999721836323845	WITHOUT_CLASSIFICATION	2.7816367615572443E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999311445780761	WITHOUT_CLASSIFICATION	6.885542192397481E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998530274300145	WITHOUT_CLASSIFICATION	1.469725699855013E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997559904455272	WITHOUT_CLASSIFICATION	2.4400955447284557E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999041308727521	WITHOUT_CLASSIFICATION	9.586912724787254E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999917741893152	WITHOUT_CLASSIFICATION	8.22581068472507E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999299005128359	WITHOUT_CLASSIFICATION	7.00994871640142E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999938183325562	WITHOUT_CLASSIFICATION	6.181667443855403E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999299005128359	WITHOUT_CLASSIFICATION	7.00994871640142E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998092826135067	WITHOUT_CLASSIFICATION	1.907173864934022E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995860981921115	WITHOUT_CLASSIFICATION	4.13901807888446E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998092826135067	WITHOUT_CLASSIFICATION	1.907173864934022E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999993043814	WITHOUT_CLASSIFICATION	1.0000069561852428E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999590508872547	WITHOUT_CLASSIFICATION	4.0949112745249494E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9987877893394009	WITHOUT_CLASSIFICATION	0.0012122106605990707	TEST
//}	WITHOUT_CLASSIFICATION	0.9987877893394009	WITHOUT_CLASSIFICATION	0.0012122106605990707	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9996050614219684	WITHOUT_CLASSIFICATION	3.9493857803171885E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996077866014671	WITHOUT_CLASSIFICATION	3.922133985328756E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9996050614219684	WITHOUT_CLASSIFICATION	3.9493857803171885E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996709619697127	WITHOUT_CLASSIFICATION	3.29038030287286E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999315903365841	WITHOUT_CLASSIFICATION	6.840966341596154E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999120969166806	WITHOUT_CLASSIFICATION	8.790308331931418E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9990916863425836	WITHOUT_CLASSIFICATION	9.083136574163229E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999007670271558	WITHOUT_CLASSIFICATION	9.923297284415158E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999090420809972	WITHOUT_CLASSIFICATION	9.095791900284698E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999500665902874	WITHOUT_CLASSIFICATION	4.993340971254034E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999928860434719	WITHOUT_CLASSIFICATION	7.1139565281089495E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996827756720827	WITHOUT_CLASSIFICATION	3.1722432791720875E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999986304722026	WITHOUT_CLASSIFICATION	1.3695277974085687E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999817195920571	WITHOUT_CLASSIFICATION	1.828040794303246E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999882106616522	WITHOUT_CLASSIFICATION	1.1789338347736904E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999968890328668	WITHOUT_CLASSIFICATION	3.110967133277268E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999736869823337	WITHOUT_CLASSIFICATION	2.631301766627933E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999945362903284	WITHOUT_CLASSIFICATION	5.463709671580256E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998193373972066	WITHOUT_CLASSIFICATION	1.806626027934715E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999107257402945	WITHOUT_CLASSIFICATION	8.927425970541794E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999744129928889	WITHOUT_CLASSIFICATION	2.5587007111091288E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9986217745853743	WITHOUT_CLASSIFICATION	0.0013782254146256926	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999463176509313	WITHOUT_CLASSIFICATION	5.368234906878127E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999339388708133	WITHOUT_CLASSIFICATION	6.606112918666334E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999465319235872	WITHOUT_CLASSIFICATION	5.346807641279654E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999983041157535	WITHOUT_CLASSIFICATION	1.6958842465054884E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999120969166806	WITHOUT_CLASSIFICATION	8.790308331931418E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999862989115712	WITHOUT_CLASSIFICATION	1.3701088428797638E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998032060582841	WITHOUT_CLASSIFICATION	1.967939417158667E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9973455455889396	WITHOUT_CLASSIFICATION	0.002654454411060351	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999105913930469	WITHOUT_CLASSIFICATION	8.940860695303096E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999946261139181	WITHOUT_CLASSIFICATION	5.37388608193153E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998159352688263	WITHOUT_CLASSIFICATION	1.840647311736866E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996709619697127	WITHOUT_CLASSIFICATION	3.29038030287286E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996709619697127	WITHOUT_CLASSIFICATION	3.29038030287286E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999033845946353	WITHOUT_CLASSIFICATION	9.661540536462027E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998040371403238	WITHOUT_CLASSIFICATION	1.9596285967615764E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999187151535736	WITHOUT_CLASSIFICATION	8.128484642651676E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999050828761257	WITHOUT_CLASSIFICATION	9.491712387437038E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9981139255439566	WITHOUT_CLASSIFICATION	0.0018860744560434456	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999919513348565	WITHOUT_CLASSIFICATION	8.048665143521365E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999956947401665	WITHOUT_CLASSIFICATION	4.305259833520987E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999988749056738	WITHOUT_CLASSIFICATION	1.1250943262047915E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997919120944456	WITHOUT_CLASSIFICATION	2.080879055543409E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999992653575228	WITHOUT_CLASSIFICATION	7.346424772039932E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996827756720827	WITHOUT_CLASSIFICATION	3.1722432791720875E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.99990926356586	WITHOUT_CLASSIFICATION	9.073643414008535E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999992653575228	WITHOUT_CLASSIFICATION	7.346424772039932E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999968699430563	WITHOUT_CLASSIFICATION	3.1300569438387965E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999994660961009	WITHOUT_CLASSIFICATION	5.33903899034732E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998771397531695	WITHOUT_CLASSIFICATION	1.228602468305052E-4	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9997497089378375	WITHOUT_CLASSIFICATION	2.5029106216250613E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999955651723556	WITHOUT_CLASSIFICATION	4.434827644394088E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999991892397676	WITHOUT_CLASSIFICATION	8.107602325019433E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977194065428	WITHOUT_CLASSIFICATION	2.2805934572792067E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999659939254267	WITHOUT_CLASSIFICATION	3.4006074573273344E-5	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999834231680266	WITHOUT_CLASSIFICATION	1.6576831973404563E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999379285112924	WITHOUT_CLASSIFICATION	6.207148870762154E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998890220979029	WITHOUT_CLASSIFICATION	1.1097790209724192E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999992653575228	WITHOUT_CLASSIFICATION	7.346424772039932E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999955651723556	WITHOUT_CLASSIFICATION	4.434827644394088E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977194065428	WITHOUT_CLASSIFICATION	2.2805934572792067E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998447655391025	WITHOUT_CLASSIFICATION	1.5523446089747158E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999989053834291	WITHOUT_CLASSIFICATION	1.0946165710089501E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999756196672069	WITHOUT_CLASSIFICATION	2.438033279302135E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996626148307756	WITHOUT_CLASSIFICATION	3.3738516922448E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999949348376245	WITHOUT_CLASSIFICATION	5.065162375531081E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999927472965197	WITHOUT_CLASSIFICATION	7.2527034803661714E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999968699430563	WITHOUT_CLASSIFICATION	3.1300569438387965E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996608521241999	WITHOUT_CLASSIFICATION	3.3914787580016615E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999101176673355	WITHOUT_CLASSIFICATION	8.988233266455717E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999669621487648	WITHOUT_CLASSIFICATION	3.3037851235200125E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9997567025616979	WITHOUT_CLASSIFICATION	2.432974383021763E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997522796255509	WITHOUT_CLASSIFICATION	2.4772037444914925E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999586620794211	WITHOUT_CLASSIFICATION	4.133792057890612E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999993043814	WITHOUT_CLASSIFICATION	1.0000069561852428E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880889095599	WITHOUT_CLASSIFICATION	1.1911090440099332E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999141624131651	WITHOUT_CLASSIFICATION	8.583758683489484E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997648000714462	WITHOUT_CLASSIFICATION	2.3519992855390392E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999469778836476	WITHOUT_CLASSIFICATION	5.3022116352414474E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999271532937155	WITHOUT_CLASSIFICATION	7.284670628458679E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999930732808328	WITHOUT_CLASSIFICATION	6.926719167215342E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999928112432842	WITHOUT_CLASSIFICATION	7.188756715715223E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999599431387943	WITHOUT_CLASSIFICATION	4.005686120557578E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999927472965197	WITHOUT_CLASSIFICATION	7.2527034803661714E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999736371069186	WITHOUT_CLASSIFICATION	2.6362893081378394E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9997499442158878	WITHOUT_CLASSIFICATION	2.500557841121646E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999969586094671	WITHOUT_CLASSIFICATION	3.0413905329584866E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999314409619315	WITHOUT_CLASSIFICATION	6.855903806847339E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996943160448497	WITHOUT_CLASSIFICATION	3.056839551502901E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998700412623813	WITHOUT_CLASSIFICATION	1.299587376186767E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999926529422221	WITHOUT_CLASSIFICATION	7.347057777896082E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999261514419361	WITHOUT_CLASSIFICATION	7.38485580639136E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998509726676864	WITHOUT_CLASSIFICATION	1.4902733231345232E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999118882913833	WITHOUT_CLASSIFICATION	8.811170861675338E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999185310159103	WITHOUT_CLASSIFICATION	8.146898408977118E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999977862028219	WITHOUT_CLASSIFICATION	2.2137971781699534E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999984765839226	WITHOUT_CLASSIFICATION	1.5234160773984886E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999807269320399	WITHOUT_CLASSIFICATION	1.9273067960160916E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.99999483297367	WITHOUT_CLASSIFICATION	5.167026330028341E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999633560726392	WITHOUT_CLASSIFICATION	3.664392736088429E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996293642448539	WITHOUT_CLASSIFICATION	3.7063575514606424E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999636514570206	WITHOUT_CLASSIFICATION	3.63485429793407E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999967844065605	WITHOUT_CLASSIFICATION	3.215593439503927E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999927318036383	WITHOUT_CLASSIFICATION	7.268196361563062E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999559919751808	WITHOUT_CLASSIFICATION	4.4008024819159256E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9956760858166825	WITHOUT_CLASSIFICATION	0.004323914183317369	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9986930749196667	WITHOUT_CLASSIFICATION	0.0013069250803332334	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995659423232751	WITHOUT_CLASSIFICATION	4.340576767249471E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999656565303413	WITHOUT_CLASSIFICATION	3.434346965866968E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9993092661914309	WITHOUT_CLASSIFICATION	6.907338085690661E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999818160112398	WITHOUT_CLASSIFICATION	1.8183988760196076E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999858149313534	WITHOUT_CLASSIFICATION	1.4185068646452142E-5	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999820127018227	WITHOUT_CLASSIFICATION	1.798729817719584E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999383563432912	WITHOUT_CLASSIFICATION	6.164365670879792E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999929135944989	WITHOUT_CLASSIFICATION	7.086405501068391E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999502710309177	WITHOUT_CLASSIFICATION	4.972896908222641E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999672011899563	WITHOUT_CLASSIFICATION	3.2798810043668956E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999563232209099	WITHOUT_CLASSIFICATION	4.367677909003596E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999502710309177	WITHOUT_CLASSIFICATION	4.972896908222641E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999929135944989	WITHOUT_CLASSIFICATION	7.086405501068391E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999672011899563	WITHOUT_CLASSIFICATION	3.2798810043668956E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999340090141609	WITHOUT_CLASSIFICATION	6.599098583906634E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999789616628051	WITHOUT_CLASSIFICATION	2.1038337194969416E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9994097199952044	WITHOUT_CLASSIFICATION	5.902800047955158E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999884519074311	WITHOUT_CLASSIFICATION	1.1548092568822928E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999982122534302	WITHOUT_CLASSIFICATION	1.7877465697374058E-6	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9977287132410589	WITHOUT_CLASSIFICATION	0.002271286758941092	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9991404013993257	WITHOUT_CLASSIFICATION	8.595986006743163E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999758446297054	WITHOUT_CLASSIFICATION	2.415537029459703E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999785682453572	WITHOUT_CLASSIFICATION	2.1431754642754355E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998928307726894	WITHOUT_CLASSIFICATION	1.0716922731066228E-4	TEST
// starting index	WITHOUT_CLASSIFICATION	0.999993214295565	WITHOUT_CLASSIFICATION	6.785704435095944E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998488680966428	WITHOUT_CLASSIFICATION	1.5113190335724804E-4	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999733046144685	WITHOUT_CLASSIFICATION	2.669538553139797E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998548576242297	WITHOUT_CLASSIFICATION	1.451423757704159E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999594901647585	WITHOUT_CLASSIFICATION	4.0509835241442315E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999825708189158	WITHOUT_CLASSIFICATION	1.7429181084127835E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999513454020167	WITHOUT_CLASSIFICATION	4.8654597983367195E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999983618499348	WITHOUT_CLASSIFICATION	1.6381500650775781E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999892095308636	WITHOUT_CLASSIFICATION	1.0790469136461568E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999573952461327	WITHOUT_CLASSIFICATION	4.2604753867227264E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999564326812325	WITHOUT_CLASSIFICATION	4.356731876748721E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999966633898928	WITHOUT_CLASSIFICATION	3.3366101072137025E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998476936632846	WITHOUT_CLASSIFICATION	1.5230633671544264E-4	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999783934061869	WITHOUT_CLASSIFICATION	2.1606593813125664E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999573952461327	WITHOUT_CLASSIFICATION	4.2604753867227264E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999573952461327	WITHOUT_CLASSIFICATION	4.2604753867227264E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999945212076116	WITHOUT_CLASSIFICATION	5.478792388387868E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999945212076116	WITHOUT_CLASSIFICATION	5.478792388387868E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.99997387533839	WITHOUT_CLASSIFICATION	2.6124661609991503E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999513454020167	WITHOUT_CLASSIFICATION	4.8654597983367195E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999889447297699	WITHOUT_CLASSIFICATION	1.1055270230091779E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999891459030875	WITHOUT_CLASSIFICATION	1.085409691252767E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998250149536403	WITHOUT_CLASSIFICATION	1.7498504635965974E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998250149536403	WITHOUT_CLASSIFICATION	1.7498504635965974E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999296687747912	WITHOUT_CLASSIFICATION	7.03312252087869E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.998991110179207	WITHOUT_CLASSIFICATION	0.0010088898207929705	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999825901396878	WITHOUT_CLASSIFICATION	1.7409860312209868E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998301515845921	WITHOUT_CLASSIFICATION	1.6984841540790158E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998511434806271	WITHOUT_CLASSIFICATION	1.4885651937292826E-4	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999977644187	WITHOUT_CLASSIFICATION	2.235581293983874E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999577822216758	WITHOUT_CLASSIFICATION	4.221777832426466E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997381865807036	WITHOUT_CLASSIFICATION	2.618134192963697E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9998648721716435	WITHOUT_CLASSIFICATION	1.351278283565317E-4	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999994429778055	WITHOUT_CLASSIFICATION	5.570221944967434E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998972978209126	WITHOUT_CLASSIFICATION	1.0270217908738524E-4	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996416572619397	WITHOUT_CLASSIFICATION	3.583427380602742E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996685190670134	WITHOUT_CLASSIFICATION	3.314809329866563E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999088282002127	WITHOUT_CLASSIFICATION	9.117179978735582E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999223729618689	WITHOUT_CLASSIFICATION	7.762703813109234E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999777922439963	WITHOUT_CLASSIFICATION	2.2207756003748972E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708349754094	WITHOUT_CLASSIFICATION	2.916502459058204E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999928863136357	WITHOUT_CLASSIFICATION	7.113686364312268E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999875599006632	WITHOUT_CLASSIFICATION	1.2440099336749031E-5	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999941585048278	WITHOUT_CLASSIFICATION	5.841495172216343E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999882509237767	WITHOUT_CLASSIFICATION	1.1749076223377794E-5	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998712549993144	WITHOUT_CLASSIFICATION	1.2874500068560504E-4	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999947217762849	WITHOUT_CLASSIFICATION	5.278223715188738E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999988499156542	WITHOUT_CLASSIFICATION	1.1500843458115973E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999584007873736	WITHOUT_CLASSIFICATION	4.159921262639738E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999873981852949	WITHOUT_CLASSIFICATION	1.2601814705150741E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998509726676864	WITHOUT_CLASSIFICATION	1.4902733231345232E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998878589567427	WITHOUT_CLASSIFICATION	1.1214104325739922E-4	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999998473927596	WITHOUT_CLASSIFICATION	1.5260724039503276E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670592484474	WITHOUT_CLASSIFICATION	3.294075155261157E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966084376845	WITHOUT_CLASSIFICATION	3.391562315498052E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999131756129261	WITHOUT_CLASSIFICATION	8.682438707387928E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999131756129261	WITHOUT_CLASSIFICATION	8.682438707387928E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999718821469622	WITHOUT_CLASSIFICATION	2.8117853037866603E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999929304273806	WITHOUT_CLASSIFICATION	7.069572619511206E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.999992710427084	WITHOUT_CLASSIFICATION	7.289572915957419E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.999992710427084	WITHOUT_CLASSIFICATION	7.289572915957419E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999346279265473	WITHOUT_CLASSIFICATION	6.53720734527227E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999068773819316	WITHOUT_CLASSIFICATION	9.312261806830667E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999633546612786	WITHOUT_CLASSIFICATION	3.6645338721335186E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999200603562005	WITHOUT_CLASSIFICATION	7.993964379948895E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999158592273296	WITHOUT_CLASSIFICATION	8.41407726704184E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.998677090110963	WITHOUT_CLASSIFICATION	0.0013229098890370345	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999977497258591	WITHOUT_CLASSIFICATION	2.2502741408968367E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999763545990523	WITHOUT_CLASSIFICATION	2.3645400947742704E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999763545990523	WITHOUT_CLASSIFICATION	2.3645400947742704E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999868783497432	WITHOUT_CLASSIFICATION	1.3121650256741704E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999555052900907	WITHOUT_CLASSIFICATION	4.4494709909359045E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999555052900907	WITHOUT_CLASSIFICATION	4.4494709909359045E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999803006369555	WITHOUT_CLASSIFICATION	1.96993630444233E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999763122409845	WITHOUT_CLASSIFICATION	2.368775901552734E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999954845170652	WITHOUT_CLASSIFICATION	4.5154829347484175E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999983578930238	WITHOUT_CLASSIFICATION	1.642106976194837E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997290730713859	WITHOUT_CLASSIFICATION	2.709269286140526E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999657556505842	WITHOUT_CLASSIFICATION	3.4244349415775176E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.99946965418774	WITHOUT_CLASSIFICATION	5.303458122599286E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999281636943081	WITHOUT_CLASSIFICATION	7.183630569189093E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999540489993813	WITHOUT_CLASSIFICATION	4.595100061869757E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955838362409	WITHOUT_CLASSIFICATION	4.416163759170006E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999871722832802	WITHOUT_CLASSIFICATION	1.2827716719870518E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999092721366309	WITHOUT_CLASSIFICATION	9.07278633690426E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999092721366309	WITHOUT_CLASSIFICATION	9.07278633690426E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999092721366309	WITHOUT_CLASSIFICATION	9.07278633690426E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999092721366309	WITHOUT_CLASSIFICATION	9.07278633690426E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999715766043352	WITHOUT_CLASSIFICATION	2.8423395664841096E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999160297767413	WITHOUT_CLASSIFICATION	8.397022325870431E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999119422148327	WITHOUT_CLASSIFICATION	8.805778516723456E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9995907087925201	WITHOUT_CLASSIFICATION	4.092912074799057E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.99893019194884	WITHOUT_CLASSIFICATION	0.0010698080511598875	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.998581635286274	WITHOUT_CLASSIFICATION	0.0014183647137260447	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9996155927222832	WITHOUT_CLASSIFICATION	3.8440727771685133E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999994551662715	WITHOUT_CLASSIFICATION	5.448337284790115E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999798838083905	WITHOUT_CLASSIFICATION	2.0116191609447884E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999756857650537	WITHOUT_CLASSIFICATION	2.431423494632579E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996307105030673	WITHOUT_CLASSIFICATION	3.692894969328211E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9572824207572223	WITHOUT_CLASSIFICATION	0.04271757924277781	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9995874553019147	WITHOUT_CLASSIFICATION	4.125446980852728E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999482514294714	WITHOUT_CLASSIFICATION	5.174857052855773E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996307105030673	WITHOUT_CLASSIFICATION	3.692894969328211E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.977784302426658	WITHOUT_CLASSIFICATION	0.022215697573341978	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999974507341767	WITHOUT_CLASSIFICATION	2.5492658232541875E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999032747200528	WITHOUT_CLASSIFICATION	9.672527994718161E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996938803389694	WITHOUT_CLASSIFICATION	3.0611966103052946E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997512092515325	WITHOUT_CLASSIFICATION	2.487907484675171E-4	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999260611121359	WITHOUT_CLASSIFICATION	7.393888786416654E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999977650476277	WITHOUT_CLASSIFICATION	2.2349523722932003E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999904153696629	WITHOUT_CLASSIFICATION	9.584630337105314E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893112770211	WITHOUT_CLASSIFICATION	1.0688722978947162E-5	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999930720361132	WITHOUT_CLASSIFICATION	6.92796388680847E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893112770211	WITHOUT_CLASSIFICATION	1.0688722978947162E-5	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999858747111969	WITHOUT_CLASSIFICATION	1.4125288803003001E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998832103809582	WITHOUT_CLASSIFICATION	1.1678961904182573E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993127563794628	WITHOUT_CLASSIFICATION	6.872436205371833E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969543964385	WITHOUT_CLASSIFICATION	3.0456035614470083E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999971145171289	WITHOUT_CLASSIFICATION	2.8854828712186607E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999595539337931	WITHOUT_CLASSIFICATION	4.044606620690434E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999985214009491	WITHOUT_CLASSIFICATION	1.4785990508958687E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997994017109529	WITHOUT_CLASSIFICATION	2.0059828904699E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999985214009491	WITHOUT_CLASSIFICATION	1.4785990508958687E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999850449315975	WITHOUT_CLASSIFICATION	1.4955068402652952E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999495950359713	WITHOUT_CLASSIFICATION	5.040496402881068E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999679976919565	WITHOUT_CLASSIFICATION	3.200230804343806E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9991948629996186	WITHOUT_CLASSIFICATION	8.051370003813978E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999595539337931	WITHOUT_CLASSIFICATION	4.044606620690434E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997994017109529	WITHOUT_CLASSIFICATION	2.0059828904699E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999850449315975	WITHOUT_CLASSIFICATION	1.4955068402652952E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999533867415381	WITHOUT_CLASSIFICATION	4.6613258461800453E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999136047919682	WITHOUT_CLASSIFICATION	8.639520803177353E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999602755976889	WITHOUT_CLASSIFICATION	3.97244023112034E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999619281049031	WITHOUT_CLASSIFICATION	3.8071895096749035E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999986626861449	WITHOUT_CLASSIFICATION	1.3373138550992343E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999914103330068	WITHOUT_CLASSIFICATION	8.589666993224499E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708349754094	WITHOUT_CLASSIFICATION	2.916502459058204E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999495950359713	WITHOUT_CLASSIFICATION	5.040496402881068E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999964298504482	WITHOUT_CLASSIFICATION	3.5701495518833387E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997466792612859	WITHOUT_CLASSIFICATION	2.533207387141953E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.99997504399752	WITHOUT_CLASSIFICATION	2.4956002479990005E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708349754094	WITHOUT_CLASSIFICATION	2.916502459058204E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998631881216599	WITHOUT_CLASSIFICATION	1.368118783401053E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708349754094	WITHOUT_CLASSIFICATION	2.916502459058204E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999729381137201	WITHOUT_CLASSIFICATION	2.7061886279788116E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999880830442642	WITHOUT_CLASSIFICATION	1.191695573567707E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996727399038862	WITHOUT_CLASSIFICATION	3.272600961138683E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999725766297065	WITHOUT_CLASSIFICATION	2.742337029348382E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999978965552991	WITHOUT_CLASSIFICATION	2.1034447008540184E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999927466181696	WITHOUT_CLASSIFICATION	7.253381830432821E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999900955492288	WITHOUT_CLASSIFICATION	9.904450771174753E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998479407899349	WITHOUT_CLASSIFICATION	1.52059210064994E-4	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996231428490419	WITHOUT_CLASSIFICATION	3.7685715095813903E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9991740183670356	WITHOUT_CLASSIFICATION	8.259816329645089E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999982126391173	WITHOUT_CLASSIFICATION	1.7873608828553061E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9991734191357917	WITHOUT_CLASSIFICATION	8.26580864208306E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9958988309910819	WITHOUT_CLASSIFICATION	0.004101169008918097	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.99990887393375	WITHOUT_CLASSIFICATION	9.112606624985511E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999867828167226	WITHOUT_CLASSIFICATION	1.3217183277360747E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996298571141	WITHOUT_CLASSIFICATION	3.7014288583897506E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999959072771621	WITHOUT_CLASSIFICATION	4.092722837895466E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9990831245805271	WITHOUT_CLASSIFICATION	9.168754194728186E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999975838825079	WITHOUT_CLASSIFICATION	2.416117492085706E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999934637796648	WITHOUT_CLASSIFICATION	6.536220335195023E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994261062821568	WITHOUT_CLASSIFICATION	5.738937178431907E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994261062821568	WITHOUT_CLASSIFICATION	5.738937178431907E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999870606130792	WITHOUT_CLASSIFICATION	1.2939386920815789E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999828822426913	WITHOUT_CLASSIFICATION	1.711775730865579E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9987565965832221	WITHOUT_CLASSIFICATION	0.0012434034167778825	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999878309452777	WITHOUT_CLASSIFICATION	1.216905472233747E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999993149113442	WITHOUT_CLASSIFICATION	6.850886557074408E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999929753230018	WITHOUT_CLASSIFICATION	7.024676998223276E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997124895751619	WITHOUT_CLASSIFICATION	2.875104248381987E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9990451548436141	WITHOUT_CLASSIFICATION	9.548451563858371E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9575249171088794	WITHOUT_CLASSIFICATION	0.04247508289112053	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991836391649	WITHOUT_CLASSIFICATION	8.163608350970522E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999494496603063	WITHOUT_CLASSIFICATION	5.055033969370501E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9997196044512362	WITHOUT_CLASSIFICATION	2.803955487637824E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9979212550411862	WITHOUT_CLASSIFICATION	0.002078744958813861	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999901883373824	WITHOUT_CLASSIFICATION	9.811662617628906E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999978091189922	WITHOUT_CLASSIFICATION	2.1908810078219158E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996123013486838	WITHOUT_CLASSIFICATION	3.876986513161722E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999523371876019	WITHOUT_CLASSIFICATION	4.766281239815643E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999523371876019	WITHOUT_CLASSIFICATION	4.766281239815643E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999983228260008	WITHOUT_CLASSIFICATION	1.6771739992485464E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998479407899349	WITHOUT_CLASSIFICATION	1.52059210064994E-4	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995942810967074	WITHOUT_CLASSIFICATION	4.057189032925266E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9995313775944533	WITHOUT_CLASSIFICATION	4.686224055468092E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999933953100776	WITHOUT_CLASSIFICATION	6.604689922436971E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999844445543462	WITHOUT_CLASSIFICATION	1.555544565385188E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998886414581136	WITHOUT_CLASSIFICATION	1.1135854188631405E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9988527137089999	WITHOUT_CLASSIFICATION	0.0011472862910002137	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999661399383416	WITHOUT_CLASSIFICATION	3.3860061658447124E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999056418834286	WITHOUT_CLASSIFICATION	9.43581165713734E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.999996121382111	WITHOUT_CLASSIFICATION	3.8786178889176155E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999985965884529	WITHOUT_CLASSIFICATION	1.403411547030084E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998198241518194	WITHOUT_CLASSIFICATION	1.801758481806855E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999376188819405	WITHOUT_CLASSIFICATION	6.238111805948496E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999989965235153	WITHOUT_CLASSIFICATION	1.0034764847316984E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997603497532394	WITHOUT_CLASSIFICATION	2.3965024676074413E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999947937704112	WITHOUT_CLASSIFICATION	5.206229588789893E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999969738740009	WITHOUT_CLASSIFICATION	3.026125999115196E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999983757305111	WITHOUT_CLASSIFICATION	1.624269488955751E-6	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999982111981618	WITHOUT_CLASSIFICATION	1.788801838138494E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999685989932257	WITHOUT_CLASSIFICATION	3.1401006774378665E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998127258973896	WITHOUT_CLASSIFICATION	1.872741026104159E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999916020978775	WITHOUT_CLASSIFICATION	8.397902122557223E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999907066681022	WITHOUT_CLASSIFICATION	9.29333189789172E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999749724568512	WITHOUT_CLASSIFICATION	2.5027543148802748E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999903040739276	WITHOUT_CLASSIFICATION	9.69592607244166E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9968484881013003	WITHOUT_CLASSIFICATION	0.003151511898699675	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999169583011007	WITHOUT_CLASSIFICATION	8.304169889930863E-5	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999404539802983	WITHOUT_CLASSIFICATION	5.954601970177153E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997359510316555	WITHOUT_CLASSIFICATION	2.640489683445491E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999669696083432	WITHOUT_CLASSIFICATION	3.303039165675252E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999671362458173	WITHOUT_CLASSIFICATION	3.2863754182709414E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999693035525472	WITHOUT_CLASSIFICATION	3.069644745283289E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999847814018951	WITHOUT_CLASSIFICATION	1.5218598104878332E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9960135419938588	WITHOUT_CLASSIFICATION	0.003986458006141224	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9986660130657037	WITHOUT_CLASSIFICATION	0.0013339869342963015	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999887420861456	WITHOUT_CLASSIFICATION	1.1257913854313248E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999068249076442	WITHOUT_CLASSIFICATION	9.31750923557551E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999068249076442	WITHOUT_CLASSIFICATION	9.31750923557551E-5	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999738031993827	WITHOUT_CLASSIFICATION	2.619680061744451E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999851176413872	WITHOUT_CLASSIFICATION	1.4882358612801481E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9984126454624249	WITHOUT_CLASSIFICATION	0.001587354537575086	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9984126454624249	WITHOUT_CLASSIFICATION	0.001587354537575086	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999942366434638	WITHOUT_CLASSIFICATION	5.7633565362700346E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999507136859155	WITHOUT_CLASSIFICATION	4.92863140846691E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999899040430638	WITHOUT_CLASSIFICATION	1.0095956936225416E-5	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999986146082356	WITHOUT_CLASSIFICATION	1.3853917645020598E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999699342708636	WITHOUT_CLASSIFICATION	3.0065729136405293E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999905412693862	WITHOUT_CLASSIFICATION	9.45873061376121E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999905412693862	WITHOUT_CLASSIFICATION	9.45873061376121E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999254134009345	WITHOUT_CLASSIFICATION	7.458659906547607E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996709619697127	WITHOUT_CLASSIFICATION	3.29038030287286E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999927479239797	WITHOUT_CLASSIFICATION	7.252076020240836E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999927479239797	WITHOUT_CLASSIFICATION	7.252076020240836E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999942855884735	WITHOUT_CLASSIFICATION	5.714411526593615E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999966573036967	WITHOUT_CLASSIFICATION	3.3426963032375127E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999977846250349	WITHOUT_CLASSIFICATION	2.2153749651743826E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999720600525839	WITHOUT_CLASSIFICATION	2.793994741608356E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999917685399359	WITHOUT_CLASSIFICATION	8.231460064110356E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999927623818718	WITHOUT_CLASSIFICATION	7.237618128089298E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999973387534643	WITHOUT_CLASSIFICATION	2.661246535681863E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999935255158856	WITHOUT_CLASSIFICATION	6.474484114461102E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999934852191958	WITHOUT_CLASSIFICATION	6.514780804233886E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997937938572007	WITHOUT_CLASSIFICATION	2.062061427993592E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999718303268316	WITHOUT_CLASSIFICATION	2.8169673168399216E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9995454867366311	WITHOUT_CLASSIFICATION	4.5451326336893753E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9995322006060449	WITHOUT_CLASSIFICATION	4.6779939395512343E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999972867771222	WITHOUT_CLASSIFICATION	2.7132228778869197E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999928275057091	WITHOUT_CLASSIFICATION	7.172494290948037E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996736018264278	WITHOUT_CLASSIFICATION	3.263981735722021E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999914785590114	WITHOUT_CLASSIFICATION	8.52144098861959E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999963038632678	WITHOUT_CLASSIFICATION	3.696136732209925E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999899460818888	WITHOUT_CLASSIFICATION	1.0053918111060652E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999592480483676	WITHOUT_CLASSIFICATION	4.075195163247411E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999825498892826	WITHOUT_CLASSIFICATION	1.745011071751266E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999933945118778	WITHOUT_CLASSIFICATION	6.605488122198457E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9974899095948729	WITHOUT_CLASSIFICATION	0.0025100904051270404	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9990761230906428	WITHOUT_CLASSIFICATION	9.238769093572343E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9987536266623391	WITHOUT_CLASSIFICATION	0.0012463733376609166	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999945371281452	WITHOUT_CLASSIFICATION	5.4628718547199225E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999861587890714	WITHOUT_CLASSIFICATION	1.384121092858866E-5	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999975331009515	WITHOUT_CLASSIFICATION	2.4668990484669557E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999750050930324	WITHOUT_CLASSIFICATION	2.4994906967537004E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998909679814486	WITHOUT_CLASSIFICATION	1.0903201855133756E-4	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999733717819169	WITHOUT_CLASSIFICATION	2.6628218083045908E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999786410413846	WITHOUT_CLASSIFICATION	2.135895861545347E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999908146525966	WITHOUT_CLASSIFICATION	9.185347403382548E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996685178813844	WITHOUT_CLASSIFICATION	3.3148211861546014E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999671957150401	WITHOUT_CLASSIFICATION	3.280428495990208E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999929426579405	WITHOUT_CLASSIFICATION	7.057342059549628E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999953957893376	WITHOUT_CLASSIFICATION	4.6042106623598745E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999975809752499	WITHOUT_CLASSIFICATION	2.419024750166226E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999993640241593	WITHOUT_CLASSIFICATION	6.3597584070083425E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999931775336006	WITHOUT_CLASSIFICATION	6.822466399408749E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999928346981027	WITHOUT_CLASSIFICATION	7.1653018972696456E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999992965597299	WITHOUT_CLASSIFICATION	7.0344027009524445E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999993511757898	WITHOUT_CLASSIFICATION	6.488242103068465E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999896635444634	WITHOUT_CLASSIFICATION	1.0336455536712085E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999462402733954	WITHOUT_CLASSIFICATION	5.375972660462558E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999964529109937	WITHOUT_CLASSIFICATION	3.54708900623973E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999722340885316	WITHOUT_CLASSIFICATION	2.776591146833254E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999869577799065	WITHOUT_CLASSIFICATION	1.3042220093344017E-5	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9928700807114852	WITHOUT_CLASSIFICATION	0.0071299192885148025	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999990251403558	WITHOUT_CLASSIFICATION	9.748596441979958E-7	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999983133932162	WITHOUT_CLASSIFICATION	1.6866067838632693E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999755650685763	WITHOUT_CLASSIFICATION	2.443493142365264E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999977268328137	WITHOUT_CLASSIFICATION	2.2731671863291734E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999835683492148	WITHOUT_CLASSIFICATION	1.6431650785155246E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999934666372932	WITHOUT_CLASSIFICATION	6.533362706853911E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9997717092277923	WITHOUT_CLASSIFICATION	2.2829077220769354E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999990285389492	WITHOUT_CLASSIFICATION	9.714610509140657E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999990285389492	WITHOUT_CLASSIFICATION	9.714610509140657E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999658812467729	WITHOUT_CLASSIFICATION	3.411875322714112E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999907617020609	WITHOUT_CLASSIFICATION	9.238297939059417E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999925153502306	WITHOUT_CLASSIFICATION	7.484649769350625E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999954112409646	WITHOUT_CLASSIFICATION	4.588759035399271E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999722727690895	WITHOUT_CLASSIFICATION	2.772723091048507E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997126272146729	WITHOUT_CLASSIFICATION	2.8737278532706855E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999918045309187	WITHOUT_CLASSIFICATION	8.19546908117829E-6	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998266306795	WITHOUT_CLASSIFICATION	1.7336932035084805E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999765320961829	WITHOUT_CLASSIFICATION	2.3467903817046135E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999888458408325	WITHOUT_CLASSIFICATION	1.115415916757567E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999803820717543	WITHOUT_CLASSIFICATION	1.9617928245577888E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9989405604094703	WITHOUT_CLASSIFICATION	0.0010594395905296865	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999996637760117	WITHOUT_CLASSIFICATION	3.3622398829262214E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997857950990594	WITHOUT_CLASSIFICATION	2.1420490094066377E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995540147912413	WITHOUT_CLASSIFICATION	4.4598520875869537E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995540147912413	WITHOUT_CLASSIFICATION	4.4598520875869537E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999807813723838	WITHOUT_CLASSIFICATION	1.921862761617348E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999975241856897	WITHOUT_CLASSIFICATION	2.4758143102902682E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999805792850263	WITHOUT_CLASSIFICATION	1.9420714973697304E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999994803686322	WITHOUT_CLASSIFICATION	5.196313677963363E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999975986858204	WITHOUT_CLASSIFICATION	2.4013141795940856E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734131848997	WITHOUT_CLASSIFICATION	2.658681510027728E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997767374579457	WITHOUT_CLASSIFICATION	2.2326254205418737E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999682435331578	WITHOUT_CLASSIFICATION	3.175646684208917E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999983215155509	WITHOUT_CLASSIFICATION	1.6784844490165105E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9994627043129823	WITHOUT_CLASSIFICATION	5.372956870176554E-4	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999968988845007	WITHOUT_CLASSIFICATION	3.101115499367877E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9996924354977038	WITHOUT_CLASSIFICATION	3.075645022962773E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999761480145077	WITHOUT_CLASSIFICATION	2.385198549228569E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999908938095573	WITHOUT_CLASSIFICATION	9.106190442703435E-6	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999145009742704	WITHOUT_CLASSIFICATION	8.549902572967175E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999909114517987	WITHOUT_CLASSIFICATION	9.088548201164117E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999648958876771	WITHOUT_CLASSIFICATION	3.510411232280869E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999566576965223	WITHOUT_CLASSIFICATION	4.334230347768619E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999419469463773	WITHOUT_CLASSIFICATION	5.805305362269922E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999977309980755	WITHOUT_CLASSIFICATION	2.2690019245375855E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999841343519639	WITHOUT_CLASSIFICATION	1.5865648036172987E-5	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997574590251	WITHOUT_CLASSIFICATION	2.425409747580318E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999937174953479	WITHOUT_CLASSIFICATION	6.282504652112848E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999088278740343	WITHOUT_CLASSIFICATION	9.117212596568557E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998424061043165	WITHOUT_CLASSIFICATION	1.5759389568355527E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999775848773967	WITHOUT_CLASSIFICATION	2.2415122603301926E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999966386066756	WITHOUT_CLASSIFICATION	3.3613933243549018E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999922529983973	WITHOUT_CLASSIFICATION	7.747001602552018E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999720980656258	WITHOUT_CLASSIFICATION	2.790193437421896E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999874086472977	WITHOUT_CLASSIFICATION	1.2591352702182668E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996364799022568	WITHOUT_CLASSIFICATION	3.635200977432187E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999964900607079	WITHOUT_CLASSIFICATION	3.5099392919624056E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999894330836109	WITHOUT_CLASSIFICATION	1.0566916389059776E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999901815215593	WITHOUT_CLASSIFICATION	9.818478440759004E-6	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999810094189185	WITHOUT_CLASSIFICATION	1.8990581081553012E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999954118443506	WITHOUT_CLASSIFICATION	4.588155649458841E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999801364704753	WITHOUT_CLASSIFICATION	1.986352952466592E-5	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999802792526735	WITHOUT_CLASSIFICATION	1.9720747326518832E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999960661304744	WITHOUT_CLASSIFICATION	3.9338695255966536E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999976626066871	WITHOUT_CLASSIFICATION	2.3373933128964397E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999562233963817	WITHOUT_CLASSIFICATION	4.3776603618216035E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999562233963817	WITHOUT_CLASSIFICATION	4.3776603618216035E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999699561750925	WITHOUT_CLASSIFICATION	3.004382490757235E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999885054553745	WITHOUT_CLASSIFICATION	1.1494544625448693E-5	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9996705613139482	WITHOUT_CLASSIFICATION	3.2943868605178503E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999722128160625	WITHOUT_CLASSIFICATION	2.7787183937440688E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999773867691444	WITHOUT_CLASSIFICATION	2.2613230855628144E-5	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999740979338418	WITHOUT_CLASSIFICATION	2.590206615819971E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999666975766911	WITHOUT_CLASSIFICATION	3.33024233088989E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9993628786708535	WITHOUT_CLASSIFICATION	6.371213291465684E-4	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999991354081401	WITHOUT_CLASSIFICATION	8.645918599983798E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677212385331	WITHOUT_CLASSIFICATION	3.2278761466872993E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9974937353160795	WITHOUT_CLASSIFICATION	0.0025062646839204045	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9957509519696239	WITHOUT_CLASSIFICATION	0.0042490480303761366	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999986131867673	WITHOUT_CLASSIFICATION	1.3868132326321787E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999973084379558	WITHOUT_CLASSIFICATION	2.6915620441990803E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9985408622390426	WITHOUT_CLASSIFICATION	0.001459137760957439	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999978800579632	WITHOUT_CLASSIFICATION	2.1199420367336426E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999998649483219	WITHOUT_CLASSIFICATION	1.3505167808875778E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999455623056307	WITHOUT_CLASSIFICATION	5.44376943693048E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999119705953299	WITHOUT_CLASSIFICATION	8.802940467012642E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999838823842	WITHOUT_CLASSIFICATION	1.611761579348353E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999720424884205	WITHOUT_CLASSIFICATION	2.795751157949535E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999803105353819	WITHOUT_CLASSIFICATION	1.9689464618040077E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996830675240748	WITHOUT_CLASSIFICATION	3.169324759252097E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999962156732872	WITHOUT_CLASSIFICATION	3.784326712802899E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999978670490268	WITHOUT_CLASSIFICATION	2.1329509732628005E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999964424730952	WITHOUT_CLASSIFICATION	3.557526904816206E-6	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989615814134213	WITHOUT_CLASSIFICATION	0.001038418586578821	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999127622547059	WITHOUT_CLASSIFICATION	8.723774529413014E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999943489270884	WITHOUT_CLASSIFICATION	5.651072911630936E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999983426656228	WITHOUT_CLASSIFICATION	1.657334377186068E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999953482227815	WITHOUT_CLASSIFICATION	4.651777218587348E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999980159789918	WITHOUT_CLASSIFICATION	1.984021008245083E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999979270287778	WITHOUT_CLASSIFICATION	2.0729712222128686E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999661463439795	WITHOUT_CLASSIFICATION	3.385365602055321E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999965670713117	WITHOUT_CLASSIFICATION	3.4329286883880966E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999889799873914	WITHOUT_CLASSIFICATION	1.1020012608535899E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999682738298538	WITHOUT_CLASSIFICATION	3.17261701461976E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999941808435715	WITHOUT_CLASSIFICATION	5.81915642838879E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999651601780798	WITHOUT_CLASSIFICATION	3.483982192012754E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999941223876418	WITHOUT_CLASSIFICATION	5.8776123581692935E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999997666345353	WITHOUT_CLASSIFICATION	2.3336546480363406E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999985618751616	WITHOUT_CLASSIFICATION	1.4381248384423921E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999451002105217	WITHOUT_CLASSIFICATION	5.4899789478208594E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9981649821210319	WITHOUT_CLASSIFICATION	0.0018350178789680984	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999240670045549	WITHOUT_CLASSIFICATION	7.59329954450221E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999993551663966	WITHOUT_CLASSIFICATION	6.44833603360734E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999996637760117	WITHOUT_CLASSIFICATION	3.3622398829262214E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999996801696176	WITHOUT_CLASSIFICATION	3.1983038240413774E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999994960205351	WITHOUT_CLASSIFICATION	5.039794649481713E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999393718609031	WITHOUT_CLASSIFICATION	6.0628139096915006E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999965966817728	WITHOUT_CLASSIFICATION	3.4033182271400953E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999926382356228	WITHOUT_CLASSIFICATION	7.361764377172657E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999781371688856	WITHOUT_CLASSIFICATION	2.1862831114338665E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997680016659928	WITHOUT_CLASSIFICATION	2.3199833400711843E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.997970468583648	WITHOUT_CLASSIFICATION	0.00202953141635199	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999518769297601	WITHOUT_CLASSIFICATION	4.812307023993364E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999927217239403	WITHOUT_CLASSIFICATION	7.278276059667323E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9992239844700208	WITHOUT_CLASSIFICATION	7.76015529979189E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999033397118486	WITHOUT_CLASSIFICATION	9.666028815142573E-5	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999853536510708	WITHOUT_CLASSIFICATION	1.464634892931089E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999880347450498	WITHOUT_CLASSIFICATION	1.1965254950190937E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998818628638871	WITHOUT_CLASSIFICATION	1.18137136112942E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995991304083757	WITHOUT_CLASSIFICATION	4.008695916242585E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997936991878	WITHOUT_CLASSIFICATION	2.063008122505579E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999923355507855	WITHOUT_CLASSIFICATION	7.664449214564015E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998818628638871	WITHOUT_CLASSIFICATION	1.18137136112942E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989864192327005	WITHOUT_CLASSIFICATION	0.0010135807672994937	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999993538625814	WITHOUT_CLASSIFICATION	6.461374185707206E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999997153125069	WITHOUT_CLASSIFICATION	2.8468749313174047E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999898644934607	WITHOUT_CLASSIFICATION	1.0135506539175881E-5	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996991316823082	WITHOUT_CLASSIFICATION	3.008683176917989E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999493158402879	WITHOUT_CLASSIFICATION	5.0684159712039476E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999980209083039	WITHOUT_CLASSIFICATION	1.9790916961407046E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9978963695291044	WITHOUT_CLASSIFICATION	0.0021036304708955235	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997974329520102	WITHOUT_CLASSIFICATION	2.0256704798973194E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999647372276858	WITHOUT_CLASSIFICATION	3.526277231428984E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9993366385235781	WITHOUT_CLASSIFICATION	6.633614764219165E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9860343183638508	WITHOUT_CLASSIFICATION	0.013965681636149113	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999996739793072	WITHOUT_CLASSIFICATION	3.2602069279345187E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999744476204517	WITHOUT_CLASSIFICATION	2.5552379548242948E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999372741026145	WITHOUT_CLASSIFICATION	6.272589738554419E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999916020978775	WITHOUT_CLASSIFICATION	8.397902122557223E-6	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999931982292662	WITHOUT_CLASSIFICATION	6.801770733749769E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999985570875956	WITHOUT_CLASSIFICATION	1.4429124045422975E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9969341446669275	WITHOUT_CLASSIFICATION	0.0030658553330725345	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.999994208742613	WITHOUT_CLASSIFICATION	5.791257386959771E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999956725829267	WITHOUT_CLASSIFICATION	4.3274170732886195E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999948611772949	WITHOUT_CLASSIFICATION	5.1388227051349894E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999815359259254	WITHOUT_CLASSIFICATION	1.8464074074496863E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999085762933	WITHOUT_CLASSIFICATION	9.142370674842307E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999988966413704	WITHOUT_CLASSIFICATION	1.1033586295636164E-6	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999669692878691	WITHOUT_CLASSIFICATION	3.303071213088711E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999264361550875	WITHOUT_CLASSIFICATION	7.356384491250815E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999817194275743	WITHOUT_CLASSIFICATION	1.828057242571165E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999798377601805	WITHOUT_CLASSIFICATION	2.0162239819464063E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999972867197334	WITHOUT_CLASSIFICATION	2.713280266610285E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999972422417734	WITHOUT_CLASSIFICATION	2.7577582265264182E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998395698544109	WITHOUT_CLASSIFICATION	1.6043014558908807E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999946028896036	WITHOUT_CLASSIFICATION	5.39711039640092E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999985958394209	WITHOUT_CLASSIFICATION	1.4041605791283328E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999339748698116	WITHOUT_CLASSIFICATION	6.602513018832105E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999993552835941	WITHOUT_CLASSIFICATION	6.447164059009041E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999901272628547	WITHOUT_CLASSIFICATION	9.8727371452423E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999906228914494	WITHOUT_CLASSIFICATION	9.377108550687484E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999988351407306	WITHOUT_CLASSIFICATION	1.1648592693734621E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999512747334398	WITHOUT_CLASSIFICATION	4.872526656020812E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998839165317781	WITHOUT_CLASSIFICATION	1.1608346822195812E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998839165317781	WITHOUT_CLASSIFICATION	1.1608346822195812E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9979677452168308	WITHOUT_CLASSIFICATION	0.0020322547831691986	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999991263855709	WITHOUT_CLASSIFICATION	8.736144291020657E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999757738812116	WITHOUT_CLASSIFICATION	2.422611878843361E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.542541168083056	WITHOUT_CLASSIFICATION	0.457458831916944	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999200603562005	WITHOUT_CLASSIFICATION	7.993964379948895E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999200603562005	WITHOUT_CLASSIFICATION	7.993964379948895E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999933049306401	WITHOUT_CLASSIFICATION	6.695069359888302E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998655459472348	WITHOUT_CLASSIFICATION	1.3445405276526348E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999900733051302	WITHOUT_CLASSIFICATION	9.926694869810974E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998784116562855	WITHOUT_CLASSIFICATION	1.2158834371450292E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999866114613831	WITHOUT_CLASSIFICATION	1.3388538616898024E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999892694064512	WITHOUT_CLASSIFICATION	1.0730593548849414E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999983717666407	WITHOUT_CLASSIFICATION	1.6282333592433614E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997587085897138	WITHOUT_CLASSIFICATION	2.4129141028606736E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998879981541777	WITHOUT_CLASSIFICATION	1.120018458223006E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087724351428	WITHOUT_CLASSIFICATION	9.12275648572491E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087724351428	WITHOUT_CLASSIFICATION	9.12275648572491E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998176744276497	WITHOUT_CLASSIFICATION	1.8232557235043265E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999927463510396	WITHOUT_CLASSIFICATION	7.253648960279838E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995974941425538	WITHOUT_CLASSIFICATION	4.0250585744609914E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9991011888775051	WITHOUT_CLASSIFICATION	8.988111224948688E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880889095599	WITHOUT_CLASSIFICATION	1.1911090440099332E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668320054169	WITHOUT_CLASSIFICATION	3.316799458301705E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999855472258711	WITHOUT_CLASSIFICATION	1.445277412883742E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999355474356335	WITHOUT_CLASSIFICATION	6.445256436650417E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999799630293522	WITHOUT_CLASSIFICATION	2.003697064785429E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999248059610168	WITHOUT_CLASSIFICATION	7.519403898319766E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999647372276858	WITHOUT_CLASSIFICATION	3.526277231428984E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999748398618096	WITHOUT_CLASSIFICATION	2.5160138190423578E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9990080301136555	WITHOUT_CLASSIFICATION	9.919698863445486E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999737036180261	WITHOUT_CLASSIFICATION	2.629638197394569E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998676115137265	WITHOUT_CLASSIFICATION	1.3238848627338917E-4	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996492716873396	WITHOUT_CLASSIFICATION	3.5072831266026483E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999583231798577	WITHOUT_CLASSIFICATION	4.1676820142308815E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993656378901239	WITHOUT_CLASSIFICATION	6.343621098761217E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999871074942	WITHOUT_CLASSIFICATION	1.2892505800100149E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995196592672221	WITHOUT_CLASSIFICATION	4.8034073277798797E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999548969222254	WITHOUT_CLASSIFICATION	4.5103077774582305E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999548969222254	WITHOUT_CLASSIFICATION	4.5103077774582305E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996307105030673	WITHOUT_CLASSIFICATION	3.692894969328211E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999540341736	WITHOUT_CLASSIFICATION	4.5965826388339374E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999091260041295	WITHOUT_CLASSIFICATION	9.087399587050319E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9992413205421234	WITHOUT_CLASSIFICATION	7.586794578764738E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999988558145011	WITHOUT_CLASSIFICATION	1.1441854989040601E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999943434433678	WITHOUT_CLASSIFICATION	5.656556632270414E-6	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969543964385	WITHOUT_CLASSIFICATION	3.0456035614470083E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999343630214	WITHOUT_CLASSIFICATION	6.563697859494754E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999533867415381	WITHOUT_CLASSIFICATION	4.6613258461800453E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999898969496747	WITHOUT_CLASSIFICATION	1.0103050325382121E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708349754094	WITHOUT_CLASSIFICATION	2.916502459058204E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999969694276123	WITHOUT_CLASSIFICATION	3.0305723877139E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999968949388429	WITHOUT_CLASSIFICATION	3.105061157064564E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999860728002151	WITHOUT_CLASSIFICATION	1.3927199784908839E-5	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999805454373896	WITHOUT_CLASSIFICATION	1.9454562610378363E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999974706596436	WITHOUT_CLASSIFICATION	2.529340356362636E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999888831990762	WITHOUT_CLASSIFICATION	1.111680092390483E-5	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999561729545406	WITHOUT_CLASSIFICATION	4.382704545939343E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999871863465742	WITHOUT_CLASSIFICATION	1.2813653425792527E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999925909961963	WITHOUT_CLASSIFICATION	7.4090038036848245E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999923640713245	WITHOUT_CLASSIFICATION	7.635928675445142E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995677520614	WITHOUT_CLASSIFICATION	4.3224793852511157E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999977846250349	WITHOUT_CLASSIFICATION	2.2153749651743826E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999271212020449	WITHOUT_CLASSIFICATION	7.287879795509512E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768340729802	WITHOUT_CLASSIFICATION	2.3165927019715364E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768340729802	WITHOUT_CLASSIFICATION	2.3165927019715364E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999759533126305	WITHOUT_CLASSIFICATION	2.404668736950285E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999527826642959	WITHOUT_CLASSIFICATION	4.7217335704096254E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999896965540683	WITHOUT_CLASSIFICATION	1.0303445931625438E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999969745001923	WITHOUT_CLASSIFICATION	3.025499807609595E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999833835352517	WITHOUT_CLASSIFICATION	1.6616464748332044E-5	TEST
