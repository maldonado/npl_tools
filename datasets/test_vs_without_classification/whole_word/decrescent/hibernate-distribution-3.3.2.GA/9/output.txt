//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999535954737512	WITHOUT_CLASSIFICATION	4.6404526248853445E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9996860983258752	WITHOUT_CLASSIFICATION	3.1390167412486444E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999913853548134	WITHOUT_CLASSIFICATION	8.614645186679785E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999994622229618	WITHOUT_CLASSIFICATION	5.3777703819689265E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999994622229618	WITHOUT_CLASSIFICATION	5.3777703819689265E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999808421985799	WITHOUT_CLASSIFICATION	1.915780142007701E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999756813236991	WITHOUT_CLASSIFICATION	2.4318676300917327E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999333755021107	WITHOUT_CLASSIFICATION	6.662449788933042E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999983147517825	WITHOUT_CLASSIFICATION	1.685248217640555E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.999972453735496	WITHOUT_CLASSIFICATION	2.7546264503883728E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.999972453735496	WITHOUT_CLASSIFICATION	2.7546264503883728E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999549585631964	WITHOUT_CLASSIFICATION	4.504143680356949E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999962290568332	WITHOUT_CLASSIFICATION	3.770943166823148E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999854781692187	WITHOUT_CLASSIFICATION	1.4521830781282029E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999426389669533	WITHOUT_CLASSIFICATION	5.736103304666085E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999868007528062	WITHOUT_CLASSIFICATION	1.3199247193912148E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999639088863183	WITHOUT_CLASSIFICATION	3.6091113681801044E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.999963703086454	WITHOUT_CLASSIFICATION	3.6296913545986356E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997639580030315	WITHOUT_CLASSIFICATION	2.3604199696838942E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999957218960948	WITHOUT_CLASSIFICATION	4.278103905184366E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999915772184296	WITHOUT_CLASSIFICATION	8.422781570445368E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999957197757687	WITHOUT_CLASSIFICATION	4.280224231224548E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999957197757687	WITHOUT_CLASSIFICATION	4.280224231224548E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999761371888354	WITHOUT_CLASSIFICATION	2.3862811164550053E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999648805498308	WITHOUT_CLASSIFICATION	3.511945016922189E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998703652995258	WITHOUT_CLASSIFICATION	1.2963470047416985E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999690099139329	WITHOUT_CLASSIFICATION	3.099008606711535E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999817894621318	WITHOUT_CLASSIFICATION	1.8210537868140584E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.7874662842097159	WITHOUT_CLASSIFICATION	0.21253371579028413	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.7874662842097159	WITHOUT_CLASSIFICATION	0.21253371579028413	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999969214370808	WITHOUT_CLASSIFICATION	3.078562919198328E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999315906060577	WITHOUT_CLASSIFICATION	6.840939394224989E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999985971453997	WITHOUT_CLASSIFICATION	1.4028546002610217E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998867377070401	WITHOUT_CLASSIFICATION	1.1326229295987356E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999859942334367	WITHOUT_CLASSIFICATION	1.4005766563207244E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754161358607	WITHOUT_CLASSIFICATION	2.458386413934564E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999962100999275	WITHOUT_CLASSIFICATION	3.789900072616333E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999922077660055	WITHOUT_CLASSIFICATION	7.792233994485474E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999539284969148	WITHOUT_CLASSIFICATION	4.607150308529417E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999539284969148	WITHOUT_CLASSIFICATION	4.607150308529417E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999479219840554	WITHOUT_CLASSIFICATION	5.2078015944625894E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999846735453146	WITHOUT_CLASSIFICATION	1.53264546853841E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999730679417156	WITHOUT_CLASSIFICATION	2.6932058284404896E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999994963154876	WITHOUT_CLASSIFICATION	5.036845124056689E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999986745712318	WITHOUT_CLASSIFICATION	1.3254287681297201E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999999649223806	WITHOUT_CLASSIFICATION	3.5077619399865844E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998616908158217	WITHOUT_CLASSIFICATION	1.3830918417835346E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999674085372094	WITHOUT_CLASSIFICATION	3.2591462790584284E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999976217474336	WITHOUT_CLASSIFICATION	2.3782525664022977E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999592671116431	WITHOUT_CLASSIFICATION	4.073288835695746E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999923553342647	WITHOUT_CLASSIFICATION	7.644665735416264E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.999995778999608	WITHOUT_CLASSIFICATION	4.2210003919290225E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999960341485296	WITHOUT_CLASSIFICATION	3.965851470449301E-6	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999551577500293	WITHOUT_CLASSIFICATION	4.484224997077506E-5	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999963423274184	WITHOUT_CLASSIFICATION	3.6576725815494174E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999963761184248	WITHOUT_CLASSIFICATION	3.6238815752008124E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999956001782401	WITHOUT_CLASSIFICATION	4.399821759993905E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999959861752871	WITHOUT_CLASSIFICATION	4.013824712928743E-6	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999786540235379	WITHOUT_CLASSIFICATION	2.134597646208019E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999891100656194	WITHOUT_CLASSIFICATION	1.0889934380578683E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999846719271388	WITHOUT_CLASSIFICATION	1.5328072861163408E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996782321138	WITHOUT_CLASSIFICATION	3.217678862260046E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979476860796	WITHOUT_CLASSIFICATION	2.052313920360836E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999641316927788	WITHOUT_CLASSIFICATION	3.5868307221348116E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999983786448523	WITHOUT_CLASSIFICATION	1.6213551477510631E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999918394893721	WITHOUT_CLASSIFICATION	8.160510627888712E-6	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999993742039355	WITHOUT_CLASSIFICATION	6.257960646254192E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999893744864841	WITHOUT_CLASSIFICATION	1.062551351602376E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999936981652772	WITHOUT_CLASSIFICATION	6.301834722876772E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999546708195107	WITHOUT_CLASSIFICATION	4.53291804891919E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999997743176681	WITHOUT_CLASSIFICATION	2.2568233200575427E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999994808362335	WITHOUT_CLASSIFICATION	5.191637664988611E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998015556550163	WITHOUT_CLASSIFICATION	1.9844434498363857E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999815769168937	WITHOUT_CLASSIFICATION	1.842308310624613E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999894117756798	WITHOUT_CLASSIFICATION	1.0588224320309246E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999945735502745	WITHOUT_CLASSIFICATION	5.426449725399535E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999815769168937	WITHOUT_CLASSIFICATION	1.842308310624613E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999356887148	WITHOUT_CLASSIFICATION	6.431128526135727E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999753042590698	WITHOUT_CLASSIFICATION	2.4695740930250483E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999944609663188	WITHOUT_CLASSIFICATION	5.539033681088906E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999928775856367	WITHOUT_CLASSIFICATION	7.122414363344547E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889333758649	WITHOUT_CLASSIFICATION	1.1066624135093614E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889333758649	WITHOUT_CLASSIFICATION	1.1066624135093614E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999539536028719	WITHOUT_CLASSIFICATION	4.6046397128233706E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999798837274952	WITHOUT_CLASSIFICATION	2.01162725047537E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999884383854891	WITHOUT_CLASSIFICATION	1.1561614510951115E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999997466954245	WITHOUT_CLASSIFICATION	2.533045755107612E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999905465736878	WITHOUT_CLASSIFICATION	9.453426312268658E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999911946453894	WITHOUT_CLASSIFICATION	8.805354610601789E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999962896040767	WITHOUT_CLASSIFICATION	3.710395923244082E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999914457906945	WITHOUT_CLASSIFICATION	8.554209305504226E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999900196384417	WITHOUT_CLASSIFICATION	9.980361558325262E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999777040386241	WITHOUT_CLASSIFICATION	2.229596137588164E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999777040386241	WITHOUT_CLASSIFICATION	2.229596137588164E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999946380976935	WITHOUT_CLASSIFICATION	5.361902306463739E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999981725295128	WITHOUT_CLASSIFICATION	1.827470487130318E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999904177414646	WITHOUT_CLASSIFICATION	9.582258535443683E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999777040386241	WITHOUT_CLASSIFICATION	2.229596137588164E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999946380976935	WITHOUT_CLASSIFICATION	5.361902306463739E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999946380976935	WITHOUT_CLASSIFICATION	5.361902306463739E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999922753521052	WITHOUT_CLASSIFICATION	7.72464789488303E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999863926018502	WITHOUT_CLASSIFICATION	1.3607398149815089E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999900631112418	WITHOUT_CLASSIFICATION	9.936888758096983E-6	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999623610026873	WITHOUT_CLASSIFICATION	3.7638997312594496E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999876994554038	WITHOUT_CLASSIFICATION	1.2300544596339373E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999876994554038	WITHOUT_CLASSIFICATION	1.2300544596339373E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999297550221768	WITHOUT_CLASSIFICATION	7.024497782319813E-5	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997478755240684	WITHOUT_CLASSIFICATION	2.521244759315548E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999922262363913	WITHOUT_CLASSIFICATION	7.773763608674719E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999931478548171	WITHOUT_CLASSIFICATION	6.852145182824504E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999931478548171	WITHOUT_CLASSIFICATION	6.852145182824504E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997779548734366	WITHOUT_CLASSIFICATION	2.2204512656338616E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999894151717141	WITHOUT_CLASSIFICATION	1.0584828285895536E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9971726353569098	WITHOUT_CLASSIFICATION	0.0028273646430901443	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999988350783817	WITHOUT_CLASSIFICATION	1.1649216183001859E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997787667396819	WITHOUT_CLASSIFICATION	2.2123326031813748E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999908557011168	WITHOUT_CLASSIFICATION	9.144298883249809E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999802318422396	WITHOUT_CLASSIFICATION	1.9768157760468634E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9994970364352873	WITHOUT_CLASSIFICATION	5.029635647127176E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9971726353569098	WITHOUT_CLASSIFICATION	0.0028273646430901443	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999920012860507	WITHOUT_CLASSIFICATION	7.998713949286781E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985073415166	WITHOUT_CLASSIFICATION	1.4926584833509043E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985073415166	WITHOUT_CLASSIFICATION	1.4926584833509043E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999687279503723	WITHOUT_CLASSIFICATION	3.127204962770787E-5	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999121248322218	WITHOUT_CLASSIFICATION	8.78751677781224E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99994934680538	WITHOUT_CLASSIFICATION	5.065319462006315E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997086076550613	WITHOUT_CLASSIFICATION	2.913923449386555E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9995560632396172	WITHOUT_CLASSIFICATION	4.4393676038281495E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999218189412125	WITHOUT_CLASSIFICATION	7.818105878757457E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999987219444503	WITHOUT_CLASSIFICATION	1.2780555496849364E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999982638958362	WITHOUT_CLASSIFICATION	1.7361041637330521E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990739885257	WITHOUT_CLASSIFICATION	9.260114742391884E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990739885257	WITHOUT_CLASSIFICATION	9.260114742391884E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999535954737512	WITHOUT_CLASSIFICATION	4.6404526248853445E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999904412536548	WITHOUT_CLASSIFICATION	9.55874634514308E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999819857617201	WITHOUT_CLASSIFICATION	1.8014238279939522E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999859539161271	WITHOUT_CLASSIFICATION	1.4046083872829633E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999986462142344	WITHOUT_CLASSIFICATION	1.3537857655935491E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999959063452639	WITHOUT_CLASSIFICATION	4.0936547361010515E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999646344620159	WITHOUT_CLASSIFICATION	3.536553798418589E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9999342345084673	WITHOUT_CLASSIFICATION	6.57654915326661E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999636079230662	WITHOUT_CLASSIFICATION	3.639207693388775E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999850242898963	WITHOUT_CLASSIFICATION	1.4975710103682371E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999959063452639	WITHOUT_CLASSIFICATION	4.0936547361010515E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999747342080066	WITHOUT_CLASSIFICATION	2.5265791993398434E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999945816003228	WITHOUT_CLASSIFICATION	5.4183996771428446E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999855040169837	WITHOUT_CLASSIFICATION	1.4495983016263776E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999906176144319	WITHOUT_CLASSIFICATION	9.382385568047895E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999956540592394	WITHOUT_CLASSIFICATION	4.34594076054044E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999994622229618	WITHOUT_CLASSIFICATION	5.3777703819689265E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999993559697869	WITHOUT_CLASSIFICATION	6.44030213105112E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999965657431884	WITHOUT_CLASSIFICATION	3.434256811588805E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999885368477298	WITHOUT_CLASSIFICATION	1.1463152270056266E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999903262942469	WITHOUT_CLASSIFICATION	9.673705753099293E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999957198156852	WITHOUT_CLASSIFICATION	4.280184314752453E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999988762098269	WITHOUT_CLASSIFICATION	1.1237901730896648E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999895253268462	WITHOUT_CLASSIFICATION	1.0474673153891081E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999948135867831	WITHOUT_CLASSIFICATION	5.186413216960971E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999938397374704	WITHOUT_CLASSIFICATION	6.160262529634171E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.999995961436772	WITHOUT_CLASSIFICATION	4.0385632279534E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999636079230662	WITHOUT_CLASSIFICATION	3.639207693388775E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999957198156852	WITHOUT_CLASSIFICATION	4.280184314752453E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999808421985799	WITHOUT_CLASSIFICATION	1.915780142007701E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999889340790239	WITHOUT_CLASSIFICATION	1.1065920976182214E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999955455201467	WITHOUT_CLASSIFICATION	4.454479853300012E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999852750482936	WITHOUT_CLASSIFICATION	1.4724951706311906E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999957486235433	WITHOUT_CLASSIFICATION	4.251376456727588E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999986536858098	WITHOUT_CLASSIFICATION	1.3463141901901626E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998000802125327	WITHOUT_CLASSIFICATION	1.9991978746724753E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999343345957233	WITHOUT_CLASSIFICATION	6.56654042766765E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999343345957233	WITHOUT_CLASSIFICATION	6.56654042766765E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999921615917172	WITHOUT_CLASSIFICATION	7.838408282797172E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999807694512508	WITHOUT_CLASSIFICATION	1.9230548749154278E-5	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997570302439741	WITHOUT_CLASSIFICATION	2.4296975602591909E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999805827777409	WITHOUT_CLASSIFICATION	1.9417222259030456E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999259236203717	WITHOUT_CLASSIFICATION	7.407637962828421E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999639502070536	WITHOUT_CLASSIFICATION	3.604979294637004E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999592765823999	WITHOUT_CLASSIFICATION	4.0723417600107526E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999756813236991	WITHOUT_CLASSIFICATION	2.4318676300917327E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999996881591139	WITHOUT_CLASSIFICATION	3.1184088609908647E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999996881591139	WITHOUT_CLASSIFICATION	3.1184088609908647E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999996881591139	WITHOUT_CLASSIFICATION	3.1184088609908647E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999449586003814	WITHOUT_CLASSIFICATION	5.5041399618629776E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999996881591139	WITHOUT_CLASSIFICATION	3.1184088609908647E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999950782211048	WITHOUT_CLASSIFICATION	4.921778895180228E-6	TEST
// int	WITHOUT_CLASSIFICATION	0.9999667613202173	WITHOUT_CLASSIFICATION	3.323867978277068E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999810174071381	WITHOUT_CLASSIFICATION	1.8982592861962555E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999636079230662	WITHOUT_CLASSIFICATION	3.639207693388775E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999957198156852	WITHOUT_CLASSIFICATION	4.280184314752453E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999957198156852	WITHOUT_CLASSIFICATION	4.280184314752453E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999845917266378	WITHOUT_CLASSIFICATION	1.5408273362164467E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999977797928457	WITHOUT_CLASSIFICATION	2.2202071542318713E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999377216914455	WITHOUT_CLASSIFICATION	6.227830855445837E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999468301068124	WITHOUT_CLASSIFICATION	5.3169893187610264E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999983147517825	WITHOUT_CLASSIFICATION	1.685248217640555E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999983147517825	WITHOUT_CLASSIFICATION	1.685248217640555E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999942150440969	WITHOUT_CLASSIFICATION	5.784955903092326E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999978295194198	WITHOUT_CLASSIFICATION	2.1704805801742797E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999253935520024	WITHOUT_CLASSIFICATION	7.460644799763492E-5	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999656433153471	WITHOUT_CLASSIFICATION	3.4356684652934547E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999767642588832	WITHOUT_CLASSIFICATION	2.3235741116855433E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999637929397179	WITHOUT_CLASSIFICATION	3.620706028207937E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.999972453735496	WITHOUT_CLASSIFICATION	2.7546264503883728E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999636800645942	WITHOUT_CLASSIFICATION	3.6319935405663865E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999636800645942	WITHOUT_CLASSIFICATION	3.6319935405663865E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999549585631964	WITHOUT_CLASSIFICATION	4.504143680356949E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999549585631964	WITHOUT_CLASSIFICATION	4.504143680356949E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999998225230488	WITHOUT_CLASSIFICATION	1.7747695120296039E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999998225230488	WITHOUT_CLASSIFICATION	1.7747695120296039E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999758397757262	WITHOUT_CLASSIFICATION	2.4160224273713068E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999758397757262	WITHOUT_CLASSIFICATION	2.4160224273713068E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999983147517825	WITHOUT_CLASSIFICATION	1.685248217640555E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.999972453735496	WITHOUT_CLASSIFICATION	2.7546264503883728E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999636800645942	WITHOUT_CLASSIFICATION	3.6319935405663865E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999636800645942	WITHOUT_CLASSIFICATION	3.6319935405663865E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999549585631964	WITHOUT_CLASSIFICATION	4.504143680356949E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999998225230488	WITHOUT_CLASSIFICATION	1.7747695120296039E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999998225230488	WITHOUT_CLASSIFICATION	1.7747695120296039E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999758397757262	WITHOUT_CLASSIFICATION	2.4160224273713068E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999907213877155	WITHOUT_CLASSIFICATION	9.278612284457351E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999368841603951	WITHOUT_CLASSIFICATION	6.311583960492212E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999763259527394	WITHOUT_CLASSIFICATION	2.367404726060733E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999831118500547	WITHOUT_CLASSIFICATION	1.688814994525301E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999356739713366	WITHOUT_CLASSIFICATION	6.432602866336168E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999635745920203	WITHOUT_CLASSIFICATION	3.6425407979624474E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998279071656067	WITHOUT_CLASSIFICATION	1.7209283439329861E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999840602349148	WITHOUT_CLASSIFICATION	1.5939765085204146E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999146347817637	WITHOUT_CLASSIFICATION	8.536521823636171E-5	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999909929945433	WITHOUT_CLASSIFICATION	9.007005456757252E-6	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999773715537609	WITHOUT_CLASSIFICATION	2.2628446239118334E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999851313300129	WITHOUT_CLASSIFICATION	1.4868669987239039E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999539536028719	WITHOUT_CLASSIFICATION	4.6046397128233706E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999635745920203	WITHOUT_CLASSIFICATION	3.6425407979624474E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996031287983	WITHOUT_CLASSIFICATION	3.968712016999899E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996031287983	WITHOUT_CLASSIFICATION	3.968712016999899E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999947008385069	WITHOUT_CLASSIFICATION	5.299161493090101E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999798199121662	WITHOUT_CLASSIFICATION	2.0180087833810568E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999798199121662	WITHOUT_CLASSIFICATION	2.0180087833810568E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998374159210413	WITHOUT_CLASSIFICATION	1.6258407895879484E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999667716094695	WITHOUT_CLASSIFICATION	3.322839053051217E-5	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9980485553932399	WITHOUT_CLASSIFICATION	0.0019514446067601912	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999846545894125	WITHOUT_CLASSIFICATION	1.5345410587419884E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999846545894125	WITHOUT_CLASSIFICATION	1.5345410587419884E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999868007528062	WITHOUT_CLASSIFICATION	1.3199247193912148E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999998328901925	WITHOUT_CLASSIFICATION	1.6710980750776302E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999998328901925	WITHOUT_CLASSIFICATION	1.6710980750776302E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999767710416524	WITHOUT_CLASSIFICATION	2.322895834765704E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999865101852112	WITHOUT_CLASSIFICATION	1.3489814788836784E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999915772184296	WITHOUT_CLASSIFICATION	8.422781570445368E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999638095059572	WITHOUT_CLASSIFICATION	3.6190494042816156E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999639088863183	WITHOUT_CLASSIFICATION	3.6091113681801044E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9893285098663332	WITHOUT_CLASSIFICATION	0.010671490133666696	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999637022042736	WITHOUT_CLASSIFICATION	3.629779572652991E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999887060037794	WITHOUT_CLASSIFICATION	1.1293996220593918E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999729556096212	WITHOUT_CLASSIFICATION	2.7044390378761686E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997783318075435	WITHOUT_CLASSIFICATION	2.2166819245644434E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999669277091037	WITHOUT_CLASSIFICATION	3.307229089630212E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999690099139329	WITHOUT_CLASSIFICATION	3.099008606711535E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999993304511027	WITHOUT_CLASSIFICATION	6.695488973775809E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999957337105311	WITHOUT_CLASSIFICATION	4.266289468913737E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999635916134837	WITHOUT_CLASSIFICATION	3.640838651638469E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999957212490158	WITHOUT_CLASSIFICATION	4.278750984181695E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999847302028669	WITHOUT_CLASSIFICATION	1.5269797133105264E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999845929038136	WITHOUT_CLASSIFICATION	1.5407096186418785E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999960462204106	WITHOUT_CLASSIFICATION	3.95377958931431E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999915772184296	WITHOUT_CLASSIFICATION	8.422781570445368E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999967391681405	WITHOUT_CLASSIFICATION	3.2608318594912162E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999959096184121	WITHOUT_CLASSIFICATION	4.090381587875E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999643918604094	WITHOUT_CLASSIFICATION	3.5608139590496844E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999639088863183	WITHOUT_CLASSIFICATION	3.6091113681801044E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999960462204106	WITHOUT_CLASSIFICATION	3.95377958931431E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999967391681405	WITHOUT_CLASSIFICATION	3.2608318594912162E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999643918604094	WITHOUT_CLASSIFICATION	3.5608139590496844E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999547083121803	WITHOUT_CLASSIFICATION	4.529168781978005E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999547083121803	WITHOUT_CLASSIFICATION	4.529168781978005E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999957197757687	WITHOUT_CLASSIFICATION	4.280224231224548E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999969490404398	WITHOUT_CLASSIFICATION	3.0509595602631955E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999540159588414	WITHOUT_CLASSIFICATION	4.598404115866689E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998065542658601	WITHOUT_CLASSIFICATION	1.934457341398269E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.999980246613723	WITHOUT_CLASSIFICATION	1.975338627698479E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999920483648213	WITHOUT_CLASSIFICATION	7.951635178706758E-6	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999819120348412	WITHOUT_CLASSIFICATION	1.808796515877703E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999684958465462	WITHOUT_CLASSIFICATION	3.150415345379623E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999982290808098	WITHOUT_CLASSIFICATION	1.7709191902439199E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999819120348412	WITHOUT_CLASSIFICATION	1.808796515877703E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999648805498308	WITHOUT_CLASSIFICATION	3.511945016922189E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999450838904569	WITHOUT_CLASSIFICATION	5.491610954305802E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999637559750357	WITHOUT_CLASSIFICATION	3.624402496427352E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999960462204106	WITHOUT_CLASSIFICATION	3.95377958931431E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999887637920376	WITHOUT_CLASSIFICATION	1.1236207962435838E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999876875812365	WITHOUT_CLASSIFICATION	1.2312418763629015E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999850000841578	WITHOUT_CLASSIFICATION	1.4999915842194602E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999966374804607	WITHOUT_CLASSIFICATION	3.3625195393861545E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999702246114233	WITHOUT_CLASSIFICATION	2.977538857679175E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999994606878214	WITHOUT_CLASSIFICATION	5.393121785982338E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999001034166339	WITHOUT_CLASSIFICATION	9.989658336615953E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999824874533673	WITHOUT_CLASSIFICATION	1.7512546632657976E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999958298335866	WITHOUT_CLASSIFICATION	4.170166413459636E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999957354604844	WITHOUT_CLASSIFICATION	4.264539515665464E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999845917266378	WITHOUT_CLASSIFICATION	1.5408273362164467E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999791807182994	WITHOUT_CLASSIFICATION	2.0819281700692143E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999690099139329	WITHOUT_CLASSIFICATION	3.099008606711535E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999851611500491	WITHOUT_CLASSIFICATION	1.4838849950826115E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998016816444746	WITHOUT_CLASSIFICATION	1.983183555254562E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999953163021792	WITHOUT_CLASSIFICATION	4.683697820835223E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999977713807958	WITHOUT_CLASSIFICATION	2.2286192042347293E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999977767926289	WITHOUT_CLASSIFICATION	2.223207371033533E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999795390746027	WITHOUT_CLASSIFICATION	2.0460925397311E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999935735310773	WITHOUT_CLASSIFICATION	6.426468922775855E-6	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999826611314739	WITHOUT_CLASSIFICATION	1.7338868526059546E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998612120397876	WITHOUT_CLASSIFICATION	1.3878796021240397E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999853053249865	WITHOUT_CLASSIFICATION	1.4694675013508053E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999552220873702	WITHOUT_CLASSIFICATION	4.477791262982793E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999552220873702	WITHOUT_CLASSIFICATION	4.477791262982793E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998349100478152	WITHOUT_CLASSIFICATION	1.650899521848298E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999861711591808	WITHOUT_CLASSIFICATION	1.3828840819207656E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999202405238711	WITHOUT_CLASSIFICATION	7.975947612889313E-5	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999847022427509	WITHOUT_CLASSIFICATION	1.5297757249003387E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998321098333407	WITHOUT_CLASSIFICATION	1.6789016665928226E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998400130046311	WITHOUT_CLASSIFICATION	1.5998699536884264E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999890636925737	WITHOUT_CLASSIFICATION	1.0936307426397592E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9993422933223914	WITHOUT_CLASSIFICATION	6.577066776086175E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998038811841891	WITHOUT_CLASSIFICATION	1.9611881581087644E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.99996848514815	WITHOUT_CLASSIFICATION	3.1514851850060146E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999880472968161	WITHOUT_CLASSIFICATION	1.1952703183893836E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999756653909597	WITHOUT_CLASSIFICATION	2.4334609040294035E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998985320741244	WITHOUT_CLASSIFICATION	1.0146792587566216E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804893338616	WITHOUT_CLASSIFICATION	1.9510666138325894E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796435719608	WITHOUT_CLASSIFICATION	2.035642803919164E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999595670255966	WITHOUT_CLASSIFICATION	4.043297440328058E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999463440615048	WITHOUT_CLASSIFICATION	5.365593849506002E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999878610778563	WITHOUT_CLASSIFICATION	1.213892214361373E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999957264411852	WITHOUT_CLASSIFICATION	4.273558814849362E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999694938874575	WITHOUT_CLASSIFICATION	3.05061125424977E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999694938874575	WITHOUT_CLASSIFICATION	3.05061125424977E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999533141157858	WITHOUT_CLASSIFICATION	4.668588421428841E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999533141157858	WITHOUT_CLASSIFICATION	4.668588421428841E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998612120397876	WITHOUT_CLASSIFICATION	1.3878796021240397E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9996820436421967	WITHOUT_CLASSIFICATION	3.1795635780332456E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9988311017345122	WITHOUT_CLASSIFICATION	0.0011688982654877353	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999138303111798	WITHOUT_CLASSIFICATION	8.616968882036412E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9988311017345122	WITHOUT_CLASSIFICATION	0.0011688982654877353	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999138303111798	WITHOUT_CLASSIFICATION	8.616968882036412E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996387272738547	WITHOUT_CLASSIFICATION	3.6127272614532816E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999496228380226	WITHOUT_CLASSIFICATION	5.037716197739501E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999998312544151	WITHOUT_CLASSIFICATION	1.6874558490672637E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.999996758618583	WITHOUT_CLASSIFICATION	3.241381416961335E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996805817602819	WITHOUT_CLASSIFICATION	3.194182397181857E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9995439463569107	WITHOUT_CLASSIFICATION	4.5605364308920926E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999474765462549	WITHOUT_CLASSIFICATION	5.252345374510152E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9993737389882122	WITHOUT_CLASSIFICATION	6.262610117877635E-4	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997394588041565	WITHOUT_CLASSIFICATION	2.60541195843563E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999930577122557	WITHOUT_CLASSIFICATION	6.942287744445243E-6	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999897306908353	WITHOUT_CLASSIFICATION	1.0269309164665275E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999979743061677	WITHOUT_CLASSIFICATION	2.025693832340276E-6	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999958190655958	WITHOUT_CLASSIFICATION	4.180934404262584E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998308144283389	WITHOUT_CLASSIFICATION	1.6918557166104516E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998308144283389	WITHOUT_CLASSIFICATION	1.6918557166104516E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992601393998517	WITHOUT_CLASSIFICATION	7.39860600148336E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992601393998517	WITHOUT_CLASSIFICATION	7.39860600148336E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999017768749	WITHOUT_CLASSIFICATION	9.822312509249502E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996387272738547	WITHOUT_CLASSIFICATION	3.6127272614532816E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999821156818022	WITHOUT_CLASSIFICATION	1.788431819773723E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999961767738404	WITHOUT_CLASSIFICATION	3.8232261596177726E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997147739690362	WITHOUT_CLASSIFICATION	2.8522603096370856E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995375756361351	WITHOUT_CLASSIFICATION	4.62424363864882E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9925149255849541	WITHOUT_CLASSIFICATION	0.00748507441504585	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996387272738547	WITHOUT_CLASSIFICATION	3.6127272614532816E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995375756361351	WITHOUT_CLASSIFICATION	4.62424363864882E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9925149255849541	WITHOUT_CLASSIFICATION	0.00748507441504585	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995769848287797	WITHOUT_CLASSIFICATION	4.2301517122037105E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999957685055121	WITHOUT_CLASSIFICATION	4.231494487933655E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999573875934354	WITHOUT_CLASSIFICATION	4.2612406564578436E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996387272738547	WITHOUT_CLASSIFICATION	3.6127272614532816E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996387272738547	WITHOUT_CLASSIFICATION	3.6127272614532816E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999976877639826	WITHOUT_CLASSIFICATION	2.312236017481517E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999976610683018	WITHOUT_CLASSIFICATION	2.3389316981927552E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999924538228434	WITHOUT_CLASSIFICATION	7.546177156607113E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999921038572575	WITHOUT_CLASSIFICATION	7.896142742529451E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.999880151395579	WITHOUT_CLASSIFICATION	1.198486044210407E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999988698536454	WITHOUT_CLASSIFICATION	1.1301463545692252E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997962051780019	WITHOUT_CLASSIFICATION	2.0379482199810178E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999943404535934	WITHOUT_CLASSIFICATION	5.659546406559803E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999954826150855	WITHOUT_CLASSIFICATION	4.517384914451751E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999828194203871	WITHOUT_CLASSIFICATION	1.7180579612946975E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999992966050831	WITHOUT_CLASSIFICATION	7.033949168918154E-6	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999929480534121	WITHOUT_CLASSIFICATION	7.05194658794621E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999801797043482	WITHOUT_CLASSIFICATION	1.982029565181386E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999745184384646	WITHOUT_CLASSIFICATION	2.5481561535341594E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763657393601	WITHOUT_CLASSIFICATION	2.36342606398528E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9998081344962627	WITHOUT_CLASSIFICATION	1.9186550373719662E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998867377070401	WITHOUT_CLASSIFICATION	1.1326229295987356E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998714019880572	WITHOUT_CLASSIFICATION	1.2859801194267418E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997933835994537	WITHOUT_CLASSIFICATION	2.066164005463489E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999138303111798	WITHOUT_CLASSIFICATION	8.616968882036412E-5	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998072275700094	WITHOUT_CLASSIFICATION	1.9277242999060222E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998867377070401	WITHOUT_CLASSIFICATION	1.1326229295987356E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995829764564315	WITHOUT_CLASSIFICATION	4.170235435684596E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9994650102758641	WITHOUT_CLASSIFICATION	5.349897241358955E-4	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.997369951201225	WITHOUT_CLASSIFICATION	0.0026300487987749688	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999468257346079	WITHOUT_CLASSIFICATION	5.317426539213175E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999534278610261	WITHOUT_CLASSIFICATION	4.6572138973790437E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999955994161027	WITHOUT_CLASSIFICATION	4.4005838973069836E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999805375852382	WITHOUT_CLASSIFICATION	1.946241476185954E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999641179913	WITHOUT_CLASSIFICATION	3.58820087034433E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999853406487843	WITHOUT_CLASSIFICATION	1.4659351215648922E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999941443618116	WITHOUT_CLASSIFICATION	5.855638188402513E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999845184039993	WITHOUT_CLASSIFICATION	1.5481596000756993E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999755432418068	WITHOUT_CLASSIFICATION	2.445675819323867E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999981847133284	WITHOUT_CLASSIFICATION	1.8152866715938716E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953779563985	WITHOUT_CLASSIFICATION	4.6220436014536955E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997332494895044	WITHOUT_CLASSIFICATION	2.667505104956149E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999970329078819	WITHOUT_CLASSIFICATION	2.9670921181579436E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999437503894344	WITHOUT_CLASSIFICATION	5.624961056564887E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948397454467	WITHOUT_CLASSIFICATION	5.160254553384211E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999980641909719	WITHOUT_CLASSIFICATION	1.9358090280968516E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998931987690852	WITHOUT_CLASSIFICATION	1.0680123091469562E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999988654902439	WITHOUT_CLASSIFICATION	1.134509756071106E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924219161446	WITHOUT_CLASSIFICATION	7.5780838555360794E-6	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920865787375	WITHOUT_CLASSIFICATION	7.91342126245246E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823221020712	WITHOUT_CLASSIFICATION	1.767789792885023E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975697727984	WITHOUT_CLASSIFICATION	2.4302272015924754E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819717660122	WITHOUT_CLASSIFICATION	1.802823398787157E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999878777922523	WITHOUT_CLASSIFICATION	1.2122207747630947E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999840364220064	WITHOUT_CLASSIFICATION	1.596357799356019E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845325631156	WITHOUT_CLASSIFICATION	1.546743688447911E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865257997179	WITHOUT_CLASSIFICATION	1.3474200282059322E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825904809311	WITHOUT_CLASSIFICATION	1.740951906901905E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897923570978	WITHOUT_CLASSIFICATION	1.0207642902169324E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817384055739	WITHOUT_CLASSIFICATION	1.8261594426099374E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818170416894	WITHOUT_CLASSIFICATION	1.8182958310621012E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999877997242395	WITHOUT_CLASSIFICATION	1.2200275760527021E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753491568752	WITHOUT_CLASSIFICATION	2.4650843124728165E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999906870382622	WITHOUT_CLASSIFICATION	9.312961737780153E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998022101039	WITHOUT_CLASSIFICATION	1.977898960899533E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998481114223	WITHOUT_CLASSIFICATION	1.518885778073939E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991982704380916	WITHOUT_CLASSIFICATION	8.017295619084317E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999533177108251	WITHOUT_CLASSIFICATION	4.668228917481774E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998683498843733	WITHOUT_CLASSIFICATION	1.3165011562672402E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995769848287797	WITHOUT_CLASSIFICATION	4.2301517122037105E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999957597438273	WITHOUT_CLASSIFICATION	4.240256172730708E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999957681317713	WITHOUT_CLASSIFICATION	4.231868228767724E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999850221002807	WITHOUT_CLASSIFICATION	1.4977899719229133E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997790808238883	WITHOUT_CLASSIFICATION	2.2091917611168906E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999957490308754	WITHOUT_CLASSIFICATION	4.250969124676382E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999988126272327	WITHOUT_CLASSIFICATION	1.187372767325152E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999892749563419	WITHOUT_CLASSIFICATION	1.0725043658101378E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999837008319257	WITHOUT_CLASSIFICATION	1.62991680742704E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999921687340869	WITHOUT_CLASSIFICATION	7.831265912964935E-6	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772767371433	WITHOUT_CLASSIFICATION	2.2723262856702258E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789245684784	WITHOUT_CLASSIFICATION	2.1075431521652535E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995780686288	WITHOUT_CLASSIFICATION	4.219313711957785E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774145981992	WITHOUT_CLASSIFICATION	2.2585401800857575E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998448518815359	WITHOUT_CLASSIFICATION	1.5514811846407508E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999676915371624	WITHOUT_CLASSIFICATION	3.2308462837652423E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999893340161986	WITHOUT_CLASSIFICATION	1.0665983801407978E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999894220558802	WITHOUT_CLASSIFICATION	1.0577944119846739E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845235729395	WITHOUT_CLASSIFICATION	1.547642706045904E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999783036838962	WITHOUT_CLASSIFICATION	2.1696316103761324E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999932892427179	WITHOUT_CLASSIFICATION	6.710757282188181E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999853923677262	WITHOUT_CLASSIFICATION	1.4607632273735978E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999972920313307	WITHOUT_CLASSIFICATION	2.707968669356636E-6	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999552140764566	WITHOUT_CLASSIFICATION	4.478592354349462E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999809273954222	WITHOUT_CLASSIFICATION	1.90726045778351E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999794882575286	WITHOUT_CLASSIFICATION	2.051174247147285E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999908329722849	WITHOUT_CLASSIFICATION	9.167027715179185E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991982704380916	WITHOUT_CLASSIFICATION	8.017295619084317E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999989323398768	WITHOUT_CLASSIFICATION	1.0676601231552798E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999967623682878	WITHOUT_CLASSIFICATION	3.2376317121283462E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999879519210247	WITHOUT_CLASSIFICATION	1.204807897521405E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998022101039	WITHOUT_CLASSIFICATION	1.977898960899533E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999769931403408	WITHOUT_CLASSIFICATION	2.3006859659118193E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999906776023655	WITHOUT_CLASSIFICATION	9.32239763455429E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9991169337367767	WITHOUT_CLASSIFICATION	8.830662632232723E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999838195490413	WITHOUT_CLASSIFICATION	1.6180450958743883E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999811975608872	WITHOUT_CLASSIFICATION	1.8802439112849496E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999696232801412	WITHOUT_CLASSIFICATION	3.0376719858778064E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999778443566206	WITHOUT_CLASSIFICATION	2.215564337941944E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999782806622813	WITHOUT_CLASSIFICATION	2.171933771866965E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999805063154715	WITHOUT_CLASSIFICATION	1.9493684528371098E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999892468203075	WITHOUT_CLASSIFICATION	1.075317969233607E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997308725797738	WITHOUT_CLASSIFICATION	2.6912742022618314E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999905892353116	WITHOUT_CLASSIFICATION	9.410764688439963E-6	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995769848287797	WITHOUT_CLASSIFICATION	4.2301517122037105E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999980222362684	WITHOUT_CLASSIFICATION	1.977763731555899E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999895333427443	WITHOUT_CLASSIFICATION	1.0466657255678977E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999193321609616	WITHOUT_CLASSIFICATION	8.066783903828884E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999952347988975	WITHOUT_CLASSIFICATION	4.765201102495536E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999234855127462	WITHOUT_CLASSIFICATION	7.651448725384021E-5	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999728161114203	WITHOUT_CLASSIFICATION	2.7183888579587064E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999937461677353	WITHOUT_CLASSIFICATION	6.2538322647421E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999976384487367	WITHOUT_CLASSIFICATION	2.361551263308248E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999676060947207	WITHOUT_CLASSIFICATION	3.239390527930906E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9997639580030315	WITHOUT_CLASSIFICATION	2.3604199696838942E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999588817601406	WITHOUT_CLASSIFICATION	4.111823985942511E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998520037433238	WITHOUT_CLASSIFICATION	1.4799625667620938E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998022101039	WITHOUT_CLASSIFICATION	1.977898960899533E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991982704380916	WITHOUT_CLASSIFICATION	8.017295619084317E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999740730574547	WITHOUT_CLASSIFICATION	2.592694254544148E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999979122971572	WITHOUT_CLASSIFICATION	2.087702842816966E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987721118102648	WITHOUT_CLASSIFICATION	0.0012278881897351955	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991982704380916	WITHOUT_CLASSIFICATION	8.017295619084317E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999688067223222	WITHOUT_CLASSIFICATION	3.119327767778244E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999952347988975	WITHOUT_CLASSIFICATION	4.765201102495536E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998460029960903	WITHOUT_CLASSIFICATION	1.5399700390964196E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9947936078918441	WITHOUT_CLASSIFICATION	0.005206392108155885	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999906845116778	WITHOUT_CLASSIFICATION	9.315488322257964E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999696232801412	WITHOUT_CLASSIFICATION	3.0376719858778064E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999778443566206	WITHOUT_CLASSIFICATION	2.215564337941944E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999782806622813	WITHOUT_CLASSIFICATION	2.171933771866965E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999896741268861	WITHOUT_CLASSIFICATION	1.0325873113904866E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999793004725611	WITHOUT_CLASSIFICATION	2.0699527438843407E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999563591602022	WITHOUT_CLASSIFICATION	4.364083979780519E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999917699122022	WITHOUT_CLASSIFICATION	8.230087797835495E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999788774296109	WITHOUT_CLASSIFICATION	2.1122570389073283E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991982704380916	WITHOUT_CLASSIFICATION	8.017295619084317E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999805063154715	WITHOUT_CLASSIFICATION	1.9493684528371098E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999892468203075	WITHOUT_CLASSIFICATION	1.075317969233607E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971980253778	WITHOUT_CLASSIFICATION	2.801974622169251E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975183699218	WITHOUT_CLASSIFICATION	2.481630078294099E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999825060818216	WITHOUT_CLASSIFICATION	1.7493918178399296E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999899450809859	WITHOUT_CLASSIFICATION	1.0054919013953753E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999831194655497	WITHOUT_CLASSIFICATION	1.6880534450158416E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999567007572963	WITHOUT_CLASSIFICATION	4.329924270380306E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999007695458003	WITHOUT_CLASSIFICATION	9.923045419965643E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999940329899245	WITHOUT_CLASSIFICATION	5.96701007550432E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999854623235823	WITHOUT_CLASSIFICATION	1.453767641776145E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999845917266378	WITHOUT_CLASSIFICATION	1.5408273362164467E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819717660122	WITHOUT_CLASSIFICATION	1.802823398787157E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865257997179	WITHOUT_CLASSIFICATION	1.3474200282059322E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999845917266378	WITHOUT_CLASSIFICATION	1.5408273362164467E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999929909380927	WITHOUT_CLASSIFICATION	7.009061907273346E-6	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999810439396564	WITHOUT_CLASSIFICATION	1.8956060343662843E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821412014746	WITHOUT_CLASSIFICATION	1.7858798525475392E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999931998909464	WITHOUT_CLASSIFICATION	6.800109053639536E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999533440572111	WITHOUT_CLASSIFICATION	4.6655942788853354E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825904809311	WITHOUT_CLASSIFICATION	1.740951906901905E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816796211662	WITHOUT_CLASSIFICATION	1.8320378833726803E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999972920313307	WITHOUT_CLASSIFICATION	2.707968669356636E-6	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999811104720843	WITHOUT_CLASSIFICATION	1.8889527915690155E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999991789943052	WITHOUT_CLASSIFICATION	8.210056947901706E-6	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999971993175413	WITHOUT_CLASSIFICATION	2.80068245872245E-6	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9996949943982164	WITHOUT_CLASSIFICATION	3.0500560178353816E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999986008269842	WITHOUT_CLASSIFICATION	1.3991730157313741E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9995061192940956	WITHOUT_CLASSIFICATION	4.938807059043579E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999945883386132	WITHOUT_CLASSIFICATION	5.411661386806115E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999641179913	WITHOUT_CLASSIFICATION	3.58820087034433E-7	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999862364866737	WITHOUT_CLASSIFICATION	1.376351332628217E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999902479926356	WITHOUT_CLASSIFICATION	9.752007364435217E-6	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999991678928163	WITHOUT_CLASSIFICATION	8.321071836981539E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999825047982994	WITHOUT_CLASSIFICATION	1.7495201700622764E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999966056502575	WITHOUT_CLASSIFICATION	3.3943497426305987E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999761425479456	WITHOUT_CLASSIFICATION	2.3857452054381218E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871511181	WITHOUT_CLASSIFICATION	1.2848881900004629E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872986911106	WITHOUT_CLASSIFICATION	1.2701308889419716E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999743835365821	WITHOUT_CLASSIFICATION	2.561646341799703E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999731334111215	WITHOUT_CLASSIFICATION	2.6866588878584936E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99997218421974	WITHOUT_CLASSIFICATION	2.78157802599342E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999721361286363	WITHOUT_CLASSIFICATION	2.7863871363625064E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999893592996946	WITHOUT_CLASSIFICATION	1.064070030534876E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999932257291623	WITHOUT_CLASSIFICATION	6.774270837714153E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999703569166607	WITHOUT_CLASSIFICATION	2.964308333922111E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999684403734957	WITHOUT_CLASSIFICATION	3.155962650436489E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999893592996946	WITHOUT_CLASSIFICATION	1.064070030534876E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999650910367818	WITHOUT_CLASSIFICATION	3.490896321828057E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999717362311422	WITHOUT_CLASSIFICATION	2.8263768857768674E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856011099826	WITHOUT_CLASSIFICATION	1.4398890017318295E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999961694487344	WITHOUT_CLASSIFICATION	3.830551265665603E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999992594889965	WITHOUT_CLASSIFICATION	7.405110033874172E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999821605845939	WITHOUT_CLASSIFICATION	1.7839415406053448E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999971592248916	WITHOUT_CLASSIFICATION	2.8407751082949397E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999863908233084	WITHOUT_CLASSIFICATION	1.360917669159821E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999863908233084	WITHOUT_CLASSIFICATION	1.360917669159821E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984409084339	WITHOUT_CLASSIFICATION	1.559091566125144E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999998089538705	WITHOUT_CLASSIFICATION	1.910461295046727E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999801308618009	WITHOUT_CLASSIFICATION	1.98691381991819E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999973879830041	WITHOUT_CLASSIFICATION	2.6120169960110842E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999993637141464	WITHOUT_CLASSIFICATION	6.362858534564137E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999701938472808	WITHOUT_CLASSIFICATION	2.9806152719177987E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999792572675975	WITHOUT_CLASSIFICATION	2.0742732402518738E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999872312692284	WITHOUT_CLASSIFICATION	1.276873077151374E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998951664574551	WITHOUT_CLASSIFICATION	1.0483354254483267E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999989328144081	WITHOUT_CLASSIFICATION	1.0671855919227379E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999597395548692	WITHOUT_CLASSIFICATION	4.0260445130836756E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999639921697105	WITHOUT_CLASSIFICATION	3.600783028936434E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998940753019886	WITHOUT_CLASSIFICATION	1.059246980113893E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999924623600609	WITHOUT_CLASSIFICATION	7.537639939082696E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999595561841371	WITHOUT_CLASSIFICATION	4.0443815862880034E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996914033123804	WITHOUT_CLASSIFICATION	3.0859668761961957E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999954031423557	WITHOUT_CLASSIFICATION	4.596857644279594E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9995686270408712	WITHOUT_CLASSIFICATION	4.313729591287649E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999882794044971	WITHOUT_CLASSIFICATION	1.172059550286106E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.99996260399877	WITHOUT_CLASSIFICATION	3.739600123003597E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999942438765363	WITHOUT_CLASSIFICATION	5.756123463651505E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999957502596986	WITHOUT_CLASSIFICATION	4.249740301398541E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999929117610797	WITHOUT_CLASSIFICATION	7.088238920205812E-6	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999951834045766	WITHOUT_CLASSIFICATION	4.816595423368183E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999977872061735	WITHOUT_CLASSIFICATION	2.2127938264896838E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999934876571823	WITHOUT_CLASSIFICATION	6.512342817672168E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999991930783132	WITHOUT_CLASSIFICATION	8.069216869198708E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999984330130501	WITHOUT_CLASSIFICATION	1.566986949939457E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995641547557615	WITHOUT_CLASSIFICATION	4.358452442383633E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999995739413755	WITHOUT_CLASSIFICATION	4.260586245048934E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999761020025669	WITHOUT_CLASSIFICATION	2.3897997433147962E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999835510205549	WITHOUT_CLASSIFICATION	1.644897944509753E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999372664879744	WITHOUT_CLASSIFICATION	6.273351202563334E-5	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.999947006392472	WITHOUT_CLASSIFICATION	5.2993607527866135E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997663482884198	WITHOUT_CLASSIFICATION	2.3365171158011005E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999957994761298	WITHOUT_CLASSIFICATION	4.200523870171141E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998038983144364	WITHOUT_CLASSIFICATION	1.96101685563537E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998186103244174	WITHOUT_CLASSIFICATION	1.813896755825759E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999870929573478	WITHOUT_CLASSIFICATION	1.2907042652300849E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999165932712727	WITHOUT_CLASSIFICATION	8.340672872727763E-5	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999382856178027	WITHOUT_CLASSIFICATION	6.171438219718927E-5	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995769848287797	WITHOUT_CLASSIFICATION	4.2301517122037105E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995769848287797	WITHOUT_CLASSIFICATION	4.2301517122037105E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999711155017428	WITHOUT_CLASSIFICATION	2.888449825718992E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999942668227011	WITHOUT_CLASSIFICATION	5.733177298919001E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995669017383266	WITHOUT_CLASSIFICATION	4.3309826167338617E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999948478500457	WITHOUT_CLASSIFICATION	5.1521499542755245E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999941075309646	WITHOUT_CLASSIFICATION	5.892469035440044E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9996094661778973	WITHOUT_CLASSIFICATION	3.9053382210277386E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997588286213328	WITHOUT_CLASSIFICATION	2.411713786671492E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998213418482486	WITHOUT_CLASSIFICATION	1.7865815175130645E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999782457806065	WITHOUT_CLASSIFICATION	2.1754219393606556E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999304762322578	WITHOUT_CLASSIFICATION	6.952376774212239E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999450461804338	WITHOUT_CLASSIFICATION	5.495381956619071E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998933408340405	WITHOUT_CLASSIFICATION	1.0665916595960322E-4	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997407344445466	WITHOUT_CLASSIFICATION	2.592655554534856E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996647458442922	WITHOUT_CLASSIFICATION	3.352541557077947E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999804663777809	WITHOUT_CLASSIFICATION	1.9533622219031298E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999999346599913	WITHOUT_CLASSIFICATION	6.534000870791426E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999338641665	WITHOUT_CLASSIFICATION	6.61358334730242E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999993314208021	WITHOUT_CLASSIFICATION	6.685791979822411E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999530234588796	WITHOUT_CLASSIFICATION	4.69765411204641E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999040136179554	WITHOUT_CLASSIFICATION	9.598638204446152E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999993314208021	WITHOUT_CLASSIFICATION	6.685791979822411E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.99997976861737	WITHOUT_CLASSIFICATION	2.0231382629872007E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999889726860021	WITHOUT_CLASSIFICATION	1.1027313997818918E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999460061923819	WITHOUT_CLASSIFICATION	5.39938076180569E-5	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999389664760543	WITHOUT_CLASSIFICATION	6.103352394579729E-5	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999957993462731	WITHOUT_CLASSIFICATION	4.200653726796968E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999921342137867	WITHOUT_CLASSIFICATION	7.8657862132945E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997315541358315	WITHOUT_CLASSIFICATION	2.6844586416851086E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999806419525334	WITHOUT_CLASSIFICATION	1.935804746660391E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999974362703863	WITHOUT_CLASSIFICATION	2.563729613843603E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999754859952286	WITHOUT_CLASSIFICATION	2.4514004771486862E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999952492289647	WITHOUT_CLASSIFICATION	4.750771035385784E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999894082056429	WITHOUT_CLASSIFICATION	1.0591794357105248E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999985140647112	WITHOUT_CLASSIFICATION	1.4859352888544357E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999958758016607	WITHOUT_CLASSIFICATION	4.124198339189892E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999895256466581	WITHOUT_CLASSIFICATION	1.0474353341832996E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.987970560102228	WITHOUT_CLASSIFICATION	0.01202943989777207	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999942125206737	WITHOUT_CLASSIFICATION	5.787479326320778E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999545726239734	WITHOUT_CLASSIFICATION	4.542737602654165E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9981169745088032	WITHOUT_CLASSIFICATION	0.0018830254911968369	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9998327137925827	WITHOUT_CLASSIFICATION	1.67286207417224E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997312131116	WITHOUT_CLASSIFICATION	2.687868884369556E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999896255423588	WITHOUT_CLASSIFICATION	1.0374457641212658E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999220024989087	WITHOUT_CLASSIFICATION	7.799750109126789E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999999258824611	WITHOUT_CLASSIFICATION	7.411753889285954E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997186832479	WITHOUT_CLASSIFICATION	2.813167520956233E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998507517959742	WITHOUT_CLASSIFICATION	1.492482040257263E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9998045203340312	WITHOUT_CLASSIFICATION	1.9547966596877755E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.99999181251088	WITHOUT_CLASSIFICATION	8.187489120062513E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999761425479456	WITHOUT_CLASSIFICATION	2.3857452054381218E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994705541908152	WITHOUT_CLASSIFICATION	5.294458091847928E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999681132993076	WITHOUT_CLASSIFICATION	3.188670069240712E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999976815247632	WITHOUT_CLASSIFICATION	2.31847523680435E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9975048467783322	WITHOUT_CLASSIFICATION	0.0024951532216677254	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999410351762191	WITHOUT_CLASSIFICATION	5.896482378092698E-5	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999276888111661	WITHOUT_CLASSIFICATION	7.231118883380332E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999881230869346	WITHOUT_CLASSIFICATION	1.187691306535941E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999980336073963	WITHOUT_CLASSIFICATION	1.9663926036862495E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999964417660459	WITHOUT_CLASSIFICATION	3.558233954133896E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999996442218666	WITHOUT_CLASSIFICATION	3.557781334005691E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999902461232053	WITHOUT_CLASSIFICATION	9.75387679475739E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999927207482524	WITHOUT_CLASSIFICATION	7.279251747584774E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9901470090945838	WITHOUT_CLASSIFICATION	0.009852990905416324	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999748252296748	WITHOUT_CLASSIFICATION	2.517477032521866E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998984015316884	WITHOUT_CLASSIFICATION	1.0159846831158057E-4	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999938747906215	WITHOUT_CLASSIFICATION	6.12520937850704E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999517110577997	WITHOUT_CLASSIFICATION	4.828894220032927E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999987701415196	WITHOUT_CLASSIFICATION	1.2298584804030313E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999293443977619	WITHOUT_CLASSIFICATION	7.065560223814663E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999497780103948	WITHOUT_CLASSIFICATION	5.0221989605360886E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999875024693677	WITHOUT_CLASSIFICATION	1.2497530632277475E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999972515000453	WITHOUT_CLASSIFICATION	2.7484999546760387E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999865479106715	WITHOUT_CLASSIFICATION	1.3452089328432927E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999518638121812	WITHOUT_CLASSIFICATION	4.813618781879833E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999980365193615	WITHOUT_CLASSIFICATION	1.9634806384372907E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999960695463154	WITHOUT_CLASSIFICATION	3.930453684666302E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999997306656069	WITHOUT_CLASSIFICATION	2.6933439309041065E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999623863010543	WITHOUT_CLASSIFICATION	3.761369894579595E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999212570097874	WITHOUT_CLASSIFICATION	7.874299021265284E-5	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774909199525	WITHOUT_CLASSIFICATION	2.2509080047514025E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689375298425	WITHOUT_CLASSIFICATION	3.1062470157529637E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700834774964	WITHOUT_CLASSIFICATION	2.9916522503547075E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999980641031815	WITHOUT_CLASSIFICATION	1.9358968184937157E-6	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999911940202839	WITHOUT_CLASSIFICATION	8.805979716068898E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999971973461919	WITHOUT_CLASSIFICATION	2.802653808090605E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999996167904062	WITHOUT_CLASSIFICATION	3.8320959387937474E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999959096647703	WITHOUT_CLASSIFICATION	4.09033522966942E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773763100599	WITHOUT_CLASSIFICATION	2.2623689940134626E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999959096647703	WITHOUT_CLASSIFICATION	4.09033522966942E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999227869627827	WITHOUT_CLASSIFICATION	7.721303721734853E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999951236289213	WITHOUT_CLASSIFICATION	4.876371078752848E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.99999734484795	WITHOUT_CLASSIFICATION	2.6551520499108925E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999316915887175	WITHOUT_CLASSIFICATION	6.830841128250393E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999688662435664	WITHOUT_CLASSIFICATION	3.1133756433530635E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.992303118156018	WITHOUT_CLASSIFICATION	0.0076968818439819495	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999978692263988	WITHOUT_CLASSIFICATION	2.1307736011049608E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999948356078043	WITHOUT_CLASSIFICATION	5.164392195573166E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999997880473526	WITHOUT_CLASSIFICATION	2.1195264740969487E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998646518336526	WITHOUT_CLASSIFICATION	1.3534816634740504E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999992132164612	WITHOUT_CLASSIFICATION	7.867835388049693E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999963265718466	WITHOUT_CLASSIFICATION	3.6734281533879727E-6	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.998899730070276	WITHOUT_CLASSIFICATION	0.0011002699297239554	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9994903007906405	WITHOUT_CLASSIFICATION	5.096992093593928E-4	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999562902926381	WITHOUT_CLASSIFICATION	4.3709707361955066E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999986125063968	WITHOUT_CLASSIFICATION	1.3874936032315276E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999536574379422	WITHOUT_CLASSIFICATION	4.634256205782171E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999536574379422	WITHOUT_CLASSIFICATION	4.634256205782171E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999296425686651	WITHOUT_CLASSIFICATION	7.035743133484312E-5	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999991446317084	WITHOUT_CLASSIFICATION	8.553682915890578E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999899851379214	WITHOUT_CLASSIFICATION	1.0014862078696516E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999922128515423	WITHOUT_CLASSIFICATION	7.787148457696496E-6	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999943734272321	WITHOUT_CLASSIFICATION	5.626572767964568E-6	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999903459635997	WITHOUT_CLASSIFICATION	9.654036400291577E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9994685536831752	WITHOUT_CLASSIFICATION	5.314463168248556E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998920478474684	WITHOUT_CLASSIFICATION	1.0795215253159517E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999958261193731	WITHOUT_CLASSIFICATION	4.173880626825378E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999987862433153	WITHOUT_CLASSIFICATION	1.2137566846993532E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999765507680815	WITHOUT_CLASSIFICATION	2.34492319184781E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999957391307932	WITHOUT_CLASSIFICATION	4.260869206719833E-6	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999992984363901	WITHOUT_CLASSIFICATION	7.015636099006967E-6	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999976156886979	WITHOUT_CLASSIFICATION	2.3843113020933997E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999895066410381	WITHOUT_CLASSIFICATION	1.0493358961859626E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999898870446403	WITHOUT_CLASSIFICATION	1.011295535972634E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999787524218614	WITHOUT_CLASSIFICATION	2.1247578138608278E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998119464734024	WITHOUT_CLASSIFICATION	1.880535265975431E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999590941850439	WITHOUT_CLASSIFICATION	4.090581495609221E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999994104517065	WITHOUT_CLASSIFICATION	5.89548293485685E-6	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999847858221533	WITHOUT_CLASSIFICATION	1.5214177846760602E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999962128445894	WITHOUT_CLASSIFICATION	3.7871554106086556E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999876808610292	WITHOUT_CLASSIFICATION	1.2319138970856009E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999885157971523	WITHOUT_CLASSIFICATION	1.1484202847817062E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9998540556272653	WITHOUT_CLASSIFICATION	1.4594437273470018E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999971000892882	WITHOUT_CLASSIFICATION	2.899910711789721E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9995646120805761	WITHOUT_CLASSIFICATION	4.3538791942383917E-4	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994857718403108	WITHOUT_CLASSIFICATION	5.142281596891536E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999548317890211	WITHOUT_CLASSIFICATION	4.5168210978813635E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999814721751653	WITHOUT_CLASSIFICATION	1.8527824834735067E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999595673077261	WITHOUT_CLASSIFICATION	4.043269227389159E-4	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999839845748785	WITHOUT_CLASSIFICATION	1.601542512149564E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9923302572840292	WITHOUT_CLASSIFICATION	0.007669742715970742	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999380710494115	WITHOUT_CLASSIFICATION	6.192895058861902E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998650991163154	WITHOUT_CLASSIFICATION	1.3490088368471947E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999943395205491	WITHOUT_CLASSIFICATION	5.660479450901167E-6	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999775042862122	WITHOUT_CLASSIFICATION	2.249571378767364E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999800606513306	WITHOUT_CLASSIFICATION	1.9939348669369845E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999945832282993	WITHOUT_CLASSIFICATION	5.416771700804618E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9997174669111611	WITHOUT_CLASSIFICATION	2.825330888388421E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999970541449178	WITHOUT_CLASSIFICATION	2.945855082213279E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757393739784	WITHOUT_CLASSIFICATION	2.426062602157356E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999533376029855	WITHOUT_CLASSIFICATION	4.666239701449861E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999214059110108	WITHOUT_CLASSIFICATION	7.85940889892494E-5	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999907584923096	WITHOUT_CLASSIFICATION	9.241507690409207E-6	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999989210030794	WITHOUT_CLASSIFICATION	1.0789969205599695E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999901435556027	WITHOUT_CLASSIFICATION	9.85644439731435E-6	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999989899571913	WITHOUT_CLASSIFICATION	1.0100428086998978E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999901366023881	WITHOUT_CLASSIFICATION	9.863397611968653E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999885209469263	WITHOUT_CLASSIFICATION	1.1479053073728084E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757393739784	WITHOUT_CLASSIFICATION	2.426062602157356E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998432659277262	WITHOUT_CLASSIFICATION	1.5673407227382628E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999783278093923	WITHOUT_CLASSIFICATION	2.167219060769977E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999708862986186	WITHOUT_CLASSIFICATION	2.9113701381470824E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999816728597556	WITHOUT_CLASSIFICATION	1.832714024438411E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999688067223222	WITHOUT_CLASSIFICATION	3.119327767778244E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999688067223222	WITHOUT_CLASSIFICATION	3.119327767778244E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9990783138869246	WITHOUT_CLASSIFICATION	9.216861130753243E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999722229102997	WITHOUT_CLASSIFICATION	2.7777089700185426E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999548553776475	WITHOUT_CLASSIFICATION	4.514462235247788E-5	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999788687374507	WITHOUT_CLASSIFICATION	2.113126254925528E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999778502081393	WITHOUT_CLASSIFICATION	2.2149791860666025E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999972991262965	WITHOUT_CLASSIFICATION	2.7008737034853294E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9996113540518105	WITHOUT_CLASSIFICATION	3.886459481896194E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999426145802965	WITHOUT_CLASSIFICATION	5.738541970341159E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998494858298206	WITHOUT_CLASSIFICATION	1.5051417017930205E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999950007747831	WITHOUT_CLASSIFICATION	4.9992252168939875E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999945802450217	WITHOUT_CLASSIFICATION	5.419754978299709E-5	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998334353084322	WITHOUT_CLASSIFICATION	1.665646915679079E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.99999825586421	WITHOUT_CLASSIFICATION	1.7441357900704439E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999344401290268	WITHOUT_CLASSIFICATION	6.555987097323502E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999663301685867	WITHOUT_CLASSIFICATION	3.3669831413293583E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998000338467	WITHOUT_CLASSIFICATION	1.9996615325577063E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999088769486895	WITHOUT_CLASSIFICATION	9.112305131049494E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998350024697293	WITHOUT_CLASSIFICATION	1.6499753027057369E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999995791606038	WITHOUT_CLASSIFICATION	4.208393961301001E-7	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997702607163462	WITHOUT_CLASSIFICATION	2.2973928365378434E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999963278537604	WITHOUT_CLASSIFICATION	3.6721462396930094E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999993803578605	WITHOUT_CLASSIFICATION	6.196421394527048E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999995426680194	WITHOUT_CLASSIFICATION	4.5733198051688345E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9995936563665423	WITHOUT_CLASSIFICATION	4.0634363345764217E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999841205480042	WITHOUT_CLASSIFICATION	1.587945199567656E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999634354286345	WITHOUT_CLASSIFICATION	3.6564571365383674E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999987531707968	WITHOUT_CLASSIFICATION	1.246829203207401E-6	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999925906420039	WITHOUT_CLASSIFICATION	7.4093579962034855E-6	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998293263733427	WITHOUT_CLASSIFICATION	1.7067362665742664E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999824745902839	WITHOUT_CLASSIFICATION	1.752540971603628E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999910246385679	WITHOUT_CLASSIFICATION	8.975361432070338E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999995641393204	WITHOUT_CLASSIFICATION	4.358606796074989E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9997556449111928	WITHOUT_CLASSIFICATION	2.443550888071077E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999895973604245	WITHOUT_CLASSIFICATION	1.0402639575549094E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997478648967371	WITHOUT_CLASSIFICATION	2.521351032630059E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998186591893178	WITHOUT_CLASSIFICATION	1.8134081068224664E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999765507680815	WITHOUT_CLASSIFICATION	2.34492319184781E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999790307604089	WITHOUT_CLASSIFICATION	2.09692395911017E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995061192940956	WITHOUT_CLASSIFICATION	4.938807059043579E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999984380765758	WITHOUT_CLASSIFICATION	1.5619234242042986E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999982786316312	WITHOUT_CLASSIFICATION	1.7213683688020622E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9997440300887266	WITHOUT_CLASSIFICATION	2.559699112734208E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999778257888174	WITHOUT_CLASSIFICATION	2.2174211182553393E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9993701004821249	WITHOUT_CLASSIFICATION	6.298995178751077E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999787976943354	WITHOUT_CLASSIFICATION	2.12023056646224E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999651808305876	WITHOUT_CLASSIFICATION	3.4819169412434723E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999897257736109	WITHOUT_CLASSIFICATION	1.027422638907146E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999967346557437	WITHOUT_CLASSIFICATION	3.2653442563303504E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999965365658335	WITHOUT_CLASSIFICATION	3.4634341665075153E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999974508001196	WITHOUT_CLASSIFICATION	2.549199880324799E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999700893126874	WITHOUT_CLASSIFICATION	2.991068731253373E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999789408611208	WITHOUT_CLASSIFICATION	2.1059138879095547E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.99998368616087	WITHOUT_CLASSIFICATION	1.631383913001026E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999969092117151	WITHOUT_CLASSIFICATION	3.0907882848174007E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997308678924477	WITHOUT_CLASSIFICATION	2.6913210755233775E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999941987258685	WITHOUT_CLASSIFICATION	5.80127413147789E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999796184997395	WITHOUT_CLASSIFICATION	2.0381500260504185E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999254508468675	WITHOUT_CLASSIFICATION	7.454915313250388E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999719696625498	WITHOUT_CLASSIFICATION	2.803033745020137E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999961643916666	WITHOUT_CLASSIFICATION	3.835608333402685E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999887544194382	WITHOUT_CLASSIFICATION	1.1245580561702294E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982100104337	WITHOUT_CLASSIFICATION	1.7899895663117582E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799719106973	WITHOUT_CLASSIFICATION	2.002808930269943E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999733650570739	WITHOUT_CLASSIFICATION	2.6634942926159844E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999933638822642	WITHOUT_CLASSIFICATION	6.636117735715251E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999935390135378	WITHOUT_CLASSIFICATION	6.460986462245002E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998228019025	WITHOUT_CLASSIFICATION	1.7719809760191215E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999960583025164	WITHOUT_CLASSIFICATION	3.941697483680874E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999933522400108	WITHOUT_CLASSIFICATION	6.647759989113411E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999873614843229	WITHOUT_CLASSIFICATION	1.2638515677148925E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999980959114676	WITHOUT_CLASSIFICATION	1.9040885324201421E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999859167181028	WITHOUT_CLASSIFICATION	1.4083281897291214E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999955562393806	WITHOUT_CLASSIFICATION	4.443760619347694E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999962544629699	WITHOUT_CLASSIFICATION	3.7455370301019936E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999735004263467	WITHOUT_CLASSIFICATION	2.649957365328913E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999979730173317	WITHOUT_CLASSIFICATION	2.026982668218207E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999943140581037	WITHOUT_CLASSIFICATION	5.685941896247507E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999719555098258	WITHOUT_CLASSIFICATION	2.804449017434593E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999923652418593	WITHOUT_CLASSIFICATION	7.63475814069443E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999722514657287	WITHOUT_CLASSIFICATION	2.7748534271284548E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999943815931686	WITHOUT_CLASSIFICATION	5.618406831546583E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999997280518761	WITHOUT_CLASSIFICATION	2.719481239031663E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999372663096863	WITHOUT_CLASSIFICATION	6.27336903137212E-5	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999520872525989	WITHOUT_CLASSIFICATION	4.791274740120775E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999844803395891	WITHOUT_CLASSIFICATION	1.5519660410972756E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999882042516077	WITHOUT_CLASSIFICATION	1.1795748392285179E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999988098760819	WITHOUT_CLASSIFICATION	1.1901239180550902E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999889107654353	WITHOUT_CLASSIFICATION	1.1089234564713695E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9996076518823221	WITHOUT_CLASSIFICATION	3.9234811767787893E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999142278543993	WITHOUT_CLASSIFICATION	8.577214560064114E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982100104337	WITHOUT_CLASSIFICATION	1.7899895663117582E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999794397553956	WITHOUT_CLASSIFICATION	2.0560244604428292E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999994724266001	WITHOUT_CLASSIFICATION	5.27573399875963E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999667875533019	WITHOUT_CLASSIFICATION	3.321244669795478E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999829392460959	WITHOUT_CLASSIFICATION	1.7060753904120063E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999875745083957	WITHOUT_CLASSIFICATION	1.242549160428992E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999717217412619	WITHOUT_CLASSIFICATION	2.8278258738166623E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790149928115	WITHOUT_CLASSIFICATION	2.098500718857193E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999986732699708	WITHOUT_CLASSIFICATION	1.3267300291911657E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999989780210532	WITHOUT_CLASSIFICATION	1.021978946825045E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999494973717752	WITHOUT_CLASSIFICATION	5.050262822483985E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999976000077183	WITHOUT_CLASSIFICATION	2.3999922816251164E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997311522427346	WITHOUT_CLASSIFICATION	2.688477572655118E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999938698630303	WITHOUT_CLASSIFICATION	6.130136969693291E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999813572729628	WITHOUT_CLASSIFICATION	1.8642727037234207E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999227869627827	WITHOUT_CLASSIFICATION	7.721303721734853E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998269980372	WITHOUT_CLASSIFICATION	1.7300196269304648E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999996424842071	WITHOUT_CLASSIFICATION	3.5751579289659906E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999954298310362	WITHOUT_CLASSIFICATION	4.5701689638167634E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999974629036154	WITHOUT_CLASSIFICATION	2.5370963845676855E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996262204104	WITHOUT_CLASSIFICATION	3.737795896798523E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998574230654036	WITHOUT_CLASSIFICATION	1.4257693459634877E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998574230654036	WITHOUT_CLASSIFICATION	1.4257693459634877E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999902250788877	WITHOUT_CLASSIFICATION	9.774921112224536E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999970998404724	WITHOUT_CLASSIFICATION	2.9001595275924682E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999889439168522	WITHOUT_CLASSIFICATION	1.1056083147805646E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999846011612139	WITHOUT_CLASSIFICATION	1.539883878611969E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999775716654212	WITHOUT_CLASSIFICATION	2.242833457870953E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999964728120664	WITHOUT_CLASSIFICATION	3.527187933583583E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999853464619582	WITHOUT_CLASSIFICATION	1.4653538041696164E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999691474258038	WITHOUT_CLASSIFICATION	3.085257419628514E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999691474258038	WITHOUT_CLASSIFICATION	3.085257419628514E-5	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995577516732203	WITHOUT_CLASSIFICATION	4.422483267796865E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999920055941722	WITHOUT_CLASSIFICATION	7.994405827777116E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999555740247387	WITHOUT_CLASSIFICATION	4.442597526126518E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999943164954672	WITHOUT_CLASSIFICATION	5.683504532857768E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999943164954672	WITHOUT_CLASSIFICATION	5.683504532857768E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999943164954672	WITHOUT_CLASSIFICATION	5.683504532857768E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999710114574414	WITHOUT_CLASSIFICATION	2.8988542558691406E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999810842975777	WITHOUT_CLASSIFICATION	1.8915702422279925E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999880019322789	WITHOUT_CLASSIFICATION	1.1998067720977595E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999564726114165	WITHOUT_CLASSIFICATION	4.3527388583404445E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999995912542665	WITHOUT_CLASSIFICATION	4.087457335058404E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999995243301368	WITHOUT_CLASSIFICATION	4.7566986317021074E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999975064116279	WITHOUT_CLASSIFICATION	2.4935883720998473E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9994982547326654	WITHOUT_CLASSIFICATION	5.017452673346247E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999970323416998	WITHOUT_CLASSIFICATION	2.967658300277485E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999958516747344	WITHOUT_CLASSIFICATION	4.148325265693491E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999908298183388	WITHOUT_CLASSIFICATION	9.170181661131249E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998867507088226	WITHOUT_CLASSIFICATION	1.1324929117733429E-4	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999924635747146	WITHOUT_CLASSIFICATION	7.536425285492282E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999998597175974	WITHOUT_CLASSIFICATION	1.4028240260739454E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999924450710806	WITHOUT_CLASSIFICATION	7.554928919310366E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999956898777065	WITHOUT_CLASSIFICATION	4.310122293558937E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999962002798428	WITHOUT_CLASSIFICATION	3.7997201572421205E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998574230654036	WITHOUT_CLASSIFICATION	1.4257693459634877E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999954055607225	WITHOUT_CLASSIFICATION	4.594439277486008E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999926895227017	WITHOUT_CLASSIFICATION	7.310477298253274E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999821601113705	WITHOUT_CLASSIFICATION	1.7839888629485564E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999859834397858	WITHOUT_CLASSIFICATION	1.4016560214202814E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999940140470106	WITHOUT_CLASSIFICATION	5.985952989353961E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999977760941927	WITHOUT_CLASSIFICATION	2.223905807348114E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999662546201028	WITHOUT_CLASSIFICATION	3.3745379897198865E-4	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999971160634311	WITHOUT_CLASSIFICATION	2.8839365689237353E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998613813061842	WITHOUT_CLASSIFICATION	1.3861869381570855E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999836502873264	WITHOUT_CLASSIFICATION	1.634971267357917E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998756121177877	WITHOUT_CLASSIFICATION	1.2438788221224344E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999868672992279	WITHOUT_CLASSIFICATION	1.3132700772087527E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999777793411616	WITHOUT_CLASSIFICATION	2.2220658838377745E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999695555373233	WITHOUT_CLASSIFICATION	3.044446267681685E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999862368413122	WITHOUT_CLASSIFICATION	1.3763158687734394E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999994865809322	WITHOUT_CLASSIFICATION	5.134190677068663E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999981596838216	WITHOUT_CLASSIFICATION	1.8403161784384874E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999983789313321	WITHOUT_CLASSIFICATION	1.621068667762002E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999991928411124	WITHOUT_CLASSIFICATION	8.071588875900189E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999991928411124	WITHOUT_CLASSIFICATION	8.071588875900189E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999886195693991	WITHOUT_CLASSIFICATION	1.138043060083794E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999968300507497	WITHOUT_CLASSIFICATION	3.1699492503472357E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999889377962974	WITHOUT_CLASSIFICATION	1.1062203702676575E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999862358123682	WITHOUT_CLASSIFICATION	1.376418763188709E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999936377948686	WITHOUT_CLASSIFICATION	6.362205131396753E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999801959071475	WITHOUT_CLASSIFICATION	1.9804092852534478E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999898462237509	WITHOUT_CLASSIFICATION	1.0153776249076688E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998934312967422	WITHOUT_CLASSIFICATION	1.0656870325782135E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999865099009028	WITHOUT_CLASSIFICATION	1.349009909731689E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999916165947795	WITHOUT_CLASSIFICATION	8.38340522050195E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999940768357067	WITHOUT_CLASSIFICATION	5.923164293305342E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997336113858776	WITHOUT_CLASSIFICATION	2.663886141224525E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999999450920324	WITHOUT_CLASSIFICATION	5.490796759124449E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999961039168427	WITHOUT_CLASSIFICATION	3.8960831573324906E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999994423180973	WITHOUT_CLASSIFICATION	5.576819026613512E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999074928406994	WITHOUT_CLASSIFICATION	9.25071593006844E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995522514383	WITHOUT_CLASSIFICATION	4.477485616982398E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995522514383	WITHOUT_CLASSIFICATION	4.477485616982398E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999866288514894	WITHOUT_CLASSIFICATION	1.337114851066268E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.99999993630679	WITHOUT_CLASSIFICATION	6.369321005546861E-8	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999341102258079	WITHOUT_CLASSIFICATION	6.588977419206528E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999340466877525	WITHOUT_CLASSIFICATION	6.59533122473883E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998633898576109	WITHOUT_CLASSIFICATION	1.366101423891388E-4	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998793545875011	WITHOUT_CLASSIFICATION	1.2064541249892031E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995680142105066	WITHOUT_CLASSIFICATION	4.3198578949339245E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999998099088033	WITHOUT_CLASSIFICATION	1.9009119670119398E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999629097849052	WITHOUT_CLASSIFICATION	3.7090215094737234E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999770911608266	WITHOUT_CLASSIFICATION	2.2908839173386496E-5	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999960982179682	WITHOUT_CLASSIFICATION	3.9017820317939366E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999998099088033	WITHOUT_CLASSIFICATION	1.9009119670119398E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999873792688564	WITHOUT_CLASSIFICATION	1.2620731143714783E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999935756036746	WITHOUT_CLASSIFICATION	6.424396325416296E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999992019118051	WITHOUT_CLASSIFICATION	7.98088194914492E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.999971040882035	WITHOUT_CLASSIFICATION	2.8959117964970876E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999899934239833	WITHOUT_CLASSIFICATION	1.0006576016810823E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999967760064871	WITHOUT_CLASSIFICATION	3.2239935128378555E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999918568908895	WITHOUT_CLASSIFICATION	8.143109110433165E-6	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999800363609508	WITHOUT_CLASSIFICATION	1.9963639049219665E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999892216731777	WITHOUT_CLASSIFICATION	1.0778326822162316E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999993681698735	WITHOUT_CLASSIFICATION	6.31830126492462E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998709882466646	WITHOUT_CLASSIFICATION	1.2901175333529833E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999994839886713	WITHOUT_CLASSIFICATION	5.1601132869506734E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999946142629761	WITHOUT_CLASSIFICATION	5.385737023849435E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999924304569063	WITHOUT_CLASSIFICATION	7.569543093694173E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999934767733305	WITHOUT_CLASSIFICATION	6.523226669501101E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999974593854878	WITHOUT_CLASSIFICATION	2.5406145121901377E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997566597510247	WITHOUT_CLASSIFICATION	2.4334024897529547E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999558561858074	WITHOUT_CLASSIFICATION	4.4143814192532846E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999558561858074	WITHOUT_CLASSIFICATION	4.4143814192532846E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999918568908895	WITHOUT_CLASSIFICATION	8.143109110433165E-6	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999913738812867	WITHOUT_CLASSIFICATION	8.626118713213217E-6	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999991922634069	WITHOUT_CLASSIFICATION	8.077365930891001E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998893184233774	WITHOUT_CLASSIFICATION	1.1068157662260732E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999635717219357	WITHOUT_CLASSIFICATION	3.642827806428875E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999923542276158	WITHOUT_CLASSIFICATION	7.645772384251273E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985073415166	WITHOUT_CLASSIFICATION	1.4926584833509043E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999958408313666	WITHOUT_CLASSIFICATION	4.159168633355075E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999833418775056	WITHOUT_CLASSIFICATION	1.6658122494351358E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999986720626821	WITHOUT_CLASSIFICATION	1.3279373179182805E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999824251824243	WITHOUT_CLASSIFICATION	1.7574817575646003E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999995341519865	WITHOUT_CLASSIFICATION	4.658480133802443E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999954125716383	WITHOUT_CLASSIFICATION	4.587428361775766E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999991977078749	WITHOUT_CLASSIFICATION	8.02292125111284E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999935665591209	WITHOUT_CLASSIFICATION	6.433440879146075E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999855220071353	WITHOUT_CLASSIFICATION	1.4477992864792996E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999969800292595	WITHOUT_CLASSIFICATION	3.0199707404409065E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999988425214541	WITHOUT_CLASSIFICATION	1.1574785458874753E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999983077953709	WITHOUT_CLASSIFICATION	1.6922046291166473E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999495595782569	WITHOUT_CLASSIFICATION	5.044042174299449E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999898612775793	WITHOUT_CLASSIFICATION	1.0138722420797939E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999870552609897	WITHOUT_CLASSIFICATION	1.294473901029137E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999878547097952	WITHOUT_CLASSIFICATION	1.2145290204745947E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999894717183602	WITHOUT_CLASSIFICATION	1.0528281639916585E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999964744136192	WITHOUT_CLASSIFICATION	3.52558638087781E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999876496037774	WITHOUT_CLASSIFICATION	1.2350396222533308E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999922048639386	WITHOUT_CLASSIFICATION	7.795136061366208E-6	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9990563586350314	WITHOUT_CLASSIFICATION	9.436413649684754E-4	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998515129909941	WITHOUT_CLASSIFICATION	1.484870090058788E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999814429215804	WITHOUT_CLASSIFICATION	1.8557078419568943E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999896767141774	WITHOUT_CLASSIFICATION	1.0323285822580148E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999853519854902	WITHOUT_CLASSIFICATION	1.4648014509760458E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999938585435558	WITHOUT_CLASSIFICATION	6.141456444084092E-6	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999968882345529	WITHOUT_CLASSIFICATION	3.1117654471284616E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999960289213454	WITHOUT_CLASSIFICATION	3.9710786544894544E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999912133790092	WITHOUT_CLASSIFICATION	8.786620990752097E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999304796074819	WITHOUT_CLASSIFICATION	6.952039251802553E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999959925638513	WITHOUT_CLASSIFICATION	4.0074361486717854E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999927603622646	WITHOUT_CLASSIFICATION	7.2396377354574565E-6	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.99961658758699	WITHOUT_CLASSIFICATION	3.8341241300998507E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999943255554077	WITHOUT_CLASSIFICATION	5.674444592420011E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999808096685666	WITHOUT_CLASSIFICATION	1.919033143342463E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999883569149806	WITHOUT_CLASSIFICATION	1.16430850195761E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999614483411912	WITHOUT_CLASSIFICATION	3.855165880894162E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999229604084858	WITHOUT_CLASSIFICATION	7.703959151422977E-5	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998432820900042	WITHOUT_CLASSIFICATION	1.5671790999577254E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999535932888854	WITHOUT_CLASSIFICATION	4.640671111459695E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999983893695624	WITHOUT_CLASSIFICATION	1.6106304375829974E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998287265176563	WITHOUT_CLASSIFICATION	1.712734823437769E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999994605631028	WITHOUT_CLASSIFICATION	5.394368970927899E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999832429241294	WITHOUT_CLASSIFICATION	1.6757075870539037E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999319854748868	WITHOUT_CLASSIFICATION	6.801452511316191E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999629097849052	WITHOUT_CLASSIFICATION	3.7090215094737234E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998375607054344	WITHOUT_CLASSIFICATION	1.6243929456564651E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999855220071353	WITHOUT_CLASSIFICATION	1.4477992864792996E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999911001599437	WITHOUT_CLASSIFICATION	8.899840056227575E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999905538556679	WITHOUT_CLASSIFICATION	9.446144332091518E-6	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999988208848904	WITHOUT_CLASSIFICATION	1.179115109627015E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999988158221068	WITHOUT_CLASSIFICATION	1.1841778932169692E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999922195521167	WITHOUT_CLASSIFICATION	7.780447883221579E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999989159705296	WITHOUT_CLASSIFICATION	1.0840294703883245E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999881624179175	WITHOUT_CLASSIFICATION	1.1837582082428953E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999862892226692	WITHOUT_CLASSIFICATION	1.3710777330748563E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999795329682721	WITHOUT_CLASSIFICATION	2.0467031727870974E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991122976635	WITHOUT_CLASSIFICATION	8.877023366157232E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999650658421406	WITHOUT_CLASSIFICATION	3.493415785936589E-5	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996951205894	WITHOUT_CLASSIFICATION	3.0487941062250303E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988175216608	WITHOUT_CLASSIFICATION	1.1824783392172921E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988175216608	WITHOUT_CLASSIFICATION	1.1824783392172921E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999627068805133	WITHOUT_CLASSIFICATION	3.729311948673529E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996324500631218	WITHOUT_CLASSIFICATION	3.6754993687819286E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999989974307819	WITHOUT_CLASSIFICATION	1.0025692180900916E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9994816139864656	WITHOUT_CLASSIFICATION	5.183860135344073E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999966823566492	WITHOUT_CLASSIFICATION	3.3176433508319622E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999956123135917	WITHOUT_CLASSIFICATION	4.3876864082807315E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995962969096	WITHOUT_CLASSIFICATION	4.0370309044089296E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999650586040298	WITHOUT_CLASSIFICATION	3.494139597027393E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999896043683879	WITHOUT_CLASSIFICATION	1.0395631611979686E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999911653720069	WITHOUT_CLASSIFICATION	8.834627993008014E-6	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999858505809716	WITHOUT_CLASSIFICATION	1.4149419028544743E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999858505809716	WITHOUT_CLASSIFICATION	1.4149419028544743E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999586694249	WITHOUT_CLASSIFICATION	4.133057506766604E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999872589343232	WITHOUT_CLASSIFICATION	1.2741065676856166E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999969565713472	WITHOUT_CLASSIFICATION	3.0434286528583355E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999106008330493	WITHOUT_CLASSIFICATION	8.93991669506594E-5	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999120547857	WITHOUT_CLASSIFICATION	8.794521430484592E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999716861810672	WITHOUT_CLASSIFICATION	2.8313818932820708E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999733359009007	WITHOUT_CLASSIFICATION	2.666409909936774E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999987357495144	WITHOUT_CLASSIFICATION	1.2642504855932201E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999942327893947	WITHOUT_CLASSIFICATION	5.767210605364628E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999742984738845	WITHOUT_CLASSIFICATION	2.5701526115518918E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999839776224024	WITHOUT_CLASSIFICATION	1.6022377597640425E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753760937672	WITHOUT_CLASSIFICATION	2.4623906232728993E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999941443618116	WITHOUT_CLASSIFICATION	5.855638188402513E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999996736799248	WITHOUT_CLASSIFICATION	3.2632007519500654E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997779548734366	WITHOUT_CLASSIFICATION	2.2204512656338616E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999980367241067	WITHOUT_CLASSIFICATION	1.9632758933249032E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997639580030315	WITHOUT_CLASSIFICATION	2.3604199696838942E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997933835994537	WITHOUT_CLASSIFICATION	2.066164005463489E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999996454151984	WITHOUT_CLASSIFICATION	3.5458480159142097E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999996835979155	WITHOUT_CLASSIFICATION	3.164020844547087E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997702607163462	WITHOUT_CLASSIFICATION	2.2973928365378434E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999900731365626	WITHOUT_CLASSIFICATION	9.926863437394131E-6	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998995862014429	WITHOUT_CLASSIFICATION	1.0041379855700407E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999963402973401	WITHOUT_CLASSIFICATION	3.6597026600212946E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999761394199523	WITHOUT_CLASSIFICATION	2.3860580047644263E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999925341893836	WITHOUT_CLASSIFICATION	7.465810616312974E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888273763797	WITHOUT_CLASSIFICATION	1.117262362026404E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999986988702699	WITHOUT_CLASSIFICATION	1.3011297301049347E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999767343400699	WITHOUT_CLASSIFICATION	2.3265659930093966E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821412014746	WITHOUT_CLASSIFICATION	1.7858798525475392E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9992238027251202	WITHOUT_CLASSIFICATION	7.761972748797773E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992146295477	WITHOUT_CLASSIFICATION	7.853704522167126E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999759965296078	WITHOUT_CLASSIFICATION	2.4003470392298193E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999990229891457	WITHOUT_CLASSIFICATION	9.770108542915375E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835204979538	WITHOUT_CLASSIFICATION	1.6479502046272267E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999992414222647	WITHOUT_CLASSIFICATION	7.585777353209571E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999802022411891	WITHOUT_CLASSIFICATION	1.9797758810930377E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999869342376752	WITHOUT_CLASSIFICATION	1.3065762324813585E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999892695416068	WITHOUT_CLASSIFICATION	1.073045839306951E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999952684840907	WITHOUT_CLASSIFICATION	4.73151590932955E-6	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997849789489074	WITHOUT_CLASSIFICATION	2.1502105109265097E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999967118133061	WITHOUT_CLASSIFICATION	3.2881866938518606E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999974463043199	WITHOUT_CLASSIFICATION	2.5536956802052554E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999753318059497	WITHOUT_CLASSIFICATION	2.466819405025339E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999330442384586	WITHOUT_CLASSIFICATION	6.695576154141172E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999960103159947	WITHOUT_CLASSIFICATION	3.989684005266927E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999680214448603	WITHOUT_CLASSIFICATION	3.19785551396941E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999947610924287	WITHOUT_CLASSIFICATION	5.238907571361034E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999879951185057	WITHOUT_CLASSIFICATION	1.2004881494399796E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998943512066379	WITHOUT_CLASSIFICATION	1.0564879336208894E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999946608091098	WITHOUT_CLASSIFICATION	5.3391908901244014E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999997142055694	WITHOUT_CLASSIFICATION	2.8579443059049097E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999910559152922	WITHOUT_CLASSIFICATION	8.944084707803996E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999791539769033	WITHOUT_CLASSIFICATION	2.08460230967127E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999910559152922	WITHOUT_CLASSIFICATION	8.944084707803996E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999871453327199	WITHOUT_CLASSIFICATION	1.2854667280017914E-5	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999981273411911	WITHOUT_CLASSIFICATION	1.8726588089878837E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999992570227664	WITHOUT_CLASSIFICATION	7.429772336131472E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999990555711726	WITHOUT_CLASSIFICATION	9.444288274857824E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999863548720335	WITHOUT_CLASSIFICATION	1.364512796643613E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999992570227664	WITHOUT_CLASSIFICATION	7.429772336131472E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999959717542585	WITHOUT_CLASSIFICATION	4.028245741544984E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998996090009309	WITHOUT_CLASSIFICATION	1.0039099906914957E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999973778231999	WITHOUT_CLASSIFICATION	2.6221768001655015E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999955781930606	WITHOUT_CLASSIFICATION	4.421806939385685E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999810025712743	WITHOUT_CLASSIFICATION	1.899742872562196E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999983674850378	WITHOUT_CLASSIFICATION	1.6325149622078268E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999998724181194	WITHOUT_CLASSIFICATION	1.275818805998077E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999206620469613	WITHOUT_CLASSIFICATION	7.93379530386975E-5	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999973240875767	WITHOUT_CLASSIFICATION	2.6759124232563977E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999985726388471	WITHOUT_CLASSIFICATION	1.427361152987205E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999901443219541	WITHOUT_CLASSIFICATION	9.85567804584305E-6	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999987216985365	WITHOUT_CLASSIFICATION	1.2783014635500929E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998868245924	WITHOUT_CLASSIFICATION	1.131754076484897E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998265690221261	WITHOUT_CLASSIFICATION	1.7343097787388232E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999911257278602	WITHOUT_CLASSIFICATION	8.87427213990839E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997333012658213	WITHOUT_CLASSIFICATION	2.666987341787191E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9975122667830557	WITHOUT_CLASSIFICATION	0.0024877332169443334	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999252322171	WITHOUT_CLASSIFICATION	7.47677828950935E-7	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999787101041708	WITHOUT_CLASSIFICATION	2.128989582926477E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991386718112037	WITHOUT_CLASSIFICATION	8.613281887962911E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998463437134275	WITHOUT_CLASSIFICATION	1.5365628657244541E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999612770630211	WITHOUT_CLASSIFICATION	3.872293697895241E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999016094842521	WITHOUT_CLASSIFICATION	9.839051574796678E-5	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9997544050409432	WITHOUT_CLASSIFICATION	2.4559495905678036E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.99995345945688	WITHOUT_CLASSIFICATION	4.654054312008572E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999766461419879	WITHOUT_CLASSIFICATION	2.3353858012116036E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999993114700585	WITHOUT_CLASSIFICATION	6.885299415725401E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999951986430144	WITHOUT_CLASSIFICATION	4.8013569855640244E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999757693350897	WITHOUT_CLASSIFICATION	2.4230664910308636E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998364330137258	WITHOUT_CLASSIFICATION	1.6356698627411706E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999870979159282	WITHOUT_CLASSIFICATION	1.2902084071775233E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998319356722408	WITHOUT_CLASSIFICATION	1.6806432775909484E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987721118102648	WITHOUT_CLASSIFICATION	0.0012278881897351955	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991386718112037	WITHOUT_CLASSIFICATION	8.613281887962911E-4	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999953986175002	WITHOUT_CLASSIFICATION	4.601382499722299E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997619297396784	WITHOUT_CLASSIFICATION	2.3807026032158452E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999120891434236	WITHOUT_CLASSIFICATION	8.791085657646002E-5	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999602423957813	WITHOUT_CLASSIFICATION	3.975760421873549E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999828422206896	WITHOUT_CLASSIFICATION	1.71577793104323E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999905701944354	WITHOUT_CLASSIFICATION	9.429805564677265E-6	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999928259249896	WITHOUT_CLASSIFICATION	7.174075010395909E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999787085931562	WITHOUT_CLASSIFICATION	2.1291406843806525E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999812455947518	WITHOUT_CLASSIFICATION	1.8754405248177223E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9998171271451286	WITHOUT_CLASSIFICATION	1.8287285487144384E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9997897466567395	WITHOUT_CLASSIFICATION	2.1025334326053418E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999774708242791	WITHOUT_CLASSIFICATION	2.2529175720893844E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999967861274278	WITHOUT_CLASSIFICATION	3.2138725722102614E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999456877378593	WITHOUT_CLASSIFICATION	5.431226214056696E-5	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999517808894816	WITHOUT_CLASSIFICATION	4.821911051840843E-5	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999984067081034	WITHOUT_CLASSIFICATION	1.5932918966972264E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999219472156063	WITHOUT_CLASSIFICATION	7.805278439362838E-5	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999065178376482	WITHOUT_CLASSIFICATION	9.348216235176286E-5	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998187011408117	WITHOUT_CLASSIFICATION	1.8129885918820594E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999669895255796	WITHOUT_CLASSIFICATION	3.301047442048244E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999992378105928	WITHOUT_CLASSIFICATION	7.621894072026249E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999992378105928	WITHOUT_CLASSIFICATION	7.621894072026249E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999955994161027	WITHOUT_CLASSIFICATION	4.4005838973069836E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999992378105928	WITHOUT_CLASSIFICATION	7.621894072026249E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.999992378105928	WITHOUT_CLASSIFICATION	7.621894072026249E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999765826490881	WITHOUT_CLASSIFICATION	2.3417350911876677E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9983974904125662	WITHOUT_CLASSIFICATION	0.0016025095874338076	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999762842373148	WITHOUT_CLASSIFICATION	2.3715762685194072E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999762842373148	WITHOUT_CLASSIFICATION	2.3715762685194072E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999805375852382	WITHOUT_CLASSIFICATION	1.946241476185954E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999810988757412	WITHOUT_CLASSIFICATION	1.890112425879027E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.99991589486528	WITHOUT_CLASSIFICATION	8.410513472004165E-5	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9974462813004976	WITHOUT_CLASSIFICATION	0.0025537186995023492	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999804534731236	WITHOUT_CLASSIFICATION	1.9546526876414116E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999774656482916	WITHOUT_CLASSIFICATION	2.253435170839825E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996696370332504	WITHOUT_CLASSIFICATION	3.303629667495168E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999761255424237	WITHOUT_CLASSIFICATION	2.387445757632522E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9996605029531952	WITHOUT_CLASSIFICATION	3.3949704680483927E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9996310297037524	WITHOUT_CLASSIFICATION	3.6897029624750806E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998023019436776	WITHOUT_CLASSIFICATION	1.9769805632252643E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9978713386984982	WITHOUT_CLASSIFICATION	0.00212866130150176	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999971973461919	WITHOUT_CLASSIFICATION	2.802653808090605E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999504290643314	WITHOUT_CLASSIFICATION	4.957093566872391E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998406293944041	WITHOUT_CLASSIFICATION	1.5937060559595534E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9995407726659419	WITHOUT_CLASSIFICATION	4.592273340581707E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999977744168065	WITHOUT_CLASSIFICATION	2.2255831935252623E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999941120809037	WITHOUT_CLASSIFICATION	5.887919096293558E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999971973461919	WITHOUT_CLASSIFICATION	2.802653808090605E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998463437134275	WITHOUT_CLASSIFICATION	1.5365628657244541E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999554429814277	WITHOUT_CLASSIFICATION	4.455701857236353E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999932257291623	WITHOUT_CLASSIFICATION	6.774270837714153E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999893592996946	WITHOUT_CLASSIFICATION	1.064070030534876E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999606248250008	WITHOUT_CLASSIFICATION	3.937517499916335E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999960995870762	WITHOUT_CLASSIFICATION	3.900412923782869E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999263526022348	WITHOUT_CLASSIFICATION	7.364739776516535E-5	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999934480528316	WITHOUT_CLASSIFICATION	6.551947168281438E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999924939698259	WITHOUT_CLASSIFICATION	7.506030174110945E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999901181168219	WITHOUT_CLASSIFICATION	9.8818831780654E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999554823345962	WITHOUT_CLASSIFICATION	4.451766540386861E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999954829532981	WITHOUT_CLASSIFICATION	4.517046701900981E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999980634782287	WITHOUT_CLASSIFICATION	1.9365217712372386E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999983011506356	WITHOUT_CLASSIFICATION	1.6988493643894994E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999274714020405	WITHOUT_CLASSIFICATION	7.25285979594236E-5	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999858310262019	WITHOUT_CLASSIFICATION	1.4168973798066046E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999970329937454	WITHOUT_CLASSIFICATION	2.9670062545695515E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999970871023582	WITHOUT_CLASSIFICATION	2.912897641776003E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999868266240258	WITHOUT_CLASSIFICATION	1.3173375974043701E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999712803940546	WITHOUT_CLASSIFICATION	2.8719605945424764E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998627346716398	WITHOUT_CLASSIFICATION	1.372653283601515E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998365536991664	WITHOUT_CLASSIFICATION	1.634463008336215E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999677602693	WITHOUT_CLASSIFICATION	3.223973062747349E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999924939698259	WITHOUT_CLASSIFICATION	7.506030174110945E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999603534633074	WITHOUT_CLASSIFICATION	3.964653669271608E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999558569277314	WITHOUT_CLASSIFICATION	4.4143072268647705E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997069181417092	WITHOUT_CLASSIFICATION	2.930818582907865E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999940329899245	WITHOUT_CLASSIFICATION	5.96701007550432E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999533476161503	WITHOUT_CLASSIFICATION	4.6652383849728126E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999824950384189	WITHOUT_CLASSIFICATION	1.7504961581172815E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999958619531589	WITHOUT_CLASSIFICATION	4.138046841089712E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999824945238358	WITHOUT_CLASSIFICATION	1.7505476164169227E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999554528015009	WITHOUT_CLASSIFICATION	4.454719849916787E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904165548725	WITHOUT_CLASSIFICATION	9.583445127514685E-6	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999968928224353	WITHOUT_CLASSIFICATION	3.1071775647059244E-5	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998757360010784	WITHOUT_CLASSIFICATION	1.242639989215541E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9996074834599399	WITHOUT_CLASSIFICATION	3.9251654006013695E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999228266462405	WITHOUT_CLASSIFICATION	7.717335375945347E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996587738479203	WITHOUT_CLASSIFICATION	3.41226152079672E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904165548725	WITHOUT_CLASSIFICATION	9.583445127514685E-6	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999878412972507	WITHOUT_CLASSIFICATION	1.2158702749320038E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999972454825098	WITHOUT_CLASSIFICATION	2.7545174902073464E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.99996260399877	WITHOUT_CLASSIFICATION	3.739600123003597E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999152288047889	WITHOUT_CLASSIFICATION	8.477119521107626E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999977708445599	WITHOUT_CLASSIFICATION	2.2291554400886597E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999968887667601	WITHOUT_CLASSIFICATION	3.11123324006388E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999904696227343	WITHOUT_CLASSIFICATION	9.530377265675067E-6	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730842638899	WITHOUT_CLASSIFICATION	2.6915736110216312E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773683665966	WITHOUT_CLASSIFICATION	2.2631633403351617E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779566111827	WITHOUT_CLASSIFICATION	2.2043388817167555E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779566111827	WITHOUT_CLASSIFICATION	2.2043388817167555E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779566111827	WITHOUT_CLASSIFICATION	2.2043388817167555E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978342196139	WITHOUT_CLASSIFICATION	2.1657803861401305E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978342196139	WITHOUT_CLASSIFICATION	2.1657803861401305E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9994836585925148	WITHOUT_CLASSIFICATION	5.163414074851951E-4	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999973663495132	WITHOUT_CLASSIFICATION	2.6336504868988523E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999957584428457	WITHOUT_CLASSIFICATION	4.241557154308156E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999969293534492	WITHOUT_CLASSIFICATION	3.070646550881667E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999256222942587	WITHOUT_CLASSIFICATION	7.437770574124163E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754276623384	WITHOUT_CLASSIFICATION	2.4572337661590774E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756290795302	WITHOUT_CLASSIFICATION	2.437092046979043E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999999410141389	WITHOUT_CLASSIFICATION	5.898586110058366E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788120537353	WITHOUT_CLASSIFICATION	2.1187946264758708E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754276623384	WITHOUT_CLASSIFICATION	2.4572337661590774E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756290795302	WITHOUT_CLASSIFICATION	2.437092046979043E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999971625969429	WITHOUT_CLASSIFICATION	2.8374030571019596E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997424927109964	WITHOUT_CLASSIFICATION	2.575072890036321E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999981642824065	WITHOUT_CLASSIFICATION	1.8357175935795885E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999809528168848	WITHOUT_CLASSIFICATION	1.9047183115070927E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998883507345778	WITHOUT_CLASSIFICATION	1.116492654221999E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998559379231536	WITHOUT_CLASSIFICATION	1.4406207684640598E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999845917266378	WITHOUT_CLASSIFICATION	1.5408273362164467E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999911500839829	WITHOUT_CLASSIFICATION	8.849916017144784E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999435617334657	WITHOUT_CLASSIFICATION	5.6438266534343516E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9996536640877328	WITHOUT_CLASSIFICATION	3.4633591226713593E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999865158233671	WITHOUT_CLASSIFICATION	1.3484176632950511E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999824231660148	WITHOUT_CLASSIFICATION	1.757683398520314E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999323091010572	WITHOUT_CLASSIFICATION	6.769089894280395E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996616998512406	WITHOUT_CLASSIFICATION	3.3830014875945114E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999791734474033	WITHOUT_CLASSIFICATION	2.0826552596792008E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999750536296853	WITHOUT_CLASSIFICATION	2.4946370314705137E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999821153441022	WITHOUT_CLASSIFICATION	1.7884655897726265E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999801932585873	WITHOUT_CLASSIFICATION	1.9806741412712264E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9996556125510421	WITHOUT_CLASSIFICATION	3.443874489579705E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999963487818564	WITHOUT_CLASSIFICATION	3.651218143519627E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999924382022376	WITHOUT_CLASSIFICATION	7.561797762448019E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997355934416772	WITHOUT_CLASSIFICATION	2.6440655832277567E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753291594172	WITHOUT_CLASSIFICATION	2.467084058272421E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783381443564	WITHOUT_CLASSIFICATION	2.166185564355022E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999941462370063	WITHOUT_CLASSIFICATION	5.8537629936965835E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777150036022	WITHOUT_CLASSIFICATION	2.2284996397862238E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971942448938	WITHOUT_CLASSIFICATION	2.8057551062013792E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999450461804338	WITHOUT_CLASSIFICATION	5.495381956619071E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999450461804338	WITHOUT_CLASSIFICATION	5.495381956619071E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999821952030375	WITHOUT_CLASSIFICATION	1.7804796962425972E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999987774644414	WITHOUT_CLASSIFICATION	1.2225355585671008E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999687639843263	WITHOUT_CLASSIFICATION	3.1236015673644285E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999987167627442	WITHOUT_CLASSIFICATION	1.2832372558411147E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998898162309792	WITHOUT_CLASSIFICATION	1.1018376902085906E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9996177256771361	WITHOUT_CLASSIFICATION	3.822743228639479E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999988364155545	WITHOUT_CLASSIFICATION	1.1635844453861926E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999999346599913	WITHOUT_CLASSIFICATION	6.534000870791426E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762167760895	WITHOUT_CLASSIFICATION	2.3783223910513302E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760710509623	WITHOUT_CLASSIFICATION	2.39289490376812E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761055576436	WITHOUT_CLASSIFICATION	2.389444235638243E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999881641912365	WITHOUT_CLASSIFICATION	1.1835808763575236E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9994010604735178	WITHOUT_CLASSIFICATION	5.989395264820986E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9989081214998191	WITHOUT_CLASSIFICATION	0.001091878500180837	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999978244854928	WITHOUT_CLASSIFICATION	2.1755145072003864E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999953616911106	WITHOUT_CLASSIFICATION	4.638308889335386E-6	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999661023011284	WITHOUT_CLASSIFICATION	3.389769887165895E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999729463583706	WITHOUT_CLASSIFICATION	2.7053641629412914E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999902877234381	WITHOUT_CLASSIFICATION	9.712276561984595E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9989081214998191	WITHOUT_CLASSIFICATION	0.001091878500180837	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9989081214998191	WITHOUT_CLASSIFICATION	0.001091878500180837	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999365383896521	WITHOUT_CLASSIFICATION	6.346161034790087E-4	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999924347703836	WITHOUT_CLASSIFICATION	7.565229616454549E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9985414694356723	WITHOUT_CLASSIFICATION	0.001458530564327568	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999986510178958	WITHOUT_CLASSIFICATION	1.3489821042554006E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999695555373233	WITHOUT_CLASSIFICATION	3.044446267681685E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999750536296853	WITHOUT_CLASSIFICATION	2.4946370314705137E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998333604235329	WITHOUT_CLASSIFICATION	1.6663957646711997E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999919748934785	WITHOUT_CLASSIFICATION	8.025106521447967E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999856297848044	WITHOUT_CLASSIFICATION	1.4370215195439327E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798574037602	WITHOUT_CLASSIFICATION	2.0142596239926702E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999967499866548	WITHOUT_CLASSIFICATION	3.2500133451928324E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798844001331	WITHOUT_CLASSIFICATION	2.0115599866897372E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999870285213328	WITHOUT_CLASSIFICATION	1.2971478667107746E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999870285213328	WITHOUT_CLASSIFICATION	1.2971478667107746E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999870285213328	WITHOUT_CLASSIFICATION	1.2971478667107746E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999870285213328	WITHOUT_CLASSIFICATION	1.2971478667107746E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779517942949	WITHOUT_CLASSIFICATION	2.2048205705130883E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9994534947550957	WITHOUT_CLASSIFICATION	5.465052449041878E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753629535255	WITHOUT_CLASSIFICATION	2.4637046474511087E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999879769849782	WITHOUT_CLASSIFICATION	1.2023015021779829E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999900000550888	WITHOUT_CLASSIFICATION	9.999944911292762E-6	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761869341506	WITHOUT_CLASSIFICATION	2.3813065849417364E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800560591611	WITHOUT_CLASSIFICATION	1.9943940838942946E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999898486304543	WITHOUT_CLASSIFICATION	1.0151369545642246E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999943833366748	WITHOUT_CLASSIFICATION	5.616663325207722E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999989055507885	WITHOUT_CLASSIFICATION	1.0944492115013623E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999772144847684	WITHOUT_CLASSIFICATION	2.2785515231653782E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999630250045602	WITHOUT_CLASSIFICATION	3.6974995439749735E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999857546538571	WITHOUT_CLASSIFICATION	1.4245346142948051E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999190018349541	WITHOUT_CLASSIFICATION	8.099816504589153E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999964366498411	WITHOUT_CLASSIFICATION	3.5633501588614883E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999964366498411	WITHOUT_CLASSIFICATION	3.5633501588614883E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999945938226229	WITHOUT_CLASSIFICATION	5.406177377051455E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999914918119231	WITHOUT_CLASSIFICATION	8.508188076848633E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997540637315	WITHOUT_CLASSIFICATION	2.4593626849287826E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754892729228	WITHOUT_CLASSIFICATION	2.451072707720629E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754892729228	WITHOUT_CLASSIFICATION	2.451072707720629E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999965828756721	WITHOUT_CLASSIFICATION	3.417124327949889E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779566111827	WITHOUT_CLASSIFICATION	2.2043388817167555E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999992417258075	WITHOUT_CLASSIFICATION	7.582741924697423E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999895537272239	WITHOUT_CLASSIFICATION	1.0446272776041781E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999990384364216	WITHOUT_CLASSIFICATION	9.615635784761111E-7	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999676288070886	WITHOUT_CLASSIFICATION	3.237119291139471E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763657393601	WITHOUT_CLASSIFICATION	2.36342606398528E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999014701285434	WITHOUT_CLASSIFICATION	9.852987145665897E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999897701951882	WITHOUT_CLASSIFICATION	1.022980481180561E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999962345426004	WITHOUT_CLASSIFICATION	3.7654573995470714E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998032860212439	WITHOUT_CLASSIFICATION	1.9671397875613693E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999841964770187	WITHOUT_CLASSIFICATION	1.5803522981266875E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999828932033008	WITHOUT_CLASSIFICATION	1.7106796699220415E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999996201536738	WITHOUT_CLASSIFICATION	3.7984632619820993E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999996449204755	WITHOUT_CLASSIFICATION	3.550795244084175E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999910525670112	WITHOUT_CLASSIFICATION	8.947432988804414E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998352201083	WITHOUT_CLASSIFICATION	1.647798917197632E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999392161000528	WITHOUT_CLASSIFICATION	6.078389994720897E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999960602387096	WITHOUT_CLASSIFICATION	3.93976129035997E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998955903092913	WITHOUT_CLASSIFICATION	1.0440969070871659E-4	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999670397009136	WITHOUT_CLASSIFICATION	3.2960299086387834E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998445336712862	WITHOUT_CLASSIFICATION	1.5546632871386116E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999968557623474	WITHOUT_CLASSIFICATION	3.1442376524414394E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999517110577997	WITHOUT_CLASSIFICATION	4.828894220032927E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999992657177909	WITHOUT_CLASSIFICATION	7.342822091997814E-7	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999368036812153	WITHOUT_CLASSIFICATION	6.319631878474422E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997964535418136	WITHOUT_CLASSIFICATION	2.035464581865196E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999975249405864	WITHOUT_CLASSIFICATION	2.47505941370252E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9970509653711102	WITHOUT_CLASSIFICATION	0.0029490346288899567	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998000338467	WITHOUT_CLASSIFICATION	1.9996615325577063E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999909948410821	WITHOUT_CLASSIFICATION	9.005158917914394E-6	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999898980418688	WITHOUT_CLASSIFICATION	1.0101958131257943E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998823280717667	WITHOUT_CLASSIFICATION	1.1767192823325551E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999802683345659	WITHOUT_CLASSIFICATION	1.9731665434119507E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999905968620904	WITHOUT_CLASSIFICATION	9.403137909626039E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999969091883327	WITHOUT_CLASSIFICATION	3.090811667289947E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999926607220042	WITHOUT_CLASSIFICATION	7.33927799573003E-6	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999801559937619	WITHOUT_CLASSIFICATION	1.984400623809178E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996362361818129	WITHOUT_CLASSIFICATION	3.6376381818718225E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999704774020468	WITHOUT_CLASSIFICATION	2.9522597953127147E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999536574379422	WITHOUT_CLASSIFICATION	4.634256205782171E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999887654883242	WITHOUT_CLASSIFICATION	1.1234511675836122E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9995484606833873	WITHOUT_CLASSIFICATION	4.5153931661273114E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999295511834104	WITHOUT_CLASSIFICATION	7.044881658946853E-5	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9992254179128119	WITHOUT_CLASSIFICATION	7.745820871879262E-4	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999984273628433	WITHOUT_CLASSIFICATION	1.5726371566925928E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9956429663565557	WITHOUT_CLASSIFICATION	0.004357033643444217	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999652478561228	WITHOUT_CLASSIFICATION	3.475214387714415E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999978527923062	WITHOUT_CLASSIFICATION	2.1472076936816623E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996931751389542	WITHOUT_CLASSIFICATION	3.0682486104590697E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999448689373138	WITHOUT_CLASSIFICATION	5.513106268605764E-5	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999928711491499	WITHOUT_CLASSIFICATION	7.128850850127682E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995469716882378	WITHOUT_CLASSIFICATION	4.530283117621706E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999969033996512	WITHOUT_CLASSIFICATION	3.0966003487410947E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999544278293024	WITHOUT_CLASSIFICATION	4.557217069760619E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998847948650801	WITHOUT_CLASSIFICATION	1.152051349198891E-4	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999273710853853	WITHOUT_CLASSIFICATION	7.262891461462161E-5	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999849598985469	WITHOUT_CLASSIFICATION	1.5040101453180417E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999784335365208	WITHOUT_CLASSIFICATION	2.1566463479192735E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996306479646	WITHOUT_CLASSIFICATION	3.6935203547053594E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999164038571128	WITHOUT_CLASSIFICATION	8.359614288718673E-5	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996879853635787	WITHOUT_CLASSIFICATION	3.1201463642122035E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999963214563694	WITHOUT_CLASSIFICATION	3.6785436307305732E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999157243321556	WITHOUT_CLASSIFICATION	8.427566784447069E-5	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999991763554472	WITHOUT_CLASSIFICATION	8.236445528437122E-7	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999918852245699	WITHOUT_CLASSIFICATION	8.11477543015869E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999993515956459	WITHOUT_CLASSIFICATION	6.484043540100347E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999964473578945	WITHOUT_CLASSIFICATION	3.5526421055646998E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999928102012987	WITHOUT_CLASSIFICATION	7.189798701309858E-5	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999722197868033	WITHOUT_CLASSIFICATION	2.7780213196730318E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999939067690077	WITHOUT_CLASSIFICATION	6.093230992301111E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999931782041622	WITHOUT_CLASSIFICATION	6.821795837819527E-6	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.999909981838107	WITHOUT_CLASSIFICATION	9.001816189298844E-5	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999997063334697	WITHOUT_CLASSIFICATION	2.9366653035699095E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999241966704311	WITHOUT_CLASSIFICATION	7.580332956902281E-5	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999912171223637	WITHOUT_CLASSIFICATION	8.782877636308909E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9997333012658213	WITHOUT_CLASSIFICATION	2.666987341787191E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999724569100674	WITHOUT_CLASSIFICATION	2.7543089932579833E-5	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999964599232508	WITHOUT_CLASSIFICATION	3.540076749182904E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999847237474113	WITHOUT_CLASSIFICATION	1.527625258871136E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999950409338813	WITHOUT_CLASSIFICATION	4.959066118745507E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999268559677221	WITHOUT_CLASSIFICATION	7.314403227781629E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999148994494577	WITHOUT_CLASSIFICATION	8.510055054243676E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.996571788859656	WITHOUT_CLASSIFICATION	0.003428211140343923	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999971074554033	WITHOUT_CLASSIFICATION	2.8925445966903473E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998543701883198	WITHOUT_CLASSIFICATION	1.4562981168014571E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998828531588331	WITHOUT_CLASSIFICATION	1.1714684116687596E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998638882722752	WITHOUT_CLASSIFICATION	1.3611172772479043E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999963571839451	WITHOUT_CLASSIFICATION	3.64281605489476E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999970994454624	WITHOUT_CLASSIFICATION	2.900554537608408E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999864021180194	WITHOUT_CLASSIFICATION	1.3597881980565368E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999849602211721	WITHOUT_CLASSIFICATION	1.5039778827813913E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999122850733252	WITHOUT_CLASSIFICATION	8.771492667482263E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999949970445541	WITHOUT_CLASSIFICATION	5.002955445885608E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999778257142637	WITHOUT_CLASSIFICATION	2.2174285736184413E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999778257142637	WITHOUT_CLASSIFICATION	2.2174285736184413E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999279289254229	WITHOUT_CLASSIFICATION	7.207107457702813E-5	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999886446300784	WITHOUT_CLASSIFICATION	1.1355369921604748E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999756144843253	WITHOUT_CLASSIFICATION	2.438551567476245E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999193025398259	WITHOUT_CLASSIFICATION	8.069746017406288E-5	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999939007879363	WITHOUT_CLASSIFICATION	6.09921206373409E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994257940552471	WITHOUT_CLASSIFICATION	5.742059447529785E-4	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9990257472090603	WITHOUT_CLASSIFICATION	9.742527909396702E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999919009978601	WITHOUT_CLASSIFICATION	8.099002139976212E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9989655237536312	WITHOUT_CLASSIFICATION	0.0010344762463687426	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999948871542909	WITHOUT_CLASSIFICATION	5.112845709126411E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999902269732738	WITHOUT_CLASSIFICATION	9.773026726202993E-6	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999278327389575	WITHOUT_CLASSIFICATION	7.216726104248978E-5	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999989450868216	WITHOUT_CLASSIFICATION	1.0549131783278037E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999964329604452	WITHOUT_CLASSIFICATION	3.5670395547926158E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999523481158804	WITHOUT_CLASSIFICATION	4.765188411965077E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999995598413641	WITHOUT_CLASSIFICATION	4.40158635903517E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999995598413641	WITHOUT_CLASSIFICATION	4.40158635903517E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999887599837917	WITHOUT_CLASSIFICATION	1.1240016208362637E-5	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999210806114177	WITHOUT_CLASSIFICATION	7.891938858224137E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999926245972979	WITHOUT_CLASSIFICATION	7.375402702144123E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999799910043254	WITHOUT_CLASSIFICATION	2.0008995674565866E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999947215360967	WITHOUT_CLASSIFICATION	5.278463903345767E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999933687321346	WITHOUT_CLASSIFICATION	6.631267865444148E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999933687321346	WITHOUT_CLASSIFICATION	6.631267865444148E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999320735635373	WITHOUT_CLASSIFICATION	6.792643646266515E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999943649610168	WITHOUT_CLASSIFICATION	5.6350389831639135E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999860629507352	WITHOUT_CLASSIFICATION	1.3937049264696915E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999988681548	WITHOUT_CLASSIFICATION	1.1318451960100646E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999307596013663	WITHOUT_CLASSIFICATION	6.924039863369205E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999966396511208	WITHOUT_CLASSIFICATION	3.360348879242248E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999962002798428	WITHOUT_CLASSIFICATION	3.7997201572421205E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985688638013	WITHOUT_CLASSIFICATION	1.43113619863366E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996942888011197	WITHOUT_CLASSIFICATION	3.057111988803694E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999997280518761	WITHOUT_CLASSIFICATION	2.719481239031663E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999829392460959	WITHOUT_CLASSIFICATION	1.7060753904120063E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999103953240711	WITHOUT_CLASSIFICATION	8.960467592889723E-4	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999992831125924	WITHOUT_CLASSIFICATION	7.168874076039699E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997779548734366	WITHOUT_CLASSIFICATION	2.2204512656338616E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999935283100218	WITHOUT_CLASSIFICATION	6.471689978204065E-5	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999794068806509	WITHOUT_CLASSIFICATION	2.059311934907581E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999199857259555	WITHOUT_CLASSIFICATION	8.001427404454271E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999763425870991	WITHOUT_CLASSIFICATION	2.365741290086108E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999748311566723	WITHOUT_CLASSIFICATION	2.5168843327699036E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999885184180936	WITHOUT_CLASSIFICATION	1.148158190632557E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999252545298016	WITHOUT_CLASSIFICATION	7.474547019841601E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999926849767964	WITHOUT_CLASSIFICATION	7.315023203647142E-6	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999800986850207	WITHOUT_CLASSIFICATION	1.9901314979327825E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999715317024193	WITHOUT_CLASSIFICATION	2.8468297580621954E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999407152081987	WITHOUT_CLASSIFICATION	5.928479180119109E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999930404250906	WITHOUT_CLASSIFICATION	6.9595749092820185E-6	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999984702694674	WITHOUT_CLASSIFICATION	1.529730532626156E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995522514383	WITHOUT_CLASSIFICATION	4.477485616982398E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998728260924847	WITHOUT_CLASSIFICATION	1.2717390751520996E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999533400245724	WITHOUT_CLASSIFICATION	4.6659975427522176E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999958195860736	WITHOUT_CLASSIFICATION	4.1804139264002804E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9996866723099314	WITHOUT_CLASSIFICATION	3.1332769006867485E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998577284160994	WITHOUT_CLASSIFICATION	1.422715839006033E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998275154935403	WITHOUT_CLASSIFICATION	1.7248450645965133E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999700773345538	WITHOUT_CLASSIFICATION	2.9922665446172255E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999966674861891	WITHOUT_CLASSIFICATION	3.3325138108677007E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999960442539549	WITHOUT_CLASSIFICATION	3.955746045067404E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997034074927239	WITHOUT_CLASSIFICATION	2.9659250727611893E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999977757880051	WITHOUT_CLASSIFICATION	2.2242119949527176E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999965336610316	WITHOUT_CLASSIFICATION	3.4663389684354233E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998331506862559	WITHOUT_CLASSIFICATION	1.668493137440347E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999981726031539	WITHOUT_CLASSIFICATION	1.827396846104558E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998177816848	WITHOUT_CLASSIFICATION	1.8221831512962365E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998527811726489	WITHOUT_CLASSIFICATION	1.4721882735119283E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999960442539549	WITHOUT_CLASSIFICATION	3.955746045067404E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997034074927239	WITHOUT_CLASSIFICATION	2.9659250727611893E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9994038627577663	WITHOUT_CLASSIFICATION	5.961372422336103E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999256799028633	WITHOUT_CLASSIFICATION	7.432009713664573E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999964679800231	WITHOUT_CLASSIFICATION	3.5320199769300755E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999784195957131	WITHOUT_CLASSIFICATION	2.1580404286890498E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999657157159387	WITHOUT_CLASSIFICATION	3.428428406115368E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999394282967516	WITHOUT_CLASSIFICATION	6.057170324832293E-5	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998855577873345	WITHOUT_CLASSIFICATION	1.144422126654661E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999648810874484	WITHOUT_CLASSIFICATION	3.5118912551521705E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999970946206613	WITHOUT_CLASSIFICATION	2.9053793387607825E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999532690785313	WITHOUT_CLASSIFICATION	4.673092146877123E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999972626122572	WITHOUT_CLASSIFICATION	2.7373877426864398E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999532690785313	WITHOUT_CLASSIFICATION	4.673092146877123E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998898521344959	WITHOUT_CLASSIFICATION	1.1014786550402854E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997476244904624	WITHOUT_CLASSIFICATION	2.523755095376056E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998898521344959	WITHOUT_CLASSIFICATION	1.1014786550402854E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894076107895	WITHOUT_CLASSIFICATION	1.0592389210488645E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999629754051299	WITHOUT_CLASSIFICATION	3.70245948701286E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9996260760294212	WITHOUT_CLASSIFICATION	3.7392397057866254E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9996260760294212	WITHOUT_CLASSIFICATION	3.7392397057866254E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997588286213328	WITHOUT_CLASSIFICATION	2.411713786671492E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997597150731998	WITHOUT_CLASSIFICATION	2.402849268001803E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997588286213328	WITHOUT_CLASSIFICATION	2.411713786671492E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998334625870221	WITHOUT_CLASSIFICATION	1.6653741297787203E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999753231482009	WITHOUT_CLASSIFICATION	2.4676851799015077E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999548600730049	WITHOUT_CLASSIFICATION	4.513992699506357E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994604859246784	WITHOUT_CLASSIFICATION	5.395140753215428E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999643918604094	WITHOUT_CLASSIFICATION	3.5608139590496844E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999536090308065	WITHOUT_CLASSIFICATION	4.639096919342065E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999804040880763	WITHOUT_CLASSIFICATION	1.9595911923641294E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999959144081518	WITHOUT_CLASSIFICATION	4.085591848129285E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998043202075345	WITHOUT_CLASSIFICATION	1.9567979246548568E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999987326153579	WITHOUT_CLASSIFICATION	1.2673846420966132E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999982311155742	WITHOUT_CLASSIFICATION	1.7688844258081154E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999928427799074	WITHOUT_CLASSIFICATION	7.157220092580967E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999980785808027	WITHOUT_CLASSIFICATION	1.9214191972384114E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999851207525426	WITHOUT_CLASSIFICATION	1.4879247457436396E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999967123686669	WITHOUT_CLASSIFICATION	3.287631333061597E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998999401486445	WITHOUT_CLASSIFICATION	1.0005985135551694E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999571480604584	WITHOUT_CLASSIFICATION	4.285193954168118E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999870428451818	WITHOUT_CLASSIFICATION	1.2957154818109999E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999154021043592	WITHOUT_CLASSIFICATION	8.45978956408111E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999597159378084	WITHOUT_CLASSIFICATION	4.028406219166337E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999455510494796	WITHOUT_CLASSIFICATION	5.4448950520520655E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999687114641959	WITHOUT_CLASSIFICATION	3.1288535804095615E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999917961351508	WITHOUT_CLASSIFICATION	8.203864849286086E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999548600730049	WITHOUT_CLASSIFICATION	4.513992699506357E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999993835022869	WITHOUT_CLASSIFICATION	6.164977131062458E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999226967639059	WITHOUT_CLASSIFICATION	7.730323609410896E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9975681461069746	WITHOUT_CLASSIFICATION	0.002431853893025443	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999542506690606	WITHOUT_CLASSIFICATION	4.574933093937764E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999929639583343	WITHOUT_CLASSIFICATION	7.036041665709492E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999083039298049	WITHOUT_CLASSIFICATION	9.169607019513871E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998334625870221	WITHOUT_CLASSIFICATION	1.6653741297787203E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998334625870221	WITHOUT_CLASSIFICATION	1.6653741297787203E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999193621211038	WITHOUT_CLASSIFICATION	8.063787889624686E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999010587719096	WITHOUT_CLASSIFICATION	9.89412280905015E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999574586970345	WITHOUT_CLASSIFICATION	4.254130296561336E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999240785735457	WITHOUT_CLASSIFICATION	7.592142645418553E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9986848089116501	WITHOUT_CLASSIFICATION	0.0013151910883498728	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999904106109512	WITHOUT_CLASSIFICATION	9.589389048904794E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999978010975307	WITHOUT_CLASSIFICATION	2.1989024692605717E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999866110449517	WITHOUT_CLASSIFICATION	1.3388955048336798E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998539198457239	WITHOUT_CLASSIFICATION	1.4608015427612563E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999943693256186	WITHOUT_CLASSIFICATION	5.630674381478889E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998043202075345	WITHOUT_CLASSIFICATION	1.9567979246548568E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999569360440503	WITHOUT_CLASSIFICATION	4.306395594964015E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999943693256186	WITHOUT_CLASSIFICATION	5.630674381478889E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999978858246276	WITHOUT_CLASSIFICATION	2.1141753724616982E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999993888591839	WITHOUT_CLASSIFICATION	6.111408160923007E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999306136186988	WITHOUT_CLASSIFICATION	6.938638130111644E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998406323661104	WITHOUT_CLASSIFICATION	1.5936763388954892E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999726010100954	WITHOUT_CLASSIFICATION	2.7398989904530733E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996816653498	WITHOUT_CLASSIFICATION	3.183346501235215E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999989153128885	WITHOUT_CLASSIFICATION	1.0846871115006525E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999961293139639	WITHOUT_CLASSIFICATION	3.870686036159336E-6	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999957916639048	WITHOUT_CLASSIFICATION	4.20833609508886E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999895866964542	WITHOUT_CLASSIFICATION	1.0413303545842492E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999792542379362	WITHOUT_CLASSIFICATION	2.074576206371667E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999957396722427	WITHOUT_CLASSIFICATION	4.2603277572925824E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999943693256186	WITHOUT_CLASSIFICATION	5.630674381478889E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999726010100954	WITHOUT_CLASSIFICATION	2.7398989904530733E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999989153128885	WITHOUT_CLASSIFICATION	1.0846871115006525E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999920503773998	WITHOUT_CLASSIFICATION	7.94962260020119E-5	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999997238914435	WITHOUT_CLASSIFICATION	2.7610855644848235E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999879162765734	WITHOUT_CLASSIFICATION	1.2083723426647547E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998587985633404	WITHOUT_CLASSIFICATION	1.412014366595252E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999972637943076	WITHOUT_CLASSIFICATION	2.7362056923130994E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999957197757687	WITHOUT_CLASSIFICATION	4.280224231224548E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999978858246276	WITHOUT_CLASSIFICATION	2.1141753724616982E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997760943140562	WITHOUT_CLASSIFICATION	2.2390568594373336E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999577227576191	WITHOUT_CLASSIFICATION	4.2277242380900387E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997967270529541	WITHOUT_CLASSIFICATION	2.0327294704596647E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998556086323539	WITHOUT_CLASSIFICATION	1.4439136764607876E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998459531112504	WITHOUT_CLASSIFICATION	1.5404688874964167E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999775588928034	WITHOUT_CLASSIFICATION	2.2441107196587792E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894076107895	WITHOUT_CLASSIFICATION	1.0592389210488645E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909945278657	WITHOUT_CLASSIFICATION	9.00547213437396E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999759684106896	WITHOUT_CLASSIFICATION	2.403158931037071E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998857881114349	WITHOUT_CLASSIFICATION	1.1421188856504668E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999807733831352	WITHOUT_CLASSIFICATION	1.9226616864858593E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999974761007094	WITHOUT_CLASSIFICATION	2.5238992905967692E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999947856660418	WITHOUT_CLASSIFICATION	5.214333958165153E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999960781748499	WITHOUT_CLASSIFICATION	3.921825150012803E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999865389145293	WITHOUT_CLASSIFICATION	1.3461085470777617E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999957197757687	WITHOUT_CLASSIFICATION	4.280224231224548E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999535423672492	WITHOUT_CLASSIFICATION	4.645763275074419E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999846074268336	WITHOUT_CLASSIFICATION	1.5392573166398706E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9998604944308892	WITHOUT_CLASSIFICATION	1.3950556911069314E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999977040629101	WITHOUT_CLASSIFICATION	2.2959370899135925E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999911539334578	WITHOUT_CLASSIFICATION	8.846066542204179E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998471908157228	WITHOUT_CLASSIFICATION	1.5280918427717501E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999923791976265	WITHOUT_CLASSIFICATION	7.620802373493437E-5	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999083618652432	WITHOUT_CLASSIFICATION	9.163813475667027E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999632162025728	WITHOUT_CLASSIFICATION	3.6783797427151977E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999100557174814	WITHOUT_CLASSIFICATION	8.99442825186585E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999482221956508	WITHOUT_CLASSIFICATION	5.177780434923972E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.999957152130468	WITHOUT_CLASSIFICATION	4.2847869531957937E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999992434897461	WITHOUT_CLASSIFICATION	7.565102538274558E-7	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999991872701547	WITHOUT_CLASSIFICATION	8.127298453091426E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999756645294954	WITHOUT_CLASSIFICATION	2.4335470504649584E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999996609404487	WITHOUT_CLASSIFICATION	3.390595513148152E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999780809846313	WITHOUT_CLASSIFICATION	2.1919015368735505E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997512431019485	WITHOUT_CLASSIFICATION	2.4875689805137436E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999759636098314	WITHOUT_CLASSIFICATION	2.4036390168524393E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999793197274481	WITHOUT_CLASSIFICATION	2.068027255182185E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999936318919794	WITHOUT_CLASSIFICATION	6.368108020525844E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999635923332332	WITHOUT_CLASSIFICATION	3.640766676693517E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9966419997331588	WITHOUT_CLASSIFICATION	0.003358000266841186	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9990975423362969	WITHOUT_CLASSIFICATION	9.024576637031011E-4	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997327121007032	WITHOUT_CLASSIFICATION	2.6728789929675306E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999773879212898	WITHOUT_CLASSIFICATION	2.2612078710264024E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994741394195563	WITHOUT_CLASSIFICATION	5.25860580443716E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999830191658073	WITHOUT_CLASSIFICATION	1.6980834192630747E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999993681698735	WITHOUT_CLASSIFICATION	6.31830126492462E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999916687104471	WITHOUT_CLASSIFICATION	8.331289552946441E-6	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998375607054344	WITHOUT_CLASSIFICATION	1.6243929456564651E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999893500870862	WITHOUT_CLASSIFICATION	1.0649912913751682E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999966273526025	WITHOUT_CLASSIFICATION	3.372647397511885E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999760272530306	WITHOUT_CLASSIFICATION	2.3972746969317963E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999965092568311	WITHOUT_CLASSIFICATION	3.4907431688942246E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999966273526025	WITHOUT_CLASSIFICATION	3.372647397511885E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999893500870862	WITHOUT_CLASSIFICATION	1.0649912913751682E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999760272530306	WITHOUT_CLASSIFICATION	2.3972746969317963E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.999955051771373	WITHOUT_CLASSIFICATION	4.4948228627057496E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999872837974538	WITHOUT_CLASSIFICATION	1.271620254607929E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997437088900668	WITHOUT_CLASSIFICATION	2.5629110993311536E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999928155913022	WITHOUT_CLASSIFICATION	7.184408697831246E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999994691139827	WITHOUT_CLASSIFICATION	5.308860173523706E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9979213252598823	WITHOUT_CLASSIFICATION	0.0020786747401176334	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9996247059750245	WITHOUT_CLASSIFICATION	3.752940249755109E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999371076234828	WITHOUT_CLASSIFICATION	6.289237651725777E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999845640302226	WITHOUT_CLASSIFICATION	1.543596977740077E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999428790744846	WITHOUT_CLASSIFICATION	5.712092551534897E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.999996366637296	WITHOUT_CLASSIFICATION	3.6333627040993104E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999334484306329	WITHOUT_CLASSIFICATION	6.655156936702998E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999774767102849	WITHOUT_CLASSIFICATION	2.252328971513371E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999216284313069	WITHOUT_CLASSIFICATION	7.837156869311452E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999888207477695	WITHOUT_CLASSIFICATION	1.1179252230398701E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999889833075314	WITHOUT_CLASSIFICATION	1.10166924686161E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999595596702536	WITHOUT_CLASSIFICATION	4.0440329746469434E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999993307596747	WITHOUT_CLASSIFICATION	6.692403252032508E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999949407682467	WITHOUT_CLASSIFICATION	5.059231753309292E-6	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999852521586007	WITHOUT_CLASSIFICATION	1.47478413992417E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999972415888248	WITHOUT_CLASSIFICATION	2.7584111752004662E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999988588148805	WITHOUT_CLASSIFICATION	1.1411851194682994E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999034067031688	WITHOUT_CLASSIFICATION	9.659329683126855E-5	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999714985404281	WITHOUT_CLASSIFICATION	2.850145957193415E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999852113185212	WITHOUT_CLASSIFICATION	1.4788681478722082E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999852113185212	WITHOUT_CLASSIFICATION	1.4788681478722082E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999996950223711	WITHOUT_CLASSIFICATION	3.049776289026575E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999996950223711	WITHOUT_CLASSIFICATION	3.049776289026575E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999848115244852	WITHOUT_CLASSIFICATION	1.5188475514918132E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999595596702536	WITHOUT_CLASSIFICATION	4.0440329746469434E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999465230128817	WITHOUT_CLASSIFICATION	5.347698711821148E-5	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999916831798896	WITHOUT_CLASSIFICATION	8.316820110355311E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999318762012308	WITHOUT_CLASSIFICATION	6.812379876923665E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999318762012308	WITHOUT_CLASSIFICATION	6.812379876923665E-5	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999710578010458	WITHOUT_CLASSIFICATION	2.8942198954272648E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994494712459816	WITHOUT_CLASSIFICATION	5.505287540184518E-4	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999991736221053	WITHOUT_CLASSIFICATION	8.263778946947177E-6	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999125906324223	WITHOUT_CLASSIFICATION	8.740936757763134E-5	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999626313034765	WITHOUT_CLASSIFICATION	3.7368696523453604E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999998164422	WITHOUT_CLASSIFICATION	1.8355780100533147E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999700381772613	WITHOUT_CLASSIFICATION	2.996182273873937E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998216938841459	WITHOUT_CLASSIFICATION	1.78306115854209E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999188020359345	WITHOUT_CLASSIFICATION	8.119796406545351E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999969368533763	WITHOUT_CLASSIFICATION	3.0631466237024556E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999376671502043	WITHOUT_CLASSIFICATION	6.233284979573874E-5	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998429822828829	WITHOUT_CLASSIFICATION	1.5701771711701726E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998446148168626	WITHOUT_CLASSIFICATION	1.5538518313743373E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999568513775761	WITHOUT_CLASSIFICATION	4.3148622423965004E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996923515431995	WITHOUT_CLASSIFICATION	3.076484568006446E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999818160064478	WITHOUT_CLASSIFICATION	1.8183993552284382E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785025097886	WITHOUT_CLASSIFICATION	2.149749021139125E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999901873521048	WITHOUT_CLASSIFICATION	9.812647895215163E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999912931033514	WITHOUT_CLASSIFICATION	8.70689664861112E-6	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999980610182916	WITHOUT_CLASSIFICATION	1.9389817084882032E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999924987638219	WITHOUT_CLASSIFICATION	7.50123617802243E-6	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999228468966517	WITHOUT_CLASSIFICATION	7.715310334836258E-5	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999961941105173	WITHOUT_CLASSIFICATION	3.8058894827289257E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999949553912761	WITHOUT_CLASSIFICATION	5.044608723877097E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997311522427346	WITHOUT_CLASSIFICATION	2.688477572655118E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999886809211966	WITHOUT_CLASSIFICATION	1.1319078803431169E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999100557174814	WITHOUT_CLASSIFICATION	8.99442825186585E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999373709058372	WITHOUT_CLASSIFICATION	6.262909416272234E-5	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999968499275234	WITHOUT_CLASSIFICATION	3.15007247661397E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754422065953	WITHOUT_CLASSIFICATION	2.455779340470388E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748063377277	WITHOUT_CLASSIFICATION	2.51936622721692E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999548336046725	WITHOUT_CLASSIFICATION	4.516639532758694E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999548336046725	WITHOUT_CLASSIFICATION	4.516639532758694E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999945703709867	WITHOUT_CLASSIFICATION	5.429629013270749E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999958811319866	WITHOUT_CLASSIFICATION	4.1188680134932895E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967828323079	WITHOUT_CLASSIFICATION	3.2171676920037536E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967828323079	WITHOUT_CLASSIFICATION	3.2171676920037536E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999304796074819	WITHOUT_CLASSIFICATION	6.952039251802553E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999357329351863	WITHOUT_CLASSIFICATION	6.426706481369322E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999853864103929	WITHOUT_CLASSIFICATION	1.4613589607027815E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999695555373233	WITHOUT_CLASSIFICATION	3.044446267681685E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999554823345962	WITHOUT_CLASSIFICATION	4.451766540386861E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9993671019207453	WITHOUT_CLASSIFICATION	6.328980792548197E-4	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999907213877155	WITHOUT_CLASSIFICATION	9.278612284457351E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999745626248102	WITHOUT_CLASSIFICATION	2.543737518975317E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999745626248102	WITHOUT_CLASSIFICATION	2.543737518975317E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999951632714768	WITHOUT_CLASSIFICATION	4.8367285233145135E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999937527163489	WITHOUT_CLASSIFICATION	6.247283651090484E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999937527163489	WITHOUT_CLASSIFICATION	6.247283651090484E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999786498658251	WITHOUT_CLASSIFICATION	2.135013417500944E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999857404991481	WITHOUT_CLASSIFICATION	1.425950085198431E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999968921423892	WITHOUT_CLASSIFICATION	3.1078576107418557E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999888129214279	WITHOUT_CLASSIFICATION	1.1187078572002794E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998985500720696	WITHOUT_CLASSIFICATION	1.0144992793038213E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999815986513263	WITHOUT_CLASSIFICATION	1.8401348673669346E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993378558290078	WITHOUT_CLASSIFICATION	6.621441709922301E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999962611327996	WITHOUT_CLASSIFICATION	3.738867200406282E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999749394480523	WITHOUT_CLASSIFICATION	2.506055194769345E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999962258647531	WITHOUT_CLASSIFICATION	3.7741352467805105E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999927322645035	WITHOUT_CLASSIFICATION	7.2677354964609036E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999534278610261	WITHOUT_CLASSIFICATION	4.6572138973790437E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999534278610261	WITHOUT_CLASSIFICATION	4.6572138973790437E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999534278610261	WITHOUT_CLASSIFICATION	4.6572138973790437E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999534278610261	WITHOUT_CLASSIFICATION	4.6572138973790437E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999767426565419	WITHOUT_CLASSIFICATION	2.3257343458134984E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999180357189772	WITHOUT_CLASSIFICATION	8.196428102284684E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999611502875542	WITHOUT_CLASSIFICATION	3.884971244593706E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998177814739639	WITHOUT_CLASSIFICATION	1.8221852603601636E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.999393414281942	WITHOUT_CLASSIFICATION	6.065857180580816E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9994104855930454	WITHOUT_CLASSIFICATION	5.895144069545815E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999827337774652	WITHOUT_CLASSIFICATION	1.726622253479628E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999993772801166	WITHOUT_CLASSIFICATION	6.227198834423705E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.999987978882891	WITHOUT_CLASSIFICATION	1.202111710895623E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999854212323479	WITHOUT_CLASSIFICATION	1.4578767652121952E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998544526097981	WITHOUT_CLASSIFICATION	1.4554739020183698E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9038905953144524	WITHOUT_CLASSIFICATION	0.09610940468554754	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998762058475734	WITHOUT_CLASSIFICATION	1.23794152426569E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999968579239439	WITHOUT_CLASSIFICATION	3.142076056095481E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998544526097981	WITHOUT_CLASSIFICATION	1.4554739020183698E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9934977435232272	WITHOUT_CLASSIFICATION	0.006502256476772892	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999983158409531	WITHOUT_CLASSIFICATION	1.684159046873522E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999223370349691	WITHOUT_CLASSIFICATION	7.766296503084351E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999055719387583	WITHOUT_CLASSIFICATION	9.44280612416805E-5	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999153282984407	WITHOUT_CLASSIFICATION	8.467170155928841E-5	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999248286427567	WITHOUT_CLASSIFICATION	7.517135724326499E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999976863890438	WITHOUT_CLASSIFICATION	2.313610956252277E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999197312903841	WITHOUT_CLASSIFICATION	8.026870961579803E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945101521743	WITHOUT_CLASSIFICATION	5.489847825634489E-6	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999948847074024	WITHOUT_CLASSIFICATION	5.1152925975892445E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945101521743	WITHOUT_CLASSIFICATION	5.489847825634489E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999917560132153	WITHOUT_CLASSIFICATION	8.243986784636644E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998615391619443	WITHOUT_CLASSIFICATION	1.3846083805579238E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995566899223615	WITHOUT_CLASSIFICATION	4.433100776385562E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998105653521	WITHOUT_CLASSIFICATION	1.8943464790085076E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999998424850715	WITHOUT_CLASSIFICATION	1.5751492849808633E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999505429104193	WITHOUT_CLASSIFICATION	4.945708958057395E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999873371269339	WITHOUT_CLASSIFICATION	1.266287306623987E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996987536140745	WITHOUT_CLASSIFICATION	3.0124638592548257E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999873371269339	WITHOUT_CLASSIFICATION	1.266287306623987E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999927711827961	WITHOUT_CLASSIFICATION	7.228817203937263E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999900330443958	WITHOUT_CLASSIFICATION	9.966955604288089E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999796049591355	WITHOUT_CLASSIFICATION	2.0395040864451258E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9993251771634584	WITHOUT_CLASSIFICATION	6.748228365415729E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999505429104193	WITHOUT_CLASSIFICATION	4.945708958057395E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996987536140745	WITHOUT_CLASSIFICATION	3.0124638592548257E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999927711827961	WITHOUT_CLASSIFICATION	7.228817203937263E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999536225100416	WITHOUT_CLASSIFICATION	4.637748995846082E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999581591389923	WITHOUT_CLASSIFICATION	4.184086100766016E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999763651732275	WITHOUT_CLASSIFICATION	2.3634826772573663E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999789002152195	WITHOUT_CLASSIFICATION	2.1099784780559527E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999816122361094	WITHOUT_CLASSIFICATION	1.8387763890674967E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999968685584724	WITHOUT_CLASSIFICATION	3.131441527599092E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785025097886	WITHOUT_CLASSIFICATION	2.149749021139125E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999900330443958	WITHOUT_CLASSIFICATION	9.966955604288089E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999979678109711	WITHOUT_CLASSIFICATION	2.032189028825729E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998705827918013	WITHOUT_CLASSIFICATION	1.2941720819873324E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999851977348313	WITHOUT_CLASSIFICATION	1.480226516872054E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785025097886	WITHOUT_CLASSIFICATION	2.149749021139125E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998192607996402	WITHOUT_CLASSIFICATION	1.807392003597511E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785025097886	WITHOUT_CLASSIFICATION	2.149749021139125E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999823825317303	WITHOUT_CLASSIFICATION	1.761746826967987E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999925341893836	WITHOUT_CLASSIFICATION	7.465810616312974E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997546609425545	WITHOUT_CLASSIFICATION	2.453390574455113E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998403322487273	WITHOUT_CLASSIFICATION	1.5966775127271892E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992146295477	WITHOUT_CLASSIFICATION	7.853704522167126E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999957210769377	WITHOUT_CLASSIFICATION	4.27892306226053E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999961333297008	WITHOUT_CLASSIFICATION	3.866670299158809E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999140785067757	WITHOUT_CLASSIFICATION	8.592149322428243E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998581133714165	WITHOUT_CLASSIFICATION	1.4188662858343756E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.999196920479177	WITHOUT_CLASSIFICATION	8.030795208230137E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999972867062651	WITHOUT_CLASSIFICATION	2.7132937348311823E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999196487276117	WITHOUT_CLASSIFICATION	8.035127238830169E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9965864323421028	WITHOUT_CLASSIFICATION	0.0034135676578972646	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999545059815715	WITHOUT_CLASSIFICATION	4.549401842858656E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999872148648573	WITHOUT_CLASSIFICATION	1.2785135142748089E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996970908351	WITHOUT_CLASSIFICATION	3.029091648056475E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999976987779144	WITHOUT_CLASSIFICATION	2.301222085569015E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9980903905942344	WITHOUT_CLASSIFICATION	0.0019096094057655265	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999354008428	WITHOUT_CLASSIFICATION	6.459915720421244E-7	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999970034565672	WITHOUT_CLASSIFICATION	2.9965434328282763E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996400452861178	WITHOUT_CLASSIFICATION	3.599547138822592E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996400452861178	WITHOUT_CLASSIFICATION	3.599547138822592E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999933038972905	WITHOUT_CLASSIFICATION	6.6961027095917395E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999661022484395	WITHOUT_CLASSIFICATION	3.389775156054034E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996031287983	WITHOUT_CLASSIFICATION	3.968712016999899E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999846685488631	WITHOUT_CLASSIFICATION	1.5331451136816776E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999998511846467	WITHOUT_CLASSIFICATION	1.4881535334126074E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999960512358554	WITHOUT_CLASSIFICATION	3.948764144588013E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998457082883816	WITHOUT_CLASSIFICATION	1.5429171161836754E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9996167995613396	WITHOUT_CLASSIFICATION	3.8320043866041815E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9844438211550929	WITHOUT_CLASSIFICATION	0.01555617884490718	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999946608091098	WITHOUT_CLASSIFICATION	5.3391908901244014E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996454145688276	WITHOUT_CLASSIFICATION	3.5458543117241606E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9998435792694296	WITHOUT_CLASSIFICATION	1.5642073057038023E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9988886474162324	WITHOUT_CLASSIFICATION	0.0011113525837676645	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999940091082897	WITHOUT_CLASSIFICATION	5.990891710319024E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999990555711726	WITHOUT_CLASSIFICATION	9.444288274857824E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997518833604033	WITHOUT_CLASSIFICATION	2.4811663959668046E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999844662842178	WITHOUT_CLASSIFICATION	1.553371578223146E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999844662842178	WITHOUT_CLASSIFICATION	1.553371578223146E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999977260331312	WITHOUT_CLASSIFICATION	2.2739668688073874E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999140785067757	WITHOUT_CLASSIFICATION	8.592149322428243E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9997234130171041	WITHOUT_CLASSIFICATION	2.7658698289596324E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997769175440814	WITHOUT_CLASSIFICATION	2.230824559186948E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999997477415506	WITHOUT_CLASSIFICATION	2.5225844939886426E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999871211616963	WITHOUT_CLASSIFICATION	1.2878838303754924E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.999906519650222	WITHOUT_CLASSIFICATION	9.348034977798172E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9996139441403109	WITHOUT_CLASSIFICATION	3.860558596891342E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999501819853914	WITHOUT_CLASSIFICATION	4.981801460855685E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999464553207907	WITHOUT_CLASSIFICATION	5.3544679209215876E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.999997832932888	WITHOUT_CLASSIFICATION	2.1670671119700194E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997371412338	WITHOUT_CLASSIFICATION	2.628587662897665E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998438521234698	WITHOUT_CLASSIFICATION	1.5614787653010174E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999408476560403	WITHOUT_CLASSIFICATION	5.915234395974384E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999994452612753	WITHOUT_CLASSIFICATION	5.547387246342971E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999853188707905	WITHOUT_CLASSIFICATION	1.468112920950878E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999972578164689	WITHOUT_CLASSIFICATION	2.7421835311288988E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999986490177497	WITHOUT_CLASSIFICATION	1.3509822502745823E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999995269937555	WITHOUT_CLASSIFICATION	4.730062445082511E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999994002521079	WITHOUT_CLASSIFICATION	5.997478921836666E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999704870809514	WITHOUT_CLASSIFICATION	2.951291904861033E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999019170036144	WITHOUT_CLASSIFICATION	9.808299638561564E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999893060694689	WITHOUT_CLASSIFICATION	1.0693930531072734E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999967030211242	WITHOUT_CLASSIFICATION	3.2969788758143905E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999806145803152	WITHOUT_CLASSIFICATION	1.9385419684886553E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999941435113615	WITHOUT_CLASSIFICATION	5.856488638566797E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9984615984872743	WITHOUT_CLASSIFICATION	0.0015384015127255994	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999250613877545	WITHOUT_CLASSIFICATION	7.49386122454427E-5	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999637336257212	WITHOUT_CLASSIFICATION	3.626637427886269E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996614387009825	WITHOUT_CLASSIFICATION	3.385612990176032E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.99997543328211	WITHOUT_CLASSIFICATION	2.4566717889917656E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999774600682123	WITHOUT_CLASSIFICATION	2.2539931787621737E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999976764743266	WITHOUT_CLASSIFICATION	2.3235256733967344E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999883716119505	WITHOUT_CLASSIFICATION	1.1628388049460411E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9975363727919444	WITHOUT_CLASSIFICATION	0.002463627208055723	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996178383382825	WITHOUT_CLASSIFICATION	3.8216166171734455E-4	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999941747388681	WITHOUT_CLASSIFICATION	5.82526113199673E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999270600603504	WITHOUT_CLASSIFICATION	7.293993964969875E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999270600603504	WITHOUT_CLASSIFICATION	7.293993964969875E-5	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999898364060134	WITHOUT_CLASSIFICATION	1.0163593986682405E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999923459819722	WITHOUT_CLASSIFICATION	7.654018027838188E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995895514425785	WITHOUT_CLASSIFICATION	4.104485574215016E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995895514425785	WITHOUT_CLASSIFICATION	4.104485574215016E-4	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.999996540158261	WITHOUT_CLASSIFICATION	3.4598417389912487E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999761255424237	WITHOUT_CLASSIFICATION	2.387445757632522E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999946050019414	WITHOUT_CLASSIFICATION	5.39499805859376E-6	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999997133158248	WITHOUT_CLASSIFICATION	2.8668417518949543E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999776099492768	WITHOUT_CLASSIFICATION	2.239005072334505E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999951859419931	WITHOUT_CLASSIFICATION	4.814058006887499E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999951859419931	WITHOUT_CLASSIFICATION	4.814058006887499E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999806572517682	WITHOUT_CLASSIFICATION	1.9342748231799746E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998334625870221	WITHOUT_CLASSIFICATION	1.6653741297787203E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999995720043661	WITHOUT_CLASSIFICATION	4.279956338925371E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999995720043661	WITHOUT_CLASSIFICATION	4.279956338925371E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999967004528445	WITHOUT_CLASSIFICATION	3.2995471555518263E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999975982891688	WITHOUT_CLASSIFICATION	2.4017108312496636E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999988978131689	WITHOUT_CLASSIFICATION	1.1021868311927508E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999903658143932	WITHOUT_CLASSIFICATION	9.634185606864523E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999929608663337	WITHOUT_CLASSIFICATION	7.0391336663088155E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.99999573528148	WITHOUT_CLASSIFICATION	4.2647185199723455E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999990264881279	WITHOUT_CLASSIFICATION	9.735118721181284E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.999995475370501	WITHOUT_CLASSIFICATION	4.524629499030282E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.999995798704703	WITHOUT_CLASSIFICATION	4.201295296954935E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999132721494359	WITHOUT_CLASSIFICATION	8.672785056403245E-5	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998505370704692	WITHOUT_CLASSIFICATION	1.4946292953083642E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9997246169905148	WITHOUT_CLASSIFICATION	2.7538300948514084E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9998319642057639	WITHOUT_CLASSIFICATION	1.6803579423605366E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999991753420914	WITHOUT_CLASSIFICATION	8.246579086006571E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999957483732583	WITHOUT_CLASSIFICATION	4.2516267417080005E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999115472403282	WITHOUT_CLASSIFICATION	8.845275967184362E-5	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999948780792923	WITHOUT_CLASSIFICATION	5.121920707626253E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999774524135068	WITHOUT_CLASSIFICATION	2.254758649328316E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999924725303603	WITHOUT_CLASSIFICATION	7.527469639755367E-6	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999739453163999	WITHOUT_CLASSIFICATION	2.60546836000195E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999869665417369	WITHOUT_CLASSIFICATION	1.3033458263114913E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999955564565458	WITHOUT_CLASSIFICATION	4.443543454198312E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9983708988980123	WITHOUT_CLASSIFICATION	0.0016291011019876256	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9995185240182817	WITHOUT_CLASSIFICATION	4.8147598171824005E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9996026717546685	WITHOUT_CLASSIFICATION	3.973282453313826E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999981892558921	WITHOUT_CLASSIFICATION	1.8107441079472307E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999924567153273	WITHOUT_CLASSIFICATION	7.543284672654774E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999991127612873	WITHOUT_CLASSIFICATION	8.872387127151255E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999824231660148	WITHOUT_CLASSIFICATION	1.757683398520314E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999801932585873	WITHOUT_CLASSIFICATION	1.9806741412712264E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999839396470046	WITHOUT_CLASSIFICATION	1.606035299533974E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999867171365369	WITHOUT_CLASSIFICATION	1.3282863463189711E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999594353976649	WITHOUT_CLASSIFICATION	4.056460233504193E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998319315880495	WITHOUT_CLASSIFICATION	1.680684119505069E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999799464782754	WITHOUT_CLASSIFICATION	2.005352172465138E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999939740588836	WITHOUT_CLASSIFICATION	6.02594111651299E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999965038315647	WITHOUT_CLASSIFICATION	3.496168435246829E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999991131076102	WITHOUT_CLASSIFICATION	8.868923896774689E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999996159852407	WITHOUT_CLASSIFICATION	3.840147593024984E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999959658736386	WITHOUT_CLASSIFICATION	4.034126361455044E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999957972303795	WITHOUT_CLASSIFICATION	4.2027696205834746E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999958152437548	WITHOUT_CLASSIFICATION	4.184756245201831E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997584412713	WITHOUT_CLASSIFICATION	2.415587286146904E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999990185544025	WITHOUT_CLASSIFICATION	9.814455975064751E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999610212141326	WITHOUT_CLASSIFICATION	3.897878586744387E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999978160658424	WITHOUT_CLASSIFICATION	2.1839341575355765E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999819478279879	WITHOUT_CLASSIFICATION	1.8052172012128787E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999945143666831	WITHOUT_CLASSIFICATION	5.485633316937022E-6	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9985636332131281	WITHOUT_CLASSIFICATION	0.0014363667868718228	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999995680372791	WITHOUT_CLASSIFICATION	4.3196272088906937E-7	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999994053333136	WITHOUT_CLASSIFICATION	5.946666865005861E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999835717353847	WITHOUT_CLASSIFICATION	1.6428264615397322E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999991644457703	WITHOUT_CLASSIFICATION	8.355542296745198E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999927363598552	WITHOUT_CLASSIFICATION	7.263640144898757E-6	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999971127918789	WITHOUT_CLASSIFICATION	2.8872081210345015E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999559248828858	WITHOUT_CLASSIFICATION	4.407511711418127E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994224211503	WITHOUT_CLASSIFICATION	5.775788497704556E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994224211503	WITHOUT_CLASSIFICATION	5.775788497704556E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999956642711719	WITHOUT_CLASSIFICATION	4.335728828031678E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999990457931928	WITHOUT_CLASSIFICATION	9.542068071956564E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999975852548404	WITHOUT_CLASSIFICATION	2.414745159656371E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999995683013111	WITHOUT_CLASSIFICATION	4.316986889051469E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999800221651701	WITHOUT_CLASSIFICATION	1.997783482987511E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999456928017559	WITHOUT_CLASSIFICATION	5.430719824409887E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999955387615517	WITHOUT_CLASSIFICATION	4.461238448361198E-6	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995313628866	WITHOUT_CLASSIFICATION	4.686371133934021E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.99998214126693	WITHOUT_CLASSIFICATION	1.7858733070124522E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999970616451427	WITHOUT_CLASSIFICATION	2.9383548573484454E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999971561462675	WITHOUT_CLASSIFICATION	2.8438537325297673E-6	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9992880134925085	WITHOUT_CLASSIFICATION	7.119865074914371E-4	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999968566521891	WITHOUT_CLASSIFICATION	3.1433478110182175E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998942545020729	WITHOUT_CLASSIFICATION	1.0574549792701135E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996587738479203	WITHOUT_CLASSIFICATION	3.41226152079672E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996587738479203	WITHOUT_CLASSIFICATION	3.41226152079672E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999865101852112	WITHOUT_CLASSIFICATION	1.3489814788836784E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999855538928863	WITHOUT_CLASSIFICATION	1.4446107113538696E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998864959619875	WITHOUT_CLASSIFICATION	1.1350403801245973E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997070539246	WITHOUT_CLASSIFICATION	2.9294607546062646E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904165548725	WITHOUT_CLASSIFICATION	9.583445127514685E-6	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806060610529	WITHOUT_CLASSIFICATION	1.9393938947076345E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998809987573135	WITHOUT_CLASSIFICATION	1.1900124268652223E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999228615046426	WITHOUT_CLASSIFICATION	7.713849535739889E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999986979520137	WITHOUT_CLASSIFICATION	1.3020479863392776E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999302608157249	WITHOUT_CLASSIFICATION	6.973918427515346E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999957382696656	WITHOUT_CLASSIFICATION	4.261730334352013E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998121634794341	WITHOUT_CLASSIFICATION	1.8783652056586131E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999850254193106	WITHOUT_CLASSIFICATION	1.4974580689526933E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999911125497337	WITHOUT_CLASSIFICATION	8.887450266303114E-6	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999786089727722	WITHOUT_CLASSIFICATION	2.139102722786051E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999989323398768	WITHOUT_CLASSIFICATION	1.0676601231552798E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999906845116778	WITHOUT_CLASSIFICATION	9.315488322257964E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999888389473627	WITHOUT_CLASSIFICATION	1.1161052637374836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999756142360235	WITHOUT_CLASSIFICATION	2.4385763976410042E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999963792520481	WITHOUT_CLASSIFICATION	3.620747951806068E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999977389192749	WITHOUT_CLASSIFICATION	2.261080725184922E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999875634369	WITHOUT_CLASSIFICATION	1.2436563106252858E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999936995751082	WITHOUT_CLASSIFICATION	6.300424891805967E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999533039947196	WITHOUT_CLASSIFICATION	4.669600528052413E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999435617334657	WITHOUT_CLASSIFICATION	5.6438266534343516E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999924113383674	WITHOUT_CLASSIFICATION	7.588661632601197E-6	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999990653055727	WITHOUT_CLASSIFICATION	9.346944273652607E-7	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999953362184935	WITHOUT_CLASSIFICATION	4.663781506513941E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999799771136312	WITHOUT_CLASSIFICATION	2.0022886368816447E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999937249213857	WITHOUT_CLASSIFICATION	6.2750786143277585E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999756384908068	WITHOUT_CLASSIFICATION	2.4361509193199E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999978512696249	WITHOUT_CLASSIFICATION	2.148730375071847E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999822860782599	WITHOUT_CLASSIFICATION	1.7713921740132518E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999937256911331	WITHOUT_CLASSIFICATION	6.2743088668778175E-6	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999723097955064	WITHOUT_CLASSIFICATION	2.7690204493591766E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985733040366	WITHOUT_CLASSIFICATION	1.4266959632948057E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999949945276326	WITHOUT_CLASSIFICATION	5.005472367454669E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999868963765547	WITHOUT_CLASSIFICATION	1.3103623445338916E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999700720926139	WITHOUT_CLASSIFICATION	2.992790738613693E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999997333159119	WITHOUT_CLASSIFICATION	2.666840880996464E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999464152925719	WITHOUT_CLASSIFICATION	5.358470742807499E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999464152925719	WITHOUT_CLASSIFICATION	5.358470742807499E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999892240433337	WITHOUT_CLASSIFICATION	1.0775956666201717E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999980967605073	WITHOUT_CLASSIFICATION	1.90323949270158E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997200214908095	WITHOUT_CLASSIFICATION	2.799785091904727E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999823526477337	WITHOUT_CLASSIFICATION	1.7647352266271097E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999924806404712	WITHOUT_CLASSIFICATION	7.519359528863312E-6	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999824386262155	WITHOUT_CLASSIFICATION	1.7561373784563157E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999876202039308	WITHOUT_CLASSIFICATION	1.2379796069231625E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9992461160430567	WITHOUT_CLASSIFICATION	7.538839569433104E-4	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999998678678912	WITHOUT_CLASSIFICATION	1.3213210880927415E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761262671778	WITHOUT_CLASSIFICATION	2.3873732822172536E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999760681308563	WITHOUT_CLASSIFICATION	2.393186914367219E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9989081214998191	WITHOUT_CLASSIFICATION	0.001091878500180837	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9933220921720373	WITHOUT_CLASSIFICATION	0.006677907827962694	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999990594520629	WITHOUT_CLASSIFICATION	9.405479371852436E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999945268060072	WITHOUT_CLASSIFICATION	5.4731939927826675E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9993794878362243	WITHOUT_CLASSIFICATION	6.205121637757007E-4	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999979580327677	WITHOUT_CLASSIFICATION	2.0419672322826496E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999996647437673	WITHOUT_CLASSIFICATION	3.352562326846384E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999979583370693	WITHOUT_CLASSIFICATION	2.0416629306871295E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999697316452572	WITHOUT_CLASSIFICATION	3.026835474277943E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998357378286	WITHOUT_CLASSIFICATION	1.6426217134507043E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999452897459289	WITHOUT_CLASSIFICATION	5.471025407112923E-5	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999870532343942	WITHOUT_CLASSIFICATION	1.2946765605735658E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998121835182052	WITHOUT_CLASSIFICATION	1.8781648179484804E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999812008442128	WITHOUT_CLASSIFICATION	1.8799155787094065E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999988416197021	WITHOUT_CLASSIFICATION	1.1583802978038605E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999986147477644	WITHOUT_CLASSIFICATION	1.3852522355464116E-6	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9996188254840069	WITHOUT_CLASSIFICATION	3.811745159930498E-4	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999886512929592	WITHOUT_CLASSIFICATION	1.134870704085374E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999960199424178	WITHOUT_CLASSIFICATION	3.980057582191498E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999999039131048	WITHOUT_CLASSIFICATION	9.608689519628712E-7	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999982456675854	WITHOUT_CLASSIFICATION	1.7543324146075388E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999988313662598	WITHOUT_CLASSIFICATION	1.1686337402027245E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991122976635	WITHOUT_CLASSIFICATION	8.877023366157232E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999944789690456	WITHOUT_CLASSIFICATION	5.5210309544903605E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999252322171	WITHOUT_CLASSIFICATION	7.47677828950935E-7	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999943055804931	WITHOUT_CLASSIFICATION	5.6944195069927E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998129478181998	WITHOUT_CLASSIFICATION	1.8705218180015745E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999965827363128	WITHOUT_CLASSIFICATION	3.4172636871266386E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999869208001281	WITHOUT_CLASSIFICATION	1.3079199872030994E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999963555892966	WITHOUT_CLASSIFICATION	3.6444107033131677E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999997477738685	WITHOUT_CLASSIFICATION	2.522261315732413E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999833781973032	WITHOUT_CLASSIFICATION	1.6621802696763905E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999514462271824	WITHOUT_CLASSIFICATION	4.8553772817517406E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9995092275846267	WITHOUT_CLASSIFICATION	4.907724153733236E-4	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999584909882417	WITHOUT_CLASSIFICATION	4.1509011758262494E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998940159885	WITHOUT_CLASSIFICATION	1.0598401134268954E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999968566521891	WITHOUT_CLASSIFICATION	3.1433478110182175E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999987639682866	WITHOUT_CLASSIFICATION	1.236031713401728E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998972366734	WITHOUT_CLASSIFICATION	1.027633266435487E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999844722697536	WITHOUT_CLASSIFICATION	1.5527730246421077E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999995382142527	WITHOUT_CLASSIFICATION	4.617857473713434E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999932663801253	WITHOUT_CLASSIFICATION	6.7336198746324245E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999981569963916	WITHOUT_CLASSIFICATION	1.8430036083950997E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999556801840006	WITHOUT_CLASSIFICATION	4.4319815999293235E-5	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9991478681959008	WITHOUT_CLASSIFICATION	8.521318040990979E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999989055507885	WITHOUT_CLASSIFICATION	1.0944492115013623E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999953829863153	WITHOUT_CLASSIFICATION	4.61701368464961E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999502999649144	WITHOUT_CLASSIFICATION	4.970003508555907E-5	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998187011408117	WITHOUT_CLASSIFICATION	1.8129885918820594E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999958763930213	WITHOUT_CLASSIFICATION	4.123606978650911E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999482992379927	WITHOUT_CLASSIFICATION	5.1700762007322255E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776038972365	WITHOUT_CLASSIFICATION	1.2239610276354438E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997418545806795	WITHOUT_CLASSIFICATION	2.581454193203916E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999999656201938	WITHOUT_CLASSIFICATION	3.437980619930278E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999962984312384	WITHOUT_CLASSIFICATION	3.7015687615616323E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776038972365	WITHOUT_CLASSIFICATION	1.2239610276354438E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994333093739881	WITHOUT_CLASSIFICATION	5.666906260119061E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997950066305	WITHOUT_CLASSIFICATION	2.0499336949774605E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998971704211	WITHOUT_CLASSIFICATION	1.0282957879155019E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999937995726123	WITHOUT_CLASSIFICATION	6.2004273876755E-6	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999880596343125	WITHOUT_CLASSIFICATION	1.1940365687509847E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999531284103047	WITHOUT_CLASSIFICATION	4.6871589695370516E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999065265405	WITHOUT_CLASSIFICATION	9.347345950202222E-7	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996204445137457	WITHOUT_CLASSIFICATION	3.795554862543004E-4	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998806443047573	WITHOUT_CLASSIFICATION	1.1935569524275502E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996045224306889	WITHOUT_CLASSIFICATION	3.9547756931110985E-4	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995421794508474	WITHOUT_CLASSIFICATION	4.5782054915250597E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9935929291218314	WITHOUT_CLASSIFICATION	0.0064070708781685535	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999981643076556	WITHOUT_CLASSIFICATION	1.8356923443334966E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999918564383121	WITHOUT_CLASSIFICATION	8.143561687942412E-6	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999809636464945	WITHOUT_CLASSIFICATION	1.9036353505546696E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999893060694689	WITHOUT_CLASSIFICATION	1.0693930531072734E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.99999867215397	WITHOUT_CLASSIFICATION	1.3278460300349004E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996735660002	WITHOUT_CLASSIFICATION	3.264339998288514E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9982828640214692	WITHOUT_CLASSIFICATION	0.0017171359785308122	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999964299706973	WITHOUT_CLASSIFICATION	3.5700293025824735E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999969553352129	WITHOUT_CLASSIFICATION	3.0446647871610143E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.99999849677377	WITHOUT_CLASSIFICATION	1.5032262300977905E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999895174668225	WITHOUT_CLASSIFICATION	1.0482533177491392E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999676099	WITHOUT_CLASSIFICATION	3.2390100020152885E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999470477496	WITHOUT_CLASSIFICATION	5.295225039291243E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999665867210131	WITHOUT_CLASSIFICATION	3.3413278986866534E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998719368126684	WITHOUT_CLASSIFICATION	1.2806318733151823E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998032860212439	WITHOUT_CLASSIFICATION	1.9671397875613693E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.99999031479004	WITHOUT_CLASSIFICATION	9.685209960144683E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999967256062557	WITHOUT_CLASSIFICATION	3.2743937443043386E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999981203825015	WITHOUT_CLASSIFICATION	1.8796174985728536E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998617444268714	WITHOUT_CLASSIFICATION	1.3825557312863014E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999959343785625	WITHOUT_CLASSIFICATION	4.0656214375249176E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999995788007808	WITHOUT_CLASSIFICATION	4.211992192433771E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999834009478691	WITHOUT_CLASSIFICATION	1.6599052130895342E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999020530206	WITHOUT_CLASSIFICATION	9.794697941326911E-8	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999988639912357	WITHOUT_CLASSIFICATION	1.1360087642767066E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999953843651078	WITHOUT_CLASSIFICATION	4.615634892151392E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997768889303	WITHOUT_CLASSIFICATION	2.231110696011713E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999971074554033	WITHOUT_CLASSIFICATION	2.8925445966903473E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999468452068033	WITHOUT_CLASSIFICATION	5.315479319658655E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999468452068033	WITHOUT_CLASSIFICATION	5.315479319658655E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994257940552471	WITHOUT_CLASSIFICATION	5.742059447529785E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999948871542909	WITHOUT_CLASSIFICATION	5.112845709126411E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999799910043254	WITHOUT_CLASSIFICATION	2.0008995674565866E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.7874662842097159	WITHOUT_CLASSIFICATION	0.21253371579028413	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999695555373233	WITHOUT_CLASSIFICATION	3.044446267681685E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999695555373233	WITHOUT_CLASSIFICATION	3.044446267681685E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999952178362987	WITHOUT_CLASSIFICATION	4.782163701275666E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999935283100218	WITHOUT_CLASSIFICATION	6.471689978204065E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999635659222799	WITHOUT_CLASSIFICATION	3.643407772013904E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999252545298016	WITHOUT_CLASSIFICATION	7.474547019841601E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999877389770552	WITHOUT_CLASSIFICATION	1.2261022944756163E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999924591283046	WITHOUT_CLASSIFICATION	7.540871695410821E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999993778689095	WITHOUT_CLASSIFICATION	6.221310905140434E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998841471948877	WITHOUT_CLASSIFICATION	1.158528051122833E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999562375958613	WITHOUT_CLASSIFICATION	4.376240413883733E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503542506392	WITHOUT_CLASSIFICATION	4.9645749360954524E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503542506392	WITHOUT_CLASSIFICATION	4.9645749360954524E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998990457055756	WITHOUT_CLASSIFICATION	1.0095429442439161E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999957194485304	WITHOUT_CLASSIFICATION	4.28055146964372E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999957916639048	WITHOUT_CLASSIFICATION	4.20833609508886E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997362455634606	WITHOUT_CLASSIFICATION	2.63754436539311E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9969487642979876	WITHOUT_CLASSIFICATION	0.0030512357020124154	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909945278657	WITHOUT_CLASSIFICATION	9.00547213437396E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753224182956	WITHOUT_CLASSIFICATION	2.4677581704433508E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999938525211011	WITHOUT_CLASSIFICATION	6.147478898893862E-6	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999291652381828	WITHOUT_CLASSIFICATION	7.083476181721469E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999889020984215	WITHOUT_CLASSIFICATION	1.109790157851849E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999350188608219	WITHOUT_CLASSIFICATION	6.498113917814498E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996045224306889	WITHOUT_CLASSIFICATION	3.9547756931110985E-4	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999979196270688	WITHOUT_CLASSIFICATION	2.0803729311942947E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994919510047309	WITHOUT_CLASSIFICATION	5.080489952691018E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999854365030364	WITHOUT_CLASSIFICATION	1.456349696368914E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999385115886014	WITHOUT_CLASSIFICATION	6.148841139861346E-5	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998524650285526	WITHOUT_CLASSIFICATION	1.4753497144727226E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9997308497193459	WITHOUT_CLASSIFICATION	2.691502806540714E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9994940257012062	WITHOUT_CLASSIFICATION	5.059742987938124E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999941097131985	WITHOUT_CLASSIFICATION	5.890286801540592E-6	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997272035378995	WITHOUT_CLASSIFICATION	2.7279646210053715E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999731231351652	WITHOUT_CLASSIFICATION	2.6876864834793865E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999731231351652	WITHOUT_CLASSIFICATION	2.6876864834793865E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998544526097981	WITHOUT_CLASSIFICATION	1.4554739020183698E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999914112697	WITHOUT_CLASSIFICATION	8.58873020605123E-9	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999533840134206	WITHOUT_CLASSIFICATION	4.66159865794441E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996455823068282	WITHOUT_CLASSIFICATION	3.5441769317177637E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999944609663188	WITHOUT_CLASSIFICATION	5.539033681088906E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999974783641113	WITHOUT_CLASSIFICATION	2.5216358886988707E-6	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998105653521	WITHOUT_CLASSIFICATION	1.8943464790085076E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998202304609	WITHOUT_CLASSIFICATION	1.7976953917505643E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999536225100416	WITHOUT_CLASSIFICATION	4.637748995846082E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999994963154876	WITHOUT_CLASSIFICATION	5.036845124056689E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785025097886	WITHOUT_CLASSIFICATION	2.149749021139125E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999996932724642	WITHOUT_CLASSIFICATION	3.067275358144493E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999976457669453	WITHOUT_CLASSIFICATION	2.3542330546363675E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999960341485296	WITHOUT_CLASSIFICATION	3.965851470449301E-6	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999604027811319	WITHOUT_CLASSIFICATION	3.959721886816062E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979476860796	WITHOUT_CLASSIFICATION	2.052313920360836E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999909325330815	WITHOUT_CLASSIFICATION	9.06746691855872E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999641316927788	WITHOUT_CLASSIFICATION	3.5868307221348116E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999104824189016	WITHOUT_CLASSIFICATION	8.951758109844054E-5	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999984851616783	WITHOUT_CLASSIFICATION	1.514838321719509E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999995620354923	WITHOUT_CLASSIFICATION	4.379645076979101E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997306035991	WITHOUT_CLASSIFICATION	2.6939640092263226E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999988978131689	WITHOUT_CLASSIFICATION	1.1021868311927508E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999875654182366	WITHOUT_CLASSIFICATION	1.243458176323852E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889333758649	WITHOUT_CLASSIFICATION	1.1066624135093614E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889333758649	WITHOUT_CLASSIFICATION	1.1066624135093614E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999894151717141	WITHOUT_CLASSIFICATION	1.0584828285895536E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99994934680538	WITHOUT_CLASSIFICATION	5.065319462006315E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999903716676382	WITHOUT_CLASSIFICATION	9.628332361831382E-6	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999995167709329	WITHOUT_CLASSIFICATION	4.83229067164326E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999989315562203	WITHOUT_CLASSIFICATION	1.0684437796937032E-5	TEST
