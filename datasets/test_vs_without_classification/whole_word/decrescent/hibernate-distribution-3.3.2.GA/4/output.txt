//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998549522840502	WITHOUT_CLASSIFICATION	1.4504771594982358E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9993934789039874	WITHOUT_CLASSIFICATION	6.065210960125296E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999892997378658	WITHOUT_CLASSIFICATION	1.0700262134302999E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999747800614829	WITHOUT_CLASSIFICATION	2.521993851708415E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999747800614829	WITHOUT_CLASSIFICATION	2.521993851708415E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999509373497527	WITHOUT_CLASSIFICATION	4.906265024736271E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999692167137308	WITHOUT_CLASSIFICATION	3.0783286269198654E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999846775519006	WITHOUT_CLASSIFICATION	1.532244809947614E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958070235869	WITHOUT_CLASSIFICATION	4.192976413033679E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999810642554331	WITHOUT_CLASSIFICATION	1.893574456687632E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999810642554331	WITHOUT_CLASSIFICATION	1.893574456687632E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999694929305576	WITHOUT_CLASSIFICATION	3.0507069442486152E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999933435761743	WITHOUT_CLASSIFICATION	6.656423825660043E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999673184277756	WITHOUT_CLASSIFICATION	3.268157222432466E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996510374368763	WITHOUT_CLASSIFICATION	3.4896256312362376E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999836388722161	WITHOUT_CLASSIFICATION	1.6361127783914602E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999747257721735	WITHOUT_CLASSIFICATION	2.527422782658339E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9999312531366394	WITHOUT_CLASSIFICATION	6.874686336046974E-5	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999747045748709	WITHOUT_CLASSIFICATION	2.5295425129053686E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999922278896771	WITHOUT_CLASSIFICATION	7.772110322811165E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999922278896771	WITHOUT_CLASSIFICATION	7.772110322811165E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999610540697217	WITHOUT_CLASSIFICATION	3.894593027834028E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999746394528009	WITHOUT_CLASSIFICATION	2.536054719908644E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998233719675237	WITHOUT_CLASSIFICATION	1.766280324762726E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999600226010499	WITHOUT_CLASSIFICATION	3.9977398950038465E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9998787541651021	WITHOUT_CLASSIFICATION	1.2124583489795865E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9992418860200867	WITHOUT_CLASSIFICATION	7.581139799132782E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9992418860200867	WITHOUT_CLASSIFICATION	7.581139799132782E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999775577111651	WITHOUT_CLASSIFICATION	2.244228883478912E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9990687034303297	WITHOUT_CLASSIFICATION	9.312965696702478E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999889095880116	WITHOUT_CLASSIFICATION	1.1090411988534051E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997395008113431	WITHOUT_CLASSIFICATION	2.6049918865691233E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999709948420695	WITHOUT_CLASSIFICATION	2.90051579304855E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685018137832	WITHOUT_CLASSIFICATION	3.149818621691935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999905952702225	WITHOUT_CLASSIFICATION	9.404729777428644E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999509043845607	WITHOUT_CLASSIFICATION	4.90956154392616E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999226895646769	WITHOUT_CLASSIFICATION	7.731043532308004E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999226895646769	WITHOUT_CLASSIFICATION	7.731043532308004E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999163320558063	WITHOUT_CLASSIFICATION	8.366794419359757E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999890102011753	WITHOUT_CLASSIFICATION	1.0989798824701078E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999739158170027	WITHOUT_CLASSIFICATION	2.608418299731714E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999840186774663	WITHOUT_CLASSIFICATION	1.5981322533723703E-5	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999989621454335	WITHOUT_CLASSIFICATION	1.037854566432661E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999998801968303	WITHOUT_CLASSIFICATION	1.1980316968931103E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993031170468775	WITHOUT_CLASSIFICATION	6.968829531224558E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999340026523302	WITHOUT_CLASSIFICATION	6.599734766969654E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999926041920494	WITHOUT_CLASSIFICATION	7.395807950560715E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999052195749804	WITHOUT_CLASSIFICATION	9.47804250196501E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999767292456894	WITHOUT_CLASSIFICATION	2.3270754310552756E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999923584654709	WITHOUT_CLASSIFICATION	7.641534529169728E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999808185135779	WITHOUT_CLASSIFICATION	1.9181486422150393E-5	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999031368909177	WITHOUT_CLASSIFICATION	9.686310908232687E-5	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999777798523798	WITHOUT_CLASSIFICATION	2.22201476202394E-5	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999861980590525	WITHOUT_CLASSIFICATION	1.3801940947470259E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999878487114605	WITHOUT_CLASSIFICATION	1.2151288539539603E-5	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999982827527279	WITHOUT_CLASSIFICATION	1.7172472720986437E-5	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999585542550766	WITHOUT_CLASSIFICATION	4.144574492334728E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999978792684192	WITHOUT_CLASSIFICATION	2.1207315808016364E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999378364793591	WITHOUT_CLASSIFICATION	6.216352064090931E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999959216529705	WITHOUT_CLASSIFICATION	4.078347029561549E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999959975068176	WITHOUT_CLASSIFICATION	4.002493182348904E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999629069683207	WITHOUT_CLASSIFICATION	3.709303167928916E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999846771127497	WITHOUT_CLASSIFICATION	1.532288725020823E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999883060390863	WITHOUT_CLASSIFICATION	1.169396091378535E-5	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999986650021876	WITHOUT_CLASSIFICATION	1.3349978124290495E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999876131070641	WITHOUT_CLASSIFICATION	1.2386892935827987E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999886829681606	WITHOUT_CLASSIFICATION	1.1317031839421087E-5	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998566949245983	WITHOUT_CLASSIFICATION	1.4330507540180767E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999979078637792	WITHOUT_CLASSIFICATION	2.0921362208836607E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999934818201657	WITHOUT_CLASSIFICATION	6.518179834332984E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998674887999367	WITHOUT_CLASSIFICATION	1.3251120006320486E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999971014595194	WITHOUT_CLASSIFICATION	2.8985404805949867E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999965320098568	WITHOUT_CLASSIFICATION	3.4679901431936255E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999816625912038	WITHOUT_CLASSIFICATION	1.833740879618919E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999971014595194	WITHOUT_CLASSIFICATION	2.8985404805949867E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999991554026153	WITHOUT_CLASSIFICATION	8.445973846641456E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999375558473312	WITHOUT_CLASSIFICATION	6.244415266876655E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999988419028569	WITHOUT_CLASSIFICATION	1.1580971430938414E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.999984220730023	WITHOUT_CLASSIFICATION	1.5779269977060618E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999784968740463	WITHOUT_CLASSIFICATION	2.1503125953698044E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999784968740463	WITHOUT_CLASSIFICATION	2.1503125953698044E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999227068858196	WITHOUT_CLASSIFICATION	7.72931141803943E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999949751849559	WITHOUT_CLASSIFICATION	5.024815044094553E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999520799730439	WITHOUT_CLASSIFICATION	4.792002695606214E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999924632897238	WITHOUT_CLASSIFICATION	7.536710276098245E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999793295975393	WITHOUT_CLASSIFICATION	2.0670402460735355E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999752132663791	WITHOUT_CLASSIFICATION	2.478673362094993E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.999991407731978	WITHOUT_CLASSIFICATION	8.592268021986217E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999897584782643	WITHOUT_CLASSIFICATION	1.0241521735637595E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999869514891149	WITHOUT_CLASSIFICATION	1.3048510885110002E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999560056378165	WITHOUT_CLASSIFICATION	4.3994362183550545E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999560056378165	WITHOUT_CLASSIFICATION	4.3994362183550545E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999895211321654	WITHOUT_CLASSIFICATION	1.0478867834649626E-5	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999948897074649	WITHOUT_CLASSIFICATION	5.110292535156569E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999838303901357	WITHOUT_CLASSIFICATION	1.6169609864244734E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999560056378165	WITHOUT_CLASSIFICATION	4.3994362183550545E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999895211321654	WITHOUT_CLASSIFICATION	1.0478867834649626E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999895211321654	WITHOUT_CLASSIFICATION	1.0478867834649626E-5	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999850946700151	WITHOUT_CLASSIFICATION	1.4905329984946903E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999712191229204	WITHOUT_CLASSIFICATION	2.8780877079599973E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999815808089003	WITHOUT_CLASSIFICATION	1.8419191099633253E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999343123235385	WITHOUT_CLASSIFICATION	6.568767646158641E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999789370868132	WITHOUT_CLASSIFICATION	2.1062913186839043E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999789370868132	WITHOUT_CLASSIFICATION	2.1062913186839043E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998613530390295	WITHOUT_CLASSIFICATION	1.3864696097052746E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996962327266106	WITHOUT_CLASSIFICATION	3.037672733894195E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.999992155632908	WITHOUT_CLASSIFICATION	7.844367091966306E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999904316412578	WITHOUT_CLASSIFICATION	9.568358742283764E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999904316412578	WITHOUT_CLASSIFICATION	9.568358742283764E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9996979189619745	WITHOUT_CLASSIFICATION	3.020810380256097E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999615802255923	WITHOUT_CLASSIFICATION	3.841977440768614E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9976260462813065	WITHOUT_CLASSIFICATION	0.0023739537186935164	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999890993386031	WITHOUT_CLASSIFICATION	1.0900661396826962E-5	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9994779893904628	WITHOUT_CLASSIFICATION	5.220106095371555E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999914996196583	WITHOUT_CLASSIFICATION	8.500380341707454E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999431059892038	WITHOUT_CLASSIFICATION	5.6894010796090646E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9990753579638039	WITHOUT_CLASSIFICATION	9.2464203619605E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9976260462813065	WITHOUT_CLASSIFICATION	0.0023739537186935164	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9998624365364228	WITHOUT_CLASSIFICATION	1.3756346357713685E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999938027966822	WITHOUT_CLASSIFICATION	6.1972033178658445E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999938027966822	WITHOUT_CLASSIFICATION	6.1972033178658445E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9998294172580693	WITHOUT_CLASSIFICATION	1.705827419306982E-4	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9994220038804729	WITHOUT_CLASSIFICATION	5.779961195271259E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999259199730324	WITHOUT_CLASSIFICATION	7.408002696764082E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9990906667180088	WITHOUT_CLASSIFICATION	9.09333281991204E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9991427486470945	WITHOUT_CLASSIFICATION	8.572513529054327E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998647175389741	WITHOUT_CLASSIFICATION	1.352824610258547E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999960545448328	WITHOUT_CLASSIFICATION	3.945455167177628E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999888815339347	WITHOUT_CLASSIFICATION	1.1118466065261328E-5	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999962917273282	WITHOUT_CLASSIFICATION	3.708272671823909E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999962917273282	WITHOUT_CLASSIFICATION	3.708272671823909E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998549522840502	WITHOUT_CLASSIFICATION	1.4504771594982358E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999873262828641	WITHOUT_CLASSIFICATION	1.2673717135950982E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999583244987144	WITHOUT_CLASSIFICATION	4.1675501285689665E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999707658001	WITHOUT_CLASSIFICATION	2.923419989998773E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999752721250068	WITHOUT_CLASSIFICATION	2.4727874993267358E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999928646751592	WITHOUT_CLASSIFICATION	7.135324840802341E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999604700270541	WITHOUT_CLASSIFICATION	3.952997294595521E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9999430221554165	WITHOUT_CLASSIFICATION	5.697784458342836E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999747418682084	WITHOUT_CLASSIFICATION	2.5258131791572418E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999797168901807	WITHOUT_CLASSIFICATION	2.028310981933416E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999928646751592	WITHOUT_CLASSIFICATION	7.135324840802341E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999500513322233	WITHOUT_CLASSIFICATION	4.994866777669233E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999885733236199	WITHOUT_CLASSIFICATION	1.142667638024031E-5	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999720599727038	WITHOUT_CLASSIFICATION	2.7940027296138894E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999785592176278	WITHOUT_CLASSIFICATION	2.144078237219265E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999847766139692	WITHOUT_CLASSIFICATION	1.5223386030890313E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999747800614829	WITHOUT_CLASSIFICATION	2.521993851708415E-5	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999869264764348	WITHOUT_CLASSIFICATION	1.3073523565227599E-5	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999928181302031	WITHOUT_CLASSIFICATION	7.181869796899539E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999819659766204	WITHOUT_CLASSIFICATION	1.8034023379553028E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999977703892683	WITHOUT_CLASSIFICATION	2.2296107316971212E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999922286916004	WITHOUT_CLASSIFICATION	7.771308399663943E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999810413070312	WITHOUT_CLASSIFICATION	1.8958692968740127E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999812140044887	WITHOUT_CLASSIFICATION	1.8785995511306084E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999772183809206	WITHOUT_CLASSIFICATION	2.2781619079397054E-5	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999877961432003	WITHOUT_CLASSIFICATION	1.2203856799682762E-5	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999815784492565	WITHOUT_CLASSIFICATION	1.8421550743510644E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999747418682084	WITHOUT_CLASSIFICATION	2.5258131791572418E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999922286916004	WITHOUT_CLASSIFICATION	7.771308399663943E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999509373497527	WITHOUT_CLASSIFICATION	4.906265024736271E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999783841316289	WITHOUT_CLASSIFICATION	2.1615868371118626E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999289818757938	WITHOUT_CLASSIFICATION	7.101812420622278E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999635692888378	WITHOUT_CLASSIFICATION	3.6430711162254806E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999922470654637	WITHOUT_CLASSIFICATION	7.75293453619644E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999678852701693	WITHOUT_CLASSIFICATION	3.211472983077755E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9990661076311275	WITHOUT_CLASSIFICATION	9.338923688726373E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998309448380597	WITHOUT_CLASSIFICATION	1.6905516194035686E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998309448380597	WITHOUT_CLASSIFICATION	1.6905516194035686E-4	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999975318184725	WITHOUT_CLASSIFICATION	2.4681815274941713E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999963624973954	WITHOUT_CLASSIFICATION	3.6375026045041943E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9994539488510502	WITHOUT_CLASSIFICATION	5.460511489497177E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999527880335033	WITHOUT_CLASSIFICATION	4.721196649673736E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999768862735011	WITHOUT_CLASSIFICATION	2.311372649892346E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999795928451802	WITHOUT_CLASSIFICATION	2.0407154819779033E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999845349173887	WITHOUT_CLASSIFICATION	1.5465082611324694E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999692167137308	WITHOUT_CLASSIFICATION	3.0783286269198654E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999903080228941	WITHOUT_CLASSIFICATION	9.691977105956163E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999903080228941	WITHOUT_CLASSIFICATION	9.691977105956163E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999903080228941	WITHOUT_CLASSIFICATION	9.691977105956163E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999776530152621	WITHOUT_CLASSIFICATION	2.234698473787198E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999903080228941	WITHOUT_CLASSIFICATION	9.691977105956163E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999910121989568	WITHOUT_CLASSIFICATION	8.987801043208699E-6	TEST
// int	WITHOUT_CLASSIFICATION	0.9999758814938958	WITHOUT_CLASSIFICATION	2.4118506104185245E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999864732031805	WITHOUT_CLASSIFICATION	1.352679681952031E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999747418682084	WITHOUT_CLASSIFICATION	2.5258131791572418E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999922286916004	WITHOUT_CLASSIFICATION	7.771308399663943E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999922286916004	WITHOUT_CLASSIFICATION	7.771308399663943E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999668049620974	WITHOUT_CLASSIFICATION	3.3195037902543025E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.999995862633052	WITHOUT_CLASSIFICATION	4.137366948103883E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999846560582721	WITHOUT_CLASSIFICATION	1.534394172795588E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999944190865614	WITHOUT_CLASSIFICATION	5.580913438625378E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958070235869	WITHOUT_CLASSIFICATION	4.192976413033679E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958070235869	WITHOUT_CLASSIFICATION	4.192976413033679E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999883865226048	WITHOUT_CLASSIFICATION	1.1613477395102911E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999907563465465	WITHOUT_CLASSIFICATION	9.24365345348594E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999402977290119	WITHOUT_CLASSIFICATION	5.970227098804889E-5	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999764021752311	WITHOUT_CLASSIFICATION	2.3597824768882142E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999840445283736	WITHOUT_CLASSIFICATION	1.5955471626396268E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999747483875309	WITHOUT_CLASSIFICATION	2.525161246907037E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999810642554331	WITHOUT_CLASSIFICATION	1.893574456687632E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999746694260023	WITHOUT_CLASSIFICATION	2.533057399766821E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999746694260023	WITHOUT_CLASSIFICATION	2.533057399766821E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999694929305576	WITHOUT_CLASSIFICATION	3.0507069442486152E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999694929305576	WITHOUT_CLASSIFICATION	3.0507069442486152E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999956521770269	WITHOUT_CLASSIFICATION	4.347822973138385E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999956521770269	WITHOUT_CLASSIFICATION	4.347822973138385E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690010802328	WITHOUT_CLASSIFICATION	3.0998919767252924E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690010802328	WITHOUT_CLASSIFICATION	3.0998919767252924E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999958070235869	WITHOUT_CLASSIFICATION	4.192976413033679E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999810642554331	WITHOUT_CLASSIFICATION	1.893574456687632E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999746694260023	WITHOUT_CLASSIFICATION	2.533057399766821E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999746694260023	WITHOUT_CLASSIFICATION	2.533057399766821E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999694929305576	WITHOUT_CLASSIFICATION	3.0507069442486152E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999956521770269	WITHOUT_CLASSIFICATION	4.347822973138385E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999956521770269	WITHOUT_CLASSIFICATION	4.347822973138385E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999690010802328	WITHOUT_CLASSIFICATION	3.0998919767252924E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999706142544326	WITHOUT_CLASSIFICATION	2.938574556748369E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999020706291532	WITHOUT_CLASSIFICATION	9.792937084689161E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999611793714184	WITHOUT_CLASSIFICATION	3.8820628581557963E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999371056495487	WITHOUT_CLASSIFICATION	6.289435045126677E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998790381262501	WITHOUT_CLASSIFICATION	1.2096187374983421E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999746479988655	WITHOUT_CLASSIFICATION	2.5352001134540972E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997073197085109	WITHOUT_CLASSIFICATION	2.926802914890711E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999272046668954	WITHOUT_CLASSIFICATION	7.279533310460738E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9995167673383584	WITHOUT_CLASSIFICATION	4.832326616416728E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999797486017276	WITHOUT_CLASSIFICATION	2.0251398272329063E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999746217525477	WITHOUT_CLASSIFICATION	2.5378247452308647E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999784308958268	WITHOUT_CLASSIFICATION	2.156910417317684E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999227068858196	WITHOUT_CLASSIFICATION	7.72931141803943E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999746479988655	WITHOUT_CLASSIFICATION	2.5352001134540972E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9997440851539817	WITHOUT_CLASSIFICATION	2.559148460183355E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9997440851539817	WITHOUT_CLASSIFICATION	2.559148460183355E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999241090722286	WITHOUT_CLASSIFICATION	7.589092777133576E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999781366245035	WITHOUT_CLASSIFICATION	2.186337549647206E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999781366245035	WITHOUT_CLASSIFICATION	2.186337549647206E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9994388004535736	WITHOUT_CLASSIFICATION	5.611995464262942E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999797584511796	WITHOUT_CLASSIFICATION	2.0241548820396633E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.997822075677743	WITHOUT_CLASSIFICATION	0.0021779243222570187	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999722592559009	WITHOUT_CLASSIFICATION	2.774074409903157E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999722592559009	WITHOUT_CLASSIFICATION	2.774074409903157E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999836388722161	WITHOUT_CLASSIFICATION	1.6361127783914602E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999950657823584	WITHOUT_CLASSIFICATION	4.934217641544319E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999950657823584	WITHOUT_CLASSIFICATION	4.934217641544319E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999087267177439	WITHOUT_CLASSIFICATION	9.127328225614401E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999975904545745	WITHOUT_CLASSIFICATION	2.4095454255051342E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999747045748709	WITHOUT_CLASSIFICATION	2.5295425129053686E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.994803262158682	WITHOUT_CLASSIFICATION	0.005196737841317933	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999747257721735	WITHOUT_CLASSIFICATION	2.527422782658339E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999724414841025	WITHOUT_CLASSIFICATION	2.755851589747445E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999692536019478	WITHOUT_CLASSIFICATION	3.074639805227257E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996173764761436	WITHOUT_CLASSIFICATION	3.826235238563847E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9998994285540374	WITHOUT_CLASSIFICATION	1.0057144596268988E-4	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999600226010499	WITHOUT_CLASSIFICATION	3.9977398950038465E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988176057512	WITHOUT_CLASSIFICATION	1.1823942488167742E-6	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999668064722126	WITHOUT_CLASSIFICATION	3.319352778742193E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999668096368457	WITHOUT_CLASSIFICATION	3.319036315432753E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922310599688	WITHOUT_CLASSIFICATION	7.768940031230071E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999747045748709	WITHOUT_CLASSIFICATION	2.5295425129053686E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999941984510312	WITHOUT_CLASSIFICATION	5.801548968842308E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999924530776793	WITHOUT_CLASSIFICATION	7.546922320782297E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999746404881555	WITHOUT_CLASSIFICATION	2.5359511844466593E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922310599688	WITHOUT_CLASSIFICATION	7.768940031230071E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999941984510312	WITHOUT_CLASSIFICATION	5.801548968842308E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999746404881555	WITHOUT_CLASSIFICATION	2.5359511844466593E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999089718551801	WITHOUT_CLASSIFICATION	9.102814481985572E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999089718551801	WITHOUT_CLASSIFICATION	9.102814481985572E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999922278896771	WITHOUT_CLASSIFICATION	7.772110322811165E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999928150970581	WITHOUT_CLASSIFICATION	7.184902941962958E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996312322745294	WITHOUT_CLASSIFICATION	3.687677254705546E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999623055943033	WITHOUT_CLASSIFICATION	3.7694405696614095E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999982669909089	WITHOUT_CLASSIFICATION	1.7330090911042744E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999665239968615	WITHOUT_CLASSIFICATION	3.34760031385734E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999622692313198	WITHOUT_CLASSIFICATION	3.773076868013258E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999952933170804	WITHOUT_CLASSIFICATION	4.706682919699044E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999665239968615	WITHOUT_CLASSIFICATION	3.34760031385734E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999746394528009	WITHOUT_CLASSIFICATION	2.536054719908644E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998779538415884	WITHOUT_CLASSIFICATION	1.2204615841163196E-4	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922310599688	WITHOUT_CLASSIFICATION	7.768940031230071E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999840164470815	WITHOUT_CLASSIFICATION	1.5983552918479095E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999904005830477	WITHOUT_CLASSIFICATION	9.599416952306141E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996033663337576	WITHOUT_CLASSIFICATION	3.966336662424525E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999883536903051	WITHOUT_CLASSIFICATION	1.1646309694884099E-5	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999337198419319	WITHOUT_CLASSIFICATION	6.628015806804384E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999979517019538	WITHOUT_CLASSIFICATION	2.0482980461322234E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999399249956142	WITHOUT_CLASSIFICATION	6.0075004385615924E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999608901467444	WITHOUT_CLASSIFICATION	3.910985325556181E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999922557708774	WITHOUT_CLASSIFICATION	7.744229122576114E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999668049620974	WITHOUT_CLASSIFICATION	3.3195037902543025E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999618486096457	WITHOUT_CLASSIFICATION	3.815139035443565E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999600226010499	WITHOUT_CLASSIFICATION	3.9977398950038465E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999684141346222	WITHOUT_CLASSIFICATION	3.158586537774657E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9996451353218991	WITHOUT_CLASSIFICATION	3.548646781008988E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999911225043858	WITHOUT_CLASSIFICATION	8.877495614273386E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999960023635669	WITHOUT_CLASSIFICATION	3.997636433123571E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999960087419679	WITHOUT_CLASSIFICATION	3.991258032089077E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999753769622227	WITHOUT_CLASSIFICATION	2.4623037777341024E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999721575361715	WITHOUT_CLASSIFICATION	2.7842463828595675E-5	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999943847481136	WITHOUT_CLASSIFICATION	5.6152518864037165E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999730327683016	WITHOUT_CLASSIFICATION	2.696723169840126E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996923535212434	WITHOUT_CLASSIFICATION	3.07646478756677E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999290998330532	WITHOUT_CLASSIFICATION	7.090016694684756E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999290998330532	WITHOUT_CLASSIFICATION	7.090016694684756E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996644870442836	WITHOUT_CLASSIFICATION	3.355129557165161E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999775844777931	WITHOUT_CLASSIFICATION	2.241552220686085E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998906741346734	WITHOUT_CLASSIFICATION	1.0932586532666712E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999671531442166	WITHOUT_CLASSIFICATION	3.284685578335734E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996649904112346	WITHOUT_CLASSIFICATION	3.350095887654129E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999676630130602	WITHOUT_CLASSIFICATION	3.2336986939798335E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999731809121382	WITHOUT_CLASSIFICATION	2.6819087861784656E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9995410375728369	WITHOUT_CLASSIFICATION	4.5896242716312365E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9995443904788074	WITHOUT_CLASSIFICATION	4.5560952119254593E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999210904150588	WITHOUT_CLASSIFICATION	7.890958494124114E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999846697213743	WITHOUT_CLASSIFICATION	1.5330278625647135E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999724866474272	WITHOUT_CLASSIFICATION	2.7513352572833697E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998570598989084	WITHOUT_CLASSIFICATION	1.4294010109157626E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773900502006	WITHOUT_CLASSIFICATION	2.2609949799443407E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745439965847	WITHOUT_CLASSIFICATION	2.5456003415378896E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999952680775251	WITHOUT_CLASSIFICATION	4.731922474905684E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999633786688771	WITHOUT_CLASSIFICATION	3.662133112291826E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999636516231881	WITHOUT_CLASSIFICATION	3.6348376811868124E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999860213869338	WITHOUT_CLASSIFICATION	1.3978613066102659E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999773908655972	WITHOUT_CLASSIFICATION	2.2609134402802022E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999773908655972	WITHOUT_CLASSIFICATION	2.2609134402802022E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999213784101497	WITHOUT_CLASSIFICATION	7.8621589850192E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999213784101497	WITHOUT_CLASSIFICATION	7.8621589850192E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999730327683016	WITHOUT_CLASSIFICATION	2.696723169840126E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998466437009019	WITHOUT_CLASSIFICATION	1.5335629909795867E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9985676944460888	WITHOUT_CLASSIFICATION	0.0014323055539111882	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998410752060057	WITHOUT_CLASSIFICATION	1.5892479399424897E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9985676944460888	WITHOUT_CLASSIFICATION	0.0014323055539111882	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998410752060057	WITHOUT_CLASSIFICATION	1.5892479399424897E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996050337353438	WITHOUT_CLASSIFICATION	3.949662646561218E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997415083419199	WITHOUT_CLASSIFICATION	2.5849165808019257E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999969878914913	WITHOUT_CLASSIFICATION	3.0121085087564177E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999895238876859	WITHOUT_CLASSIFICATION	1.0476112314066196E-5	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993455337658543	WITHOUT_CLASSIFICATION	6.5446623414571E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9981028270617885	WITHOUT_CLASSIFICATION	0.0018971729382113933	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998699867279791	WITHOUT_CLASSIFICATION	1.300132720209107E-4	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9985656174458892	WITHOUT_CLASSIFICATION	0.0014343825541107966	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997018908212795	WITHOUT_CLASSIFICATION	2.981091787205426E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999802953922489	WITHOUT_CLASSIFICATION	1.9704607751127056E-5	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999839347980363	WITHOUT_CLASSIFICATION	1.6065201963664078E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999895447560875	WITHOUT_CLASSIFICATION	1.045524391257645E-5	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999888528511188	WITHOUT_CLASSIFICATION	1.1147148881204228E-5	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998141381079777	WITHOUT_CLASSIFICATION	1.8586189202224811E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998141381079777	WITHOUT_CLASSIFICATION	1.8586189202224811E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987460142155901	WITHOUT_CLASSIFICATION	0.0012539857844100113	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987460142155901	WITHOUT_CLASSIFICATION	0.0012539857844100113	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999970525918411	WITHOUT_CLASSIFICATION	2.947408158818291E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996050337353438	WITHOUT_CLASSIFICATION	3.949662646561218E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999781248755037	WITHOUT_CLASSIFICATION	2.1875124496187224E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9995878636274562	WITHOUT_CLASSIFICATION	4.121363725437385E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999861650776364	WITHOUT_CLASSIFICATION	1.383492236359713E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999626525356498	WITHOUT_CLASSIFICATION	3.7347464350204255E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9935130608743384	WITHOUT_CLASSIFICATION	0.006486939125661516	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996050337353438	WITHOUT_CLASSIFICATION	3.949662646561218E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999626525356498	WITHOUT_CLASSIFICATION	3.7347464350204255E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9935130608743384	WITHOUT_CLASSIFICATION	0.006486939125661516	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9993618406523189	WITHOUT_CLASSIFICATION	6.381593476810519E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999924171550564	WITHOUT_CLASSIFICATION	7.582844943643659E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998492401136938	WITHOUT_CLASSIFICATION	1.5075988630619417E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996050337353438	WITHOUT_CLASSIFICATION	3.949662646561218E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996050337353438	WITHOUT_CLASSIFICATION	3.949662646561218E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999943152433348	WITHOUT_CLASSIFICATION	5.684756665128022E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999942674182091	WITHOUT_CLASSIFICATION	5.732581790853891E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999794273994512	WITHOUT_CLASSIFICATION	2.057260054885087E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.99998049088029	WITHOUT_CLASSIFICATION	1.9509119710023736E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.999736293555711	WITHOUT_CLASSIFICATION	2.6370644428894835E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999973921478442	WITHOUT_CLASSIFICATION	2.6078521558069203E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998682788154887	WITHOUT_CLASSIFICATION	1.3172118451132506E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999807002421699	WITHOUT_CLASSIFICATION	1.929975783006535E-5	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999896522139631	WITHOUT_CLASSIFICATION	1.0347786036858518E-5	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999792879057547	WITHOUT_CLASSIFICATION	2.0712094245215714E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999716319607054	WITHOUT_CLASSIFICATION	2.83680392945756E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999974789003853	WITHOUT_CLASSIFICATION	2.521099614708812E-5	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999650586379405	WITHOUT_CLASSIFICATION	3.494136205949184E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999727668073475	WITHOUT_CLASSIFICATION	2.7233192652565174E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683837805067	WITHOUT_CLASSIFICATION	3.1616219493351524E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995352959750743	WITHOUT_CLASSIFICATION	4.6470402492566237E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997395008113431	WITHOUT_CLASSIFICATION	2.6049918865691233E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9997063075951003	WITHOUT_CLASSIFICATION	2.936924048997552E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997287419151859	WITHOUT_CLASSIFICATION	2.7125808481413014E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998410752060057	WITHOUT_CLASSIFICATION	1.5892479399424897E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9995359792838058	WITHOUT_CLASSIFICATION	4.6402071619426014E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997395008113431	WITHOUT_CLASSIFICATION	2.6049918865691233E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993351671918289	WITHOUT_CLASSIFICATION	6.648328081709904E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9982356855143362	WITHOUT_CLASSIFICATION	0.0017643144856638049	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9943214206502963	WITHOUT_CLASSIFICATION	0.005678579349703824	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999892580078098	WITHOUT_CLASSIFICATION	1.0741992190188148E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999217409698574	WITHOUT_CLASSIFICATION	7.825903014255105E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999933982532238	WITHOUT_CLASSIFICATION	6.601746776199155E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999830256175916	WITHOUT_CLASSIFICATION	1.6974382408496427E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999975669941726	WITHOUT_CLASSIFICATION	2.4330058273836724E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999648098784851	WITHOUT_CLASSIFICATION	3.519012151480611E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999470934514879	WITHOUT_CLASSIFICATION	5.290654851209959E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999678010939951	WITHOUT_CLASSIFICATION	3.2198906004943905E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999690968376169	WITHOUT_CLASSIFICATION	3.090316238316358E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999965297997875	WITHOUT_CLASSIFICATION	3.470200212453559E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907900392279	WITHOUT_CLASSIFICATION	9.209960772165837E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996849798537076	WITHOUT_CLASSIFICATION	3.150201462922525E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999858222265172	WITHOUT_CLASSIFICATION	1.4177773482669251E-5	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999212435500893	WITHOUT_CLASSIFICATION	7.875644991073061E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886164908256	WITHOUT_CLASSIFICATION	1.1383509174414514E-5	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999964535054115	WITHOUT_CLASSIFICATION	3.5464945885037896E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997550631107588	WITHOUT_CLASSIFICATION	2.4493688924119225E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999966026322101	WITHOUT_CLASSIFICATION	3.3973677899569205E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857764275307	WITHOUT_CLASSIFICATION	1.4223572469308138E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857623356067	WITHOUT_CLASSIFICATION	1.423766439340743E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769099426659	WITHOUT_CLASSIFICATION	2.3090057334167908E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692503682142	WITHOUT_CLASSIFICATION	3.07496317857814E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999746060612675	WITHOUT_CLASSIFICATION	2.5393938732375642E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999696861920362	WITHOUT_CLASSIFICATION	3.0313807963889826E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977073684864	WITHOUT_CLASSIFICATION	2.2926315136024745E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793177902361	WITHOUT_CLASSIFICATION	2.0682209763949767E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770259862278	WITHOUT_CLASSIFICATION	2.2974013772060827E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845695805595	WITHOUT_CLASSIFICATION	1.5430419440611197E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761683995486	WITHOUT_CLASSIFICATION	2.3831600451413582E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761863505283	WITHOUT_CLASSIFICATION	2.381364947173084E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999756732397881	WITHOUT_CLASSIFICATION	2.432676021190374E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999976002674503	WITHOUT_CLASSIFICATION	2.3997325497033092E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999923833921647	WITHOUT_CLASSIFICATION	7.616607835238735E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999994335363982	WITHOUT_CLASSIFICATION	5.664636017076861E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984902506913659	WITHOUT_CLASSIFICATION	0.0015097493086341307	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998473130398028	WITHOUT_CLASSIFICATION	1.5268696019728474E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9993618406523189	WITHOUT_CLASSIFICATION	6.381593476810519E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999668171139032	WITHOUT_CLASSIFICATION	3.318288609677803E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999676319048708	WITHOUT_CLASSIFICATION	3.236809512919427E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999992268859776	WITHOUT_CLASSIFICATION	7.731140224018536E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999944502454917	WITHOUT_CLASSIFICATION	5.549754508336114E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999660218271056	WITHOUT_CLASSIFICATION	3.397817289449464E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999772044622194	WITHOUT_CLASSIFICATION	2.2795537780648424E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999814914304467	WITHOUT_CLASSIFICATION	1.8508569553370446E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729377786255	WITHOUT_CLASSIFICATION	2.706222137459032E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749376072548	WITHOUT_CLASSIFICATION	2.5062392745227238E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936999410539	WITHOUT_CLASSIFICATION	6.300058946117487E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729551509899	WITHOUT_CLASSIFICATION	2.704484901006582E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.999815148073821	WITHOUT_CLASSIFICATION	1.8485192617893962E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999793763877852	WITHOUT_CLASSIFICATION	2.0623612214836266E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999840054099728	WITHOUT_CLASSIFICATION	1.5994590027233854E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999830982646597	WITHOUT_CLASSIFICATION	1.6901735340347227E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951071379446	WITHOUT_CLASSIFICATION	4.8928620553953455E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999729284186251	WITHOUT_CLASSIFICATION	2.707158137492052E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999441864045054	WITHOUT_CLASSIFICATION	5.58135954944782E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999778622096456	WITHOUT_CLASSIFICATION	2.2137790354396474E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999887412191927	WITHOUT_CLASSIFICATION	1.125878080745524E-5	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999018526248808	WITHOUT_CLASSIFICATION	9.814737511904854E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999512942057598	WITHOUT_CLASSIFICATION	4.870579424024259E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999416086723204	WITHOUT_CLASSIFICATION	5.8391327679638574E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999711400789281	WITHOUT_CLASSIFICATION	2.8859921072022102E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984902506913659	WITHOUT_CLASSIFICATION	0.0015097493086341307	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999769639476049	WITHOUT_CLASSIFICATION	2.3036052395089655E-5	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999855647013496	WITHOUT_CLASSIFICATION	1.4435298650459992E-5	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999843108654792	WITHOUT_CLASSIFICATION	1.5689134520737792E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999923833921647	WITHOUT_CLASSIFICATION	7.616607835238735E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.999974858291697	WITHOUT_CLASSIFICATION	2.5141708303014404E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9991194385349362	WITHOUT_CLASSIFICATION	8.80561465063738E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999772445099284	WITHOUT_CLASSIFICATION	2.275549007164399E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999972516664523	WITHOUT_CLASSIFICATION	2.7483335476924965E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999361781208644	WITHOUT_CLASSIFICATION	6.382187913551318E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999684323038175	WITHOUT_CLASSIFICATION	3.156769618255011E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999701154999319	WITHOUT_CLASSIFICATION	2.9884500068224663E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999723737987837	WITHOUT_CLASSIFICATION	2.762620121637685E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999465523230094	WITHOUT_CLASSIFICATION	5.3447676990637986E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997048161666813	WITHOUT_CLASSIFICATION	2.951838333187307E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999947970854197	WITHOUT_CLASSIFICATION	5.2029145803064344E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9993618406523189	WITHOUT_CLASSIFICATION	6.381593476810519E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999923833921647	WITHOUT_CLASSIFICATION	7.616607835238735E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999799955584098	WITHOUT_CLASSIFICATION	2.00044415902624E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9997762770308325	WITHOUT_CLASSIFICATION	2.237229691675336E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999911768594746	WITHOUT_CLASSIFICATION	8.823140525504053E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998560254810946	WITHOUT_CLASSIFICATION	1.4397451890532978E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999491288063905	WITHOUT_CLASSIFICATION	5.0871193609465646E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999907439953627	WITHOUT_CLASSIFICATION	9.25600463725998E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999943196356685	WITHOUT_CLASSIFICATION	5.680364331509742E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999172170684922	WITHOUT_CLASSIFICATION	8.278293150772505E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9999312531366394	WITHOUT_CLASSIFICATION	6.874686336046974E-5	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999275956662571	WITHOUT_CLASSIFICATION	7.240433374288884E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996908667553812	WITHOUT_CLASSIFICATION	3.091332446186979E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999923833921647	WITHOUT_CLASSIFICATION	7.616607835238735E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984902506913659	WITHOUT_CLASSIFICATION	0.0015097493086341307	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998684949183201	WITHOUT_CLASSIFICATION	1.3150508167988846E-4	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999964788806514	WITHOUT_CLASSIFICATION	3.5211193486513018E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993633605266975	WITHOUT_CLASSIFICATION	6.366394733024323E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984902506913659	WITHOUT_CLASSIFICATION	0.0015097493086341307	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999107371684742	WITHOUT_CLASSIFICATION	8.92628315256982E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999911768594746	WITHOUT_CLASSIFICATION	8.823140525504053E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997445870957817	WITHOUT_CLASSIFICATION	2.5541290421825236E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9971803201166336	WITHOUT_CLASSIFICATION	0.002819679883366502	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999325126690547	WITHOUT_CLASSIFICATION	6.748733094527022E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999361781208644	WITHOUT_CLASSIFICATION	6.382187913551318E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999684323038175	WITHOUT_CLASSIFICATION	3.156769618255011E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999701154999319	WITHOUT_CLASSIFICATION	2.9884500068224663E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999847639163579	WITHOUT_CLASSIFICATION	1.5236083641985962E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.999956208910094	WITHOUT_CLASSIFICATION	4.379108990615703E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999182766693971	WITHOUT_CLASSIFICATION	8.172333060284082E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999913356601944	WITHOUT_CLASSIFICATION	8.664339805600904E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999858887120642	WITHOUT_CLASSIFICATION	1.4111287935922763E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984902506913659	WITHOUT_CLASSIFICATION	0.0015097493086341307	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999723737987837	WITHOUT_CLASSIFICATION	2.762620121637685E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999465523230094	WITHOUT_CLASSIFICATION	5.3447676990637986E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957043481114	WITHOUT_CLASSIFICATION	4.2956518885897105E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957301071744	WITHOUT_CLASSIFICATION	4.269892825628352E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999759971400489	WITHOUT_CLASSIFICATION	2.4002859951021354E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999773664636129	WITHOUT_CLASSIFICATION	2.2633536387149102E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999540377461519	WITHOUT_CLASSIFICATION	4.596225384820516E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999183217431886	WITHOUT_CLASSIFICATION	8.167825681142381E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999218448911555	WITHOUT_CLASSIFICATION	7.81551088444572E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999354521736672	WITHOUT_CLASSIFICATION	6.454782633286508E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999690554376953	WITHOUT_CLASSIFICATION	3.09445623046578E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999668049620974	WITHOUT_CLASSIFICATION	3.3195037902543025E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793177902361	WITHOUT_CLASSIFICATION	2.0682209763949767E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999668049620974	WITHOUT_CLASSIFICATION	3.3195037902543025E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999658985216372	WITHOUT_CLASSIFICATION	3.4101478362816255E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999714524603311	WITHOUT_CLASSIFICATION	2.8547539668823406E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771277199571	WITHOUT_CLASSIFICATION	2.2872280042941074E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999819871844992	WITHOUT_CLASSIFICATION	1.8012815500768513E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999214825093586	WITHOUT_CLASSIFICATION	7.851749064129949E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770259862278	WITHOUT_CLASSIFICATION	2.2974013772060827E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761672197126	WITHOUT_CLASSIFICATION	2.383278028741415E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999887412191927	WITHOUT_CLASSIFICATION	1.125878080745524E-5	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999724250458621	WITHOUT_CLASSIFICATION	2.757495413786247E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999790948941631	WITHOUT_CLASSIFICATION	2.0905105836847747E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999743303429167	WITHOUT_CLASSIFICATION	2.566965708327761E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995319555671666	WITHOUT_CLASSIFICATION	4.6804443283338484E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999939448537165	WITHOUT_CLASSIFICATION	6.055146283446882E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9990799616056008	WITHOUT_CLASSIFICATION	9.200383943992528E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998913053767914	WITHOUT_CLASSIFICATION	1.0869462320871303E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999975669941726	WITHOUT_CLASSIFICATION	2.4330058273836724E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999730056376901	WITHOUT_CLASSIFICATION	2.6994362309870435E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999755018576143	WITHOUT_CLASSIFICATION	2.4498142385654823E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999856198980345	WITHOUT_CLASSIFICATION	1.4380101965584662E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999817895237373	WITHOUT_CLASSIFICATION	1.8210476262718584E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999994129734745	WITHOUT_CLASSIFICATION	5.870265254916193E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999597396148411	WITHOUT_CLASSIFICATION	4.026038515889684E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837486140475	WITHOUT_CLASSIFICATION	1.6251385952445168E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839335369933	WITHOUT_CLASSIFICATION	1.606646300668317E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999632003703085	WITHOUT_CLASSIFICATION	3.679962969153528E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999958739513844	WITHOUT_CLASSIFICATION	4.126048615602268E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999525009497396	WITHOUT_CLASSIFICATION	4.749905026041107E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999514336153695	WITHOUT_CLASSIFICATION	4.856638463042482E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788808821004	WITHOUT_CLASSIFICATION	2.1119117899594966E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999838608900214	WITHOUT_CLASSIFICATION	1.6139109978566658E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999544631366503	WITHOUT_CLASSIFICATION	4.553686334983652E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999648091932465	WITHOUT_CLASSIFICATION	3.5190806753474816E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788808821004	WITHOUT_CLASSIFICATION	2.1119117899594966E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999352170344454	WITHOUT_CLASSIFICATION	6.478296555449659E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999593863126808	WITHOUT_CLASSIFICATION	4.061368731920464E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748490963414	WITHOUT_CLASSIFICATION	2.5150903658650728E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999935536966088	WITHOUT_CLASSIFICATION	6.446303391142675E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999983533318423	WITHOUT_CLASSIFICATION	1.6466681576365337E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999966893238768	WITHOUT_CLASSIFICATION	3.31067612320939E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999994307316723	WITHOUT_CLASSIFICATION	5.69268327705579E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999695226029648	WITHOUT_CLASSIFICATION	3.0477397035208746E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999695226029648	WITHOUT_CLASSIFICATION	3.0477397035208746E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999944218541909	WITHOUT_CLASSIFICATION	5.578145809167023E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999953779942077	WITHOUT_CLASSIFICATION	4.6220057922640555E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999435449857478	WITHOUT_CLASSIFICATION	5.645501425228505E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999910562653285	WITHOUT_CLASSIFICATION	8.943734671533398E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999976800813302	WITHOUT_CLASSIFICATION	2.3199186698298376E-6	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999577839111823	WITHOUT_CLASSIFICATION	4.221608881769633E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9998969709810753	WITHOUT_CLASSIFICATION	1.0302901892467154E-4	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999820854517466	WITHOUT_CLASSIFICATION	1.7914548253380684E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999904472191308	WITHOUT_CLASSIFICATION	9.552780869209598E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999941474174898	WITHOUT_CLASSIFICATION	5.852582510081993E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999113416253812	WITHOUT_CLASSIFICATION	8.865837461871318E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998944692675064	WITHOUT_CLASSIFICATION	1.0553073249364122E-4	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998060464916887	WITHOUT_CLASSIFICATION	1.9395350831132754E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999643392923215	WITHOUT_CLASSIFICATION	3.56607076783671E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999927463872852	WITHOUT_CLASSIFICATION	7.253612714789207E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996275953421834	WITHOUT_CLASSIFICATION	3.7240465781669896E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999916890078984	WITHOUT_CLASSIFICATION	8.310992101657657E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996109527127675	WITHOUT_CLASSIFICATION	3.890472872325579E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999696541085028	WITHOUT_CLASSIFICATION	3.034589149722515E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999484351817238	WITHOUT_CLASSIFICATION	5.156481827614052E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999877539823216	WITHOUT_CLASSIFICATION	1.2246017678329194E-5	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999441234679028	WITHOUT_CLASSIFICATION	5.587653209717507E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999861562991551	WITHOUT_CLASSIFICATION	1.3843700844781563E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999899846238177	WITHOUT_CLASSIFICATION	1.0015376182239855E-5	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999712584301441	WITHOUT_CLASSIFICATION	2.87415698558593E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999871863486558	WITHOUT_CLASSIFICATION	1.2813651344231117E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999954012558339	WITHOUT_CLASSIFICATION	4.598744166157134E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999940702855268	WITHOUT_CLASSIFICATION	5.929714473199716E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999618819381676	WITHOUT_CLASSIFICATION	3.811806183239946E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999923230911704	WITHOUT_CLASSIFICATION	7.676908829718213E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999742538976643	WITHOUT_CLASSIFICATION	2.574610233578332E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999537692035437	WITHOUT_CLASSIFICATION	4.623079645638853E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999866910479723	WITHOUT_CLASSIFICATION	1.3308952027701575E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.999809090980537	WITHOUT_CLASSIFICATION	1.9090901946287682E-4	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997464220268082	WITHOUT_CLASSIFICATION	2.535779731917932E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999924449927238	WITHOUT_CLASSIFICATION	7.555007276270669E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995960182195828	WITHOUT_CLASSIFICATION	4.0398178041715075E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9993470752004469	WITHOUT_CLASSIFICATION	6.529247995531363E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999109103750429	WITHOUT_CLASSIFICATION	8.908962495718689E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998328311130872	WITHOUT_CLASSIFICATION	1.671688869128026E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997567576055268	WITHOUT_CLASSIFICATION	2.432423944730299E-4	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9993618406523189	WITHOUT_CLASSIFICATION	6.381593476810519E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9993618406523189	WITHOUT_CLASSIFICATION	6.381593476810519E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999640868823253	WITHOUT_CLASSIFICATION	3.5913117674654146E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999805778694637	WITHOUT_CLASSIFICATION	1.9422130536333558E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9992818526035004	WITHOUT_CLASSIFICATION	7.18147396499501E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999948772114242	WITHOUT_CLASSIFICATION	5.122788575783396E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999858194660735	WITHOUT_CLASSIFICATION	1.4180533926550377E-5	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9997439715975502	WITHOUT_CLASSIFICATION	2.560284024496802E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9996895258212173	WITHOUT_CLASSIFICATION	3.104741787826529E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9984878816215996	WITHOUT_CLASSIFICATION	0.0015121183784003608	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999944867213256	WITHOUT_CLASSIFICATION	5.513278674398597E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9997858197082174	WITHOUT_CLASSIFICATION	2.141802917825637E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992498498943083	WITHOUT_CLASSIFICATION	7.501501056916072E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999922875327093	WITHOUT_CLASSIFICATION	7.712467290695724E-5	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996824751689816	WITHOUT_CLASSIFICATION	3.175248310184363E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999781299670539	WITHOUT_CLASSIFICATION	2.18700329461071E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999490338947279	WITHOUT_CLASSIFICATION	5.096610527215897E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999974729621333	WITHOUT_CLASSIFICATION	2.5270378668251664E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998339372372	WITHOUT_CLASSIFICATION	1.660627627538723E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999980858116251	WITHOUT_CLASSIFICATION	1.9141883749652133E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999491734142945	WITHOUT_CLASSIFICATION	5.0826585705523874E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999409520973661	WITHOUT_CLASSIFICATION	5.904790263403074E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999980858116251	WITHOUT_CLASSIFICATION	1.9141883749652133E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999375097168863	WITHOUT_CLASSIFICATION	6.24902831136486E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.999987298704024	WITHOUT_CLASSIFICATION	1.2701295975952078E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998221451850146	WITHOUT_CLASSIFICATION	1.778548149853499E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998394875729836	WITHOUT_CLASSIFICATION	1.605124270163835E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999923908315556	WITHOUT_CLASSIFICATION	7.609168444523284E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999845257663076	WITHOUT_CLASSIFICATION	1.5474233692428972E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996815551942622	WITHOUT_CLASSIFICATION	3.1844480573791164E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999768609573496	WITHOUT_CLASSIFICATION	2.313904265033687E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999935897583268	WITHOUT_CLASSIFICATION	6.410241673258221E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999686627990807	WITHOUT_CLASSIFICATION	3.1337200919240374E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999942475422956	WITHOUT_CLASSIFICATION	5.7524577044688635E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999351597427645	WITHOUT_CLASSIFICATION	6.484025723558102E-5	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999901128482409	WITHOUT_CLASSIFICATION	9.887151759038925E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999785726646687	WITHOUT_CLASSIFICATION	2.1427335331318926E-5	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999722703475076	WITHOUT_CLASSIFICATION	2.7729652492307077E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9993483514111896	WITHOUT_CLASSIFICATION	6.516485888105107E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999880205781715	WITHOUT_CLASSIFICATION	1.1979421828566785E-5	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999323954872505	WITHOUT_CLASSIFICATION	6.760451274944182E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9984882215207966	WITHOUT_CLASSIFICATION	0.001511778479203325	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9996675454458157	WITHOUT_CLASSIFICATION	3.3245455418429956E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999994385778646	WITHOUT_CLASSIFICATION	5.614221353290678E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999694778126277	WITHOUT_CLASSIFICATION	3.052218737231743E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998043582960952	WITHOUT_CLASSIFICATION	1.956417039048178E-4	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999755950561033	WITHOUT_CLASSIFICATION	2.4404943896691475E-5	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999986808865589	WITHOUT_CLASSIFICATION	1.319113441140216E-6	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998387855512146	WITHOUT_CLASSIFICATION	1.6121444878540667E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9998312163151354	WITHOUT_CLASSIFICATION	1.6878368486467171E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999892423487896	WITHOUT_CLASSIFICATION	1.075765121028644E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999597396148411	WITHOUT_CLASSIFICATION	4.026038515889684E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996380245554579	WITHOUT_CLASSIFICATION	3.6197544454204597E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999322458868652	WITHOUT_CLASSIFICATION	6.775411313474104E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999608648019236	WITHOUT_CLASSIFICATION	3.9135198076539055E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9980461709471484	WITHOUT_CLASSIFICATION	0.001953829052851634	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999830350903427	WITHOUT_CLASSIFICATION	1.6964909657301623E-4	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.999860893789012	WITHOUT_CLASSIFICATION	1.3910621098799761E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999278319846313	WITHOUT_CLASSIFICATION	7.216801536861913E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999862109003245	WITHOUT_CLASSIFICATION	1.3789099675516067E-5	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999926251320501	WITHOUT_CLASSIFICATION	7.374867949842324E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999926266798931	WITHOUT_CLASSIFICATION	7.3733201068933784E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999786402377165	WITHOUT_CLASSIFICATION	2.1359762283527363E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999915795173909	WITHOUT_CLASSIFICATION	8.420482609021022E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9862365397729181	WITHOUT_CLASSIFICATION	0.013763460227081832	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999395462483147	WITHOUT_CLASSIFICATION	6.045375168535285E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999650710243181	WITHOUT_CLASSIFICATION	3.4928975681876134E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999839891621223	WITHOUT_CLASSIFICATION	1.6010837877710956E-4	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999890357518059	WITHOUT_CLASSIFICATION	1.0964248194100356E-4	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999202467243329	WITHOUT_CLASSIFICATION	7.975327566713855E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999148583231067	WITHOUT_CLASSIFICATION	8.514167689332803E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999629957611981	WITHOUT_CLASSIFICATION	3.700423880185643E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999200281953238	WITHOUT_CLASSIFICATION	7.997180467618922E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999937954572705	WITHOUT_CLASSIFICATION	6.204542729488884E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999756316736509	WITHOUT_CLASSIFICATION	2.4368326349066495E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998861469934569	WITHOUT_CLASSIFICATION	1.1385300654308828E-4	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999957975255203	WITHOUT_CLASSIFICATION	4.2024744796752744E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999916900315837	WITHOUT_CLASSIFICATION	8.309968416223385E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999988871171916	WITHOUT_CLASSIFICATION	1.112882808346297E-6	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999474394917413	WITHOUT_CLASSIFICATION	5.25605082587812E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9995395538850933	WITHOUT_CLASSIFICATION	4.604461149067218E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966350288173	WITHOUT_CLASSIFICATION	3.3649711826898155E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999541731324811	WITHOUT_CLASSIFICATION	4.582686751885103E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999559714540068	WITHOUT_CLASSIFICATION	4.402854599322024E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999737910224229	WITHOUT_CLASSIFICATION	2.6208977577059355E-5	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999852972618407	WITHOUT_CLASSIFICATION	1.4702738159269712E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999919384123955	WITHOUT_CLASSIFICATION	8.061587604486891E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999998122906441	WITHOUT_CLASSIFICATION	1.8770935590908886E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999920877381866	WITHOUT_CLASSIFICATION	7.912261813316569E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660204996417	WITHOUT_CLASSIFICATION	3.397950035835122E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999920877381866	WITHOUT_CLASSIFICATION	7.912261813316569E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999420691173954	WITHOUT_CLASSIFICATION	5.793088260458314E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999880242798196	WITHOUT_CLASSIFICATION	1.1975720180315328E-5	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.999993998978685	WITHOUT_CLASSIFICATION	6.001021315006084E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998955565801544	WITHOUT_CLASSIFICATION	1.0444341984559875E-4	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999155350445524	WITHOUT_CLASSIFICATION	8.446495544752662E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9932450826662113	WITHOUT_CLASSIFICATION	0.006754917333788716	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999964246152309	WITHOUT_CLASSIFICATION	3.575384768995271E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.99998866879531	WITHOUT_CLASSIFICATION	1.133120468995992E-5	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999944431760537	WITHOUT_CLASSIFICATION	5.556823946310998E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996044891834435	WITHOUT_CLASSIFICATION	3.955108165565423E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999878608203039	WITHOUT_CLASSIFICATION	1.2139179696121295E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999836364364733	WITHOUT_CLASSIFICATION	1.6363563526651353E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993043550537918	WITHOUT_CLASSIFICATION	6.956449462082036E-4	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9971958254323107	WITHOUT_CLASSIFICATION	0.0028041745676892884	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999510223548843	WITHOUT_CLASSIFICATION	4.8977645115599E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999944488456217	WITHOUT_CLASSIFICATION	5.551154378330369E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999155869703599	WITHOUT_CLASSIFICATION	8.441302964008344E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999155869703599	WITHOUT_CLASSIFICATION	8.441302964008344E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997823403997878	WITHOUT_CLASSIFICATION	2.1765960021217855E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999709675249846	WITHOUT_CLASSIFICATION	2.9032475015393457E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999624916907337	WITHOUT_CLASSIFICATION	3.750830926637083E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999482721575729	WITHOUT_CLASSIFICATION	5.1727842427163504E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999547104563988	WITHOUT_CLASSIFICATION	4.5289543601148036E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999756219283386	WITHOUT_CLASSIFICATION	2.4378071661360862E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9992383230820793	WITHOUT_CLASSIFICATION	7.616769179206658E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999897640523752	WITHOUT_CLASSIFICATION	1.0235947624800913E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.999991083401626	WITHOUT_CLASSIFICATION	8.916598373933516E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999891195870807	WITHOUT_CLASSIFICATION	1.0880412919252243E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999362033644742	WITHOUT_CLASSIFICATION	6.379663552581573E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999669713649876	WITHOUT_CLASSIFICATION	3.302863501239954E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999893648012956	WITHOUT_CLASSIFICATION	1.0635198704359835E-5	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999188261279913	WITHOUT_CLASSIFICATION	8.11738720086975E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999845371363267	WITHOUT_CLASSIFICATION	1.546286367327491E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999734892930185	WITHOUT_CLASSIFICATION	2.6510706981416357E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999458615742519	WITHOUT_CLASSIFICATION	5.413842574804073E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995623370817399	WITHOUT_CLASSIFICATION	4.3766291826006864E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9998974707581361	WITHOUT_CLASSIFICATION	1.0252924186388597E-4	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999780115249088	WITHOUT_CLASSIFICATION	2.1988475091175473E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999433597215346	WITHOUT_CLASSIFICATION	5.6640278465380935E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999939473250425	WITHOUT_CLASSIFICATION	6.052674957486307E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999771452810191	WITHOUT_CLASSIFICATION	2.2854718980905694E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999849923621259	WITHOUT_CLASSIFICATION	1.5007637874078433E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9998132669854245	WITHOUT_CLASSIFICATION	1.867330145755074E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999853734671454	WITHOUT_CLASSIFICATION	1.4626532854509316E-5	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9987038032999292	WITHOUT_CLASSIFICATION	0.0012961967000707814	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9995700765396213	WITHOUT_CLASSIFICATION	4.2992346037873554E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999214910039169	WITHOUT_CLASSIFICATION	7.85089960830539E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998956571917019	WITHOUT_CLASSIFICATION	1.0434280829812902E-4	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9992045937744748	WITHOUT_CLASSIFICATION	7.954062255252652E-4	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999218855455478	WITHOUT_CLASSIFICATION	7.811445445215038E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9960736792472973	WITHOUT_CLASSIFICATION	0.003926320752702625	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998248061328446	WITHOUT_CLASSIFICATION	1.751938671552987E-4	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995859996015977	WITHOUT_CLASSIFICATION	4.140003984024127E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999845641237378	WITHOUT_CLASSIFICATION	1.543587626216003E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999650403082083	WITHOUT_CLASSIFICATION	3.495969179160263E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999553753297235	WITHOUT_CLASSIFICATION	4.462467027656482E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999898518578587	WITHOUT_CLASSIFICATION	1.0148142141266812E-5	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995549244875019	WITHOUT_CLASSIFICATION	4.450755124981215E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999626567447102	WITHOUT_CLASSIFICATION	3.734325528985324E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687418000264	WITHOUT_CLASSIFICATION	3.125819997369563E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999213929713477	WITHOUT_CLASSIFICATION	7.860702865223143E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998249646864443	WITHOUT_CLASSIFICATION	1.7503531355567373E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999883338059956	WITHOUT_CLASSIFICATION	1.1666194004320453E-5	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999943081260827	WITHOUT_CLASSIFICATION	5.691873917274408E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999545478764386	WITHOUT_CLASSIFICATION	4.5452123561509546E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999826882838356	WITHOUT_CLASSIFICATION	1.7311716164355308E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999793654817473	WITHOUT_CLASSIFICATION	2.063451825273896E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999521441245878	WITHOUT_CLASSIFICATION	4.785587541219546E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687418000264	WITHOUT_CLASSIFICATION	3.125819997369563E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9994308638916555	WITHOUT_CLASSIFICATION	5.691361083445936E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996693812727852	WITHOUT_CLASSIFICATION	3.306187272147901E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999981957852557	WITHOUT_CLASSIFICATION	1.8042147442961565E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999515816393802	WITHOUT_CLASSIFICATION	4.841836061970608E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999107371684742	WITHOUT_CLASSIFICATION	8.92628315256982E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999107371684742	WITHOUT_CLASSIFICATION	8.92628315256982E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9991473833284948	WITHOUT_CLASSIFICATION	8.526166715051393E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999198293080467	WITHOUT_CLASSIFICATION	8.017069195328235E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999014301198621	WITHOUT_CLASSIFICATION	9.856988013795054E-5	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999607738673133	WITHOUT_CLASSIFICATION	3.922613268658891E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999978998380669	WITHOUT_CLASSIFICATION	2.100161933097468E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999996241443327	WITHOUT_CLASSIFICATION	3.758556673010225E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9988967151072349	WITHOUT_CLASSIFICATION	0.0011032848927651636	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999043993541592	WITHOUT_CLASSIFICATION	9.560064584081254E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994194843733452	WITHOUT_CLASSIFICATION	5.805156266547938E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999192864636322	WITHOUT_CLASSIFICATION	8.071353636779447E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998251552775008	WITHOUT_CLASSIFICATION	1.7484472249921075E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9996719260834588	WITHOUT_CLASSIFICATION	3.2807391654123463E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999996333467073	WITHOUT_CLASSIFICATION	3.6665329271527773E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998702380387018	WITHOUT_CLASSIFICATION	1.2976196129818737E-4	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991487049432757	WITHOUT_CLASSIFICATION	8.512950567242997E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999983874318445	WITHOUT_CLASSIFICATION	1.6125681554456497E-6	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999269665891071	WITHOUT_CLASSIFICATION	7.303341089285723E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996764014373795	WITHOUT_CLASSIFICATION	3.235985626205366E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999954402578088	WITHOUT_CLASSIFICATION	4.559742191221776E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996805426890433	WITHOUT_CLASSIFICATION	3.194573109567365E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999929102012236	WITHOUT_CLASSIFICATION	7.08979877629429E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999950870408221	WITHOUT_CLASSIFICATION	4.9129591779798814E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999964132969196	WITHOUT_CLASSIFICATION	3.5867030805151295E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9979462960719782	WITHOUT_CLASSIFICATION	0.0020537039280217944	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999844407729024	WITHOUT_CLASSIFICATION	1.5559227097618225E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999165566261803	WITHOUT_CLASSIFICATION	8.344337381966955E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999678084678698	WITHOUT_CLASSIFICATION	3.21915321301846E-5	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999664532553246	WITHOUT_CLASSIFICATION	3.3546744675286855E-5	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.998710750005345	WITHOUT_CLASSIFICATION	0.001289249994655011	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999262674375594	WITHOUT_CLASSIFICATION	7.373256244066181E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999664532553246	WITHOUT_CLASSIFICATION	3.3546744675286855E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999901022865341	WITHOUT_CLASSIFICATION	9.897713465951565E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9997452737672664	WITHOUT_CLASSIFICATION	2.5472623273364257E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999707190601437	WITHOUT_CLASSIFICATION	2.928093985634316E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996386563978868	WITHOUT_CLASSIFICATION	3.613436021131523E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996291700426718	WITHOUT_CLASSIFICATION	3.708299573281761E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999362033644742	WITHOUT_CLASSIFICATION	6.379663552581573E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9996653219250006	WITHOUT_CLASSIFICATION	3.3467807499943557E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9990799616056008	WITHOUT_CLASSIFICATION	9.200383943992528E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999254365418765	WITHOUT_CLASSIFICATION	7.456345812353821E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999835670990048	WITHOUT_CLASSIFICATION	1.643290099525813E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999312176739619	WITHOUT_CLASSIFICATION	6.878232603809261E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.999957526074321	WITHOUT_CLASSIFICATION	4.2473925679007606E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9995622366279796	WITHOUT_CLASSIFICATION	4.377633720203767E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999593533075612	WITHOUT_CLASSIFICATION	4.064669243866199E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999618867371574	WITHOUT_CLASSIFICATION	3.81132628427076E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999684061767206	WITHOUT_CLASSIFICATION	3.159382327946811E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999883373802122	WITHOUT_CLASSIFICATION	1.1662619787871156E-5	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999904651939665	WITHOUT_CLASSIFICATION	9.53480603342186E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.99999372100299	WITHOUT_CLASSIFICATION	6.278997009995169E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999582346537801	WITHOUT_CLASSIFICATION	4.176534621989055E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999740088322583	WITHOUT_CLASSIFICATION	2.59911677417097E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999527022893255	WITHOUT_CLASSIFICATION	4.729771067448493E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999887284758602	WITHOUT_CLASSIFICATION	1.1271524139891507E-5	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996807353491758	WITHOUT_CLASSIFICATION	3.1926465082423157E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999902877685015	WITHOUT_CLASSIFICATION	9.712231498511993E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9995421326167778	WITHOUT_CLASSIFICATION	4.578673832222697E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999235595467045	WITHOUT_CLASSIFICATION	7.644045329550349E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997205636182279	WITHOUT_CLASSIFICATION	2.794363817720678E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.999993763876227	WITHOUT_CLASSIFICATION	6.236123772946614E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999714009628795	WITHOUT_CLASSIFICATION	2.8599037120400912E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972377639494	WITHOUT_CLASSIFICATION	2.7622360505995188E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759090520572	WITHOUT_CLASSIFICATION	2.4090947942729166E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999753771714354	WITHOUT_CLASSIFICATION	2.4622828564701186E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999853619099123	WITHOUT_CLASSIFICATION	1.4638090087701299E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999892366218326	WITHOUT_CLASSIFICATION	1.0763378167424589E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999993092288784	WITHOUT_CLASSIFICATION	6.907711216878174E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999853150561538	WITHOUT_CLASSIFICATION	1.468494384622318E-5	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999903597539436	WITHOUT_CLASSIFICATION	9.6402460564094E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999775535868791	WITHOUT_CLASSIFICATION	2.2446413120875825E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.99999384746335	WITHOUT_CLASSIFICATION	6.152536650089474E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999965683173264	WITHOUT_CLASSIFICATION	3.431682673613448E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999940821058555	WITHOUT_CLASSIFICATION	5.917894144524676E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999259851933977	WITHOUT_CLASSIFICATION	7.401480660234794E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999685801548335	WITHOUT_CLASSIFICATION	3.1419845166474436E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999966188689446	WITHOUT_CLASSIFICATION	3.3811310553582973E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999985023597469	WITHOUT_CLASSIFICATION	1.4976402530932903E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999670763247355	WITHOUT_CLASSIFICATION	3.292367526457366E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997623558902795	WITHOUT_CLASSIFICATION	2.3764410972057265E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999335308396214	WITHOUT_CLASSIFICATION	6.6469160378564E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999645877341676	WITHOUT_CLASSIFICATION	3.541226583240803E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999940467786911	WITHOUT_CLASSIFICATION	5.953221308946108E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998729485595375	WITHOUT_CLASSIFICATION	1.270514404625308E-4	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999402679628129	WITHOUT_CLASSIFICATION	5.973203718722E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999738822239288	WITHOUT_CLASSIFICATION	2.6117776071215776E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995501856436455	WITHOUT_CLASSIFICATION	4.49814356354454E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999982171328844	WITHOUT_CLASSIFICATION	1.7828671155283162E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999788803946059	WITHOUT_CLASSIFICATION	2.111960539413975E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9986223050415578	WITHOUT_CLASSIFICATION	0.001377694958442259	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999304806289993	WITHOUT_CLASSIFICATION	6.951937100075919E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972377639494	WITHOUT_CLASSIFICATION	2.7622360505995188E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999955355712791	WITHOUT_CLASSIFICATION	4.464428720893185E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999989715019075	WITHOUT_CLASSIFICATION	1.0284980924920883E-6	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999754747749661	WITHOUT_CLASSIFICATION	2.4525225033895188E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999423618864716	WITHOUT_CLASSIFICATION	5.7638113528535625E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999963030922785	WITHOUT_CLASSIFICATION	3.6969077214962124E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999927494836057	WITHOUT_CLASSIFICATION	7.2505163943003E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748657717645	WITHOUT_CLASSIFICATION	2.5134228235477037E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999892913687096	WITHOUT_CLASSIFICATION	1.0708631290335043E-5	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999952565574366	WITHOUT_CLASSIFICATION	4.743442563370335E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999616049047968	WITHOUT_CLASSIFICATION	3.839509520315043E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999947789309378	WITHOUT_CLASSIFICATION	5.221069062122506E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996808073601154	WITHOUT_CLASSIFICATION	3.191926398845258E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999825337269698	WITHOUT_CLASSIFICATION	1.7466273030246468E-5	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999638996279341	WITHOUT_CLASSIFICATION	3.610037206595132E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999420691173954	WITHOUT_CLASSIFICATION	5.793088260458314E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999993562464026	WITHOUT_CLASSIFICATION	6.43753597471438E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999978680437788	WITHOUT_CLASSIFICATION	2.13195622122113E-6	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999875389875802	WITHOUT_CLASSIFICATION	1.246101241982414E-5	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999953635814183	WITHOUT_CLASSIFICATION	4.6364185817802585E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999985895620047	WITHOUT_CLASSIFICATION	1.4104379952695989E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997542431757459	WITHOUT_CLASSIFICATION	2.457568242541321E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997542431757459	WITHOUT_CLASSIFICATION	2.457568242541321E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999842254478976	WITHOUT_CLASSIFICATION	1.577455210249526E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999941073889997	WITHOUT_CLASSIFICATION	5.89261100017191E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999886840643136	WITHOUT_CLASSIFICATION	1.1315935686251842E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999838168392103	WITHOUT_CLASSIFICATION	1.618316078964693E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999191872053864	WITHOUT_CLASSIFICATION	8.081279461359186E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999918570805362	WITHOUT_CLASSIFICATION	8.142919463766683E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999587959546797	WITHOUT_CLASSIFICATION	4.12040453202597E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999308748934886	WITHOUT_CLASSIFICATION	6.912510651129329E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999308748934886	WITHOUT_CLASSIFICATION	6.912510651129329E-5	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9993774790960377	WITHOUT_CLASSIFICATION	6.225209039623245E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999829600312934	WITHOUT_CLASSIFICATION	1.7039968706601304E-5	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997984635290172	WITHOUT_CLASSIFICATION	2.0153647098278903E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999893779789548	WITHOUT_CLASSIFICATION	1.0622021045200807E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999893779789548	WITHOUT_CLASSIFICATION	1.0622021045200807E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999893779789548	WITHOUT_CLASSIFICATION	1.0622021045200807E-5	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999570781644472	WITHOUT_CLASSIFICATION	4.292183555283559E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999755518597556	WITHOUT_CLASSIFICATION	2.444814024441133E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999817733491804	WITHOUT_CLASSIFICATION	1.822665081956612E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999463728960413	WITHOUT_CLASSIFICATION	5.362710395874169E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999983740958511	WITHOUT_CLASSIFICATION	1.6259041489041543E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999991247175928	WITHOUT_CLASSIFICATION	8.752824072671428E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999943921120733	WITHOUT_CLASSIFICATION	5.607887926699984E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9986753072452966	WITHOUT_CLASSIFICATION	0.001324692754703445	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999897104680998	WITHOUT_CLASSIFICATION	1.0289531900122792E-5	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999923787098498	WITHOUT_CLASSIFICATION	7.621290150142162E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999725519297907	WITHOUT_CLASSIFICATION	2.7448070209334385E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999628840952139	WITHOUT_CLASSIFICATION	3.7115904786161E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999749909277483	WITHOUT_CLASSIFICATION	2.5009072251726917E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999971411095572	WITHOUT_CLASSIFICATION	2.8588904427131942E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999868680808838	WITHOUT_CLASSIFICATION	1.3131919116173116E-5	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999852820788914	WITHOUT_CLASSIFICATION	1.4717921108700556E-5	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999941167080777	WITHOUT_CLASSIFICATION	5.883291922404635E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997542431757459	WITHOUT_CLASSIFICATION	2.457568242541321E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999858463731486	WITHOUT_CLASSIFICATION	1.4153626851393978E-5	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999991073033982	WITHOUT_CLASSIFICATION	8.926966017888021E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999448386425639	WITHOUT_CLASSIFICATION	5.516135743607645E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999705189738209	WITHOUT_CLASSIFICATION	2.948102617906393E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999808811899147	WITHOUT_CLASSIFICATION	1.9118810085414282E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999952045351266	WITHOUT_CLASSIFICATION	4.795464873306398E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999923924481283	WITHOUT_CLASSIFICATION	7.60755187170808E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999927933732442	WITHOUT_CLASSIFICATION	7.206626755808098E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997334356980759	WITHOUT_CLASSIFICATION	2.665643019240711E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999905619812792	WITHOUT_CLASSIFICATION	9.438018720704996E-6	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999712954600558	WITHOUT_CLASSIFICATION	2.8704539944201016E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999578354395943	WITHOUT_CLASSIFICATION	4.216456040573438E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999827778382572	WITHOUT_CLASSIFICATION	1.722216174286115E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999786383300315	WITHOUT_CLASSIFICATION	2.1361669968530497E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999671096159932	WITHOUT_CLASSIFICATION	3.289038400681762E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999980877736026	WITHOUT_CLASSIFICATION	1.912226397497729E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999961151699848	WITHOUT_CLASSIFICATION	3.884830015305726E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999986074464267	WITHOUT_CLASSIFICATION	1.3925535732491692E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999793112872546	WITHOUT_CLASSIFICATION	2.0688712745428083E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999793112872546	WITHOUT_CLASSIFICATION	2.0688712745428083E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999840278068782	WITHOUT_CLASSIFICATION	1.5972193121684387E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999944986220982	WITHOUT_CLASSIFICATION	5.501377901800742E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999840140383158	WITHOUT_CLASSIFICATION	1.5985961684146837E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999970920867833	WITHOUT_CLASSIFICATION	2.9079132166925743E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999952752559179	WITHOUT_CLASSIFICATION	4.724744082094394E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999594924426675	WITHOUT_CLASSIFICATION	4.050755733245186E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999801034968618	WITHOUT_CLASSIFICATION	1.989650313814596E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998936627236065	WITHOUT_CLASSIFICATION	1.0633727639350999E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999906369415792	WITHOUT_CLASSIFICATION	9.363058420749272E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999984983188572	WITHOUT_CLASSIFICATION	1.5016811427992279E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999511391055428	WITHOUT_CLASSIFICATION	4.8860894457124995E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996820135784685	WITHOUT_CLASSIFICATION	3.1798642153141543E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999981083362718	WITHOUT_CLASSIFICATION	1.8916637282599025E-6	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999939693766982	WITHOUT_CLASSIFICATION	6.030623301811132E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999992027771234	WITHOUT_CLASSIFICATION	7.972228765603407E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999299459465446	WITHOUT_CLASSIFICATION	7.005405345535069E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985513394489	WITHOUT_CLASSIFICATION	1.4486605510954114E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985513394489	WITHOUT_CLASSIFICATION	1.4486605510954114E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999640154037167	WITHOUT_CLASSIFICATION	3.598459628332886E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997383860691	WITHOUT_CLASSIFICATION	2.616139309199067E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999389375562056	WITHOUT_CLASSIFICATION	6.106244379440833E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999389375562056	WITHOUT_CLASSIFICATION	6.106244379440833E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999182082859981	WITHOUT_CLASSIFICATION	8.17917140019404E-5	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999863461272967	WITHOUT_CLASSIFICATION	1.3653872703297938E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995165624693023	WITHOUT_CLASSIFICATION	4.834375306976709E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999941848935519	WITHOUT_CLASSIFICATION	5.815106448128878E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999514795141087	WITHOUT_CLASSIFICATION	4.852048589141395E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9997196707939994	WITHOUT_CLASSIFICATION	2.803292060006758E-4	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999959026020538	WITHOUT_CLASSIFICATION	4.0973979462147546E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999941848935519	WITHOUT_CLASSIFICATION	5.815106448128878E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999483778303057	WITHOUT_CLASSIFICATION	5.162216969437925E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999864824569714	WITHOUT_CLASSIFICATION	1.351754302864134E-5	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999903794571513	WITHOUT_CLASSIFICATION	9.620542848703473E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999625164006164	WITHOUT_CLASSIFICATION	3.7483599383564144E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999692906465429	WITHOUT_CLASSIFICATION	3.0709353457083006E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999868344372712	WITHOUT_CLASSIFICATION	1.3165562728892396E-5	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999765670222005	WITHOUT_CLASSIFICATION	2.3432977799477896E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999835924743831	WITHOUT_CLASSIFICATION	1.6407525616906147E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999995659817533	WITHOUT_CLASSIFICATION	4.340182467030058E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999902045380398	WITHOUT_CLASSIFICATION	9.795461960179644E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998518603377374	WITHOUT_CLASSIFICATION	1.4813966226262165E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999947289652894	WITHOUT_CLASSIFICATION	5.27103471058383E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999899843685747	WITHOUT_CLASSIFICATION	1.0015631425243026E-5	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999943100516868	WITHOUT_CLASSIFICATION	5.689948313129649E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999909616293835	WITHOUT_CLASSIFICATION	9.038370616562868E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999912917986025	WITHOUT_CLASSIFICATION	8.708201397434357E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9992942076842554	WITHOUT_CLASSIFICATION	7.057923157446311E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999318490355493	WITHOUT_CLASSIFICATION	6.815096445061848E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999318490355493	WITHOUT_CLASSIFICATION	6.815096445061848E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999765670222005	WITHOUT_CLASSIFICATION	2.3432977799477896E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999725322451244	WITHOUT_CLASSIFICATION	2.7467754875571956E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999763982547902	WITHOUT_CLASSIFICATION	2.3601745209796652E-5	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998138597623284	WITHOUT_CLASSIFICATION	1.8614023767158443E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999746338599012	WITHOUT_CLASSIFICATION	2.5366140098893553E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999794831633274	WITHOUT_CLASSIFICATION	2.0516836672621855E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999938027966822	WITHOUT_CLASSIFICATION	6.1972033178658445E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999914240976593	WITHOUT_CLASSIFICATION	8.575902340650052E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999381694034983	WITHOUT_CLASSIFICATION	6.183059650172027E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999968495775127	WITHOUT_CLASSIFICATION	3.150422487334873E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999747230098656	WITHOUT_CLASSIFICATION	2.5276990134521864E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999987564279826	WITHOUT_CLASSIFICATION	1.2435720174103604E-6	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999920868842321	WITHOUT_CLASSIFICATION	7.913115767845929E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999812737560645	WITHOUT_CLASSIFICATION	1.8726243935583887E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999634140117125	WITHOUT_CLASSIFICATION	3.658598828753461E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999970471496261	WITHOUT_CLASSIFICATION	2.9528503738971315E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999989335408121	WITHOUT_CLASSIFICATION	1.0664591879040454E-5	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999911757805997	WITHOUT_CLASSIFICATION	8.82421940027591E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999957867964726	WITHOUT_CLASSIFICATION	4.213203527412964E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999303737720238	WITHOUT_CLASSIFICATION	6.962622797632972E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999878121080038	WITHOUT_CLASSIFICATION	1.218789199628427E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999035994633201	WITHOUT_CLASSIFICATION	9.640053667999116E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999955604253701	WITHOUT_CLASSIFICATION	4.439574629898202E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999755588830836	WITHOUT_CLASSIFICATION	2.444111691636875E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999934869851537	WITHOUT_CLASSIFICATION	6.513014846233079E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999662519420535	WITHOUT_CLASSIFICATION	3.374805794648493E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999854911200242	WITHOUT_CLASSIFICATION	1.4508879975771095E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9976670704399515	WITHOUT_CLASSIFICATION	0.002332929560048451	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997518285359239	WITHOUT_CLASSIFICATION	2.481714640761237E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999715312765501	WITHOUT_CLASSIFICATION	2.8468723449945054E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999764906343793	WITHOUT_CLASSIFICATION	2.3509365620693265E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999697808823373	WITHOUT_CLASSIFICATION	3.021911766261023E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999863980801327	WITHOUT_CLASSIFICATION	1.3601919867278844E-5	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999938271693781	WITHOUT_CLASSIFICATION	6.172830621790393E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999936818818896	WITHOUT_CLASSIFICATION	6.318118110358766E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999903805232707	WITHOUT_CLASSIFICATION	9.61947672927007E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999104418462357	WITHOUT_CLASSIFICATION	8.955815376429973E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999955749955203	WITHOUT_CLASSIFICATION	4.425004479787956E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999781143214456	WITHOUT_CLASSIFICATION	2.188567855437455E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997311431604922	WITHOUT_CLASSIFICATION	2.688568395078463E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999865610863328	WITHOUT_CLASSIFICATION	1.3438913667208046E-5	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999627319219082	WITHOUT_CLASSIFICATION	3.7268078091820604E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999738256239918	WITHOUT_CLASSIFICATION	2.6174376008128903E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998059361640987	WITHOUT_CLASSIFICATION	1.9406383590119685E-4	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998779885805106	WITHOUT_CLASSIFICATION	1.2201141948938914E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999840626058353	WITHOUT_CLASSIFICATION	1.5937394164712842E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999314208155561	WITHOUT_CLASSIFICATION	6.857918444392161E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999955419312683	WITHOUT_CLASSIFICATION	4.4580687316659465E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999672939654007	WITHOUT_CLASSIFICATION	3.2706034599297895E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999981547158886	WITHOUT_CLASSIFICATION	1.845284111462271E-6	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999627019245922	WITHOUT_CLASSIFICATION	3.729807540777323E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999281682748682	WITHOUT_CLASSIFICATION	7.183172513176641E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999514795141087	WITHOUT_CLASSIFICATION	4.852048589141395E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9994987875097849	WITHOUT_CLASSIFICATION	5.01212490215136E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999970471496261	WITHOUT_CLASSIFICATION	2.9528503738971315E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999795276407627	WITHOUT_CLASSIFICATION	2.0472359237359955E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999976636560497	WITHOUT_CLASSIFICATION	2.3363439503036012E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999955521998817	WITHOUT_CLASSIFICATION	4.447800118357098E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999995543947673	WITHOUT_CLASSIFICATION	4.456052327064409E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.99998064643823	WITHOUT_CLASSIFICATION	1.9353561769934294E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999979362413494	WITHOUT_CLASSIFICATION	2.0637586505852047E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999650936236211	WITHOUT_CLASSIFICATION	3.490637637889615E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999738297345421	WITHOUT_CLASSIFICATION	2.6170265457868196E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999491844027683	WITHOUT_CLASSIFICATION	5.0815597231758637E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999958115026292	WITHOUT_CLASSIFICATION	4.188497370832098E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998864906073698	WITHOUT_CLASSIFICATION	1.1350939263031639E-4	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999988799927615	WITHOUT_CLASSIFICATION	1.1200072384974079E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999938424986127	WITHOUT_CLASSIFICATION	6.157501387305371E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999938424986127	WITHOUT_CLASSIFICATION	6.157501387305371E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998965239174477	WITHOUT_CLASSIFICATION	1.0347608255227114E-4	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9994084724952049	WITHOUT_CLASSIFICATION	5.915275047951519E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999995671165454	WITHOUT_CLASSIFICATION	4.3288345460509005E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9973992921268611	WITHOUT_CLASSIFICATION	0.0026007078731389442	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999893067130335	WITHOUT_CLASSIFICATION	1.0693286966500702E-5	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999848286069707	WITHOUT_CLASSIFICATION	1.5171393029185846E-5	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999976000300635	WITHOUT_CLASSIFICATION	2.399969936495989E-6	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999565770619896	WITHOUT_CLASSIFICATION	4.3422938010299505E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999663331560171	WITHOUT_CLASSIFICATION	3.366684398289474E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999731024730091	WITHOUT_CLASSIFICATION	2.689752699091951E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999743784428554	WITHOUT_CLASSIFICATION	2.5621557144630582E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999743784428554	WITHOUT_CLASSIFICATION	2.5621557144630582E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996582090219	WITHOUT_CLASSIFICATION	3.4179097801058663E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999982365735678	WITHOUT_CLASSIFICATION	1.7634264322042638E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999915370236034	WITHOUT_CLASSIFICATION	8.46297639660524E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996967268784485	WITHOUT_CLASSIFICATION	3.0327312155157513E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999983602434344	WITHOUT_CLASSIFICATION	1.6397565655661592E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999983162209761	WITHOUT_CLASSIFICATION	1.6837790239070603E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999474796358365	WITHOUT_CLASSIFICATION	5.252036416344548E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.999996080822811	WITHOUT_CLASSIFICATION	3.919177188941607E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999905188661652	WITHOUT_CLASSIFICATION	9.481133834763082E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999731879203839	WITHOUT_CLASSIFICATION	2.6812079616090488E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999722531930063	WITHOUT_CLASSIFICATION	2.7746806993648496E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684810769781	WITHOUT_CLASSIFICATION	3.1518923021857865E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999470934514879	WITHOUT_CLASSIFICATION	5.290654851209959E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999893207951389	WITHOUT_CLASSIFICATION	1.0679204861137639E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996979189619745	WITHOUT_CLASSIFICATION	3.020810380256097E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999923833921647	WITHOUT_CLASSIFICATION	7.616607835238735E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9999312531366394	WITHOUT_CLASSIFICATION	6.874686336046974E-5	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997287419151859	WITHOUT_CLASSIFICATION	2.7125808481413014E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999975570620817	WITHOUT_CLASSIFICATION	2.4429379183364894E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999982488309989	WITHOUT_CLASSIFICATION	1.7511690010997396E-6	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996805426890433	WITHOUT_CLASSIFICATION	3.194573109567365E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999719039103168	WITHOUT_CLASSIFICATION	2.809608968330648E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998077481573606	WITHOUT_CLASSIFICATION	1.922518426392653E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999899561720671	WITHOUT_CLASSIFICATION	1.0043827932860047E-5	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999474538241193	WITHOUT_CLASSIFICATION	5.2546175880646264E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999863118703586	WITHOUT_CLASSIFICATION	1.3688129641495566E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818920994507	WITHOUT_CLASSIFICATION	1.8107900549317665E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999971924238428	WITHOUT_CLASSIFICATION	2.8075761571696614E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9994212179476216	WITHOUT_CLASSIFICATION	5.78782052378353E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771277199571	WITHOUT_CLASSIFICATION	2.2872280042941074E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.999805075893972	WITHOUT_CLASSIFICATION	1.9492410602788603E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999960049922372	WITHOUT_CLASSIFICATION	3.995007762795049E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999645845890914	WITHOUT_CLASSIFICATION	3.5415410908591176E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999860687398489	WITHOUT_CLASSIFICATION	1.3931260151115401E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787151981185	WITHOUT_CLASSIFICATION	2.128480188146031E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999978979807659	WITHOUT_CLASSIFICATION	2.1020192341040746E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999973789010605	WITHOUT_CLASSIFICATION	2.621098939507857E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999840712441145	WITHOUT_CLASSIFICATION	1.592875588551622E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999779725941396	WITHOUT_CLASSIFICATION	2.202740586046952E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999772894970022	WITHOUT_CLASSIFICATION	2.2710502997869502E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997897760263292	WITHOUT_CLASSIFICATION	2.1022397367080606E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999940169553568	WITHOUT_CLASSIFICATION	5.9830446431252E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999940940203624	WITHOUT_CLASSIFICATION	5.905979637480316E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999683871901527	WITHOUT_CLASSIFICATION	3.161280984731156E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998818236178665	WITHOUT_CLASSIFICATION	1.1817638213353448E-4	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999910335162655	WITHOUT_CLASSIFICATION	8.966483734503388E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999212431658808	WITHOUT_CLASSIFICATION	7.875683411923914E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.99998443329724	WITHOUT_CLASSIFICATION	1.556670276002465E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999952428046862	WITHOUT_CLASSIFICATION	4.7571953138053634E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999909663148831	WITHOUT_CLASSIFICATION	9.033685116902793E-5	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999908647980958	WITHOUT_CLASSIFICATION	9.13520190416178E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999923871543639	WITHOUT_CLASSIFICATION	7.612845636045926E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999861811362817	WITHOUT_CLASSIFICATION	1.3818863718398168E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999690741628778	WITHOUT_CLASSIFICATION	3.0925837122196174E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999861811362817	WITHOUT_CLASSIFICATION	1.3818863718398168E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999860630563944	WITHOUT_CLASSIFICATION	1.3936943605551216E-5	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999997012609872	WITHOUT_CLASSIFICATION	2.987390128145341E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999828302352068	WITHOUT_CLASSIFICATION	1.7169764793099467E-5	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999963943846947	WITHOUT_CLASSIFICATION	3.6056153054266308E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999901944658182	WITHOUT_CLASSIFICATION	9.805534181864107E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999828302352068	WITHOUT_CLASSIFICATION	1.7169764793099467E-5	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999893204328222	WITHOUT_CLASSIFICATION	1.0679567177786173E-5	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999733351219417	WITHOUT_CLASSIFICATION	2.6664878058295865E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999942154071959	WITHOUT_CLASSIFICATION	5.784592804131855E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999928139443135	WITHOUT_CLASSIFICATION	7.186055686454504E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999718167180202	WITHOUT_CLASSIFICATION	2.818328197988836E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999954303428492	WITHOUT_CLASSIFICATION	4.569657150782465E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999966091453866	WITHOUT_CLASSIFICATION	3.390854613470105E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9993220187826228	WITHOUT_CLASSIFICATION	6.77981217377171E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999938085992145	WITHOUT_CLASSIFICATION	6.191400785428036E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999933947283021	WITHOUT_CLASSIFICATION	6.6052716979763895E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999710097496718	WITHOUT_CLASSIFICATION	2.89902503283098E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999975564868165	WITHOUT_CLASSIFICATION	2.4435131835346803E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995222747472	WITHOUT_CLASSIFICATION	4.777252528550356E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998541499574064	WITHOUT_CLASSIFICATION	1.4585004259353107E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999860229145208	WITHOUT_CLASSIFICATION	1.3977085479262803E-5	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996820551075956	WITHOUT_CLASSIFICATION	3.1794489240441926E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9977074450395975	WITHOUT_CLASSIFICATION	0.002292554960402447	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999944521664519	WITHOUT_CLASSIFICATION	5.547833548121496E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999695786929375	WITHOUT_CLASSIFICATION	3.0421307062555157E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9984561272726913	WITHOUT_CLASSIFICATION	0.001543872727308716	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.99970324888067	WITHOUT_CLASSIFICATION	2.967511193300504E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999337995347555	WITHOUT_CLASSIFICATION	6.620046524452378E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998410803668474	WITHOUT_CLASSIFICATION	1.589196331525186E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9996896923308546	WITHOUT_CLASSIFICATION	3.103076691453265E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999214460062894	WITHOUT_CLASSIFICATION	7.855399371062682E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999605089673944	WITHOUT_CLASSIFICATION	3.9491032605604135E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999998187092765	WITHOUT_CLASSIFICATION	1.812907234999771E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999866901928637	WITHOUT_CLASSIFICATION	1.3309807136327332E-5	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999616194658211	WITHOUT_CLASSIFICATION	3.8380534178997526E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9997938004888823	WITHOUT_CLASSIFICATION	2.0619951111767887E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999744143479744	WITHOUT_CLASSIFICATION	2.5585652025618298E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993633605266975	WITHOUT_CLASSIFICATION	6.366394733024323E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9984561272726913	WITHOUT_CLASSIFICATION	0.001543872727308716	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999846940623823	WITHOUT_CLASSIFICATION	1.5305937617710056E-5	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993768669841573	WITHOUT_CLASSIFICATION	6.231330158426931E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9994806526389397	WITHOUT_CLASSIFICATION	5.193473610602647E-4	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999227238044482	WITHOUT_CLASSIFICATION	7.727619555182022E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999284105570491	WITHOUT_CLASSIFICATION	7.158944295088521E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999519164545351	WITHOUT_CLASSIFICATION	4.808354546494783E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998866776023674	WITHOUT_CLASSIFICATION	1.1332239763262558E-4	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999695691673263	WITHOUT_CLASSIFICATION	3.0430832673836432E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999531272769063	WITHOUT_CLASSIFICATION	4.6872723093740065E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999624261504408	WITHOUT_CLASSIFICATION	3.757384955920359E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9997082838931033	WITHOUT_CLASSIFICATION	2.917161068967297E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998845972361272	WITHOUT_CLASSIFICATION	1.1540276387284106E-4	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999935132340786	WITHOUT_CLASSIFICATION	6.486765921333336E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998391161818139	WITHOUT_CLASSIFICATION	1.6088381818621435E-4	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998372310932311	WITHOUT_CLASSIFICATION	1.6276890676890317E-4	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999938122386747	WITHOUT_CLASSIFICATION	6.1877613253036745E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999153501405974	WITHOUT_CLASSIFICATION	8.464985940259661E-5	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998781540890809	WITHOUT_CLASSIFICATION	1.2184591091904891E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998570622467646	WITHOUT_CLASSIFICATION	1.4293775323537443E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999740018235929	WITHOUT_CLASSIFICATION	2.5998176407133222E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999850867794199	WITHOUT_CLASSIFICATION	1.491322058004717E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999850867794199	WITHOUT_CLASSIFICATION	1.491322058004717E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999933982532238	WITHOUT_CLASSIFICATION	6.601746776199155E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999850867794199	WITHOUT_CLASSIFICATION	1.491322058004717E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999850867794199	WITHOUT_CLASSIFICATION	1.491322058004717E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999966981984044	WITHOUT_CLASSIFICATION	3.3018015956006E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9979924426866867	WITHOUT_CLASSIFICATION	0.0020075573133131516	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999685277819419	WITHOUT_CLASSIFICATION	3.147221805812315E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999685277819419	WITHOUT_CLASSIFICATION	3.147221805812315E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999830256175916	WITHOUT_CLASSIFICATION	1.6974382408496427E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999621480889028	WITHOUT_CLASSIFICATION	3.785191109722929E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999856993803311	WITHOUT_CLASSIFICATION	1.4300619668901422E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9833496455229807	WITHOUT_CLASSIFICATION	0.016650354477019406	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999490239422311	WITHOUT_CLASSIFICATION	5.097605776883597E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996448797790904	WITHOUT_CLASSIFICATION	3.5512022090945187E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9993345160962616	WITHOUT_CLASSIFICATION	6.654839037383363E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999592525094119	WITHOUT_CLASSIFICATION	4.074749058814761E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9990173904315742	WITHOUT_CLASSIFICATION	9.82609568425809E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9994665333829127	WITHOUT_CLASSIFICATION	5.33466617087382E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999707838591483	WITHOUT_CLASSIFICATION	2.9216140851696075E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9978088118696553	WITHOUT_CLASSIFICATION	0.0021911881303447183	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999919384123955	WITHOUT_CLASSIFICATION	8.061587604486891E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999812631284975	WITHOUT_CLASSIFICATION	1.8736871502494603E-4	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997698760722736	WITHOUT_CLASSIFICATION	2.30123927726379E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9992774390306313	WITHOUT_CLASSIFICATION	7.225609693688077E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999968704901064	WITHOUT_CLASSIFICATION	3.1295098935517256E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999892044521966	WITHOUT_CLASSIFICATION	1.0795547803369392E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999919384123955	WITHOUT_CLASSIFICATION	8.061587604486891E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.99970324888067	WITHOUT_CLASSIFICATION	2.967511193300504E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999272266864391	WITHOUT_CLASSIFICATION	7.277331356101594E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999838608900214	WITHOUT_CLASSIFICATION	1.6139109978566658E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788808821004	WITHOUT_CLASSIFICATION	2.1119117899594966E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999351726432758	WITHOUT_CLASSIFICATION	6.48273567241744E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999946048416402	WITHOUT_CLASSIFICATION	5.395158359916212E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998509706950038	WITHOUT_CLASSIFICATION	1.4902930499617668E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999900104212546	WITHOUT_CLASSIFICATION	9.989578745454893E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999836858347646	WITHOUT_CLASSIFICATION	1.63141652354466E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999647243311199	WITHOUT_CLASSIFICATION	3.527566888010021E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999256148183042	WITHOUT_CLASSIFICATION	7.438518169587497E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999430709706878	WITHOUT_CLASSIFICATION	5.69290293121324E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999953660643114	WITHOUT_CLASSIFICATION	4.6339356887066005E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999851534154076	WITHOUT_CLASSIFICATION	1.4846584592449594E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998907198976326	WITHOUT_CLASSIFICATION	1.0928010236736834E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999755765086059	WITHOUT_CLASSIFICATION	2.442349139416537E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999877543246437	WITHOUT_CLASSIFICATION	1.2245675356276471E-5	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999916032511406	WITHOUT_CLASSIFICATION	8.396748859351485E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999649397279993	WITHOUT_CLASSIFICATION	3.5060272000647435E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999371132607786	WITHOUT_CLASSIFICATION	6.288673922141216E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997823332498433	WITHOUT_CLASSIFICATION	2.1766675015666428E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999673783527716	WITHOUT_CLASSIFICATION	3.262164722840613E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999997489608554	WITHOUT_CLASSIFICATION	2.5103914456965864E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999836858347646	WITHOUT_CLASSIFICATION	1.63141652354466E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999293871621864	WITHOUT_CLASSIFICATION	7.061283781363715E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999277321826818	WITHOUT_CLASSIFICATION	7.226781731819315E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996468449897908	WITHOUT_CLASSIFICATION	3.5315501020911786E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999354521736672	WITHOUT_CLASSIFICATION	6.454782633286508E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999214072825152	WITHOUT_CLASSIFICATION	7.859271748480117E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999608901467444	WITHOUT_CLASSIFICATION	3.910985325556181E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999925406232187	WITHOUT_CLASSIFICATION	7.459376781202712E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999608901467444	WITHOUT_CLASSIFICATION	3.910985325556181E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999248889183803	WITHOUT_CLASSIFICATION	7.511108161971647E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999745536421082	WITHOUT_CLASSIFICATION	2.544635789189831E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999928567557421	WITHOUT_CLASSIFICATION	7.1432442579807096E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997320000711978	WITHOUT_CLASSIFICATION	2.67999928802292E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9991092667884087	WITHOUT_CLASSIFICATION	8.9073321159127E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998228115561184	WITHOUT_CLASSIFICATION	1.771884438816474E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996150573854524	WITHOUT_CLASSIFICATION	3.849426145475701E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999745536421082	WITHOUT_CLASSIFICATION	2.544635789189831E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999674026509815	WITHOUT_CLASSIFICATION	3.2597349018398004E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999088494806119	WITHOUT_CLASSIFICATION	9.11505193881123E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999484351817238	WITHOUT_CLASSIFICATION	5.156481827614052E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998816402071219	WITHOUT_CLASSIFICATION	1.1835979287814504E-4	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999960009864408	WITHOUT_CLASSIFICATION	3.999013559143815E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999287966652894	WITHOUT_CLASSIFICATION	7.120333471048648E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999823121341351	WITHOUT_CLASSIFICATION	1.768786586486513E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690646519679	WITHOUT_CLASSIFICATION	3.0935348032137934E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746217525477	WITHOUT_CLASSIFICATION	2.5378247452308647E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997428620111	WITHOUT_CLASSIFICATION	2.5713798889985563E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997428620111	WITHOUT_CLASSIFICATION	2.5713798889985563E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997428620111	WITHOUT_CLASSIFICATION	2.5713798889985563E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999963193336028	WITHOUT_CLASSIFICATION	3.6806663971766256E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999963193336028	WITHOUT_CLASSIFICATION	3.6806663971766256E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9977723920714074	WITHOUT_CLASSIFICATION	0.002227607928592613	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999944726567039	WITHOUT_CLASSIFICATION	5.527343296029164E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.99999233478798	WITHOUT_CLASSIFICATION	7.665212019985246E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999993420968907	WITHOUT_CLASSIFICATION	6.579031092998057E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999006758440566	WITHOUT_CLASSIFICATION	9.932415594345287E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685828809588	WITHOUT_CLASSIFICATION	3.1417119041255214E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695019117697	WITHOUT_CLASSIFICATION	3.0498088230239434E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999965628130397	WITHOUT_CLASSIFICATION	3.4371869602474747E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751568089889	WITHOUT_CLASSIFICATION	2.4843191011051003E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685828809588	WITHOUT_CLASSIFICATION	3.1417119041255214E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695019117697	WITHOUT_CLASSIFICATION	3.0498088230239434E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999583475941695	WITHOUT_CLASSIFICATION	4.16524058305037E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9994870304860194	WITHOUT_CLASSIFICATION	5.129695139806521E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999972833250942	WITHOUT_CLASSIFICATION	2.7166749057474796E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999043570213934	WITHOUT_CLASSIFICATION	9.564297860656365E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999761349814384	WITHOUT_CLASSIFICATION	2.3865018561612826E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9996446519391718	WITHOUT_CLASSIFICATION	3.5534806082815356E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999668049620974	WITHOUT_CLASSIFICATION	3.3195037902543025E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999782949332511	WITHOUT_CLASSIFICATION	2.1705066748912397E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997711862210479	WITHOUT_CLASSIFICATION	2.2881377895221278E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9990712615129165	WITHOUT_CLASSIFICATION	9.287384870835898E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999766805009661	WITHOUT_CLASSIFICATION	2.331949903386667E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999775908794855	WITHOUT_CLASSIFICATION	2.240912051457511E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997878739350411	WITHOUT_CLASSIFICATION	2.12126064958915E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9986801423477654	WITHOUT_CLASSIFICATION	0.001319857652234607	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999586542338433	WITHOUT_CLASSIFICATION	4.134576615665002E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999351595135063	WITHOUT_CLASSIFICATION	6.484048649365604E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999548249841526	WITHOUT_CLASSIFICATION	4.5175015847494134E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999046019983333	WITHOUT_CLASSIFICATION	9.539800166665218E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9993151255425075	WITHOUT_CLASSIFICATION	6.848744574926288E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999953730995224	WITHOUT_CLASSIFICATION	4.626900477623935E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999900117458972	WITHOUT_CLASSIFICATION	9.988254102818432E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9994249606919259	WITHOUT_CLASSIFICATION	5.750393080742335E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999832406680428	WITHOUT_CLASSIFICATION	1.675933195716382E-5	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684068988609	WITHOUT_CLASSIFICATION	3.159310113906079E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999592481961252	WITHOUT_CLASSIFICATION	4.075180387485066E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992498498943083	WITHOUT_CLASSIFICATION	7.501501056916072E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992498498943083	WITHOUT_CLASSIFICATION	7.501501056916072E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999413180940172	WITHOUT_CLASSIFICATION	5.868190598293141E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999918074568948	WITHOUT_CLASSIFICATION	8.192543105195974E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999560269570581	WITHOUT_CLASSIFICATION	4.3973042941990974E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999939924079334	WITHOUT_CLASSIFICATION	6.007592066595963E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997965939738729	WITHOUT_CLASSIFICATION	2.0340602612704491E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9997499616650684	WITHOUT_CLASSIFICATION	2.500383349317055E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999971312649675	WITHOUT_CLASSIFICATION	2.8687350324707167E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999974729621333	WITHOUT_CLASSIFICATION	2.5270378668251664E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999641248811203	WITHOUT_CLASSIFICATION	3.587511887977917E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9991775462435987	WITHOUT_CLASSIFICATION	8.224537564013241E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9969300909202022	WITHOUT_CLASSIFICATION	0.0030699090797978003	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999986159019013	WITHOUT_CLASSIFICATION	1.3840980987084633E-5	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999486450190269	WITHOUT_CLASSIFICATION	5.1354980973040425E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999259531330209	WITHOUT_CLASSIFICATION	7.404686697914137E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999307192841819	WITHOUT_CLASSIFICATION	6.928071581815649E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999838430177586	WITHOUT_CLASSIFICATION	1.6156982241427492E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9969300909202022	WITHOUT_CLASSIFICATION	0.0030699090797978003	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9969300909202022	WITHOUT_CLASSIFICATION	0.0030699090797978003	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9985965420696877	WITHOUT_CLASSIFICATION	0.0014034579303123357	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999724169062227	WITHOUT_CLASSIFICATION	2.758309377722584E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9838526800360751	WITHOUT_CLASSIFICATION	0.016147319963924885	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999885106268526	WITHOUT_CLASSIFICATION	1.1489373147463503E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999786383300315	WITHOUT_CLASSIFICATION	2.1361669968530497E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999351595135063	WITHOUT_CLASSIFICATION	6.484048649365604E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9995079060985491	WITHOUT_CLASSIFICATION	4.920939014508479E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999829222293461	WITHOUT_CLASSIFICATION	1.7077770653845914E-5	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999699569261217	WITHOUT_CLASSIFICATION	3.0043073878346566E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689638485708	WITHOUT_CLASSIFICATION	3.103615142927076E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999952883660471	WITHOUT_CLASSIFICATION	4.711633952849536E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692358717076	WITHOUT_CLASSIFICATION	3.0764128292355335E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999749793183399	WITHOUT_CLASSIFICATION	2.502068166007013E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999749793183399	WITHOUT_CLASSIFICATION	2.502068166007013E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999749793183399	WITHOUT_CLASSIFICATION	2.502068166007013E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999749793183399	WITHOUT_CLASSIFICATION	2.502068166007013E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720284517158	WITHOUT_CLASSIFICATION	2.7971548284159285E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9994818626032094	WITHOUT_CLASSIFICATION	5.181373967906075E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999268821405931	WITHOUT_CLASSIFICATION	7.311785940684031E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999785732798019	WITHOUT_CLASSIFICATION	2.142672019818728E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684493992685	WITHOUT_CLASSIFICATION	3.1550600731475145E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732796065745	WITHOUT_CLASSIFICATION	2.6720393425469342E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999982900816728	WITHOUT_CLASSIFICATION	1.7099183271970198E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999813419706345	WITHOUT_CLASSIFICATION	1.8658029365508394E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999620537602895	WITHOUT_CLASSIFICATION	3.7946239710488525E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999691961805959	WITHOUT_CLASSIFICATION	3.0803819404087276E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999476735295302	WITHOUT_CLASSIFICATION	5.232647046982237E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999970914843175	WITHOUT_CLASSIFICATION	2.908515682500334E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998600301752891	WITHOUT_CLASSIFICATION	1.399698247109399E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999917493549576	WITHOUT_CLASSIFICATION	8.250645042298784E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999917493549576	WITHOUT_CLASSIFICATION	8.250645042298784E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999856067747617	WITHOUT_CLASSIFICATION	1.4393225238390956E-5	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999824787334437	WITHOUT_CLASSIFICATION	1.7521266556274622E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987589640174	WITHOUT_CLASSIFICATION	1.2410359826833452E-6	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684383262626	WITHOUT_CLASSIFICATION	3.1561673737409895E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999887520439187	WITHOUT_CLASSIFICATION	1.124795608128426E-5	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997428620111	WITHOUT_CLASSIFICATION	2.5713798889985563E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999972112570538	WITHOUT_CLASSIFICATION	2.7887429463055915E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999971514049309	WITHOUT_CLASSIFICATION	2.848595069104091E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999939740891988	WITHOUT_CLASSIFICATION	6.0259108012330745E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999359463417288	WITHOUT_CLASSIFICATION	6.405365827118191E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683837805067	WITHOUT_CLASSIFICATION	3.1616219493351524E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999325306495066	WITHOUT_CLASSIFICATION	6.746935049344396E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999829774192592	WITHOUT_CLASSIFICATION	1.7022580740696337E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.99999255135554	WITHOUT_CLASSIFICATION	7.448644460049017E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998028841630094	WITHOUT_CLASSIFICATION	1.9711583699062767E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999646937462898	WITHOUT_CLASSIFICATION	3.530625371011881E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999649176060199	WITHOUT_CLASSIFICATION	3.5082393979998366E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999921382026927	WITHOUT_CLASSIFICATION	7.861797307185563E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999993938396704	WITHOUT_CLASSIFICATION	6.061603296108192E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999817042340905	WITHOUT_CLASSIFICATION	1.829576590945497E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999991247619178	WITHOUT_CLASSIFICATION	8.752380821844804E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999164487983568	WITHOUT_CLASSIFICATION	8.355120164326589E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999931488762391	WITHOUT_CLASSIFICATION	6.85112376084238E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999365989077174	WITHOUT_CLASSIFICATION	6.340109228263204E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999402601852634	WITHOUT_CLASSIFICATION	5.9739814736495404E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9996899732511815	WITHOUT_CLASSIFICATION	3.1002674881851347E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999532378158787	WITHOUT_CLASSIFICATION	4.676218412119132E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999890357518059	WITHOUT_CLASSIFICATION	1.0964248194100356E-4	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999987912644003	WITHOUT_CLASSIFICATION	1.2087355997380503E-6	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998634417364322	WITHOUT_CLASSIFICATION	1.3655826356796626E-4	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9991488396340659	WITHOUT_CLASSIFICATION	8.511603659341015E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999872599210066	WITHOUT_CLASSIFICATION	1.2740078993283818E-5	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9985700082469887	WITHOUT_CLASSIFICATION	0.0014299917530112393	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999983874318445	WITHOUT_CLASSIFICATION	1.6125681554456497E-6	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999786730177197	WITHOUT_CLASSIFICATION	2.1326982280322662E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999758048797918	WITHOUT_CLASSIFICATION	2.4195120208259597E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997924168187555	WITHOUT_CLASSIFICATION	2.0758318124439686E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999581929214851	WITHOUT_CLASSIFICATION	4.180707851478815E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999822764967534	WITHOUT_CLASSIFICATION	1.772350324658957E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999009486162385	WITHOUT_CLASSIFICATION	9.905138376150093E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999844806434944	WITHOUT_CLASSIFICATION	1.551935650563892E-5	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999410038460111	WITHOUT_CLASSIFICATION	5.899615398890981E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996017469618147	WITHOUT_CLASSIFICATION	3.9825303818537646E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998935310811443	WITHOUT_CLASSIFICATION	1.0646891885569343E-4	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999155869703599	WITHOUT_CLASSIFICATION	8.441302964008344E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999804430349906	WITHOUT_CLASSIFICATION	1.9556965009365874E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9992967968307854	WITHOUT_CLASSIFICATION	7.032031692145999E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999909459768744	WITHOUT_CLASSIFICATION	9.054023125602607E-5	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9972243348218395	WITHOUT_CLASSIFICATION	0.002775665178160619	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999673524325808	WITHOUT_CLASSIFICATION	3.264756741913476E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9980266328383491	WITHOUT_CLASSIFICATION	0.001973367161650804	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999958747198512	WITHOUT_CLASSIFICATION	4.1252801488036486E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999948896080376	WITHOUT_CLASSIFICATION	5.110391962350201E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994613413950948	WITHOUT_CLASSIFICATION	5.386586049052059E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998843066650855	WITHOUT_CLASSIFICATION	1.1569333491450092E-4	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999675426664336	WITHOUT_CLASSIFICATION	3.245733356638963E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.998742599044977	WITHOUT_CLASSIFICATION	0.0012574009550229952	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999894751330796	WITHOUT_CLASSIFICATION	1.0524866920396433E-5	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999003405968859	WITHOUT_CLASSIFICATION	9.965940311413993E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999230181296751	WITHOUT_CLASSIFICATION	7.698187032496555E-5	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998903683236694	WITHOUT_CLASSIFICATION	1.096316763305869E-4	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999836841351715	WITHOUT_CLASSIFICATION	1.63158648286195E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999490123349006	WITHOUT_CLASSIFICATION	5.098766509935073E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999991929990013	WITHOUT_CLASSIFICATION	8.070009987574176E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9996836737467325	WITHOUT_CLASSIFICATION	3.16326253267555E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996907654405688	WITHOUT_CLASSIFICATION	3.0923455943117074E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999880542232437	WITHOUT_CLASSIFICATION	1.1945776756372725E-5	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997459625643468	WITHOUT_CLASSIFICATION	2.5403743565321086E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999981887309947	WITHOUT_CLASSIFICATION	1.8112690053766966E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999670896839907	WITHOUT_CLASSIFICATION	3.291031600928681E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999957451252508	WITHOUT_CLASSIFICATION	4.254874749172132E-6	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999917497789055	WITHOUT_CLASSIFICATION	8.25022109458874E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997859270995425	WITHOUT_CLASSIFICATION	2.1407290045754858E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999331716975536	WITHOUT_CLASSIFICATION	6.682830244646939E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999890055869698	WITHOUT_CLASSIFICATION	1.0994413030239993E-5	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999799047614796	WITHOUT_CLASSIFICATION	2.0095238520426663E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999306521798638	WITHOUT_CLASSIFICATION	6.93478201362675E-5	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999985914282729	WITHOUT_CLASSIFICATION	1.4085717270875986E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998415904857663	WITHOUT_CLASSIFICATION	1.5840951423378325E-4	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998510715102346	WITHOUT_CLASSIFICATION	1.4892848976541078E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996820551075956	WITHOUT_CLASSIFICATION	3.1794489240441926E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998274107932736	WITHOUT_CLASSIFICATION	1.7258920672642204E-4	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999932336767082	WITHOUT_CLASSIFICATION	6.766323291847196E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999973487048462	WITHOUT_CLASSIFICATION	2.651295153796893E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999873075833834	WITHOUT_CLASSIFICATION	1.2692416616727212E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998945116550422	WITHOUT_CLASSIFICATION	1.0548834495781759E-4	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997957297353257	WITHOUT_CLASSIFICATION	2.042702646743364E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998830528008351	WITHOUT_CLASSIFICATION	1.1694719916488713E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999398496703382	WITHOUT_CLASSIFICATION	6.015032966185395E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997017206688558	WITHOUT_CLASSIFICATION	2.982793311441228E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998564377168834	WITHOUT_CLASSIFICATION	1.4356228311670837E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998507543823038	WITHOUT_CLASSIFICATION	1.4924561769630787E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9998533485910941	WITHOUT_CLASSIFICATION	1.4665140890597316E-4	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999750728049129	WITHOUT_CLASSIFICATION	2.492719508711843E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999980285233815	WITHOUT_CLASSIFICATION	1.97147661849909E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999677569537007	WITHOUT_CLASSIFICATION	3.2243046299352443E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998192054943006	WITHOUT_CLASSIFICATION	1.8079450569937212E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999921609540551	WITHOUT_CLASSIFICATION	7.839045944965892E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999455068556704	WITHOUT_CLASSIFICATION	5.4493144329627874E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999455068556704	WITHOUT_CLASSIFICATION	5.4493144329627874E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9996504099183836	WITHOUT_CLASSIFICATION	3.4959008161644867E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997561798147445	WITHOUT_CLASSIFICATION	2.4382018525560424E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999968597679586	WITHOUT_CLASSIFICATION	3.1402320413949423E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998078623773368	WITHOUT_CLASSIFICATION	1.9213762266325537E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999831528368545	WITHOUT_CLASSIFICATION	1.6847163145489932E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981435841481349	WITHOUT_CLASSIFICATION	0.0018564158518651083	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9991916026672293	WITHOUT_CLASSIFICATION	8.0839733277069E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999591685264714	WITHOUT_CLASSIFICATION	4.083147352859652E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990576129252298	WITHOUT_CLASSIFICATION	9.42387074770259E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999882601733787	WITHOUT_CLASSIFICATION	1.1739826621304176E-5	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999488608725065	WITHOUT_CLASSIFICATION	5.113912749346729E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998773955868163	WITHOUT_CLASSIFICATION	1.226044131836935E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999918362193913	WITHOUT_CLASSIFICATION	8.163780608698025E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999954223286177	WITHOUT_CLASSIFICATION	4.577671382349504E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999338152671394	WITHOUT_CLASSIFICATION	6.618473286060588E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999774623958405	WITHOUT_CLASSIFICATION	2.2537604159450984E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999774623958405	WITHOUT_CLASSIFICATION	2.2537604159450984E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999840552690213	WITHOUT_CLASSIFICATION	1.594473097858335E-5	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999190937752072	WITHOUT_CLASSIFICATION	8.090622479290131E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999991591952129	WITHOUT_CLASSIFICATION	8.408047870878925E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999733416878007	WITHOUT_CLASSIFICATION	2.6658312199277713E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999888076278101	WITHOUT_CLASSIFICATION	1.1192372189962529E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999812593723025	WITHOUT_CLASSIFICATION	1.8740627697402763E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999812593723025	WITHOUT_CLASSIFICATION	1.8740627697402763E-5	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999956440532447	WITHOUT_CLASSIFICATION	4.355946755303616E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999567938151022	WITHOUT_CLASSIFICATION	4.3206184897910824E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999341663504049	WITHOUT_CLASSIFICATION	6.583364959508817E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997915855234	WITHOUT_CLASSIFICATION	2.0841447651880877E-7	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999248289539999	WITHOUT_CLASSIFICATION	7.51710460000541E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999951130521554	WITHOUT_CLASSIFICATION	4.886947844631352E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999941167080777	WITHOUT_CLASSIFICATION	5.883291922404635E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974839996738	WITHOUT_CLASSIFICATION	2.5160003261301045E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998823573866702	WITHOUT_CLASSIFICATION	1.1764261332973465E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999940467786911	WITHOUT_CLASSIFICATION	5.953221308946108E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999423618864716	WITHOUT_CLASSIFICATION	5.7638113528535625E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9946742653827232	WITHOUT_CLASSIFICATION	0.005325734617276723	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999754772105443	WITHOUT_CLASSIFICATION	2.4522789455720177E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996979189619745	WITHOUT_CLASSIFICATION	3.020810380256097E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998702420437324	WITHOUT_CLASSIFICATION	1.2975795626762567E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999644819295251	WITHOUT_CLASSIFICATION	3.551807047488217E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998750523719189	WITHOUT_CLASSIFICATION	1.2494762808123257E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999576903767955	WITHOUT_CLASSIFICATION	4.230962320452165E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999948316605178	WITHOUT_CLASSIFICATION	5.1683394821869866E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999976640529785	WITHOUT_CLASSIFICATION	2.3359470215024298E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998980576366324	WITHOUT_CLASSIFICATION	1.019423633675895E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999983220253408	WITHOUT_CLASSIFICATION	1.6779746591994075E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999693297489683	WITHOUT_CLASSIFICATION	3.067025103161739E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999554770379862	WITHOUT_CLASSIFICATION	4.452296201389735E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999202202607601	WITHOUT_CLASSIFICATION	7.977973923986944E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999836091666771	WITHOUT_CLASSIFICATION	1.639083332295125E-5	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999922130624127	WITHOUT_CLASSIFICATION	7.786937587278903E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985513394489	WITHOUT_CLASSIFICATION	1.4486605510954114E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997759547879987	WITHOUT_CLASSIFICATION	2.240452120011758E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999214189781379	WITHOUT_CLASSIFICATION	7.858102186204249E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999509552649913	WITHOUT_CLASSIFICATION	4.9044735008759924E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9991734036489084	WITHOUT_CLASSIFICATION	8.265963510915909E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997938327133982	WITHOUT_CLASSIFICATION	2.0616728660183603E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997702998218575	WITHOUT_CLASSIFICATION	2.2970017814249256E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999435245137615	WITHOUT_CLASSIFICATION	5.6475486238520595E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999950015251325	WITHOUT_CLASSIFICATION	4.998474867513272E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999922268231064	WITHOUT_CLASSIFICATION	7.77317689372229E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996890697195268	WITHOUT_CLASSIFICATION	3.109302804731711E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999961671140356	WITHOUT_CLASSIFICATION	3.832885964397976E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999935825487782	WITHOUT_CLASSIFICATION	6.417451221796283E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9996686848990455	WITHOUT_CLASSIFICATION	3.313151009544383E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999042233985739	WITHOUT_CLASSIFICATION	9.577660142613758E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999979085621794	WITHOUT_CLASSIFICATION	2.0914378205729606E-6	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995271828096971	WITHOUT_CLASSIFICATION	4.7281719030297926E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999922268231064	WITHOUT_CLASSIFICATION	7.77317689372229E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996890697195268	WITHOUT_CLASSIFICATION	3.109302804731711E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9991167498390419	WITHOUT_CLASSIFICATION	8.832501609580649E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997807452071121	WITHOUT_CLASSIFICATION	2.192547928879371E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999918951601615	WITHOUT_CLASSIFICATION	8.104839838492322E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999588202975555	WITHOUT_CLASSIFICATION	4.117970244461333E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999926339734014	WITHOUT_CLASSIFICATION	7.366026598601319E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998014762117083	WITHOUT_CLASSIFICATION	1.9852378829153988E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997282571384091	WITHOUT_CLASSIFICATION	2.717428615909663E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999757896748329	WITHOUT_CLASSIFICATION	2.4210325167031227E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999951791844955	WITHOUT_CLASSIFICATION	4.820815504465685E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999672028299706	WITHOUT_CLASSIFICATION	3.279717002923962E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999944895167274	WITHOUT_CLASSIFICATION	5.510483272671828E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999672028299706	WITHOUT_CLASSIFICATION	3.279717002923962E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9997571290864383	WITHOUT_CLASSIFICATION	2.4287091356167768E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996821743439824	WITHOUT_CLASSIFICATION	3.1782565601757635E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9997571290864383	WITHOUT_CLASSIFICATION	2.4287091356167768E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999063489882081	WITHOUT_CLASSIFICATION	9.365101179185006E-5	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999963677587425	WITHOUT_CLASSIFICATION	3.632241257507863E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9997456569581139	WITHOUT_CLASSIFICATION	2.54343041886138E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9997456569581139	WITHOUT_CLASSIFICATION	2.54343041886138E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9996895258212173	WITHOUT_CLASSIFICATION	3.104741787826529E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996912675322258	WITHOUT_CLASSIFICATION	3.0873246777418303E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9996895258212173	WITHOUT_CLASSIFICATION	3.104741787826529E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996662261088441	WITHOUT_CLASSIFICATION	3.337738911558923E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998783655312059	WITHOUT_CLASSIFICATION	1.2163446879405279E-4	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999923759823953	WITHOUT_CLASSIFICATION	7.624017604698935E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9992509713347586	WITHOUT_CLASSIFICATION	7.490286652414224E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999746404881555	WITHOUT_CLASSIFICATION	2.5359511844466593E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999215185216819	WITHOUT_CLASSIFICATION	7.848147831814374E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999581801575919	WITHOUT_CLASSIFICATION	4.181984240804914E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999923535482748	WITHOUT_CLASSIFICATION	7.64645172534205E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997414210877552	WITHOUT_CLASSIFICATION	2.5857891224487873E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999832906028859	WITHOUT_CLASSIFICATION	1.6709397114123376E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999785276584402	WITHOUT_CLASSIFICATION	2.1472341559791942E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999935142527037	WITHOUT_CLASSIFICATION	6.485747296287705E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999960954826631	WITHOUT_CLASSIFICATION	3.904517336848441E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999668757571835	WITHOUT_CLASSIFICATION	3.3124242816445936E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999931652594868	WITHOUT_CLASSIFICATION	6.834740513299003E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998414481629785	WITHOUT_CLASSIFICATION	1.5855183702148085E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999230404262585	WITHOUT_CLASSIFICATION	7.695957374156696E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999608608794404	WITHOUT_CLASSIFICATION	3.913912055955477E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9995164253848661	WITHOUT_CLASSIFICATION	4.835746151339239E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999257865290042	WITHOUT_CLASSIFICATION	7.421347099587928E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999075650426529	WITHOUT_CLASSIFICATION	9.24349573470234E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998172035930555	WITHOUT_CLASSIFICATION	1.827964069445644E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999847909476861	WITHOUT_CLASSIFICATION	1.5209052314007516E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.999923759823953	WITHOUT_CLASSIFICATION	7.624017604698935E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999793374531893	WITHOUT_CLASSIFICATION	2.0662546810587478E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998665455422079	WITHOUT_CLASSIFICATION	1.334544577921283E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.998767081123927	WITHOUT_CLASSIFICATION	0.0012329188760730517	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.999925301245871	WITHOUT_CLASSIFICATION	7.469875412902574E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999915622497074	WITHOUT_CLASSIFICATION	8.437750292611627E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9997714657755243	WITHOUT_CLASSIFICATION	2.2853422447562197E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996662261088441	WITHOUT_CLASSIFICATION	3.337738911558923E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996662261088441	WITHOUT_CLASSIFICATION	3.337738911558923E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999084138936741	WITHOUT_CLASSIFICATION	9.158610632581683E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9997552512122794	WITHOUT_CLASSIFICATION	2.4474878772067025E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999318201439692	WITHOUT_CLASSIFICATION	6.817985603076557E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999072436935403	WITHOUT_CLASSIFICATION	9.275630645961206E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9984108966271094	WITHOUT_CLASSIFICATION	0.0015891033728906566	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999990956531643	WITHOUT_CLASSIFICATION	9.04346835700195E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999936514051694	WITHOUT_CLASSIFICATION	6.34859483071291E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999867516027227	WITHOUT_CLASSIFICATION	1.3248397277262944E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998160183034454	WITHOUT_CLASSIFICATION	1.839816965545744E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999912679551054	WITHOUT_CLASSIFICATION	8.732044894502548E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997414210877552	WITHOUT_CLASSIFICATION	2.5857891224487873E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999218365701706	WITHOUT_CLASSIFICATION	7.81634298293599E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999912679551054	WITHOUT_CLASSIFICATION	8.732044894502548E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962361163582	WITHOUT_CLASSIFICATION	3.763883641827796E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999984288936188	WITHOUT_CLASSIFICATION	1.571106381194512E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998666335379882	WITHOUT_CLASSIFICATION	1.3336646201181436E-4	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998777614081	WITHOUT_CLASSIFICATION	1.2223859189999437E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999517432529098	WITHOUT_CLASSIFICATION	4.825674709025487E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999983773591342	WITHOUT_CLASSIFICATION	1.6226408658515263E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959450549013	WITHOUT_CLASSIFICATION	4.05494509870922E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999852840711607	WITHOUT_CLASSIFICATION	1.4715928839237172E-5	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999782698276134	WITHOUT_CLASSIFICATION	2.1730172386649653E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999404029758596	WITHOUT_CLASSIFICATION	5.9597024140477844E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998705854521815	WITHOUT_CLASSIFICATION	1.2941454781850275E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999912679551054	WITHOUT_CLASSIFICATION	8.732044894502548E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999517432529098	WITHOUT_CLASSIFICATION	4.825674709025487E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959450549013	WITHOUT_CLASSIFICATION	4.05494509870922E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997985931839352	WITHOUT_CLASSIFICATION	2.0140681606493509E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999989367087445	WITHOUT_CLASSIFICATION	1.0632912554912535E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999686596923381	WITHOUT_CLASSIFICATION	3.1340307661992035E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996906832966382	WITHOUT_CLASSIFICATION	3.093167033617276E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999944894249194	WITHOUT_CLASSIFICATION	5.510575080650019E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999922278896771	WITHOUT_CLASSIFICATION	7.772110322811165E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962361163582	WITHOUT_CLASSIFICATION	3.763883641827796E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996808610728491	WITHOUT_CLASSIFICATION	3.1913892715084867E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999220367932132	WITHOUT_CLASSIFICATION	7.796320678678768E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992977778386162	WITHOUT_CLASSIFICATION	7.022221613838211E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9996068816652842	WITHOUT_CLASSIFICATION	3.9311833471571676E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996042109059436	WITHOUT_CLASSIFICATION	3.9578909405636715E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999595493184346	WITHOUT_CLASSIFICATION	4.045068156549245E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999063489882081	WITHOUT_CLASSIFICATION	9.365101179185006E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858833641652	WITHOUT_CLASSIFICATION	1.4116635834815263E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998943268456766	WITHOUT_CLASSIFICATION	1.05673154323341E-4	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997511133623175	WITHOUT_CLASSIFICATION	2.4888663768249484E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999498734979251	WITHOUT_CLASSIFICATION	5.01265020749097E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999328390045397	WITHOUT_CLASSIFICATION	6.716099546035456E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999900560591712	WITHOUT_CLASSIFICATION	9.943940828736721E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999923053306751	WITHOUT_CLASSIFICATION	7.694669324940092E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999962869012175	WITHOUT_CLASSIFICATION	3.7130987825021866E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999922278896771	WITHOUT_CLASSIFICATION	7.772110322811165E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999966823617151	WITHOUT_CLASSIFICATION	3.3176382849031905E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9997581884510661	WITHOUT_CLASSIFICATION	2.418115489338658E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999954831436986	WITHOUT_CLASSIFICATION	4.516856301505238E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999333873477294	WITHOUT_CLASSIFICATION	6.661265227058144E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996884474753738	WITHOUT_CLASSIFICATION	3.1155252462623686E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998705856461371	WITHOUT_CLASSIFICATION	1.29414353863006E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999178313049925	WITHOUT_CLASSIFICATION	8.216869500760682E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999341529455575	WITHOUT_CLASSIFICATION	6.584705444245168E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999046234103108	WITHOUT_CLASSIFICATION	9.537658968906632E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999278677540266	WITHOUT_CLASSIFICATION	7.21322459733896E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999284025397742	WITHOUT_CLASSIFICATION	7.15974602257954E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999975605895367	WITHOUT_CLASSIFICATION	2.4394104633540202E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999755203380661	WITHOUT_CLASSIFICATION	2.447966193384517E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999788543000125	WITHOUT_CLASSIFICATION	2.1145699987468178E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999992050576606	WITHOUT_CLASSIFICATION	7.949423393977931E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999641045981261	WITHOUT_CLASSIFICATION	3.5895401873835365E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996913959247077	WITHOUT_CLASSIFICATION	3.0860407529232915E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999569574078023	WITHOUT_CLASSIFICATION	4.3042592197613286E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999591662020746	WITHOUT_CLASSIFICATION	4.083379792534876E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999887261158604	WITHOUT_CLASSIFICATION	1.1273884139524031E-5	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999949862107316	WITHOUT_CLASSIFICATION	5.01378926840474E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.993813892358303	WITHOUT_CLASSIFICATION	0.0061861076416971335	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9988111948320402	WITHOUT_CLASSIFICATION	0.00118880516795986	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996301289207605	WITHOUT_CLASSIFICATION	3.698710792394295E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999681279063519	WITHOUT_CLASSIFICATION	3.187209364810674E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.999757051641674	WITHOUT_CLASSIFICATION	2.4294835832587453E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999707145844945	WITHOUT_CLASSIFICATION	2.928541550546632E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999902045380398	WITHOUT_CLASSIFICATION	9.795461960179644E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999807233509251	WITHOUT_CLASSIFICATION	1.927664907495108E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9994987875097849	WITHOUT_CLASSIFICATION	5.01212490215136E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999794964540386	WITHOUT_CLASSIFICATION	2.050354596149128E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999273064042022	WITHOUT_CLASSIFICATION	7.269359579770355E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.99994749470429	WITHOUT_CLASSIFICATION	5.2505295709905076E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998934712352571	WITHOUT_CLASSIFICATION	1.0652876474293088E-4	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999273064042022	WITHOUT_CLASSIFICATION	7.269359579770355E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999794964540386	WITHOUT_CLASSIFICATION	2.050354596149128E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.99994749470429	WITHOUT_CLASSIFICATION	5.2505295709905076E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999530894582028	WITHOUT_CLASSIFICATION	4.691054179712985E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999770801284928	WITHOUT_CLASSIFICATION	2.291987150710578E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999196910200978	WITHOUT_CLASSIFICATION	8.030897990219607E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999833805153142	WITHOUT_CLASSIFICATION	1.661948468578686E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999307633078	WITHOUT_CLASSIFICATION	6.923669219091006E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.996094544814654	WITHOUT_CLASSIFICATION	0.0039054551853460453	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9993022081581066	WITHOUT_CLASSIFICATION	6.977918418933844E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997589045853409	WITHOUT_CLASSIFICATION	2.410954146590348E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999725909442838	WITHOUT_CLASSIFICATION	2.7409055716173657E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999865294737828	WITHOUT_CLASSIFICATION	1.3470526217196084E-4	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999926635445396	WITHOUT_CLASSIFICATION	7.336455460285921E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998644802234035	WITHOUT_CLASSIFICATION	1.355197765964565E-4	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999774326499062	WITHOUT_CLASSIFICATION	2.2567350093730626E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998319098591794	WITHOUT_CLASSIFICATION	1.6809014082065638E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999897274119894	WITHOUT_CLASSIFICATION	1.0272588010488444E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999807887461614	WITHOUT_CLASSIFICATION	1.921125383870336E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999088670232243	WITHOUT_CLASSIFICATION	9.113297677573222E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999981570666592	WITHOUT_CLASSIFICATION	1.8429333408510117E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999697457331521	WITHOUT_CLASSIFICATION	3.0254266847943968E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999379090327646	WITHOUT_CLASSIFICATION	6.2090967235471E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999389820371243	WITHOUT_CLASSIFICATION	6.1017962875775235E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999958254424471	WITHOUT_CLASSIFICATION	4.174557552856204E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999791913653512	WITHOUT_CLASSIFICATION	2.0808634648787557E-4	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999749262245967	WITHOUT_CLASSIFICATION	2.5073775403309786E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999379090327646	WITHOUT_CLASSIFICATION	6.2090967235471E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999379090327646	WITHOUT_CLASSIFICATION	6.2090967235471E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999924866495837	WITHOUT_CLASSIFICATION	7.513350416245581E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999924866495837	WITHOUT_CLASSIFICATION	7.513350416245581E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999691150506221	WITHOUT_CLASSIFICATION	3.088494937785353E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999088670232243	WITHOUT_CLASSIFICATION	9.113297677573222E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998732784562984	WITHOUT_CLASSIFICATION	1.2672154370163598E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999879783061133	WITHOUT_CLASSIFICATION	1.2021693886684738E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997875960657078	WITHOUT_CLASSIFICATION	2.124039342923309E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997875960657078	WITHOUT_CLASSIFICATION	2.124039342923309E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999151349721982	WITHOUT_CLASSIFICATION	8.486502780176719E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9991995000015874	WITHOUT_CLASSIFICATION	8.004999984125668E-4	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999760726619545	WITHOUT_CLASSIFICATION	2.3927338045405182E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998016056037323	WITHOUT_CLASSIFICATION	1.983943962677685E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998927519525168	WITHOUT_CLASSIFICATION	1.0724804748307722E-4	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999281795138	WITHOUT_CLASSIFICATION	7.182048626321962E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999371366863335	WITHOUT_CLASSIFICATION	6.286331366645514E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997534288344592	WITHOUT_CLASSIFICATION	2.4657116554080926E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9998401105671846	WITHOUT_CLASSIFICATION	1.5988943281539428E-4	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999875282809514	WITHOUT_CLASSIFICATION	1.2471719048625947E-5	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998604454193336	WITHOUT_CLASSIFICATION	1.3955458066642476E-4	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996321609739794	WITHOUT_CLASSIFICATION	3.67839026020559E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996643160527183	WITHOUT_CLASSIFICATION	3.356839472817049E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999213754350026	WITHOUT_CLASSIFICATION	7.862456499745194E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9992031625306046	WITHOUT_CLASSIFICATION	7.968374693954371E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999743920132377	WITHOUT_CLASSIFICATION	2.5607986762304476E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714747461887	WITHOUT_CLASSIFICATION	2.8525253811284963E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999899625237909	WITHOUT_CLASSIFICATION	1.0037476209075732E-5	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999777147545085	WITHOUT_CLASSIFICATION	2.228524549157277E-5	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999927757675104	WITHOUT_CLASSIFICATION	7.224232489470155E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999842435765904	WITHOUT_CLASSIFICATION	1.5756423409525305E-5	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998452292547257	WITHOUT_CLASSIFICATION	1.5477074527436922E-4	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999919516463431	WITHOUT_CLASSIFICATION	8.048353656863899E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999983952275585	WITHOUT_CLASSIFICATION	1.6047724415048375E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996808073601154	WITHOUT_CLASSIFICATION	3.191926398845258E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999858259020457	WITHOUT_CLASSIFICATION	1.4174097954389503E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999046234103108	WITHOUT_CLASSIFICATION	9.537658968906632E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998957342003794	WITHOUT_CLASSIFICATION	1.0426579962054158E-4	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999959808154114	WITHOUT_CLASSIFICATION	4.019184588546597E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682078106493	WITHOUT_CLASSIFICATION	3.1792189350705224E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999253786437521	WITHOUT_CLASSIFICATION	7.462135624797208E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999253786437521	WITHOUT_CLASSIFICATION	7.462135624797208E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999516215464449	WITHOUT_CLASSIFICATION	4.837845355510426E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999927097734855	WITHOUT_CLASSIFICATION	7.290226514560692E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999918664440202	WITHOUT_CLASSIFICATION	8.133555979898488E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999918664440202	WITHOUT_CLASSIFICATION	8.133555979898488E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999104418462357	WITHOUT_CLASSIFICATION	8.955815376429973E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999007052160153	WITHOUT_CLASSIFICATION	9.929478398470226E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999518572470398	WITHOUT_CLASSIFICATION	4.814275296021245E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999786383300315	WITHOUT_CLASSIFICATION	2.1361669968530497E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999256148183042	WITHOUT_CLASSIFICATION	7.438518169587497E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9986446705798926	WITHOUT_CLASSIFICATION	0.0013553294201073963	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999706142544326	WITHOUT_CLASSIFICATION	2.938574556748369E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999695498019269	WITHOUT_CLASSIFICATION	3.0450198073087762E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999695498019269	WITHOUT_CLASSIFICATION	3.0450198073087762E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999792072856816	WITHOUT_CLASSIFICATION	2.0792714318365116E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999466434347429	WITHOUT_CLASSIFICATION	5.335656525702862E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999466434347429	WITHOUT_CLASSIFICATION	5.335656525702862E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999973727415604	WITHOUT_CLASSIFICATION	2.6272584395986794E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999693709228952	WITHOUT_CLASSIFICATION	3.062907710481919E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999945139678099	WITHOUT_CLASSIFICATION	5.486032190063272E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999765720364489	WITHOUT_CLASSIFICATION	2.3427963551188878E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997407671733097	WITHOUT_CLASSIFICATION	2.592328266902752E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999488374734906	WITHOUT_CLASSIFICATION	5.1162526509334275E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994834647404712	WITHOUT_CLASSIFICATION	5.165352595288627E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999216067706471	WITHOUT_CLASSIFICATION	7.839322935294234E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996170496470028	WITHOUT_CLASSIFICATION	3.8295035299722933E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999951830428772	WITHOUT_CLASSIFICATION	4.816957122827615E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999979743591869	WITHOUT_CLASSIFICATION	2.025640813092891E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999217409698574	WITHOUT_CLASSIFICATION	7.825903014255105E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999217409698574	WITHOUT_CLASSIFICATION	7.825903014255105E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999217409698574	WITHOUT_CLASSIFICATION	7.825903014255105E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999217409698574	WITHOUT_CLASSIFICATION	7.825903014255105E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999728934147842	WITHOUT_CLASSIFICATION	2.71065852157475E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998808048851142	WITHOUT_CLASSIFICATION	1.1919511488575224E-4	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999233742731848	WITHOUT_CLASSIFICATION	7.662572681528967E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9996427728668296	WITHOUT_CLASSIFICATION	3.5722713317051124E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.998980462678609	WITHOUT_CLASSIFICATION	0.0010195373213910967	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9974814223365587	WITHOUT_CLASSIFICATION	0.0025185776634411962	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995556773646189	WITHOUT_CLASSIFICATION	4.4432263538109385E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999989971296934	WITHOUT_CLASSIFICATION	1.002870306612191E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999774924736178	WITHOUT_CLASSIFICATION	2.2507526382292514E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999703395595592	WITHOUT_CLASSIFICATION	2.9660440440833718E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997147090855926	WITHOUT_CLASSIFICATION	2.8529091440742733E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9728703115870843	WITHOUT_CLASSIFICATION	0.027129688412915742	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9993900705403519	WITHOUT_CLASSIFICATION	6.099294596480721E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999935039863217	WITHOUT_CLASSIFICATION	6.496013678298091E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997147090855926	WITHOUT_CLASSIFICATION	2.8529091440742733E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9743849473471847	WITHOUT_CLASSIFICATION	0.025615052652815253	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999960818202576	WITHOUT_CLASSIFICATION	3.9181797424103295E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999167756166609	WITHOUT_CLASSIFICATION	8.322438333906268E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995430175625737	WITHOUT_CLASSIFICATION	4.569824374262497E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995242503480286	WITHOUT_CLASSIFICATION	4.7574965197143883E-4	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999144084637466	WITHOUT_CLASSIFICATION	8.559153625340232E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999973015182326	WITHOUT_CLASSIFICATION	2.698481767297596E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999225315487046	WITHOUT_CLASSIFICATION	7.74684512954004E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880244670687	WITHOUT_CLASSIFICATION	1.1975532931334145E-5	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999892485860237	WITHOUT_CLASSIFICATION	1.075141397639993E-5	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880244670687	WITHOUT_CLASSIFICATION	1.1975532931334145E-5	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999837323601946	WITHOUT_CLASSIFICATION	1.626763980553752E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998430456800734	WITHOUT_CLASSIFICATION	1.5695431992644257E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993645705069532	WITHOUT_CLASSIFICATION	6.35429493046843E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999953214749285	WITHOUT_CLASSIFICATION	4.678525071435787E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999942011515921	WITHOUT_CLASSIFICATION	5.798848407917117E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999398345753059	WITHOUT_CLASSIFICATION	6.016542469406652E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999840028107383	WITHOUT_CLASSIFICATION	1.5997189261795014E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997861145412764	WITHOUT_CLASSIFICATION	2.1388545872353317E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999840028107383	WITHOUT_CLASSIFICATION	1.5997189261795014E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999811910483792	WITHOUT_CLASSIFICATION	1.8808951620750323E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999540145368507	WITHOUT_CLASSIFICATION	4.598546314933048E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999590020306521	WITHOUT_CLASSIFICATION	4.099796934792449E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9992162825765263	WITHOUT_CLASSIFICATION	7.837174234737463E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999398345753059	WITHOUT_CLASSIFICATION	6.016542469406652E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997861145412764	WITHOUT_CLASSIFICATION	2.1388545872353317E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999811910483792	WITHOUT_CLASSIFICATION	1.8808951620750323E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999600796458544	WITHOUT_CLASSIFICATION	3.9920354145581625E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999236602742417	WITHOUT_CLASSIFICATION	7.63397257583016E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999604627046003	WITHOUT_CLASSIFICATION	3.953729539975549E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999635250643375	WITHOUT_CLASSIFICATION	3.647493566257142E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999812508016859	WITHOUT_CLASSIFICATION	1.8749198314120794E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999894532573368	WITHOUT_CLASSIFICATION	1.0546742663163841E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714747461887	WITHOUT_CLASSIFICATION	2.8525253811284963E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999540145368507	WITHOUT_CLASSIFICATION	4.598546314933048E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999928767301777	WITHOUT_CLASSIFICATION	7.123269822308968E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997847411407375	WITHOUT_CLASSIFICATION	2.1525885926263545E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999686887302679	WITHOUT_CLASSIFICATION	3.13112697320039E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714747461887	WITHOUT_CLASSIFICATION	2.8525253811284963E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998814298486766	WITHOUT_CLASSIFICATION	1.1857015132339073E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714747461887	WITHOUT_CLASSIFICATION	2.8525253811284963E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999719556122403	WITHOUT_CLASSIFICATION	2.8044387759763458E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999863118703586	WITHOUT_CLASSIFICATION	1.3688129641495566E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996872498019449	WITHOUT_CLASSIFICATION	3.127501980550857E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999958182475982	WITHOUT_CLASSIFICATION	4.181752401805564E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999960049922372	WITHOUT_CLASSIFICATION	3.995007762795049E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999922286430195	WITHOUT_CLASSIFICATION	7.771356980413199E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999877207036331	WITHOUT_CLASSIFICATION	1.2279296367056046E-5	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998035060460626	WITHOUT_CLASSIFICATION	1.9649395393745694E-4	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996486980114533	WITHOUT_CLASSIFICATION	3.5130198854665837E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9992640206640561	WITHOUT_CLASSIFICATION	7.359793359438897E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999965127399617	WITHOUT_CLASSIFICATION	3.487260038311518E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999263555034859	WITHOUT_CLASSIFICATION	7.364449651408872E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9956961006880821	WITHOUT_CLASSIFICATION	0.004303899311917906	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999798225919599	WITHOUT_CLASSIFICATION	2.0177408040087155E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999991858654221	WITHOUT_CLASSIFICATION	8.141345777795185E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999907037878417	WITHOUT_CLASSIFICATION	9.296212158254549E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9992961101662076	WITHOUT_CLASSIFICATION	7.038898337924934E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999964770069846	WITHOUT_CLASSIFICATION	3.5229930154591323E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999887565595379	WITHOUT_CLASSIFICATION	1.1243440462097135E-5	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994364910731148	WITHOUT_CLASSIFICATION	5.635089268852588E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994364910731148	WITHOUT_CLASSIFICATION	5.635089268852588E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999823459884691	WITHOUT_CLASSIFICATION	1.7654011530864063E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999982437485792	WITHOUT_CLASSIFICATION	1.7562514208084704E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9997440851539817	WITHOUT_CLASSIFICATION	2.559148460183355E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999843051853285	WITHOUT_CLASSIFICATION	1.5694814671467343E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999998771718995	WITHOUT_CLASSIFICATION	1.2282810050136522E-6	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999909236810588	WITHOUT_CLASSIFICATION	9.076318941314517E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997011565735242	WITHOUT_CLASSIFICATION	2.988434264757483E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992208262426733	WITHOUT_CLASSIFICATION	7.79173757326702E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9882196469705437	WITHOUT_CLASSIFICATION	0.011780353029456347	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999908647980958	WITHOUT_CLASSIFICATION	9.13520190416178E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996065131393478	WITHOUT_CLASSIFICATION	3.934868606522447E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.999719732365953	WITHOUT_CLASSIFICATION	2.8026763404699894E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9984602266298981	WITHOUT_CLASSIFICATION	0.0015397733701018215	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999837033786736	WITHOUT_CLASSIFICATION	1.6296621326450882E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999963943846947	WITHOUT_CLASSIFICATION	3.6056153054266308E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996994515352021	WITHOUT_CLASSIFICATION	3.005484647978918E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999462660893734	WITHOUT_CLASSIFICATION	5.3733910626574826E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999462660893734	WITHOUT_CLASSIFICATION	5.3733910626574826E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999972682747212	WITHOUT_CLASSIFICATION	2.7317252787364943E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998035060460626	WITHOUT_CLASSIFICATION	1.9649395393745694E-4	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9997577903359879	WITHOUT_CLASSIFICATION	2.422096640121354E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996713283210753	WITHOUT_CLASSIFICATION	3.2867167892469126E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999911193994488	WITHOUT_CLASSIFICATION	8.880600551148446E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999813927309531	WITHOUT_CLASSIFICATION	1.8607269046805383E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998824065417163	WITHOUT_CLASSIFICATION	1.1759345828367883E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9997478926913054	WITHOUT_CLASSIFICATION	2.521073086946944E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999597618746328	WITHOUT_CLASSIFICATION	4.023812536718576E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999908501488716	WITHOUT_CLASSIFICATION	9.149851128396071E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999960263624827	WITHOUT_CLASSIFICATION	3.973637517267051E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999997031704026	WITHOUT_CLASSIFICATION	2.9682959739054445E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998744406749421	WITHOUT_CLASSIFICATION	1.2555932505791604E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999645499601505	WITHOUT_CLASSIFICATION	3.545003984953953E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999996096764212	WITHOUT_CLASSIFICATION	3.9032357879762974E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9996962001530854	WITHOUT_CLASSIFICATION	3.0379984691455264E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999926581586417	WITHOUT_CLASSIFICATION	7.3418413582404515E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999947668693205	WITHOUT_CLASSIFICATION	5.23313067946617E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999957586911074	WITHOUT_CLASSIFICATION	4.241308892618111E-6	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999971234074261	WITHOUT_CLASSIFICATION	2.8765925739146526E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999574554506349	WITHOUT_CLASSIFICATION	4.254454936524444E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998059494726761	WITHOUT_CLASSIFICATION	1.940505273238701E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999869070318866	WITHOUT_CLASSIFICATION	1.3092968113314403E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999803508890942	WITHOUT_CLASSIFICATION	1.9649110905785973E-5	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999834708609141	WITHOUT_CLASSIFICATION	1.6529139085917453E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999868322328254	WITHOUT_CLASSIFICATION	1.3167767174751592E-5	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9992155168553474	WITHOUT_CLASSIFICATION	7.844831446526905E-4	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999026755690427	WITHOUT_CLASSIFICATION	9.732443095739014E-5	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999320410562794	WITHOUT_CLASSIFICATION	6.795894372052789E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997400177081193	WITHOUT_CLASSIFICATION	2.5998229188078844E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999685955238203	WITHOUT_CLASSIFICATION	3.1404476179611095E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999968771063997	WITHOUT_CLASSIFICATION	3.122893600311736E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999711026916686	WITHOUT_CLASSIFICATION	2.8897308331415305E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999819119950412	WITHOUT_CLASSIFICATION	1.8088004958892225E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9973271969131987	WITHOUT_CLASSIFICATION	0.00267280308680136	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.998876255284061	WITHOUT_CLASSIFICATION	0.0011237447159389762	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999817040363258	WITHOUT_CLASSIFICATION	1.8295963674217248E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998290159218116	WITHOUT_CLASSIFICATION	1.7098407818832244E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998290159218116	WITHOUT_CLASSIFICATION	1.7098407818832244E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999640168308948	WITHOUT_CLASSIFICATION	3.5983169105265765E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999974984017823	WITHOUT_CLASSIFICATION	2.5015982176908008E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9991605094152715	WITHOUT_CLASSIFICATION	8.394905847286351E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9991605094152715	WITHOUT_CLASSIFICATION	8.394905847286351E-4	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999923947193938	WITHOUT_CLASSIFICATION	7.605280606127347E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999592525094119	WITHOUT_CLASSIFICATION	4.074749058814761E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999877136778995	WITHOUT_CLASSIFICATION	1.228632210039096E-5	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999947018377692	WITHOUT_CLASSIFICATION	5.298162230916603E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999695762610993	WITHOUT_CLASSIFICATION	3.042373890070629E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999989512529702	WITHOUT_CLASSIFICATION	1.0487470298017764E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999989512529702	WITHOUT_CLASSIFICATION	1.0487470298017764E-5	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999063592084327	WITHOUT_CLASSIFICATION	9.364079156731525E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996662261088441	WITHOUT_CLASSIFICATION	3.337738911558923E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999922293908462	WITHOUT_CLASSIFICATION	7.770609153825414E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999922293908462	WITHOUT_CLASSIFICATION	7.770609153825414E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999941853805331	WITHOUT_CLASSIFICATION	5.814619466878343E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999951764586902	WITHOUT_CLASSIFICATION	4.823541309905659E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999945980892311	WITHOUT_CLASSIFICATION	5.401910768946631E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.999972073799634	WITHOUT_CLASSIFICATION	2.792620036598929E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999869480983389	WITHOUT_CLASSIFICATION	1.3051901661110795E-5	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999992252508251	WITHOUT_CLASSIFICATION	7.747491749140167E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999961311457777	WITHOUT_CLASSIFICATION	3.868854222336369E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999887495708517	WITHOUT_CLASSIFICATION	1.1250429148283832E-5	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999900042764326	WITHOUT_CLASSIFICATION	9.995723567454181E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999761971840748	WITHOUT_CLASSIFICATION	2.380281592520218E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9997728795141085	WITHOUT_CLASSIFICATION	2.2712048589143566E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9988536213828014	WITHOUT_CLASSIFICATION	0.0011463786171985466	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9994250078223456	WITHOUT_CLASSIFICATION	5.749921776544388E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999968769042903	WITHOUT_CLASSIFICATION	3.123095709742412E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999923293608272	WITHOUT_CLASSIFICATION	7.670639172789586E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9995987759662812	WITHOUT_CLASSIFICATION	4.0122403371879023E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999911241303747	WITHOUT_CLASSIFICATION	8.875869625230642E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999473896766973	WITHOUT_CLASSIFICATION	5.261032330263638E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999821240198056	WITHOUT_CLASSIFICATION	1.7875980194350786E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999947952472927	WITHOUT_CLASSIFICATION	5.204752707298451E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999745625600381	WITHOUT_CLASSIFICATION	2.5437439961852103E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999297084573875	WITHOUT_CLASSIFICATION	7.029154261251066E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.997731887154845	WITHOUT_CLASSIFICATION	0.0022681128451550268	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9993066844916073	WITHOUT_CLASSIFICATION	6.933155083926665E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9997434394014969	WITHOUT_CLASSIFICATION	2.565605985031287E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999914695700219	WITHOUT_CLASSIFICATION	8.530429978053115E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999827279983969	WITHOUT_CLASSIFICATION	1.727200160307687E-5	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999965177708116	WITHOUT_CLASSIFICATION	3.4822291884094836E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999775908794855	WITHOUT_CLASSIFICATION	2.240912051457511E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999046019983333	WITHOUT_CLASSIFICATION	9.539800166665218E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999693501142531	WITHOUT_CLASSIFICATION	3.0649885746887786E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999814638707337	WITHOUT_CLASSIFICATION	1.8536129266279203E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999894992344037	WITHOUT_CLASSIFICATION	1.0500765596269001E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996643147559156	WITHOUT_CLASSIFICATION	3.3568524408440385E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999695809142103	WITHOUT_CLASSIFICATION	3.0419085789639886E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999898350189151	WITHOUT_CLASSIFICATION	1.0164981084905845E-5	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999938904306416	WITHOUT_CLASSIFICATION	6.109569358399029E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999995956440088	WITHOUT_CLASSIFICATION	4.043559912028072E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999992959122081	WITHOUT_CLASSIFICATION	7.0408779190603814E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999927012402713	WITHOUT_CLASSIFICATION	7.298759728693459E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.999992345116265	WITHOUT_CLASSIFICATION	7.654883735065641E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999923848366759	WITHOUT_CLASSIFICATION	7.6151633241598045E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999990707130764	WITHOUT_CLASSIFICATION	9.292869235972237E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999753764527424	WITHOUT_CLASSIFICATION	2.4623547257687017E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999227820087816	WITHOUT_CLASSIFICATION	7.721799121837541E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999949937099888	WITHOUT_CLASSIFICATION	5.006290011243427E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999591313788058	WITHOUT_CLASSIFICATION	4.086862119425072E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999988638806146	WITHOUT_CLASSIFICATION	1.136119385409275E-5	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9889069866186695	WITHOUT_CLASSIFICATION	0.01109301338133061	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999985230950903	WITHOUT_CLASSIFICATION	1.4769049096233736E-6	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999970713457146	WITHOUT_CLASSIFICATION	2.9286542852984987E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999778315861336	WITHOUT_CLASSIFICATION	2.216841386638305E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999962506527135	WITHOUT_CLASSIFICATION	3.749347286444828E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999977994660493	WITHOUT_CLASSIFICATION	2.2005339507023786E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999899055631112	WITHOUT_CLASSIFICATION	1.009443688875065E-5	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999799923580026	WITHOUT_CLASSIFICATION	2.0007641997406907E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999985805783901	WITHOUT_CLASSIFICATION	1.4194216098671496E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999985805783901	WITHOUT_CLASSIFICATION	1.4194216098671496E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999433779913323	WITHOUT_CLASSIFICATION	5.662200866769013E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999844946887562	WITHOUT_CLASSIFICATION	1.5505311243834828E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999844423082647	WITHOUT_CLASSIFICATION	1.5557691735322492E-5	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999857268269602	WITHOUT_CLASSIFICATION	1.4273173039727011E-5	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999503084038921	WITHOUT_CLASSIFICATION	4.969159610785171E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996992707673931	WITHOUT_CLASSIFICATION	3.0072923260695135E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999872601363059	WITHOUT_CLASSIFICATION	1.2739863694110005E-5	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997056986197	WITHOUT_CLASSIFICATION	2.943013802620836E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999757127678979	WITHOUT_CLASSIFICATION	2.42872321021714E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999891530574129	WITHOUT_CLASSIFICATION	1.0846942587171348E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999794086420121	WITHOUT_CLASSIFICATION	2.0591357987896644E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9991323906244413	WITHOUT_CLASSIFICATION	8.676093755587061E-4	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999950703743856	WITHOUT_CLASSIFICATION	4.92962561437815E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998055641364583	WITHOUT_CLASSIFICATION	1.944358635416365E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996150573854524	WITHOUT_CLASSIFICATION	3.849426145475701E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996150573854524	WITHOUT_CLASSIFICATION	3.849426145475701E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999975904545745	WITHOUT_CLASSIFICATION	2.4095454255051342E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999668119149595	WITHOUT_CLASSIFICATION	3.318808504048119E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998526811293825	WITHOUT_CLASSIFICATION	1.4731887061741246E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999999047265988	WITHOUT_CLASSIFICATION	9.527340119833319E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999745536421082	WITHOUT_CLASSIFICATION	2.544635789189831E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999768597166477	WITHOUT_CLASSIFICATION	2.3140283352230438E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997388556135763	WITHOUT_CLASSIFICATION	2.611443864236761E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999582551919414	WITHOUT_CLASSIFICATION	4.174480805865908E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999986173129192	WITHOUT_CLASSIFICATION	1.3826870807923286E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9993899129998752	WITHOUT_CLASSIFICATION	6.100870001248158E-4	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999951390042059	WITHOUT_CLASSIFICATION	4.860995794056067E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997533084246057	WITHOUT_CLASSIFICATION	2.4669157539420055E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999969693242927	WITHOUT_CLASSIFICATION	3.0306757073134368E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999858090486055	WITHOUT_CLASSIFICATION	1.4190951394638362E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998414625915837	WITHOUT_CLASSIFICATION	1.5853740841637742E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999769639476049	WITHOUT_CLASSIFICATION	2.3036052395089655E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999325126690547	WITHOUT_CLASSIFICATION	6.748733094527022E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999229431376099	WITHOUT_CLASSIFICATION	7.705686239019672E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999449955423504	WITHOUT_CLASSIFICATION	5.500445764966298E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999957087717054	WITHOUT_CLASSIFICATION	4.2912282945867635E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999716380771255	WITHOUT_CLASSIFICATION	2.836192287440568E-5	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995150296578	WITHOUT_CLASSIFICATION	4.849703421536642E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999878441174033	WITHOUT_CLASSIFICATION	1.2155882596795443E-5	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999213751311846	WITHOUT_CLASSIFICATION	7.862486881527745E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997711862210479	WITHOUT_CLASSIFICATION	2.2881377895221278E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999977411559025	WITHOUT_CLASSIFICATION	2.2588440975048857E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999946676184999	WITHOUT_CLASSIFICATION	5.332381500116554E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999914382325854	WITHOUT_CLASSIFICATION	8.561767414653866E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999543350804986	WITHOUT_CLASSIFICATION	4.5664919501469847E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999749021551008	WITHOUT_CLASSIFICATION	2.509784489925537E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9995322726107065	WITHOUT_CLASSIFICATION	4.677273892934527E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999986343175515	WITHOUT_CLASSIFICATION	1.365682448495841E-5	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999867027147147	WITHOUT_CLASSIFICATION	1.329728528529214E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999866018275276	WITHOUT_CLASSIFICATION	1.3398172472315153E-5	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999773997036907	WITHOUT_CLASSIFICATION	2.2600296309367976E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999917192058717	WITHOUT_CLASSIFICATION	8.280794128347747E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999688346519181	WITHOUT_CLASSIFICATION	3.116534808184174E-5	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999706996571969	WITHOUT_CLASSIFICATION	2.930034280308479E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999559609735008	WITHOUT_CLASSIFICATION	4.40390264991501E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999921776056826	WITHOUT_CLASSIFICATION	7.822394317425104E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999327720337602	WITHOUT_CLASSIFICATION	6.722796623979023E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999327720337602	WITHOUT_CLASSIFICATION	6.722796623979023E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999771773464433	WITHOUT_CLASSIFICATION	2.2822653556615198E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999895377912488	WITHOUT_CLASSIFICATION	1.0462208751117702E-5	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9992815021883571	WITHOUT_CLASSIFICATION	7.184978116429159E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999639421622969	WITHOUT_CLASSIFICATION	3.605783770307667E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999699767212641	WITHOUT_CLASSIFICATION	3.002327873586689E-5	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999984575925233	WITHOUT_CLASSIFICATION	1.5424074766924067E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999532922914379	WITHOUT_CLASSIFICATION	4.670770856202684E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9992632821404276	WITHOUT_CLASSIFICATION	7.367178595723407E-4	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999975561167906	WITHOUT_CLASSIFICATION	2.4438832093801E-6	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691892749265	WITHOUT_CLASSIFICATION	3.08107250735932E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9969300909202022	WITHOUT_CLASSIFICATION	0.0030699090797978003	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9959054202480967	WITHOUT_CLASSIFICATION	0.004094579751903353	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999974438024437	WITHOUT_CLASSIFICATION	2.556197556343962E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999457892478094	WITHOUT_CLASSIFICATION	5.421075219052923E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9987402049473814	WITHOUT_CLASSIFICATION	0.0012597950526186264	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999995940554901	WITHOUT_CLASSIFICATION	4.059445099016453E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999982009897214	WITHOUT_CLASSIFICATION	1.799010278582423E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999211144521857	WITHOUT_CLASSIFICATION	7.888554781431876E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999706691535163	WITHOUT_CLASSIFICATION	2.9330846483777125E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997339105068	WITHOUT_CLASSIFICATION	2.660894932380647E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9996445787079096	WITHOUT_CLASSIFICATION	3.5542129209045775E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999611495392244	WITHOUT_CLASSIFICATION	3.885046077544881E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997608094210988	WITHOUT_CLASSIFICATION	2.3919057890106748E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999684398945352	WITHOUT_CLASSIFICATION	3.156010546482106E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999953499116001	WITHOUT_CLASSIFICATION	4.650088399814374E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999894271439292	WITHOUT_CLASSIFICATION	1.0572856070756804E-5	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989876999240869	WITHOUT_CLASSIFICATION	0.001012300075913155	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997018269742973	WITHOUT_CLASSIFICATION	2.981730257026076E-4	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999992357884799	WITHOUT_CLASSIFICATION	7.642115201016326E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999997107882513	WITHOUT_CLASSIFICATION	2.8921174871027555E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999953503936393	WITHOUT_CLASSIFICATION	4.649606360735888E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999962012011716	WITHOUT_CLASSIFICATION	3.7987988284110934E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999958115026292	WITHOUT_CLASSIFICATION	4.188497370832098E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998968883779014	WITHOUT_CLASSIFICATION	1.0311162209868112E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999944521664519	WITHOUT_CLASSIFICATION	5.547833548121496E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999850947928406	WITHOUT_CLASSIFICATION	1.490520715940809E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999116184488398	WITHOUT_CLASSIFICATION	8.838155116020865E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999892837524289	WITHOUT_CLASSIFICATION	1.0716247571146894E-5	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999651667521865	WITHOUT_CLASSIFICATION	3.4833247813577415E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999916251670649	WITHOUT_CLASSIFICATION	8.374832935127446E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993272688038	WITHOUT_CLASSIFICATION	6.727311962934088E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999943241009815	WITHOUT_CLASSIFICATION	5.6758990183938404E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999875129399509	WITHOUT_CLASSIFICATION	1.2487060049117132E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9980073438089493	WITHOUT_CLASSIFICATION	0.001992656191050729	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999342905331231	WITHOUT_CLASSIFICATION	6.570946687697221E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999990412033073	WITHOUT_CLASSIFICATION	9.587966927781043E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999950703743856	WITHOUT_CLASSIFICATION	4.92962561437815E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999946853793844	WITHOUT_CLASSIFICATION	5.3146206155622035E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999470591906	WITHOUT_CLASSIFICATION	5.294080939820353E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998996668995005	WITHOUT_CLASSIFICATION	1.0033310049954565E-4	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999926945221481	WITHOUT_CLASSIFICATION	7.3054778518128585E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999969180853375	WITHOUT_CLASSIFICATION	3.0819146625476014E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999526937529574	WITHOUT_CLASSIFICATION	4.730624704277027E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999706190299446	WITHOUT_CLASSIFICATION	2.9380970055402475E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9979929031060684	WITHOUT_CLASSIFICATION	0.002007096893931636	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999620537602895	WITHOUT_CLASSIFICATION	3.7946239710488525E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999888747796878	WITHOUT_CLASSIFICATION	1.112522031216333E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9991830925168803	WITHOUT_CLASSIFICATION	8.169074831196191E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998570622467646	WITHOUT_CLASSIFICATION	1.4293775323537443E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999722527905699	WITHOUT_CLASSIFICATION	2.774720943012428E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998016676519998	WITHOUT_CLASSIFICATION	1.983323480002025E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999064546375076	WITHOUT_CLASSIFICATION	9.354536249234961E-5	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996930650386948	WITHOUT_CLASSIFICATION	3.0693496130524626E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996963841451	WITHOUT_CLASSIFICATION	3.036158549458902E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999906789773153	WITHOUT_CLASSIFICATION	9.321022684653698E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999064546375076	WITHOUT_CLASSIFICATION	9.354536249234961E-5	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9990037126206552	WITHOUT_CLASSIFICATION	9.962873793447028E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999998254561856	WITHOUT_CLASSIFICATION	1.7454381440376173E-6	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999987974837805	WITHOUT_CLASSIFICATION	1.2025162194747967E-6	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999705233187747	WITHOUT_CLASSIFICATION	2.9476681225318936E-5	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997366944631352	WITHOUT_CLASSIFICATION	2.6330553686487474E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99990532788976	WITHOUT_CLASSIFICATION	9.467211023995813E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999956605557525	WITHOUT_CLASSIFICATION	4.339444247493664E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9958945376822206	WITHOUT_CLASSIFICATION	0.00410546231777938	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997823938019723	WITHOUT_CLASSIFICATION	2.176061980276814E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999722388176175	WITHOUT_CLASSIFICATION	2.7761182382533627E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9993032715802612	WITHOUT_CLASSIFICATION	6.967284197386636E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9881499243952427	WITHOUT_CLASSIFICATION	0.011850075604757255	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999950957278768	WITHOUT_CLASSIFICATION	4.904272123103306E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999631959962174	WITHOUT_CLASSIFICATION	3.680400378254044E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999944454200174	WITHOUT_CLASSIFICATION	5.554579982605724E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999869070318866	WITHOUT_CLASSIFICATION	1.3092968113314403E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999886904918268	WITHOUT_CLASSIFICATION	1.1309508173145436E-5	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999971932724784	WITHOUT_CLASSIFICATION	2.806727521730249E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.998038714568379	WITHOUT_CLASSIFICATION	0.001961285431620968	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999860400090097	WITHOUT_CLASSIFICATION	1.3959990990226233E-5	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999954531820513	WITHOUT_CLASSIFICATION	4.546817948676171E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999990755422253	WITHOUT_CLASSIFICATION	9.244577747071316E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999766402824509	WITHOUT_CLASSIFICATION	2.33597175489992E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999997273466726	WITHOUT_CLASSIFICATION	2.72653327393845E-7	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999998254688812	WITHOUT_CLASSIFICATION	1.7453111880225702E-6	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999716859792256	WITHOUT_CLASSIFICATION	2.8314020774481243E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998781586412728	WITHOUT_CLASSIFICATION	1.2184135872709243E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998028841630094	WITHOUT_CLASSIFICATION	1.9711583699062767E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999931006591997	WITHOUT_CLASSIFICATION	6.899340800371468E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999884275334797	WITHOUT_CLASSIFICATION	1.1572466520323392E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999943192248767	WITHOUT_CLASSIFICATION	5.68077512325402E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998742296784632	WITHOUT_CLASSIFICATION	1.2577032153674117E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999902949216993	WITHOUT_CLASSIFICATION	9.705078300752122E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999983714649852	WITHOUT_CLASSIFICATION	1.6285350149648945E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999218938844525	WITHOUT_CLASSIFICATION	7.810611554751393E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999987372863682	WITHOUT_CLASSIFICATION	1.2627136316832886E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999834093443001	WITHOUT_CLASSIFICATION	1.6590655699878652E-5	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999909511071403	WITHOUT_CLASSIFICATION	9.048892859783489E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999973668844212	WITHOUT_CLASSIFICATION	2.6331155788561506E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999398496703382	WITHOUT_CLASSIFICATION	6.015032966185395E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998674568398325	WITHOUT_CLASSIFICATION	1.3254316016751377E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998674568398325	WITHOUT_CLASSIFICATION	1.3254316016751377E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981435841481349	WITHOUT_CLASSIFICATION	0.0018564158518651083	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999882601733787	WITHOUT_CLASSIFICATION	1.1739826621304176E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999733416878007	WITHOUT_CLASSIFICATION	2.6658312199277713E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9992418860200867	WITHOUT_CLASSIFICATION	7.581139799132782E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999786383300315	WITHOUT_CLASSIFICATION	2.1361669968530497E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999786383300315	WITHOUT_CLASSIFICATION	2.1361669968530497E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999935250892588	WITHOUT_CLASSIFICATION	6.4749107411890615E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998702420437324	WITHOUT_CLASSIFICATION	1.2975795626762567E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999746312012517	WITHOUT_CLASSIFICATION	2.536879874835959E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998980576366324	WITHOUT_CLASSIFICATION	1.019423633675895E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999699323309083	WITHOUT_CLASSIFICATION	3.0067669091749818E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999887194932395	WITHOUT_CLASSIFICATION	1.1280506760520053E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999973618157949	WITHOUT_CLASSIFICATION	2.6381842050035264E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998302418425501	WITHOUT_CLASSIFICATION	1.6975815744991053E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998757663204332	WITHOUT_CLASSIFICATION	1.242336795667837E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999065158785775	WITHOUT_CLASSIFICATION	9.34841214224874E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999065158785775	WITHOUT_CLASSIFICATION	9.34841214224874E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998409217978022	WITHOUT_CLASSIFICATION	1.5907820219782537E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999922267930674	WITHOUT_CLASSIFICATION	7.773206932642566E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9996902745718735	WITHOUT_CLASSIFICATION	3.0972542812645194E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9988586746915652	WITHOUT_CLASSIFICATION	0.0011413253084348069	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858833641652	WITHOUT_CLASSIFICATION	1.4116635834815263E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683796649813	WITHOUT_CLASSIFICATION	3.16203350187273E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999691232580752	WITHOUT_CLASSIFICATION	3.0876741924728136E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999358637619965	WITHOUT_CLASSIFICATION	6.41362380034909E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999743624917254	WITHOUT_CLASSIFICATION	2.563750827455928E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998833953396683	WITHOUT_CLASSIFICATION	1.1660466033163771E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999722388176175	WITHOUT_CLASSIFICATION	2.7761182382533627E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999514289560743	WITHOUT_CLASSIFICATION	4.8571043925702275E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9989953400120312	WITHOUT_CLASSIFICATION	0.0010046599879688781	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999714129283779	WITHOUT_CLASSIFICATION	2.8587071622182793E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998421950293904	WITHOUT_CLASSIFICATION	1.5780497060950753E-4	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996748657252665	WITHOUT_CLASSIFICATION	3.251342747334502E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996802343702792	WITHOUT_CLASSIFICATION	3.1976562972085295E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993138636830704	WITHOUT_CLASSIFICATION	6.861363169296355E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999978569820606	WITHOUT_CLASSIFICATION	2.1430179394066777E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999579395333579	WITHOUT_CLASSIFICATION	4.2060466642098544E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999936783890711	WITHOUT_CLASSIFICATION	6.321610928907326E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999936783890711	WITHOUT_CLASSIFICATION	6.321610928907326E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997147090855926	WITHOUT_CLASSIFICATION	2.8529091440742733E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999998915623293	WITHOUT_CLASSIFICATION	1.0843767074328463E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999215894551988	WITHOUT_CLASSIFICATION	7.841054480117797E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994899602433549	WITHOUT_CLASSIFICATION	5.10039756645102E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999988419028569	WITHOUT_CLASSIFICATION	1.1580971430938414E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999879431993368	WITHOUT_CLASSIFICATION	1.2056800663212914E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999953214749285	WITHOUT_CLASSIFICATION	4.678525071435787E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999989521180888	WITHOUT_CLASSIFICATION	1.0478819112408586E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999600796458544	WITHOUT_CLASSIFICATION	3.9920354145581625E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999840186774663	WITHOUT_CLASSIFICATION	1.5981322533723703E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714747461887	WITHOUT_CLASSIFICATION	2.8525253811284963E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999790793914238	WITHOUT_CLASSIFICATION	2.0920608576184594E-5	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999939979676108	WITHOUT_CLASSIFICATION	6.0020323892595656E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999808185135779	WITHOUT_CLASSIFICATION	1.9181486422150393E-5	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999567998366058	WITHOUT_CLASSIFICATION	4.320016339429043E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999959975068176	WITHOUT_CLASSIFICATION	4.002493182348904E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999889749752268	WITHOUT_CLASSIFICATION	1.102502477328148E-5	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999629069683207	WITHOUT_CLASSIFICATION	3.709303167928916E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998729046531348	WITHOUT_CLASSIFICATION	1.2709534686516336E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999917017779608	WITHOUT_CLASSIFICATION	8.298222039146776E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999909679297008	WITHOUT_CLASSIFICATION	9.032070299175302E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999988335154139	WITHOUT_CLASSIFICATION	1.1664845861936133E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999945980892311	WITHOUT_CLASSIFICATION	5.401910768946631E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9994463901918623	WITHOUT_CLASSIFICATION	5.536098081376891E-4	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999784968740463	WITHOUT_CLASSIFICATION	2.1503125953698044E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999784968740463	WITHOUT_CLASSIFICATION	2.1503125953698044E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999615802255923	WITHOUT_CLASSIFICATION	3.841977440768614E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999259199730324	WITHOUT_CLASSIFICATION	7.408002696764082E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999701613970208	WITHOUT_CLASSIFICATION	2.983860297928361E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999996292845977	WITHOUT_CLASSIFICATION	3.7071540230649548E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999979281921145	WITHOUT_CLASSIFICATION	2.0718078854933732E-5	TEST
