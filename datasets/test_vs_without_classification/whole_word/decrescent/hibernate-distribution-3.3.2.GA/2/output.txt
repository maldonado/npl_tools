//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999855962279602	WITHOUT_CLASSIFICATION	1.4403772039794758E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999206870050118	WITHOUT_CLASSIFICATION	7.931299498818977E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999874755623911	WITHOUT_CLASSIFICATION	1.2524437608957833E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999670130398519	WITHOUT_CLASSIFICATION	3.298696014821888E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999670130398519	WITHOUT_CLASSIFICATION	3.298696014821888E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999920649635035	WITHOUT_CLASSIFICATION	7.935036496505058E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999949446067124	WITHOUT_CLASSIFICATION	5.055393287605259E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999887387771066	WITHOUT_CLASSIFICATION	1.1261222893452459E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999917886081646	WITHOUT_CLASSIFICATION	8.211391835398278E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999665509990242	WITHOUT_CLASSIFICATION	3.3449000975824345E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999665509990242	WITHOUT_CLASSIFICATION	3.3449000975824345E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999427229768852	WITHOUT_CLASSIFICATION	5.7277023114728136E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999988010289282	WITHOUT_CLASSIFICATION	1.198971071813281E-5	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999699605690255	WITHOUT_CLASSIFICATION	3.00394309744505E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996537051861619	WITHOUT_CLASSIFICATION	3.4629481383802125E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999934030240026	WITHOUT_CLASSIFICATION	6.596975997325835E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999578710286193	WITHOUT_CLASSIFICATION	4.212897138062651E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998148367228263	WITHOUT_CLASSIFICATION	1.8516327717370786E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999890969174474	WITHOUT_CLASSIFICATION	1.090308255260395E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999884981078647	WITHOUT_CLASSIFICATION	1.1501892135268894E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999884981078647	WITHOUT_CLASSIFICATION	1.1501892135268894E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999942318523735	WITHOUT_CLASSIFICATION	5.768147626499433E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9993233290360274	WITHOUT_CLASSIFICATION	6.766709639725287E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999498600093075	WITHOUT_CLASSIFICATION	5.013999069258275E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9990648577382951	WITHOUT_CLASSIFICATION	9.351422617049419E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9987886225248732	WITHOUT_CLASSIFICATION	0.0012113774751268415	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9987886225248732	WITHOUT_CLASSIFICATION	0.0012113774751268415	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999452574150931	WITHOUT_CLASSIFICATION	5.474258490684998E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996965771085504	WITHOUT_CLASSIFICATION	3.034228914495748E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999947547850282	WITHOUT_CLASSIFICATION	5.24521497181982E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997834014118455	WITHOUT_CLASSIFICATION	2.1659858815448885E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999704368313463	WITHOUT_CLASSIFICATION	2.9563168653613412E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494562107224	WITHOUT_CLASSIFICATION	5.0543789277634956E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999876593414739	WITHOUT_CLASSIFICATION	1.2340658526002599E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999922383164542	WITHOUT_CLASSIFICATION	7.76168354567643E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.999835223984886	WITHOUT_CLASSIFICATION	1.6477601511392343E-4	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.999835223984886	WITHOUT_CLASSIFICATION	1.6477601511392343E-4	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998763232795398	WITHOUT_CLASSIFICATION	1.2367672046019194E-4	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996729070106909	WITHOUT_CLASSIFICATION	3.270929893090524E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999654390449294	WITHOUT_CLASSIFICATION	3.456095507065483E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999778027931913	WITHOUT_CLASSIFICATION	2.2197206808713297E-5	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999993888661036	WITHOUT_CLASSIFICATION	6.111338963890796E-7	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999986098952611	WITHOUT_CLASSIFICATION	1.3901047388441993E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9996126193314723	WITHOUT_CLASSIFICATION	3.8738066852763293E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998181166634943	WITHOUT_CLASSIFICATION	1.8188333650565416E-4	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999961976626124	WITHOUT_CLASSIFICATION	3.80233738766257E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998702563176666	WITHOUT_CLASSIFICATION	1.2974368233342694E-4	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999849872446835	WITHOUT_CLASSIFICATION	1.5012755316544583E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.999988555858053	WITHOUT_CLASSIFICATION	1.1444141947051624E-5	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999378066652244	WITHOUT_CLASSIFICATION	6.219333477569305E-5	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999536247548089	WITHOUT_CLASSIFICATION	4.6375245191096595E-5	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999446122953668	WITHOUT_CLASSIFICATION	5.5387704633242085E-5	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999832087350391	WITHOUT_CLASSIFICATION	1.679126496085044E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999896819899655	WITHOUT_CLASSIFICATION	1.03180100345477E-5	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999841314959912	WITHOUT_CLASSIFICATION	1.5868504008849312E-5	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999741028926906	WITHOUT_CLASSIFICATION	2.5897107309357255E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999913859421108	WITHOUT_CLASSIFICATION	8.614057889197722E-6	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.99986420469436	WITHOUT_CLASSIFICATION	1.3579530563994288E-4	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999939787803186	WITHOUT_CLASSIFICATION	6.02121968146132E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999971776119839	WITHOUT_CLASSIFICATION	2.822388015985714E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999890452744937	WITHOUT_CLASSIFICATION	1.0954725506317993E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999777883002204	WITHOUT_CLASSIFICATION	2.2211699779535948E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999889680456071	WITHOUT_CLASSIFICATION	1.1031954392856486E-5	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999956380071521	WITHOUT_CLASSIFICATION	4.3619928478411765E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999968417305257	WITHOUT_CLASSIFICATION	3.1582694743880096E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999796139836611	WITHOUT_CLASSIFICATION	2.038601633895655E-5	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999971623937347	WITHOUT_CLASSIFICATION	2.8376062653038574E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999891637399897	WITHOUT_CLASSIFICATION	1.0836260010319521E-5	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999925101921308	WITHOUT_CLASSIFICATION	7.489807869305027E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999428384249321	WITHOUT_CLASSIFICATION	5.7161575067869975E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999357486647956	WITHOUT_CLASSIFICATION	6.425133520437224E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999742641319714	WITHOUT_CLASSIFICATION	2.5735868028602108E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999984133974579	WITHOUT_CLASSIFICATION	1.5866025421017725E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999357486647956	WITHOUT_CLASSIFICATION	6.425133520437224E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999994599551144	WITHOUT_CLASSIFICATION	5.400448856132617E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998946935909052	WITHOUT_CLASSIFICATION	1.0530640909474998E-4	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999683790699948	WITHOUT_CLASSIFICATION	3.162093000525379E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999900641340473	WITHOUT_CLASSIFICATION	9.935865952716366E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999418014775934	WITHOUT_CLASSIFICATION	5.8198522406760016E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999418014775934	WITHOUT_CLASSIFICATION	5.8198522406760016E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998352877714521	WITHOUT_CLASSIFICATION	1.647122285478827E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999600212504753	WITHOUT_CLASSIFICATION	3.9978749524604155E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999520217243997	WITHOUT_CLASSIFICATION	4.79782756003463E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999955543162009	WITHOUT_CLASSIFICATION	4.445683799127715E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999833501170186	WITHOUT_CLASSIFICATION	1.6649882981451057E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999828171331662	WITHOUT_CLASSIFICATION	1.718286683375551E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999938637562611	WITHOUT_CLASSIFICATION	6.136243738924872E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999871144889769	WITHOUT_CLASSIFICATION	1.2885511022999291E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999985263307231	WITHOUT_CLASSIFICATION	1.4736692768925697E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999562178219612	WITHOUT_CLASSIFICATION	4.378217803874984E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999562178219612	WITHOUT_CLASSIFICATION	4.378217803874984E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999938166840409	WITHOUT_CLASSIFICATION	6.183315959068479E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999961957303368	WITHOUT_CLASSIFICATION	3.8042696631099134E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999785047618758	WITHOUT_CLASSIFICATION	2.1495238124279362E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999562178219612	WITHOUT_CLASSIFICATION	4.378217803874984E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999938166840409	WITHOUT_CLASSIFICATION	6.183315959068479E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999938166840409	WITHOUT_CLASSIFICATION	6.183315959068479E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999786525145479	WITHOUT_CLASSIFICATION	2.13474854522097E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999732394929681	WITHOUT_CLASSIFICATION	2.676050703191348E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999862320296758	WITHOUT_CLASSIFICATION	1.376797032422473E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999594215859994	WITHOUT_CLASSIFICATION	4.057841400065781E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999487749189683	WITHOUT_CLASSIFICATION	5.12250810317383E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999487749189683	WITHOUT_CLASSIFICATION	5.12250810317383E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9996915002060688	WITHOUT_CLASSIFICATION	3.084997939312031E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992942269494766	WITHOUT_CLASSIFICATION	7.057730505234007E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.999987747096067	WITHOUT_CLASSIFICATION	1.2252903933039366E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999776342561282	WITHOUT_CLASSIFICATION	2.236574387183972E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999776342561282	WITHOUT_CLASSIFICATION	2.236574387183972E-5	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9993031588519644	WITHOUT_CLASSIFICATION	6.968411480355077E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999341217680566	WITHOUT_CLASSIFICATION	6.587823194339732E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9858728090390219	WITHOUT_CLASSIFICATION	0.014127190960978267	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999976013474337	WITHOUT_CLASSIFICATION	2.3986525662699677E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9984787648976187	WITHOUT_CLASSIFICATION	0.0015212351023813696	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999936129392816	WITHOUT_CLASSIFICATION	6.387060718331777E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999403513242329	WITHOUT_CLASSIFICATION	5.964867576706085E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9993260844607079	WITHOUT_CLASSIFICATION	6.739155392921022E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9858728090390219	WITHOUT_CLASSIFICATION	0.014127190960978267	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999848293414427	WITHOUT_CLASSIFICATION	1.5170658557304013E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999952850880073	WITHOUT_CLASSIFICATION	4.714911992750203E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999952850880073	WITHOUT_CLASSIFICATION	4.714911992750203E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999920747854899	WITHOUT_CLASSIFICATION	7.92521451018484E-6	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999869669424448	WITHOUT_CLASSIFICATION	1.303305755519563E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999635133433191	WITHOUT_CLASSIFICATION	3.648665668083323E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9985128981508498	WITHOUT_CLASSIFICATION	0.0014871018491502078	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9993230531885613	WITHOUT_CLASSIFICATION	6.769468114386944E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998485704903277	WITHOUT_CLASSIFICATION	1.5142950967222903E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999979098642935	WITHOUT_CLASSIFICATION	2.0901357064386566E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999314884146491	WITHOUT_CLASSIFICATION	6.851158535089072E-5	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999952139327912	WITHOUT_CLASSIFICATION	4.786067208770723E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999952139327912	WITHOUT_CLASSIFICATION	4.786067208770723E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999855962279602	WITHOUT_CLASSIFICATION	1.4403772039794758E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999883024657736	WITHOUT_CLASSIFICATION	1.1697534226458093E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999502221338663	WITHOUT_CLASSIFICATION	4.97778661337689E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999694180180658	WITHOUT_CLASSIFICATION	3.058198193413241E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999733274871264	WITHOUT_CLASSIFICATION	2.6672512873464497E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999885492210646	WITHOUT_CLASSIFICATION	1.1450778935465733E-5	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999665905059523	WITHOUT_CLASSIFICATION	3.3409494047682916E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9999308883896388	WITHOUT_CLASSIFICATION	6.911161036115923E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999728877298127	WITHOUT_CLASSIFICATION	2.711227018726386E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999885492210646	WITHOUT_CLASSIFICATION	1.1450778935465733E-5	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9993772052901847	WITHOUT_CLASSIFICATION	6.227947098152884E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999890514300845	WITHOUT_CLASSIFICATION	1.0948569915363807E-5	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999734004199877	WITHOUT_CLASSIFICATION	2.6599580012249825E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999833110879739	WITHOUT_CLASSIFICATION	1.6688912026041586E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999868091797748	WITHOUT_CLASSIFICATION	1.3190820225217425E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999670130398519	WITHOUT_CLASSIFICATION	3.298696014821888E-5	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999877616668592	WITHOUT_CLASSIFICATION	1.223833314087999E-5	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999890749406146	WITHOUT_CLASSIFICATION	1.09250593852858E-5	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999766258461367	WITHOUT_CLASSIFICATION	2.337415386337187E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999833824808341	WITHOUT_CLASSIFICATION	1.6617519165865246E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999741211161883	WITHOUT_CLASSIFICATION	2.5878883811691054E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999748515921293	WITHOUT_CLASSIFICATION	2.5148407870743917E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999679902378511	WITHOUT_CLASSIFICATION	3.200976214887538E-5	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999888624445817	WITHOUT_CLASSIFICATION	1.1137555418283452E-5	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999857689373153	WITHOUT_CLASSIFICATION	1.4231062684652714E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999920649635035	WITHOUT_CLASSIFICATION	7.935036496505058E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999797762569567	WITHOUT_CLASSIFICATION	2.0223743043302207E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999171060811661	WITHOUT_CLASSIFICATION	8.289391883383282E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999622570095812	WITHOUT_CLASSIFICATION	3.774299041887609E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999885314713167	WITHOUT_CLASSIFICATION	1.1468528683273224E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999579177530372	WITHOUT_CLASSIFICATION	4.20822469627513E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9992967335831097	WITHOUT_CLASSIFICATION	7.032664168902579E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997733823683144	WITHOUT_CLASSIFICATION	2.2661763168566388E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997733823683144	WITHOUT_CLASSIFICATION	2.2661763168566388E-4	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999677916708335	WITHOUT_CLASSIFICATION	3.2208329166474365E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999995720687801	WITHOUT_CLASSIFICATION	4.2793121989515715E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9992931200291366	WITHOUT_CLASSIFICATION	7.06879970863295E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999502034836557	WITHOUT_CLASSIFICATION	4.979651634440045E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999542452070058	WITHOUT_CLASSIFICATION	4.575479299426065E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999888779099902	WITHOUT_CLASSIFICATION	1.1122090009785462E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999843105851124	WITHOUT_CLASSIFICATION	1.568941488760147E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999949446067124	WITHOUT_CLASSIFICATION	5.055393287605259E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999816474004081	WITHOUT_CLASSIFICATION	1.8352599591884386E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999816474004081	WITHOUT_CLASSIFICATION	1.8352599591884386E-5	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999816474004081	WITHOUT_CLASSIFICATION	1.8352599591884386E-5	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999886290749909	WITHOUT_CLASSIFICATION	1.1370925009246879E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999816474004081	WITHOUT_CLASSIFICATION	1.8352599591884386E-5	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999697809770258	WITHOUT_CLASSIFICATION	3.0219022974122394E-5	TEST
// int	WITHOUT_CLASSIFICATION	0.9999597658351861	WITHOUT_CLASSIFICATION	4.023416481401126E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999737363545437	WITHOUT_CLASSIFICATION	2.626364545624763E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999928415855961	WITHOUT_CLASSIFICATION	7.158414403986472E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.999975785608901	WITHOUT_CLASSIFICATION	2.4214391099042677E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999939666967917	WITHOUT_CLASSIFICATION	6.033303208250048E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999917886081646	WITHOUT_CLASSIFICATION	8.211391835398278E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999917886081646	WITHOUT_CLASSIFICATION	8.211391835398278E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999758430717569	WITHOUT_CLASSIFICATION	2.4156928243109673E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999887211682786	WITHOUT_CLASSIFICATION	1.1278831721486194E-5	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999584632675267	WITHOUT_CLASSIFICATION	4.1536732473306696E-5	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999587000324688	WITHOUT_CLASSIFICATION	4.129996753128227E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.999958192620534	WITHOUT_CLASSIFICATION	4.1807379465964816E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999581506315831	WITHOUT_CLASSIFICATION	4.184936841693222E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999665509990242	WITHOUT_CLASSIFICATION	3.3449000975824345E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999427229768852	WITHOUT_CLASSIFICATION	5.7277023114728136E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999427229768852	WITHOUT_CLASSIFICATION	5.7277023114728136E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999913887422439	WITHOUT_CLASSIFICATION	8.611257756112924E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999913887422439	WITHOUT_CLASSIFICATION	8.611257756112924E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999508221310204	WITHOUT_CLASSIFICATION	4.9177868979481E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999508221310204	WITHOUT_CLASSIFICATION	4.9177868979481E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999917886081646	WITHOUT_CLASSIFICATION	8.211391835398278E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999665509990242	WITHOUT_CLASSIFICATION	3.3449000975824345E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999427229768852	WITHOUT_CLASSIFICATION	5.7277023114728136E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999913887422439	WITHOUT_CLASSIFICATION	8.611257756112924E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999913887422439	WITHOUT_CLASSIFICATION	8.611257756112924E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999508221310204	WITHOUT_CLASSIFICATION	4.9177868979481E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999752369816933	WITHOUT_CLASSIFICATION	2.4763018306715478E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997595273527351	WITHOUT_CLASSIFICATION	2.404726472648407E-4	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999454578524412	WITHOUT_CLASSIFICATION	5.4542147558900314E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997971676125251	WITHOUT_CLASSIFICATION	2.0283238747483928E-4	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998783449808658	WITHOUT_CLASSIFICATION	1.2165501913412069E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999578216807996	WITHOUT_CLASSIFICATION	4.217831920043152E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999754306804695	WITHOUT_CLASSIFICATION	2.4569319530495836E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999325566449725	WITHOUT_CLASSIFICATION	6.744335502751566E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998730264190857	WITHOUT_CLASSIFICATION	1.2697358091424708E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999802260216956	WITHOUT_CLASSIFICATION	1.977397830444321E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999558032745618	WITHOUT_CLASSIFICATION	4.419672543826913E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999587780227827	WITHOUT_CLASSIFICATION	4.1221977217434425E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998352877714521	WITHOUT_CLASSIFICATION	1.647122285478827E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999578216807996	WITHOUT_CLASSIFICATION	4.217831920043152E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999936211469666	WITHOUT_CLASSIFICATION	6.378853033386873E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999774317078217	WITHOUT_CLASSIFICATION	2.2568292178206266E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999774317078217	WITHOUT_CLASSIFICATION	2.2568292178206266E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9992904551941586	WITHOUT_CLASSIFICATION	7.095448058415133E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997474351116461	WITHOUT_CLASSIFICATION	2.52564888353877E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9944911570055373	WITHOUT_CLASSIFICATION	0.0055088429944628	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999656351346822	WITHOUT_CLASSIFICATION	3.436486531783836E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999656351346822	WITHOUT_CLASSIFICATION	3.436486531783836E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999934030240026	WITHOUT_CLASSIFICATION	6.596975997325835E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999965415171552	WITHOUT_CLASSIFICATION	3.458482844850902E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999965415171552	WITHOUT_CLASSIFICATION	3.458482844850902E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9996571147672383	WITHOUT_CLASSIFICATION	3.4288523276177613E-4	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999820218091605	WITHOUT_CLASSIFICATION	1.7978190839462678E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999890969174474	WITHOUT_CLASSIFICATION	1.090308255260395E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9925570326480686	WITHOUT_CLASSIFICATION	0.007442967351931418	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999578710286193	WITHOUT_CLASSIFICATION	4.212897138062651E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999971832493246	WITHOUT_CLASSIFICATION	2.8167506754082625E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999711366939771	WITHOUT_CLASSIFICATION	2.8863306022968967E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9994481124991618	WITHOUT_CLASSIFICATION	5.518875008382042E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999766088070263	WITHOUT_CLASSIFICATION	2.3391192973751064E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999498600093075	WITHOUT_CLASSIFICATION	5.013999069258275E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999992930784356	WITHOUT_CLASSIFICATION	7.069215643617693E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999885060431339	WITHOUT_CLASSIFICATION	1.1493956866060413E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999890969174474	WITHOUT_CLASSIFICATION	1.090308255260395E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999901502756661	WITHOUT_CLASSIFICATION	9.849724333940468E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999887646689928	WITHOUT_CLASSIFICATION	1.1235331007142662E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999578099750128	WITHOUT_CLASSIFICATION	4.219002498720142E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999885060431339	WITHOUT_CLASSIFICATION	1.1493956866060413E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999901502756661	WITHOUT_CLASSIFICATION	9.849724333940468E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999578099750128	WITHOUT_CLASSIFICATION	4.219002498720142E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999175481945317	WITHOUT_CLASSIFICATION	8.245180546836226E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999175481945317	WITHOUT_CLASSIFICATION	8.245180546836226E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999884981078647	WITHOUT_CLASSIFICATION	1.1501892135268894E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999893113071809	WITHOUT_CLASSIFICATION	1.0688692819197643E-5	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998719978386382	WITHOUT_CLASSIFICATION	1.280021613616568E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999718350303393	WITHOUT_CLASSIFICATION	2.816496966078794E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9998689108133895	WITHOUT_CLASSIFICATION	1.310891866105417E-4	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999796504731447	WITHOUT_CLASSIFICATION	2.03495268552533E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999517196419736	WITHOUT_CLASSIFICATION	4.828035802634928E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999779966637342	WITHOUT_CLASSIFICATION	2.2003336265771744E-5	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999796504731447	WITHOUT_CLASSIFICATION	2.03495268552533E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996772663073813	WITHOUT_CLASSIFICATION	3.227336926187172E-4	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999885060431339	WITHOUT_CLASSIFICATION	1.1493956866060413E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999957979954915	WITHOUT_CLASSIFICATION	4.202004508499377E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999861397611517	WITHOUT_CLASSIFICATION	1.3860238848287271E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9992884714871507	WITHOUT_CLASSIFICATION	7.115285128492488E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999852784323892	WITHOUT_CLASSIFICATION	1.47215676108894E-5	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999874334013462	WITHOUT_CLASSIFICATION	1.2566598653839867E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999984458195048	WITHOUT_CLASSIFICATION	1.5541804951903598E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999282856759236	WITHOUT_CLASSIFICATION	7.171432407643783E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999915379078169	WITHOUT_CLASSIFICATION	8.462092183106699E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999885172027352	WITHOUT_CLASSIFICATION	1.1482797264718741E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999413349304702	WITHOUT_CLASSIFICATION	5.866506952983464E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999498600093075	WITHOUT_CLASSIFICATION	5.013999069258275E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999699564644551	WITHOUT_CLASSIFICATION	3.0043535544946992E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9989664215881201	WITHOUT_CLASSIFICATION	0.001033578411879883	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999964628221449	WITHOUT_CLASSIFICATION	3.5371778551068236E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999961430832076	WITHOUT_CLASSIFICATION	3.856916792364044E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999961461565312	WITHOUT_CLASSIFICATION	3.853843468800371E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999591939495297	WITHOUT_CLASSIFICATION	4.080605047035134E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999948082705696	WITHOUT_CLASSIFICATION	5.191729430432434E-6	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999900965659893	WITHOUT_CLASSIFICATION	9.903434010765223E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9986715606985795	WITHOUT_CLASSIFICATION	0.0013284393014204945	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9995610087765653	WITHOUT_CLASSIFICATION	4.389912234346432E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999834549714851	WITHOUT_CLASSIFICATION	1.6545028514906442E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999834549714851	WITHOUT_CLASSIFICATION	1.6545028514906442E-4	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9995584004372754	WITHOUT_CLASSIFICATION	4.415995627245809E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999636273304694	WITHOUT_CLASSIFICATION	3.637266953056708E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999671350278445	WITHOUT_CLASSIFICATION	3.2864972155503987E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999700185935706	WITHOUT_CLASSIFICATION	2.998140642949178E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9995594110462745	WITHOUT_CLASSIFICATION	4.405889537255492E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9995740709791591	WITHOUT_CLASSIFICATION	4.259290208409021E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999731258037559	WITHOUT_CLASSIFICATION	2.687419624411686E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999842415672199	WITHOUT_CLASSIFICATION	1.5758432780095828E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9993488840384843	WITHOUT_CLASSIFICATION	6.511159615158112E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998951836516866	WITHOUT_CLASSIFICATION	1.0481634831335451E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999832862334886	WITHOUT_CLASSIFICATION	1.6713766511366244E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999478138844766	WITHOUT_CLASSIFICATION	5.218611552332022E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9997071374722526	WITHOUT_CLASSIFICATION	2.928625277474103E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608504136843	WITHOUT_CLASSIFICATION	3.914958631579665E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549884241016	WITHOUT_CLASSIFICATION	4.5011575898483415E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9994591238670658	WITHOUT_CLASSIFICATION	5.408761329342179E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999913092716183	WITHOUT_CLASSIFICATION	8.690728381750093E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.99969970615744	WITHOUT_CLASSIFICATION	3.0029384256010863E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999994669903315	WITHOUT_CLASSIFICATION	5.330096684961471E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999607169956573	WITHOUT_CLASSIFICATION	3.928300434273311E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999607169956573	WITHOUT_CLASSIFICATION	3.928300434273311E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9998344288976028	WITHOUT_CLASSIFICATION	1.6557110239723798E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9998344288976028	WITHOUT_CLASSIFICATION	1.6557110239723798E-4	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9986715606985795	WITHOUT_CLASSIFICATION	0.0013284393014204945	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997805388232855	WITHOUT_CLASSIFICATION	2.194611767145634E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9955536697708615	WITHOUT_CLASSIFICATION	0.004446330229138536	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996279953821029	WITHOUT_CLASSIFICATION	3.720046178970327E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9955536697708615	WITHOUT_CLASSIFICATION	0.004446330229138536	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996279953821029	WITHOUT_CLASSIFICATION	3.720046178970327E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989486637281699	WITHOUT_CLASSIFICATION	0.0010513362718300697	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9994606854240708	WITHOUT_CLASSIFICATION	5.393145759291945E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999982592377724	WITHOUT_CLASSIFICATION	1.7407622276069084E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.999996012038632	WITHOUT_CLASSIFICATION	3.98796136801057E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9975126370772177	WITHOUT_CLASSIFICATION	0.0024873629227822867	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9919553080512549	WITHOUT_CLASSIFICATION	0.008044691948745061	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998668626679369	WITHOUT_CLASSIFICATION	1.3313733206306446E-4	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9980456875870323	WITHOUT_CLASSIFICATION	0.00195431241296766	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.998907411894217	WITHOUT_CLASSIFICATION	0.0010925881057829716	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999662909242636	WITHOUT_CLASSIFICATION	3.370907573636845E-5	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999814706126838	WITHOUT_CLASSIFICATION	1.852938731617023E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999794538452081	WITHOUT_CLASSIFICATION	2.054615479189858E-5	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999926719235614	WITHOUT_CLASSIFICATION	7.328076438626443E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9994545307324888	WITHOUT_CLASSIFICATION	5.454692675111411E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9994545307324888	WITHOUT_CLASSIFICATION	5.454692675111411E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997465278277234	WITHOUT_CLASSIFICATION	2.534721722764951E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997465278277234	WITHOUT_CLASSIFICATION	2.534721722764951E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999939650691686	WITHOUT_CLASSIFICATION	6.034930831480462E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989486637281699	WITHOUT_CLASSIFICATION	0.0010513362718300697	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999415850763458	WITHOUT_CLASSIFICATION	5.841492365418808E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999684424920498	WITHOUT_CLASSIFICATION	3.1557507950196085E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999187283096467	WITHOUT_CLASSIFICATION	8.127169035333133E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9992795405656801	WITHOUT_CLASSIFICATION	7.204594343199297E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8843402926000979	WITHOUT_CLASSIFICATION	0.11565970739990201	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989486637281699	WITHOUT_CLASSIFICATION	0.0010513362718300697	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9992795405656801	WITHOUT_CLASSIFICATION	7.204594343199297E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8843402926000979	WITHOUT_CLASSIFICATION	0.11565970739990201	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9993631615587713	WITHOUT_CLASSIFICATION	6.368384412287277E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999887257165733	WITHOUT_CLASSIFICATION	1.1274283426709708E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999208630065761	WITHOUT_CLASSIFICATION	7.913699342383492E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989486637281699	WITHOUT_CLASSIFICATION	0.0010513362718300697	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9989486637281699	WITHOUT_CLASSIFICATION	0.0010513362718300697	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999940489076856	WITHOUT_CLASSIFICATION	5.951092314345244E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999940421387044	WITHOUT_CLASSIFICATION	5.957861295541472E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999713582846829	WITHOUT_CLASSIFICATION	2.8641715317206424E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999873142594001	WITHOUT_CLASSIFICATION	1.2685740599900308E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996186832427002	WITHOUT_CLASSIFICATION	3.813167572997812E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999998119648273	WITHOUT_CLASSIFICATION	1.8803517270171238E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999944904809096	WITHOUT_CLASSIFICATION	5.509519090400285E-5	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999783487016087	WITHOUT_CLASSIFICATION	2.1651298391284595E-5	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999990044727855	WITHOUT_CLASSIFICATION	9.95527214488873E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999826351619636	WITHOUT_CLASSIFICATION	1.7364838036375638E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999985118248469	WITHOUT_CLASSIFICATION	1.4881751530953707E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999986804398319	WITHOUT_CLASSIFICATION	1.319560168093366E-5	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999973802684527	WITHOUT_CLASSIFICATION	2.619731547303821E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999950747303397	WITHOUT_CLASSIFICATION	4.9252696603074075E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999399938550745	WITHOUT_CLASSIFICATION	6.000614492561604E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997834014118455	WITHOUT_CLASSIFICATION	2.1659858815448885E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996035005967655	WITHOUT_CLASSIFICATION	3.9649940323443713E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9993528790394047	WITHOUT_CLASSIFICATION	6.471209605952805E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996279953821029	WITHOUT_CLASSIFICATION	3.720046178970327E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997063923259787	WITHOUT_CLASSIFICATION	2.936076740213447E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997834014118455	WITHOUT_CLASSIFICATION	2.1659858815448885E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9942202615309143	WITHOUT_CLASSIFICATION	0.005779738469085759	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9974719901552117	WITHOUT_CLASSIFICATION	0.002528009844788326	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.978644424750782	WITHOUT_CLASSIFICATION	0.021355575249218033	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998970271504705	WITHOUT_CLASSIFICATION	1.0297284952952784E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998357067681463	WITHOUT_CLASSIFICATION	1.642932318537352E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999971470658141	WITHOUT_CLASSIFICATION	2.8529341859368384E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.99999570543967	WITHOUT_CLASSIFICATION	4.2945603300824055E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976153893293	WITHOUT_CLASSIFICATION	2.3846106707177515E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998394865022148	WITHOUT_CLASSIFICATION	1.6051349778514604E-4	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999412969800495	WITHOUT_CLASSIFICATION	5.870301995058891E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999927711368943	WITHOUT_CLASSIFICATION	7.228863105736553E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999507851333357	WITHOUT_CLASSIFICATION	4.921486666434574E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999921267876076	WITHOUT_CLASSIFICATION	7.873212392349118E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922251414828	WITHOUT_CLASSIFICATION	7.774858517283815E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999775443427538	WITHOUT_CLASSIFICATION	2.2455657246187116E-5	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998690105771957	WITHOUT_CLASSIFICATION	1.3098942280436363E-4	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834479926589	WITHOUT_CLASSIFICATION	1.6552007341081048E-5	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999977707162393	WITHOUT_CLASSIFICATION	2.2292837607055404E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997287602508634	WITHOUT_CLASSIFICATION	2.712397491365574E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999911845554185	WITHOUT_CLASSIFICATION	8.815444581549602E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697401632159	WITHOUT_CLASSIFICATION	3.0259836784036305E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697401632159	WITHOUT_CLASSIFICATION	3.0259836784036305E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613558147292	WITHOUT_CLASSIFICATION	3.8644185270650355E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493791455335	WITHOUT_CLASSIFICATION	5.0620854466458065E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999802653478149	WITHOUT_CLASSIFICATION	1.973465218503007E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999718403658096	WITHOUT_CLASSIFICATION	2.8159634190454074E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999617777041531	WITHOUT_CLASSIFICATION	3.822229584695546E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999633485047559	WITHOUT_CLASSIFICATION	3.665149524402782E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603157391822	WITHOUT_CLASSIFICATION	3.9684260817866424E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999728110513831	WITHOUT_CLASSIFICATION	2.718894861684744E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999599569424406	WITHOUT_CLASSIFICATION	4.004305755947738E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999641491034007	WITHOUT_CLASSIFICATION	3.5850896599313725E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999358849864823	WITHOUT_CLASSIFICATION	6.411501351761428E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991964740271	WITHOUT_CLASSIFICATION	8.035259729035734E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999980946380623	WITHOUT_CLASSIFICATION	1.905361937633604E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.998370746457698	WITHOUT_CLASSIFICATION	0.0016292535423021014	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997627517162152	WITHOUT_CLASSIFICATION	2.3724828378473645E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9993631615587713	WITHOUT_CLASSIFICATION	6.368384412287277E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999693102985391	WITHOUT_CLASSIFICATION	3.068970146099729E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999689053552492	WITHOUT_CLASSIFICATION	3.1094644750802245E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999885868602403	WITHOUT_CLASSIFICATION	1.1413139759644034E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999921235783	WITHOUT_CLASSIFICATION	7.876421699909949E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999803736579098	WITHOUT_CLASSIFICATION	1.9626342090224178E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999928058573875	WITHOUT_CLASSIFICATION	7.1941426125065505E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999795378181685	WITHOUT_CLASSIFICATION	2.0462181831462242E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958646157808	WITHOUT_CLASSIFICATION	4.1353842191816315E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612122148387	WITHOUT_CLASSIFICATION	3.8787785161260884E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902047508493	WITHOUT_CLASSIFICATION	9.795249150682374E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999586517593122	WITHOUT_CLASSIFICATION	4.134824068781824E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998978270071748	WITHOUT_CLASSIFICATION	1.0217299282522651E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999647486854942	WITHOUT_CLASSIFICATION	3.525131450584242E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999835212302012	WITHOUT_CLASSIFICATION	1.647876979881078E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999581886254691	WITHOUT_CLASSIFICATION	4.181137453088172E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999616836813195	WITHOUT_CLASSIFICATION	3.8316318680541446E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999412937733481	WITHOUT_CLASSIFICATION	5.870622665180886E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999758371868821	WITHOUT_CLASSIFICATION	2.4162813117952507E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999959834675153	WITHOUT_CLASSIFICATION	4.016532484706278E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999843719397877	WITHOUT_CLASSIFICATION	1.5628060212243096E-5	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997564018466665	WITHOUT_CLASSIFICATION	2.43598153333584E-4	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999842641990679	WITHOUT_CLASSIFICATION	1.5735800932059225E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999814383674039	WITHOUT_CLASSIFICATION	1.8561632596074296E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999742274809981	WITHOUT_CLASSIFICATION	2.5772519001939305E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.998370746457698	WITHOUT_CLASSIFICATION	0.0016292535423021014	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999829275901381	WITHOUT_CLASSIFICATION	1.7072409861921622E-5	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999926007778034	WITHOUT_CLASSIFICATION	7.399222196587982E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999837723348469	WITHOUT_CLASSIFICATION	1.6227665153079363E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991964740271	WITHOUT_CLASSIFICATION	8.035259729035734E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999763932493635	WITHOUT_CLASSIFICATION	2.3606750636518784E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9994336399827409	WITHOUT_CLASSIFICATION	5.663600172590173E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999347066215927	WITHOUT_CLASSIFICATION	6.529337840732762E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999353671684388	WITHOUT_CLASSIFICATION	6.463283156118712E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998506367029903	WITHOUT_CLASSIFICATION	1.4936329700961787E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999494088709961	WITHOUT_CLASSIFICATION	5.05911290038603E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999494114792987	WITHOUT_CLASSIFICATION	5.058852070115555E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999502220507638	WITHOUT_CLASSIFICATION	4.9777949236288654E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999525724503275	WITHOUT_CLASSIFICATION	4.742754967245194E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999033308761962	WITHOUT_CLASSIFICATION	9.666912380369346E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999734828214177	WITHOUT_CLASSIFICATION	2.651717858224735E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9993631615587713	WITHOUT_CLASSIFICATION	6.368384412287277E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991964740271	WITHOUT_CLASSIFICATION	8.035259729035734E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999903706332759	WITHOUT_CLASSIFICATION	9.629366724069786E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9997569831563738	WITHOUT_CLASSIFICATION	2.4301684362615356E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999815603799606	WITHOUT_CLASSIFICATION	1.84396200394765E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9996517098445236	WITHOUT_CLASSIFICATION	3.482901554764771E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999381257378565	WITHOUT_CLASSIFICATION	6.187426214351104E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999825597001661	WITHOUT_CLASSIFICATION	1.744029983380933E-5	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999954852205348	WITHOUT_CLASSIFICATION	4.514779465240134E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999399888056631	WITHOUT_CLASSIFICATION	6.00111943367341E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998148367228263	WITHOUT_CLASSIFICATION	1.8516327717370786E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998434891240575	WITHOUT_CLASSIFICATION	1.565108759425315E-4	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9995824048397851	WITHOUT_CLASSIFICATION	4.175951602148041E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991964740271	WITHOUT_CLASSIFICATION	8.035259729035734E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.998370746457698	WITHOUT_CLASSIFICATION	0.0016292535423021014	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9996094993731007	WITHOUT_CLASSIFICATION	3.905006268993088E-4	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999939308635708	WITHOUT_CLASSIFICATION	6.06913642923154E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993127017299485	WITHOUT_CLASSIFICATION	6.872982700515235E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.998370746457698	WITHOUT_CLASSIFICATION	0.0016292535423021014	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998906073538445	WITHOUT_CLASSIFICATION	1.0939264615551748E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999815603799606	WITHOUT_CLASSIFICATION	1.84396200394765E-5	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9990042029884199	WITHOUT_CLASSIFICATION	9.957970115800558E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.997507582883115	WITHOUT_CLASSIFICATION	0.0024924171168849516	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999894624861817	WITHOUT_CLASSIFICATION	1.0537513818304267E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998506367029903	WITHOUT_CLASSIFICATION	1.4936329700961787E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999494088709961	WITHOUT_CLASSIFICATION	5.05911290038603E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999494114792987	WITHOUT_CLASSIFICATION	5.058852070115555E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999604553176157	WITHOUT_CLASSIFICATION	3.954468238437034E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.999954985210788	WITHOUT_CLASSIFICATION	4.5014789211952375E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999261981600411	WITHOUT_CLASSIFICATION	7.380183995893335E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999874607940348	WITHOUT_CLASSIFICATION	1.253920596515394E-5	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999993902970459	WITHOUT_CLASSIFICATION	6.097029540788862E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.998370746457698	WITHOUT_CLASSIFICATION	0.0016292535423021014	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999502220507638	WITHOUT_CLASSIFICATION	4.9777949236288654E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999525724503275	WITHOUT_CLASSIFICATION	4.742754967245194E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856535569841	WITHOUT_CLASSIFICATION	1.4346443015887382E-5	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868376459706	WITHOUT_CLASSIFICATION	1.3162354029259325E-5	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999585615518886	WITHOUT_CLASSIFICATION	4.143844811154407E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999674958211909	WITHOUT_CLASSIFICATION	3.2504178809115313E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999973644497619	WITHOUT_CLASSIFICATION	2.635550238095555E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998943750618627	WITHOUT_CLASSIFICATION	1.0562493813719845E-4	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997402421175677	WITHOUT_CLASSIFICATION	2.597578824322022E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999432046136425	WITHOUT_CLASSIFICATION	5.679538635747312E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999355487237642	WITHOUT_CLASSIFICATION	6.445127623571381E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999633485047559	WITHOUT_CLASSIFICATION	3.665149524402782E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999929427583012	WITHOUT_CLASSIFICATION	7.057241698798775E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999528802225797	WITHOUT_CLASSIFICATION	4.711977742028053E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605768721475	WITHOUT_CLASSIFICATION	3.942312785247887E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.99997652308242	WITHOUT_CLASSIFICATION	2.347691758008104E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603157391822	WITHOUT_CLASSIFICATION	3.9684260817866424E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598721425753	WITHOUT_CLASSIFICATION	4.0127857424630405E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999843719397877	WITHOUT_CLASSIFICATION	1.5628060212243096E-5	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9998920102117682	WITHOUT_CLASSIFICATION	1.0798978823179658E-4	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999718975236997	WITHOUT_CLASSIFICATION	2.810247630016807E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999601694431977	WITHOUT_CLASSIFICATION	3.9830556802287284E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995688070771012	WITHOUT_CLASSIFICATION	4.3119292289887966E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999885819471158	WITHOUT_CLASSIFICATION	1.1418052884134204E-5	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.998814422465761	WITHOUT_CLASSIFICATION	0.0011855775342388736	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998484517883425	WITHOUT_CLASSIFICATION	1.515482116575237E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976153893293	WITHOUT_CLASSIFICATION	2.3846106707177515E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999737913846753	WITHOUT_CLASSIFICATION	2.6208615324700278E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999587962815277	WITHOUT_CLASSIFICATION	4.120371847222287E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999839374537456	WITHOUT_CLASSIFICATION	1.606254625438941E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999775850349611	WITHOUT_CLASSIFICATION	2.2414965038815704E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999891769108877	WITHOUT_CLASSIFICATION	1.0823089112198836E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999944482869611	WITHOUT_CLASSIFICATION	5.5517130389001365E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830437413352	WITHOUT_CLASSIFICATION	1.6956258664837736E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835058709912	WITHOUT_CLASSIFICATION	1.6494129008791763E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999678834372748	WITHOUT_CLASSIFICATION	3.211656272515509E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999892855775384	WITHOUT_CLASSIFICATION	1.0714422461605835E-4	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891283371608	WITHOUT_CLASSIFICATION	1.0871662839141447E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999890924066671	WITHOUT_CLASSIFICATION	1.0907593332855852E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999827167693031	WITHOUT_CLASSIFICATION	1.7283230696921978E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999848155748855	WITHOUT_CLASSIFICATION	1.5184425114403697E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998818283255348	WITHOUT_CLASSIFICATION	1.1817167446516717E-4	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999327117481932	WITHOUT_CLASSIFICATION	6.72882518068131E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999827167693031	WITHOUT_CLASSIFICATION	1.7283230696921978E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997952774922335	WITHOUT_CLASSIFICATION	2.0472250776636472E-4	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999964577677246	WITHOUT_CLASSIFICATION	3.5422322754068074E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999629148152869	WITHOUT_CLASSIFICATION	3.708518471312204E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999989406188613	WITHOUT_CLASSIFICATION	1.0593811386975957E-5	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999933310516008	WITHOUT_CLASSIFICATION	6.668948399142682E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999662781682686	WITHOUT_CLASSIFICATION	3.3721831731407974E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999912780923047	WITHOUT_CLASSIFICATION	8.72190769535059E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998643346057791	WITHOUT_CLASSIFICATION	1.3566539422095374E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998643346057791	WITHOUT_CLASSIFICATION	1.3566539422095374E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999964251738179	WITHOUT_CLASSIFICATION	3.5748261821187934E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999974476888861	WITHOUT_CLASSIFICATION	2.552311113906714E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999398757546696	WITHOUT_CLASSIFICATION	6.012424533036269E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999852589308751	WITHOUT_CLASSIFICATION	1.4741069124886907E-5	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999984770968101	WITHOUT_CLASSIFICATION	1.5229031899821894E-6	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999586709909315	WITHOUT_CLASSIFICATION	4.132900906854257E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999642237820907	WITHOUT_CLASSIFICATION	3.5776217909322976E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999622657272197	WITHOUT_CLASSIFICATION	3.773427278033906E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998623656036051	WITHOUT_CLASSIFICATION	1.376343963950244E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999944156874457	WITHOUT_CLASSIFICATION	5.584312554305328E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999509352387725	WITHOUT_CLASSIFICATION	4.906476122746411E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999899932181088	WITHOUT_CLASSIFICATION	1.0006781891199619E-4	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999586302863238	WITHOUT_CLASSIFICATION	4.1369713676272264E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998486396255745	WITHOUT_CLASSIFICATION	1.5136037442553633E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999115745872534	WITHOUT_CLASSIFICATION	8.842541274647999E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9993166804953062	WITHOUT_CLASSIFICATION	6.833195046938123E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999896464007565	WITHOUT_CLASSIFICATION	1.0353599243648024E-5	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996736459850469	WITHOUT_CLASSIFICATION	3.263540149530992E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999723540048567	WITHOUT_CLASSIFICATION	2.7645995143189377E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999536419089298	WITHOUT_CLASSIFICATION	4.635809107021337E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999931353111164	WITHOUT_CLASSIFICATION	6.864688883599059E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999536165584298	WITHOUT_CLASSIFICATION	4.638344157014899E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999781516162444	WITHOUT_CLASSIFICATION	2.1848383755584522E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999935389722281	WITHOUT_CLASSIFICATION	6.461027771910484E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999984449734332	WITHOUT_CLASSIFICATION	1.5550265667987045E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999813407062014	WITHOUT_CLASSIFICATION	1.865929379869361E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999968443135495	WITHOUT_CLASSIFICATION	3.1556864504811443E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999855880565425	WITHOUT_CLASSIFICATION	1.4411943457643744E-5	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9986183642079891	WITHOUT_CLASSIFICATION	0.0013816357920109054	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999884953922201	WITHOUT_CLASSIFICATION	1.1504607779776989E-5	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999488927004107	WITHOUT_CLASSIFICATION	5.1107299589457006E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999556729153367	WITHOUT_CLASSIFICATION	4.432708466337391E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998445072348814	WITHOUT_CLASSIFICATION	1.5549276511862337E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998862986742968	WITHOUT_CLASSIFICATION	1.1370132570322092E-4	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996353044236416	WITHOUT_CLASSIFICATION	3.646955763585316E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999885315446623	WITHOUT_CLASSIFICATION	1.146845533774573E-5	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9989088924372342	WITHOUT_CLASSIFICATION	0.0010911075627657893	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9987246553739643	WITHOUT_CLASSIFICATION	0.0012753446260357832	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998204118591215	WITHOUT_CLASSIFICATION	1.7958814087850827E-4	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9995732478431172	WITHOUT_CLASSIFICATION	4.2675215688279703E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998998955733378	WITHOUT_CLASSIFICATION	1.0010442666226985E-4	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9993631615587713	WITHOUT_CLASSIFICATION	6.368384412287277E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9993631615587713	WITHOUT_CLASSIFICATION	6.368384412287277E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999959271521673	WITHOUT_CLASSIFICATION	4.072847832696474E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999512848281942	WITHOUT_CLASSIFICATION	4.871517180583514E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999480484886928	WITHOUT_CLASSIFICATION	5.195151130720791E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999940661156227	WITHOUT_CLASSIFICATION	5.933884377291317E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999639802454453	WITHOUT_CLASSIFICATION	3.6019754554656226E-5	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9993949238529224	WITHOUT_CLASSIFICATION	6.050761470776562E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9992970506167924	WITHOUT_CLASSIFICATION	7.029493832076756E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9939024181599865	WITHOUT_CLASSIFICATION	0.00609758184001359	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999133574017508	WITHOUT_CLASSIFICATION	8.66425982491363E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996580977317494	WITHOUT_CLASSIFICATION	3.419022682505715E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992860554549198	WITHOUT_CLASSIFICATION	7.139445450803294E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997854719817594	WITHOUT_CLASSIFICATION	2.1452801824057427E-4	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9992763837306606	WITHOUT_CLASSIFICATION	7.236162693392958E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9994053365063452	WITHOUT_CLASSIFICATION	5.946634936546834E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998718641993917	WITHOUT_CLASSIFICATION	1.2813580060830595E-4	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999936158129564	WITHOUT_CLASSIFICATION	6.384187043613206E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999516829388	WITHOUT_CLASSIFICATION	4.83170612824319E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999970488231648	WITHOUT_CLASSIFICATION	2.9511768352993975E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999746492149283	WITHOUT_CLASSIFICATION	2.535078507171951E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998671663913057	WITHOUT_CLASSIFICATION	1.3283360869433173E-4	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999970488231648	WITHOUT_CLASSIFICATION	2.9511768352993975E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999731367084315	WITHOUT_CLASSIFICATION	2.6863291568580965E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999858721078438	WITHOUT_CLASSIFICATION	1.412789215617676E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998176520195702	WITHOUT_CLASSIFICATION	1.8234798042974243E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997762574745501	WITHOUT_CLASSIFICATION	2.2374252544982105E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999886201332219	WITHOUT_CLASSIFICATION	1.1379866778085398E-5	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999769126704738	WITHOUT_CLASSIFICATION	2.30873295261787E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999571868966142	WITHOUT_CLASSIFICATION	4.281310338588958E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999975418056269	WITHOUT_CLASSIFICATION	2.4581943731153945E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999499914284181	WITHOUT_CLASSIFICATION	5.000857158198713E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999880470926777	WITHOUT_CLASSIFICATION	1.195290732217545E-5	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998979434866675	WITHOUT_CLASSIFICATION	1.0205651333248992E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999989345441467	WITHOUT_CLASSIFICATION	1.0654558532908058E-5	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999957042918895	WITHOUT_CLASSIFICATION	4.295708110505914E-5	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999696745051008	WITHOUT_CLASSIFICATION	3.0325494899255984E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9985861454245182	WITHOUT_CLASSIFICATION	0.0014138545754817872	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999814749261685	WITHOUT_CLASSIFICATION	1.8525073831466612E-5	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999013706033205	WITHOUT_CLASSIFICATION	9.862939667951676E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9902807172809587	WITHOUT_CLASSIFICATION	0.009719282719041348	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999991794043386	WITHOUT_CLASSIFICATION	8.20595661567952E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999847235859912	WITHOUT_CLASSIFICATION	1.5276414008850247E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9985506719871942	WITHOUT_CLASSIFICATION	0.001449328012805825	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999875224599203	WITHOUT_CLASSIFICATION	1.2477540079637428E-5	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999984327184982	WITHOUT_CLASSIFICATION	1.5672815017673048E-6	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9995251659244141	WITHOUT_CLASSIFICATION	4.7483407558592146E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.99948917998327	WITHOUT_CLASSIFICATION	5.108200167299519E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999624554548476	WITHOUT_CLASSIFICATION	3.754454515244272E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999944482869611	WITHOUT_CLASSIFICATION	5.5517130389001365E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998235466729483	WITHOUT_CLASSIFICATION	1.764533270516318E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998530845064326	WITHOUT_CLASSIFICATION	1.4691549356739446E-4	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998290830291618	WITHOUT_CLASSIFICATION	1.709169708382418E-4	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9987705133281131	WITHOUT_CLASSIFICATION	0.0012294866718869973	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999116925353667	WITHOUT_CLASSIFICATION	8.830746463325324E-5	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9994941964692884	WITHOUT_CLASSIFICATION	5.058035307116431E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999786208252868	WITHOUT_CLASSIFICATION	2.1379174713206145E-4	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999927200529117	WITHOUT_CLASSIFICATION	7.27994708826931E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999947081010624	WITHOUT_CLASSIFICATION	5.291898937567579E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999947085267515	WITHOUT_CLASSIFICATION	5.291473248513519E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999903095993408	WITHOUT_CLASSIFICATION	9.690400659180887E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999984640561996	WITHOUT_CLASSIFICATION	1.5359438003950614E-5	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9931535151522095	WITHOUT_CLASSIFICATION	0.006846484847790483	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998587636719023	WITHOUT_CLASSIFICATION	1.4123632809772365E-4	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999309697671974	WITHOUT_CLASSIFICATION	6.903023280259804E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997771576038742	WITHOUT_CLASSIFICATION	2.2284239612589864E-4	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998577671208971	WITHOUT_CLASSIFICATION	1.4223287910276872E-4	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999116421862217	WITHOUT_CLASSIFICATION	8.835781377819959E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9997361186108934	WITHOUT_CLASSIFICATION	2.6388138910655106E-4	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999268438448871	WITHOUT_CLASSIFICATION	7.315615511304517E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999111452225159	WITHOUT_CLASSIFICATION	8.885477748416587E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999972662850407	WITHOUT_CLASSIFICATION	2.733714959384929E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999677739174822	WITHOUT_CLASSIFICATION	3.2226082517902646E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998555117247823	WITHOUT_CLASSIFICATION	1.4448827521773406E-4	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999914318294518	WITHOUT_CLASSIFICATION	8.568170548251172E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999822684691262	WITHOUT_CLASSIFICATION	1.7731530873732368E-5	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999268398346	WITHOUT_CLASSIFICATION	7.316016540018593E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998499316968816	WITHOUT_CLASSIFICATION	1.500683031183617E-4	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9993446477916853	WITHOUT_CLASSIFICATION	6.55352208314731E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439778040953	WITHOUT_CLASSIFICATION	5.602219590483052E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235718820185	WITHOUT_CLASSIFICATION	7.642811798139475E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200589350731	WITHOUT_CLASSIFICATION	7.994106492691557E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999587034342254	WITHOUT_CLASSIFICATION	4.1296565774592716E-5	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999915101424727	WITHOUT_CLASSIFICATION	8.489857527402473E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999608123413221	WITHOUT_CLASSIFICATION	3.9187658677962124E-5	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999959092229579	WITHOUT_CLASSIFICATION	4.09077704210939E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999894748154108	WITHOUT_CLASSIFICATION	1.0525184589138342E-5	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439778040953	WITHOUT_CLASSIFICATION	5.602219590483052E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999894748154108	WITHOUT_CLASSIFICATION	1.0525184589138342E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999016391575967	WITHOUT_CLASSIFICATION	9.836084240336129E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999991977174256	WITHOUT_CLASSIFICATION	8.022825743882685E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999902708683572	WITHOUT_CLASSIFICATION	9.729131642686797E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999820033210679	WITHOUT_CLASSIFICATION	1.7996678932068204E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999275287800071	WITHOUT_CLASSIFICATION	7.247121999290522E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9982872595865907	WITHOUT_CLASSIFICATION	0.0017127404134092907	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999960800172135	WITHOUT_CLASSIFICATION	3.919982786495531E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999946044184947	WITHOUT_CLASSIFICATION	5.395581505217259E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999948847143418	WITHOUT_CLASSIFICATION	5.115285658158181E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996633649825833	WITHOUT_CLASSIFICATION	3.366350174166441E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999987988322905	WITHOUT_CLASSIFICATION	1.2011677094939206E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999604613274261	WITHOUT_CLASSIFICATION	3.953867257395969E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9985289618824997	WITHOUT_CLASSIFICATION	0.0014710381175003615	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9975826133482238	WITHOUT_CLASSIFICATION	0.00241738665177606	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999196466081349	WITHOUT_CLASSIFICATION	8.035339186506071E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999890715977975	WITHOUT_CLASSIFICATION	1.0928402202573236E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998724028953535	WITHOUT_CLASSIFICATION	1.2759710464650982E-4	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998724028953535	WITHOUT_CLASSIFICATION	1.2759710464650982E-4	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996580977317494	WITHOUT_CLASSIFICATION	3.419022682505715E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999271296296258	WITHOUT_CLASSIFICATION	7.287037037425026E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999760397297326	WITHOUT_CLASSIFICATION	2.396027026744292E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999950234185774	WITHOUT_CLASSIFICATION	4.976581422604419E-6	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999731730266874	WITHOUT_CLASSIFICATION	2.682697331264336E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999949531072718	WITHOUT_CLASSIFICATION	5.046892728114008E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996623043856263	WITHOUT_CLASSIFICATION	3.3769561437362424E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9994408966513798	WITHOUT_CLASSIFICATION	5.591033486201584E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999887418145753	WITHOUT_CLASSIFICATION	1.1258185424716622E-5	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999450273056697	WITHOUT_CLASSIFICATION	5.497269433030674E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999648384341637	WITHOUT_CLASSIFICATION	3.516156583632016E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999858960850035	WITHOUT_CLASSIFICATION	1.4103914996527875E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999860467820639	WITHOUT_CLASSIFICATION	1.3953217936023613E-5	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998839672497123	WITHOUT_CLASSIFICATION	1.1603275028780358E-4	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999984959372291	WITHOUT_CLASSIFICATION	1.5040627709100828E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999937448700836	WITHOUT_CLASSIFICATION	6.255129916396676E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999597807757418	WITHOUT_CLASSIFICATION	4.021922425815701E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9990935018305623	WITHOUT_CLASSIFICATION	9.064981694377423E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999031237104038	WITHOUT_CLASSIFICATION	9.687628959618309E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999776703148534	WITHOUT_CLASSIFICATION	2.2329685146558343E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999799188094887	WITHOUT_CLASSIFICATION	2.008119051135468E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999942819745784	WITHOUT_CLASSIFICATION	5.718025421541376E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999824584221294	WITHOUT_CLASSIFICATION	1.7541577870507637E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999842628873665	WITHOUT_CLASSIFICATION	1.5737112633454052E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9994406862695128	WITHOUT_CLASSIFICATION	5.593137304873436E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.999997086779143	WITHOUT_CLASSIFICATION	2.9132208569885863E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9983504217009259	WITHOUT_CLASSIFICATION	0.0016495782990740685	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994993903820246	WITHOUT_CLASSIFICATION	5.006096179753737E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998349243139941	WITHOUT_CLASSIFICATION	1.6507568600598253E-4	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999826746871561	WITHOUT_CLASSIFICATION	1.7325312843898414E-4	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9983593279169269	WITHOUT_CLASSIFICATION	0.0016406720830730683	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999111307104922	WITHOUT_CLASSIFICATION	8.88692895078071E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9959876968242378	WITHOUT_CLASSIFICATION	0.004012303175762204	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9984444998194141	WITHOUT_CLASSIFICATION	0.0015555001805859588	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9991989060367886	WITHOUT_CLASSIFICATION	8.01093963211257E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999786292793451	WITHOUT_CLASSIFICATION	2.1370720654908805E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999514659575256	WITHOUT_CLASSIFICATION	4.8534042474474174E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999331634535169	WITHOUT_CLASSIFICATION	6.683654648306286E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999867054179673	WITHOUT_CLASSIFICATION	1.3294582032755683E-5	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9994818465763129	WITHOUT_CLASSIFICATION	5.181534236871964E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999963527686783	WITHOUT_CLASSIFICATION	3.647231321702897E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495439181911	WITHOUT_CLASSIFICATION	5.0456081808996005E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9998344729303511	WITHOUT_CLASSIFICATION	1.6552706964894135E-4	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996364251054655	WITHOUT_CLASSIFICATION	3.6357489453446297E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999792580727637	WITHOUT_CLASSIFICATION	2.0741927236381674E-5	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999856450560096	WITHOUT_CLASSIFICATION	1.4354943990445388E-5	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999822254622021	WITHOUT_CLASSIFICATION	1.777453779798803E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999971682858849	WITHOUT_CLASSIFICATION	2.831714115129256E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999981262404099	WITHOUT_CLASSIFICATION	1.8737595901080037E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999456677549414	WITHOUT_CLASSIFICATION	5.43322450585353E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495439181911	WITHOUT_CLASSIFICATION	5.0456081808996005E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997203287601747	WITHOUT_CLASSIFICATION	2.7967123982529146E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996708812314411	WITHOUT_CLASSIFICATION	3.291187685588037E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999674048890248	WITHOUT_CLASSIFICATION	3.259511097513554E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998759965095101	WITHOUT_CLASSIFICATION	1.2400349048992211E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998906073538445	WITHOUT_CLASSIFICATION	1.0939264615551748E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9998906073538445	WITHOUT_CLASSIFICATION	1.0939264615551748E-4	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998805140426673	WITHOUT_CLASSIFICATION	1.1948595733276148E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999185219497592	WITHOUT_CLASSIFICATION	8.147805024075932E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.99940244477423	WITHOUT_CLASSIFICATION	5.975552257700857E-4	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998945441687669	WITHOUT_CLASSIFICATION	1.0545583123301833E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999877889532636	WITHOUT_CLASSIFICATION	1.2211046736505208E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999978988093904	WITHOUT_CLASSIFICATION	2.1011906097071523E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9994104713198901	WITHOUT_CLASSIFICATION	5.8952868010991E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999191412216534	WITHOUT_CLASSIFICATION	8.085877834657002E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994186626756651	WITHOUT_CLASSIFICATION	5.813373243349403E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998911131091538	WITHOUT_CLASSIFICATION	1.0888689084615779E-4	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998311476268847	WITHOUT_CLASSIFICATION	1.6885237311523924E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995705223724738	WITHOUT_CLASSIFICATION	4.294776275261952E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999971550866465	WITHOUT_CLASSIFICATION	2.844913353466203E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9989360693627845	WITHOUT_CLASSIFICATION	0.001063930637215501	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994932849885946	WITHOUT_CLASSIFICATION	5.067150114055241E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989879979072	WITHOUT_CLASSIFICATION	1.0120020927620622E-6	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998551984257253	WITHOUT_CLASSIFICATION	1.4480157427466906E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999973780699997	WITHOUT_CLASSIFICATION	2.6219300003770286E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9992722989403761	WITHOUT_CLASSIFICATION	7.277010596240475E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999935532989183	WITHOUT_CLASSIFICATION	6.446701081667139E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999947537117679	WITHOUT_CLASSIFICATION	5.246288232082308E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999935769522965	WITHOUT_CLASSIFICATION	6.423047703507676E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9960970550008925	WITHOUT_CLASSIFICATION	0.0039029449991074684	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998949327682082	WITHOUT_CLASSIFICATION	1.0506723179174105E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999800412409602	WITHOUT_CLASSIFICATION	1.9958759039773568E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999995055322796	WITHOUT_CLASSIFICATION	4.944677203791878E-7	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998928679222121	WITHOUT_CLASSIFICATION	1.0713207778792046E-4	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9963715291379244	WITHOUT_CLASSIFICATION	0.003628470862075573	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997270753920076	WITHOUT_CLASSIFICATION	2.729246079925069E-4	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998928679222121	WITHOUT_CLASSIFICATION	1.0713207778792046E-4	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999634715574757	WITHOUT_CLASSIFICATION	3.6528442524386004E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9994238675600589	WITHOUT_CLASSIFICATION	5.76132439941178E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999254537151069	WITHOUT_CLASSIFICATION	7.454628489307223E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999622206358908	WITHOUT_CLASSIFICATION	3.777936410920017E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997763433890572	WITHOUT_CLASSIFICATION	2.2365661094285555E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999648384341637	WITHOUT_CLASSIFICATION	3.516156583632016E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9989878003529297	WITHOUT_CLASSIFICATION	0.0010121996470704097	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.998814422465761	WITHOUT_CLASSIFICATION	0.0011855775342388736	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999461491764422	WITHOUT_CLASSIFICATION	5.385082355782648E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999906863892576	WITHOUT_CLASSIFICATION	9.313610742385919E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999406450554093	WITHOUT_CLASSIFICATION	5.935494459068895E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999833879646068	WITHOUT_CLASSIFICATION	1.661203539317073E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9991124558521346	WITHOUT_CLASSIFICATION	8.875441478652668E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999261712155523	WITHOUT_CLASSIFICATION	7.382878444770058E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999734168090728	WITHOUT_CLASSIFICATION	2.6583190927215813E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999568283694302	WITHOUT_CLASSIFICATION	4.317163056974748E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999984191912202	WITHOUT_CLASSIFICATION	1.580808779807068E-5	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999799447197932	WITHOUT_CLASSIFICATION	2.0055280206756083E-5	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999954176512658	WITHOUT_CLASSIFICATION	4.582348734227722E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999199229653694	WITHOUT_CLASSIFICATION	8.007703463060075E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999505985791243	WITHOUT_CLASSIFICATION	4.9401420875753855E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999470918828639	WITHOUT_CLASSIFICATION	5.290811713619178E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999869869060102	WITHOUT_CLASSIFICATION	1.3013093989805087E-5	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999880818112202	WITHOUT_CLASSIFICATION	1.1918188779717246E-5	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9990879733752671	WITHOUT_CLASSIFICATION	9.12026624732973E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999531370737299	WITHOUT_CLASSIFICATION	4.686292627017527E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9991289646441788	WITHOUT_CLASSIFICATION	8.710353558211656E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999895746313671	WITHOUT_CLASSIFICATION	1.0425368633034487E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999704191048094	WITHOUT_CLASSIFICATION	2.9580895190606536E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956257737504	WITHOUT_CLASSIFICATION	4.3742262496152895E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568563419318	WITHOUT_CLASSIFICATION	4.314365806824421E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999649425805789	WITHOUT_CLASSIFICATION	3.5057419421157974E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999906118348485	WITHOUT_CLASSIFICATION	9.38816515149619E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999827399581729	WITHOUT_CLASSIFICATION	1.7260041827167456E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999479492428	WITHOUT_CLASSIFICATION	5.205075721111392E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999692866311133	WITHOUT_CLASSIFICATION	3.071336888676742E-5	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999870482169047	WITHOUT_CLASSIFICATION	1.2951783095430122E-5	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999730038699263	WITHOUT_CLASSIFICATION	2.699613007380223E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999965153401279	WITHOUT_CLASSIFICATION	3.4846598720660334E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999806292440221	WITHOUT_CLASSIFICATION	1.9370755977869395E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999815144123586	WITHOUT_CLASSIFICATION	1.848558764133907E-5	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999641204806657	WITHOUT_CLASSIFICATION	3.587951933420658E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999388948414083	WITHOUT_CLASSIFICATION	6.110515859170047E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999963529658791	WITHOUT_CLASSIFICATION	3.647034120888056E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999979937812127	WITHOUT_CLASSIFICATION	2.0062187872986095E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999882012426436	WITHOUT_CLASSIFICATION	1.1798757356329717E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9994368201040568	WITHOUT_CLASSIFICATION	5.63179895943264E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999683170088852	WITHOUT_CLASSIFICATION	3.168299111478152E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999623027762466	WITHOUT_CLASSIFICATION	3.7697223753356645E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999917567003135	WITHOUT_CLASSIFICATION	8.243299686496824E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998926635342754	WITHOUT_CLASSIFICATION	1.0733646572457866E-4	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998775797075992	WITHOUT_CLASSIFICATION	1.2242029240091168E-4	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999579164871218	WITHOUT_CLASSIFICATION	4.2083512878136984E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9983682560852332	WITHOUT_CLASSIFICATION	0.0016317439147669015	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999979975214773	WITHOUT_CLASSIFICATION	2.0024785225723695E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999411099891562	WITHOUT_CLASSIFICATION	5.889001084378713E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9989079374821013	WITHOUT_CLASSIFICATION	0.0010920625178986838	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999334724037436	WITHOUT_CLASSIFICATION	6.652759625626843E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956257737504	WITHOUT_CLASSIFICATION	4.3742262496152895E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999570135733389	WITHOUT_CLASSIFICATION	4.2986426661098804E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999980335920566	WITHOUT_CLASSIFICATION	1.966407943429911E-6	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999578076811179	WITHOUT_CLASSIFICATION	4.2192318882095255E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999624759524359	WITHOUT_CLASSIFICATION	3.7524047563956444E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999951927872327	WITHOUT_CLASSIFICATION	4.807212767263463E-6	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999475984482586	WITHOUT_CLASSIFICATION	5.24015517414164E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578970719795	WITHOUT_CLASSIFICATION	4.210292802061312E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999752414476044	WITHOUT_CLASSIFICATION	2.4758552395482796E-5	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999956454819138	WITHOUT_CLASSIFICATION	4.354518086286561E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999731404819152	WITHOUT_CLASSIFICATION	2.685951808479158E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999989686592565	WITHOUT_CLASSIFICATION	1.0313407434986338E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999272365442093	WITHOUT_CLASSIFICATION	7.276345579071518E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998968338588109	WITHOUT_CLASSIFICATION	1.031661411890551E-4	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999907189469304	WITHOUT_CLASSIFICATION	9.28105306960418E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999016391575967	WITHOUT_CLASSIFICATION	9.836084240336129E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999991494847347	WITHOUT_CLASSIFICATION	8.505152653753463E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999986821725922	WITHOUT_CLASSIFICATION	1.3178274077061232E-6	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999824710092572	WITHOUT_CLASSIFICATION	1.752899074286905E-5	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999918070020054	WITHOUT_CLASSIFICATION	8.192997994619649E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999979939191445	WITHOUT_CLASSIFICATION	2.006080855572154E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738053862944	WITHOUT_CLASSIFICATION	3.2619461370560416E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738053862944	WITHOUT_CLASSIFICATION	3.2619461370560416E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999073493521672	WITHOUT_CLASSIFICATION	9.265064783280448E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999839979343722	WITHOUT_CLASSIFICATION	1.600206562786691E-5	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999827878740286	WITHOUT_CLASSIFICATION	1.7212125971416513E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999978638001215	WITHOUT_CLASSIFICATION	2.1361998784956963E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999774783136756	WITHOUT_CLASSIFICATION	2.2521686324489103E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999959120243466	WITHOUT_CLASSIFICATION	4.087975653414286E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999906267685291	WITHOUT_CLASSIFICATION	9.373231471012184E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996375984988172	WITHOUT_CLASSIFICATION	3.62401501182866E-4	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996375984988172	WITHOUT_CLASSIFICATION	3.62401501182866E-4	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9985095985040655	WITHOUT_CLASSIFICATION	0.0014904014959345405	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999989716059407	WITHOUT_CLASSIFICATION	1.0283940593023632E-5	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999320923009439	WITHOUT_CLASSIFICATION	6.790769905613469E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999937148146523	WITHOUT_CLASSIFICATION	6.285185347725954E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999937148146523	WITHOUT_CLASSIFICATION	6.285185347725954E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999937148146523	WITHOUT_CLASSIFICATION	6.285185347725954E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999419362572677	WITHOUT_CLASSIFICATION	5.806374273237146E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999819516561843	WITHOUT_CLASSIFICATION	1.8048343815713622E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999855745472018	WITHOUT_CLASSIFICATION	1.4425452798127674E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999134609300092	WITHOUT_CLASSIFICATION	8.65390699907425E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999912010324994	WITHOUT_CLASSIFICATION	8.798967500565179E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999988050827716	WITHOUT_CLASSIFICATION	1.1949172284558623E-6	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999646224405236	WITHOUT_CLASSIFICATION	3.5377559476381825E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9988041931373243	WITHOUT_CLASSIFICATION	0.0011958068626757592	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999539374688674	WITHOUT_CLASSIFICATION	4.606253113259715E-5	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998792806408886	WITHOUT_CLASSIFICATION	1.207193591114663E-4	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999324675089405	WITHOUT_CLASSIFICATION	6.753249105957326E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999989131038637	WITHOUT_CLASSIFICATION	1.0868961363066628E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999988452392311	WITHOUT_CLASSIFICATION	1.1547607689932488E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999995340961587	WITHOUT_CLASSIFICATION	4.659038412968076E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999995336928307	WITHOUT_CLASSIFICATION	4.663071693045992E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999906582910955	WITHOUT_CLASSIFICATION	9.341708904512252E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738053862944	WITHOUT_CLASSIFICATION	3.2619461370560416E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999858020290764	WITHOUT_CLASSIFICATION	1.4197970923666966E-5	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999699999322623	WITHOUT_CLASSIFICATION	3.000006773761042E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998845805688824	WITHOUT_CLASSIFICATION	1.154194311175834E-4	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999970930059413	WITHOUT_CLASSIFICATION	2.906994058702858E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999775043059858	WITHOUT_CLASSIFICATION	2.2495694014287693E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999980737096928	WITHOUT_CLASSIFICATION	1.9262903071928793E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999436057117009	WITHOUT_CLASSIFICATION	5.639428829903292E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999695849695768	WITHOUT_CLASSIFICATION	3.041503042320539E-5	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998229922203661	WITHOUT_CLASSIFICATION	1.77007779633914E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999865009280308	WITHOUT_CLASSIFICATION	1.3499071969284448E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999663792104623	WITHOUT_CLASSIFICATION	3.362078953767866E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999913425939884	WITHOUT_CLASSIFICATION	8.657406011612931E-6	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999690489035975	WITHOUT_CLASSIFICATION	3.0951096402452084E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999620343784809	WITHOUT_CLASSIFICATION	3.796562151908513E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999914731955286	WITHOUT_CLASSIFICATION	8.526804471357728E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999972744631086	WITHOUT_CLASSIFICATION	2.7255368913287725E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999990588834351	WITHOUT_CLASSIFICATION	9.411165648980669E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999976846760119	WITHOUT_CLASSIFICATION	2.3153239880036086E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999712982721507	WITHOUT_CLASSIFICATION	2.8701727849378582E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999712982721507	WITHOUT_CLASSIFICATION	2.8701727849378582E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999833023101922	WITHOUT_CLASSIFICATION	1.6697689807913362E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999937790113015	WITHOUT_CLASSIFICATION	6.220988698557604E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999832929243573	WITHOUT_CLASSIFICATION	1.6707075642759507E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999697618679312	WITHOUT_CLASSIFICATION	3.0238132068854046E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999753527872254	WITHOUT_CLASSIFICATION	2.4647212774522864E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999984328052083	WITHOUT_CLASSIFICATION	1.5671947916967908E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999960875048799	WITHOUT_CLASSIFICATION	3.9124951200887106E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999156757781645	WITHOUT_CLASSIFICATION	8.432422183554902E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999879288359792	WITHOUT_CLASSIFICATION	1.2071164020747247E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999654072326837	WITHOUT_CLASSIFICATION	3.4592767316339906E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999698907113643	WITHOUT_CLASSIFICATION	3.0109288635655913E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992743280800164	WITHOUT_CLASSIFICATION	7.256719199835765E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999994799331772	WITHOUT_CLASSIFICATION	5.20066822785101E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999957181600312	WITHOUT_CLASSIFICATION	4.281839968811806E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999989903879958	WITHOUT_CLASSIFICATION	1.009612004242676E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999163646446587	WITHOUT_CLASSIFICATION	8.363535534133712E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989400726346	WITHOUT_CLASSIFICATION	1.0599273654370898E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989400726346	WITHOUT_CLASSIFICATION	1.0599273654370898E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999260028528069	WITHOUT_CLASSIFICATION	7.399714719313618E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999656227137	WITHOUT_CLASSIFICATION	3.4377286288824207E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999313614016121	WITHOUT_CLASSIFICATION	6.863859838798516E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999313614016121	WITHOUT_CLASSIFICATION	6.863859838798516E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999177257049394	WITHOUT_CLASSIFICATION	8.227429506049248E-5	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999659359462794	WITHOUT_CLASSIFICATION	3.4064053720594153E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9992041885630113	WITHOUT_CLASSIFICATION	7.958114369888248E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999974157425032	WITHOUT_CLASSIFICATION	2.58425749689212E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999216587796088	WITHOUT_CLASSIFICATION	7.834122039114422E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9996051555878335	WITHOUT_CLASSIFICATION	3.948444121665153E-4	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999103932826824	WITHOUT_CLASSIFICATION	8.960671731757976E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999974157425032	WITHOUT_CLASSIFICATION	2.58425749689212E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.99997812814628	WITHOUT_CLASSIFICATION	2.1871853720158692E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999841824090993	WITHOUT_CLASSIFICATION	1.5817590900769336E-5	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999830850734988	WITHOUT_CLASSIFICATION	1.6914926501228E-5	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999836927863835	WITHOUT_CLASSIFICATION	1.630721361644769E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999980663103741	WITHOUT_CLASSIFICATION	1.9336896257976435E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999833441684948	WITHOUT_CLASSIFICATION	1.665583150522887E-5	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999882321375025	WITHOUT_CLASSIFICATION	1.1767862497509497E-4	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999789390748188	WITHOUT_CLASSIFICATION	2.1060925181140905E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999974984109565	WITHOUT_CLASSIFICATION	2.5015890435703044E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999525149324932	WITHOUT_CLASSIFICATION	4.74850675068817E-5	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999524040834223	WITHOUT_CLASSIFICATION	4.7595916577603395E-5	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999991858323188	WITHOUT_CLASSIFICATION	8.141676811972566E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999937962936768	WITHOUT_CLASSIFICATION	6.203706323142076E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999990985484448	WITHOUT_CLASSIFICATION	9.014515551938121E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999895038033177	WITHOUT_CLASSIFICATION	1.0496196682308096E-5	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999670126796318	WITHOUT_CLASSIFICATION	3.298732036806779E-5	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9964254183912843	WITHOUT_CLASSIFICATION	0.0035745816087158094	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999580456479127	WITHOUT_CLASSIFICATION	4.1954352087279726E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999580456479127	WITHOUT_CLASSIFICATION	4.1954352087279726E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999882321375025	WITHOUT_CLASSIFICATION	1.1767862497509497E-4	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999121850544518	WITHOUT_CLASSIFICATION	8.78149455482307E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999959366645937	WITHOUT_CLASSIFICATION	4.063335406308838E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9993779716775122	WITHOUT_CLASSIFICATION	6.220283224878172E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999578058700495	WITHOUT_CLASSIFICATION	4.219412995051903E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999887390872636	WITHOUT_CLASSIFICATION	1.126091273635628E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999952850880073	WITHOUT_CLASSIFICATION	4.714911992750203E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999884631093713	WITHOUT_CLASSIFICATION	1.1536890628689011E-5	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999482931117589	WITHOUT_CLASSIFICATION	5.170688824119302E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999978226087433	WITHOUT_CLASSIFICATION	2.1773912567396285E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.999939060958853	WITHOUT_CLASSIFICATION	6.093904114708768E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999983538180075	WITHOUT_CLASSIFICATION	1.6461819925641118E-6	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999855937856506	WITHOUT_CLASSIFICATION	1.4406214349408595E-5	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999870945317337	WITHOUT_CLASSIFICATION	1.2905468266314172E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999914483224596	WITHOUT_CLASSIFICATION	8.551677540405929E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999815114200062	WITHOUT_CLASSIFICATION	1.848857999374341E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999892412793321	WITHOUT_CLASSIFICATION	1.0758720667904934E-5	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999991354284434	WITHOUT_CLASSIFICATION	8.645715566270675E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999978209170868	WITHOUT_CLASSIFICATION	2.179082913168617E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999415560012425	WITHOUT_CLASSIFICATION	5.844399875760318E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999852065950109	WITHOUT_CLASSIFICATION	1.479340498911072E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997812687189624	WITHOUT_CLASSIFICATION	2.187312810376298E-4	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999408870661461	WITHOUT_CLASSIFICATION	5.9112933853901495E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999945988379772	WITHOUT_CLASSIFICATION	5.401162022804128E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999864803904127	WITHOUT_CLASSIFICATION	1.3519609587367028E-5	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999829502351014	WITHOUT_CLASSIFICATION	1.7049764898642277E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999586789477279	WITHOUT_CLASSIFICATION	4.132105227210584E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999315041521148	WITHOUT_CLASSIFICATION	6.849584788518637E-4	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998498064495378	WITHOUT_CLASSIFICATION	1.5019355046210533E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999811920418071	WITHOUT_CLASSIFICATION	1.880795819294632E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999845319548074	WITHOUT_CLASSIFICATION	1.5468045192591716E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999815114200062	WITHOUT_CLASSIFICATION	1.848857999374341E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999826354627288	WITHOUT_CLASSIFICATION	1.7364537271209993E-5	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999913389814903	WITHOUT_CLASSIFICATION	8.661018509692069E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999937877465093	WITHOUT_CLASSIFICATION	6.212253490782985E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999928095342507	WITHOUT_CLASSIFICATION	7.190465749252084E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998802496238277	WITHOUT_CLASSIFICATION	1.1975037617227958E-4	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999939093054713	WITHOUT_CLASSIFICATION	6.090694528712927E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999840662590965	WITHOUT_CLASSIFICATION	1.5933740903512656E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999095189290775	WITHOUT_CLASSIFICATION	9.048107092252988E-5	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999877945076605	WITHOUT_CLASSIFICATION	1.2205492339416492E-5	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999730943620183	WITHOUT_CLASSIFICATION	2.6905637981723366E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999746380887958	WITHOUT_CLASSIFICATION	2.5361911204209275E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.99997654871563	WITHOUT_CLASSIFICATION	2.3451284369902175E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994580409584112	WITHOUT_CLASSIFICATION	5.419590415889367E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998913700064636	WITHOUT_CLASSIFICATION	1.0862999353638033E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999921029835977	WITHOUT_CLASSIFICATION	7.897016402295976E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999964118749868	WITHOUT_CLASSIFICATION	3.588125013350596E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998404892183846	WITHOUT_CLASSIFICATION	1.5951078161540586E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999980341819672	WITHOUT_CLASSIFICATION	1.9658180328562093E-6	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999977131170055	WITHOUT_CLASSIFICATION	2.2868829944990332E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999260800354954	WITHOUT_CLASSIFICATION	7.391996450453635E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999216587796088	WITHOUT_CLASSIFICATION	7.834122039114422E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999792507337117	WITHOUT_CLASSIFICATION	2.0749266288352247E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999815114200062	WITHOUT_CLASSIFICATION	1.848857999374341E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999775684775154	WITHOUT_CLASSIFICATION	2.2431522484642742E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999459816814802	WITHOUT_CLASSIFICATION	5.401831851970177E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999907872986884	WITHOUT_CLASSIFICATION	9.212701311611707E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999907872986884	WITHOUT_CLASSIFICATION	9.212701311611707E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999453755225279	WITHOUT_CLASSIFICATION	5.462447747196715E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999980643524432	WITHOUT_CLASSIFICATION	1.9356475568085542E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999851347191404	WITHOUT_CLASSIFICATION	1.4865280859695619E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999391622303521	WITHOUT_CLASSIFICATION	6.083776964804793E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999499952516934	WITHOUT_CLASSIFICATION	5.0004748306724254E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999980011231091	WITHOUT_CLASSIFICATION	1.998876890868244E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996229645500236	WITHOUT_CLASSIFICATION	3.7703544997637545E-4	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999988580484457	WITHOUT_CLASSIFICATION	1.141951554222805E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999958957661338	WITHOUT_CLASSIFICATION	4.1042338662249265E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999958957661338	WITHOUT_CLASSIFICATION	4.1042338662249265E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999963368771652	WITHOUT_CLASSIFICATION	3.663122834797106E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9991426620530677	WITHOUT_CLASSIFICATION	8.573379469323402E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999906423412772	WITHOUT_CLASSIFICATION	9.357658722671943E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997522565608528	WITHOUT_CLASSIFICATION	2.4774343914718924E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999915060040553	WITHOUT_CLASSIFICATION	8.4939959446518E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999954253936494	WITHOUT_CLASSIFICATION	4.57460635068637E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999968374350898	WITHOUT_CLASSIFICATION	3.162564910063067E-6	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999727294027184	WITHOUT_CLASSIFICATION	2.727059728161075E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999822517462784	WITHOUT_CLASSIFICATION	1.7748253721588332E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999851721896575	WITHOUT_CLASSIFICATION	1.4827810342365994E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999755503524936	WITHOUT_CLASSIFICATION	2.444964750639371E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999755503524936	WITHOUT_CLASSIFICATION	2.444964750639371E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999900952024	WITHOUT_CLASSIFICATION	9.904797605791183E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999467397815923	WITHOUT_CLASSIFICATION	5.326021840761847E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999991710440364	WITHOUT_CLASSIFICATION	8.289559636077895E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9994100947075011	WITHOUT_CLASSIFICATION	5.899052924989112E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.99999827070381	WITHOUT_CLASSIFICATION	1.7292961901084055E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999913892782113	WITHOUT_CLASSIFICATION	8.610721788784116E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999697921374543	WITHOUT_CLASSIFICATION	3.020786254571609E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999880098767039	WITHOUT_CLASSIFICATION	1.1990123296191755E-5	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999919006399328	WITHOUT_CLASSIFICATION	8.09936006717376E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999664339986418	WITHOUT_CLASSIFICATION	3.356600135819195E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999531015685009	WITHOUT_CLASSIFICATION	4.689843149913525E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494973943287	WITHOUT_CLASSIFICATION	5.050260567123489E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999412969800495	WITHOUT_CLASSIFICATION	5.870301995058891E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999907994821335	WITHOUT_CLASSIFICATION	9.200517866414068E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993031588519644	WITHOUT_CLASSIFICATION	6.968411480355077E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991964740271	WITHOUT_CLASSIFICATION	8.035259729035734E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998148367228263	WITHOUT_CLASSIFICATION	1.8516327717370786E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9993528790394047	WITHOUT_CLASSIFICATION	6.471209605952805E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999974071672765	WITHOUT_CLASSIFICATION	2.5928327235893153E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999992845508081	WITHOUT_CLASSIFICATION	7.154491920259977E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9992722989403761	WITHOUT_CLASSIFICATION	7.277010596240475E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999898559595795	WITHOUT_CLASSIFICATION	1.0144040420496797E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9994511310129793	WITHOUT_CLASSIFICATION	5.488689870206813E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999862159247399	WITHOUT_CLASSIFICATION	1.37840752601915E-5	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999495388584536	WITHOUT_CLASSIFICATION	5.046114154633779E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999865491541011	WITHOUT_CLASSIFICATION	1.3450845898769762E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689234296115	WITHOUT_CLASSIFICATION	3.1076570388475986E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999948174902106	WITHOUT_CLASSIFICATION	5.182509789425299E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999399597579212	WITHOUT_CLASSIFICATION	6.004024207879465E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605768721475	WITHOUT_CLASSIFICATION	3.942312785247887E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9995874351431188	WITHOUT_CLASSIFICATION	4.125648568811388E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979868558643	WITHOUT_CLASSIFICATION	2.0131441357541392E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999806779667986	WITHOUT_CLASSIFICATION	1.932203320139261E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999985748934704	WITHOUT_CLASSIFICATION	1.425106529587748E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999618426292367	WITHOUT_CLASSIFICATION	3.8157370763385746E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999995863472037	WITHOUT_CLASSIFICATION	4.136527963024886E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999660170619761	WITHOUT_CLASSIFICATION	3.398293802388444E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999886783217868	WITHOUT_CLASSIFICATION	1.1321678213119719E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999849299281431	WITHOUT_CLASSIFICATION	1.5070071856897578E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999364611138585	WITHOUT_CLASSIFICATION	6.353888614147525E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998346920274713	WITHOUT_CLASSIFICATION	1.6530797252871368E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999903596219127	WITHOUT_CLASSIFICATION	9.640378087338467E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999910906939581	WITHOUT_CLASSIFICATION	8.90930604189016E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999493769136146	WITHOUT_CLASSIFICATION	5.0623086385504544E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998787124707856	WITHOUT_CLASSIFICATION	1.2128752921445101E-4	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999915536927053	WITHOUT_CLASSIFICATION	8.446307294793412E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999745611189566	WITHOUT_CLASSIFICATION	2.543888104343621E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999978797535011	WITHOUT_CLASSIFICATION	2.120246498911788E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999916211470259	WITHOUT_CLASSIFICATION	8.378852974114572E-6	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9997049232304	WITHOUT_CLASSIFICATION	2.9507676959985793E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991631037318	WITHOUT_CLASSIFICATION	8.368962681996616E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999915530499064	WITHOUT_CLASSIFICATION	8.446950093689688E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999837043191717	WITHOUT_CLASSIFICATION	1.6295680828372573E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999371090524949	WITHOUT_CLASSIFICATION	6.289094750516697E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999837043191717	WITHOUT_CLASSIFICATION	1.6295680828372573E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999974730662331	WITHOUT_CLASSIFICATION	2.5269337668198544E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999968905291237	WITHOUT_CLASSIFICATION	3.109470876420102E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999807177384158	WITHOUT_CLASSIFICATION	1.9282261584274182E-5	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999938220716029	WITHOUT_CLASSIFICATION	6.177928397067439E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999881633494863	WITHOUT_CLASSIFICATION	1.1836650513774764E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999807177384158	WITHOUT_CLASSIFICATION	1.9282261584274182E-5	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999948755510514	WITHOUT_CLASSIFICATION	5.124448948517538E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9992854538166	WITHOUT_CLASSIFICATION	7.1454618339996E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999764504007156	WITHOUT_CLASSIFICATION	2.354959928440514E-5	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999868861585611	WITHOUT_CLASSIFICATION	1.3113841438843496E-5	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999869153214067	WITHOUT_CLASSIFICATION	1.3084678593151843E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999950486862782	WITHOUT_CLASSIFICATION	4.95131372182349E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999986505703498	WITHOUT_CLASSIFICATION	1.349429650183875E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998594427766184	WITHOUT_CLASSIFICATION	1.4055722338151454E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999947198116259	WITHOUT_CLASSIFICATION	5.280188374020977E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999958350955277	WITHOUT_CLASSIFICATION	4.164904472355398E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999291010485744	WITHOUT_CLASSIFICATION	7.089895142562727E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999967038153748	WITHOUT_CLASSIFICATION	3.2961846251572694E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999382871805	WITHOUT_CLASSIFICATION	6.171281950733939E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9996171219186112	WITHOUT_CLASSIFICATION	3.8287808138886577E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.99999763163566	WITHOUT_CLASSIFICATION	2.368364339991433E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9992808928312612	WITHOUT_CLASSIFICATION	7.191071687388009E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9979430204515366	WITHOUT_CLASSIFICATION	0.0020569795484633936	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999522163518123	WITHOUT_CLASSIFICATION	4.778364818760916E-5	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999498810396461	WITHOUT_CLASSIFICATION	5.011896035390763E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998568627480952	WITHOUT_CLASSIFICATION	1.4313725190493178E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996177962907452	WITHOUT_CLASSIFICATION	3.822037092548301E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9998413717470834	WITHOUT_CLASSIFICATION	1.5862825291653815E-4	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9994853192210974	WITHOUT_CLASSIFICATION	5.146807789025484E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999681999938782	WITHOUT_CLASSIFICATION	3.180000612180471E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999990811436354	WITHOUT_CLASSIFICATION	9.188563645761718E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999909670393301	WITHOUT_CLASSIFICATION	9.032960669912124E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9998941930853927	WITHOUT_CLASSIFICATION	1.058069146073537E-4	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998381743382535	WITHOUT_CLASSIFICATION	1.6182566174658149E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999861456288328	WITHOUT_CLASSIFICATION	1.3854371167247348E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993127017299485	WITHOUT_CLASSIFICATION	6.872982700515235E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998568627480952	WITHOUT_CLASSIFICATION	1.4313725190493178E-4	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999879690827669	WITHOUT_CLASSIFICATION	1.2030917233146505E-5	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994548862488367	WITHOUT_CLASSIFICATION	5.451137511633149E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9981173223846268	WITHOUT_CLASSIFICATION	0.0018826776153731664	TEST
//special case	WITHOUT_CLASSIFICATION	0.9998779443127966	WITHOUT_CLASSIFICATION	1.220556872034116E-4	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999869198177042	WITHOUT_CLASSIFICATION	1.3080182295913149E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998873559040465	WITHOUT_CLASSIFICATION	1.1264409595347334E-4	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998299130121089	WITHOUT_CLASSIFICATION	1.7008698789114788E-4	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999498430258581	WITHOUT_CLASSIFICATION	5.015697414195018E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999058189085216	WITHOUT_CLASSIFICATION	9.418109147842607E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9995185357809604	WITHOUT_CLASSIFICATION	4.814642190396425E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999219934545839	WITHOUT_CLASSIFICATION	7.800654541612788E-5	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998293965243562	WITHOUT_CLASSIFICATION	1.7060347564378664E-4	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999935991856642	WITHOUT_CLASSIFICATION	6.40081433577465E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.99973525057498	WITHOUT_CLASSIFICATION	2.6474942501991845E-4	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997101884412866	WITHOUT_CLASSIFICATION	2.8981155871343734E-4	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999914709604448	WITHOUT_CLASSIFICATION	8.52903955514639E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998445658224275	WITHOUT_CLASSIFICATION	1.554341775723626E-4	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998361586511573	WITHOUT_CLASSIFICATION	1.638413488426694E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996318880000921	WITHOUT_CLASSIFICATION	3.681119999079146E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999647881470874	WITHOUT_CLASSIFICATION	3.5211852912537816E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999753661600681	WITHOUT_CLASSIFICATION	2.463383993193752E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999753661600681	WITHOUT_CLASSIFICATION	2.463383993193752E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999971470658141	WITHOUT_CLASSIFICATION	2.8529341859368384E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999753661600681	WITHOUT_CLASSIFICATION	2.463383993193752E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999753661600681	WITHOUT_CLASSIFICATION	2.463383993193752E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998618157419846	WITHOUT_CLASSIFICATION	1.3818425801532532E-4	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9941420950984771	WITHOUT_CLASSIFICATION	0.005857904901522961	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999496189003156	WITHOUT_CLASSIFICATION	5.0381099684324974E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999496189003156	WITHOUT_CLASSIFICATION	5.0381099684324974E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.99999570543967	WITHOUT_CLASSIFICATION	4.2945603300824055E-6	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999428881723678	WITHOUT_CLASSIFICATION	5.711182763229145E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995998747754784	WITHOUT_CLASSIFICATION	4.001252245215865E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9986562810139782	WITHOUT_CLASSIFICATION	0.0013437189860218298	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998718641993917	WITHOUT_CLASSIFICATION	1.2813580060830595E-4	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9993861828061079	WITHOUT_CLASSIFICATION	6.13817193892146E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9982137993868571	WITHOUT_CLASSIFICATION	0.0017862006131430345	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998972859499204	WITHOUT_CLASSIFICATION	1.027140500795796E-4	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9987331303942562	WITHOUT_CLASSIFICATION	0.0012668696057438014	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9990498663214861	WITHOUT_CLASSIFICATION	9.501336785138252E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9989583913924622	WITHOUT_CLASSIFICATION	0.0010416086075377535	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9956556767945288	WITHOUT_CLASSIFICATION	0.004344323205471122	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999608123413221	WITHOUT_CLASSIFICATION	3.9187658677962124E-5	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998188910958946	WITHOUT_CLASSIFICATION	1.8110890410541068E-4	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9989332390868566	WITHOUT_CLASSIFICATION	0.0010667609131434148	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9989939728730945	WITHOUT_CLASSIFICATION	0.0010060271269055278	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999974132903867	WITHOUT_CLASSIFICATION	2.5867096132329016E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999825338078243	WITHOUT_CLASSIFICATION	1.746619217572011E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999608123413221	WITHOUT_CLASSIFICATION	3.9187658677962124E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9996177962907452	WITHOUT_CLASSIFICATION	3.822037092548301E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9998367125911891	WITHOUT_CLASSIFICATION	1.6328740881089299E-4	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999848155748855	WITHOUT_CLASSIFICATION	1.5184425114403697E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999827167693031	WITHOUT_CLASSIFICATION	1.7283230696921978E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9998489557125562	WITHOUT_CLASSIFICATION	1.51044287443912E-4	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999990245783043	WITHOUT_CLASSIFICATION	9.754216957044476E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998865138653361	WITHOUT_CLASSIFICATION	1.1348613466381374E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999759975261889	WITHOUT_CLASSIFICATION	2.4002473811083502E-5	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999901877457162	WITHOUT_CLASSIFICATION	9.812254283722774E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999045034739847	WITHOUT_CLASSIFICATION	9.549652601532165E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998417580344928	WITHOUT_CLASSIFICATION	1.5824196550710967E-4	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999440239304039	WITHOUT_CLASSIFICATION	5.597606959612915E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999963279111403	WITHOUT_CLASSIFICATION	3.6720888596751377E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999978290468796	WITHOUT_CLASSIFICATION	2.1709531203907557E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9996433697631364	WITHOUT_CLASSIFICATION	3.566302368635823E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999822872296034	WITHOUT_CLASSIFICATION	1.771277039669602E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999771913237503	WITHOUT_CLASSIFICATION	2.2808676249666866E-5	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999672567804455	WITHOUT_CLASSIFICATION	3.2743219554499996E-5	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999722562131738	WITHOUT_CLASSIFICATION	2.7743786826227618E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998786144067591	WITHOUT_CLASSIFICATION	1.2138559324094324E-4	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996666210865992	WITHOUT_CLASSIFICATION	3.333789134007856E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9995665488447747	WITHOUT_CLASSIFICATION	4.3345115522533536E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999925200993	WITHOUT_CLASSIFICATION	7.479900690657023E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999901877457162	WITHOUT_CLASSIFICATION	9.812254283722774E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998360749420885	WITHOUT_CLASSIFICATION	1.6392505791153078E-4	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9998357707960865	WITHOUT_CLASSIFICATION	1.6422920391348137E-4	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9992048676920005	WITHOUT_CLASSIFICATION	7.951323079994323E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999432046136425	WITHOUT_CLASSIFICATION	5.679538635747312E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9998344635051297	WITHOUT_CLASSIFICATION	1.6553649487024833E-4	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.999915379078169	WITHOUT_CLASSIFICATION	8.462092183106699E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999885630593256	WITHOUT_CLASSIFICATION	1.143694067435779E-5	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.999915379078169	WITHOUT_CLASSIFICATION	8.462092183106699E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9998426387635713	WITHOUT_CLASSIFICATION	1.5736123642873872E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689130835698	WITHOUT_CLASSIFICATION	3.108691643022111E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999862639026579	WITHOUT_CLASSIFICATION	1.3736097342067577E-5	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998044510172199	WITHOUT_CLASSIFICATION	1.9554898278000533E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9987862642541756	WITHOUT_CLASSIFICATION	0.001213735745824389	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998515141572997	WITHOUT_CLASSIFICATION	1.4848584270025014E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9993005121222752	WITHOUT_CLASSIFICATION	6.994878777247399E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689130835698	WITHOUT_CLASSIFICATION	3.108691643022111E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999352144027602	WITHOUT_CLASSIFICATION	6.478559723982793E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9997356400179076	WITHOUT_CLASSIFICATION	2.6435998209234157E-4	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999536419089298	WITHOUT_CLASSIFICATION	4.635809107021337E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999473945464793	WITHOUT_CLASSIFICATION	5.260545352081104E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999961430832076	WITHOUT_CLASSIFICATION	3.856916792364044E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999474872724583	WITHOUT_CLASSIFICATION	5.251272754162045E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999916993682713	WITHOUT_CLASSIFICATION	8.300631728806278E-6	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958339769144	WITHOUT_CLASSIFICATION	4.166023085601971E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999558032745618	WITHOUT_CLASSIFICATION	4.419672543826913E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567848077898	WITHOUT_CLASSIFICATION	4.321519221022493E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567848077898	WITHOUT_CLASSIFICATION	4.321519221022493E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567848077898	WITHOUT_CLASSIFICATION	4.321519221022493E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959794617573	WITHOUT_CLASSIFICATION	4.020538242689651E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959794617573	WITHOUT_CLASSIFICATION	4.020538242689651E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9949476636433883	WITHOUT_CLASSIFICATION	0.005052336356611732	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999991219096221	WITHOUT_CLASSIFICATION	8.780903779031556E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999885181075663	WITHOUT_CLASSIFICATION	1.1481892433759127E-5	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999896553480045	WITHOUT_CLASSIFICATION	1.0344651995469698E-5	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999309113227005	WITHOUT_CLASSIFICATION	6.908867729952293E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495581573612	WITHOUT_CLASSIFICATION	5.0441842638906046E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512377631083	WITHOUT_CLASSIFICATION	4.876223689175203E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999787559957615	WITHOUT_CLASSIFICATION	2.1244004238457833E-5	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548452574938	WITHOUT_CLASSIFICATION	4.515474250629527E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495581573612	WITHOUT_CLASSIFICATION	5.0441842638906046E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512377631083	WITHOUT_CLASSIFICATION	4.876223689175203E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999791630068431	WITHOUT_CLASSIFICATION	2.0836993156935525E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995792723440915	WITHOUT_CLASSIFICATION	4.207276559084359E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999911590949944	WITHOUT_CLASSIFICATION	8.84090500552344E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999648558760353	WITHOUT_CLASSIFICATION	3.514412396474928E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9996471997574522	WITHOUT_CLASSIFICATION	3.5280024254776677E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9994016270215909	WITHOUT_CLASSIFICATION	5.98372978409268E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999969297369491	WITHOUT_CLASSIFICATION	3.070263050905737E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999778103207289	WITHOUT_CLASSIFICATION	2.21896792711539E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998180909616595	WITHOUT_CLASSIFICATION	1.8190903834048707E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9994175310356046	WITHOUT_CLASSIFICATION	5.82468964395269E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999737816291415	WITHOUT_CLASSIFICATION	2.6218370858512813E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999982538419459	WITHOUT_CLASSIFICATION	1.7461580540924118E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996660998401647	WITHOUT_CLASSIFICATION	3.339001598353084E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9951889820237335	WITHOUT_CLASSIFICATION	0.00481101797626649	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999554070766535	WITHOUT_CLASSIFICATION	4.459292334642262E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998886858338394	WITHOUT_CLASSIFICATION	1.1131416616064981E-4	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999515791531616	WITHOUT_CLASSIFICATION	4.84208468385258E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999462909215346	WITHOUT_CLASSIFICATION	5.3709078465361836E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9979146055210616	WITHOUT_CLASSIFICATION	0.002085394478938427	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999940941236058	WITHOUT_CLASSIFICATION	5.905876394139052E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999946683965675	WITHOUT_CLASSIFICATION	5.331603432492137E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9993356551263366	WITHOUT_CLASSIFICATION	6.643448736634632E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.99988162161722	WITHOUT_CLASSIFICATION	1.1837838277993112E-4	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999949403246645	WITHOUT_CLASSIFICATION	5.059675335497177E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999302264193085	WITHOUT_CLASSIFICATION	6.977358069151274E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992860554549198	WITHOUT_CLASSIFICATION	7.139445450803294E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992860554549198	WITHOUT_CLASSIFICATION	7.139445450803294E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999284722872658	WITHOUT_CLASSIFICATION	7.152771273422552E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999902887984367	WITHOUT_CLASSIFICATION	9.711201563395602E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999861949736388	WITHOUT_CLASSIFICATION	1.3805026361205262E-4	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999934403574052	WITHOUT_CLASSIFICATION	6.559642594794475E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998235902816995	WITHOUT_CLASSIFICATION	1.7640971830038232E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9994069739725516	WITHOUT_CLASSIFICATION	5.930260274483145E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999954087090981	WITHOUT_CLASSIFICATION	4.591290901856477E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999936158129564	WITHOUT_CLASSIFICATION	6.384187043613206E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9998914223815233	WITHOUT_CLASSIFICATION	1.0857761847670133E-4	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992379612192474	WITHOUT_CLASSIFICATION	7.62038780752646E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9963818105913342	WITHOUT_CLASSIFICATION	0.003618189408665709	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999913943543465	WITHOUT_CLASSIFICATION	8.60564565342331E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999968361875041	WITHOUT_CLASSIFICATION	3.163812495886722E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999144387364062	WITHOUT_CLASSIFICATION	8.556126359384504E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999185568493221	WITHOUT_CLASSIFICATION	8.144315067793443E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999948587295374	WITHOUT_CLASSIFICATION	5.141270462538103E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9963818105913342	WITHOUT_CLASSIFICATION	0.003618189408665709	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9963818105913342	WITHOUT_CLASSIFICATION	0.003618189408665709	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9959911895076029	WITHOUT_CLASSIFICATION	0.004008810492397128	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999873595864286	WITHOUT_CLASSIFICATION	1.264041357138228E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9919804063671159	WITHOUT_CLASSIFICATION	0.008019593632884134	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999989943755191	WITHOUT_CLASSIFICATION	1.0056244808998031E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999620343784809	WITHOUT_CLASSIFICATION	3.796562151908513E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998886858338394	WITHOUT_CLASSIFICATION	1.1131416616064981E-4	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9990224723965216	WITHOUT_CLASSIFICATION	9.775276034783016E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999897065293879	WITHOUT_CLASSIFICATION	1.0293470612113504E-5	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999723525545259	WITHOUT_CLASSIFICATION	2.764744547410395E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999946576535845	WITHOUT_CLASSIFICATION	5.342346415519548E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999915834659568	WITHOUT_CLASSIFICATION	8.416534043157648E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585581969497	WITHOUT_CLASSIFICATION	4.144180305033895E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999753675570092	WITHOUT_CLASSIFICATION	2.4632442990767282E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999753675570092	WITHOUT_CLASSIFICATION	2.4632442990767282E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999753675570092	WITHOUT_CLASSIFICATION	2.4632442990767282E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999753675570092	WITHOUT_CLASSIFICATION	2.4632442990767282E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519189021068	WITHOUT_CLASSIFICATION	4.80810978931828E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9965402205214848	WITHOUT_CLASSIFICATION	0.0034597794785152835	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999173994869055	WITHOUT_CLASSIFICATION	8.260051309442519E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998114331557861	WITHOUT_CLASSIFICATION	1.8856684421396358E-4	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999949420272667	WITHOUT_CLASSIFICATION	5.057972733312365E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999540646857005	WITHOUT_CLASSIFICATION	4.593531429959305E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999643896256143	WITHOUT_CLASSIFICATION	3.5610374385797686E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999836441759012	WITHOUT_CLASSIFICATION	1.6355824098664125E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999489037114557	WITHOUT_CLASSIFICATION	5.109628854424794E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999514530616123	WITHOUT_CLASSIFICATION	4.8546938387860654E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999166972876931	WITHOUT_CLASSIFICATION	8.33027123068919E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999970204169294	WITHOUT_CLASSIFICATION	2.9795830706000764E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998515082659639	WITHOUT_CLASSIFICATION	1.4849173403608517E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999923074613466	WITHOUT_CLASSIFICATION	7.692538653445683E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999923074613466	WITHOUT_CLASSIFICATION	7.692538653445683E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999962175018032	WITHOUT_CLASSIFICATION	3.782498196796638E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.999976939482294	WITHOUT_CLASSIFICATION	2.306051770595985E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999995623193195	WITHOUT_CLASSIFICATION	4.376806805092861E-6	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493899482716	WITHOUT_CLASSIFICATION	5.061005172835574E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999902321874671	WITHOUT_CLASSIFICATION	9.767812532972915E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567848077898	WITHOUT_CLASSIFICATION	4.321519221022493E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999947807208521	WITHOUT_CLASSIFICATION	5.2192791478527225E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999988174184641	WITHOUT_CLASSIFICATION	1.1825815358985545E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999821543643876	WITHOUT_CLASSIFICATION	1.7845635612306775E-5	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999057934571104	WITHOUT_CLASSIFICATION	9.420654288964608E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998872650940595	WITHOUT_CLASSIFICATION	1.1273490594063484E-4	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999810160144739	WITHOUT_CLASSIFICATION	1.8983985526078484E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999985086035479	WITHOUT_CLASSIFICATION	1.4913964520969633E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996720040771802	WITHOUT_CLASSIFICATION	3.279959228198865E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999635595981072	WITHOUT_CLASSIFICATION	3.644040189279745E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999560159094135	WITHOUT_CLASSIFICATION	4.398409058649357E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999950991141543	WITHOUT_CLASSIFICATION	4.900885845692765E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999816975909745	WITHOUT_CLASSIFICATION	1.8302409025424515E-5	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999568312261051	WITHOUT_CLASSIFICATION	4.316877389488071E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999968522137593	WITHOUT_CLASSIFICATION	3.1477862406948476E-6	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999590646652934	WITHOUT_CLASSIFICATION	4.093533470666879E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999953211569382	WITHOUT_CLASSIFICATION	4.678843061793302E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999540644198803	WITHOUT_CLASSIFICATION	4.59355801196147E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999307959796984	WITHOUT_CLASSIFICATION	6.92040203016834E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9995872051710013	WITHOUT_CLASSIFICATION	4.1279482899861137E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998073919877252	WITHOUT_CLASSIFICATION	1.926080122747608E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998577671208971	WITHOUT_CLASSIFICATION	1.4223287910276872E-4	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998893551915	WITHOUT_CLASSIFICATION	1.1064480856533827E-7	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9992406491509273	WITHOUT_CLASSIFICATION	7.593508490727027E-4	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.99904943578831	WITHOUT_CLASSIFICATION	9.505642116901616E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999691691903082	WITHOUT_CLASSIFICATION	3.083080969169479E-5	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9930362431278293	WITHOUT_CLASSIFICATION	0.006963756872170744	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989879979072	WITHOUT_CLASSIFICATION	1.0120020927620622E-6	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999980264152241	WITHOUT_CLASSIFICATION	1.9735847759011774E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999699300626793	WITHOUT_CLASSIFICATION	3.0069937320693314E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997097612038816	WITHOUT_CLASSIFICATION	2.9023879611841935E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999729792803654	WITHOUT_CLASSIFICATION	2.70207196345993E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999758914493212	WITHOUT_CLASSIFICATION	2.4108550678887852E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997403476735702	WITHOUT_CLASSIFICATION	2.596523264297533E-4	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999794903345677	WITHOUT_CLASSIFICATION	2.0509665432403898E-5	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999363198980337	WITHOUT_CLASSIFICATION	6.368010196635105E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9989426110078115	WITHOUT_CLASSIFICATION	0.0010573889921884892	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999089169804877	WITHOUT_CLASSIFICATION	9.108301951242784E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998724028953535	WITHOUT_CLASSIFICATION	1.2759710464650982E-4	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999734336110873	WITHOUT_CLASSIFICATION	2.6566388912785612E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9985726505653447	WITHOUT_CLASSIFICATION	0.001427349434655259	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999848637690678	WITHOUT_CLASSIFICATION	1.5136230932196062E-4	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9917203249759802	WITHOUT_CLASSIFICATION	0.008279675024019755	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999718340759658	WITHOUT_CLASSIFICATION	2.8165924034216766E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9953585090625356	WITHOUT_CLASSIFICATION	0.004641490937464328	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999859806936158	WITHOUT_CLASSIFICATION	1.4019306384199817E-4	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999889307216115	WITHOUT_CLASSIFICATION	1.1069278388452758E-5	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993227337548028	WITHOUT_CLASSIFICATION	6.77266245197029E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999055229825646	WITHOUT_CLASSIFICATION	9.447701743532171E-5	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999684071301853	WITHOUT_CLASSIFICATION	3.1592869814679266E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997382023834458	WITHOUT_CLASSIFICATION	2.617976165542296E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999826418002548	WITHOUT_CLASSIFICATION	1.7358199745273722E-5	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998705790848101	WITHOUT_CLASSIFICATION	1.2942091518995923E-4	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999933402706997	WITHOUT_CLASSIFICATION	6.659729300251728E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9997975049975416	WITHOUT_CLASSIFICATION	2.0249500245837489E-4	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999791840765422	WITHOUT_CLASSIFICATION	2.0815923457787164E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999125554551435	WITHOUT_CLASSIFICATION	8.744454485656331E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996205743777	WITHOUT_CLASSIFICATION	3.794256222513973E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9994232519535423	WITHOUT_CLASSIFICATION	5.767480464577557E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996837619057924	WITHOUT_CLASSIFICATION	3.1623809420748675E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999916609358265	WITHOUT_CLASSIFICATION	8.339064173542947E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997137289046827	WITHOUT_CLASSIFICATION	2.862710953173279E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999980212206673	WITHOUT_CLASSIFICATION	1.9787793326476245E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999450876672445	WITHOUT_CLASSIFICATION	5.491233275534298E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999978594500711	WITHOUT_CLASSIFICATION	2.1405499289417147E-6	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999913015883766	WITHOUT_CLASSIFICATION	8.69841162347053E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998405857014359	WITHOUT_CLASSIFICATION	1.5941429856416076E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999881952156603	WITHOUT_CLASSIFICATION	1.1804784339737702E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999896316827153	WITHOUT_CLASSIFICATION	1.0368317284678009E-5	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999853506065431	WITHOUT_CLASSIFICATION	1.4649393456945625E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9998470889698009	WITHOUT_CLASSIFICATION	1.5291103019914967E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999972277370948	WITHOUT_CLASSIFICATION	2.7722629053360173E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997683471125656	WITHOUT_CLASSIFICATION	2.316528874343972E-4	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997494710654214	WITHOUT_CLASSIFICATION	2.505289345785884E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9992808928312612	WITHOUT_CLASSIFICATION	7.191071687388009E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996609302244595	WITHOUT_CLASSIFICATION	3.390697755405572E-4	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999894835033328	WITHOUT_CLASSIFICATION	1.0516496667160614E-5	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999739862764989	WITHOUT_CLASSIFICATION	2.601372350113092E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.999952478571786	WITHOUT_CLASSIFICATION	4.7521428213999376E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998944133863147	WITHOUT_CLASSIFICATION	1.0558661368524904E-4	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9994182985010501	WITHOUT_CLASSIFICATION	5.817014989499057E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997198600966922	WITHOUT_CLASSIFICATION	2.801399033077204E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998646235661676	WITHOUT_CLASSIFICATION	1.353764338325304E-4	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9995616499592075	WITHOUT_CLASSIFICATION	4.3835004079245167E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9995922705391516	WITHOUT_CLASSIFICATION	4.0772946084842665E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998573396416717	WITHOUT_CLASSIFICATION	1.4266035832834472E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.99979515601534	WITHOUT_CLASSIFICATION	2.0484398466007826E-4	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999480565872204	WITHOUT_CLASSIFICATION	5.19434127795914E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999491683056049	WITHOUT_CLASSIFICATION	5.08316943950578E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999692949640218	WITHOUT_CLASSIFICATION	3.0705035978255455E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9996267991661882	WITHOUT_CLASSIFICATION	3.7320083381178835E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999913700386404	WITHOUT_CLASSIFICATION	8.629961359709003E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999064147468575	WITHOUT_CLASSIFICATION	9.35852531425653E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999064147468575	WITHOUT_CLASSIFICATION	9.35852531425653E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999847768738625	WITHOUT_CLASSIFICATION	1.5223126137505405E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9996575238265506	WITHOUT_CLASSIFICATION	3.4247617344942884E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999500263702928	WITHOUT_CLASSIFICATION	4.997362970712928E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999794783880985	WITHOUT_CLASSIFICATION	2.052161190151753E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999361649549988	WITHOUT_CLASSIFICATION	6.383504500122645E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9992951729522105	WITHOUT_CLASSIFICATION	7.048270477893952E-4	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9993509828088649	WITHOUT_CLASSIFICATION	6.490171911350256E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999380732585613	WITHOUT_CLASSIFICATION	6.192674143873048E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9977880170067472	WITHOUT_CLASSIFICATION	0.0022119829932527296	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999878322696277	WITHOUT_CLASSIFICATION	1.2167730372294517E-5	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999910569336153	WITHOUT_CLASSIFICATION	8.943066384677873E-6	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998294050194685	WITHOUT_CLASSIFICATION	1.7059498053143191E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999873625063805	WITHOUT_CLASSIFICATION	1.2637493619513533E-5	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999911927304809	WITHOUT_CLASSIFICATION	8.80726951908224E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9997741696406129	WITHOUT_CLASSIFICATION	2.258303593870833E-4	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999326134301861	WITHOUT_CLASSIFICATION	6.738656981386116E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999326134301861	WITHOUT_CLASSIFICATION	6.738656981386116E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999949768658734	WITHOUT_CLASSIFICATION	5.023134126645153E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998180570188647	WITHOUT_CLASSIFICATION	1.8194298113526015E-4	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999861538744906	WITHOUT_CLASSIFICATION	1.3846125509397345E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999813178521623	WITHOUT_CLASSIFICATION	1.868214783777247E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999910364926671	WITHOUT_CLASSIFICATION	8.96350733291026E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999765304619198	WITHOUT_CLASSIFICATION	2.3469538080157083E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999765304619198	WITHOUT_CLASSIFICATION	2.3469538080157083E-5	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999780482640482	WITHOUT_CLASSIFICATION	2.1951735951749304E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999715736580541	WITHOUT_CLASSIFICATION	2.8426341945901474E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998799816145941	WITHOUT_CLASSIFICATION	1.2001838540595607E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999995667143342	WITHOUT_CLASSIFICATION	4.3328566582192184E-7	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999652428024131	WITHOUT_CLASSIFICATION	3.4757197586901796E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999974600786777	WITHOUT_CLASSIFICATION	2.5399213222089745E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999906582910955	WITHOUT_CLASSIFICATION	9.341708904512252E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999975740962501	WITHOUT_CLASSIFICATION	2.4259037498877306E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999030396562281	WITHOUT_CLASSIFICATION	9.69603437718758E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999917567003135	WITHOUT_CLASSIFICATION	8.243299686496824E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999624759524359	WITHOUT_CLASSIFICATION	3.7524047563956444E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9897425843783626	WITHOUT_CLASSIFICATION	0.010257415621637414	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999776073524864	WITHOUT_CLASSIFICATION	2.2392647513541756E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993031588519644	WITHOUT_CLASSIFICATION	6.968411480355077E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998608757778746	WITHOUT_CLASSIFICATION	1.3912422212526574E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999127530549444	WITHOUT_CLASSIFICATION	8.724694505552259E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997927132224838	WITHOUT_CLASSIFICATION	2.0728677751621815E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999743342826002	WITHOUT_CLASSIFICATION	2.5665717399791203E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999699615192381	WITHOUT_CLASSIFICATION	3.0038480761947186E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999963076837496	WITHOUT_CLASSIFICATION	3.6923162504131725E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999779674850628	WITHOUT_CLASSIFICATION	2.2032514937195253E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999833976722602	WITHOUT_CLASSIFICATION	1.660232773974263E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999588118253423	WITHOUT_CLASSIFICATION	4.118817465763384E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999626825235738	WITHOUT_CLASSIFICATION	3.731747642618736E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998787055070099	WITHOUT_CLASSIFICATION	1.2129449299023729E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999839131552011	WITHOUT_CLASSIFICATION	1.6086844798857396E-5	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999916313334397	WITHOUT_CLASSIFICATION	8.368666560283142E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989400726346	WITHOUT_CLASSIFICATION	1.0599273654370898E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995522787125135	WITHOUT_CLASSIFICATION	4.4772128748649765E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9998345694144599	WITHOUT_CLASSIFICATION	1.654305855400977E-4	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997963416260863	WITHOUT_CLASSIFICATION	2.0365837391358893E-4	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9970591473787704	WITHOUT_CLASSIFICATION	0.0029408526212295768	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9993799140919213	WITHOUT_CLASSIFICATION	6.200859080787111E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9996723836313584	WITHOUT_CLASSIFICATION	3.276163686416442E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.99992553512867	WITHOUT_CLASSIFICATION	7.446487133008021E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999973165458805	WITHOUT_CLASSIFICATION	2.6834541194445673E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995846756677877	WITHOUT_CLASSIFICATION	4.15324332212276E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999962805105377	WITHOUT_CLASSIFICATION	3.719489462352216E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999896520090502	WITHOUT_CLASSIFICATION	1.0347990949754753E-5	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9995597486543384	WITHOUT_CLASSIFICATION	4.402513456617348E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999015376963587	WITHOUT_CLASSIFICATION	9.846230364124411E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999962836830942	WITHOUT_CLASSIFICATION	3.7163169057959426E-6	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993489323917023	WITHOUT_CLASSIFICATION	6.510676082977106E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995846756677877	WITHOUT_CLASSIFICATION	4.15324332212276E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9988499632896105	WITHOUT_CLASSIFICATION	0.0011500367103895552	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999836369240534	WITHOUT_CLASSIFICATION	1.6363075946610104E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999893269654299	WITHOUT_CLASSIFICATION	1.0673034570158537E-5	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998962475357153	WITHOUT_CLASSIFICATION	1.0375246428482718E-4	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9997457997670327	WITHOUT_CLASSIFICATION	2.5420023296726316E-4	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9997656567483132	WITHOUT_CLASSIFICATION	2.343432516868435E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995336641192166	WITHOUT_CLASSIFICATION	4.663358807833439E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999579325357866	WITHOUT_CLASSIFICATION	4.2067464213324704E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999874283926917	WITHOUT_CLASSIFICATION	1.2571607308218822E-5	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999888857176761	WITHOUT_CLASSIFICATION	1.1114282323895162E-4	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999959396374919	WITHOUT_CLASSIFICATION	4.060362508060323E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999888857176761	WITHOUT_CLASSIFICATION	1.1114282323895162E-4	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999317979616767	WITHOUT_CLASSIFICATION	6.8202038323267E-5	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9992780485273676	WITHOUT_CLASSIFICATION	7.219514726323539E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999317979616767	WITHOUT_CLASSIFICATION	6.8202038323267E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999714732182661	WITHOUT_CLASSIFICATION	2.852678173389475E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999315952465339	WITHOUT_CLASSIFICATION	6.840475346610967E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9994050805516435	WITHOUT_CLASSIFICATION	5.949194483565195E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9994050805516435	WITHOUT_CLASSIFICATION	5.949194483565195E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9992970506167924	WITHOUT_CLASSIFICATION	7.029493832076756E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9993022714134865	WITHOUT_CLASSIFICATION	6.977285865134897E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9992970506167924	WITHOUT_CLASSIFICATION	7.029493832076756E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995637687414324	WITHOUT_CLASSIFICATION	4.3623125856755406E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999816336084001	WITHOUT_CLASSIFICATION	1.8366391599901772E-4	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998402477369974	WITHOUT_CLASSIFICATION	1.5975226300271478E-4	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9992903056018105	WITHOUT_CLASSIFICATION	7.0969439818956E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999578099750128	WITHOUT_CLASSIFICATION	4.219002498720142E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999017684593151	WITHOUT_CLASSIFICATION	9.823154068485584E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999885936272082	WITHOUT_CLASSIFICATION	1.1406372791817548E-5	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9994008565132502	WITHOUT_CLASSIFICATION	5.991434867498788E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999783157823522	WITHOUT_CLASSIFICATION	2.1684217647887717E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999731249745218	WITHOUT_CLASSIFICATION	2.6875025478205645E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999894883182714	WITHOUT_CLASSIFICATION	1.0511681728562185E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999929225289232	WITHOUT_CLASSIFICATION	7.077471076741044E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999969375008386	WITHOUT_CLASSIFICATION	3.062499161398125E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999888646581122	WITHOUT_CLASSIFICATION	1.1135341887787015E-5	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9996289728240814	WITHOUT_CLASSIFICATION	3.7102717591867954E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998350542820444	WITHOUT_CLASSIFICATION	1.6494571795560962E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999524503061015	WITHOUT_CLASSIFICATION	4.754969389858691E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9995811307282478	WITHOUT_CLASSIFICATION	4.1886927175216135E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999002957179969	WITHOUT_CLASSIFICATION	9.970428200310244E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998551926484592	WITHOUT_CLASSIFICATION	1.448073515407718E-4	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999185307738138	WITHOUT_CLASSIFICATION	8.146922618619591E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999720005622179	WITHOUT_CLASSIFICATION	2.7999437782074536E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998402477369974	WITHOUT_CLASSIFICATION	1.5975226300271478E-4	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999765267914235	WITHOUT_CLASSIFICATION	2.3473208576506304E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998509420245916	WITHOUT_CLASSIFICATION	1.490579754085191E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9976004280398117	WITHOUT_CLASSIFICATION	0.002399571960188245	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9998355505603534	WITHOUT_CLASSIFICATION	1.644494396464931E-4	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999935004203969	WITHOUT_CLASSIFICATION	6.499579603163365E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998160424505144	WITHOUT_CLASSIFICATION	1.8395754948571526E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995637687414324	WITHOUT_CLASSIFICATION	4.3623125856755406E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995637687414324	WITHOUT_CLASSIFICATION	4.3623125856755406E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998273513301542	WITHOUT_CLASSIFICATION	1.7264866984565645E-4	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998160424505144	WITHOUT_CLASSIFICATION	1.8395754948571526E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.999849170419631	WITHOUT_CLASSIFICATION	1.5082958036908688E-4	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9998285010664324	WITHOUT_CLASSIFICATION	1.7149893356754826E-4	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9950595797799335	WITHOUT_CLASSIFICATION	0.00494042022006647	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999893784026084	WITHOUT_CLASSIFICATION	1.0621597391729054E-5	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999904206869298	WITHOUT_CLASSIFICATION	9.579313070201698E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999712868968971	WITHOUT_CLASSIFICATION	2.8713103102948702E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996457809390968	WITHOUT_CLASSIFICATION	3.54219060903193E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999916177246799	WITHOUT_CLASSIFICATION	8.38227532011611E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9994008565132502	WITHOUT_CLASSIFICATION	5.991434867498788E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.999835682029729	WITHOUT_CLASSIFICATION	1.64317970271008E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999916177246799	WITHOUT_CLASSIFICATION	8.38227532011611E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962025012386	WITHOUT_CLASSIFICATION	3.7974987614692903E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999988552178108	WITHOUT_CLASSIFICATION	1.1447821891940338E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998788419993985	WITHOUT_CLASSIFICATION	1.2115800060154265E-4	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.999849124231294	WITHOUT_CLASSIFICATION	1.5087576870605874E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999073357286269	WITHOUT_CLASSIFICATION	9.266427137311729E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999979512978655	WITHOUT_CLASSIFICATION	2.0487021343936745E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965026792983	WITHOUT_CLASSIFICATION	3.497320701772207E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999980298857498	WITHOUT_CLASSIFICATION	1.9701142500778675E-6	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999750038301576	WITHOUT_CLASSIFICATION	2.4996169842403422E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.99983758408301	WITHOUT_CLASSIFICATION	1.6241591698995417E-4	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999117716839379	WITHOUT_CLASSIFICATION	8.822831606214203E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999916177246799	WITHOUT_CLASSIFICATION	8.38227532011611E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999073357286269	WITHOUT_CLASSIFICATION	9.266427137311729E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965026792983	WITHOUT_CLASSIFICATION	3.497320701772207E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998515146157128	WITHOUT_CLASSIFICATION	1.4848538428735317E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999975145356456	WITHOUT_CLASSIFICATION	2.485464354429812E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999714389265079	WITHOUT_CLASSIFICATION	2.8561073492109316E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9994660529094581	WITHOUT_CLASSIFICATION	5.339470905419447E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999908136158953	WITHOUT_CLASSIFICATION	9.18638410477485E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999884981078647	WITHOUT_CLASSIFICATION	1.1501892135268894E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962025012386	WITHOUT_CLASSIFICATION	3.7974987614692903E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9992722989403761	WITHOUT_CLASSIFICATION	7.277010596240475E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998351064941519	WITHOUT_CLASSIFICATION	1.6489350584807382E-4	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9987207491473679	WITHOUT_CLASSIFICATION	0.0012792508526321578	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9981078664615675	WITHOUT_CLASSIFICATION	0.0018921335384324753	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9981064492724914	WITHOUT_CLASSIFICATION	0.0018935507275086025	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.999944482869611	WITHOUT_CLASSIFICATION	5.5517130389001365E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999714732182661	WITHOUT_CLASSIFICATION	2.852678173389475E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808842213148	WITHOUT_CLASSIFICATION	1.911577868517378E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999479160705427	WITHOUT_CLASSIFICATION	5.208392945738094E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9993706653646323	WITHOUT_CLASSIFICATION	6.293346353677861E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998617346948987	WITHOUT_CLASSIFICATION	1.3826530510123458E-4	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998385123400464	WITHOUT_CLASSIFICATION	1.6148765995355226E-4	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999937913612087	WITHOUT_CLASSIFICATION	6.208638791356621E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999886512260885	WITHOUT_CLASSIFICATION	1.1348773911499083E-5	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998693634456645	WITHOUT_CLASSIFICATION	1.3063655433552952E-4	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999884981078647	WITHOUT_CLASSIFICATION	1.1501892135268894E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999693248338714	WITHOUT_CLASSIFICATION	3.067516612858817E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9991887692714727	WITHOUT_CLASSIFICATION	8.112307285272147E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999970776174218	WITHOUT_CLASSIFICATION	2.9223825781010373E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998601028888124	WITHOUT_CLASSIFICATION	1.3989711118763998E-4	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9995625776214018	WITHOUT_CLASSIFICATION	4.374223785982898E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999947440884477	WITHOUT_CLASSIFICATION	5.255911552312532E-5	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998675672183653	WITHOUT_CLASSIFICATION	1.3243278163479238E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998602045236001	WITHOUT_CLASSIFICATION	1.3979547639980224E-4	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997016515247925	WITHOUT_CLASSIFICATION	2.9834847520743686E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997546830882096	WITHOUT_CLASSIFICATION	2.4531691179036617E-4	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998453494101972	WITHOUT_CLASSIFICATION	1.5465058980270133E-4	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999803366626049	WITHOUT_CLASSIFICATION	1.966333739511222E-5	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.99996361399979	WITHOUT_CLASSIFICATION	3.6386000210070006E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999893002708843	WITHOUT_CLASSIFICATION	1.069972911578986E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999940958700146	WITHOUT_CLASSIFICATION	5.904129985344407E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999678535199608	WITHOUT_CLASSIFICATION	3.214648003921948E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9983307709157294	WITHOUT_CLASSIFICATION	0.0016692290842705868	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999953582076301	WITHOUT_CLASSIFICATION	4.6417923698888766E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999555345790998	WITHOUT_CLASSIFICATION	4.446542090010391E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999916792798927	WITHOUT_CLASSIFICATION	8.320720107227352E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999514377219827	WITHOUT_CLASSIFICATION	4.8562278017394764E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9946543788130623	WITHOUT_CLASSIFICATION	0.005345621186937723	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9973659438301976	WITHOUT_CLASSIFICATION	0.0026340561698024777	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9986168552766436	WITHOUT_CLASSIFICATION	0.001383144723356406	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999887858337829	WITHOUT_CLASSIFICATION	1.121416621704915E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9995051949271517	WITHOUT_CLASSIFICATION	4.948050728482586E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999190727928398	WITHOUT_CLASSIFICATION	8.092720716018139E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999525149324932	WITHOUT_CLASSIFICATION	4.74850675068817E-5	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999153459383492	WITHOUT_CLASSIFICATION	8.465406165086797E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999792507337117	WITHOUT_CLASSIFICATION	2.0749266288352247E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999946457484282	WITHOUT_CLASSIFICATION	5.35425157182521E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9998721177235697	WITHOUT_CLASSIFICATION	1.2788227643034344E-4	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999495890235511	WITHOUT_CLASSIFICATION	5.041097644879534E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999948113160137	WITHOUT_CLASSIFICATION	5.188683986291597E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9998721177235697	WITHOUT_CLASSIFICATION	1.2788227643034344E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999946457484282	WITHOUT_CLASSIFICATION	5.35425157182521E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999495890235511	WITHOUT_CLASSIFICATION	5.041097644879534E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999530047581494	WITHOUT_CLASSIFICATION	4.699524185056322E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999580819987021	WITHOUT_CLASSIFICATION	4.1918001297881196E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997922105408737	WITHOUT_CLASSIFICATION	2.077894591263012E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999901791619455	WITHOUT_CLASSIFICATION	9.820838054519665E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999984048012661	WITHOUT_CLASSIFICATION	1.5951987338454902E-6	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9982192937794446	WITHOUT_CLASSIFICATION	0.0017807062205553767	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9983755401162052	WITHOUT_CLASSIFICATION	0.0016244598837948183	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.998582690886949	WITHOUT_CLASSIFICATION	0.0014173091130510816	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998742865521638	WITHOUT_CLASSIFICATION	1.2571344783617418E-4	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998860408812033	WITHOUT_CLASSIFICATION	1.1395911879679792E-4	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999886695624177	WITHOUT_CLASSIFICATION	1.1330437582326193E-5	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998044566962752	WITHOUT_CLASSIFICATION	1.9554330372492686E-4	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999485788798206	WITHOUT_CLASSIFICATION	5.142112017937571E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998586484422844	WITHOUT_CLASSIFICATION	1.41351557715598E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999819521376988	WITHOUT_CLASSIFICATION	1.804786230108687E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998672790523696	WITHOUT_CLASSIFICATION	1.3272094763046313E-4	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999679832797611	WITHOUT_CLASSIFICATION	3.201672023889478E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999941347061848	WITHOUT_CLASSIFICATION	5.86529381525276E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999766457090552	WITHOUT_CLASSIFICATION	2.3354290944790494E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999581233867161	WITHOUT_CLASSIFICATION	4.187661328384124E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999372835814759	WITHOUT_CLASSIFICATION	6.271641852407057E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999950032010297	WITHOUT_CLASSIFICATION	4.9967989703238135E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999443871814792	WITHOUT_CLASSIFICATION	5.561281852086452E-5	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999465022816525	WITHOUT_CLASSIFICATION	5.3497718347506E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999581233867161	WITHOUT_CLASSIFICATION	4.187661328384124E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999581233867161	WITHOUT_CLASSIFICATION	4.187661328384124E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999949788676193	WITHOUT_CLASSIFICATION	5.021132380637061E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999949788676193	WITHOUT_CLASSIFICATION	5.021132380637061E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999946465528563	WITHOUT_CLASSIFICATION	5.3534471436973416E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999679832797611	WITHOUT_CLASSIFICATION	3.201672023889478E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997955637026696	WITHOUT_CLASSIFICATION	2.0443629733032817E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999862137590951	WITHOUT_CLASSIFICATION	1.3786240904902068E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996600984688556	WITHOUT_CLASSIFICATION	3.399015311444471E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996600984688556	WITHOUT_CLASSIFICATION	3.399015311444471E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999396446275961	WITHOUT_CLASSIFICATION	6.0355372403952145E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9939687256072597	WITHOUT_CLASSIFICATION	0.0060312743927403755	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999585005522698	WITHOUT_CLASSIFICATION	4.1499447730124924E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998116922098466	WITHOUT_CLASSIFICATION	1.8830779015347788E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993005716117591	WITHOUT_CLASSIFICATION	6.994283882409527E-4	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999728328316	WITHOUT_CLASSIFICATION	2.7167168388267378E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999725674980522	WITHOUT_CLASSIFICATION	2.7432501947774558E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.99847747569283	WITHOUT_CLASSIFICATION	0.0015225243071699654	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9998524348275318	WITHOUT_CLASSIFICATION	1.4756517246827805E-4	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999932209731599	WITHOUT_CLASSIFICATION	6.779026840018067E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998745440662233	WITHOUT_CLASSIFICATION	1.254559337766068E-4	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9989038536049362	WITHOUT_CLASSIFICATION	0.0010961463950638591	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9973898138266676	WITHOUT_CLASSIFICATION	0.002610186173332332	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999845139620265	WITHOUT_CLASSIFICATION	1.5486037973499742E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514552978622	WITHOUT_CLASSIFICATION	4.8544702137866256E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999944822238653	WITHOUT_CLASSIFICATION	5.517776134609161E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998515825184936	WITHOUT_CLASSIFICATION	1.4841748150646884E-4	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999386455074857	WITHOUT_CLASSIFICATION	6.135449251434102E-5	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999987122786155	WITHOUT_CLASSIFICATION	1.2877213845062067E-5	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9989561997946428	WITHOUT_CLASSIFICATION	0.0010438002053571812	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999948357683561	WITHOUT_CLASSIFICATION	5.164231643887479E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999852013444139	WITHOUT_CLASSIFICATION	1.4798655585958394E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999272365442093	WITHOUT_CLASSIFICATION	7.276345579071518E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999817164098326	WITHOUT_CLASSIFICATION	1.8283590167392015E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997016515247925	WITHOUT_CLASSIFICATION	2.9834847520743686E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998719186791276	WITHOUT_CLASSIFICATION	1.2808132087225977E-4	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999981996075132	WITHOUT_CLASSIFICATION	1.8003924867399303E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489736065711	WITHOUT_CLASSIFICATION	5.102639342884547E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9998442873163111	WITHOUT_CLASSIFICATION	1.557126836887722E-4	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9998442873163111	WITHOUT_CLASSIFICATION	1.557126836887722E-4	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999985734818084	WITHOUT_CLASSIFICATION	1.4265181916039278E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999877587746916	WITHOUT_CLASSIFICATION	1.2241225308355415E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999835860482007	WITHOUT_CLASSIFICATION	1.6413951799241842E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999835860482007	WITHOUT_CLASSIFICATION	1.6413951799241842E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998802496238277	WITHOUT_CLASSIFICATION	1.1975037617227958E-4	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999784242643254	WITHOUT_CLASSIFICATION	2.1575735674595845E-4	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999310425166059	WITHOUT_CLASSIFICATION	6.895748339414718E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999620343784809	WITHOUT_CLASSIFICATION	3.796562151908513E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998417580344928	WITHOUT_CLASSIFICATION	1.5824196550710967E-4	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9992929810374148	WITHOUT_CLASSIFICATION	7.070189625852109E-4	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999752369816933	WITHOUT_CLASSIFICATION	2.4763018306715478E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999689412395358	WITHOUT_CLASSIFICATION	3.105876046417457E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999689412395358	WITHOUT_CLASSIFICATION	3.105876046417457E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999864215515544	WITHOUT_CLASSIFICATION	1.3578448445718449E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999030878956734	WITHOUT_CLASSIFICATION	9.691210432666513E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999030878956734	WITHOUT_CLASSIFICATION	9.691210432666513E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999710962672314	WITHOUT_CLASSIFICATION	2.8903732768604113E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999706202734266	WITHOUT_CLASSIFICATION	2.937972657339048E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999967537267463	WITHOUT_CLASSIFICATION	3.246273253760433E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999913362267874	WITHOUT_CLASSIFICATION	8.663773212634875E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999528485575547	WITHOUT_CLASSIFICATION	4.715144244530332E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999294206516088	WITHOUT_CLASSIFICATION	7.057934839108049E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9990169786944737	WITHOUT_CLASSIFICATION	9.830213055262032E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999259126721528	WITHOUT_CLASSIFICATION	7.40873278471126E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9985429229489368	WITHOUT_CLASSIFICATION	0.0014570770510633011	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999900878634412	WITHOUT_CLASSIFICATION	9.912136558871913E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999967359353674	WITHOUT_CLASSIFICATION	3.2640646326004602E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998357067681463	WITHOUT_CLASSIFICATION	1.642932318537352E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998357067681463	WITHOUT_CLASSIFICATION	1.642932318537352E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998357067681463	WITHOUT_CLASSIFICATION	1.642932318537352E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998357067681463	WITHOUT_CLASSIFICATION	1.642932318537352E-4	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999445661175806	WITHOUT_CLASSIFICATION	5.5433882419452235E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998944606964228	WITHOUT_CLASSIFICATION	1.05539303577185E-4	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.999838298265308	WITHOUT_CLASSIFICATION	1.6170173469202167E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9993905419092852	WITHOUT_CLASSIFICATION	6.094580907148589E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9981674201963647	WITHOUT_CLASSIFICATION	0.0018325798036353323	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9987411614526596	WITHOUT_CLASSIFICATION	0.0012588385473404542	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995354390128127	WITHOUT_CLASSIFICATION	4.6456098718728145E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999990754497811	WITHOUT_CLASSIFICATION	9.245502190192847E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999465625413045	WITHOUT_CLASSIFICATION	5.3437458695497015E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999719029892655	WITHOUT_CLASSIFICATION	2.8097010734565464E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997510146195364	WITHOUT_CLASSIFICATION	2.489853804636203E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9928095026883568	WITHOUT_CLASSIFICATION	0.007190497311643121	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9961371056173522	WITHOUT_CLASSIFICATION	0.0038628943826476358	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999903718869526	WITHOUT_CLASSIFICATION	9.628113047262992E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997510146195364	WITHOUT_CLASSIFICATION	2.489853804636203E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8908217287666876	WITHOUT_CLASSIFICATION	0.10917827123331238	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999961454353546	WITHOUT_CLASSIFICATION	3.854564645318405E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999583635501207	WITHOUT_CLASSIFICATION	4.163644987939274E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997358422390453	WITHOUT_CLASSIFICATION	2.641577609546848E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999695095866168	WITHOUT_CLASSIFICATION	3.0490413383254525E-5	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999830444811003	WITHOUT_CLASSIFICATION	1.6955518899688788E-4	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999957365779284	WITHOUT_CLASSIFICATION	4.263422071609577E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998981584062903	WITHOUT_CLASSIFICATION	1.0184159370966798E-4	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651588739131	WITHOUT_CLASSIFICATION	3.484112608690687E-5	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999950945153846	WITHOUT_CLASSIFICATION	4.9054846154768224E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651588739131	WITHOUT_CLASSIFICATION	3.484112608690687E-5	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999799624292907	WITHOUT_CLASSIFICATION	2.0037570709346695E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9996403105157209	WITHOUT_CLASSIFICATION	3.5968948427900926E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9975622476473149	WITHOUT_CLASSIFICATION	0.002437752352685029	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999947282143643	WITHOUT_CLASSIFICATION	5.271785635650469E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999898523064721	WITHOUT_CLASSIFICATION	1.0147693527917364E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999782356253063	WITHOUT_CLASSIFICATION	2.176437469369559E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999830816774053	WITHOUT_CLASSIFICATION	1.6918322594684486E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999272711109776	WITHOUT_CLASSIFICATION	7.272888902245094E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999830816774053	WITHOUT_CLASSIFICATION	1.6918322594684486E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999874716928457	WITHOUT_CLASSIFICATION	1.2528307154223831E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999358479229689	WITHOUT_CLASSIFICATION	6.41520770311978E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999555913621951	WITHOUT_CLASSIFICATION	4.440863780489225E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9996042345984886	WITHOUT_CLASSIFICATION	3.957654015113654E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999782356253063	WITHOUT_CLASSIFICATION	2.176437469369559E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999272711109776	WITHOUT_CLASSIFICATION	7.272888902245094E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999874716928457	WITHOUT_CLASSIFICATION	1.2528307154223831E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999728311324112	WITHOUT_CLASSIFICATION	2.7168867588907534E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.999840178235877	WITHOUT_CLASSIFICATION	1.5982176412298696E-4	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999447316092043	WITHOUT_CLASSIFICATION	5.5268390795723744E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999466049194972	WITHOUT_CLASSIFICATION	5.3395080502880945E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999823597522308	WITHOUT_CLASSIFICATION	1.7640247769163555E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999758511679283	WITHOUT_CLASSIFICATION	2.4148832071679288E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514552978622	WITHOUT_CLASSIFICATION	4.8544702137866256E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999358479229689	WITHOUT_CLASSIFICATION	6.41520770311978E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999974142697382	WITHOUT_CLASSIFICATION	2.5857302617615437E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9992087921037935	WITHOUT_CLASSIFICATION	7.912078962064569E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999707878140741	WITHOUT_CLASSIFICATION	2.9212185925832206E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514552978622	WITHOUT_CLASSIFICATION	4.8544702137866256E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997879059048214	WITHOUT_CLASSIFICATION	2.1209409517868117E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514552978622	WITHOUT_CLASSIFICATION	4.8544702137866256E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999943544664177	WITHOUT_CLASSIFICATION	5.645533582300004E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999865491541011	WITHOUT_CLASSIFICATION	1.3450845898769762E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9993086523661502	WITHOUT_CLASSIFICATION	6.913476338498407E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999923788094066	WITHOUT_CLASSIFICATION	7.621190593377541E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979868558643	WITHOUT_CLASSIFICATION	2.0131441357541392E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999884961954008	WITHOUT_CLASSIFICATION	1.1503804599175903E-5	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999924389826811	WITHOUT_CLASSIFICATION	7.5610173188855785E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998175885401319	WITHOUT_CLASSIFICATION	1.8241145986802577E-4	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996510739720146	WITHOUT_CLASSIFICATION	3.489260279853918E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9993302379068565	WITHOUT_CLASSIFICATION	6.69762093143524E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999983082717402	WITHOUT_CLASSIFICATION	1.6917282598995303E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9993302379068565	WITHOUT_CLASSIFICATION	6.69762093143524E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9957711136994677	WITHOUT_CLASSIFICATION	0.0042288863005323874	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999861113302122	WITHOUT_CLASSIFICATION	1.3888669787869986E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999984847301225	WITHOUT_CLASSIFICATION	1.5152698774589479E-6	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999822688170407	WITHOUT_CLASSIFICATION	1.7731182959241084E-5	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9994567316525369	WITHOUT_CLASSIFICATION	5.432683474631773E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999984672723837	WITHOUT_CLASSIFICATION	1.5327276162084122E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999912603177371	WITHOUT_CLASSIFICATION	8.739682263000914E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9988642859756498	WITHOUT_CLASSIFICATION	0.001135714024350185	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9988642859756498	WITHOUT_CLASSIFICATION	0.001135714024350185	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999743061422437	WITHOUT_CLASSIFICATION	2.5693857756388015E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999176637282491	WITHOUT_CLASSIFICATION	8.233627175094639E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999826099160776	WITHOUT_CLASSIFICATION	1.7390083922384007E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994967140202	WITHOUT_CLASSIFICATION	5.03285979844066E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999921012033118	WITHOUT_CLASSIFICATION	7.898796688140302E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9995749426695695	WITHOUT_CLASSIFICATION	4.2505733043055743E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992440062605148	WITHOUT_CLASSIFICATION	7.559937394852307E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9836608492283611	WITHOUT_CLASSIFICATION	0.01633915077163901	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991631037318	WITHOUT_CLASSIFICATION	8.368962681996616E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.998959892421007	WITHOUT_CLASSIFICATION	0.0010401075789929412	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9992467865948601	WITHOUT_CLASSIFICATION	7.532134051399665E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9941315005406565	WITHOUT_CLASSIFICATION	0.005868499459343521	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999993709308	WITHOUT_CLASSIFICATION	6.290691999992495E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999938220716029	WITHOUT_CLASSIFICATION	6.177928397067439E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992989896319163	WITHOUT_CLASSIFICATION	7.010103680836723E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999125078998327	WITHOUT_CLASSIFICATION	8.74921001674465E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999125078998327	WITHOUT_CLASSIFICATION	8.74921001674465E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999934523349209	WITHOUT_CLASSIFICATION	6.547665079075089E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998175885401319	WITHOUT_CLASSIFICATION	1.8241145986802577E-4	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995568429690853	WITHOUT_CLASSIFICATION	4.431570309146392E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9994479530565619	WITHOUT_CLASSIFICATION	5.520469434381891E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999806490697118	WITHOUT_CLASSIFICATION	1.93509302881326E-5	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999789359859443	WITHOUT_CLASSIFICATION	2.1064014055553257E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998783385938356	WITHOUT_CLASSIFICATION	1.2166140616438133E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9994176638816474	WITHOUT_CLASSIFICATION	5.823361183525769E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999250217344795	WITHOUT_CLASSIFICATION	7.497826552040297E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999469844740282	WITHOUT_CLASSIFICATION	5.3015525971908246E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999929356431678	WITHOUT_CLASSIFICATION	7.064356832239432E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999980456063828	WITHOUT_CLASSIFICATION	1.95439361715087E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998939837178021	WITHOUT_CLASSIFICATION	1.0601628219778974E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999817005594048	WITHOUT_CLASSIFICATION	1.829944059524961E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999993532185025	WITHOUT_CLASSIFICATION	6.467814974236533E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999558393117164	WITHOUT_CLASSIFICATION	4.416068828359498E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.99999343136598	WITHOUT_CLASSIFICATION	6.568634020045723E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999905652565519	WITHOUT_CLASSIFICATION	9.434743448045766E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999992047124457	WITHOUT_CLASSIFICATION	7.952875543216562E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999993817395091	WITHOUT_CLASSIFICATION	6.182604910197088E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999456708377071	WITHOUT_CLASSIFICATION	5.432916229274486E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9997385013747266	WITHOUT_CLASSIFICATION	2.6149862527338687E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999931443680287	WITHOUT_CLASSIFICATION	6.855631971404908E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999988545603552	WITHOUT_CLASSIFICATION	1.1454396447948003E-5	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999841077664672	WITHOUT_CLASSIFICATION	1.5892233532855542E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999913080572524	WITHOUT_CLASSIFICATION	8.691942747567739E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9990361325945699	WITHOUT_CLASSIFICATION	9.6386740543021E-4	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999700163822275	WITHOUT_CLASSIFICATION	2.998361777249125E-4	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998272056669107	WITHOUT_CLASSIFICATION	1.7279433308918163E-4	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9995563284841221	WITHOUT_CLASSIFICATION	4.4367151587786243E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999495581573612	WITHOUT_CLASSIFICATION	5.0441842638906046E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999497337843994	WITHOUT_CLASSIFICATION	5.026621560061046E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999506145612936	WITHOUT_CLASSIFICATION	4.938543870628441E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999704817186624	WITHOUT_CLASSIFICATION	2.9518281337588267E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9924546611951193	WITHOUT_CLASSIFICATION	0.007545338804880721	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.996170338159252	WITHOUT_CLASSIFICATION	0.0038296618407480205	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999937015075171	WITHOUT_CLASSIFICATION	6.298492482971259E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998620909424647	WITHOUT_CLASSIFICATION	1.3790905753526542E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998620909424647	WITHOUT_CLASSIFICATION	1.3790905753526542E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999630304873399	WITHOUT_CLASSIFICATION	3.696951266007999E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999958423945769	WITHOUT_CLASSIFICATION	4.157605423116838E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.998658946056279	WITHOUT_CLASSIFICATION	0.0013410539437209883	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.998658946056279	WITHOUT_CLASSIFICATION	0.0013410539437209883	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999913712437449	WITHOUT_CLASSIFICATION	8.628756255191853E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998972859499204	WITHOUT_CLASSIFICATION	1.027140500795796E-4	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999682843279976	WITHOUT_CLASSIFICATION	3.1715672002466826E-5	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999929304498038	WITHOUT_CLASSIFICATION	7.069550196232462E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999497411447529	WITHOUT_CLASSIFICATION	5.0258855247066315E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999891261370806	WITHOUT_CLASSIFICATION	1.0873862919352975E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999891261370806	WITHOUT_CLASSIFICATION	1.0873862919352975E-5	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999699545448709	WITHOUT_CLASSIFICATION	3.004545512909933E-4	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9995637687414324	WITHOUT_CLASSIFICATION	4.3623125856755406E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999907205631089	WITHOUT_CLASSIFICATION	9.279436891011377E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999955181198623	WITHOUT_CLASSIFICATION	4.481880137651079E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999930731140858	WITHOUT_CLASSIFICATION	6.926885914225917E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999779701502911	WITHOUT_CLASSIFICATION	2.2029849708934506E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999965714514734	WITHOUT_CLASSIFICATION	3.4285485265445455E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999884988133723	WITHOUT_CLASSIFICATION	1.1501186627839009E-5	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999961975860651	WITHOUT_CLASSIFICATION	3.8024139349570606E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999930286859546	WITHOUT_CLASSIFICATION	6.97131404547286E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999913512997631	WITHOUT_CLASSIFICATION	8.64870023679199E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998546732058545	WITHOUT_CLASSIFICATION	1.4532679414542014E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9994206215075113	WITHOUT_CLASSIFICATION	5.79378492488715E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996468217382835	WITHOUT_CLASSIFICATION	3.5317826171648E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9993633607171658	WITHOUT_CLASSIFICATION	6.366392828340536E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999994831243017	WITHOUT_CLASSIFICATION	5.168756982966034E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999885083624833	WITHOUT_CLASSIFICATION	1.1491637516628503E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997106014608655	WITHOUT_CLASSIFICATION	2.8939853913447937E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999942112858914	WITHOUT_CLASSIFICATION	5.7887141085184385E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999663983788173	WITHOUT_CLASSIFICATION	3.3601621182781414E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999819907180117	WITHOUT_CLASSIFICATION	1.80092819881958E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999187807812985	WITHOUT_CLASSIFICATION	8.121921870144603E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999728961829747	WITHOUT_CLASSIFICATION	2.7103817025279386E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9996004326855249	WITHOUT_CLASSIFICATION	3.9956731447499485E-4	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9979304820070026	WITHOUT_CLASSIFICATION	0.0020695179929973665	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999417445593436	WITHOUT_CLASSIFICATION	5.825544065640582E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9993927655366722	WITHOUT_CLASSIFICATION	6.072344633276876E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999953544906075	WITHOUT_CLASSIFICATION	4.645509392525104E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999905949216991	WITHOUT_CLASSIFICATION	9.40507830081903E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999958713625015	WITHOUT_CLASSIFICATION	4.128637498621879E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999982538419459	WITHOUT_CLASSIFICATION	1.7461580540924118E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999462909215346	WITHOUT_CLASSIFICATION	5.3709078465361836E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999867720616141	WITHOUT_CLASSIFICATION	1.3227938385804051E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999977113225053	WITHOUT_CLASSIFICATION	2.2886774946994525E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999925780256277	WITHOUT_CLASSIFICATION	7.421974372330429E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9995582198565621	WITHOUT_CLASSIFICATION	4.4178014343776683E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999593216248217	WITHOUT_CLASSIFICATION	4.067837517826451E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999918876171507	WITHOUT_CLASSIFICATION	8.112382849245846E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999965194746906	WITHOUT_CLASSIFICATION	3.4805253093595568E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999959185687588	WITHOUT_CLASSIFICATION	4.081431241210548E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999896040434142	WITHOUT_CLASSIFICATION	1.0395956585807713E-5	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999890184826064	WITHOUT_CLASSIFICATION	1.0981517393576645E-5	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999887286431235	WITHOUT_CLASSIFICATION	1.1271356876527846E-5	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999886089464296	WITHOUT_CLASSIFICATION	1.1391053570367323E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999985128831445	WITHOUT_CLASSIFICATION	1.4871168555472087E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999824071029546	WITHOUT_CLASSIFICATION	1.7592897045374668E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999981094620741	WITHOUT_CLASSIFICATION	1.890537925896197E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999971359985282	WITHOUT_CLASSIFICATION	2.8640014716669516E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999487196273901	WITHOUT_CLASSIFICATION	5.128037261004379E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999649846787647	WITHOUT_CLASSIFICATION	3.501532123536166E-5	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9882897088795767	WITHOUT_CLASSIFICATION	0.011710291120423334	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999972802962864	WITHOUT_CLASSIFICATION	2.7197037134630515E-6	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999970327638225	WITHOUT_CLASSIFICATION	2.9672361775794353E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999609878722295	WITHOUT_CLASSIFICATION	3.901212777043848E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999959804525175	WITHOUT_CLASSIFICATION	4.019547482543511E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999838862413998	WITHOUT_CLASSIFICATION	1.611375860026999E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999892308525815	WITHOUT_CLASSIFICATION	1.0769147418494956E-5	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9995425597896024	WITHOUT_CLASSIFICATION	4.574402103976958E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999965540600827	WITHOUT_CLASSIFICATION	3.445939917334131E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999965540600827	WITHOUT_CLASSIFICATION	3.445939917334131E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999681990489174	WITHOUT_CLASSIFICATION	3.180095108267806E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999926394558449	WITHOUT_CLASSIFICATION	7.360544155119996E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999986527200132	WITHOUT_CLASSIFICATION	1.3472799868094425E-5	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999811921843053	WITHOUT_CLASSIFICATION	1.8807815694802906E-5	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999985426936084	WITHOUT_CLASSIFICATION	1.4573063915970165E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995258455172633	WITHOUT_CLASSIFICATION	4.7415448273663687E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999839170409964	WITHOUT_CLASSIFICATION	1.6082959003516684E-5	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999996543777177	WITHOUT_CLASSIFICATION	3.456222823088885E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999418335768923	WITHOUT_CLASSIFICATION	5.8166423107618554E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999788198696145	WITHOUT_CLASSIFICATION	2.1180130385498287E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999643099482708	WITHOUT_CLASSIFICATION	3.569005172919707E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9981654703720865	WITHOUT_CLASSIFICATION	0.0018345296279134698	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999914162507109	WITHOUT_CLASSIFICATION	8.583749289145154E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999214690342882	WITHOUT_CLASSIFICATION	7.853096571172526E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9993005121222752	WITHOUT_CLASSIFICATION	6.994878777247399E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9993005121222752	WITHOUT_CLASSIFICATION	6.994878777247399E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999820218091605	WITHOUT_CLASSIFICATION	1.7978190839462678E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999534777857644	WITHOUT_CLASSIFICATION	4.652221423573933E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9996165235883957	WITHOUT_CLASSIFICATION	3.834764116043126E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999994012502676	WITHOUT_CLASSIFICATION	5.987497324583936E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689130835698	WITHOUT_CLASSIFICATION	3.108691643022111E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571830577414	WITHOUT_CLASSIFICATION	4.2816942258531025E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9996641871333205	WITHOUT_CLASSIFICATION	3.3581286667944837E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999787624069622	WITHOUT_CLASSIFICATION	2.123759303785224E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999980294874692	WITHOUT_CLASSIFICATION	1.9705125308335172E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999989846426478	WITHOUT_CLASSIFICATION	1.0153573521973437E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999927359277536	WITHOUT_CLASSIFICATION	7.2640722463389275E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9989765113709358	WITHOUT_CLASSIFICATION	0.001023488629064213	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999953223514948	WITHOUT_CLASSIFICATION	4.677648505265031E-6	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999988875264991	WITHOUT_CLASSIFICATION	1.1124735009032205E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9982941254777609	WITHOUT_CLASSIFICATION	0.001705874522239118	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999829275901381	WITHOUT_CLASSIFICATION	1.7072409861921622E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999894624861817	WITHOUT_CLASSIFICATION	1.0537513818304267E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999695621179838	WITHOUT_CLASSIFICATION	3.0437882016182716E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999370003341173	WITHOUT_CLASSIFICATION	6.299966588272388E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999996737746842	WITHOUT_CLASSIFICATION	3.2622531579835034E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999921512675586	WITHOUT_CLASSIFICATION	7.848732441519685E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996195068269	WITHOUT_CLASSIFICATION	3.8049317308459494E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999666416269362	WITHOUT_CLASSIFICATION	3.3358373063935146E-5	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998180909616595	WITHOUT_CLASSIFICATION	1.8190903834048707E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999952978820566	WITHOUT_CLASSIFICATION	4.702117943408574E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999908959038057	WITHOUT_CLASSIFICATION	9.104096194305193E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999589479991393	WITHOUT_CLASSIFICATION	4.105200086065009E-5	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999242405939097	WITHOUT_CLASSIFICATION	7.575940609031993E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999918597368674	WITHOUT_CLASSIFICATION	8.140263132544584E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996070445267	WITHOUT_CLASSIFICATION	3.9295547329995447E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999314869084688	WITHOUT_CLASSIFICATION	6.851309153127124E-5	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999939185398697	WITHOUT_CLASSIFICATION	6.081460130281388E-6	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999979867582013	WITHOUT_CLASSIFICATION	2.013241798701749E-5	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999960277797925	WITHOUT_CLASSIFICATION	3.972220207563819E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999987166422453	WITHOUT_CLASSIFICATION	1.2833577546991501E-5	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999991626920899	WITHOUT_CLASSIFICATION	8.373079100913215E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999638636305752	WITHOUT_CLASSIFICATION	3.613636942486414E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999200556084986	WITHOUT_CLASSIFICATION	7.994439150138412E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998628108416839	WITHOUT_CLASSIFICATION	1.3718915831607712E-4	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999648433409468	WITHOUT_CLASSIFICATION	3.515665905316165E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999648433409468	WITHOUT_CLASSIFICATION	3.515665905316165E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999883586770663	WITHOUT_CLASSIFICATION	1.1641322933720203E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999887421291765	WITHOUT_CLASSIFICATION	1.125787082339584E-5	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997884153049162	WITHOUT_CLASSIFICATION	2.1158469508372792E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999731870359566	WITHOUT_CLASSIFICATION	2.6812964043327887E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9996527034733236	WITHOUT_CLASSIFICATION	3.472965266763448E-4	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999530540988237	WITHOUT_CLASSIFICATION	4.694590117633449E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999354524009529	WITHOUT_CLASSIFICATION	6.454759904709739E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9985779589737408	WITHOUT_CLASSIFICATION	0.0014220410262591947	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999940155225773	WITHOUT_CLASSIFICATION	5.984477422734649E-6	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502446236122	WITHOUT_CLASSIFICATION	4.9755376387956786E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9963818105913342	WITHOUT_CLASSIFICATION	0.003618189408665709	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9974227851819967	WITHOUT_CLASSIFICATION	0.00257721481800333	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996258375349	WITHOUT_CLASSIFICATION	3.7416246514170983E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999873986310811	WITHOUT_CLASSIFICATION	1.2601368918833833E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9996767777599044	WITHOUT_CLASSIFICATION	3.2322224009565437E-4	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999987963808842	WITHOUT_CLASSIFICATION	1.203619115752354E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999990230392818	WITHOUT_CLASSIFICATION	9.769607182041438E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999465350842861	WITHOUT_CLASSIFICATION	5.3464915713894884E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999777610469188	WITHOUT_CLASSIFICATION	2.223895308121052E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999995503242943	WITHOUT_CLASSIFICATION	4.496757056862701E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9997751843908808	WITHOUT_CLASSIFICATION	2.2481560911921265E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998499344701051	WITHOUT_CLASSIFICATION	1.5006552989490466E-4	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994194731274794	WITHOUT_CLASSIFICATION	5.805268725205935E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999601754571199	WITHOUT_CLASSIFICATION	3.9824542880135936E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999907469155433	WITHOUT_CLASSIFICATION	9.253084456694382E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999861497256907	WITHOUT_CLASSIFICATION	1.385027430935014E-5	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999876938075241	WITHOUT_CLASSIFICATION	1.2306192475863226E-5	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999251190085949	WITHOUT_CLASSIFICATION	7.488099140510858E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999922075438051	WITHOUT_CLASSIFICATION	7.792456194902232E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.99999813233397	WITHOUT_CLASSIFICATION	1.8676660301068464E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999932818433842	WITHOUT_CLASSIFICATION	6.718156615849862E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999989860879444	WITHOUT_CLASSIFICATION	1.013912055693933E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999980011231091	WITHOUT_CLASSIFICATION	1.998876890868244E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999776686506887	WITHOUT_CLASSIFICATION	2.233134931124926E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999522163518123	WITHOUT_CLASSIFICATION	4.778364818760916E-5	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999909271540534	WITHOUT_CLASSIFICATION	9.072845946705845E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998803412486778	WITHOUT_CLASSIFICATION	1.1965875132219464E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999996014563872	WITHOUT_CLASSIFICATION	3.985436127935338E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999238539550817	WITHOUT_CLASSIFICATION	7.614604491827209E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999892611412918	WITHOUT_CLASSIFICATION	1.0738858708134555E-5	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998025423907	WITHOUT_CLASSIFICATION	1.9745760921984494E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999971404906881	WITHOUT_CLASSIFICATION	2.859509311892637E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999850724114374	WITHOUT_CLASSIFICATION	1.4927588562646709E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9997532921498423	WITHOUT_CLASSIFICATION	2.467078501576645E-4	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999077474606115	WITHOUT_CLASSIFICATION	9.225253938849045E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999941908488106	WITHOUT_CLASSIFICATION	5.809151189455538E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999914162507109	WITHOUT_CLASSIFICATION	8.583749289145154E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999806478791481	WITHOUT_CLASSIFICATION	1.9352120851898842E-5	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999975118971427	WITHOUT_CLASSIFICATION	2.4881028573740883E-6	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9991129493985309	WITHOUT_CLASSIFICATION	8.870506014691723E-4	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999971842021194	WITHOUT_CLASSIFICATION	2.8157978805885504E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999881316532504	WITHOUT_CLASSIFICATION	1.1868346749626468E-5	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997711855610848	WITHOUT_CLASSIFICATION	2.288144389153304E-4	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997380365681134	WITHOUT_CLASSIFICATION	2.619634318865984E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9842723439551258	WITHOUT_CLASSIFICATION	0.01572765604487415	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999489037114557	WITHOUT_CLASSIFICATION	5.109628854424794E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999742497216824	WITHOUT_CLASSIFICATION	2.5750278317599337E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9975435808198525	WITHOUT_CLASSIFICATION	0.0024564191801475016	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996318880000921	WITHOUT_CLASSIFICATION	3.681119999079146E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999472015758003	WITHOUT_CLASSIFICATION	5.279842419977839E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9997658340028138	WITHOUT_CLASSIFICATION	2.3416599718612704E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997153573034482	WITHOUT_CLASSIFICATION	2.846426965517868E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9992872336085927	WITHOUT_CLASSIFICATION	7.12766391407204E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999993261432246	WITHOUT_CLASSIFICATION	6.738567753452555E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999743086360966	WITHOUT_CLASSIFICATION	2.5691363903323933E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997153573034482	WITHOUT_CLASSIFICATION	2.846426965517868E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9971869174471113	WITHOUT_CLASSIFICATION	0.0028130825528887935	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999912846706992	WITHOUT_CLASSIFICATION	8.715329300773041E-6	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999974189310297	WITHOUT_CLASSIFICATION	2.581068970242029E-6	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9998792381653393	WITHOUT_CLASSIFICATION	1.207618346606884E-4	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9976464841234323	WITHOUT_CLASSIFICATION	0.0023535158765677563	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999664273647912	WITHOUT_CLASSIFICATION	3.357263520872862E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999976687207164	WITHOUT_CLASSIFICATION	2.331279283677848E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.99918427054779	WITHOUT_CLASSIFICATION	8.157294522098239E-4	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997930348548498	WITHOUT_CLASSIFICATION	2.0696514515019935E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999966795956948	WITHOUT_CLASSIFICATION	3.320404305145498E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9974977393107404	WITHOUT_CLASSIFICATION	0.002502260689259606	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9918167342920001	WITHOUT_CLASSIFICATION	0.008183265707999798	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999971258591255	WITHOUT_CLASSIFICATION	2.8741408745859426E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999629506631746	WITHOUT_CLASSIFICATION	3.7049336825426034E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998512038602793	WITHOUT_CLASSIFICATION	1.4879613972075217E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999931443680287	WITHOUT_CLASSIFICATION	6.855631971404908E-6	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999986518341096	WITHOUT_CLASSIFICATION	1.3481658903585878E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999973664702813	WITHOUT_CLASSIFICATION	2.6335297187707435E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9959643837846706	WITHOUT_CLASSIFICATION	0.004035616215329392	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998749543797977	WITHOUT_CLASSIFICATION	1.250456202023341E-4	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999995856645653	WITHOUT_CLASSIFICATION	4.143354346946605E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999856172153466	WITHOUT_CLASSIFICATION	1.4382784653490412E-5	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9998647469056242	WITHOUT_CLASSIFICATION	1.352530943757448E-4	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999997932703361	WITHOUT_CLASSIFICATION	2.0672966394336505E-7	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999954328560007	WITHOUT_CLASSIFICATION	4.5671439994196725E-6	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999870722793766	WITHOUT_CLASSIFICATION	1.2927720623466336E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999403700302457	WITHOUT_CLASSIFICATION	5.962996975429801E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996720040771802	WITHOUT_CLASSIFICATION	3.279959228198865E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999997881371017	WITHOUT_CLASSIFICATION	2.118628982970405E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999468415307305	WITHOUT_CLASSIFICATION	5.31584692693941E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999960457110431	WITHOUT_CLASSIFICATION	3.954288956935672E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996739723307643	WITHOUT_CLASSIFICATION	3.2602766923565415E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999522685741515	WITHOUT_CLASSIFICATION	4.773142584849724E-5	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999963346901685	WITHOUT_CLASSIFICATION	3.6653098314912457E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999918899689207	WITHOUT_CLASSIFICATION	8.110031079303406E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999996408148004	WITHOUT_CLASSIFICATION	3.5918519961507886E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999517895837323	WITHOUT_CLASSIFICATION	4.821041626757115E-5	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999954095582069	WITHOUT_CLASSIFICATION	4.5904417930830994E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999943992687033	WITHOUT_CLASSIFICATION	5.60073129673341E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998646235661676	WITHOUT_CLASSIFICATION	1.353764338325304E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999740241650397	WITHOUT_CLASSIFICATION	2.5975834960297544E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999740241650397	WITHOUT_CLASSIFICATION	2.5975834960297544E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9992951729522105	WITHOUT_CLASSIFICATION	7.048270477893952E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999878322696277	WITHOUT_CLASSIFICATION	1.2167730372294517E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999813178521623	WITHOUT_CLASSIFICATION	1.868214783777247E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9987886225248732	WITHOUT_CLASSIFICATION	0.0012113774751268415	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999620343784809	WITHOUT_CLASSIFICATION	3.796562151908513E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999620343784809	WITHOUT_CLASSIFICATION	3.796562151908513E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999920217618741	WITHOUT_CLASSIFICATION	7.978238125970843E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998608757778746	WITHOUT_CLASSIFICATION	1.3912422212526574E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999577922012789	WITHOUT_CLASSIFICATION	4.220779872101935E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999779674850628	WITHOUT_CLASSIFICATION	2.2032514937195253E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999961588302534	WITHOUT_CLASSIFICATION	3.8411697466069785E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999769772282442	WITHOUT_CLASSIFICATION	2.3022771755794875E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999978547298026	WITHOUT_CLASSIFICATION	2.1452701973170616E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999524401219745	WITHOUT_CLASSIFICATION	4.7559878025503124E-5	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999981570414378	WITHOUT_CLASSIFICATION	1.8429585621929778E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997695851119	WITHOUT_CLASSIFICATION	2.304148881000522E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997695851119	WITHOUT_CLASSIFICATION	2.304148881000522E-4	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996277138280106	WITHOUT_CLASSIFICATION	3.7228617198935824E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999884957166622	WITHOUT_CLASSIFICATION	1.1504283337881717E-5	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999282258124385	WITHOUT_CLASSIFICATION	7.177418756149742E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9987604020454711	WITHOUT_CLASSIFICATION	0.001239597954528925	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808842213148	WITHOUT_CLASSIFICATION	1.911577868517378E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493748069824	WITHOUT_CLASSIFICATION	5.062519301749191E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999779017430872	WITHOUT_CLASSIFICATION	2.2098256912868442E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999517298371281	WITHOUT_CLASSIFICATION	4.8270162871980026E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999281880910048	WITHOUT_CLASSIFICATION	7.181190899518734E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998705303178029	WITHOUT_CLASSIFICATION	1.2946968219707482E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999966795956948	WITHOUT_CLASSIFICATION	3.320404305145498E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9997115436008019	WITHOUT_CLASSIFICATION	2.8845639919807355E-4	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9987688281351119	WITHOUT_CLASSIFICATION	0.0012311718648881315	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999685891360288	WITHOUT_CLASSIFICATION	3.1410863971246094E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998630236476647	WITHOUT_CLASSIFICATION	1.3697635233535265E-4	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994301173913789	WITHOUT_CLASSIFICATION	5.698826086210483E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9992717483712659	WITHOUT_CLASSIFICATION	7.282516287340572E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997267881108791	WITHOUT_CLASSIFICATION	2.732118891208827E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999795751442685	WITHOUT_CLASSIFICATION	2.0424855731492935E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9992373125887695	WITHOUT_CLASSIFICATION	7.626874112305724E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998941019544797	WITHOUT_CLASSIFICATION	1.0589804552024305E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998941019544797	WITHOUT_CLASSIFICATION	1.0589804552024305E-4	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997510146195364	WITHOUT_CLASSIFICATION	2.489853804636203E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999998667551537	WITHOUT_CLASSIFICATION	1.3324484621060566E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9998344223071574	WITHOUT_CLASSIFICATION	1.6557769284264546E-4	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.997959556262624	WITHOUT_CLASSIFICATION	0.002040443737376044	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999683790699948	WITHOUT_CLASSIFICATION	3.162093000525379E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999773516980294	WITHOUT_CLASSIFICATION	2.2648301970630688E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999947282143643	WITHOUT_CLASSIFICATION	5.271785635650469E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999997158151638	WITHOUT_CLASSIFICATION	2.841848362278709E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999728311324112	WITHOUT_CLASSIFICATION	2.7168867588907534E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999778027931913	WITHOUT_CLASSIFICATION	2.2197206808713297E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514552978622	WITHOUT_CLASSIFICATION	4.8544702137866256E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999431219363032	WITHOUT_CLASSIFICATION	5.68780636968329E-5	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999993577635259	WITHOUT_CLASSIFICATION	6.42236474103322E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999378066652244	WITHOUT_CLASSIFICATION	6.219333477569305E-5	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999131427137192	WITHOUT_CLASSIFICATION	8.685728628070387E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999971776119839	WITHOUT_CLASSIFICATION	2.822388015985714E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999976212224431	WITHOUT_CLASSIFICATION	2.3787775570426555E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999890452744937	WITHOUT_CLASSIFICATION	1.0954725506317993E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9995594284771182	WITHOUT_CLASSIFICATION	4.405715228817165E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999692285905601	WITHOUT_CLASSIFICATION	3.077140943984426E-5	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999947874878208	WITHOUT_CLASSIFICATION	5.2125121791646826E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999718303004161	WITHOUT_CLASSIFICATION	2.816969958382423E-5	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999930731140858	WITHOUT_CLASSIFICATION	6.926885914225917E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9998427487465072	WITHOUT_CLASSIFICATION	1.5725125349271978E-4	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999418014775934	WITHOUT_CLASSIFICATION	5.8198522406760016E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999418014775934	WITHOUT_CLASSIFICATION	5.8198522406760016E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999341217680566	WITHOUT_CLASSIFICATION	6.587823194339732E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999635133433191	WITHOUT_CLASSIFICATION	3.648665668083323E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999577511361252	WITHOUT_CLASSIFICATION	4.2248863874820703E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999987911259215	WITHOUT_CLASSIFICATION	1.2088740784861545E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999799905427271	WITHOUT_CLASSIFICATION	2.000945727285015E-5	TEST
