//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998850619900826	WITHOUT_CLASSIFICATION	1.1493800991740833E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995923812550768	WITHOUT_CLASSIFICATION	4.076187449231557E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999899128956531	WITHOUT_CLASSIFICATION	1.008710434683362E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999759042074755	WITHOUT_CLASSIFICATION	2.409579252448448E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999759042074755	WITHOUT_CLASSIFICATION	2.409579252448448E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999528199578572	WITHOUT_CLASSIFICATION	4.718004214272721E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999604070953926	WITHOUT_CLASSIFICATION	3.959290460734775E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999849463454914	WITHOUT_CLASSIFICATION	1.505365450862269E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999934685929399	WITHOUT_CLASSIFICATION	6.5314070600550136E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999743154483605	WITHOUT_CLASSIFICATION	2.5684551639532925E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999743154483605	WITHOUT_CLASSIFICATION	2.5684551639532925E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999537887251755	WITHOUT_CLASSIFICATION	4.621127482442465E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999875241319438	WITHOUT_CLASSIFICATION	1.2475868056168004E-5	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999733396584509	WITHOUT_CLASSIFICATION	2.6660341549072975E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997697541096247	WITHOUT_CLASSIFICATION	2.3024589037538856E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999812279421184	WITHOUT_CLASSIFICATION	1.8772057881605375E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.999967432573534	WITHOUT_CLASSIFICATION	3.2567426465964534E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9999017079027456	WITHOUT_CLASSIFICATION	9.829209725448557E-5	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999884499688503	WITHOUT_CLASSIFICATION	1.1550031149643584E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999894908274948	WITHOUT_CLASSIFICATION	1.050917250532404E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999894908274948	WITHOUT_CLASSIFICATION	1.050917250532404E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999228746678374	WITHOUT_CLASSIFICATION	7.7125332162635E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997025389889272	WITHOUT_CLASSIFICATION	2.974610110726971E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999531141556397	WITHOUT_CLASSIFICATION	4.688584436029292E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9998110057215578	WITHOUT_CLASSIFICATION	1.8899427844210913E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9989220449777518	WITHOUT_CLASSIFICATION	0.0010779550222480756	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9989220449777518	WITHOUT_CLASSIFICATION	0.0010779550222480756	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999657856511263	WITHOUT_CLASSIFICATION	3.421434887373897E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9995836598020451	WITHOUT_CLASSIFICATION	4.1634019795483136E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999975317992279	WITHOUT_CLASSIFICATION	2.468200772092417E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997209346731823	WITHOUT_CLASSIFICATION	2.790653268176495E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999756996872745	WITHOUT_CLASSIFICATION	2.430031272546328E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605570889797	WITHOUT_CLASSIFICATION	3.944291102041921E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999866389295825	WITHOUT_CLASSIFICATION	1.336107041749899E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999834012586717	WITHOUT_CLASSIFICATION	1.6598741328308232E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9998849594014331	WITHOUT_CLASSIFICATION	1.1504059856686004E-4	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9998849594014331	WITHOUT_CLASSIFICATION	1.1504059856686004E-4	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998912566255257	WITHOUT_CLASSIFICATION	1.0874337447430981E-4	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996013385622169	WITHOUT_CLASSIFICATION	3.986614377830684E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999698082858492	WITHOUT_CLASSIFICATION	3.019171415073751E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.99996933399759	WITHOUT_CLASSIFICATION	3.066600240993622E-5	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999940671789902	WITHOUT_CLASSIFICATION	5.932821009848908E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999992481513598	WITHOUT_CLASSIFICATION	7.518486402252537E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9991431594126455	WITHOUT_CLASSIFICATION	8.568405873545006E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998513528802954	WITHOUT_CLASSIFICATION	1.4864711970465652E-4	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999901217306318	WITHOUT_CLASSIFICATION	9.878269368199056E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998980282579258	WITHOUT_CLASSIFICATION	1.0197174207418445E-4	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999839247807155	WITHOUT_CLASSIFICATION	1.6075219284502036E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999896270826552	WITHOUT_CLASSIFICATION	1.0372917344875988E-5	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999832568258343	WITHOUT_CLASSIFICATION	1.6743174165704027E-5	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998443932748606	WITHOUT_CLASSIFICATION	1.556067251393483E-4	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999689984900756	WITHOUT_CLASSIFICATION	3.1001509924318675E-5	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999844159340218	WITHOUT_CLASSIFICATION	1.55840659782481E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999905170446548	WITHOUT_CLASSIFICATION	9.48295534515314E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999864376080924	WITHOUT_CLASSIFICATION	1.3562391907653457E-5	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999787363078648	WITHOUT_CLASSIFICATION	2.1263692135177672E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999910269194738	WITHOUT_CLASSIFICATION	8.973080526263355E-6	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999246821076236	WITHOUT_CLASSIFICATION	7.531789237639428E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999901351952376	WITHOUT_CLASSIFICATION	9.864804762501217E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999975004867487	WITHOUT_CLASSIFICATION	2.4995132512559037E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999350140357944	WITHOUT_CLASSIFICATION	6.498596420556676E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999868789640513	WITHOUT_CLASSIFICATION	1.312103594878477E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999823177499143	WITHOUT_CLASSIFICATION	1.76822500856612E-5	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999957175200044	WITHOUT_CLASSIFICATION	4.2824799955750325E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999992599087696	WITHOUT_CLASSIFICATION	7.400912305423328E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999824616075139	WITHOUT_CLASSIFICATION	1.7538392486142603E-5	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999891947551539	WITHOUT_CLASSIFICATION	1.0805244846107752E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999993931371744	WITHOUT_CLASSIFICATION	6.068628256129956E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999920710620775	WITHOUT_CLASSIFICATION	7.928937922455155E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999565121317425	WITHOUT_CLASSIFICATION	4.348786825754219E-5	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999409873747289	WITHOUT_CLASSIFICATION	5.901262527101052E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999710613602408	WITHOUT_CLASSIFICATION	2.893863975919142E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999927283816338	WITHOUT_CLASSIFICATION	7.271618366205745E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999409873747289	WITHOUT_CLASSIFICATION	5.901262527101052E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997420305706	WITHOUT_CLASSIFICATION	2.57969429430484E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998812312400699	WITHOUT_CLASSIFICATION	1.1876875993015357E-4	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999780808705452	WITHOUT_CLASSIFICATION	2.1919129454807088E-5	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999889780472145	WITHOUT_CLASSIFICATION	1.1021952785330247E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999686100559466	WITHOUT_CLASSIFICATION	3.1389944053499864E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999686100559466	WITHOUT_CLASSIFICATION	3.1389944053499864E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998849941306541	WITHOUT_CLASSIFICATION	1.150058693458021E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999475853451705	WITHOUT_CLASSIFICATION	5.241465482961002E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999756107186407	WITHOUT_CLASSIFICATION	2.4389281359328942E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999944326644049	WITHOUT_CLASSIFICATION	5.567335595107129E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999875195850365	WITHOUT_CLASSIFICATION	1.2480414963573734E-5	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999899416986495	WITHOUT_CLASSIFICATION	1.0058301350438319E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999944421277711	WITHOUT_CLASSIFICATION	5.5578722288384206E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999887224281906	WITHOUT_CLASSIFICATION	1.1277571809431241E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999856493041774	WITHOUT_CLASSIFICATION	1.4350695822555673E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999815704740378	WITHOUT_CLASSIFICATION	1.8429525962136666E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999815704740378	WITHOUT_CLASSIFICATION	1.8429525962136666E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943277497819	WITHOUT_CLASSIFICATION	5.672250218074514E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999970096297209	WITHOUT_CLASSIFICATION	2.9903702791333938E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999821689385611	WITHOUT_CLASSIFICATION	1.7831061438958094E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999815704740378	WITHOUT_CLASSIFICATION	1.8429525962136666E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943277497819	WITHOUT_CLASSIFICATION	5.672250218074514E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943277497819	WITHOUT_CLASSIFICATION	5.672250218074514E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999825640814785	WITHOUT_CLASSIFICATION	1.7435918521532412E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999766765330524	WITHOUT_CLASSIFICATION	2.3323466947638433E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999837204705198	WITHOUT_CLASSIFICATION	1.6279529480151338E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999927942250659	WITHOUT_CLASSIFICATION	7.205774934108658E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999483499280336	WITHOUT_CLASSIFICATION	5.165007196645339E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999483499280336	WITHOUT_CLASSIFICATION	5.165007196645339E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998132865760939	WITHOUT_CLASSIFICATION	1.8671342390615348E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995720847801712	WITHOUT_CLASSIFICATION	4.279152198288164E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999881266635393	WITHOUT_CLASSIFICATION	1.1873336460747716E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999854686469516	WITHOUT_CLASSIFICATION	1.4531353048386933E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999854686469516	WITHOUT_CLASSIFICATION	1.4531353048386933E-5	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999586183953762	WITHOUT_CLASSIFICATION	4.138160462380259E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999755864710246	WITHOUT_CLASSIFICATION	2.4413528975370473E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.995274841612486	WITHOUT_CLASSIFICATION	0.004725158387513962	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999943917998455	WITHOUT_CLASSIFICATION	5.608200154538902E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9991672069598639	WITHOUT_CLASSIFICATION	8.327930401360077E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999923014392653	WITHOUT_CLASSIFICATION	7.698560734728142E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999459425804628	WITHOUT_CLASSIFICATION	5.405741953734129E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.999584056027011	WITHOUT_CLASSIFICATION	4.159439729890857E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.995274841612486	WITHOUT_CLASSIFICATION	0.004725158387513962	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9998794820268149	WITHOUT_CLASSIFICATION	1.2051797318513156E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949722804511	WITHOUT_CLASSIFICATION	5.027719548859153E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949722804511	WITHOUT_CLASSIFICATION	5.027719548859153E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999505043457394	WITHOUT_CLASSIFICATION	4.9495654260631925E-5	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999130379891127	WITHOUT_CLASSIFICATION	8.696201088737004E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999661151326147	WITHOUT_CLASSIFICATION	3.3884867385333077E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9991935737476922	WITHOUT_CLASSIFICATION	8.064262523077967E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9996040208358427	WITHOUT_CLASSIFICATION	3.9597916415727666E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998804266841451	WITHOUT_CLASSIFICATION	1.1957331585482689E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999966400435963	WITHOUT_CLASSIFICATION	3.3599564036584258E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999612092999746	WITHOUT_CLASSIFICATION	3.879070002533585E-5	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999966540320329	WITHOUT_CLASSIFICATION	3.3459679670151223E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999966540320329	WITHOUT_CLASSIFICATION	3.3459679670151223E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998850619900826	WITHOUT_CLASSIFICATION	1.1493800991740833E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999875317503059	WITHOUT_CLASSIFICATION	1.24682496941732E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999638916010105	WITHOUT_CLASSIFICATION	3.610839898949385E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999767961462908	WITHOUT_CLASSIFICATION	2.3203853709280014E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999810276132535	WITHOUT_CLASSIFICATION	1.8972386746529293E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999896281922935	WITHOUT_CLASSIFICATION	1.0371807706479172E-5	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999731824477366	WITHOUT_CLASSIFICATION	2.6817552263379502E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9999286824631269	WITHOUT_CLASSIFICATION	7.131753687310054E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999778062177103	WITHOUT_CLASSIFICATION	2.2193782289739344E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999896281922935	WITHOUT_CLASSIFICATION	1.0371807706479172E-5	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999618133311525	WITHOUT_CLASSIFICATION	3.8186668847499985E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999908334728861	WITHOUT_CLASSIFICATION	9.166527113946777E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999780071185894	WITHOUT_CLASSIFICATION	2.1992881410598115E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999846808086925	WITHOUT_CLASSIFICATION	1.5319191307491567E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999879587691545	WITHOUT_CLASSIFICATION	1.204123084549027E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999759042074755	WITHOUT_CLASSIFICATION	2.409579252448448E-5	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999990042111709	WITHOUT_CLASSIFICATION	9.957888290965942E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999901201013964	WITHOUT_CLASSIFICATION	9.879898603481479E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999808019878372	WITHOUT_CLASSIFICATION	1.9198012162758795E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999824052593104	WITHOUT_CLASSIFICATION	1.7594740689616216E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999750327493124	WITHOUT_CLASSIFICATION	2.496725068758047E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999975747414862	WITHOUT_CLASSIFICATION	2.42525851380321E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999768671047646	WITHOUT_CLASSIFICATION	2.3132895235401498E-5	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999913132880198	WITHOUT_CLASSIFICATION	8.686711980170126E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999878487581264	WITHOUT_CLASSIFICATION	1.215124187368874E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999528199578572	WITHOUT_CLASSIFICATION	4.718004214272721E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999802748071903	WITHOUT_CLASSIFICATION	1.9725192809728177E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999133637619714	WITHOUT_CLASSIFICATION	8.663623802863431E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999624588799848	WITHOUT_CLASSIFICATION	3.754112001514477E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999895318998111	WITHOUT_CLASSIFICATION	1.046810018895165E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999680901132075	WITHOUT_CLASSIFICATION	3.190988679239829E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999536463718343	WITHOUT_CLASSIFICATION	4.635362816569528E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998246190771679	WITHOUT_CLASSIFICATION	1.753809228320077E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998246190771679	WITHOUT_CLASSIFICATION	1.753809228320077E-4	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999806723279632	WITHOUT_CLASSIFICATION	1.9327672036833033E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999963501783555	WITHOUT_CLASSIFICATION	3.6498216445373246E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9995939707059474	WITHOUT_CLASSIFICATION	4.0602929405265405E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999579709278198	WITHOUT_CLASSIFICATION	4.202907218026111E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999969512972789	WITHOUT_CLASSIFICATION	3.048702721089562E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.999976342287193	WITHOUT_CLASSIFICATION	2.365771280695991E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999988456686571	WITHOUT_CLASSIFICATION	1.1543313429104303E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999604070953926	WITHOUT_CLASSIFICATION	3.959290460734775E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999867745746198	WITHOUT_CLASSIFICATION	1.3225425380122824E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999867745746198	WITHOUT_CLASSIFICATION	1.3225425380122824E-5	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999867745746198	WITHOUT_CLASSIFICATION	1.3225425380122824E-5	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999863636786213	WITHOUT_CLASSIFICATION	1.3636321378758225E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999867745746198	WITHOUT_CLASSIFICATION	1.3225425380122824E-5	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999806650193238	WITHOUT_CLASSIFICATION	1.9334980676259158E-5	TEST
// int	WITHOUT_CLASSIFICATION	0.9999689214159426	WITHOUT_CLASSIFICATION	3.107858405746893E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999827080271654	WITHOUT_CLASSIFICATION	1.7291972834615326E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999729176684375	WITHOUT_CLASSIFICATION	2.7082331562449563E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999944423400783	WITHOUT_CLASSIFICATION	5.557659921771702E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999809232571653	WITHOUT_CLASSIFICATION	1.9076742834734908E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999942179604556	WITHOUT_CLASSIFICATION	5.782039544354738E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999934685929399	WITHOUT_CLASSIFICATION	6.5314070600550136E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999934685929399	WITHOUT_CLASSIFICATION	6.5314070600550136E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999744715692606	WITHOUT_CLASSIFICATION	2.5528430739441216E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999891744937682	WITHOUT_CLASSIFICATION	1.0825506231824457E-5	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999677668570326	WITHOUT_CLASSIFICATION	3.223314296736842E-5	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999686521651086	WITHOUT_CLASSIFICATION	3.1347834891565845E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999678948918339	WITHOUT_CLASSIFICATION	3.210510816603345E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999675339660402	WITHOUT_CLASSIFICATION	3.246603395976642E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999743154483605	WITHOUT_CLASSIFICATION	2.5684551639532925E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999537887251755	WITHOUT_CLASSIFICATION	4.621127482442465E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999537887251755	WITHOUT_CLASSIFICATION	4.621127482442465E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999993950171614	WITHOUT_CLASSIFICATION	6.049828385974536E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999993950171614	WITHOUT_CLASSIFICATION	6.049828385974536E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999612057184407	WITHOUT_CLASSIFICATION	3.879428155917868E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999612057184407	WITHOUT_CLASSIFICATION	3.879428155917868E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999934685929399	WITHOUT_CLASSIFICATION	6.5314070600550136E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999743154483605	WITHOUT_CLASSIFICATION	2.5684551639532925E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999537887251755	WITHOUT_CLASSIFICATION	4.621127482442465E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999993950171614	WITHOUT_CLASSIFICATION	6.049828385974536E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999993950171614	WITHOUT_CLASSIFICATION	6.049828385974536E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999612057184407	WITHOUT_CLASSIFICATION	3.879428155917868E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999809396184631	WITHOUT_CLASSIFICATION	1.906038153684997E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998304766190461	WITHOUT_CLASSIFICATION	1.695233809539468E-4	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999517231294723	WITHOUT_CLASSIFICATION	4.827687052763134E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998965603577774	WITHOUT_CLASSIFICATION	1.0343964222260768E-4	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999017186504684	WITHOUT_CLASSIFICATION	9.828134953162122E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999673730504173	WITHOUT_CLASSIFICATION	3.262694958271576E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999705111751035	WITHOUT_CLASSIFICATION	2.948882489648692E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998521510709024	WITHOUT_CLASSIFICATION	1.4784892909761008E-4	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997925354596829	WITHOUT_CLASSIFICATION	2.0746454031701122E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999793899183984	WITHOUT_CLASSIFICATION	2.061008160161793E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999664252388589	WITHOUT_CLASSIFICATION	3.357476114113056E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999694595500663	WITHOUT_CLASSIFICATION	3.054044993371856E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998849941306541	WITHOUT_CLASSIFICATION	1.150058693458021E-4	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999673730504173	WITHOUT_CLASSIFICATION	3.262694958271576E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996392757191519	WITHOUT_CLASSIFICATION	3.6072428084816285E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996392757191519	WITHOUT_CLASSIFICATION	3.6072428084816285E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999408620329309	WITHOUT_CLASSIFICATION	5.913796706916407E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999973305502784	WITHOUT_CLASSIFICATION	2.669449721604822E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999973305502784	WITHOUT_CLASSIFICATION	2.669449721604822E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9994481159300602	WITHOUT_CLASSIFICATION	5.51884069939773E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.99976185027716	WITHOUT_CLASSIFICATION	2.3814972283983554E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9959491441735947	WITHOUT_CLASSIFICATION	0.004050855826405317	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999513780838684	WITHOUT_CLASSIFICATION	4.862191613157468E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999513780838684	WITHOUT_CLASSIFICATION	4.862191613157468E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999812279421184	WITHOUT_CLASSIFICATION	1.8772057881605375E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999934657062005	WITHOUT_CLASSIFICATION	6.534293799541419E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999934657062005	WITHOUT_CLASSIFICATION	6.534293799541419E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998417287410027	WITHOUT_CLASSIFICATION	1.5827125899722588E-4	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999830870673908	WITHOUT_CLASSIFICATION	1.691293260927171E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999884499688503	WITHOUT_CLASSIFICATION	1.1550031149643584E-5	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9938280578517771	WITHOUT_CLASSIFICATION	0.006171942148222852	TEST
// ID	WITHOUT_CLASSIFICATION	0.999967432573534	WITHOUT_CLASSIFICATION	3.2567426465964534E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999775794384288	WITHOUT_CLASSIFICATION	2.242056157116301E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999745263992103	WITHOUT_CLASSIFICATION	2.5473600789758544E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9990683391278166	WITHOUT_CLASSIFICATION	9.316608721834816E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999483687711322	WITHOUT_CLASSIFICATION	5.1631228867813035E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999531141556397	WITHOUT_CLASSIFICATION	4.688584436029292E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999984816144599	WITHOUT_CLASSIFICATION	1.518385540115304E-6	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999729188776442	WITHOUT_CLASSIFICATION	2.708112235585122E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999729227746242	WITHOUT_CLASSIFICATION	2.7077225375658408E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999894960853422	WITHOUT_CLASSIFICATION	1.0503914657907828E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999884499688503	WITHOUT_CLASSIFICATION	1.1550031149643584E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999918597990708	WITHOUT_CLASSIFICATION	8.140200929281146E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999898244532097	WITHOUT_CLASSIFICATION	1.0175546790265374E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999673670029614	WITHOUT_CLASSIFICATION	3.2632997038578315E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999894960853422	WITHOUT_CLASSIFICATION	1.0503914657907828E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999918597990708	WITHOUT_CLASSIFICATION	8.140200929281146E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999673670029614	WITHOUT_CLASSIFICATION	3.2632997038578315E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998942988406253	WITHOUT_CLASSIFICATION	1.0570115937466715E-4	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998942988406253	WITHOUT_CLASSIFICATION	1.0570115937466715E-4	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999894908274948	WITHOUT_CLASSIFICATION	1.050917250532404E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999902754638026	WITHOUT_CLASSIFICATION	9.72453619741168E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999819194746499	WITHOUT_CLASSIFICATION	1.8080525350103063E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999810548086175	WITHOUT_CLASSIFICATION	1.8945191382392456E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999282007405749	WITHOUT_CLASSIFICATION	7.179925942510622E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999847751429125	WITHOUT_CLASSIFICATION	1.5224857087379617E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999118974591218	WITHOUT_CLASSIFICATION	8.810254087829844E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999821656736587	WITHOUT_CLASSIFICATION	1.78343263412234E-5	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999847751429125	WITHOUT_CLASSIFICATION	1.5224857087379617E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998178111378445	WITHOUT_CLASSIFICATION	1.8218886215534704E-4	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999894960853422	WITHOUT_CLASSIFICATION	1.0503914657907828E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999709433586068	WITHOUT_CLASSIFICATION	2.9056641393199197E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999905648107624	WITHOUT_CLASSIFICATION	9.435189237629939E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996180590589735	WITHOUT_CLASSIFICATION	3.8194094102646345E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999870728755469	WITHOUT_CLASSIFICATION	1.292712445302353E-5	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999910276450181	WITHOUT_CLASSIFICATION	8.972354981846135E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999981875772342	WITHOUT_CLASSIFICATION	1.8124227656619665E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999519130849209	WITHOUT_CLASSIFICATION	4.8086915079004115E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999939027261595	WITHOUT_CLASSIFICATION	6.0972738405001604E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999895137039764	WITHOUT_CLASSIFICATION	1.0486296023576616E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999729176684375	WITHOUT_CLASSIFICATION	2.7082331562449563E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999103658588482	WITHOUT_CLASSIFICATION	8.963414115174574E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999531141556397	WITHOUT_CLASSIFICATION	4.688584436029292E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999736767382789	WITHOUT_CLASSIFICATION	2.632326172108284E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9991605808834435	WITHOUT_CLASSIFICATION	8.394191165565608E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999902536476739	WITHOUT_CLASSIFICATION	9.746352326153981E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999955406483102	WITHOUT_CLASSIFICATION	4.459351689805175E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999955493399132	WITHOUT_CLASSIFICATION	4.450660086877239E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999697623961337	WITHOUT_CLASSIFICATION	3.0237603866275555E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999944343708251	WITHOUT_CLASSIFICATION	5.565629174826206E-6	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999651250967749	WITHOUT_CLASSIFICATION	3.487490322501506E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9992972887301351	WITHOUT_CLASSIFICATION	7.027112698649112E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997016191231671	WITHOUT_CLASSIFICATION	2.983808768329837E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999016319603994	WITHOUT_CLASSIFICATION	9.836803960067534E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999016319603994	WITHOUT_CLASSIFICATION	9.836803960067534E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999699910608182	WITHOUT_CLASSIFICATION	3.0008939181805366E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999727038355467	WITHOUT_CLASSIFICATION	2.7296164453208864E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998273050870282	WITHOUT_CLASSIFICATION	1.72694912971821E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999973280965286	WITHOUT_CLASSIFICATION	2.6719034713989803E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997004228997858	WITHOUT_CLASSIFICATION	2.995771002142538E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9997075626961134	WITHOUT_CLASSIFICATION	2.924373038865891E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999788821150332	WITHOUT_CLASSIFICATION	2.1117884966741453E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999784011118383	WITHOUT_CLASSIFICATION	2.159888816169242E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9995796795146867	WITHOUT_CLASSIFICATION	4.2032048531329315E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999263869308054	WITHOUT_CLASSIFICATION	7.361306919463247E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999834998351107	WITHOUT_CLASSIFICATION	1.6500164889291323E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999929880419902	WITHOUT_CLASSIFICATION	7.011958009799336E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9997112881038682	WITHOUT_CLASSIFICATION	2.8871189613174567E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705040854514	WITHOUT_CLASSIFICATION	2.949591454866196E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678325062042	WITHOUT_CLASSIFICATION	3.216749379581496E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9997506774452106	WITHOUT_CLASSIFICATION	2.4932255478936035E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999992868374496	WITHOUT_CLASSIFICATION	7.13162550403554E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998745491443733	WITHOUT_CLASSIFICATION	1.2545085562662715E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999925392567686	WITHOUT_CLASSIFICATION	7.460743231465744E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999708614651848	WITHOUT_CLASSIFICATION	2.9138534815254726E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999708614651848	WITHOUT_CLASSIFICATION	2.9138534815254726E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999883466486142	WITHOUT_CLASSIFICATION	1.1653351385801429E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999883466486142	WITHOUT_CLASSIFICATION	1.1653351385801429E-4	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9992972887301351	WITHOUT_CLASSIFICATION	7.027112698649112E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998813009913691	WITHOUT_CLASSIFICATION	1.1869900863093768E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.99695947917883	WITHOUT_CLASSIFICATION	0.003040520821169897	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997703284968256	WITHOUT_CLASSIFICATION	2.2967150317441474E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.99695947917883	WITHOUT_CLASSIFICATION	0.003040520821169897	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997703284968256	WITHOUT_CLASSIFICATION	2.2967150317441474E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9993641622554532	WITHOUT_CLASSIFICATION	6.358377445467385E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997878933353016	WITHOUT_CLASSIFICATION	2.121066646984362E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999996941072473	WITHOUT_CLASSIFICATION	3.05892752702248E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999928598812785	WITHOUT_CLASSIFICATION	7.140118721405877E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9985788034795297	WITHOUT_CLASSIFICATION	0.001421196520470288	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9971005471809634	WITHOUT_CLASSIFICATION	0.00289945281903666	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999870952488398	WITHOUT_CLASSIFICATION	1.2904751160205935E-4	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9985049195457566	WITHOUT_CLASSIFICATION	0.0014950804542433497	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994612116773451	WITHOUT_CLASSIFICATION	5.38788322654827E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999735791748907	WITHOUT_CLASSIFICATION	2.642082510921914E-5	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999983337040714	WITHOUT_CLASSIFICATION	1.6662959285945828E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999886352905653	WITHOUT_CLASSIFICATION	1.1364709434745062E-5	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999924822233494	WITHOUT_CLASSIFICATION	7.517776650749078E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.99966542019316	WITHOUT_CLASSIFICATION	3.3457980684010856E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.99966542019316	WITHOUT_CLASSIFICATION	3.3457980684010856E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9984516469210282	WITHOUT_CLASSIFICATION	0.0015483530789718305	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9984516469210282	WITHOUT_CLASSIFICATION	0.0015483530789718305	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999995593800694	WITHOUT_CLASSIFICATION	4.406199305921245E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9993641622554532	WITHOUT_CLASSIFICATION	6.358377445467385E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999969004813454	WITHOUT_CLASSIFICATION	3.0995186546108276E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997367574614576	WITHOUT_CLASSIFICATION	2.6324253854235276E-4	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999613850072383	WITHOUT_CLASSIFICATION	3.8614992761728544E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996868815093024	WITHOUT_CLASSIFICATION	3.1311849069768033E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9669715601850523	WITHOUT_CLASSIFICATION	0.033028439814947755	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9993641622554532	WITHOUT_CLASSIFICATION	6.358377445467385E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996868815093024	WITHOUT_CLASSIFICATION	3.1311849069768033E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9669715601850523	WITHOUT_CLASSIFICATION	0.033028439814947755	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9996299312698832	WITHOUT_CLASSIFICATION	3.700687301168552E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999897400475046	WITHOUT_CLASSIFICATION	1.0259952495391785E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998989078543506	WITHOUT_CLASSIFICATION	1.0109214564934134E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9993641622554532	WITHOUT_CLASSIFICATION	6.358377445467385E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9993641622554532	WITHOUT_CLASSIFICATION	6.358377445467385E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999927912705662	WITHOUT_CLASSIFICATION	7.208729433856862E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999927557390688	WITHOUT_CLASSIFICATION	7.2442609312667435E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999734000411656	WITHOUT_CLASSIFICATION	2.6599958834465795E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999806125276384	WITHOUT_CLASSIFICATION	1.9387472361674954E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997642309593456	WITHOUT_CLASSIFICATION	2.357690406543873E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999979224467552	WITHOUT_CLASSIFICATION	2.0775532447854147E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999684494668721	WITHOUT_CLASSIFICATION	3.155053312787053E-5	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999792117395427	WITHOUT_CLASSIFICATION	2.0788260457202472E-5	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999921603164585	WITHOUT_CLASSIFICATION	7.839683541387218E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999885590400126	WITHOUT_CLASSIFICATION	1.1440959987334531E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999761208966597	WITHOUT_CLASSIFICATION	2.3879103340357643E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999939679696482	WITHOUT_CLASSIFICATION	6.032030351747217E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999828421189876	WITHOUT_CLASSIFICATION	1.7157881012401442E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999778483274907	WITHOUT_CLASSIFICATION	2.2151672509274823E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995468801691562	WITHOUT_CLASSIFICATION	4.5311983084378633E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997209346731823	WITHOUT_CLASSIFICATION	2.790653268176495E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9997379319427405	WITHOUT_CLASSIFICATION	2.620680572594719E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996252085409084	WITHOUT_CLASSIFICATION	3.747914590915991E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997703284968256	WITHOUT_CLASSIFICATION	2.2967150317441474E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9995058933653161	WITHOUT_CLASSIFICATION	4.941066346839144E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997209346731823	WITHOUT_CLASSIFICATION	2.790653268176495E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9982909462456001	WITHOUT_CLASSIFICATION	0.0017090537543998406	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9988109363663724	WITHOUT_CLASSIFICATION	0.0011890636336276176	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9823631920501619	WITHOUT_CLASSIFICATION	0.017636807949838112	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999915682980396	WITHOUT_CLASSIFICATION	8.431701960397839E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998841230286609	WITHOUT_CLASSIFICATION	1.1587697133911737E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999970440873078	WITHOUT_CLASSIFICATION	2.9559126921759938E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999960769846133	WITHOUT_CLASSIFICATION	3.923015386660325E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976231283505	WITHOUT_CLASSIFICATION	2.376871649438517E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999283943958609	WITHOUT_CLASSIFICATION	7.160560413911921E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999951914179984	WITHOUT_CLASSIFICATION	4.8085820016051967E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999664181902459	WITHOUT_CLASSIFICATION	3.358180975404155E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999958809485254	WITHOUT_CLASSIFICATION	4.119051474607728E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999934365169125	WITHOUT_CLASSIFICATION	6.563483087519549E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903455306591	WITHOUT_CLASSIFICATION	9.654469340807583E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999606798511679	WITHOUT_CLASSIFICATION	3.932014883222031E-5	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998684644375169	WITHOUT_CLASSIFICATION	1.315355624830752E-4	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878929243305	WITHOUT_CLASSIFICATION	1.2107075669470984E-5	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999650150278779	WITHOUT_CLASSIFICATION	3.49849721219987E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997890710532745	WITHOUT_CLASSIFICATION	2.1092894672539045E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999950253410047	WITHOUT_CLASSIFICATION	4.974658995279455E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803331508086	WITHOUT_CLASSIFICATION	1.966684919141613E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802991875903	WITHOUT_CLASSIFICATION	1.9700812409583407E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716071192962	WITHOUT_CLASSIFICATION	2.8392880703658885E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603778377285	WITHOUT_CLASSIFICATION	3.962216227147188E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999794800264462	WITHOUT_CLASSIFICATION	2.0519973553769696E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999708829397633	WITHOUT_CLASSIFICATION	2.9117060236567703E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714116615108	WITHOUT_CLASSIFICATION	2.8588338489185745E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738266414239	WITHOUT_CLASSIFICATION	2.6173358576132452E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709261418644	WITHOUT_CLASSIFICATION	2.9073858135532293E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801951691989	WITHOUT_CLASSIFICATION	1.9804830801084757E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701546343276	WITHOUT_CLASSIFICATION	2.9845365672415873E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701830791499	WITHOUT_CLASSIFICATION	2.9816920850225825E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999649957401443	WITHOUT_CLASSIFICATION	3.500425985574744E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999465098584636	WITHOUT_CLASSIFICATION	5.349014153653898E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869346098413	WITHOUT_CLASSIFICATION	1.306539015870101E-5	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.99999905861694	WITHOUT_CLASSIFICATION	9.413830599748961E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985220653730472	WITHOUT_CLASSIFICATION	0.0014779346269527544	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998246885553739	WITHOUT_CLASSIFICATION	1.7531144462617362E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9996299312698832	WITHOUT_CLASSIFICATION	3.700687301168552E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999729273238431	WITHOUT_CLASSIFICATION	2.7072676156841798E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999730876713242	WITHOUT_CLASSIFICATION	2.6912328675742627E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999895601966304	WITHOUT_CLASSIFICATION	1.0439803369668234E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999936355554967	WITHOUT_CLASSIFICATION	6.3644445033050265E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999982111347966	WITHOUT_CLASSIFICATION	1.7888652034035656E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999933330466367	WITHOUT_CLASSIFICATION	6.666953363267554E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999833791467911	WITHOUT_CLASSIFICATION	1.6620853208838104E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670180950591	WITHOUT_CLASSIFICATION	3.2981904940911683E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694187166341	WITHOUT_CLASSIFICATION	3.0581283365758705E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919271919115	WITHOUT_CLASSIFICATION	8.072808088424223E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670254250272	WITHOUT_CLASSIFICATION	3.2974574972848866E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999048636592679	WITHOUT_CLASSIFICATION	9.513634073200596E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999702792682559	WITHOUT_CLASSIFICATION	2.9720731744242558E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999836073410043	WITHOUT_CLASSIFICATION	1.6392658995591892E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999749556445003	WITHOUT_CLASSIFICATION	2.5044355499617E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785099308094	WITHOUT_CLASSIFICATION	2.1490069190708294E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999952755271034	WITHOUT_CLASSIFICATION	4.7244728965966844E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999980577836814	WITHOUT_CLASSIFICATION	1.942216318591604E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999677799378841	WITHOUT_CLASSIFICATION	3.2220062115978065E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999899138502151	WITHOUT_CLASSIFICATION	1.0086149784983995E-5	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999860895405966	WITHOUT_CLASSIFICATION	1.3910459403391857E-4	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999850462239633	WITHOUT_CLASSIFICATION	1.4953776036744022E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999538184852124	WITHOUT_CLASSIFICATION	4.618151478756411E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999823514828327	WITHOUT_CLASSIFICATION	1.764851716730412E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985220653730472	WITHOUT_CLASSIFICATION	0.0014779346269527544	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999909267989097	WITHOUT_CLASSIFICATION	9.073201090302819E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999945798864591	WITHOUT_CLASSIFICATION	5.4201135409169856E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999841059911504	WITHOUT_CLASSIFICATION	1.589400884961409E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869346098413	WITHOUT_CLASSIFICATION	1.306539015870101E-5	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999802898370591	WITHOUT_CLASSIFICATION	1.9710162940897638E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996355290177897	WITHOUT_CLASSIFICATION	3.6447098221022275E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999964239999071	WITHOUT_CLASSIFICATION	3.576000092889616E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999570421620945	WITHOUT_CLASSIFICATION	4.295783790543604E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998774621930765	WITHOUT_CLASSIFICATION	1.225378069234681E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999603892062493	WITHOUT_CLASSIFICATION	3.961079375068909E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999635124114582	WITHOUT_CLASSIFICATION	3.648758854193239E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999640801784927	WITHOUT_CLASSIFICATION	3.591982150731181E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999750758884673	WITHOUT_CLASSIFICATION	2.492411153269552E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996130172386143	WITHOUT_CLASSIFICATION	3.869827613856427E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999765809863708	WITHOUT_CLASSIFICATION	2.341901362924708E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9996299312698832	WITHOUT_CLASSIFICATION	3.700687301168552E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869346098413	WITHOUT_CLASSIFICATION	1.306539015870101E-5	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999925018901614	WITHOUT_CLASSIFICATION	7.498109838635774E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998003807677219	WITHOUT_CLASSIFICATION	1.9961923227817573E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999877822237554	WITHOUT_CLASSIFICATION	1.2217776244616889E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997835770854606	WITHOUT_CLASSIFICATION	2.164229145392769E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999649174940543	WITHOUT_CLASSIFICATION	3.508250594575149E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999858571175063	WITHOUT_CLASSIFICATION	1.4142882493685871E-5	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999957019029222	WITHOUT_CLASSIFICATION	4.298097077809778E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999250184021049	WITHOUT_CLASSIFICATION	7.498159789509486E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9999017079027456	WITHOUT_CLASSIFICATION	9.829209725448557E-5	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998933006422842	WITHOUT_CLASSIFICATION	1.0669935771578819E-4	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999725127378754	WITHOUT_CLASSIFICATION	2.7487262124594884E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869346098413	WITHOUT_CLASSIFICATION	1.306539015870101E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985220653730472	WITHOUT_CLASSIFICATION	0.0014779346269527544	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9995776864684951	WITHOUT_CLASSIFICATION	4.223135315048797E-4	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999956874975439	WITHOUT_CLASSIFICATION	4.312502456145674E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995783849560732	WITHOUT_CLASSIFICATION	4.2161504392679446E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985220653730472	WITHOUT_CLASSIFICATION	0.0014779346269527544	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999203794789001	WITHOUT_CLASSIFICATION	7.962052109990959E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999877822237554	WITHOUT_CLASSIFICATION	1.2217776244616889E-5	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9994622001230619	WITHOUT_CLASSIFICATION	5.377998769381811E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9980454782640623	WITHOUT_CLASSIFICATION	0.0019545217359376575	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999639578626864	WITHOUT_CLASSIFICATION	3.6042137313559515E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998774621930765	WITHOUT_CLASSIFICATION	1.225378069234681E-4	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999603892062493	WITHOUT_CLASSIFICATION	3.961079375068909E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999635124114582	WITHOUT_CLASSIFICATION	3.648758854193239E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999823655948247	WITHOUT_CLASSIFICATION	1.7634405175337127E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.999966775404027	WITHOUT_CLASSIFICATION	3.322459597297063E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999556753105308	WITHOUT_CLASSIFICATION	4.43246894692838E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999992806363068	WITHOUT_CLASSIFICATION	7.193636932025268E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999939078902361	WITHOUT_CLASSIFICATION	6.092109763880011E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985220653730472	WITHOUT_CLASSIFICATION	0.0014779346269527544	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999640801784927	WITHOUT_CLASSIFICATION	3.591982150731181E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999750758884673	WITHOUT_CLASSIFICATION	2.492411153269552E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907566246728	WITHOUT_CLASSIFICATION	9.243375327167123E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919138342807	WITHOUT_CLASSIFICATION	8.086165719319957E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999678890501742	WITHOUT_CLASSIFICATION	3.211094982590669E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999794771069966	WITHOUT_CLASSIFICATION	2.0522893003422125E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999294721132962	WITHOUT_CLASSIFICATION	7.05278867038526E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.99992015403531	WITHOUT_CLASSIFICATION	7.98459646900502E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998714403267305	WITHOUT_CLASSIFICATION	1.2855967326946648E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999467013043375	WITHOUT_CLASSIFICATION	5.329869566258012E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999689571522279	WITHOUT_CLASSIFICATION	3.1042847772141305E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999729176684375	WITHOUT_CLASSIFICATION	2.7082331562449563E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738266414239	WITHOUT_CLASSIFICATION	2.6173358576132452E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999729176684375	WITHOUT_CLASSIFICATION	2.7082331562449563E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999657044557172	WITHOUT_CLASSIFICATION	3.4295544282676346E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999636667701821	WITHOUT_CLASSIFICATION	3.633322981790685E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708569090824	WITHOUT_CLASSIFICATION	2.914309091758515E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999792462177912	WITHOUT_CLASSIFICATION	2.075378220876337E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998837048099585	WITHOUT_CLASSIFICATION	1.1629519004156562E-4	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709261418644	WITHOUT_CLASSIFICATION	2.9073858135532293E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701521246804	WITHOUT_CLASSIFICATION	2.9847875319667227E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999899138502151	WITHOUT_CLASSIFICATION	1.0086149784983995E-5	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999452255593387	WITHOUT_CLASSIFICATION	5.477444066115801E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999702227345874	WITHOUT_CLASSIFICATION	2.977726541264438E-5	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999728935614729	WITHOUT_CLASSIFICATION	2.7106438527079024E-5	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9997366067838762	WITHOUT_CLASSIFICATION	2.6339321612381666E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999942115226383	WITHOUT_CLASSIFICATION	5.788477361740753E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9988292034806817	WITHOUT_CLASSIFICATION	0.0011707965193183214	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999123853306153	WITHOUT_CLASSIFICATION	8.761466938465599E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976231283505	WITHOUT_CLASSIFICATION	2.376871649438517E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999780837494456	WITHOUT_CLASSIFICATION	2.1916250554375456E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999647130940582	WITHOUT_CLASSIFICATION	3.528690594180095E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999855072180117	WITHOUT_CLASSIFICATION	1.4492781988262912E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999730923588092	WITHOUT_CLASSIFICATION	2.6907641190845537E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999908151743919	WITHOUT_CLASSIFICATION	9.184825608140966E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999508749295802	WITHOUT_CLASSIFICATION	4.912507041983909E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831986835453	WITHOUT_CLASSIFICATION	1.680131645468881E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834440637079	WITHOUT_CLASSIFICATION	1.6555936292081812E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999739042446285	WITHOUT_CLASSIFICATION	2.6095755371440314E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999081964650247	WITHOUT_CLASSIFICATION	9.180353497525403E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999959570379136	WITHOUT_CLASSIFICATION	4.042962086406481E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999597538410818	WITHOUT_CLASSIFICATION	4.024615891819795E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998258828337	WITHOUT_CLASSIFICATION	1.7411716629948505E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999864885040859	WITHOUT_CLASSIFICATION	1.3511495914172034E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998939266332697	WITHOUT_CLASSIFICATION	1.0607336673023978E-4	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999482062554282	WITHOUT_CLASSIFICATION	5.1793744571793215E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998258828337	WITHOUT_CLASSIFICATION	1.7411716629948505E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998245137441929	WITHOUT_CLASSIFICATION	1.754862558070932E-4	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999698476436122	WITHOUT_CLASSIFICATION	3.0152356387837988E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747694907322	WITHOUT_CLASSIFICATION	2.523050926773844E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999913552837401	WITHOUT_CLASSIFICATION	8.644716259839334E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999937059033194	WITHOUT_CLASSIFICATION	6.294096680528346E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999719248008947	WITHOUT_CLASSIFICATION	2.8075199105267197E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999921156192466	WITHOUT_CLASSIFICATION	7.884380753328866E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998666866490213	WITHOUT_CLASSIFICATION	1.3331335097874265E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998666866490213	WITHOUT_CLASSIFICATION	1.3331335097874265E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999963579512605	WITHOUT_CLASSIFICATION	3.642048739417326E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999970628287085	WITHOUT_CLASSIFICATION	2.937171291385563E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999545422995887	WITHOUT_CLASSIFICATION	4.545770041131529E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999860639074555	WITHOUT_CLASSIFICATION	1.3936092544533106E-5	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999967388712377	WITHOUT_CLASSIFICATION	3.2611287621777506E-6	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999477660523742	WITHOUT_CLASSIFICATION	5.223394762574694E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999756156902994	WITHOUT_CLASSIFICATION	2.4384309700679916E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999534151384711	WITHOUT_CLASSIFICATION	4.6584861528854773E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998542756911044	WITHOUT_CLASSIFICATION	1.4572430889558396E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999921577740281	WITHOUT_CLASSIFICATION	7.842225972021335E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999355589339384	WITHOUT_CLASSIFICATION	6.444106606162892E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998138596941532	WITHOUT_CLASSIFICATION	1.8614030584695223E-4	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998973376304652	WITHOUT_CLASSIFICATION	1.0266236953482987E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998629587088133	WITHOUT_CLASSIFICATION	1.3704129118680497E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999511623139331	WITHOUT_CLASSIFICATION	4.883768606694412E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994063479337126	WITHOUT_CLASSIFICATION	5.936520662874221E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999948170308379	WITHOUT_CLASSIFICATION	5.182969162048229E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999753961370451	WITHOUT_CLASSIFICATION	2.4603862954890055E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999750297363186	WITHOUT_CLASSIFICATION	2.4970263681522753E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999605658113043	WITHOUT_CLASSIFICATION	3.943418869573659E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999915309323779	WITHOUT_CLASSIFICATION	8.469067622113656E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999584539284417	WITHOUT_CLASSIFICATION	4.154607155826641E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999876685140011	WITHOUT_CLASSIFICATION	1.233148599895093E-5	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999916207897399	WITHOUT_CLASSIFICATION	8.379210260102219E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999823744769772	WITHOUT_CLASSIFICATION	1.76255230227474E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999833545041875	WITHOUT_CLASSIFICATION	1.6645495812526168E-5	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999985624350094	WITHOUT_CLASSIFICATION	1.4375649906294313E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999923884795766	WITHOUT_CLASSIFICATION	7.611520423395016E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9991048095698409	WITHOUT_CLASSIFICATION	8.951904301589979E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999895057674302	WITHOUT_CLASSIFICATION	1.0494232569791541E-5	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999680730126633	WITHOUT_CLASSIFICATION	3.192698733661348E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999369095860013	WITHOUT_CLASSIFICATION	6.309041399860755E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998065808796212	WITHOUT_CLASSIFICATION	1.934191203787601E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998441686953481	WITHOUT_CLASSIFICATION	1.5583130465179733E-4	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997646014136465	WITHOUT_CLASSIFICATION	2.353985863533932E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999897359888833	WITHOUT_CLASSIFICATION	1.0264011116668696E-5	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995987341556064	WITHOUT_CLASSIFICATION	4.012658443934879E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9991264486046401	WITHOUT_CLASSIFICATION	8.735513953599568E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998873492834193	WITHOUT_CLASSIFICATION	1.1265071658066744E-4	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9996773988272728	WITHOUT_CLASSIFICATION	3.226011727272278E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998953984570808	WITHOUT_CLASSIFICATION	1.0460154291916443E-4	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9996299312698832	WITHOUT_CLASSIFICATION	3.700687301168552E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9996299312698832	WITHOUT_CLASSIFICATION	3.700687301168552E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999592051402708	WITHOUT_CLASSIFICATION	4.079485972918272E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999820287381717	WITHOUT_CLASSIFICATION	1.797126182831457E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9994681509557117	WITHOUT_CLASSIFICATION	5.318490442882224E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999929148359251	WITHOUT_CLASSIFICATION	7.085164074891515E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999718975954124	WITHOUT_CLASSIFICATION	2.8102404587550565E-5	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9996391303933783	WITHOUT_CLASSIFICATION	3.6086960662179814E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995758674828448	WITHOUT_CLASSIFICATION	4.241325171552272E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9963592356802256	WITHOUT_CLASSIFICATION	0.003640764319774473	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999540316259752	WITHOUT_CLASSIFICATION	4.596837402478147E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9997442415889232	WITHOUT_CLASSIFICATION	2.557584110767956E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995671480791242	WITHOUT_CLASSIFICATION	4.328519208758762E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998761749363749	WITHOUT_CLASSIFICATION	1.2382506362507422E-4	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995631842157033	WITHOUT_CLASSIFICATION	4.368157842966727E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996391506826585	WITHOUT_CLASSIFICATION	3.608493173415306E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.999900012107994	WITHOUT_CLASSIFICATION	9.998789200609063E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999938932762715	WITHOUT_CLASSIFICATION	6.1067237285156415E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999953894746	WITHOUT_CLASSIFICATION	4.610525391848951E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999973130567583	WITHOUT_CLASSIFICATION	2.6869432417161326E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999820988379774	WITHOUT_CLASSIFICATION	1.7901162022658856E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998575030965683	WITHOUT_CLASSIFICATION	1.4249690343167752E-4	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999973130567583	WITHOUT_CLASSIFICATION	2.6869432417161326E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999691334382192	WITHOUT_CLASSIFICATION	3.086656178077593E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999882000120348	WITHOUT_CLASSIFICATION	1.179998796528469E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998399224471267	WITHOUT_CLASSIFICATION	1.6007755287334227E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998477568055215	WITHOUT_CLASSIFICATION	1.5224319447850563E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999896612178837	WITHOUT_CLASSIFICATION	1.0338782116403605E-5	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.99998804715666	WITHOUT_CLASSIFICATION	1.1952843339907331E-5	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9995628091839683	WITHOUT_CLASSIFICATION	4.371908160316787E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999680252378058	WITHOUT_CLASSIFICATION	3.197476219417367E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999958727901378	WITHOUT_CLASSIFICATION	4.127209862160108E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999607625394824	WITHOUT_CLASSIFICATION	3.923746051760488E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999906327625075	WITHOUT_CLASSIFICATION	9.367237492494167E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999056070158281	WITHOUT_CLASSIFICATION	9.439298417197676E-5	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999900499029822	WITHOUT_CLASSIFICATION	9.950097017793782E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999761237953873	WITHOUT_CLASSIFICATION	2.387620461285381E-5	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999684715976062	WITHOUT_CLASSIFICATION	3.152840239379032E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9994494140575994	WITHOUT_CLASSIFICATION	5.505859424006517E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999855303672464	WITHOUT_CLASSIFICATION	1.4469632753720017E-5	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999944759219271	WITHOUT_CLASSIFICATION	5.524078072907049E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9954845060655855	WITHOUT_CLASSIFICATION	0.004515493934414608	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999127509307	WITHOUT_CLASSIFICATION	8.724906929981943E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999782356573504	WITHOUT_CLASSIFICATION	2.176434264957636E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999354149068487	WITHOUT_CLASSIFICATION	6.458509315129989E-4	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999794958814835	WITHOUT_CLASSIFICATION	2.050411851641204E-5	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999986132304868	WITHOUT_CLASSIFICATION	1.3867695132299276E-6	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997548831584017	WITHOUT_CLASSIFICATION	2.4511684159833754E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997129305868752	WITHOUT_CLASSIFICATION	2.8706941312485484E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999816721320083	WITHOUT_CLASSIFICATION	1.8327867991676248E-5	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999508749295802	WITHOUT_CLASSIFICATION	4.912507041983909E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997775668478479	WITHOUT_CLASSIFICATION	2.2243315215212287E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999370404512052	WITHOUT_CLASSIFICATION	6.295954879471183E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999381326360546	WITHOUT_CLASSIFICATION	6.186736394549989E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.998250459818472	WITHOUT_CLASSIFICATION	0.0017495401815280204	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999235653254513	WITHOUT_CLASSIFICATION	7.643467454864656E-5	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9996933355769173	WITHOUT_CLASSIFICATION	3.066644230826876E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999169375240575	WITHOUT_CLASSIFICATION	8.306247594249193E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999978495571163	WITHOUT_CLASSIFICATION	2.1504428835441793E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.99999553339167	WITHOUT_CLASSIFICATION	4.4666083300183705E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999995534213111	WITHOUT_CLASSIFICATION	4.465786889022986E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999915486842422	WITHOUT_CLASSIFICATION	8.451315757696468E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999831462188457	WITHOUT_CLASSIFICATION	1.685378115433529E-5	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9936443030992652	WITHOUT_CLASSIFICATION	0.006355696900734834	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998951777052837	WITHOUT_CLASSIFICATION	1.048222947162992E-4	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999508110742386	WITHOUT_CLASSIFICATION	4.91889257613674E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998444449822675	WITHOUT_CLASSIFICATION	1.555550177325022E-4	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998587339358125	WITHOUT_CLASSIFICATION	1.4126606418751365E-4	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999605976229541	WITHOUT_CLASSIFICATION	3.9402377045896966E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9997578413157577	WITHOUT_CLASSIFICATION	2.4215868424227983E-4	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999948210052236	WITHOUT_CLASSIFICATION	5.178994776402931E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999604181812687	WITHOUT_CLASSIFICATION	3.958181873119817E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999938154718894	WITHOUT_CLASSIFICATION	6.184528110717857E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999707390555894	WITHOUT_CLASSIFICATION	2.9260944410532116E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998892450799473	WITHOUT_CLASSIFICATION	1.1075492005276536E-4	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999935922760108	WITHOUT_CLASSIFICATION	6.407723989121163E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999845775938567	WITHOUT_CLASSIFICATION	1.5422406143229873E-5	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999981481378026	WITHOUT_CLASSIFICATION	1.8518621973670327E-6	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998487241543903	WITHOUT_CLASSIFICATION	1.5127584560965403E-4	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999392592371339	WITHOUT_CLASSIFICATION	6.074076286610323E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563848214913	WITHOUT_CLASSIFICATION	4.3615178508694786E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435684856796	WITHOUT_CLASSIFICATION	5.6431514320420585E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999400488270966	WITHOUT_CLASSIFICATION	5.995117290324684E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999857022897649	WITHOUT_CLASSIFICATION	1.429771023510269E-4	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999818407560618	WITHOUT_CLASSIFICATION	1.8159243938221694E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999847302919692	WITHOUT_CLASSIFICATION	1.526970803084844E-5	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999897658352888	WITHOUT_CLASSIFICATION	1.0234164711233185E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999866330531653	WITHOUT_CLASSIFICATION	1.3366946834746714E-5	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562035220182	WITHOUT_CLASSIFICATION	4.379647798183589E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999866330531653	WITHOUT_CLASSIFICATION	1.3366946834746714E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999154051896896	WITHOUT_CLASSIFICATION	8.459481031048926E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999916162844071	WITHOUT_CLASSIFICATION	8.383715592864941E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999911674644507	WITHOUT_CLASSIFICATION	8.832535549304803E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999495524183716	WITHOUT_CLASSIFICATION	5.044758162841383E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999475977004807	WITHOUT_CLASSIFICATION	5.2402299519277914E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9970938311080623	WITHOUT_CLASSIFICATION	0.002906168891937694	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999960122441461	WITHOUT_CLASSIFICATION	3.9877558539426435E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999907936286	WITHOUT_CLASSIFICATION	9.206371399980358E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999966406827708	WITHOUT_CLASSIFICATION	3.3593172291733486E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996558659924569	WITHOUT_CLASSIFICATION	3.4413400754317876E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999854360872775	WITHOUT_CLASSIFICATION	1.4563912722442872E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999982987351099	WITHOUT_CLASSIFICATION	1.701264890090656E-5	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990369615471316	WITHOUT_CLASSIFICATION	9.630384528682672E-4	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9977340504764097	WITHOUT_CLASSIFICATION	0.0022659495235902894	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.99990689251081	WITHOUT_CLASSIFICATION	9.310748918999948E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999945210017818	WITHOUT_CLASSIFICATION	5.478998218219136E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998808616010852	WITHOUT_CLASSIFICATION	1.1913839891469205E-4	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998808616010852	WITHOUT_CLASSIFICATION	1.1913839891469205E-4	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997423954179387	WITHOUT_CLASSIFICATION	2.5760458206116384E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999374076926625	WITHOUT_CLASSIFICATION	6.259230733756843E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9998975822342224	WITHOUT_CLASSIFICATION	1.0241776577752888E-4	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999553861193246	WITHOUT_CLASSIFICATION	4.461388067540795E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999426098613754	WITHOUT_CLASSIFICATION	5.7390138624561995E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999702161582553	WITHOUT_CLASSIFICATION	2.9783841744634545E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996532595028558	WITHOUT_CLASSIFICATION	3.4674049714427904E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997407241459594	WITHOUT_CLASSIFICATION	2.5927585404056093E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999910857530558	WITHOUT_CLASSIFICATION	8.914246944268951E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999849155032436	WITHOUT_CLASSIFICATION	1.508449675639154E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999717868340622	WITHOUT_CLASSIFICATION	2.82131659377928E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999859205275061	WITHOUT_CLASSIFICATION	1.4079472493848916E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999916146038585	WITHOUT_CLASSIFICATION	8.385396141411419E-6	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999015473681846	WITHOUT_CLASSIFICATION	9.845263181545786E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999832385866846	WITHOUT_CLASSIFICATION	1.6761413315447074E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999245682691115	WITHOUT_CLASSIFICATION	7.543173088859784E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999534008427918	WITHOUT_CLASSIFICATION	4.659915720816376E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995333887558607	WITHOUT_CLASSIFICATION	4.666112441392253E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999205865335694	WITHOUT_CLASSIFICATION	7.941346643064662E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999843363462227	WITHOUT_CLASSIFICATION	1.5663653777235198E-5	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999693772576705	WITHOUT_CLASSIFICATION	3.0622742329465786E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999993305559594	WITHOUT_CLASSIFICATION	6.694440406007054E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999857733684983	WITHOUT_CLASSIFICATION	1.4226631501641331E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999848535993601	WITHOUT_CLASSIFICATION	1.5146400639935151E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9997487500594963	WITHOUT_CLASSIFICATION	2.5124994050373386E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999937964729099	WITHOUT_CLASSIFICATION	6.203527090166336E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9993587705851743	WITHOUT_CLASSIFICATION	6.412294148257018E-4	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994213266187474	WITHOUT_CLASSIFICATION	5.786733812525411E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998837337049798	WITHOUT_CLASSIFICATION	1.162662950201169E-4	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999114689001665	WITHOUT_CLASSIFICATION	8.853109983356016E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.998784633064314	WITHOUT_CLASSIFICATION	0.0012153669356859869	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999601223810587	WITHOUT_CLASSIFICATION	3.9877618941242305E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9972708365252406	WITHOUT_CLASSIFICATION	0.0027291634747593605	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9994641459020049	WITHOUT_CLASSIFICATION	5.358540979949981E-4	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995606884432003	WITHOUT_CLASSIFICATION	4.3931155679970916E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999758141882421	WITHOUT_CLASSIFICATION	2.4185811757989183E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999571202742613	WITHOUT_CLASSIFICATION	4.287972573880935E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999064071842616	WITHOUT_CLASSIFICATION	9.359281573836543E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999889325620721	WITHOUT_CLASSIFICATION	1.1067437927941842E-5	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995925946157938	WITHOUT_CLASSIFICATION	4.074053842062666E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999724878934781	WITHOUT_CLASSIFICATION	2.7512106521793007E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605463473652	WITHOUT_CLASSIFICATION	3.945365263482302E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.999883493846681	WITHOUT_CLASSIFICATION	1.1650615331900735E-4	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999543054005415	WITHOUT_CLASSIFICATION	4.569459945850933E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999796552631733	WITHOUT_CLASSIFICATION	2.0344736826635673E-5	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999991057029038	WITHOUT_CLASSIFICATION	8.942970961976267E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999325665376306	WITHOUT_CLASSIFICATION	6.74334623693682E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999962036563714	WITHOUT_CLASSIFICATION	3.79634362859825E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999863845081255	WITHOUT_CLASSIFICATION	1.3615491874566503E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999610720055847	WITHOUT_CLASSIFICATION	3.8927994415314336E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605463473652	WITHOUT_CLASSIFICATION	3.945365263482302E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9995209788757756	WITHOUT_CLASSIFICATION	4.7902112422435714E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996972943436767	WITHOUT_CLASSIFICATION	3.0270565632332957E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999755540940825	WITHOUT_CLASSIFICATION	2.4445905917547054E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999056835942539	WITHOUT_CLASSIFICATION	9.431640574618106E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999203794789001	WITHOUT_CLASSIFICATION	7.962052109990959E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999203794789001	WITHOUT_CLASSIFICATION	7.962052109990959E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998214970778535	WITHOUT_CLASSIFICATION	1.785029221464922E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999366771867028	WITHOUT_CLASSIFICATION	6.332281329722563E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998003580773117	WITHOUT_CLASSIFICATION	1.996419226882245E-4	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999427783144428	WITHOUT_CLASSIFICATION	5.72216855571915E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999882708484161	WITHOUT_CLASSIFICATION	1.1729151583994969E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999974623542934	WITHOUT_CLASSIFICATION	2.537645706505924E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9995419485274379	WITHOUT_CLASSIFICATION	4.580514725620752E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999428672534648	WITHOUT_CLASSIFICATION	5.71327465350426E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996365351939903	WITHOUT_CLASSIFICATION	3.634648060097041E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999061854734139	WITHOUT_CLASSIFICATION	9.381452658605008E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998489000070422	WITHOUT_CLASSIFICATION	1.5109999295787732E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9996881784649295	WITHOUT_CLASSIFICATION	3.118215350704994E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999974866648422	WITHOUT_CLASSIFICATION	2.5133351578011366E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9991647193751889	WITHOUT_CLASSIFICATION	8.352806248111407E-4	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9985913192105764	WITHOUT_CLASSIFICATION	0.0014086807894235158	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998367064509	WITHOUT_CLASSIFICATION	1.632935491160188E-6	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997242656179193	WITHOUT_CLASSIFICATION	2.757343820806994E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997134402479193	WITHOUT_CLASSIFICATION	2.8655975208065674E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999978868648565	WITHOUT_CLASSIFICATION	2.1131351434785662E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9995610918491177	WITHOUT_CLASSIFICATION	4.3890815088230107E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999952117488973	WITHOUT_CLASSIFICATION	4.788251102719936E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999977056467838	WITHOUT_CLASSIFICATION	2.29435321616676E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999939191533996	WITHOUT_CLASSIFICATION	6.080846600327727E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9972529687999341	WITHOUT_CLASSIFICATION	0.002747031200065917	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999648648806931	WITHOUT_CLASSIFICATION	3.513511930687288E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999739020772643	WITHOUT_CLASSIFICATION	2.60979227356301E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999900601337278	WITHOUT_CLASSIFICATION	9.939866272097233E-6	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999690129923275	WITHOUT_CLASSIFICATION	3.0987007672353163E-5	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9973277200947989	WITHOUT_CLASSIFICATION	0.0026722799052012022	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998796188739791	WITHOUT_CLASSIFICATION	1.2038112602085155E-4	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999690129923275	WITHOUT_CLASSIFICATION	3.0987007672353163E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999821736235627	WITHOUT_CLASSIFICATION	1.7826376437266255E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9998222337517811	WITHOUT_CLASSIFICATION	1.7776624821887725E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999754738664342	WITHOUT_CLASSIFICATION	2.4526133565767426E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997530570466011	WITHOUT_CLASSIFICATION	2.469429533989456E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998218704285491	WITHOUT_CLASSIFICATION	1.7812957145080604E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999717868340622	WITHOUT_CLASSIFICATION	2.82131659377928E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9996506776178243	WITHOUT_CLASSIFICATION	3.4932238217559483E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9988292034806817	WITHOUT_CLASSIFICATION	0.0011707965193183214	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999101647040979	WITHOUT_CLASSIFICATION	8.983529590211791E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999990703716772	WITHOUT_CLASSIFICATION	9.296283227976622E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9997825366079865	WITHOUT_CLASSIFICATION	2.1746339201331866E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999678635085146	WITHOUT_CLASSIFICATION	3.213649148538645E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999351183925851	WITHOUT_CLASSIFICATION	6.488160741489232E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999278357768616	WITHOUT_CLASSIFICATION	7.216422313838819E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999512784099197	WITHOUT_CLASSIFICATION	4.872159008029794E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999640318592719	WITHOUT_CLASSIFICATION	3.596814072817821E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999892909847952	WITHOUT_CLASSIFICATION	1.070901520482648E-5	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999856829267344	WITHOUT_CLASSIFICATION	1.431707326570943E-5	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999962529007288	WITHOUT_CLASSIFICATION	3.747099271069922E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999372913834433	WITHOUT_CLASSIFICATION	6.270861655666016E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999674945756972	WITHOUT_CLASSIFICATION	3.2505424302730044E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999566148037258	WITHOUT_CLASSIFICATION	4.338519627419347E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999891215461783	WITHOUT_CLASSIFICATION	1.087845382175485E-5	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9995608157993547	WITHOUT_CLASSIFICATION	4.3918420064524306E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999888251926258	WITHOUT_CLASSIFICATION	1.1174807374257817E-5	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996446134114969	WITHOUT_CLASSIFICATION	3.5538658850299505E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999437446875834	WITHOUT_CLASSIFICATION	5.625531241656189E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9994975277882867	WITHOUT_CLASSIFICATION	5.024722117132315E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999910813214897	WITHOUT_CLASSIFICATION	8.918678510275749E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.999975616645636	WITHOUT_CLASSIFICATION	2.4383354364052923E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650134966553	WITHOUT_CLASSIFICATION	3.4986503344620534E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687526642456	WITHOUT_CLASSIFICATION	3.1247335754375475E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999651819405613	WITHOUT_CLASSIFICATION	3.481805943874287E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999900576896209	WITHOUT_CLASSIFICATION	9.942310379030365E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999817410426568	WITHOUT_CLASSIFICATION	1.825895734319952E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.99999941016618	WITHOUT_CLASSIFICATION	5.898338200127334E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999716110287368	WITHOUT_CLASSIFICATION	2.8388971263209874E-5	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999884361833163	WITHOUT_CLASSIFICATION	1.1563816683694574E-5	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999717622867677	WITHOUT_CLASSIFICATION	2.823771323236297E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999968388781898	WITHOUT_CLASSIFICATION	3.161121810252202E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999716547686702	WITHOUT_CLASSIFICATION	2.8345231329720052E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999871008821858	WITHOUT_CLASSIFICATION	1.2899117814292316E-5	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999671912342006	WITHOUT_CLASSIFICATION	3.280876579938243E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999611231403982	WITHOUT_CLASSIFICATION	3.887685960185724E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999969941736081	WITHOUT_CLASSIFICATION	3.0058263919778405E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999844431977664	WITHOUT_CLASSIFICATION	1.555680223368588E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999842319982485	WITHOUT_CLASSIFICATION	1.576800175149362E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9994252549900391	WITHOUT_CLASSIFICATION	5.747450099609641E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999355474958886	WITHOUT_CLASSIFICATION	6.445250411127013E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999762987532788	WITHOUT_CLASSIFICATION	2.370124672126745E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999921676596617	WITHOUT_CLASSIFICATION	7.832340338358433E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999452757562587	WITHOUT_CLASSIFICATION	5.4724243741382614E-5	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999289872996475	WITHOUT_CLASSIFICATION	7.101270035250996E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999963440776635	WITHOUT_CLASSIFICATION	3.655922336489924E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9993610933988777	WITHOUT_CLASSIFICATION	6.389066011222647E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999982205776353	WITHOUT_CLASSIFICATION	1.779422364628087E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999463857788388	WITHOUT_CLASSIFICATION	5.361422116112077E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993622311752363	WITHOUT_CLASSIFICATION	6.377688247636633E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999157833114525	WITHOUT_CLASSIFICATION	8.421668854759841E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650134966553	WITHOUT_CLASSIFICATION	3.4986503344620534E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999642424391536	WITHOUT_CLASSIFICATION	3.5757560846294736E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999985060650577	WITHOUT_CLASSIFICATION	1.4939349422896598E-6	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999675616350749	WITHOUT_CLASSIFICATION	3.2438364925031535E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999456418743581	WITHOUT_CLASSIFICATION	5.435812564191139E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999911357587644	WITHOUT_CLASSIFICATION	8.864241235629271E-6	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999560469898846	WITHOUT_CLASSIFICATION	4.395301011539372E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674377702189	WITHOUT_CLASSIFICATION	3.2562229781091484E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999931386285672	WITHOUT_CLASSIFICATION	6.861371432772458E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999922913268487	WITHOUT_CLASSIFICATION	7.708673151291195E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999780555791076	WITHOUT_CLASSIFICATION	2.1944420892355164E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999888550805304	WITHOUT_CLASSIFICATION	1.114491946973038E-5	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995607219105491	WITHOUT_CLASSIFICATION	4.3927808945081023E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999522373432979	WITHOUT_CLASSIFICATION	4.7762656702142E-5	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999230931812884	WITHOUT_CLASSIFICATION	7.690681871157585E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999154051896896	WITHOUT_CLASSIFICATION	8.459481031048926E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999989667160795	WITHOUT_CLASSIFICATION	1.0332839205851592E-6	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999991160540691	WITHOUT_CLASSIFICATION	8.839459308455793E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999803184148802	WITHOUT_CLASSIFICATION	1.968158511979035E-5	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999939663731535	WITHOUT_CLASSIFICATION	6.033626846462342E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999978418383183	WITHOUT_CLASSIFICATION	2.1581616816082986E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998231612474849	WITHOUT_CLASSIFICATION	1.7683875251508992E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998231612474849	WITHOUT_CLASSIFICATION	1.7683875251508992E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999645656503247	WITHOUT_CLASSIFICATION	3.543434967534592E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999895946891592	WITHOUT_CLASSIFICATION	1.0405310840848728E-5	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999856093037411	WITHOUT_CLASSIFICATION	1.4390696258843433E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999794105148937	WITHOUT_CLASSIFICATION	2.0589485106248593E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999807199515102	WITHOUT_CLASSIFICATION	1.928004848976893E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999962833799042	WITHOUT_CLASSIFICATION	3.7166200958858256E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999708955875947	WITHOUT_CLASSIFICATION	2.9104412405224833E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998640258017844	WITHOUT_CLASSIFICATION	1.3597419821560254E-4	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998640258017844	WITHOUT_CLASSIFICATION	1.3597419821560254E-4	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9990380027913492	WITHOUT_CLASSIFICATION	9.61997208650699E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999885210221335	WITHOUT_CLASSIFICATION	1.147897786640763E-5	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999939369133954	WITHOUT_CLASSIFICATION	6.063086604604452E-5	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942221070701	WITHOUT_CLASSIFICATION	5.7778929299886825E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942221070701	WITHOUT_CLASSIFICATION	5.7778929299886825E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942221070701	WITHOUT_CLASSIFICATION	5.7778929299886825E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999438183256193	WITHOUT_CLASSIFICATION	5.618167438062801E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999720354695834	WITHOUT_CLASSIFICATION	2.7964530416706168E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999889486373518	WITHOUT_CLASSIFICATION	1.1051362648255014E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998795171715225	WITHOUT_CLASSIFICATION	1.2048282847754857E-4	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999854120646622	WITHOUT_CLASSIFICATION	1.4587935337797961E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999991322946408	WITHOUT_CLASSIFICATION	8.677053593371145E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999563177492156	WITHOUT_CLASSIFICATION	4.368225078441804E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9984299114849984	WITHOUT_CLASSIFICATION	0.0015700885150016584	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999769624362291	WITHOUT_CLASSIFICATION	2.3037563770845254E-5	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999902821887516	WITHOUT_CLASSIFICATION	9.717811248335939E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998628357545752	WITHOUT_CLASSIFICATION	1.371642454247259E-4	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999466588232646	WITHOUT_CLASSIFICATION	5.3341176735508535E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999897867821256	WITHOUT_CLASSIFICATION	1.0213217874368207E-5	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999987076913374	WITHOUT_CLASSIFICATION	1.292308662699471E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999959736111956	WITHOUT_CLASSIFICATION	4.026388804397218E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999948487648679	WITHOUT_CLASSIFICATION	5.151235132178998E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999921631145288	WITHOUT_CLASSIFICATION	7.836885471275754E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998231612474849	WITHOUT_CLASSIFICATION	1.7683875251508992E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999894610080129	WITHOUT_CLASSIFICATION	1.0538991987239327E-5	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999828720705185	WITHOUT_CLASSIFICATION	1.7127929481508078E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999924846172551	WITHOUT_CLASSIFICATION	7.515382744907211E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999743139689755	WITHOUT_CLASSIFICATION	2.56860310244714E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999977958952982	WITHOUT_CLASSIFICATION	2.2041047017954584E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999938250270042	WITHOUT_CLASSIFICATION	6.174972995788406E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999604650928485	WITHOUT_CLASSIFICATION	3.953490715146102E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999869712749339	WITHOUT_CLASSIFICATION	1.3028725066174596E-5	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997960837910659	WITHOUT_CLASSIFICATION	2.039162089341589E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999862040005838	WITHOUT_CLASSIFICATION	1.3795999416223248E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999565379385111	WITHOUT_CLASSIFICATION	4.346206148889747E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999892431132631	WITHOUT_CLASSIFICATION	1.0756886736895901E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999771056966635	WITHOUT_CLASSIFICATION	2.2894303336374676E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999741348189625	WITHOUT_CLASSIFICATION	2.5865181037415315E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999769122864579	WITHOUT_CLASSIFICATION	2.308771354207735E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999984276341926	WITHOUT_CLASSIFICATION	1.5723658075224261E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999933226645266	WITHOUT_CLASSIFICATION	6.677335473510887E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999985711944132	WITHOUT_CLASSIFICATION	1.4288055869255933E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999791141229114	WITHOUT_CLASSIFICATION	2.0885877088639572E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999791141229114	WITHOUT_CLASSIFICATION	2.0885877088639572E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999834765479249	WITHOUT_CLASSIFICATION	1.652345207513685E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999931317920038	WITHOUT_CLASSIFICATION	6.868207996193105E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999834701032044	WITHOUT_CLASSIFICATION	1.6529896795644215E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999765118146576	WITHOUT_CLASSIFICATION	2.3488185342443375E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999839169988867	WITHOUT_CLASSIFICATION	1.6083001113364112E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999773494006899	WITHOUT_CLASSIFICATION	2.265059931011468E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999661248897324	WITHOUT_CLASSIFICATION	3.387511026758659E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999122332923294	WITHOUT_CLASSIFICATION	8.776670767062528E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999879806634965	WITHOUT_CLASSIFICATION	1.2019336503523645E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999648798474295	WITHOUT_CLASSIFICATION	3.512015257041973E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999734708177584	WITHOUT_CLASSIFICATION	2.6529182241591073E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995620383102617	WITHOUT_CLASSIFICATION	4.3796168973837525E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999992553545142	WITHOUT_CLASSIFICATION	7.446454857408322E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999931815120597	WITHOUT_CLASSIFICATION	6.818487940160959E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999998833557777	WITHOUT_CLASSIFICATION	1.166442223067628E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999117119399847	WITHOUT_CLASSIFICATION	8.828806001532853E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989915944067	WITHOUT_CLASSIFICATION	1.008405593313899E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989915944067	WITHOUT_CLASSIFICATION	1.008405593313899E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999937943389878	WITHOUT_CLASSIFICATION	6.205661012196741E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999994681942046	WITHOUT_CLASSIFICATION	5.318057954457907E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998962454632194	WITHOUT_CLASSIFICATION	1.0375453678065506E-4	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998962454632194	WITHOUT_CLASSIFICATION	1.0375453678065506E-4	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998964750261274	WITHOUT_CLASSIFICATION	1.0352497387260704E-4	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997156999454558	WITHOUT_CLASSIFICATION	2.8430005454417785E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995589706971159	WITHOUT_CLASSIFICATION	4.410293028841484E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999951009160153	WITHOUT_CLASSIFICATION	4.899083984808339E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999460893230929	WITHOUT_CLASSIFICATION	5.391067690699008E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9997587716256177	WITHOUT_CLASSIFICATION	2.412283743823312E-4	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999131514693059	WITHOUT_CLASSIFICATION	8.684853069402087E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999951009160153	WITHOUT_CLASSIFICATION	4.899083984808339E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999957175096382	WITHOUT_CLASSIFICATION	4.282490361792825E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999789904319296	WITHOUT_CLASSIFICATION	2.1009568070441048E-5	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999868069601813	WITHOUT_CLASSIFICATION	1.3193039818728829E-5	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999808659996733	WITHOUT_CLASSIFICATION	1.913400032671611E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999966919795917	WITHOUT_CLASSIFICATION	3.308020408183207E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999901298764678	WITHOUT_CLASSIFICATION	9.870123532207245E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999595071685538	WITHOUT_CLASSIFICATION	4.0492831446196626E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999824341505554	WITHOUT_CLASSIFICATION	1.7565849444573416E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999944585365008	WITHOUT_CLASSIFICATION	5.5414634991604205E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999714970764506	WITHOUT_CLASSIFICATION	2.850292354946021E-5	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998472946331057	WITHOUT_CLASSIFICATION	1.5270536689426128E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999908674139016	WITHOUT_CLASSIFICATION	9.132586098359602E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999946047605609	WITHOUT_CLASSIFICATION	5.395239439064241E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999919837082152	WITHOUT_CLASSIFICATION	8.016291784846036E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999989516078786	WITHOUT_CLASSIFICATION	1.0483921214058913E-5	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999807753744498	WITHOUT_CLASSIFICATION	1.922462555011417E-5	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9986233636492835	WITHOUT_CLASSIFICATION	0.001376636350716428	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999757839345617	WITHOUT_CLASSIFICATION	2.421606543838175E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999757839345617	WITHOUT_CLASSIFICATION	2.421606543838175E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999595071685538	WITHOUT_CLASSIFICATION	4.0492831446196626E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999201244958311	WITHOUT_CLASSIFICATION	7.9875504168792E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999970769725898	WITHOUT_CLASSIFICATION	2.9230274101997955E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999664237706332	WITHOUT_CLASSIFICATION	3.357622936681467E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999673598720139	WITHOUT_CLASSIFICATION	3.264012798608992E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999795376381099	WITHOUT_CLASSIFICATION	2.0462361890217037E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949722804511	WITHOUT_CLASSIFICATION	5.027719548859153E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999915414248077	WITHOUT_CLASSIFICATION	8.458575192204236E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999963183926701	WITHOUT_CLASSIFICATION	3.681607329902243E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999980289738949	WITHOUT_CLASSIFICATION	1.971026104990628E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999420094206519	WITHOUT_CLASSIFICATION	5.7990579348019935E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999985332076113	WITHOUT_CLASSIFICATION	1.4667923886402328E-6	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999876328174604	WITHOUT_CLASSIFICATION	1.236718253959521E-5	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999762995871568	WITHOUT_CLASSIFICATION	2.3700412843128387E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999411413404202	WITHOUT_CLASSIFICATION	5.885865957976016E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999850916999905	WITHOUT_CLASSIFICATION	1.4908300009523843E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999914860569753	WITHOUT_CLASSIFICATION	8.513943024584177E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999983415304687	WITHOUT_CLASSIFICATION	1.658469531176004E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999975422962015	WITHOUT_CLASSIFICATION	2.4577037985261724E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999230036176514	WITHOUT_CLASSIFICATION	7.699638234852306E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999863007511975	WITHOUT_CLASSIFICATION	1.3699248802477663E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999875530954294	WITHOUT_CLASSIFICATION	1.2446904570594003E-4	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999468932790083	WITHOUT_CLASSIFICATION	5.310672099178321E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999489133510202	WITHOUT_CLASSIFICATION	5.108664897989949E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999882907432563	WITHOUT_CLASSIFICATION	1.1709256743768899E-5	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999881222489247	WITHOUT_CLASSIFICATION	1.1877751075230227E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999758747370276	WITHOUT_CLASSIFICATION	2.4125262972423846E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9994937458436334	WITHOUT_CLASSIFICATION	5.062541563667203E-4	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998493190203958	WITHOUT_CLASSIFICATION	1.5068097960428749E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999796720599036	WITHOUT_CLASSIFICATION	2.032794009637185E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999858140681763	WITHOUT_CLASSIFICATION	1.4185931823540862E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999850532029806	WITHOUT_CLASSIFICATION	1.4946797019318815E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999854740034955	WITHOUT_CLASSIFICATION	1.4525996504499107E-5	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999915126665363	WITHOUT_CLASSIFICATION	8.487333463790044E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999920738441082	WITHOUT_CLASSIFICATION	7.926155891845773E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999882585243942	WITHOUT_CLASSIFICATION	1.1741475605759223E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999303441504631	WITHOUT_CLASSIFICATION	6.965584953680914E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999926638348389	WITHOUT_CLASSIFICATION	7.336165161064541E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999823649278902	WITHOUT_CLASSIFICATION	1.7635072109864276E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997642714994142	WITHOUT_CLASSIFICATION	2.3572850058589372E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999989930801555	WITHOUT_CLASSIFICATION	1.0069198445094575E-5	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999512596900776	WITHOUT_CLASSIFICATION	4.8740309922403155E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999788086286407	WITHOUT_CLASSIFICATION	2.1191371359325605E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9997718243717219	WITHOUT_CLASSIFICATION	2.2817562827813105E-4	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997107676449962	WITHOUT_CLASSIFICATION	2.8923235500375203E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999372162694893	WITHOUT_CLASSIFICATION	6.278373051075085E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998636802988321	WITHOUT_CLASSIFICATION	1.3631970116795107E-4	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999913490072998	WITHOUT_CLASSIFICATION	8.650992700191421E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998404923564308	WITHOUT_CLASSIFICATION	1.5950764356906322E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999984626296144	WITHOUT_CLASSIFICATION	1.537370385661801E-6	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999873962921174	WITHOUT_CLASSIFICATION	1.2603707882554617E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998820138339488	WITHOUT_CLASSIFICATION	1.1798616605126766E-4	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999460893230929	WITHOUT_CLASSIFICATION	5.391067690699008E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999639726955356	WITHOUT_CLASSIFICATION	3.6027304464330374E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999850916999905	WITHOUT_CLASSIFICATION	1.4908300009523843E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999848019954872	WITHOUT_CLASSIFICATION	1.519800451267873E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999452474162173	WITHOUT_CLASSIFICATION	5.4752583782703995E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999923328527486	WITHOUT_CLASSIFICATION	7.66714725150916E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999923328527486	WITHOUT_CLASSIFICATION	7.66714725150916E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999663812115034	WITHOUT_CLASSIFICATION	3.361878849651542E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999978174686012	WITHOUT_CLASSIFICATION	2.182531398775782E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999577665753943	WITHOUT_CLASSIFICATION	4.223342460568542E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999697864921334	WITHOUT_CLASSIFICATION	3.0213507866503945E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999388250062061	WITHOUT_CLASSIFICATION	6.117499379392551E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999967493157115	WITHOUT_CLASSIFICATION	3.250684288591935E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997798888674322	WITHOUT_CLASSIFICATION	2.201111325678672E-4	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999990742094023	WITHOUT_CLASSIFICATION	9.257905977954155E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999992537800959	WITHOUT_CLASSIFICATION	7.462199041067229E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999992537800959	WITHOUT_CLASSIFICATION	7.462199041067229E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999390094484056	WITHOUT_CLASSIFICATION	6.0990551594417166E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9992795571507112	WITHOUT_CLASSIFICATION	7.204428492888021E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999931198604587	WITHOUT_CLASSIFICATION	6.880139541332425E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997516944959903	WITHOUT_CLASSIFICATION	2.483055040097005E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999990573742578	WITHOUT_CLASSIFICATION	9.426257421892554E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999949071103873	WITHOUT_CLASSIFICATION	5.092889612734488E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999970239080936	WITHOUT_CLASSIFICATION	2.976091906318189E-6	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999780749591721	WITHOUT_CLASSIFICATION	2.1925040827950298E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999848176471189	WITHOUT_CLASSIFICATION	1.5182352881003426E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999806851857791	WITHOUT_CLASSIFICATION	1.9314814220835715E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999717170482676	WITHOUT_CLASSIFICATION	2.8282951732299257E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999717170482676	WITHOUT_CLASSIFICATION	2.8282951732299257E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998710507263	WITHOUT_CLASSIFICATION	1.2894927365644623E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999538820365184	WITHOUT_CLASSIFICATION	4.611796348160023E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999932738451498	WITHOUT_CLASSIFICATION	6.726154850238966E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9995969353541675	WITHOUT_CLASSIFICATION	4.0306464583251465E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999981232830013	WITHOUT_CLASSIFICATION	1.8767169987203568E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999865242075051	WITHOUT_CLASSIFICATION	1.3475792494908416E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999397987009699	WITHOUT_CLASSIFICATION	6.0201299030012945E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999914808859078	WITHOUT_CLASSIFICATION	8.519114092134595E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999885443887537	WITHOUT_CLASSIFICATION	1.1455611246241323E-5	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999697631077662	WITHOUT_CLASSIFICATION	3.0236892233800084E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999732551546312	WITHOUT_CLASSIFICATION	2.6744845368787783E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604927753503	WITHOUT_CLASSIFICATION	3.9507224649786817E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999951914179984	WITHOUT_CLASSIFICATION	4.8085820016051967E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999940031989395	WITHOUT_CLASSIFICATION	5.996801060459561E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999586183953762	WITHOUT_CLASSIFICATION	4.138160462380259E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869346098413	WITHOUT_CLASSIFICATION	1.306539015870101E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9999017079027456	WITHOUT_CLASSIFICATION	9.829209725448557E-5	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996252085409084	WITHOUT_CLASSIFICATION	3.747914590915991E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999975826511133	WITHOUT_CLASSIFICATION	2.41734888665377E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999983814626504	WITHOUT_CLASSIFICATION	1.6185373495647384E-6	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9995610918491177	WITHOUT_CLASSIFICATION	4.3890815088230107E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999920654271658	WITHOUT_CLASSIFICATION	7.934572834183E-6	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997083319983026	WITHOUT_CLASSIFICATION	2.9166800169755353E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999934515152314	WITHOUT_CLASSIFICATION	6.548484768501906E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999605953129851	WITHOUT_CLASSIFICATION	3.9404687014945724E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999902047034223	WITHOUT_CLASSIFICATION	9.795296577725134E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781194605093	WITHOUT_CLASSIFICATION	2.1880539490728448E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999954252842136	WITHOUT_CLASSIFICATION	4.574715786416877E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9992754903204798	WITHOUT_CLASSIFICATION	7.24509679520318E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708569090824	WITHOUT_CLASSIFICATION	2.914309091758515E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9997385652584735	WITHOUT_CLASSIFICATION	2.614347415265345E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999997765389739	WITHOUT_CLASSIFICATION	2.2346102610805283E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999722664071294	WITHOUT_CLASSIFICATION	2.77335928706279E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999858924848762	WITHOUT_CLASSIFICATION	1.410751512369903E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997196439643	WITHOUT_CLASSIFICATION	2.8035603570048943E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999978048223228	WITHOUT_CLASSIFICATION	2.1951776771764196E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999666976597067	WITHOUT_CLASSIFICATION	3.3302340293306257E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999823775222922	WITHOUT_CLASSIFICATION	1.7622477707689963E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999862058900931	WITHOUT_CLASSIFICATION	1.379410990691892E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999486799134994	WITHOUT_CLASSIFICATION	5.132008650050332E-5	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998746074705784	WITHOUT_CLASSIFICATION	1.2539252942168615E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999917036939103	WITHOUT_CLASSIFICATION	8.296306089754783E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999922946409524	WITHOUT_CLASSIFICATION	7.705359047606854E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999603456156625	WITHOUT_CLASSIFICATION	3.96543843373865E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999214575739632	WITHOUT_CLASSIFICATION	7.854242603674421E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999893793782777	WITHOUT_CLASSIFICATION	1.0620621722385014E-5	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999834054111418	WITHOUT_CLASSIFICATION	1.6594588858157616E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999812987114127	WITHOUT_CLASSIFICATION	1.870128858724385E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999886656692224	WITHOUT_CLASSIFICATION	1.1334330777515245E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998583127106409	WITHOUT_CLASSIFICATION	1.416872893591446E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999902067121571	WITHOUT_CLASSIFICATION	9.793287842969469E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999903657966782	WITHOUT_CLASSIFICATION	9.634203321715815E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999846612387517	WITHOUT_CLASSIFICATION	1.5338761248178657E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999521770227109	WITHOUT_CLASSIFICATION	4.782297728906827E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999846612387517	WITHOUT_CLASSIFICATION	1.5338761248178657E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999993564761459	WITHOUT_CLASSIFICATION	6.435238541033747E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999964680183386	WITHOUT_CLASSIFICATION	3.531981661248543E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999879659496258	WITHOUT_CLASSIFICATION	1.2034050374253732E-5	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999935783923528	WITHOUT_CLASSIFICATION	6.421607647184077E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999866186647539	WITHOUT_CLASSIFICATION	1.3381335246048039E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999879659496258	WITHOUT_CLASSIFICATION	1.2034050374253732E-5	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999961749339363	WITHOUT_CLASSIFICATION	3.82506606375568E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997032020411589	WITHOUT_CLASSIFICATION	2.967979588410978E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999990999636027	WITHOUT_CLASSIFICATION	9.000363972939221E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999901555530899	WITHOUT_CLASSIFICATION	9.844446910007124E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999828158874545	WITHOUT_CLASSIFICATION	1.718411254555179E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999951634617215	WITHOUT_CLASSIFICATION	4.836538278577385E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999989278589619	WITHOUT_CLASSIFICATION	1.0721410381605132E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998094928172707	WITHOUT_CLASSIFICATION	1.9050718272938804E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999937904309306	WITHOUT_CLASSIFICATION	6.209569069480232E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999933841949806	WITHOUT_CLASSIFICATION	6.615805019460969E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999537807079812	WITHOUT_CLASSIFICATION	4.621929201873522E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999973837651112	WITHOUT_CLASSIFICATION	2.6162348887804354E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999993379124067	WITHOUT_CLASSIFICATION	6.620875933116833E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999745537743418	WITHOUT_CLASSIFICATION	2.544622565819699E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999997503283751	WITHOUT_CLASSIFICATION	2.4967162489919203E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9995638440958774	WITHOUT_CLASSIFICATION	4.361559041225938E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9979873987749793	WITHOUT_CLASSIFICATION	0.002012601225020586	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999727296876777	WITHOUT_CLASSIFICATION	2.727031232236889E-5	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999617374672394	WITHOUT_CLASSIFICATION	3.826253276055352E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993374833075837	WITHOUT_CLASSIFICATION	6.625166924163157E-4	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9997387686997683	WITHOUT_CLASSIFICATION	2.6123130023167427E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9998955448759128	WITHOUT_CLASSIFICATION	1.0445512408720557E-4	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9995465086568028	WITHOUT_CLASSIFICATION	4.5349134319717216E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9998836764718858	WITHOUT_CLASSIFICATION	1.1632352811420463E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999989574072089	WITHOUT_CLASSIFICATION	1.0425927910942317E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999899760464154	WITHOUT_CLASSIFICATION	1.0023953584550382E-5	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999905664311206	WITHOUT_CLASSIFICATION	9.433568879366104E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999384463773873	WITHOUT_CLASSIFICATION	6.15536226126834E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.999824466265381	WITHOUT_CLASSIFICATION	1.7553373461907257E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999883139973699	WITHOUT_CLASSIFICATION	1.1686002630234407E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995783849560732	WITHOUT_CLASSIFICATION	4.2161504392679446E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993374833075837	WITHOUT_CLASSIFICATION	6.625166924163157E-4	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.999987712526059	WITHOUT_CLASSIFICATION	1.2287473940980048E-5	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994666892231632	WITHOUT_CLASSIFICATION	5.333107768368801E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9985183177927652	WITHOUT_CLASSIFICATION	0.0014816822072346674	TEST
//special case	WITHOUT_CLASSIFICATION	0.9998386205421486	WITHOUT_CLASSIFICATION	1.6137945785153068E-4	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999865194293378	WITHOUT_CLASSIFICATION	1.3480570662263353E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999291002312735	WITHOUT_CLASSIFICATION	7.089976872648515E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9997284231466843	WITHOUT_CLASSIFICATION	2.7157685331568546E-4	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999617098883874	WITHOUT_CLASSIFICATION	3.8290111612657756E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999406987214831	WITHOUT_CLASSIFICATION	5.9301278516994326E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9996650703942179	WITHOUT_CLASSIFICATION	3.3492960578203183E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999636988177554	WITHOUT_CLASSIFICATION	3.630118224464259E-5	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999246722273535	WITHOUT_CLASSIFICATION	7.53277726464179E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999992964726868	WITHOUT_CLASSIFICATION	7.035273132046207E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998548457576868	WITHOUT_CLASSIFICATION	1.4515424231327035E-4	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998124823368302	WITHOUT_CLASSIFICATION	1.8751766316974533E-4	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999910479860905	WITHOUT_CLASSIFICATION	8.952013909489373E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998446393281345	WITHOUT_CLASSIFICATION	1.5536067186562984E-4	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998150968445774	WITHOUT_CLASSIFICATION	1.8490315542261376E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999433606352942	WITHOUT_CLASSIFICATION	5.663936470578794E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999709767775067	WITHOUT_CLASSIFICATION	2.9023222493315577E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999740490853368	WITHOUT_CLASSIFICATION	2.5950914663146645E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999740490853368	WITHOUT_CLASSIFICATION	2.5950914663146645E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999970440873078	WITHOUT_CLASSIFICATION	2.9559126921759938E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999740490853368	WITHOUT_CLASSIFICATION	2.5950914663146645E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999740490853368	WITHOUT_CLASSIFICATION	2.5950914663146645E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999453959699538	WITHOUT_CLASSIFICATION	5.46040300462624E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.997553893596074	WITHOUT_CLASSIFICATION	0.0024461064039259235	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999604647203253	WITHOUT_CLASSIFICATION	3.953527967460651E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999604647203253	WITHOUT_CLASSIFICATION	3.953527967460651E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999960769846133	WITHOUT_CLASSIFICATION	3.923015386660325E-6	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999269026654838	WITHOUT_CLASSIFICATION	7.309733451623628E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997253304545286	WITHOUT_CLASSIFICATION	2.746695454713403E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9987593731519394	WITHOUT_CLASSIFICATION	0.0012406268480605255	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999000047627236	WITHOUT_CLASSIFICATION	9.99952372765252E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9994235951147403	WITHOUT_CLASSIFICATION	5.764048852597172E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9985449112177718	WITHOUT_CLASSIFICATION	0.0014550887822282527	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999397182326545	WITHOUT_CLASSIFICATION	6.028176734547669E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9987265833522062	WITHOUT_CLASSIFICATION	0.0012734166477937198	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9992587023322931	WITHOUT_CLASSIFICATION	7.412976677069461E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9995570543506705	WITHOUT_CLASSIFICATION	4.429456493295507E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9974451453483957	WITHOUT_CLASSIFICATION	0.0025548546516042468	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999847302919692	WITHOUT_CLASSIFICATION	1.526970803084844E-5	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998185795690498	WITHOUT_CLASSIFICATION	1.814204309502368E-4	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999630243306643	WITHOUT_CLASSIFICATION	3.6975669335713196E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9990024888167841	WITHOUT_CLASSIFICATION	9.975111832159175E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999995946994946	WITHOUT_CLASSIFICATION	4.053005054040037E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999858812866818	WITHOUT_CLASSIFICATION	1.4118713318378626E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999847302919692	WITHOUT_CLASSIFICATION	1.526970803084844E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9997387686997683	WITHOUT_CLASSIFICATION	2.6123130023167427E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.999885333749141	WITHOUT_CLASSIFICATION	1.146662508588935E-4	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999864885040859	WITHOUT_CLASSIFICATION	1.3511495914172034E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998258828337	WITHOUT_CLASSIFICATION	1.7411716629948505E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9998967181161452	WITHOUT_CLASSIFICATION	1.0328188385477128E-4	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999902221424892	WITHOUT_CLASSIFICATION	9.777857510784863E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998666642119266	WITHOUT_CLASSIFICATION	1.3333578807332843E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999822153264739	WITHOUT_CLASSIFICATION	1.7784673526130008E-5	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999891587356177	WITHOUT_CLASSIFICATION	1.0841264382269034E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999933687312127	WITHOUT_CLASSIFICATION	6.631268787302858E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998908628509605	WITHOUT_CLASSIFICATION	1.0913714903948005E-4	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999513214589227	WITHOUT_CLASSIFICATION	4.8678541077220684E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999958567826474	WITHOUT_CLASSIFICATION	4.143217352698059E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999806888139948	WITHOUT_CLASSIFICATION	1.931118600525554E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9996080303920388	WITHOUT_CLASSIFICATION	3.9196960796119315E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999699499184554	WITHOUT_CLASSIFICATION	3.0050081544585146E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999808967752155	WITHOUT_CLASSIFICATION	1.9103224784478113E-5	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999778119168541	WITHOUT_CLASSIFICATION	2.2188083145935776E-5	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999430180510057	WITHOUT_CLASSIFICATION	5.698194899432664E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998725180885311	WITHOUT_CLASSIFICATION	1.274819114689302E-4	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997321805292033	WITHOUT_CLASSIFICATION	2.6781947079659494E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999706586396828	WITHOUT_CLASSIFICATION	2.934136031719526E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999448054546	WITHOUT_CLASSIFICATION	5.519454524713932E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999891587356177	WITHOUT_CLASSIFICATION	1.0841264382269034E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998969752724707	WITHOUT_CLASSIFICATION	1.030247275292657E-4	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9998907722659124	WITHOUT_CLASSIFICATION	1.0922773408754767E-4	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999513183183457	WITHOUT_CLASSIFICATION	4.868168165429358E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999467013043375	WITHOUT_CLASSIFICATION	5.329869566258012E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9998835178039368	WITHOUT_CLASSIFICATION	1.1648219606322318E-4	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.999939027261595	WITHOUT_CLASSIFICATION	6.0972738405001604E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.999989759263359	WITHOUT_CLASSIFICATION	1.0240736640940844E-5	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.999939027261595	WITHOUT_CLASSIFICATION	6.0972738405001604E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9998918548343881	WITHOUT_CLASSIFICATION	1.0814516561186195E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999972493750752	WITHOUT_CLASSIFICATION	2.7506249247988406E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999813342890903	WITHOUT_CLASSIFICATION	1.8665710909750865E-5	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997002213916955	WITHOUT_CLASSIFICATION	2.997786083045905E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9983011055876725	WITHOUT_CLASSIFICATION	0.0016988944123275628	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998175286708847	WITHOUT_CLASSIFICATION	1.8247132911533787E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994820967427197	WITHOUT_CLASSIFICATION	5.179032572802498E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999972493750752	WITHOUT_CLASSIFICATION	2.7506249247988406E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999508766295946	WITHOUT_CLASSIFICATION	4.9123370405408464E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9996584566086646	WITHOUT_CLASSIFICATION	3.41543391335402E-4	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999605658113043	WITHOUT_CLASSIFICATION	3.943418869573659E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999459850752087	WITHOUT_CLASSIFICATION	5.401492479122618E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999955406483102	WITHOUT_CLASSIFICATION	4.459351689805175E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999761161526813	WITHOUT_CLASSIFICATION	2.3883847318764995E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999889306339945	WITHOUT_CLASSIFICATION	1.1069366005506017E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999624694420142	WITHOUT_CLASSIFICATION	3.753055798584868E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664252388589	WITHOUT_CLASSIFICATION	3.357476114113056E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679077675422	WITHOUT_CLASSIFICATION	3.2092232457831545E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679077675422	WITHOUT_CLASSIFICATION	3.2092232457831545E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679077675422	WITHOUT_CLASSIFICATION	3.2092232457831545E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959248230523	WITHOUT_CLASSIFICATION	4.075176947679953E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959248230523	WITHOUT_CLASSIFICATION	4.075176947679953E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9964171200685167	WITHOUT_CLASSIFICATION	0.0035828799314832254	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999943824691124	WITHOUT_CLASSIFICATION	5.617530887559464E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999895863744033	WITHOUT_CLASSIFICATION	1.0413625596723163E-5	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999991055759803	WITHOUT_CLASSIFICATION	8.944240197067778E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999324878611424	WITHOUT_CLASSIFICATION	6.751213885757911E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604996067469	WITHOUT_CLASSIFICATION	3.950039325303837E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619986338742	WITHOUT_CLASSIFICATION	3.800136612572899E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999982118000601	WITHOUT_CLASSIFICATION	1.78819993990223E-5	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671875477264	WITHOUT_CLASSIFICATION	3.2812452273496754E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604996067469	WITHOUT_CLASSIFICATION	3.950039325303837E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619986338742	WITHOUT_CLASSIFICATION	3.800136612572899E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999814541401335	WITHOUT_CLASSIFICATION	1.8545859866519773E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999582907228299	WITHOUT_CLASSIFICATION	4.1709277170100945E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999942596568275	WITHOUT_CLASSIFICATION	5.740343172485081E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999619021554126	WITHOUT_CLASSIFICATION	3.809784458748344E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997559368417859	WITHOUT_CLASSIFICATION	2.440631582142398E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.99960277680575	WITHOUT_CLASSIFICATION	3.9722319424995714E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999729176684375	WITHOUT_CLASSIFICATION	2.7082331562449563E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999800092478744	WITHOUT_CLASSIFICATION	1.9990752125572388E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999911832093784	WITHOUT_CLASSIFICATION	8.816790621601444E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9996037444545444	WITHOUT_CLASSIFICATION	3.9625554545558395E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999726683291293	WITHOUT_CLASSIFICATION	2.7331670870611213E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999830401544509	WITHOUT_CLASSIFICATION	1.695984554903247E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997529504406059	WITHOUT_CLASSIFICATION	2.47049559394168E-4	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9989491368980916	WITHOUT_CLASSIFICATION	0.0010508631019083823	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999606028939477	WITHOUT_CLASSIFICATION	3.939710605229965E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999866522566234	WITHOUT_CLASSIFICATION	1.3347743376605143E-4	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999406057130688	WITHOUT_CLASSIFICATION	5.939428693115906E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999192461218323	WITHOUT_CLASSIFICATION	8.075387816774511E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9993496532230299	WITHOUT_CLASSIFICATION	6.503467769699378E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999910082669268	WITHOUT_CLASSIFICATION	8.991733073248881E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999842674691559	WITHOUT_CLASSIFICATION	1.573253084412269E-5	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9995739376104317	WITHOUT_CLASSIFICATION	4.2606238956825293E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999678725525263	WITHOUT_CLASSIFICATION	3.212744747368492E-5	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603585685433	WITHOUT_CLASSIFICATION	3.96414314567184E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495698469308	WITHOUT_CLASSIFICATION	5.0430153069259074E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995671480791242	WITHOUT_CLASSIFICATION	4.328519208758762E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995671480791242	WITHOUT_CLASSIFICATION	4.328519208758762E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999389597833289	WITHOUT_CLASSIFICATION	6.104021667109669E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999902985756124	WITHOUT_CLASSIFICATION	9.701424387565538E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999131387185675	WITHOUT_CLASSIFICATION	8.686128143256481E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999970541399448	WITHOUT_CLASSIFICATION	2.9458600553111335E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.99983940695893	WITHOUT_CLASSIFICATION	1.6059304106988225E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9996529710477294	WITHOUT_CLASSIFICATION	3.470289522705629E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999965759118882	WITHOUT_CLASSIFICATION	3.4240881118255523E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999938932762715	WITHOUT_CLASSIFICATION	6.1067237285156415E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999039513456914	WITHOUT_CLASSIFICATION	9.604865430865501E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9995198063625942	WITHOUT_CLASSIFICATION	4.801936374058276E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988938072183815	WITHOUT_CLASSIFICATION	0.0011061927816184832	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999871697099695	WITHOUT_CLASSIFICATION	1.2830290030602566E-5	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999849283490974	WITHOUT_CLASSIFICATION	1.5071650902649754E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999112954876781	WITHOUT_CLASSIFICATION	8.870451232188321E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999541616060978	WITHOUT_CLASSIFICATION	4.583839390220457E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999910438071119	WITHOUT_CLASSIFICATION	8.95619288802361E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988938072183815	WITHOUT_CLASSIFICATION	0.0011061927816184832	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988938072183815	WITHOUT_CLASSIFICATION	0.0011061927816184832	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9992270256988226	WITHOUT_CLASSIFICATION	7.729743011774908E-4	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999899080969111	WITHOUT_CLASSIFICATION	1.0091903088892004E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9970808031595757	WITHOUT_CLASSIFICATION	0.0029191968404243553	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999917428664091	WITHOUT_CLASSIFICATION	8.257133590840923E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999741348189625	WITHOUT_CLASSIFICATION	2.5865181037415315E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999866522566234	WITHOUT_CLASSIFICATION	1.3347743376605143E-4	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999471137448044	WITHOUT_CLASSIFICATION	5.288625519561095E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999885102282629	WITHOUT_CLASSIFICATION	1.1489771737183213E-5	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999750743382533	WITHOUT_CLASSIFICATION	2.4925661746834656E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960329082796	WITHOUT_CLASSIFICATION	3.967091720399399E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999934871931024	WITHOUT_CLASSIFICATION	6.512806897528515E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697512555837	WITHOUT_CLASSIFICATION	3.0248744416245676E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999803766862951	WITHOUT_CLASSIFICATION	1.9623313704809733E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999803766862951	WITHOUT_CLASSIFICATION	1.9623313704809733E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999803766862951	WITHOUT_CLASSIFICATION	1.9623313704809733E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999803766862951	WITHOUT_CLASSIFICATION	1.9623313704809733E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627665482292	WITHOUT_CLASSIFICATION	3.723345177075225E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9985935205449484	WITHOUT_CLASSIFICATION	0.0014064794550515565	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999465233443497	WITHOUT_CLASSIFICATION	5.3476655650097387E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999536724151937	WITHOUT_CLASSIFICATION	4.632758480631044E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603787229518	WITHOUT_CLASSIFICATION	3.962127704821887E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644073296177	WITHOUT_CLASSIFICATION	3.559267038239989E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999777698411297	WITHOUT_CLASSIFICATION	2.223015887021068E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999838746003044	WITHOUT_CLASSIFICATION	1.612539969570461E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999854907117284	WITHOUT_CLASSIFICATION	1.4509288271703515E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999619417872339	WITHOUT_CLASSIFICATION	3.805821276615884E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999335398556249	WITHOUT_CLASSIFICATION	6.646014437506726E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999754514899054	WITHOUT_CLASSIFICATION	2.454851009466139E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998032451119175	WITHOUT_CLASSIFICATION	1.9675488808253288E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999890202679727	WITHOUT_CLASSIFICATION	1.0979732027331615E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999890202679727	WITHOUT_CLASSIFICATION	1.0979732027331615E-5	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999933531269095	WITHOUT_CLASSIFICATION	6.6468730904999115E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999804278519456	WITHOUT_CLASSIFICATION	1.9572148054389662E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999983311593097	WITHOUT_CLASSIFICATION	1.6688406902645606E-6	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604775493462	WITHOUT_CLASSIFICATION	3.952245065372251E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999946893114928	WITHOUT_CLASSIFICATION	5.310688507150809E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679077675422	WITHOUT_CLASSIFICATION	3.2092232457831545E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999943307885653	WITHOUT_CLASSIFICATION	5.669211434850197E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999709474268086	WITHOUT_CLASSIFICATION	2.905257319143414E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999909275841508	WITHOUT_CLASSIFICATION	9.072415849245647E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999475082303204	WITHOUT_CLASSIFICATION	5.249176967964367E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998344914030046	WITHOUT_CLASSIFICATION	1.6550859699526927E-4	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999859653952917	WITHOUT_CLASSIFICATION	1.4034604708375768E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999863312870023	WITHOUT_CLASSIFICATION	1.3668712997657236E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998510210839406	WITHOUT_CLASSIFICATION	1.48978916059325E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999678015250948	WITHOUT_CLASSIFICATION	3.2198474905207145E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999684348590758	WITHOUT_CLASSIFICATION	3.15651409241472E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999995677968021	WITHOUT_CLASSIFICATION	4.322031979064877E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999971013893368	WITHOUT_CLASSIFICATION	2.8986106630651986E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999812788015914	WITHOUT_CLASSIFICATION	1.8721198408616785E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992345007536	WITHOUT_CLASSIFICATION	7.654992465440833E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999335781028486	WITHOUT_CLASSIFICATION	6.642189715144932E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999959611006346	WITHOUT_CLASSIFICATION	4.03889936547163E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999600079207339	WITHOUT_CLASSIFICATION	3.9992079266124005E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998800495916923	WITHOUT_CLASSIFICATION	1.1995040830776323E-4	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9997223760226412	WITHOUT_CLASSIFICATION	2.7762397735870325E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998657646441891	WITHOUT_CLASSIFICATION	1.3423535581083863E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998587339358125	WITHOUT_CLASSIFICATION	1.4126606418751365E-4	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999659136302	WITHOUT_CLASSIFICATION	3.408636990520818E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9996390582228931	WITHOUT_CLASSIFICATION	3.6094177710686176E-4	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999077585470532	WITHOUT_CLASSIFICATION	9.224145294680427E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999847100565081	WITHOUT_CLASSIFICATION	1.528994349193829E-5	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9978202484115029	WITHOUT_CLASSIFICATION	0.002179751588497187	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998367064509	WITHOUT_CLASSIFICATION	1.632935491160188E-6	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999981388573933	WITHOUT_CLASSIFICATION	1.861142606694159E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999652551257969	WITHOUT_CLASSIFICATION	3.474487420307062E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998003855633182	WITHOUT_CLASSIFICATION	1.9961443668186672E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999346156219252	WITHOUT_CLASSIFICATION	6.538437807481216E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999767050581791	WITHOUT_CLASSIFICATION	2.3294941820865093E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9996614239613733	WITHOUT_CLASSIFICATION	3.385760386267452E-4	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999981463860127	WITHOUT_CLASSIFICATION	1.853613987300405E-5	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999360787920455	WITHOUT_CLASSIFICATION	6.39212079545627E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9993606976191204	WITHOUT_CLASSIFICATION	6.393023808796187E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999390370662224	WITHOUT_CLASSIFICATION	6.09629337775739E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9998808616010852	WITHOUT_CLASSIFICATION	1.1913839891469205E-4	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999976514378402	WITHOUT_CLASSIFICATION	2.348562159808372E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9991922138437792	WITHOUT_CLASSIFICATION	8.077861562206867E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998619189022903	WITHOUT_CLASSIFICATION	1.38081097709791E-4	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9952662564064589	WITHOUT_CLASSIFICATION	0.00473374359354113	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999779707482395	WITHOUT_CLASSIFICATION	2.2029251760426365E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9981063246652218	WITHOUT_CLASSIFICATION	0.0018936753347782984	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999925104836585	WITHOUT_CLASSIFICATION	7.48951634149167E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999896499172338	WITHOUT_CLASSIFICATION	1.035008276621003E-5	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9995664001902015	WITHOUT_CLASSIFICATION	4.3359980979850647E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998364731348869	WITHOUT_CLASSIFICATION	1.6352686511315127E-4	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999627560414974	WITHOUT_CLASSIFICATION	3.7243958502500185E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999433474545084	WITHOUT_CLASSIFICATION	5.665254549160028E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999980576542839	WITHOUT_CLASSIFICATION	1.9423457160936155E-5	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998436904150112	WITHOUT_CLASSIFICATION	1.5630958498881735E-4	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999658701489992	WITHOUT_CLASSIFICATION	3.4129851000831996E-5	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998652965530151	WITHOUT_CLASSIFICATION	1.3470344698497566E-4	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999792399939758	WITHOUT_CLASSIFICATION	2.076000602428767E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999504412672383	WITHOUT_CLASSIFICATION	4.9558732761715436E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999989337295909	WITHOUT_CLASSIFICATION	1.0662704090250554E-6	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9995733154745848	WITHOUT_CLASSIFICATION	4.2668452541525144E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9997377319734168	WITHOUT_CLASSIFICATION	2.6226802658326805E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999922324913763	WITHOUT_CLASSIFICATION	7.767508623645538E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998491277978375	WITHOUT_CLASSIFICATION	1.508722021624872E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999989592287856	WITHOUT_CLASSIFICATION	1.0407712144051297E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999439568507059	WITHOUT_CLASSIFICATION	5.60431492941661E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999988782325848	WITHOUT_CLASSIFICATION	1.1217674151616684E-6	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999862015214283	WITHOUT_CLASSIFICATION	1.3798478571710893E-5	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999898860004091	WITHOUT_CLASSIFICATION	1.0113999590897116E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999884912843438	WITHOUT_CLASSIFICATION	1.1508715656192656E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999926194903744	WITHOUT_CLASSIFICATION	7.380509625517704E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999988973274409	WITHOUT_CLASSIFICATION	1.1026725590980719E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9998972018040533	WITHOUT_CLASSIFICATION	1.0279819594679952E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999983836618798	WITHOUT_CLASSIFICATION	1.6163381202179019E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997283292218856	WITHOUT_CLASSIFICATION	2.716707781144208E-4	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997396837575601	WITHOUT_CLASSIFICATION	2.603162424398928E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9995638440958774	WITHOUT_CLASSIFICATION	4.361559041225938E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996794676007444	WITHOUT_CLASSIFICATION	3.205323992555252E-4	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999871492220557	WITHOUT_CLASSIFICATION	1.2850777944242535E-5	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999805958967047	WITHOUT_CLASSIFICATION	1.9404103295253504E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999736594183148	WITHOUT_CLASSIFICATION	2.6340581685166423E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999446404397958	WITHOUT_CLASSIFICATION	5.535956020407603E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997238379433148	WITHOUT_CLASSIFICATION	2.7616205668524107E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998051326797114	WITHOUT_CLASSIFICATION	1.9486732028854283E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999051103895841	WITHOUT_CLASSIFICATION	9.488961041586317E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997196082917448	WITHOUT_CLASSIFICATION	2.803917082552032E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998154784468501	WITHOUT_CLASSIFICATION	1.8452155314988434E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997806145992308	WITHOUT_CLASSIFICATION	2.1938540076913354E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9998595393237036	WITHOUT_CLASSIFICATION	1.4046067629637184E-4	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999662321989558	WITHOUT_CLASSIFICATION	3.3767801044190436E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999828036286347	WITHOUT_CLASSIFICATION	1.719637136530324E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999973015424821	WITHOUT_CLASSIFICATION	2.6984575178961572E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998252703893179	WITHOUT_CLASSIFICATION	1.7472961068213188E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999918033585751	WITHOUT_CLASSIFICATION	8.196641424952314E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999569373877365	WITHOUT_CLASSIFICATION	4.3062612263439806E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999569373877365	WITHOUT_CLASSIFICATION	4.3062612263439806E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998933600614738	WITHOUT_CLASSIFICATION	1.0663993852613045E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997810078793916	WITHOUT_CLASSIFICATION	2.1899212060838723E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999607556423559	WITHOUT_CLASSIFICATION	3.924435764405253E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998197830423126	WITHOUT_CLASSIFICATION	1.8021695768738778E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999725913874327	WITHOUT_CLASSIFICATION	2.7408612567440206E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998957657761951	WITHOUT_CLASSIFICATION	0.0010423422380490125	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995641088915738	WITHOUT_CLASSIFICATION	4.358911084262679E-4	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999684924385617	WITHOUT_CLASSIFICATION	3.150756143843033E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9980362204039316	WITHOUT_CLASSIFICATION	0.0019637795960684348	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999920979597383	WITHOUT_CLASSIFICATION	7.902040261629208E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999814442793076	WITHOUT_CLASSIFICATION	1.855572069241371E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998235123709939	WITHOUT_CLASSIFICATION	1.7648762900616797E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999861632890132	WITHOUT_CLASSIFICATION	1.383671098682159E-5	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999994362331225	WITHOUT_CLASSIFICATION	5.6376687750166105E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998300820679362	WITHOUT_CLASSIFICATION	1.699179320637925E-4	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999734216412948	WITHOUT_CLASSIFICATION	2.6578358705196218E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999734216412948	WITHOUT_CLASSIFICATION	2.6578358705196218E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999900914946735	WITHOUT_CLASSIFICATION	9.908505326447649E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997707024767799	WITHOUT_CLASSIFICATION	2.2929752322008932E-4	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999863035533484	WITHOUT_CLASSIFICATION	1.3696446651616145E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999660507317485	WITHOUT_CLASSIFICATION	3.3949268251564756E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.99999152517347	WITHOUT_CLASSIFICATION	8.474826529995994E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999843597755774	WITHOUT_CLASSIFICATION	1.564022442255986E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999843597755774	WITHOUT_CLASSIFICATION	1.564022442255986E-5	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999547392141546	WITHOUT_CLASSIFICATION	4.5260785845519446E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999806102723021	WITHOUT_CLASSIFICATION	1.938972769795903E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998514081232884	WITHOUT_CLASSIFICATION	1.4859187671162948E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999996889148726	WITHOUT_CLASSIFICATION	3.110851273959072E-7	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999626709008889	WITHOUT_CLASSIFICATION	3.73290991111388E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999967537350667	WITHOUT_CLASSIFICATION	3.246264933305817E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999921631145288	WITHOUT_CLASSIFICATION	7.836885471275754E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999972189482714	WITHOUT_CLASSIFICATION	2.7810517285042863E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999263302290198	WITHOUT_CLASSIFICATION	7.366977098028247E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999921676596617	WITHOUT_CLASSIFICATION	7.832340338358433E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999456418743581	WITHOUT_CLASSIFICATION	5.435812564191139E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.982870816505621	WITHOUT_CLASSIFICATION	0.017129183494379033	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999730715281597	WITHOUT_CLASSIFICATION	2.6928471840304516E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999586183953762	WITHOUT_CLASSIFICATION	4.138160462380259E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998011701779964	WITHOUT_CLASSIFICATION	1.98829822003588E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999416968690258	WITHOUT_CLASSIFICATION	5.830313097415734E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997939965783137	WITHOUT_CLASSIFICATION	2.060034216863625E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999962579377482	WITHOUT_CLASSIFICATION	3.742062251795018E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999541512887801	WITHOUT_CLASSIFICATION	4.5848711219990384E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999605684026714	WITHOUT_CLASSIFICATION	3.9431597328433246E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999824130372152	WITHOUT_CLASSIFICATION	1.758696278479863E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999881385566273	WITHOUT_CLASSIFICATION	1.1861443372731238E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999698767472004	WITHOUT_CLASSIFICATION	3.0123252799664814E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999521607872809	WITHOUT_CLASSIFICATION	4.7839212719182045E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998953431804387	WITHOUT_CLASSIFICATION	1.0465681956130579E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999991536143353	WITHOUT_CLASSIFICATION	8.463856647012346E-6	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999996746851583	WITHOUT_CLASSIFICATION	3.2531484168901945E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989915944067	WITHOUT_CLASSIFICATION	1.008405593313899E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996144366780969	WITHOUT_CLASSIFICATION	3.855633219031759E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9998835427315493	WITHOUT_CLASSIFICATION	1.1645726845073548E-4	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999948627432671	WITHOUT_CLASSIFICATION	5.137256732886215E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9978461912976755	WITHOUT_CLASSIFICATION	0.002153808702324487	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999648957998042	WITHOUT_CLASSIFICATION	3.510420019580616E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9996182368632859	WITHOUT_CLASSIFICATION	3.8176313671417896E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9998987872931697	WITHOUT_CLASSIFICATION	1.0121270683020444E-4	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999923554665542	WITHOUT_CLASSIFICATION	7.644533445702428E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999894889268764	WITHOUT_CLASSIFICATION	1.051107312361694E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997176139244183	WITHOUT_CLASSIFICATION	2.8238607558170764E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999947635554641	WITHOUT_CLASSIFICATION	5.236444535968496E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999923003658359	WITHOUT_CLASSIFICATION	7.699634164117136E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997025974446831	WITHOUT_CLASSIFICATION	2.974025553168055E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998903820879216	WITHOUT_CLASSIFICATION	1.096179120784223E-4	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999974536080294	WITHOUT_CLASSIFICATION	2.5463919705776068E-6	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994782211729283	WITHOUT_CLASSIFICATION	5.217788270717331E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999894889268764	WITHOUT_CLASSIFICATION	1.051107312361694E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997176139244183	WITHOUT_CLASSIFICATION	2.8238607558170764E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9986471170101225	WITHOUT_CLASSIFICATION	0.0013528829898774354	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998968771857277	WITHOUT_CLASSIFICATION	1.031228142722697E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999992351911179	WITHOUT_CLASSIFICATION	7.648088821054892E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999075909367635	WITHOUT_CLASSIFICATION	9.240906323643158E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998669433947052	WITHOUT_CLASSIFICATION	1.3305660529479564E-4	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9997127913311485	WITHOUT_CLASSIFICATION	2.872086688514159E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996207310683747	WITHOUT_CLASSIFICATION	3.7926893162534316E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999693621312538	WITHOUT_CLASSIFICATION	3.063786874625028E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999900438067064	WITHOUT_CLASSIFICATION	9.956193293655795E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999625233013124	WITHOUT_CLASSIFICATION	3.74766986875808E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999942244826223	WITHOUT_CLASSIFICATION	5.775517377682949E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999625233013124	WITHOUT_CLASSIFICATION	3.74766986875808E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999025575182218	WITHOUT_CLASSIFICATION	9.744248177826142E-5	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995635950317757	WITHOUT_CLASSIFICATION	4.3640496822428665E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999025575182218	WITHOUT_CLASSIFICATION	9.744248177826142E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998555060874551	WITHOUT_CLASSIFICATION	1.4449391254481205E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999493818686689	WITHOUT_CLASSIFICATION	5.0618131331122635E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9996426077495496	WITHOUT_CLASSIFICATION	3.5739225045045003E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9996426077495496	WITHOUT_CLASSIFICATION	3.5739225045045003E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995758674828448	WITHOUT_CLASSIFICATION	4.241325171552272E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995788487699651	WITHOUT_CLASSIFICATION	4.2115123003485806E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995758674828448	WITHOUT_CLASSIFICATION	4.241325171552272E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997021046448853	WITHOUT_CLASSIFICATION	2.9789535511478454E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999805188488666	WITHOUT_CLASSIFICATION	1.9481151133408586E-4	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998867669624454	WITHOUT_CLASSIFICATION	1.1323303755460662E-4	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995685691915598	WITHOUT_CLASSIFICATION	4.314308084402357E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999673670029614	WITHOUT_CLASSIFICATION	3.2632997038578315E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9998836782476048	WITHOUT_CLASSIFICATION	1.1632175239515649E-4	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999444149574575	WITHOUT_CLASSIFICATION	5.558504254254018E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999895914373099	WITHOUT_CLASSIFICATION	1.0408562690143536E-5	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996419344449938	WITHOUT_CLASSIFICATION	3.5806555500614604E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999788280807095	WITHOUT_CLASSIFICATION	2.1171919290493092E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999727490069941	WITHOUT_CLASSIFICATION	2.7250993005892796E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999914836539403	WITHOUT_CLASSIFICATION	8.516346059707863E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999947921765349	WITHOUT_CLASSIFICATION	5.207823465157764E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999729789181514	WITHOUT_CLASSIFICATION	2.7021081848555502E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999910227563458	WITHOUT_CLASSIFICATION	8.977243654288839E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997706680077901	WITHOUT_CLASSIFICATION	2.2933199220999146E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998848139488106	WITHOUT_CLASSIFICATION	1.1518605118936283E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999475430006811	WITHOUT_CLASSIFICATION	5.2456999318906014E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998174116568005	WITHOUT_CLASSIFICATION	1.8258834319950334E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999455215606157	WITHOUT_CLASSIFICATION	5.44784393843557E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999207503197682	WITHOUT_CLASSIFICATION	7.92496802317548E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995779132216347	WITHOUT_CLASSIFICATION	4.2208677836526196E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999893977920308	WITHOUT_CLASSIFICATION	1.0602207969203378E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998867669624454	WITHOUT_CLASSIFICATION	1.1323303755460662E-4	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999774251758727	WITHOUT_CLASSIFICATION	2.2574824127304585E-5	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998811779556437	WITHOUT_CLASSIFICATION	1.1882204435634543E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9983417835281926	WITHOUT_CLASSIFICATION	0.0016582164718073988	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9998862860089359	WITHOUT_CLASSIFICATION	1.1371399106419283E-4	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999944932417129	WITHOUT_CLASSIFICATION	5.506758287123352E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998407067901092	WITHOUT_CLASSIFICATION	1.5929320989078105E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997021046448853	WITHOUT_CLASSIFICATION	2.9789535511478454E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997021046448853	WITHOUT_CLASSIFICATION	2.9789535511478454E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999015846587794	WITHOUT_CLASSIFICATION	9.841534122057229E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998342002567302	WITHOUT_CLASSIFICATION	1.657997432698477E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998933231456884	WITHOUT_CLASSIFICATION	1.0667685431168897E-4	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999008947170911	WITHOUT_CLASSIFICATION	9.91052829088722E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9964697232231057	WITHOUT_CLASSIFICATION	0.0035302767768944214	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999939829183693	WITHOUT_CLASSIFICATION	6.017081630792377E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999899870959161	WITHOUT_CLASSIFICATION	1.001290408375707E-5	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999727233452952	WITHOUT_CLASSIFICATION	2.727665470480069E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997515839020945	WITHOUT_CLASSIFICATION	2.4841609790557975E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999989144846824	WITHOUT_CLASSIFICATION	1.0855153175979574E-5	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996419344449938	WITHOUT_CLASSIFICATION	3.5806555500614604E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998840748965896	WITHOUT_CLASSIFICATION	1.1592510341046091E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999989144846824	WITHOUT_CLASSIFICATION	1.0855153175979574E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999956965028376	WITHOUT_CLASSIFICATION	4.3034971623956856E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999983888305539	WITHOUT_CLASSIFICATION	1.6111694461863814E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.99990136193491	WITHOUT_CLASSIFICATION	9.863806509000317E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998851256530186	WITHOUT_CLASSIFICATION	1.1487434698142231E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999284600934183	WITHOUT_CLASSIFICATION	7.153990658171757E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982125167199	WITHOUT_CLASSIFICATION	1.7874832800688415E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960270151739	WITHOUT_CLASSIFICATION	3.972984826152676E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999988552916236	WITHOUT_CLASSIFICATION	1.144708376442332E-6	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999803109652461	WITHOUT_CLASSIFICATION	1.9689034753898843E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999894593233907	WITHOUT_CLASSIFICATION	1.0540676609308736E-4	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998518560024773	WITHOUT_CLASSIFICATION	1.4814399752268627E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999989144846824	WITHOUT_CLASSIFICATION	1.0855153175979574E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999284600934183	WITHOUT_CLASSIFICATION	7.153990658171757E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960270151739	WITHOUT_CLASSIFICATION	3.972984826152676E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998314286030825	WITHOUT_CLASSIFICATION	1.6857139691756228E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999965458737862	WITHOUT_CLASSIFICATION	3.454126213739097E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999747932372898	WITHOUT_CLASSIFICATION	2.5206762710257635E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9995608055250662	WITHOUT_CLASSIFICATION	4.391944749338074E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999914552912869	WITHOUT_CLASSIFICATION	8.544708713136613E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999894908274948	WITHOUT_CLASSIFICATION	1.050917250532404E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999956965028376	WITHOUT_CLASSIFICATION	4.3034971623956856E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995610918491177	WITHOUT_CLASSIFICATION	4.3890815088230107E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999884432731244	WITHOUT_CLASSIFICATION	1.1556726875596651E-4	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988761667964255	WITHOUT_CLASSIFICATION	0.0011238332035744967	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9990178919319025	WITHOUT_CLASSIFICATION	9.821080680975027E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9990048254138414	WITHOUT_CLASSIFICATION	9.951745861586192E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999505560385646	WITHOUT_CLASSIFICATION	4.944396143538534E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998555060874551	WITHOUT_CLASSIFICATION	1.4449391254481205E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822617648444	WITHOUT_CLASSIFICATION	1.7738235155662868E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998966275336708	WITHOUT_CLASSIFICATION	1.0337246632929912E-4	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9995045371419334	WITHOUT_CLASSIFICATION	4.954628580666747E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999391041319453	WITHOUT_CLASSIFICATION	6.089586805475037E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999213685027145	WITHOUT_CLASSIFICATION	7.863149728546538E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999942971780152	WITHOUT_CLASSIFICATION	5.702821984689104E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999895941787869	WITHOUT_CLASSIFICATION	1.0405821213210555E-5	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999509436095427	WITHOUT_CLASSIFICATION	4.9056390457187584E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999894908274948	WITHOUT_CLASSIFICATION	1.050917250532404E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999729366035556	WITHOUT_CLASSIFICATION	2.706339644441264E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.999600625296922	WITHOUT_CLASSIFICATION	3.9937470307811366E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999972144254837	WITHOUT_CLASSIFICATION	2.7855745161947066E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998979339568476	WITHOUT_CLASSIFICATION	1.02066043152434E-4	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997193916584548	WITHOUT_CLASSIFICATION	2.806083415452193E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999116295194445	WITHOUT_CLASSIFICATION	8.837048055555083E-5	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999898930782856	WITHOUT_CLASSIFICATION	1.0106921714411133E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998974235671186	WITHOUT_CLASSIFICATION	1.0257643288128335E-4	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998542171316869	WITHOUT_CLASSIFICATION	1.457828683131669E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9998554256674841	WITHOUT_CLASSIFICATION	1.4457433251582907E-4	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998916804404067	WITHOUT_CLASSIFICATION	1.0831955959329903E-4	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999956981844543	WITHOUT_CLASSIFICATION	4.3018155456005015E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999566162449963	WITHOUT_CLASSIFICATION	4.338375500359347E-5	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999991032744024	WITHOUT_CLASSIFICATION	8.967255975894097E-6	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999947912735508	WITHOUT_CLASSIFICATION	5.2087264490957E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999613810359623	WITHOUT_CLASSIFICATION	3.8618964037643925E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9991170474420601	WITHOUT_CLASSIFICATION	8.829525579399402E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999948036695813	WITHOUT_CLASSIFICATION	5.196330418696238E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999607044036996	WITHOUT_CLASSIFICATION	3.9295596300452696E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999890253089473	WITHOUT_CLASSIFICATION	1.0974691052775586E-5	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999442164238925	WITHOUT_CLASSIFICATION	5.578357610746084E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9952687028749795	WITHOUT_CLASSIFICATION	0.004731297125020417	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9979880896061847	WITHOUT_CLASSIFICATION	0.0020119103938153766	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9992461724446587	WITHOUT_CLASSIFICATION	7.538275553413619E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999784988589073	WITHOUT_CLASSIFICATION	2.150114109270537E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9996824231664686	WITHOUT_CLASSIFICATION	3.1757683353144544E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999109022534005	WITHOUT_CLASSIFICATION	8.909774659939226E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999714970764506	WITHOUT_CLASSIFICATION	2.850292354946021E-5	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999640495521823	WITHOUT_CLASSIFICATION	3.5950447817746426E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999639726955356	WITHOUT_CLASSIFICATION	3.6027304464330374E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999978763377409	WITHOUT_CLASSIFICATION	2.1236622590970523E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999293382888123	WITHOUT_CLASSIFICATION	7.066171118769945E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999606208243423	WITHOUT_CLASSIFICATION	3.9379175657652375E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999339410841913	WITHOUT_CLASSIFICATION	6.605891580873039E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999293382888123	WITHOUT_CLASSIFICATION	7.066171118769945E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999978763377409	WITHOUT_CLASSIFICATION	2.1236622590970523E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999606208243423	WITHOUT_CLASSIFICATION	3.9379175657652375E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999644149815116	WITHOUT_CLASSIFICATION	3.558501848837941E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999691086728753	WITHOUT_CLASSIFICATION	3.089132712472052E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9996370430011714	WITHOUT_CLASSIFICATION	3.6295699882849853E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999891778986245	WITHOUT_CLASSIFICATION	1.0822101375587467E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999976657979049	WITHOUT_CLASSIFICATION	2.3342020951355525E-6	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9970725918579183	WITHOUT_CLASSIFICATION	0.0029274081420816774	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9992687166405101	WITHOUT_CLASSIFICATION	7.312833594898954E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996762710187361	WITHOUT_CLASSIFICATION	3.2372898126385686E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999668225704273	WITHOUT_CLASSIFICATION	3.317742957268879E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998829990231716	WITHOUT_CLASSIFICATION	1.1700097682836318E-4	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999899306224723	WITHOUT_CLASSIFICATION	1.0069377527706753E-5	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998385945120195	WITHOUT_CLASSIFICATION	1.6140548798051157E-4	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999691610237138	WITHOUT_CLASSIFICATION	3.0838976286187085E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998800145131638	WITHOUT_CLASSIFICATION	1.1998548683626829E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999590432234113	WITHOUT_CLASSIFICATION	4.095677658867216E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999197315316625	WITHOUT_CLASSIFICATION	8.026846833760357E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999277084560002	WITHOUT_CLASSIFICATION	7.22915439998092E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999981018614512	WITHOUT_CLASSIFICATION	1.898138548752174E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999720236384365	WITHOUT_CLASSIFICATION	2.7976361563523473E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999413501715355	WITHOUT_CLASSIFICATION	5.864982846445772E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999929391071427	WITHOUT_CLASSIFICATION	7.060892857302292E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999928998720693	WITHOUT_CLASSIFICATION	7.100127930650143E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999638593445127	WITHOUT_CLASSIFICATION	3.6140655487294614E-5	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999590802409805	WITHOUT_CLASSIFICATION	4.091975901949045E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999413501715355	WITHOUT_CLASSIFICATION	5.864982846445772E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999413501715355	WITHOUT_CLASSIFICATION	5.864982846445772E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999886865207297	WITHOUT_CLASSIFICATION	1.1313479270334348E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999886865207297	WITHOUT_CLASSIFICATION	1.1313479270334348E-5	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999421012079835	WITHOUT_CLASSIFICATION	5.7898792016471864E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999277084560002	WITHOUT_CLASSIFICATION	7.22915439998092E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998916385125539	WITHOUT_CLASSIFICATION	1.0836148744612151E-4	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.99998751555808	WITHOUT_CLASSIFICATION	1.248444191993989E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997507531360815	WITHOUT_CLASSIFICATION	2.492468639183979E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997507531360815	WITHOUT_CLASSIFICATION	2.492468639183979E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999954140555085	WITHOUT_CLASSIFICATION	4.5859444915060024E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9985661553777236	WITHOUT_CLASSIFICATION	0.0014338446222763419	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999968820202148	WITHOUT_CLASSIFICATION	3.117979785209792E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998667025320118	WITHOUT_CLASSIFICATION	1.3329746798818157E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997565923439031	WITHOUT_CLASSIFICATION	2.43407656096769E-4	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999343394739	WITHOUT_CLASSIFICATION	6.566052609912761E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999319029051822	WITHOUT_CLASSIFICATION	6.809709481777984E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999355313787857	WITHOUT_CLASSIFICATION	6.446862121430256E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9998802173271668	WITHOUT_CLASSIFICATION	1.1978267283325049E-4	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999920838865914	WITHOUT_CLASSIFICATION	7.91611340861779E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998977664432437	WITHOUT_CLASSIFICATION	1.0223355675640862E-4	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9995206286139646	WITHOUT_CLASSIFICATION	4.79371386035289E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999699787698463	WITHOUT_CLASSIFICATION	3.002123015369507E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9998834625421656	WITHOUT_CLASSIFICATION	1.1653745783428783E-4	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9990476614022195	WITHOUT_CLASSIFICATION	9.523385977804581E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999864504075255	WITHOUT_CLASSIFICATION	1.3549592474519041E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636930617053	WITHOUT_CLASSIFICATION	3.630693829468452E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999946777755223	WITHOUT_CLASSIFICATION	5.322224477746173E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999524329194989	WITHOUT_CLASSIFICATION	4.756708050111854E-5	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999893397931298	WITHOUT_CLASSIFICATION	1.0660206870211024E-5	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999892352596202	WITHOUT_CLASSIFICATION	1.0764740379710413E-5	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9997416228631871	WITHOUT_CLASSIFICATION	2.583771368128001E-4	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999939630150401	WITHOUT_CLASSIFICATION	6.036984959890744E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999915437226257	WITHOUT_CLASSIFICATION	8.456277374328721E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995607219105491	WITHOUT_CLASSIFICATION	4.3927808945081023E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999819071207067	WITHOUT_CLASSIFICATION	1.8092879293332795E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998542171316869	WITHOUT_CLASSIFICATION	1.457828683131669E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998786947993816	WITHOUT_CLASSIFICATION	1.2130520061842483E-4	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999976076104365	WITHOUT_CLASSIFICATION	2.392389563388437E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99996013060773	WITHOUT_CLASSIFICATION	3.986939227007114E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999889772762734	WITHOUT_CLASSIFICATION	1.1022723726595709E-4	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999889772762734	WITHOUT_CLASSIFICATION	1.1022723726595709E-4	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999847657883265	WITHOUT_CLASSIFICATION	1.523421167340753E-5	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999896054859564	WITHOUT_CLASSIFICATION	1.0394514043595224E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999865606681783	WITHOUT_CLASSIFICATION	1.3439331821858483E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999865606681783	WITHOUT_CLASSIFICATION	1.3439331821858483E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999303441504631	WITHOUT_CLASSIFICATION	6.965584953680914E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998564181591308	WITHOUT_CLASSIFICATION	1.4358184086921803E-4	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999441511755486	WITHOUT_CLASSIFICATION	5.584882445150196E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999741348189625	WITHOUT_CLASSIFICATION	2.5865181037415315E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998908628509605	WITHOUT_CLASSIFICATION	1.0913714903948005E-4	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9987559589441176	WITHOUT_CLASSIFICATION	0.0012440410558823285	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999809396184631	WITHOUT_CLASSIFICATION	1.906038153684997E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999783529824878	WITHOUT_CLASSIFICATION	2.164701751216252E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999783529824878	WITHOUT_CLASSIFICATION	2.164701751216252E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999781767711531	WITHOUT_CLASSIFICATION	2.1823228846945674E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999295655465501	WITHOUT_CLASSIFICATION	7.043445345000755E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999295655465501	WITHOUT_CLASSIFICATION	7.043445345000755E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999811313010527	WITHOUT_CLASSIFICATION	1.8868698947299072E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999741027148107	WITHOUT_CLASSIFICATION	2.5897285189275817E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999962976035673	WITHOUT_CLASSIFICATION	3.7023964327946724E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999904605548926	WITHOUT_CLASSIFICATION	9.539445107468095E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996253356945864	WITHOUT_CLASSIFICATION	3.746643054136036E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999390891251562	WITHOUT_CLASSIFICATION	6.0910874843835095E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993656978577119	WITHOUT_CLASSIFICATION	6.343021422880568E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999500312599281	WITHOUT_CLASSIFICATION	4.996874007195779E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9991630122660446	WITHOUT_CLASSIFICATION	8.369877339552976E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924801424004	WITHOUT_CLASSIFICATION	7.519857599603884E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999897066436081	WITHOUT_CLASSIFICATION	1.0293356391824231E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998841230286609	WITHOUT_CLASSIFICATION	1.1587697133911737E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998841230286609	WITHOUT_CLASSIFICATION	1.1587697133911737E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998841230286609	WITHOUT_CLASSIFICATION	1.1587697133911737E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998841230286609	WITHOUT_CLASSIFICATION	1.1587697133911737E-4	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999663113481818	WITHOUT_CLASSIFICATION	3.368865181821798E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999022388058306	WITHOUT_CLASSIFICATION	9.776119416938019E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9998882372730806	WITHOUT_CLASSIFICATION	1.1176272691926929E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9994976272445357	WITHOUT_CLASSIFICATION	5.02372755464271E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9990403580746773	WITHOUT_CLASSIFICATION	9.596419253227119E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9971443682470085	WITHOUT_CLASSIFICATION	0.002855631752991481	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995455282774455	WITHOUT_CLASSIFICATION	4.54471722554474E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999996160772592	WITHOUT_CLASSIFICATION	3.8392274085044284E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999693574848826	WITHOUT_CLASSIFICATION	3.064251511734161E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999756853773496	WITHOUT_CLASSIFICATION	2.431462265040678E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998745690216003	WITHOUT_CLASSIFICATION	1.2543097839960433E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9771737024620041	WITHOUT_CLASSIFICATION	0.022826297537995904	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9957361878190351	WITHOUT_CLASSIFICATION	0.004263812180964894	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999735803416817	WITHOUT_CLASSIFICATION	2.6419658318238463E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998745690216003	WITHOUT_CLASSIFICATION	1.2543097839960433E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8788713087181379	WITHOUT_CLASSIFICATION	0.12112869128186202	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999971650796116	WITHOUT_CLASSIFICATION	2.834920388382787E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999488597759434	WITHOUT_CLASSIFICATION	5.1140224056537004E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998006169798045	WITHOUT_CLASSIFICATION	1.9938302019549585E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999938208934296	WITHOUT_CLASSIFICATION	6.179106570396236E-5	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998158678809544	WITHOUT_CLASSIFICATION	1.841321190456146E-4	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999962384108799	WITHOUT_CLASSIFICATION	3.761589120102694E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998921386104395	WITHOUT_CLASSIFICATION	1.0786138956045322E-4	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828907562162	WITHOUT_CLASSIFICATION	1.7109243783876253E-5	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999895032294287	WITHOUT_CLASSIFICATION	1.0496770571324247E-5	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828907562162	WITHOUT_CLASSIFICATION	1.7109243783876253E-5	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999800422401797	WITHOUT_CLASSIFICATION	1.9957759820311045E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9996912271817647	WITHOUT_CLASSIFICATION	3.087728182352938E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9985761768076559	WITHOUT_CLASSIFICATION	0.0014238231923441253	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999949612009963	WITHOUT_CLASSIFICATION	5.038799003693625E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999923257355663	WITHOUT_CLASSIFICATION	7.67426443372473E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999893091001493	WITHOUT_CLASSIFICATION	1.0690899850612214E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999833064870929	WITHOUT_CLASSIFICATION	1.669351290721627E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999580506567152	WITHOUT_CLASSIFICATION	4.194934328493339E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999833064870929	WITHOUT_CLASSIFICATION	1.669351290721627E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999890540818108	WITHOUT_CLASSIFICATION	1.094591818910585E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999061558016387	WITHOUT_CLASSIFICATION	9.38441983613603E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999609309049325	WITHOUT_CLASSIFICATION	3.906909506750518E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9996077709389574	WITHOUT_CLASSIFICATION	3.922290610426292E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999893091001493	WITHOUT_CLASSIFICATION	1.0690899850612214E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999580506567152	WITHOUT_CLASSIFICATION	4.194934328493339E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999890540818108	WITHOUT_CLASSIFICATION	1.094591818910585E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999859304847013	WITHOUT_CLASSIFICATION	1.4069515298747678E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9998875508577111	WITHOUT_CLASSIFICATION	1.1244914228901815E-4	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.999951056456882	WITHOUT_CLASSIFICATION	4.894354311802578E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999538706976576	WITHOUT_CLASSIFICATION	4.612930234252387E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999821787142095	WITHOUT_CLASSIFICATION	1.7821285790519018E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999900807991745	WITHOUT_CLASSIFICATION	9.919200825451063E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636930617053	WITHOUT_CLASSIFICATION	3.630693829468452E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999061558016387	WITHOUT_CLASSIFICATION	9.38441983613603E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999964457230311	WITHOUT_CLASSIFICATION	3.554276968725912E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996321368226898	WITHOUT_CLASSIFICATION	3.678631773100941E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999974360410551	WITHOUT_CLASSIFICATION	2.5639589449045543E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636930617053	WITHOUT_CLASSIFICATION	3.630693829468452E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999838100183478	WITHOUT_CLASSIFICATION	1.6189981652202322E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636930617053	WITHOUT_CLASSIFICATION	3.630693829468452E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999627136732205	WITHOUT_CLASSIFICATION	3.7286326779526976E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999902047034223	WITHOUT_CLASSIFICATION	9.795296577725134E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995879966255072	WITHOUT_CLASSIFICATION	4.1200337449281017E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999937202090811	WITHOUT_CLASSIFICATION	6.2797909189229575E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999997765389739	WITHOUT_CLASSIFICATION	2.2346102610805283E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999894895079662	WITHOUT_CLASSIFICATION	1.0510492033823723E-5	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999936757872704	WITHOUT_CLASSIFICATION	6.324212729550568E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997851351599011	WITHOUT_CLASSIFICATION	2.148648400989145E-4	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997730494031899	WITHOUT_CLASSIFICATION	2.2695059681001792E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9994876144119128	WITHOUT_CLASSIFICATION	5.123855880872188E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999987179987454	WITHOUT_CLASSIFICATION	1.2820012546405404E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9994869195014037	WITHOUT_CLASSIFICATION	5.130804985962677E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9909604508807086	WITHOUT_CLASSIFICATION	0.009039549119291316	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999822635336049	WITHOUT_CLASSIFICATION	1.7736466395134953E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999991548106814	WITHOUT_CLASSIFICATION	8.451893186895386E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999989456333404	WITHOUT_CLASSIFICATION	1.054366659594679E-5	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9983126402886664	WITHOUT_CLASSIFICATION	0.0016873597113336942	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999953855766995	WITHOUT_CLASSIFICATION	4.6144233004351425E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999823993855148	WITHOUT_CLASSIFICATION	1.7600614485137057E-5	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992110129393698	WITHOUT_CLASSIFICATION	7.889870606302888E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992110129393698	WITHOUT_CLASSIFICATION	7.889870606302888E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999824044390015	WITHOUT_CLASSIFICATION	1.7595560998430666E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999459045942796	WITHOUT_CLASSIFICATION	5.4095405720417504E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9996392757191519	WITHOUT_CLASSIFICATION	3.6072428084816285E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999917469066343	WITHOUT_CLASSIFICATION	8.253093365778603E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999993489704609	WITHOUT_CLASSIFICATION	6.510295391651776E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999986924151161	WITHOUT_CLASSIFICATION	1.3075848839111984E-5	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997152068096735	WITHOUT_CLASSIFICATION	2.847931903263998E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9986735825166061	WITHOUT_CLASSIFICATION	0.0013264174833939027	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9874792607023062	WITHOUT_CLASSIFICATION	0.01252073929769374	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999902067121571	WITHOUT_CLASSIFICATION	9.793287842969469E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9993688068456581	WITHOUT_CLASSIFICATION	6.311931543418725E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9995169561273507	WITHOUT_CLASSIFICATION	4.830438726492872E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9960562610119278	WITHOUT_CLASSIFICATION	0.003943738988072192	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999813535923712	WITHOUT_CLASSIFICATION	1.8646407628833188E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999935783923528	WITHOUT_CLASSIFICATION	6.421607647184077E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995743373157736	WITHOUT_CLASSIFICATION	4.2566268422640426E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999488202073779	WITHOUT_CLASSIFICATION	5.117979262224615E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999488202073779	WITHOUT_CLASSIFICATION	5.117979262224615E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999920753037141	WITHOUT_CLASSIFICATION	7.924696285786084E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997851351599011	WITHOUT_CLASSIFICATION	2.148648400989145E-4	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998181321434533	WITHOUT_CLASSIFICATION	1.818678565467782E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996717571585112	WITHOUT_CLASSIFICATION	3.282428414887687E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999924427727958	WITHOUT_CLASSIFICATION	7.557227204166264E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999714674311626	WITHOUT_CLASSIFICATION	2.853256883735082E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999148696849565	WITHOUT_CLASSIFICATION	8.513031504347646E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9996472285591215	WITHOUT_CLASSIFICATION	3.5277144087849494E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999478135779684	WITHOUT_CLASSIFICATION	5.218642203163198E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999511237207438	WITHOUT_CLASSIFICATION	4.8876279256161406E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999944865248932	WITHOUT_CLASSIFICATION	5.513475106776262E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999974781161696	WITHOUT_CLASSIFICATION	2.5218838304088877E-6	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999459098806259	WITHOUT_CLASSIFICATION	5.4090119374092045E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999794028579686	WITHOUT_CLASSIFICATION	2.0597142031343256E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999998053197213	WITHOUT_CLASSIFICATION	1.9468027869196985E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997347760357195	WITHOUT_CLASSIFICATION	2.6522396428054363E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999947758257793	WITHOUT_CLASSIFICATION	5.2241742206331E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999943504487525	WITHOUT_CLASSIFICATION	5.649551247403796E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999988660954519	WITHOUT_CLASSIFICATION	1.1339045481659012E-6	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999989977514784	WITHOUT_CLASSIFICATION	1.0022485217109563E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999645248038808	WITHOUT_CLASSIFICATION	3.5475196119264344E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9997495939409916	WITHOUT_CLASSIFICATION	2.504060590083501E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999605214916333	WITHOUT_CLASSIFICATION	3.9478508366635406E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999793907359344	WITHOUT_CLASSIFICATION	2.0609264065458324E-5	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999941443479002	WITHOUT_CLASSIFICATION	5.855652099745114E-6	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999901019013125	WITHOUT_CLASSIFICATION	9.898098687520242E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9992823547685366	WITHOUT_CLASSIFICATION	7.176452314633653E-4	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999808603951262	WITHOUT_CLASSIFICATION	1.9139604873798338E-4	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999865652295891	WITHOUT_CLASSIFICATION	1.3434770410898617E-4	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996021348140112	WITHOUT_CLASSIFICATION	3.9786518598877675E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999605443092697	WITHOUT_CLASSIFICATION	3.945569073030942E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999607629658043	WITHOUT_CLASSIFICATION	3.923703419583354E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999638965400355	WITHOUT_CLASSIFICATION	3.610345996451731E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999726715419619	WITHOUT_CLASSIFICATION	2.7328458038117458E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9959474449027154	WITHOUT_CLASSIFICATION	0.004052555097284707	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9986356613480577	WITHOUT_CLASSIFICATION	0.0013643386519423017	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999917988107898	WITHOUT_CLASSIFICATION	8.201189210186556E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998527331199962	WITHOUT_CLASSIFICATION	1.472668800037865E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998527331199962	WITHOUT_CLASSIFICATION	1.472668800037865E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999757812553075	WITHOUT_CLASSIFICATION	2.4218744692475878E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999707456813566	WITHOUT_CLASSIFICATION	2.925431864347198E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995796705517872	WITHOUT_CLASSIFICATION	4.203294482127743E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995796705517872	WITHOUT_CLASSIFICATION	4.203294482127743E-4	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999922134156138	WITHOUT_CLASSIFICATION	7.786584386232262E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999397182326545	WITHOUT_CLASSIFICATION	6.028176734547669E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999849620258102	WITHOUT_CLASSIFICATION	1.5037974189890963E-5	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999962087073726	WITHOUT_CLASSIFICATION	3.7912926274435573E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999613425686407	WITHOUT_CLASSIFICATION	3.865743135939036E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999916481502162	WITHOUT_CLASSIFICATION	8.351849783826921E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999916481502162	WITHOUT_CLASSIFICATION	8.351849783826921E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998795006973833	WITHOUT_CLASSIFICATION	1.2049930261675689E-4	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9997021046448853	WITHOUT_CLASSIFICATION	2.9789535511478454E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999921126828304	WITHOUT_CLASSIFICATION	7.88731716959888E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999995421156213	WITHOUT_CLASSIFICATION	4.578843786913536E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999993926244532	WITHOUT_CLASSIFICATION	6.073755468023486E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.99997539443448	WITHOUT_CLASSIFICATION	2.4605565520023086E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999814087196547	WITHOUT_CLASSIFICATION	1.8591280345341128E-5	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999895166258358	WITHOUT_CLASSIFICATION	1.0483374164213038E-5	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999962529166154	WITHOUT_CLASSIFICATION	3.747083384537129E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999922622512708	WITHOUT_CLASSIFICATION	7.737748729189624E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999923557938362	WITHOUT_CLASSIFICATION	7.644206163791415E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998491924811999	WITHOUT_CLASSIFICATION	1.5080751880015554E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9996780457234554	WITHOUT_CLASSIFICATION	3.2195427654460883E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996346710211873	WITHOUT_CLASSIFICATION	3.653289788126594E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9995131262746092	WITHOUT_CLASSIFICATION	4.8687372539082095E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999951378015447	WITHOUT_CLASSIFICATION	4.862198455343679E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999895794581892	WITHOUT_CLASSIFICATION	1.042054181078611E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998429431964045	WITHOUT_CLASSIFICATION	1.5705680359537862E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999940765798293	WITHOUT_CLASSIFICATION	5.923420170708918E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999049883989225	WITHOUT_CLASSIFICATION	9.501160107747347E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999883828661729	WITHOUT_CLASSIFICATION	1.161713382717284E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999575546000741	WITHOUT_CLASSIFICATION	4.2445399925842325E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999828329370489	WITHOUT_CLASSIFICATION	1.7167062951014647E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998567405928731	WITHOUT_CLASSIFICATION	1.4325940712691103E-4	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.998395734763591	WITHOUT_CLASSIFICATION	0.0016042652364089795	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9984092962618172	WITHOUT_CLASSIFICATION	0.0015907037381828286	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9996381460202615	WITHOUT_CLASSIFICATION	3.6185397973853415E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999918927685547	WITHOUT_CLASSIFICATION	8.10723144535353E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999987896315111	WITHOUT_CLASSIFICATION	1.2103684889001523E-5	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999983305602113	WITHOUT_CLASSIFICATION	1.669439788700097E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999830401544509	WITHOUT_CLASSIFICATION	1.695984554903247E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999192461218323	WITHOUT_CLASSIFICATION	8.075387816774511E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999808246643952	WITHOUT_CLASSIFICATION	1.9175335604816434E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999675488622001	WITHOUT_CLASSIFICATION	3.245113779986563E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999876355408047	WITHOUT_CLASSIFICATION	1.2364459195242608E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996997853068419	WITHOUT_CLASSIFICATION	3.00214693158024E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999702529601409	WITHOUT_CLASSIFICATION	2.9747039859202085E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999899606660174	WITHOUT_CLASSIFICATION	1.0039333982495861E-5	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999988034334901	WITHOUT_CLASSIFICATION	1.196566509892331E-5	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999966293606134	WITHOUT_CLASSIFICATION	3.3706393864631825E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999990395497482	WITHOUT_CLASSIFICATION	9.604502518104722E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.999990003423471	WITHOUT_CLASSIFICATION	9.996576529072345E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999896602549255	WITHOUT_CLASSIFICATION	1.0339745074447162E-5	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999896429804291	WITHOUT_CLASSIFICATION	1.0357019570819369E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999987171273385	WITHOUT_CLASSIFICATION	1.2828726615535636E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999753117036753	WITHOUT_CLASSIFICATION	2.4688296324769608E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999799436402542	WITHOUT_CLASSIFICATION	2.0056359745681323E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999970026505685	WITHOUT_CLASSIFICATION	2.9973494316260805E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999506902488633	WITHOUT_CLASSIFICATION	4.9309751136599505E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999786724703836	WITHOUT_CLASSIFICATION	2.1327529616347774E-5	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9878898413794811	WITHOUT_CLASSIFICATION	0.012110158620518903	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999974777784519	WITHOUT_CLASSIFICATION	2.5222215481081415E-6	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999977341976112	WITHOUT_CLASSIFICATION	2.265802388802215E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999698188318732	WITHOUT_CLASSIFICATION	3.018116812679176E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999968767318678	WITHOUT_CLASSIFICATION	3.1232681321896666E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999822899636087	WITHOUT_CLASSIFICATION	1.771003639117443E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999856425434406	WITHOUT_CLASSIFICATION	1.4357456559421735E-5	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9993448283331974	WITHOUT_CLASSIFICATION	6.55171666802676E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999978140654181	WITHOUT_CLASSIFICATION	2.1859345819652365E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999978140654181	WITHOUT_CLASSIFICATION	2.1859345819652365E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998815583970647	WITHOUT_CLASSIFICATION	1.1844160293524706E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999985487546642	WITHOUT_CLASSIFICATION	1.4512453358169759E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999932805107884	WITHOUT_CLASSIFICATION	6.719489211702776E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999771920256884	WITHOUT_CLASSIFICATION	2.2807974311697406E-5	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999881962572034	WITHOUT_CLASSIFICATION	1.180374279661421E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999486625851977	WITHOUT_CLASSIFICATION	5.133741480229215E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999750403424796	WITHOUT_CLASSIFICATION	2.4959657520352706E-5	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999996057342654	WITHOUT_CLASSIFICATION	3.9426573470887026E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999522858220518	WITHOUT_CLASSIFICATION	4.7714177948285445E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999772731328573	WITHOUT_CLASSIFICATION	2.2726867142652736E-5	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999840611777236	WITHOUT_CLASSIFICATION	1.5938822276407895E-5	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9988708989902382	WITHOUT_CLASSIFICATION	0.0011291010097618018	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999921152560847	WITHOUT_CLASSIFICATION	7.884743915306929E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999424838662629	WITHOUT_CLASSIFICATION	5.751613373705738E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994820967427197	WITHOUT_CLASSIFICATION	5.179032572802498E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994820967427197	WITHOUT_CLASSIFICATION	5.179032572802498E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999830870673908	WITHOUT_CLASSIFICATION	1.691293260927171E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999499197311973	WITHOUT_CLASSIFICATION	5.008026880259013E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997753730646253	WITHOUT_CLASSIFICATION	2.2462693537478643E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999993090010022	WITHOUT_CLASSIFICATION	6.90998997826775E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999972493750752	WITHOUT_CLASSIFICATION	2.7506249247988406E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680238983946	WITHOUT_CLASSIFICATION	3.1976101605473005E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997680112711783	WITHOUT_CLASSIFICATION	2.319887288216107E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.99994607612459	WITHOUT_CLASSIFICATION	5.392387541016413E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999974706373261	WITHOUT_CLASSIFICATION	2.5293626739264676E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999923478667131	WITHOUT_CLASSIFICATION	7.65213328690121E-6	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999952742450108	WITHOUT_CLASSIFICATION	4.7257549892599805E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9995883953229312	WITHOUT_CLASSIFICATION	4.116046770687605E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999818605494725	WITHOUT_CLASSIFICATION	1.8139450527516746E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999910885192581	WITHOUT_CLASSIFICATION	8.911480741903327E-6	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9995538676300787	WITHOUT_CLASSIFICATION	4.461323699211941E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999909267989097	WITHOUT_CLASSIFICATION	9.073201090302819E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999639578626864	WITHOUT_CLASSIFICATION	3.6042137313559515E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999884627454299	WITHOUT_CLASSIFICATION	1.1537254570124727E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999259052295701	WITHOUT_CLASSIFICATION	7.40947704298695E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999957316506689	WITHOUT_CLASSIFICATION	4.268349331038944E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999900959898379	WITHOUT_CLASSIFICATION	9.904010162162902E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996656892135	WITHOUT_CLASSIFICATION	3.3431078640594385E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999810537175715	WITHOUT_CLASSIFICATION	1.8946282428517274E-5	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998834616136074	WITHOUT_CLASSIFICATION	1.16538386392668E-4	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999911832093784	WITHOUT_CLASSIFICATION	8.816790621601444E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999370351471556	WITHOUT_CLASSIFICATION	6.296485284447682E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999886495727606	WITHOUT_CLASSIFICATION	1.1350427239443017E-5	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999748984544765	WITHOUT_CLASSIFICATION	2.5101545523481994E-5	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999272020882184	WITHOUT_CLASSIFICATION	7.279791178152076E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999506984258782	WITHOUT_CLASSIFICATION	4.930157412179288E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997748709116481	WITHOUT_CLASSIFICATION	2.2512908835193828E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999586965421193	WITHOUT_CLASSIFICATION	4.130345788057904E-5	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999911078423299	WITHOUT_CLASSIFICATION	8.892157670101419E-6	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999983895962838	WITHOUT_CLASSIFICATION	1.6104037161949055E-5	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999909980565737	WITHOUT_CLASSIFICATION	9.001943426302536E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999985662533487	WITHOUT_CLASSIFICATION	1.4337466513068673E-5	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999954689465704	WITHOUT_CLASSIFICATION	4.531053429522725E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999741412171695	WITHOUT_CLASSIFICATION	2.585878283040223E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999400450350237	WITHOUT_CLASSIFICATION	5.99549649764725E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999401647993291	WITHOUT_CLASSIFICATION	5.9835200670811686E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99995485063531	WITHOUT_CLASSIFICATION	4.5149364690059006E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99995485063531	WITHOUT_CLASSIFICATION	4.5149364690059006E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999802818862455	WITHOUT_CLASSIFICATION	1.9718113754393573E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999733491584978	WITHOUT_CLASSIFICATION	2.665084150218966E-5	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997458471621693	WITHOUT_CLASSIFICATION	2.541528378306227E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999978312201285	WITHOUT_CLASSIFICATION	2.1687798715090185E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999295932908627	WITHOUT_CLASSIFICATION	7.040670913725841E-5	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999885355455096	WITHOUT_CLASSIFICATION	1.1464454490439104E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999327453142934	WITHOUT_CLASSIFICATION	6.725468570656316E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9987669263625701	WITHOUT_CLASSIFICATION	0.0012330736374298746	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999847436876516	WITHOUT_CLASSIFICATION	1.5256312348335152E-5	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612417629857	WITHOUT_CLASSIFICATION	3.875823701421214E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988938072183815	WITHOUT_CLASSIFICATION	0.0011061927816184832	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9986062250924529	WITHOUT_CLASSIFICATION	0.0013937749075471216	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999992836581688	WITHOUT_CLASSIFICATION	7.163418312642089E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999933073212276	WITHOUT_CLASSIFICATION	6.692678772391095E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9997897834654206	WITHOUT_CLASSIFICATION	2.1021653457940835E-4	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999997385733632	WITHOUT_CLASSIFICATION	2.614266368057554E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999979343316467	WITHOUT_CLASSIFICATION	2.0656683532720274E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999624224111445	WITHOUT_CLASSIFICATION	3.757758885548213E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999866649897527	WITHOUT_CLASSIFICATION	1.3335010247347659E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999333629144	WITHOUT_CLASSIFICATION	6.663708560136343E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998424432659672	WITHOUT_CLASSIFICATION	1.5755673403289742E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999318198710937	WITHOUT_CLASSIFICATION	6.818012890637696E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996574756305177	WITHOUT_CLASSIFICATION	3.42524369482314E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999738812778718	WITHOUT_CLASSIFICATION	2.6118722128320787E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999942772117786	WITHOUT_CLASSIFICATION	5.722788221449997E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999983821137012	WITHOUT_CLASSIFICATION	1.6178862987939556E-5	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998620651503021	WITHOUT_CLASSIFICATION	1.3793484969791054E-4	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999070668650326	WITHOUT_CLASSIFICATION	9.293313496738354E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999884428041556	WITHOUT_CLASSIFICATION	1.1557195844402588E-5	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999980657866822	WITHOUT_CLASSIFICATION	1.934213317876784E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999940468005631	WITHOUT_CLASSIFICATION	5.953199436775241E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999990940847225	WITHOUT_CLASSIFICATION	9.059152773982701E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999967493157115	WITHOUT_CLASSIFICATION	3.250684288591935E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999620979882379	WITHOUT_CLASSIFICATION	3.790201176205336E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999727296876777	WITHOUT_CLASSIFICATION	2.727031232236889E-5	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.99999441107988	WITHOUT_CLASSIFICATION	5.588920120055978E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998245126982568	WITHOUT_CLASSIFICATION	1.7548730174322686E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999962235293323	WITHOUT_CLASSIFICATION	3.7764706676565862E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999440700997712	WITHOUT_CLASSIFICATION	5.592990022884623E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.99999064017726	WITHOUT_CLASSIFICATION	9.359822739994742E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993463891043	WITHOUT_CLASSIFICATION	6.5361089575153E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999984800872219	WITHOUT_CLASSIFICATION	1.519912778099734E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999982134415411	WITHOUT_CLASSIFICATION	1.7865584589098045E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999499296624782	WITHOUT_CLASSIFICATION	5.007033752179995E-4	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998827587996909	WITHOUT_CLASSIFICATION	1.1724120030915045E-4	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999981543803457	WITHOUT_CLASSIFICATION	1.8456196542513396E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999921152560847	WITHOUT_CLASSIFICATION	7.884743915306929E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999852223893846	WITHOUT_CLASSIFICATION	1.477761061542022E-5	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999989622090191	WITHOUT_CLASSIFICATION	1.0377909810085938E-6	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999876407599139	WITHOUT_CLASSIFICATION	1.2359240086090383E-4	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999918849683296	WITHOUT_CLASSIFICATION	8.115031670430107E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999974930471507	WITHOUT_CLASSIFICATION	2.5069528492604544E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999923911373972	WITHOUT_CLASSIFICATION	7.608862602805156E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997539405215917	WITHOUT_CLASSIFICATION	2.4605947840823433E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.994110762318639	WITHOUT_CLASSIFICATION	0.00588923768136094	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999854907117284	WITHOUT_CLASSIFICATION	1.4509288271703515E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999813858472095	WITHOUT_CLASSIFICATION	1.86141527904549E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9959391356018145	WITHOUT_CLASSIFICATION	0.004060864398185611	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999433606352942	WITHOUT_CLASSIFICATION	5.663936470578794E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999168290049649	WITHOUT_CLASSIFICATION	8.317099503512208E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9997132115920093	WITHOUT_CLASSIFICATION	2.8678840799061016E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998558511979063	WITHOUT_CLASSIFICATION	1.441488020937693E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995731095862251	WITHOUT_CLASSIFICATION	4.2689041377475656E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997464797459	WITHOUT_CLASSIFICATION	2.535202541169993E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999869260996644	WITHOUT_CLASSIFICATION	1.3073900335628752E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998558511979063	WITHOUT_CLASSIFICATION	1.441488020937693E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.997884838364558	WITHOUT_CLASSIFICATION	0.0021151616354420804	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999958234039047	WITHOUT_CLASSIFICATION	4.176596095359195E-6	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999989059862843	WITHOUT_CLASSIFICATION	1.0940137157931323E-6	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9998991523778699	WITHOUT_CLASSIFICATION	1.0084762213011078E-4	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9989976936295902	WITHOUT_CLASSIFICATION	0.0010023063704097752	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999245852402581	WITHOUT_CLASSIFICATION	7.54147597419094E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999970098092713	WITHOUT_CLASSIFICATION	2.9901907286929564E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9977308914192614	WITHOUT_CLASSIFICATION	0.002269108580738566	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999843124267654	WITHOUT_CLASSIFICATION	1.5687573234603625E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999945350686675	WITHOUT_CLASSIFICATION	5.464931332515948E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9985430104831295	WITHOUT_CLASSIFICATION	0.0014569895168703361	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9641448283422225	WITHOUT_CLASSIFICATION	0.03585517165777754	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999967171694029	WITHOUT_CLASSIFICATION	3.2828305970578202E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999860182082003	WITHOUT_CLASSIFICATION	1.398179179961483E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999404111548816	WITHOUT_CLASSIFICATION	5.9588845118358764E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999605214916333	WITHOUT_CLASSIFICATION	3.9478508366635406E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999922804223023	WITHOUT_CLASSIFICATION	7.7195776977755E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999965539940533	WITHOUT_CLASSIFICATION	3.4460059467618565E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9970717992859497	WITHOUT_CLASSIFICATION	0.002928200714050329	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999216528536026	WITHOUT_CLASSIFICATION	7.834714639738927E-5	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999967792057171	WITHOUT_CLASSIFICATION	3.2207942830865132E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999971757485567	WITHOUT_CLASSIFICATION	2.824251443173375E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999317212334191	WITHOUT_CLASSIFICATION	6.827876658092873E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999894268978	WITHOUT_CLASSIFICATION	1.0573102196983167E-7	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999980606380562	WITHOUT_CLASSIFICATION	1.9393619437684233E-6	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999755610926707	WITHOUT_CLASSIFICATION	2.443890732931848E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998697183299862	WITHOUT_CLASSIFICATION	1.3028167001381694E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998510210839406	WITHOUT_CLASSIFICATION	1.48978916059325E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999996806041348	WITHOUT_CLASSIFICATION	3.193958651990281E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999818838694315	WITHOUT_CLASSIFICATION	1.8116130568396048E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999956463125226	WITHOUT_CLASSIFICATION	4.3536874774264876E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998125964925498	WITHOUT_CLASSIFICATION	1.8740350745028253E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999778385678102	WITHOUT_CLASSIFICATION	2.2161432189806075E-5	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999982072850039	WITHOUT_CLASSIFICATION	1.79271499622619E-6	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999946966063963	WITHOUT_CLASSIFICATION	5.303393603686346E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999984358080042	WITHOUT_CLASSIFICATION	1.5641919957792132E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999580812973694	WITHOUT_CLASSIFICATION	4.191870263061736E-5	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999966804645453	WITHOUT_CLASSIFICATION	3.319535454824128E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.99999668630675	WITHOUT_CLASSIFICATION	3.3136932500307376E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999051103895841	WITHOUT_CLASSIFICATION	9.488961041586317E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999851928563392	WITHOUT_CLASSIFICATION	1.480714366079687E-4	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999851928563392	WITHOUT_CLASSIFICATION	1.480714366079687E-4	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998957657761951	WITHOUT_CLASSIFICATION	0.0010423422380490125	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999920979597383	WITHOUT_CLASSIFICATION	7.902040261629208E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999660507317485	WITHOUT_CLASSIFICATION	3.3949268251564756E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9989220449777518	WITHOUT_CLASSIFICATION	0.0010779550222480756	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999741348189625	WITHOUT_CLASSIFICATION	2.5865181037415315E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999741348189625	WITHOUT_CLASSIFICATION	2.5865181037415315E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999921919211203	WITHOUT_CLASSIFICATION	7.808078879648516E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998011701779964	WITHOUT_CLASSIFICATION	1.98829822003588E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999673553645454	WITHOUT_CLASSIFICATION	3.2644635454674836E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999824130372152	WITHOUT_CLASSIFICATION	1.758696278479863E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999518583680054	WITHOUT_CLASSIFICATION	4.814163199472653E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999812110240047	WITHOUT_CLASSIFICATION	1.8788975995307306E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999975428026265	WITHOUT_CLASSIFICATION	2.4571973735695234E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999672945620118	WITHOUT_CLASSIFICATION	3.270543798811323E-5	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999589141059911	WITHOUT_CLASSIFICATION	4.108589400884833E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997937888927803	WITHOUT_CLASSIFICATION	2.0621110721986513E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997937888927803	WITHOUT_CLASSIFICATION	2.0621110721986513E-4	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997699919160447	WITHOUT_CLASSIFICATION	2.300080839553489E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999894888431163	WITHOUT_CLASSIFICATION	1.0511156883638625E-5	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995649404108534	WITHOUT_CLASSIFICATION	4.3505958914652416E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9982328345913796	WITHOUT_CLASSIFICATION	0.001767165408620412	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822617648444	WITHOUT_CLASSIFICATION	1.7738235155662868E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960343107365	WITHOUT_CLASSIFICATION	3.965689263496092E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999675327558973	WITHOUT_CLASSIFICATION	3.2467244102717504E-5	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999661839107334	WITHOUT_CLASSIFICATION	3.381608926647486E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999662186839544	WITHOUT_CLASSIFICATION	3.37813160455717E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999140040538128	WITHOUT_CLASSIFICATION	8.599594618718397E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999945350686675	WITHOUT_CLASSIFICATION	5.464931332515948E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9998211399275775	WITHOUT_CLASSIFICATION	1.788600724225185E-4	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9991573217658977	WITHOUT_CLASSIFICATION	8.426782341023125E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999752788662097	WITHOUT_CLASSIFICATION	2.4721133790236247E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998846029041241	WITHOUT_CLASSIFICATION	1.153970958760013E-4	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995395259402372	WITHOUT_CLASSIFICATION	4.604740597628654E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999560448769399	WITHOUT_CLASSIFICATION	4.395512306010262E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9991542424717733	WITHOUT_CLASSIFICATION	8.457575282267692E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999779241754424	WITHOUT_CLASSIFICATION	2.2075824557592067E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9993365790813001	WITHOUT_CLASSIFICATION	6.634209186997788E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998816738418915	WITHOUT_CLASSIFICATION	1.1832615810843119E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998816738418915	WITHOUT_CLASSIFICATION	1.1832615810843119E-4	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998745690216003	WITHOUT_CLASSIFICATION	1.2543097839960433E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999293827648	WITHOUT_CLASSIFICATION	7.061723518474949E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.999883946513341	WITHOUT_CLASSIFICATION	1.1605348665908271E-4	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9988627191833568	WITHOUT_CLASSIFICATION	0.0011372808166432394	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999780808705452	WITHOUT_CLASSIFICATION	2.1919129454807088E-5	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999751767921938	WITHOUT_CLASSIFICATION	2.4823207806194943E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999949612009963	WITHOUT_CLASSIFICATION	5.038799003693625E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999988649003249	WITHOUT_CLASSIFICATION	1.1350996751581581E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999859304847013	WITHOUT_CLASSIFICATION	1.4069515298747678E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.99996933399759	WITHOUT_CLASSIFICATION	3.066600240993622E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636930617053	WITHOUT_CLASSIFICATION	3.630693829468452E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999503957236076	WITHOUT_CLASSIFICATION	4.960427639250345E-5	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999942498820434	WITHOUT_CLASSIFICATION	5.750117956626995E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999832568258343	WITHOUT_CLASSIFICATION	1.6743174165704027E-5	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999940823524014	WITHOUT_CLASSIFICATION	5.917647598593882E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999975004867487	WITHOUT_CLASSIFICATION	2.4995132512559037E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999985609750526	WITHOUT_CLASSIFICATION	1.439024947529307E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999350140357944	WITHOUT_CLASSIFICATION	6.498596420556676E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997411955117238	WITHOUT_CLASSIFICATION	2.588044882761598E-4	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999549049354357	WITHOUT_CLASSIFICATION	4.509506456441447E-5	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999862604958791	WITHOUT_CLASSIFICATION	1.3739504120840892E-5	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999919734440569	WITHOUT_CLASSIFICATION	8.026555943147706E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999993926244532	WITHOUT_CLASSIFICATION	6.073755468023486E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9998502875236439	WITHOUT_CLASSIFICATION	1.4971247635604665E-4	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999686100559466	WITHOUT_CLASSIFICATION	3.1389944053499864E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999686100559466	WITHOUT_CLASSIFICATION	3.1389944053499864E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999755864710246	WITHOUT_CLASSIFICATION	2.4413528975370473E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999661151326147	WITHOUT_CLASSIFICATION	3.3884867385333077E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999668931325681	WITHOUT_CLASSIFICATION	3.310686743192486E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999908434175159	WITHOUT_CLASSIFICATION	9.156582484072796E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999819611139584	WITHOUT_CLASSIFICATION	1.803888604155771E-5	TEST
