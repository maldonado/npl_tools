//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999438866264296	WITHOUT_CLASSIFICATION	5.611337357040392E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995992924122656	WITHOUT_CLASSIFICATION	4.007075877343561E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999890045793286	WITHOUT_CLASSIFICATION	1.0995420671410831E-5	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999941689847932	WITHOUT_CLASSIFICATION	5.831015206762893E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999941689847932	WITHOUT_CLASSIFICATION	5.831015206762893E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999801783078851	WITHOUT_CLASSIFICATION	1.9821692114855694E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999973513400695	WITHOUT_CLASSIFICATION	2.6486599305077282E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999022431380258	WITHOUT_CLASSIFICATION	9.775686197409905E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999972477551649	WITHOUT_CLASSIFICATION	2.7522448351134073E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999557793787717	WITHOUT_CLASSIFICATION	4.4220621228278265E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999557793787717	WITHOUT_CLASSIFICATION	4.4220621228278265E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999212260836969	WITHOUT_CLASSIFICATION	7.877391630303647E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999961400881768	WITHOUT_CLASSIFICATION	3.859911823160299E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.999983687919567	WITHOUT_CLASSIFICATION	1.6312080433040168E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998795960620004	WITHOUT_CLASSIFICATION	1.2040393799966301E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999760851929228	WITHOUT_CLASSIFICATION	2.3914807077113543E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999438763648998	WITHOUT_CLASSIFICATION	5.612363510011769E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9995817298479633	WITHOUT_CLASSIFICATION	4.182701520366471E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999905915669792	WITHOUT_CLASSIFICATION	9.40843302076896E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951901059371	WITHOUT_CLASSIFICATION	4.809894062979995E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951901059371	WITHOUT_CLASSIFICATION	4.809894062979995E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999782049162654	WITHOUT_CLASSIFICATION	2.1795083734605072E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999436485367194	WITHOUT_CLASSIFICATION	5.63514632805663E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998619249393839	WITHOUT_CLASSIFICATION	1.3807506061616628E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999664994176677	WITHOUT_CLASSIFICATION	3.350058233228389E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999734028011594	WITHOUT_CLASSIFICATION	2.6597198840620807E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.6194705290864078	WITHOUT_CLASSIFICATION	0.38052947091359207	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.6194705290864078	WITHOUT_CLASSIFICATION	0.38052947091359207	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999633507205333	WITHOUT_CLASSIFICATION	3.6649279466735765E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999019606829007	WITHOUT_CLASSIFICATION	9.803931709923474E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999970947291411	WITHOUT_CLASSIFICATION	2.9052708588526394E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998799377507407	WITHOUT_CLASSIFICATION	1.2006224925926286E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999842393324128	WITHOUT_CLASSIFICATION	1.5760667587256812E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730353564248	WITHOUT_CLASSIFICATION	2.696464357520721E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999951907005532	WITHOUT_CLASSIFICATION	4.809299446831354E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999823166443138	WITHOUT_CLASSIFICATION	1.7683355686225464E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999467509985098	WITHOUT_CLASSIFICATION	5.324900149010626E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999467509985098	WITHOUT_CLASSIFICATION	5.324900149010626E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999351254721341	WITHOUT_CLASSIFICATION	6.487452786593877E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999761899100073	WITHOUT_CLASSIFICATION	2.3810089992685823E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999673037940732	WITHOUT_CLASSIFICATION	3.2696205926855077E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999908796916456	WITHOUT_CLASSIFICATION	9.120308354337168E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999988479330469	WITHOUT_CLASSIFICATION	1.152066953053782E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999996215773846	WITHOUT_CLASSIFICATION	3.7842261529404344E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997666209615951	WITHOUT_CLASSIFICATION	2.3337903840484753E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999961766227607	WITHOUT_CLASSIFICATION	3.823377239294676E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999964883938207	WITHOUT_CLASSIFICATION	3.5116061792563177E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999516871349607	WITHOUT_CLASSIFICATION	4.831286503911852E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999919977262224	WITHOUT_CLASSIFICATION	8.0022737776041E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999952573241858	WITHOUT_CLASSIFICATION	4.7426758142769095E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999918669738087	WITHOUT_CLASSIFICATION	8.133026191254165E-6	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999342552188913	WITHOUT_CLASSIFICATION	6.574478110873184E-5	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999966113236719	WITHOUT_CLASSIFICATION	3.3886763280700835E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999943756498876	WITHOUT_CLASSIFICATION	5.624350112306167E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999949426994816	WITHOUT_CLASSIFICATION	5.057300518259034E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999944597654635	WITHOUT_CLASSIFICATION	5.540234536467703E-6	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999754409851905	WITHOUT_CLASSIFICATION	2.455901480944639E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999867945879003	WITHOUT_CLASSIFICATION	1.3205412099753214E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999805263942457	WITHOUT_CLASSIFICATION	1.9473605754292153E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999567174818	WITHOUT_CLASSIFICATION	4.328251820289748E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972006033321	WITHOUT_CLASSIFICATION	2.799396667896707E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999713553453163	WITHOUT_CLASSIFICATION	2.8644654683669675E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999972964449795	WITHOUT_CLASSIFICATION	2.7035550206174266E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999910615790601	WITHOUT_CLASSIFICATION	8.938420939873822E-6	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999989923083766	WITHOUT_CLASSIFICATION	1.0076916233407915E-6	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999804231385527	WITHOUT_CLASSIFICATION	1.9576861447322815E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999901453601727	WITHOUT_CLASSIFICATION	9.854639827247427E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999418828205145	WITHOUT_CLASSIFICATION	5.811717948533116E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999617479786	WITHOUT_CLASSIFICATION	3.8252021387972354E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999944225885438	WITHOUT_CLASSIFICATION	5.577411456328421E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999794440801533	WITHOUT_CLASSIFICATION	2.0555919846684283E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999804214106609	WITHOUT_CLASSIFICATION	1.9578589339116877E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999881560961824	WITHOUT_CLASSIFICATION	1.1843903817498492E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999992791768641	WITHOUT_CLASSIFICATION	7.2082313590331594E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999804214106609	WITHOUT_CLASSIFICATION	1.9578589339116877E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999027187128	WITHOUT_CLASSIFICATION	9.728128726221591E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999683902555859	WITHOUT_CLASSIFICATION	3.1609744414063197E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999935217871739	WITHOUT_CLASSIFICATION	6.478212826127737E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999916414041949	WITHOUT_CLASSIFICATION	8.358595805032117E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999857105628698	WITHOUT_CLASSIFICATION	1.4289437130201267E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999857105628698	WITHOUT_CLASSIFICATION	1.4289437130201267E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999467835549086	WITHOUT_CLASSIFICATION	5.321644509125246E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999977628400279	WITHOUT_CLASSIFICATION	2.2371599721006647E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999826389360944	WITHOUT_CLASSIFICATION	1.7361063905638023E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999970500238007	WITHOUT_CLASSIFICATION	2.949976199377564E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999908140879887	WITHOUT_CLASSIFICATION	9.185912011266223E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999990269031541	WITHOUT_CLASSIFICATION	9.73096845899626E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999955972871463	WITHOUT_CLASSIFICATION	4.402712853710235E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999902001930356	WITHOUT_CLASSIFICATION	9.799806964276451E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999884948341553	WITHOUT_CLASSIFICATION	1.1505165844629947E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999676695900231	WITHOUT_CLASSIFICATION	3.2330409976811686E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999676695900231	WITHOUT_CLASSIFICATION	3.2330409976811686E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999927379693495	WITHOUT_CLASSIFICATION	7.262030650517728E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999975747734022	WITHOUT_CLASSIFICATION	2.425226597734273E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999894553029336	WITHOUT_CLASSIFICATION	1.054469706641813E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999676695900231	WITHOUT_CLASSIFICATION	3.2330409976811686E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999927379693495	WITHOUT_CLASSIFICATION	7.262030650517728E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999927379693495	WITHOUT_CLASSIFICATION	7.262030650517728E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999906619408886	WITHOUT_CLASSIFICATION	9.338059111472074E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999846718107104	WITHOUT_CLASSIFICATION	1.5328189289599782E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999888599199355	WITHOUT_CLASSIFICATION	1.1140080064626316E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999500949243133	WITHOUT_CLASSIFICATION	4.990507568660306E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999863485650033	WITHOUT_CLASSIFICATION	1.365143499669313E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999863485650033	WITHOUT_CLASSIFICATION	1.365143499669313E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.99987983616063	WITHOUT_CLASSIFICATION	1.2016383936999088E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997130126475269	WITHOUT_CLASSIFICATION	2.8698735247312154E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999911802645539	WITHOUT_CLASSIFICATION	8.81973544616871E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999936991577519	WITHOUT_CLASSIFICATION	6.300842247942002E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999936991577519	WITHOUT_CLASSIFICATION	6.300842247942002E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997485644875395	WITHOUT_CLASSIFICATION	2.5143551246053E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999880849761263	WITHOUT_CLASSIFICATION	1.1915023873540108E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9957633579086366	WITHOUT_CLASSIFICATION	0.004236642091363386	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999955511621474	WITHOUT_CLASSIFICATION	4.448837852561215E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997306746623621	WITHOUT_CLASSIFICATION	2.6932533763783674E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999851255055855	WITHOUT_CLASSIFICATION	1.4874494414413815E-5	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999757158189052	WITHOUT_CLASSIFICATION	2.4284181094783778E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9992802305114803	WITHOUT_CLASSIFICATION	7.197694885198231E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9957633579086366	WITHOUT_CLASSIFICATION	0.004236642091363386	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999885065177117	WITHOUT_CLASSIFICATION	1.1493482288314777E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999980629735856	WITHOUT_CLASSIFICATION	1.9370264143768527E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999980629735856	WITHOUT_CLASSIFICATION	1.9370264143768527E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999426041414999	WITHOUT_CLASSIFICATION	5.739585850010125E-5	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998661855875484	WITHOUT_CLASSIFICATION	1.3381441245170991E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999922509691664	WITHOUT_CLASSIFICATION	7.749030833613282E-5	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9996326051874204	WITHOUT_CLASSIFICATION	3.6739481257970025E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9993655164930041	WITHOUT_CLASSIFICATION	6.344835069958645E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998881644059636	WITHOUT_CLASSIFICATION	1.1183559403638364E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999984784581012	WITHOUT_CLASSIFICATION	1.5215418989005874E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999972543073608	WITHOUT_CLASSIFICATION	2.745692639162925E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988319335134	WITHOUT_CLASSIFICATION	1.1680664867131885E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988319335134	WITHOUT_CLASSIFICATION	1.1680664867131885E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999438866264296	WITHOUT_CLASSIFICATION	5.611337357040392E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999884217681494	WITHOUT_CLASSIFICATION	1.1578231850591746E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999979227412555	WITHOUT_CLASSIFICATION	2.0772587444999065E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999840162078238	WITHOUT_CLASSIFICATION	1.5983792176135418E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999846869958833	WITHOUT_CLASSIFICATION	1.5313004116749036E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999954261127231	WITHOUT_CLASSIFICATION	4.5738872769168636E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999954778588528	WITHOUT_CLASSIFICATION	4.522141147201763E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.9998918018562044	WITHOUT_CLASSIFICATION	1.0819814379557821E-4	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999437022712516	WITHOUT_CLASSIFICATION	5.629772874828059E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999826502744604	WITHOUT_CLASSIFICATION	1.734972553953935E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999954261127231	WITHOUT_CLASSIFICATION	4.5738872769168636E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9996724786224473	WITHOUT_CLASSIFICATION	3.275213775526764E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999922250434177	WITHOUT_CLASSIFICATION	7.77495658235334E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999837333144828	WITHOUT_CLASSIFICATION	1.6266685517206775E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999887199258833	WITHOUT_CLASSIFICATION	1.128007411673154E-5	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999991805113041	WITHOUT_CLASSIFICATION	8.194886959012792E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999941689847932	WITHOUT_CLASSIFICATION	5.831015206762893E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999916800812687	WITHOUT_CLASSIFICATION	8.31991873128479E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999961990372708	WITHOUT_CLASSIFICATION	3.8009627291876452E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999850843317712	WITHOUT_CLASSIFICATION	1.4915668228822972E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999988538493945	WITHOUT_CLASSIFICATION	1.1461506054955662E-5	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951901527292	WITHOUT_CLASSIFICATION	4.8098472708396805E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999986536463855	WITHOUT_CLASSIFICATION	1.3463536145003857E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999873639920827	WITHOUT_CLASSIFICATION	1.263600791741199E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999943515032251	WITHOUT_CLASSIFICATION	5.648496774810162E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999923402646209	WITHOUT_CLASSIFICATION	7.659735379104257E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999940030874362	WITHOUT_CLASSIFICATION	5.996912563766041E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999437022712516	WITHOUT_CLASSIFICATION	5.629772874828059E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951901527292	WITHOUT_CLASSIFICATION	4.8098472708396805E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999801783078851	WITHOUT_CLASSIFICATION	1.9821692114855694E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999876070218742	WITHOUT_CLASSIFICATION	1.2392978125711654E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999480514087056	WITHOUT_CLASSIFICATION	5.194859129440362E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999831885051507	WITHOUT_CLASSIFICATION	1.6811494849256246E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999995218164425	WITHOUT_CLASSIFICATION	4.781835574925546E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999841318073855	WITHOUT_CLASSIFICATION	1.5868192614511832E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9997448427225257	WITHOUT_CLASSIFICATION	2.5515727747434395E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999191763463244	WITHOUT_CLASSIFICATION	8.082365367552051E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999191763463244	WITHOUT_CLASSIFICATION	8.082365367552051E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998981267509257	WITHOUT_CLASSIFICATION	1.018732490742679E-4	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999733229021844	WITHOUT_CLASSIFICATION	2.6677097815529736E-5	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997121484868522	WITHOUT_CLASSIFICATION	2.8785151314780056E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999778073504858	WITHOUT_CLASSIFICATION	2.2192649514179955E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999040017160867	WITHOUT_CLASSIFICATION	9.599828391326479E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999475172425313	WITHOUT_CLASSIFICATION	5.248275746872287E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999506767653734	WITHOUT_CLASSIFICATION	4.932323462664189E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999973513400695	WITHOUT_CLASSIFICATION	2.6486599305077282E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999950110531983	WITHOUT_CLASSIFICATION	4.988946801727169E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999950110531983	WITHOUT_CLASSIFICATION	4.988946801727169E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999950110531983	WITHOUT_CLASSIFICATION	4.988946801727169E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999179761949645	WITHOUT_CLASSIFICATION	8.20238050355473E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999950110531983	WITHOUT_CLASSIFICATION	4.988946801727169E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999924496033631	WITHOUT_CLASSIFICATION	7.550396636895655E-6	TEST
// int	WITHOUT_CLASSIFICATION	0.9999477117707651	WITHOUT_CLASSIFICATION	5.228822923482341E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999704733322758	WITHOUT_CLASSIFICATION	2.9526667724112908E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999437022712516	WITHOUT_CLASSIFICATION	5.629772874828059E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951901527292	WITHOUT_CLASSIFICATION	4.8098472708396805E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999951901527292	WITHOUT_CLASSIFICATION	4.8098472708396805E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999824987891187	WITHOUT_CLASSIFICATION	1.7501210881220327E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.999997486866885	WITHOUT_CLASSIFICATION	2.5131331150003097E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999206131278722	WITHOUT_CLASSIFICATION	7.93868721277247E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999298749028438	WITHOUT_CLASSIFICATION	7.01250971562417E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999972477551649	WITHOUT_CLASSIFICATION	2.7522448351134073E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999972477551649	WITHOUT_CLASSIFICATION	2.7522448351134073E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999932693458531	WITHOUT_CLASSIFICATION	6.730654146856214E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999960136030824	WITHOUT_CLASSIFICATION	3.986396917516188E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9998870083427329	WITHOUT_CLASSIFICATION	1.1299165726711849E-4	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999470815767877	WITHOUT_CLASSIFICATION	5.291842321227732E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999637212916173	WITHOUT_CLASSIFICATION	3.6278708382858815E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999439824124869	WITHOUT_CLASSIFICATION	5.601758751301729E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999557793787717	WITHOUT_CLASSIFICATION	4.4220621228278265E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999437578566295	WITHOUT_CLASSIFICATION	5.6242143370499176E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999437578566295	WITHOUT_CLASSIFICATION	5.6242143370499176E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999212260836969	WITHOUT_CLASSIFICATION	7.877391630303647E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999212260836969	WITHOUT_CLASSIFICATION	7.877391630303647E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999970991929088	WITHOUT_CLASSIFICATION	2.9008070910962202E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999970991929088	WITHOUT_CLASSIFICATION	2.9008070910962202E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999733600347258	WITHOUT_CLASSIFICATION	2.663996527421069E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999733600347258	WITHOUT_CLASSIFICATION	2.663996527421069E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999972477551649	WITHOUT_CLASSIFICATION	2.7522448351134073E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999557793787717	WITHOUT_CLASSIFICATION	4.4220621228278265E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999437578566295	WITHOUT_CLASSIFICATION	5.6242143370499176E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999437578566295	WITHOUT_CLASSIFICATION	5.6242143370499176E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999212260836969	WITHOUT_CLASSIFICATION	7.877391630303647E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999970991929088	WITHOUT_CLASSIFICATION	2.9008070910962202E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999970991929088	WITHOUT_CLASSIFICATION	2.9008070910962202E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999733600347258	WITHOUT_CLASSIFICATION	2.663996527421069E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999867013805226	WITHOUT_CLASSIFICATION	1.329861947743646E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999394907476149	WITHOUT_CLASSIFICATION	6.050925238509254E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999714913106668	WITHOUT_CLASSIFICATION	2.850868933321328E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999763318125585	WITHOUT_CLASSIFICATION	2.366818744155352E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999232043299312	WITHOUT_CLASSIFICATION	7.67956700688374E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999436417923483	WITHOUT_CLASSIFICATION	5.635820765163876E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997647810853596	WITHOUT_CLASSIFICATION	2.3521891464040363E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999975413775618	WITHOUT_CLASSIFICATION	2.4586224381999036E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998401774706639	WITHOUT_CLASSIFICATION	1.5982252933616355E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999987099849513	WITHOUT_CLASSIFICATION	1.2900150487063103E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999755020582632	WITHOUT_CLASSIFICATION	2.4497941736694932E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999806880617875	WITHOUT_CLASSIFICATION	1.9311938212391446E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999467835549086	WITHOUT_CLASSIFICATION	5.321644509125246E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999436417923483	WITHOUT_CLASSIFICATION	5.635820765163876E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993684796778565	WITHOUT_CLASSIFICATION	6.315203221435458E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993684796778565	WITHOUT_CLASSIFICATION	6.315203221435458E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999260774512785	WITHOUT_CLASSIFICATION	7.392254872151784E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999792111663354	WITHOUT_CLASSIFICATION	2.0788833664567705E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999792111663354	WITHOUT_CLASSIFICATION	2.0788833664567705E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997543382543899	WITHOUT_CLASSIFICATION	2.4566174561016003E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999413264510846	WITHOUT_CLASSIFICATION	5.867354891550226E-5	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9981883500505246	WITHOUT_CLASSIFICATION	0.001811649949475356	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999812129277688	WITHOUT_CLASSIFICATION	1.878707223123194E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999812129277688	WITHOUT_CLASSIFICATION	1.878707223123194E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999760851929228	WITHOUT_CLASSIFICATION	2.3914807077113543E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999968643356748	WITHOUT_CLASSIFICATION	3.135664325197399E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999968643356748	WITHOUT_CLASSIFICATION	3.135664325197399E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999668296001515	WITHOUT_CLASSIFICATION	3.317039984853555E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999854499039406	WITHOUT_CLASSIFICATION	1.4550096059446724E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999905915669792	WITHOUT_CLASSIFICATION	9.40843302076896E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9857118623853487	WITHOUT_CLASSIFICATION	0.014288137614651369	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999438763648998	WITHOUT_CLASSIFICATION	5.612363510011769E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999872988222551	WITHOUT_CLASSIFICATION	1.2701177744967583E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999660784827104	WITHOUT_CLASSIFICATION	3.3921517289579426E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996275413432412	WITHOUT_CLASSIFICATION	3.7245865675882944E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999548732044661	WITHOUT_CLASSIFICATION	4.5126795533932927E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999664994176677	WITHOUT_CLASSIFICATION	3.350058233228389E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999991092974742	WITHOUT_CLASSIFICATION	8.907025259411055E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999436274909035	WITHOUT_CLASSIFICATION	5.637250909648433E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999825409944927	WITHOUT_CLASSIFICATION	1.7459005507372478E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999982500300186	WITHOUT_CLASSIFICATION	1.7499699813903092E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999951958481542	WITHOUT_CLASSIFICATION	4.804151845762775E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999905915669792	WITHOUT_CLASSIFICATION	9.40843302076896E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999963682903643	WITHOUT_CLASSIFICATION	3.6317096357814686E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999954592591154	WITHOUT_CLASSIFICATION	4.5407408845969084E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999436828844331	WITHOUT_CLASSIFICATION	5.631711556691799E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999951958481542	WITHOUT_CLASSIFICATION	4.804151845762775E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999963682903643	WITHOUT_CLASSIFICATION	3.6317096357814686E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999436828844331	WITHOUT_CLASSIFICATION	5.631711556691799E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999491167738825	WITHOUT_CLASSIFICATION	5.0883226117448266E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999491167738825	WITHOUT_CLASSIFICATION	5.0883226117448266E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951901059371	WITHOUT_CLASSIFICATION	4.809894062979995E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999960762342244	WITHOUT_CLASSIFICATION	3.92376577562617E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999469425136531	WITHOUT_CLASSIFICATION	5.305748634687008E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996978650983747	WITHOUT_CLASSIFICATION	3.021349016252623E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999819541284864	WITHOUT_CLASSIFICATION	1.8045871513465704E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999846175696403	WITHOUT_CLASSIFICATION	1.5382430359680753E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999768638441314	WITHOUT_CLASSIFICATION	2.313615586861902E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999700402805758	WITHOUT_CLASSIFICATION	2.995971942416313E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999966637419586	WITHOUT_CLASSIFICATION	3.3362580412634665E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999768638441314	WITHOUT_CLASSIFICATION	2.313615586861902E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999436485367194	WITHOUT_CLASSIFICATION	5.63514632805663E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999384254397277	WITHOUT_CLASSIFICATION	6.15745602723411E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999439859599654	WITHOUT_CLASSIFICATION	5.601404003461679E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999951958481542	WITHOUT_CLASSIFICATION	4.804151845762775E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999875212891994	WITHOUT_CLASSIFICATION	1.2478710800622928E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999895880300131	WITHOUT_CLASSIFICATION	1.0411969986867922E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996889173869703	WITHOUT_CLASSIFICATION	3.1108261302962214E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.99999605842442	WITHOUT_CLASSIFICATION	3.941575580118565E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999641843076813	WITHOUT_CLASSIFICATION	3.5815692318671414E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999990989490497	WITHOUT_CLASSIFICATION	9.010509502614983E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998967220787892	WITHOUT_CLASSIFICATION	1.0327792121077672E-4	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999979833748453	WITHOUT_CLASSIFICATION	2.01662515469325E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999953206325419	WITHOUT_CLASSIFICATION	4.679367458113981E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999952109848906	WITHOUT_CLASSIFICATION	4.789015109338356E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999824987891187	WITHOUT_CLASSIFICATION	1.7501210881220327E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999771253176446	WITHOUT_CLASSIFICATION	2.287468235540859E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999664994176677	WITHOUT_CLASSIFICATION	3.350058233228389E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999834560669261	WITHOUT_CLASSIFICATION	1.654393307394894E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998271855115171	WITHOUT_CLASSIFICATION	1.7281448848299323E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999947572521297	WITHOUT_CLASSIFICATION	5.2427478702036E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999973889272846	WITHOUT_CLASSIFICATION	2.6110727154264155E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.99999739640492	WITHOUT_CLASSIFICATION	2.603595079954649E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999780205057873	WITHOUT_CLASSIFICATION	2.1979494212686953E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999931885362892	WITHOUT_CLASSIFICATION	6.811463710812363E-6	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999761512441779	WITHOUT_CLASSIFICATION	2.3848755822012998E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998611656205095	WITHOUT_CLASSIFICATION	1.3883437949058306E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998284070119601	WITHOUT_CLASSIFICATION	1.7159298803986767E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999395341397386	WITHOUT_CLASSIFICATION	6.0465860261445234E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999395341397386	WITHOUT_CLASSIFICATION	6.0465860261445234E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998038248470013	WITHOUT_CLASSIFICATION	1.96175152998725E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999826248834193	WITHOUT_CLASSIFICATION	1.737511658071722E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999069004555221	WITHOUT_CLASSIFICATION	9.309954447788223E-5	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999826376835025	WITHOUT_CLASSIFICATION	1.7362316497548548E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998038947687966	WITHOUT_CLASSIFICATION	1.9610523120339285E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998099174110792	WITHOUT_CLASSIFICATION	1.9008258892082316E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999876946267345	WITHOUT_CLASSIFICATION	1.2305373265435313E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.998952150245674	WITHOUT_CLASSIFICATION	0.0010478497543260148	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997692105688779	WITHOUT_CLASSIFICATION	2.307894311220748E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999557794593271	WITHOUT_CLASSIFICATION	4.422054067297789E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999866102634678	WITHOUT_CLASSIFICATION	1.338973653220819E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999967655546867	WITHOUT_CLASSIFICATION	3.2344453132985114E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998726756247919	WITHOUT_CLASSIFICATION	1.273243752080566E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787068985332	WITHOUT_CLASSIFICATION	2.1293101466843097E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977923927506	WITHOUT_CLASSIFICATION	2.2076072494041308E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999953821033524	WITHOUT_CLASSIFICATION	4.617896647593471E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999524412220504	WITHOUT_CLASSIFICATION	4.7558777949665205E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999764183984182	WITHOUT_CLASSIFICATION	2.3581601581801586E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999955175041225	WITHOUT_CLASSIFICATION	4.482495877449775E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999539856883793	WITHOUT_CLASSIFICATION	4.6014311620756485E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999539856883793	WITHOUT_CLASSIFICATION	4.6014311620756485E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999460396195203	WITHOUT_CLASSIFICATION	5.396038047968965E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999460396195203	WITHOUT_CLASSIFICATION	5.396038047968965E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998611656205095	WITHOUT_CLASSIFICATION	1.3883437949058306E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9995986726073501	WITHOUT_CLASSIFICATION	4.0132739264990704E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989435375271839	WITHOUT_CLASSIFICATION	0.0010564624728161421	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999042290616559	WITHOUT_CLASSIFICATION	9.577093834417795E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989435375271839	WITHOUT_CLASSIFICATION	0.0010564624728161421	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999042290616559	WITHOUT_CLASSIFICATION	9.577093834417795E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996623988923783	WITHOUT_CLASSIFICATION	3.376011076217805E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999366439922555	WITHOUT_CLASSIFICATION	6.335600774461289E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999982340131538	WITHOUT_CLASSIFICATION	1.7659868461700944E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999963283437143	WITHOUT_CLASSIFICATION	3.6716562856302053E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996069539175835	WITHOUT_CLASSIFICATION	3.930460824165631E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9992448259143142	WITHOUT_CLASSIFICATION	7.55174085685879E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999387753593052	WITHOUT_CLASSIFICATION	6.122464069471238E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9992437596141096	WITHOUT_CLASSIFICATION	7.562403858904657E-4	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996412881438752	WITHOUT_CLASSIFICATION	3.587118561248599E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999919446892094	WITHOUT_CLASSIFICATION	8.055310790577283E-6	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999882242961953	WITHOUT_CLASSIFICATION	1.1775703804734088E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999966961962896	WITHOUT_CLASSIFICATION	3.3038037103819942E-6	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999953810042481	WITHOUT_CLASSIFICATION	4.6189957518775775E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998175020772128	WITHOUT_CLASSIFICATION	1.8249792278735586E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998175020772128	WITHOUT_CLASSIFICATION	1.8249792278735586E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992432301003435	WITHOUT_CLASSIFICATION	7.567698996564901E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992432301003435	WITHOUT_CLASSIFICATION	7.567698996564901E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999980952312046	WITHOUT_CLASSIFICATION	1.9047687952944424E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996623988923783	WITHOUT_CLASSIFICATION	3.376011076217805E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999821290020965	WITHOUT_CLASSIFICATION	1.7870997903544147E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999946388004935	WITHOUT_CLASSIFICATION	5.361199506500769E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996718452765193	WITHOUT_CLASSIFICATION	3.2815472348061747E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994926814575468	WITHOUT_CLASSIFICATION	5.073185424531515E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.989557810497614	WITHOUT_CLASSIFICATION	0.010442189502385934	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996623988923783	WITHOUT_CLASSIFICATION	3.376011076217805E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994926814575468	WITHOUT_CLASSIFICATION	5.073185424531515E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.989557810497614	WITHOUT_CLASSIFICATION	0.010442189502385934	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995329900604597	WITHOUT_CLASSIFICATION	4.6700993954032445E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999952637413035	WITHOUT_CLASSIFICATION	4.736258696442313E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999438952821493	WITHOUT_CLASSIFICATION	5.610471785075501E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996623988923783	WITHOUT_CLASSIFICATION	3.376011076217805E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996623988923783	WITHOUT_CLASSIFICATION	3.376011076217805E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999974630968437	WITHOUT_CLASSIFICATION	2.5369031563597237E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999974254776163	WITHOUT_CLASSIFICATION	2.5745223837834755E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999864975098502	WITHOUT_CLASSIFICATION	1.3502490149708178E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999910946157764	WITHOUT_CLASSIFICATION	8.905384223711641E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.999866788015885	WITHOUT_CLASSIFICATION	1.3321198411488441E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999988218607049	WITHOUT_CLASSIFICATION	1.1781392951175465E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997820553219242	WITHOUT_CLASSIFICATION	2.1794467807575968E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999933394979345	WITHOUT_CLASSIFICATION	6.660502065517816E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.99999383212041	WITHOUT_CLASSIFICATION	6.167879589933227E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999808310326601	WITHOUT_CLASSIFICATION	1.9168967339970218E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999879209499497	WITHOUT_CLASSIFICATION	1.2079050050287446E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999905575573083	WITHOUT_CLASSIFICATION	9.442442691713073E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999773204444325	WITHOUT_CLASSIFICATION	2.2679555567496356E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999733135797592	WITHOUT_CLASSIFICATION	2.6686420240786937E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738790940162	WITHOUT_CLASSIFICATION	2.6120905983743848E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9996964727351871	WITHOUT_CLASSIFICATION	3.035272648127771E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998799377507407	WITHOUT_CLASSIFICATION	1.2006224925926286E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998518292672168	WITHOUT_CLASSIFICATION	1.4817073278312052E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997669606398177	WITHOUT_CLASSIFICATION	2.3303936018211372E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999042290616559	WITHOUT_CLASSIFICATION	9.577093834417795E-5	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997782866984702	WITHOUT_CLASSIFICATION	2.2171330152973145E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998799377507407	WITHOUT_CLASSIFICATION	1.2006224925926286E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995021945702312	WITHOUT_CLASSIFICATION	4.978054297688253E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996613671954092	WITHOUT_CLASSIFICATION	3.386328045908469E-4	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9973363326065648	WITHOUT_CLASSIFICATION	0.0026636673934351874	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999350978414958	WITHOUT_CLASSIFICATION	6.490215850410575E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999461886602207	WITHOUT_CLASSIFICATION	5.381133977935239E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999919464101656	WITHOUT_CLASSIFICATION	8.05358983439385E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999646470692473	WITHOUT_CLASSIFICATION	3.53529307527685E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999991513270928	WITHOUT_CLASSIFICATION	8.486729070821028E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999985560629712	WITHOUT_CLASSIFICATION	1.443937028805937E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999104439481907	WITHOUT_CLASSIFICATION	8.955605180927368E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999759918282136	WITHOUT_CLASSIFICATION	2.400817178634185E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999721140041892	WITHOUT_CLASSIFICATION	2.7885995810762942E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999997180810727	WITHOUT_CLASSIFICATION	2.8191892730841358E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925474283422	WITHOUT_CLASSIFICATION	7.452571657734596E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996997895333213	WITHOUT_CLASSIFICATION	3.00210466678656E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999960508385483	WITHOUT_CLASSIFICATION	3.94916145172002E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999400505417583	WITHOUT_CLASSIFICATION	5.9949458241755784E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926425281768	WITHOUT_CLASSIFICATION	7.357471823287253E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999970988666831	WITHOUT_CLASSIFICATION	2.901133316902508E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998485481934795	WITHOUT_CLASSIFICATION	1.5145180652049133E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999982422855742	WITHOUT_CLASSIFICATION	1.7577144257867291E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872287594482	WITHOUT_CLASSIFICATION	1.2771240551723169E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871359385829	WITHOUT_CLASSIFICATION	1.2864061417139934E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803801330079	WITHOUT_CLASSIFICATION	1.9619866992046545E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733748612548	WITHOUT_CLASSIFICATION	2.6625138745278253E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999827717431695	WITHOUT_CLASSIFICATION	1.7228256830471866E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999811976837616	WITHOUT_CLASSIFICATION	1.88023162383791E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807565627739	WITHOUT_CLASSIFICATION	1.9243437226067768E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833751855608	WITHOUT_CLASSIFICATION	1.662481443929666E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799084484507	WITHOUT_CLASSIFICATION	2.009155154923829E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887104430625	WITHOUT_CLASSIFICATION	1.1289556937610557E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796593728926	WITHOUT_CLASSIFICATION	2.0340627107432492E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796818105268	WITHOUT_CLASSIFICATION	2.0318189473263726E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999861660858964	WITHOUT_CLASSIFICATION	1.383391410350474E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729557183678	WITHOUT_CLASSIFICATION	2.7044281632314865E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999988934476117	WITHOUT_CLASSIFICATION	1.1065523882876927E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974373558642	WITHOUT_CLASSIFICATION	2.5626441358287526E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999996222329439	WITHOUT_CLASSIFICATION	3.777670560453557E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990694681532498	WITHOUT_CLASSIFICATION	9.305318467501511E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998469043655339	WITHOUT_CLASSIFICATION	1.5309563446606786E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995329900604597	WITHOUT_CLASSIFICATION	4.6700993954032445E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999982516192875	WITHOUT_CLASSIFICATION	1.7483807124943176E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997455321365364	WITHOUT_CLASSIFICATION	2.544678634636786E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999952251586177	WITHOUT_CLASSIFICATION	4.774841382236328E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999978717594548	WITHOUT_CLASSIFICATION	2.128240545219804E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999852263848672	WITHOUT_CLASSIFICATION	1.4773615132726214E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999783358945871	WITHOUT_CLASSIFICATION	2.166410541299846E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999900201418385	WITHOUT_CLASSIFICATION	9.97985816146118E-6	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752640571088	WITHOUT_CLASSIFICATION	2.4735942891112602E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774591040418	WITHOUT_CLASSIFICATION	2.2540895958215287E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994492136521	WITHOUT_CLASSIFICATION	5.50786347901909E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752827475628	WITHOUT_CLASSIFICATION	2.4717252437208324E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998088529802747	WITHOUT_CLASSIFICATION	1.911470197253434E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999591507829332	WITHOUT_CLASSIFICATION	4.084921706688497E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999854904528824	WITHOUT_CLASSIFICATION	1.4509547117615833E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999989245914617	WITHOUT_CLASSIFICATION	1.0754085382945694E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835961846898	WITHOUT_CLASSIFICATION	1.6403815310149738E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999980100882624	WITHOUT_CLASSIFICATION	1.9899117375976313E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999894105869137	WITHOUT_CLASSIFICATION	1.0589413086360826E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999843339885839	WITHOUT_CLASSIFICATION	1.5666011416084287E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999960936326309	WITHOUT_CLASSIFICATION	3.906367369131374E-6	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999955799474948	WITHOUT_CLASSIFICATION	4.420052505205877E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999695349314537	WITHOUT_CLASSIFICATION	3.04650685463105E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999762660250368	WITHOUT_CLASSIFICATION	2.373397496315968E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999895625959667	WITHOUT_CLASSIFICATION	1.0437404033295556E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990694681532498	WITHOUT_CLASSIFICATION	9.305318467501511E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999978470526066	WITHOUT_CLASSIFICATION	2.1529473934473995E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999953753572197	WITHOUT_CLASSIFICATION	4.624642780235474E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999860158345879	WITHOUT_CLASSIFICATION	1.3984165412134314E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974373558642	WITHOUT_CLASSIFICATION	2.5626441358287526E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999895954413354	WITHOUT_CLASSIFICATION	1.0404558664678064E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9989168158139735	WITHOUT_CLASSIFICATION	0.0010831841860263968	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999740810155574	WITHOUT_CLASSIFICATION	2.5918984442578476E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999785457687287	WITHOUT_CLASSIFICATION	2.1454231271285856E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999952198572018	WITHOUT_CLASSIFICATION	4.7801427982103925E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999730356874659	WITHOUT_CLASSIFICATION	2.69643125340624E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999747254839202	WITHOUT_CLASSIFICATION	2.5274516079822203E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999766423653458	WITHOUT_CLASSIFICATION	2.3357634654262426E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999860689267009	WITHOUT_CLASSIFICATION	1.3931073298959471E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997192441583483	WITHOUT_CLASSIFICATION	2.807558416516287E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999859385494607	WITHOUT_CLASSIFICATION	1.4061450539228163E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995329900604597	WITHOUT_CLASSIFICATION	4.6700993954032445E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974373558642	WITHOUT_CLASSIFICATION	2.5626441358287526E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999842862563575	WITHOUT_CLASSIFICATION	1.5713743642444247E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999118174249023	WITHOUT_CLASSIFICATION	8.818257509767421E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999954989868713	WITHOUT_CLASSIFICATION	4.5010131286563065E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998739849777549	WITHOUT_CLASSIFICATION	1.2601502224505562E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999964377337234	WITHOUT_CLASSIFICATION	3.562266276603847E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999993167539612	WITHOUT_CLASSIFICATION	6.83246038803387E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999965803271516	WITHOUT_CLASSIFICATION	3.4196728484859015E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999605240190682	WITHOUT_CLASSIFICATION	3.9475980931778924E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9995817298479633	WITHOUT_CLASSIFICATION	4.182701520366471E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999518725685987	WITHOUT_CLASSIFICATION	4.8127431401201744E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998249193458799	WITHOUT_CLASSIFICATION	1.7508065412006246E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974373558642	WITHOUT_CLASSIFICATION	2.5626441358287526E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990694681532498	WITHOUT_CLASSIFICATION	9.305318467501511E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999481530439925	WITHOUT_CLASSIFICATION	5.184695600740714E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999967108975165	WITHOUT_CLASSIFICATION	3.2891024835674826E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9986739717506136	WITHOUT_CLASSIFICATION	0.0013260282493863938	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990694681532498	WITHOUT_CLASSIFICATION	9.305318467501511E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999647673519748	WITHOUT_CLASSIFICATION	3.523264802518155E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999954989868713	WITHOUT_CLASSIFICATION	4.5010131286563065E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997389319077485	WITHOUT_CLASSIFICATION	2.6106809225140605E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9937896117138927	WITHOUT_CLASSIFICATION	0.006210388286107395	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999761675964549	WITHOUT_CLASSIFICATION	2.3832403545027504E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999952198572018	WITHOUT_CLASSIFICATION	4.7801427982103925E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999730356874659	WITHOUT_CLASSIFICATION	2.69643125340624E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999747254839202	WITHOUT_CLASSIFICATION	2.5274516079822203E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999889279217908	WITHOUT_CLASSIFICATION	1.1072078209087471E-5	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999777787230949	WITHOUT_CLASSIFICATION	2.22212769051762E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999408330658577	WITHOUT_CLASSIFICATION	5.9166934142301505E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999897121892606	WITHOUT_CLASSIFICATION	1.0287810739390029E-5	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999667273002217	WITHOUT_CLASSIFICATION	3.327269977819874E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990694681532498	WITHOUT_CLASSIFICATION	9.305318467501511E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999766423653458	WITHOUT_CLASSIFICATION	2.3357634654262426E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999860689267009	WITHOUT_CLASSIFICATION	1.3931073298959471E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996360968971	WITHOUT_CLASSIFICATION	3.639031028936976E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966397888439	WITHOUT_CLASSIFICATION	3.360211156104714E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999804612601495	WITHOUT_CLASSIFICATION	1.9538739850519728E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999874661069242	WITHOUT_CLASSIFICATION	1.2533893075799663E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999794081475777	WITHOUT_CLASSIFICATION	2.0591852422411357E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999285918899551	WITHOUT_CLASSIFICATION	7.140811004485918E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998713712653169	WITHOUT_CLASSIFICATION	1.2862873468303358E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999930485593129	WITHOUT_CLASSIFICATION	6.951440687091665E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999826028490889	WITHOUT_CLASSIFICATION	1.7397150911078223E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999824987891187	WITHOUT_CLASSIFICATION	1.7501210881220327E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833751855608	WITHOUT_CLASSIFICATION	1.662481443929666E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999824987891187	WITHOUT_CLASSIFICATION	1.7501210881220327E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999990173131371	WITHOUT_CLASSIFICATION	9.826868628930542E-6	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999757145749825	WITHOUT_CLASSIFICATION	2.4285425017585506E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801796706167	WITHOUT_CLASSIFICATION	1.9820329383276927E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999908081143772	WITHOUT_CLASSIFICATION	9.191885622741187E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999460765571946	WITHOUT_CLASSIFICATION	5.392344280545432E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799084484507	WITHOUT_CLASSIFICATION	2.009155154923829E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796591873719	WITHOUT_CLASSIFICATION	2.034081262818373E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999960936326309	WITHOUT_CLASSIFICATION	3.906367369131374E-6	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999734111169521	WITHOUT_CLASSIFICATION	2.6588883047899878E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999907076066495	WITHOUT_CLASSIFICATION	9.292393350472311E-6	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999932081856695	WITHOUT_CLASSIFICATION	6.79181433047059E-6	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9996957098270228	WITHOUT_CLASSIFICATION	3.0429017297718306E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999983299742887	WITHOUT_CLASSIFICATION	1.6700257111786855E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99942932046735	WITHOUT_CLASSIFICATION	5.706795326500529E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999273039850949	WITHOUT_CLASSIFICATION	7.269601490520779E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999991513270928	WITHOUT_CLASSIFICATION	8.486729070821028E-7	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999844456866132	WITHOUT_CLASSIFICATION	1.5554313386801644E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999827433278117	WITHOUT_CLASSIFICATION	1.725667218833607E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999877953128918	WITHOUT_CLASSIFICATION	1.2204687108167125E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999833974832018	WITHOUT_CLASSIFICATION	1.6602516798252495E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999962606531765	WITHOUT_CLASSIFICATION	3.7393468234150127E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999713936827528	WITHOUT_CLASSIFICATION	2.8606317247183995E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853082322188	WITHOUT_CLASSIFICATION	1.4691767781331573E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854948837498	WITHOUT_CLASSIFICATION	1.4505116250077904E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999666662430642	WITHOUT_CLASSIFICATION	3.333375693589718E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999736377707896	WITHOUT_CLASSIFICATION	2.6362229210379334E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999678769292837	WITHOUT_CLASSIFICATION	3.21230707162217E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999675421147237	WITHOUT_CLASSIFICATION	3.245788527616809E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859806365482	WITHOUT_CLASSIFICATION	1.401936345180707E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999912995956212	WITHOUT_CLASSIFICATION	8.700404378870065E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999712885069956	WITHOUT_CLASSIFICATION	2.871149300444543E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999714561932296	WITHOUT_CLASSIFICATION	2.8543806770481747E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859806365482	WITHOUT_CLASSIFICATION	1.401936345180707E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999468933480392	WITHOUT_CLASSIFICATION	5.310665196077573E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999636957357879	WITHOUT_CLASSIFICATION	3.630426421202287E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804246253561	WITHOUT_CLASSIFICATION	1.9575374643925625E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999949294489596	WITHOUT_CLASSIFICATION	5.070551040379285E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993735614221	WITHOUT_CLASSIFICATION	6.264385779678443E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999797157406106	WITHOUT_CLASSIFICATION	2.0284259389354723E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999968737422117	WITHOUT_CLASSIFICATION	3.126257788267626E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997953007563122	WITHOUT_CLASSIFICATION	2.046992436877927E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997953007563122	WITHOUT_CLASSIFICATION	2.046992436877927E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999977431159135	WITHOUT_CLASSIFICATION	2.2568840864458612E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999997298358399	WITHOUT_CLASSIFICATION	2.7016416009473896E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999723661602481	WITHOUT_CLASSIFICATION	2.7633839751920434E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999962867720672	WITHOUT_CLASSIFICATION	3.713227932713036E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999993621662735	WITHOUT_CLASSIFICATION	6.378337264733126E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999666571573851	WITHOUT_CLASSIFICATION	3.334284261497318E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999602758954182	WITHOUT_CLASSIFICATION	3.9724104581700065E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999858917890034	WITHOUT_CLASSIFICATION	1.4108210996634808E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998895711514622	WITHOUT_CLASSIFICATION	1.1042884853781095E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999985626222292	WITHOUT_CLASSIFICATION	1.4373777708704083E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999592667125133	WITHOUT_CLASSIFICATION	4.0733287486761255E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999550490879524	WITHOUT_CLASSIFICATION	4.4950912047701246E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998687124644076	WITHOUT_CLASSIFICATION	1.312875355924309E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999899493605056	WITHOUT_CLASSIFICATION	1.0050639494341935E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999502107619126	WITHOUT_CLASSIFICATION	4.9789238087381266E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996874820371631	WITHOUT_CLASSIFICATION	3.125179628369501E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999993822521713	WITHOUT_CLASSIFICATION	6.177478287058596E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999524905293185	WITHOUT_CLASSIFICATION	4.7509470681500135E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999843947221433	WITHOUT_CLASSIFICATION	1.5605277856711273E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999490867547903	WITHOUT_CLASSIFICATION	5.091324520973015E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999912305172782	WITHOUT_CLASSIFICATION	8.769482721739212E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999420223470604	WITHOUT_CLASSIFICATION	5.797765293967526E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999914629273771	WITHOUT_CLASSIFICATION	8.537072622981215E-6	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999926404154389	WITHOUT_CLASSIFICATION	7.3595845611187E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999685289748003	WITHOUT_CLASSIFICATION	3.147102519965867E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999917358566545	WITHOUT_CLASSIFICATION	8.264143345576785E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999979794244265	WITHOUT_CLASSIFICATION	2.0205755736029456E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999978964381833	WITHOUT_CLASSIFICATION	2.1035618168122026E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995277843120078	WITHOUT_CLASSIFICATION	4.722156879921966E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999951993074675	WITHOUT_CLASSIFICATION	4.800692532461631E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999753200509328	WITHOUT_CLASSIFICATION	2.4679949067295217E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.999969636440347	WITHOUT_CLASSIFICATION	3.0363559653081565E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998864384359627	WITHOUT_CLASSIFICATION	1.1356156403733926E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.999900477854052	WITHOUT_CLASSIFICATION	9.9522145947985E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.99974122291597	WITHOUT_CLASSIFICATION	2.5877708403004466E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999952962175293	WITHOUT_CLASSIFICATION	4.703782470815281E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997640013826452	WITHOUT_CLASSIFICATION	2.3599861735485998E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997883453822343	WITHOUT_CLASSIFICATION	2.1165461776573492E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999788306283189	WITHOUT_CLASSIFICATION	2.1169371681104544E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998890415819309	WITHOUT_CLASSIFICATION	1.1095841806906243E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999258815730915	WITHOUT_CLASSIFICATION	7.411842690845082E-5	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995329900604597	WITHOUT_CLASSIFICATION	4.6700993954032445E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995329900604597	WITHOUT_CLASSIFICATION	4.6700993954032445E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999702809038802	WITHOUT_CLASSIFICATION	2.9719096119802257E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999910827592939	WITHOUT_CLASSIFICATION	8.917240706082998E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9992810489831516	WITHOUT_CLASSIFICATION	7.189510168483983E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999944555627468	WITHOUT_CLASSIFICATION	5.544437253104758E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999943994832462	WITHOUT_CLASSIFICATION	5.600516753782071E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9993829184255193	WITHOUT_CLASSIFICATION	6.170815744806339E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997261065059687	WITHOUT_CLASSIFICATION	2.7389349403136366E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997956273776316	WITHOUT_CLASSIFICATION	2.0437262236832775E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999611078149598	WITHOUT_CLASSIFICATION	3.8892185040037844E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999155715987857	WITHOUT_CLASSIFICATION	8.442840121422505E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993923068814522	WITHOUT_CLASSIFICATION	6.076931185478864E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998986510505309	WITHOUT_CLASSIFICATION	1.013489494690516E-4	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997074253782542	WITHOUT_CLASSIFICATION	2.925746217458802E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996627124531516	WITHOUT_CLASSIFICATION	3.3728754684840887E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999763621425788	WITHOUT_CLASSIFICATION	2.363785742124081E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992449374665	WITHOUT_CLASSIFICATION	7.55062533543497E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999081568381	WITHOUT_CLASSIFICATION	9.184316182739347E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999989268744066	WITHOUT_CLASSIFICATION	1.0731255932982133E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999485041459407	WITHOUT_CLASSIFICATION	5.14958540593269E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998843764437293	WITHOUT_CLASSIFICATION	1.1562355627069836E-4	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999989268744066	WITHOUT_CLASSIFICATION	1.0731255932982133E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999817118887672	WITHOUT_CLASSIFICATION	1.8288111232844802E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.999989001884287	WITHOUT_CLASSIFICATION	1.0998115713165804E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999264939841574	WITHOUT_CLASSIFICATION	7.35060158425373E-5	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999239368791343	WITHOUT_CLASSIFICATION	7.606312086571191E-5	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.999995252327981	WITHOUT_CLASSIFICATION	4.747672019039009E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999927528769942	WITHOUT_CLASSIFICATION	7.247123005809667E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996972478643578	WITHOUT_CLASSIFICATION	3.027521356422683E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999789714778254	WITHOUT_CLASSIFICATION	2.1028522174507063E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999969537103017	WITHOUT_CLASSIFICATION	3.0462896983773443E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999731322060339	WITHOUT_CLASSIFICATION	2.6867793966130663E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999942269426866	WITHOUT_CLASSIFICATION	5.773057313406746E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998400098170555	WITHOUT_CLASSIFICATION	1.599901829446008E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999954859640613	WITHOUT_CLASSIFICATION	4.51403593865683E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999995527796611	WITHOUT_CLASSIFICATION	4.472203388959486E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999873569678701	WITHOUT_CLASSIFICATION	1.2643032129821448E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9845173723907904	WITHOUT_CLASSIFICATION	0.015482627609209666	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999993431294235	WITHOUT_CLASSIFICATION	6.568705765087502E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999555801149975	WITHOUT_CLASSIFICATION	4.441988500241352E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9976385630237816	WITHOUT_CLASSIFICATION	0.00236143697621839	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9998049334850218	WITHOUT_CLASSIFICATION	1.9506651497829452E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996574874113	WITHOUT_CLASSIFICATION	3.4251258866445434E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999886885016873	WITHOUT_CLASSIFICATION	1.1311498312687431E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999902896517905	WITHOUT_CLASSIFICATION	9.710348209494153E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999980250464479	WITHOUT_CLASSIFICATION	1.97495355216519E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999994761375377	WITHOUT_CLASSIFICATION	5.238624624096213E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999841115057634	WITHOUT_CLASSIFICATION	1.5888494236612966E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997079406539743	WITHOUT_CLASSIFICATION	2.920593460257651E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999915305893105	WITHOUT_CLASSIFICATION	8.46941068954996E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999713936827528	WITHOUT_CLASSIFICATION	2.8606317247183995E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994006293301387	WITHOUT_CLASSIFICATION	5.993706698612052E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999970997002468	WITHOUT_CLASSIFICATION	2.9002997531922856E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999705658720962	WITHOUT_CLASSIFICATION	2.943412790380271E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9976095182167987	WITHOUT_CLASSIFICATION	0.002390481783201335	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999433440218052	WITHOUT_CLASSIFICATION	5.6655978194781576E-5	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999078590754283	WITHOUT_CLASSIFICATION	9.214092457162826E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999656465188409	WITHOUT_CLASSIFICATION	3.435348115920086E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999958230540098	WITHOUT_CLASSIFICATION	4.176945990186708E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999954241797899	WITHOUT_CLASSIFICATION	4.575820210045726E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999995425084115	WITHOUT_CLASSIFICATION	4.574915885033208E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999857262824652	WITHOUT_CLASSIFICATION	1.427371753485566E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999930930922019	WITHOUT_CLASSIFICATION	6.906907798069696E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9884034882967224	WITHOUT_CLASSIFICATION	0.011596511703277574	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999700369381771	WITHOUT_CLASSIFICATION	2.9963061822898242E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999916872607491	WITHOUT_CLASSIFICATION	8.312739250903494E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999291588215102	WITHOUT_CLASSIFICATION	7.084117848976283E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999415938777777	WITHOUT_CLASSIFICATION	5.840612222230797E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999827693689461	WITHOUT_CLASSIFICATION	1.7230631053825656E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999277007818558	WITHOUT_CLASSIFICATION	7.229921814425362E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999583457752368	WITHOUT_CLASSIFICATION	4.1654224763277886E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999982444947537	WITHOUT_CLASSIFICATION	1.7555052463055436E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999973922607139	WITHOUT_CLASSIFICATION	2.607739286088886E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999832612525075	WITHOUT_CLASSIFICATION	1.6738747492556907E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999421549616758	WITHOUT_CLASSIFICATION	5.784503832424353E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999978063235568	WITHOUT_CLASSIFICATION	2.1936764431896384E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999994793394402	WITHOUT_CLASSIFICATION	5.206605597967098E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999618895117	WITHOUT_CLASSIFICATION	3.811048830029363E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999394561492354	WITHOUT_CLASSIFICATION	6.0543850764664E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9998489618265962	WITHOUT_CLASSIFICATION	1.5103817340389358E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751887461178	WITHOUT_CLASSIFICATION	2.4811253882278397E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671857279758	WITHOUT_CLASSIFICATION	3.281427202426729E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674412239917	WITHOUT_CLASSIFICATION	3.255877600826711E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999996928207239	WITHOUT_CLASSIFICATION	3.071792761036701E-6	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999897313478676	WITHOUT_CLASSIFICATION	1.0268652132501194E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999966442288986	WITHOUT_CLASSIFICATION	3.355771101367502E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999994208494569	WITHOUT_CLASSIFICATION	5.791505430281417E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999952216316657	WITHOUT_CLASSIFICATION	4.778368334317281E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975059210187	WITHOUT_CLASSIFICATION	2.4940789812975535E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999952216316657	WITHOUT_CLASSIFICATION	4.778368334317281E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999911291779389	WITHOUT_CLASSIFICATION	8.870822061107747E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999942833982932	WITHOUT_CLASSIFICATION	5.716601706705507E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999964292520191	WITHOUT_CLASSIFICATION	3.570747980829832E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999242449706041	WITHOUT_CLASSIFICATION	7.575502939588747E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999614688428976	WITHOUT_CLASSIFICATION	3.8531157102437214E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9914830154315233	WITHOUT_CLASSIFICATION	0.008516984568476701	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999997098854348	WITHOUT_CLASSIFICATION	2.9011456519860228E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999925533662937	WITHOUT_CLASSIFICATION	7.446633706251833E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999973581415387	WITHOUT_CLASSIFICATION	2.6418584613495388E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998018716500491	WITHOUT_CLASSIFICATION	1.9812834995093514E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999893262423534	WITHOUT_CLASSIFICATION	1.0673757646673499E-5	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999935440375872	WITHOUT_CLASSIFICATION	6.455962412839709E-6	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9987198419590518	WITHOUT_CLASSIFICATION	0.0012801580409481975	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9991799822698991	WITHOUT_CLASSIFICATION	8.200177301008996E-4	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999887215215454	WITHOUT_CLASSIFICATION	1.1278478454532762E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999979081786036	WITHOUT_CLASSIFICATION	2.0918213963924186E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999494251914667	WITHOUT_CLASSIFICATION	5.057480853322589E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999494251914667	WITHOUT_CLASSIFICATION	5.057480853322589E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999139957447857	WITHOUT_CLASSIFICATION	8.600425521441519E-5	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999889184859972	WITHOUT_CLASSIFICATION	1.1081514002704567E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999786672294904	WITHOUT_CLASSIFICATION	2.1332770509605075E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999862931031701	WITHOUT_CLASSIFICATION	1.3706896829827194E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999988234266754	WITHOUT_CLASSIFICATION	1.176573324601967E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999812730020934	WITHOUT_CLASSIFICATION	1.8726997906568637E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9994143419091766	WITHOUT_CLASSIFICATION	5.856580908234959E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998889596100472	WITHOUT_CLASSIFICATION	1.1104038995283896E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999956878528041	WITHOUT_CLASSIFICATION	4.31214719586645E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999831492290643	WITHOUT_CLASSIFICATION	1.6850770935666508E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999531571873422	WITHOUT_CLASSIFICATION	4.6842812657670584E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999904330564205	WITHOUT_CLASSIFICATION	9.566943579498517E-6	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999915923524861	WITHOUT_CLASSIFICATION	8.407647513859457E-6	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999967220051165	WITHOUT_CLASSIFICATION	3.277994883493929E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999872177048551	WITHOUT_CLASSIFICATION	1.2782295145018765E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999989464084408	WITHOUT_CLASSIFICATION	1.053591559201834E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999737367564541	WITHOUT_CLASSIFICATION	2.6263243545955754E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997502145766127	WITHOUT_CLASSIFICATION	2.497854233872429E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999470089528556	WITHOUT_CLASSIFICATION	5.2991047144345944E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999935910377199	WITHOUT_CLASSIFICATION	6.40896228014974E-6	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999673973355826	WITHOUT_CLASSIFICATION	3.260266441747277E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999954063116903	WITHOUT_CLASSIFICATION	4.59368830980097E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999869925370574	WITHOUT_CLASSIFICATION	1.3007462942601E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999871318667639	WITHOUT_CLASSIFICATION	1.2868133236161849E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9998321056963483	WITHOUT_CLASSIFICATION	1.678943036517196E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999948501623646	WITHOUT_CLASSIFICATION	5.149837635451008E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9990446115997573	WITHOUT_CLASSIFICATION	9.553884002425793E-4	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9992607290141305	WITHOUT_CLASSIFICATION	7.392709858695058E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999481772145609	WITHOUT_CLASSIFICATION	5.182278543911867E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999710961158961	WITHOUT_CLASSIFICATION	2.8903884103977742E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999602431733719	WITHOUT_CLASSIFICATION	3.975682662810654E-4	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999834726150088	WITHOUT_CLASSIFICATION	1.65273849913212E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9919430771947382	WITHOUT_CLASSIFICATION	0.008056922805261792	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999928044565942	WITHOUT_CLASSIFICATION	7.195543405800036E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999852496735689	WITHOUT_CLASSIFICATION	1.4750326431090915E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999908174771783	WITHOUT_CLASSIFICATION	9.182522821615099E-6	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999738289336516	WITHOUT_CLASSIFICATION	2.6171066348377544E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999638606751275	WITHOUT_CLASSIFICATION	3.613932487250444E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999938300953514	WITHOUT_CLASSIFICATION	6.169904648568424E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999642311099821	WITHOUT_CLASSIFICATION	3.576889001789677E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999589171038652	WITHOUT_CLASSIFICATION	4.10828961347659E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734704119387	WITHOUT_CLASSIFICATION	2.652958806124088E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999460319924749	WITHOUT_CLASSIFICATION	5.396800752520954E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998434890248895	WITHOUT_CLASSIFICATION	1.565109751104009E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999902448828653	WITHOUT_CLASSIFICATION	9.755117134756835E-6	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999985816748425	WITHOUT_CLASSIFICATION	1.4183251574933428E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999789624690943	WITHOUT_CLASSIFICATION	2.10375309056066E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999980570466516	WITHOUT_CLASSIFICATION	1.9429533484024846E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999874620900008	WITHOUT_CLASSIFICATION	1.2537909999200704E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999873195880962	WITHOUT_CLASSIFICATION	1.2680411903956163E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734704119387	WITHOUT_CLASSIFICATION	2.652958806124088E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998197484992336	WITHOUT_CLASSIFICATION	1.8025150076635919E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997072088209423	WITHOUT_CLASSIFICATION	2.92791179057692E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999633500008267	WITHOUT_CLASSIFICATION	3.6649999173264005E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999780636141179	WITHOUT_CLASSIFICATION	2.1936385882117826E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999647673519748	WITHOUT_CLASSIFICATION	3.523264802518155E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999647673519748	WITHOUT_CLASSIFICATION	3.523264802518155E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9985561945544247	WITHOUT_CLASSIFICATION	0.001443805445575249	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999634932228555	WITHOUT_CLASSIFICATION	3.650677714450446E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999373666494252	WITHOUT_CLASSIFICATION	6.26333505748269E-5	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999745007203434	WITHOUT_CLASSIFICATION	2.5499279656610465E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999714139347717	WITHOUT_CLASSIFICATION	2.8586065228230922E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999967385162858	WITHOUT_CLASSIFICATION	3.261483714289279E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999421034037981	WITHOUT_CLASSIFICATION	5.789659620189461E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999230943256885	WITHOUT_CLASSIFICATION	7.690567431152899E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998106055964341	WITHOUT_CLASSIFICATION	1.893944035659086E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999352952334192	WITHOUT_CLASSIFICATION	6.47047665808021E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998936060239023	WITHOUT_CLASSIFICATION	1.0639397609772505E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997976966485967	WITHOUT_CLASSIFICATION	2.0230335140314733E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999977053443082	WITHOUT_CLASSIFICATION	2.2946556918457083E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998819596963581	WITHOUT_CLASSIFICATION	1.180403036418885E-4	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991291925024416	WITHOUT_CLASSIFICATION	8.708074975584707E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997074253303	WITHOUT_CLASSIFICATION	2.9257466968802493E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998688342577913	WITHOUT_CLASSIFICATION	1.3116574220866338E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998089316020227	WITHOUT_CLASSIFICATION	1.9106839797728472E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999993947168297	WITHOUT_CLASSIFICATION	6.052831702290379E-7	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997436999867881	WITHOUT_CLASSIFICATION	2.563000132118117E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999952117263954	WITHOUT_CLASSIFICATION	4.788273604697336E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999990803274795	WITHOUT_CLASSIFICATION	9.196725205052755E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999990971275057	WITHOUT_CLASSIFICATION	9.028724943334871E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9994408205769881	WITHOUT_CLASSIFICATION	5.591794230118969E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999840686034281	WITHOUT_CLASSIFICATION	1.593139657185416E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999620605719483	WITHOUT_CLASSIFICATION	3.793942805183117E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999967911334914	WITHOUT_CLASSIFICATION	3.2088665085684975E-6	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999914767822078	WITHOUT_CLASSIFICATION	8.523217792122769E-6	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9996983719558847	WITHOUT_CLASSIFICATION	3.016280441152141E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999821489761296	WITHOUT_CLASSIFICATION	1.7851023870421176E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999896345171678	WITHOUT_CLASSIFICATION	1.036548283213112E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999948039365304	WITHOUT_CLASSIFICATION	5.196063469511877E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.99956681415167	WITHOUT_CLASSIFICATION	4.331858483300268E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999986644546847	WITHOUT_CLASSIFICATION	1.3355453152879502E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996189648773234	WITHOUT_CLASSIFICATION	3.8103512267656693E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997307967988839	WITHOUT_CLASSIFICATION	2.69203201116118E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999531571873422	WITHOUT_CLASSIFICATION	4.6842812657670584E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9997375696536895	WITHOUT_CLASSIFICATION	2.6243034631039526E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.99942932046735	WITHOUT_CLASSIFICATION	5.706795326500529E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999749802316722	WITHOUT_CLASSIFICATION	2.5019768327771992E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999771935948588	WITHOUT_CLASSIFICATION	2.2806405141236906E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9996172924360939	WITHOUT_CLASSIFICATION	3.827075639061402E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.999958507439781	WITHOUT_CLASSIFICATION	4.149256021909231E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999313493501993	WITHOUT_CLASSIFICATION	6.86506498006913E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999807548545675	WITHOUT_CLASSIFICATION	1.9245145432478214E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999345145638826	WITHOUT_CLASSIFICATION	6.548543611740501E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999898407161838	WITHOUT_CLASSIFICATION	1.015928381627571E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999959422042728	WITHOUT_CLASSIFICATION	4.0577957271682044E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999950212818222	WITHOUT_CLASSIFICATION	4.978718177778406E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999965908135948	WITHOUT_CLASSIFICATION	3.409186405150792E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999726652223028	WITHOUT_CLASSIFICATION	2.733477769720119E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999770563265864	WITHOUT_CLASSIFICATION	2.2943673413567216E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999809209048145	WITHOUT_CLASSIFICATION	1.9079095185490733E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999956505026342	WITHOUT_CLASSIFICATION	4.3494973658608075E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996963853260268	WITHOUT_CLASSIFICATION	3.036146739731678E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999952449052054	WITHOUT_CLASSIFICATION	4.755094794510723E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997513861732533	WITHOUT_CLASSIFICATION	2.486138267466766E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998855638050557	WITHOUT_CLASSIFICATION	1.1443619494436202E-4	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997441167632852	WITHOUT_CLASSIFICATION	2.5588323671476676E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999958163619911	WITHOUT_CLASSIFICATION	4.183638008897232E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999876038211845	WITHOUT_CLASSIFICATION	1.2396178815608365E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769817180906	WITHOUT_CLASSIFICATION	2.3018281909444934E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782944232076	WITHOUT_CLASSIFICATION	2.1705576792334336E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999684958814564	WITHOUT_CLASSIFICATION	3.150411854359157E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999923125082288	WITHOUT_CLASSIFICATION	7.687491771155882E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999939319321263	WITHOUT_CLASSIFICATION	6.06806787369395E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999996837408579	WITHOUT_CLASSIFICATION	3.1625914211408534E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999950772348921	WITHOUT_CLASSIFICATION	4.922765107837672E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999923307972935	WITHOUT_CLASSIFICATION	7.669202706536683E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999801712907116	WITHOUT_CLASSIFICATION	1.9828709288369328E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999964842657791	WITHOUT_CLASSIFICATION	3.5157342208834656E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999786054583788	WITHOUT_CLASSIFICATION	2.1394541621173162E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999953921841165	WITHOUT_CLASSIFICATION	4.607815883509787E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999569956903069	WITHOUT_CLASSIFICATION	4.30043096930412E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999972365827194	WITHOUT_CLASSIFICATION	2.7634172806091492E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999972411709989	WITHOUT_CLASSIFICATION	2.7588290011710784E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999912415353972	WITHOUT_CLASSIFICATION	8.758464602796261E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999614538211623	WITHOUT_CLASSIFICATION	3.854617883763168E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998799867409346	WITHOUT_CLASSIFICATION	1.2001325906547463E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999587693356351	WITHOUT_CLASSIFICATION	4.123066436497836E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999910284921693	WITHOUT_CLASSIFICATION	8.971507830797255E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999947842805728	WITHOUT_CLASSIFICATION	5.215719427246782E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999359174723081	WITHOUT_CLASSIFICATION	6.408252769181738E-5	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999910055777577	WITHOUT_CLASSIFICATION	8.994422242299916E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999829247829141	WITHOUT_CLASSIFICATION	1.7075217085898596E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997905324109828	WITHOUT_CLASSIFICATION	2.0946758901722987E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999987039753538	WITHOUT_CLASSIFICATION	1.2960246460641922E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999910868641326	WITHOUT_CLASSIFICATION	8.91313586738002E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9995544361581247	WITHOUT_CLASSIFICATION	4.455638418753149E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998962888661446	WITHOUT_CLASSIFICATION	1.0371113385547389E-4	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769817180906	WITHOUT_CLASSIFICATION	2.3018281909444934E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999716862623883	WITHOUT_CLASSIFICATION	2.8313737611730428E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999992324448301	WITHOUT_CLASSIFICATION	7.675551697948841E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999500314059849	WITHOUT_CLASSIFICATION	4.9968594015052594E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999798928446352	WITHOUT_CLASSIFICATION	2.0107155364826052E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999857525138907	WITHOUT_CLASSIFICATION	1.4247486109315457E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999648691082571	WITHOUT_CLASSIFICATION	3.5130891742855215E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999768621924886	WITHOUT_CLASSIFICATION	2.3137807511423165E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999982144218557	WITHOUT_CLASSIFICATION	1.7855781442828017E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999985707880056	WITHOUT_CLASSIFICATION	1.4292119944429704E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999480738839305	WITHOUT_CLASSIFICATION	5.192611606952852E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999971999410295	WITHOUT_CLASSIFICATION	2.800058970428851E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996967608025328	WITHOUT_CLASSIFICATION	3.032391974671986E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999942952982991	WITHOUT_CLASSIFICATION	5.704701700933351E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999824639685055	WITHOUT_CLASSIFICATION	1.7536031494466556E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999911291779389	WITHOUT_CLASSIFICATION	8.870822061107747E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999735169731	WITHOUT_CLASSIFICATION	2.6483026902326905E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999994243008837	WITHOUT_CLASSIFICATION	5.756991163395399E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999995003257578	WITHOUT_CLASSIFICATION	4.996742422036879E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.99999735114674	WITHOUT_CLASSIFICATION	2.648853259935253E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999993316463635	WITHOUT_CLASSIFICATION	6.683536365109469E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998207202949175	WITHOUT_CLASSIFICATION	1.7927970508258728E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998207202949175	WITHOUT_CLASSIFICATION	1.7927970508258728E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999888407580976	WITHOUT_CLASSIFICATION	1.1159241902467808E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999970024683137	WITHOUT_CLASSIFICATION	2.997531686356914E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999841548799597	WITHOUT_CLASSIFICATION	1.584512004027495E-5	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999856835470424	WITHOUT_CLASSIFICATION	1.4316452957468103E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999588446734535	WITHOUT_CLASSIFICATION	4.1155326546383644E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999946290984155	WITHOUT_CLASSIFICATION	5.370901584461044E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999802915925604	WITHOUT_CLASSIFICATION	1.9708407439522935E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999614350433071	WITHOUT_CLASSIFICATION	3.856495669295714E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999614350433071	WITHOUT_CLASSIFICATION	3.856495669295714E-5	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995192937253035	WITHOUT_CLASSIFICATION	4.807062746965077E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999905346501075	WITHOUT_CLASSIFICATION	9.465349892548838E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999890229101364	WITHOUT_CLASSIFICATION	1.0977089863594501E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924157117254	WITHOUT_CLASSIFICATION	7.584288274589255E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924157117254	WITHOUT_CLASSIFICATION	7.584288274589255E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924157117254	WITHOUT_CLASSIFICATION	7.584288274589255E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999628190166553	WITHOUT_CLASSIFICATION	3.718098334463198E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999823712060502	WITHOUT_CLASSIFICATION	1.7628793949797316E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999905116253212	WITHOUT_CLASSIFICATION	9.488374678744603E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999599412200476	WITHOUT_CLASSIFICATION	4.005877995241592E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999953740006091	WITHOUT_CLASSIFICATION	4.625999390938519E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999994223046901	WITHOUT_CLASSIFICATION	5.77695309948694E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999583229539691	WITHOUT_CLASSIFICATION	4.167704603098288E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9989432624019625	WITHOUT_CLASSIFICATION	0.0010567375980373886	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999961580745799	WITHOUT_CLASSIFICATION	3.841925420140723E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999953411745415	WITHOUT_CLASSIFICATION	4.658825458521461E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999887059511893	WITHOUT_CLASSIFICATION	1.1294048810697514E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999090955613177	WITHOUT_CLASSIFICATION	9.090443868236329E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999907289774276	WITHOUT_CLASSIFICATION	9.271022572480196E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999997202379337	WITHOUT_CLASSIFICATION	2.797620662995637E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999914753437026	WITHOUT_CLASSIFICATION	8.52465629754183E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999994272193123	WITHOUT_CLASSIFICATION	5.727806877008759E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999947727971302	WITHOUT_CLASSIFICATION	5.227202869828699E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998207202949175	WITHOUT_CLASSIFICATION	1.7927970508258728E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999929329195503	WITHOUT_CLASSIFICATION	7.067080449671503E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999870310239802	WITHOUT_CLASSIFICATION	1.2968976019693131E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999981167831607	WITHOUT_CLASSIFICATION	1.883216839296747E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999837413811373	WITHOUT_CLASSIFICATION	1.6258618862737758E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999928745793341	WITHOUT_CLASSIFICATION	7.125420665895069E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999983126055522	WITHOUT_CLASSIFICATION	1.6873944478332759E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999660336812918	WITHOUT_CLASSIFICATION	3.396631870820512E-4	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999952591089469	WITHOUT_CLASSIFICATION	4.740891053080562E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998587521440536	WITHOUT_CLASSIFICATION	1.4124785594629894E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999816765930815	WITHOUT_CLASSIFICATION	1.8323406918449525E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998343595219921	WITHOUT_CLASSIFICATION	1.6564047800789013E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999851864622921	WITHOUT_CLASSIFICATION	1.4813537707839487E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999642827473115	WITHOUT_CLASSIFICATION	3.571725268850927E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999555280103113	WITHOUT_CLASSIFICATION	4.4471989688753423E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999840651841364	WITHOUT_CLASSIFICATION	1.5934815863644896E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999991578911629	WITHOUT_CLASSIFICATION	8.421088370424914E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999969767870351	WITHOUT_CLASSIFICATION	3.023212964820503E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999983101917956	WITHOUT_CLASSIFICATION	1.6898082043722051E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999991284746158	WITHOUT_CLASSIFICATION	8.715253842066126E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999991284746158	WITHOUT_CLASSIFICATION	8.715253842066126E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999870008399973	WITHOUT_CLASSIFICATION	1.2999160002747158E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999968283541036	WITHOUT_CLASSIFICATION	3.1716458964745878E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999855019634515	WITHOUT_CLASSIFICATION	1.4498036548613329E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999843842424209	WITHOUT_CLASSIFICATION	1.5615757579038244E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999372315096865	WITHOUT_CLASSIFICATION	6.276849031351786E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999791248069859	WITHOUT_CLASSIFICATION	2.087519301414441E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999883908330515	WITHOUT_CLASSIFICATION	1.1609166948513286E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999889437330938	WITHOUT_CLASSIFICATION	1.1056266906196409E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999863033402164	WITHOUT_CLASSIFICATION	1.3696659783633087E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999992659222479	WITHOUT_CLASSIFICATION	7.340777521021273E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999938083227508	WITHOUT_CLASSIFICATION	6.191677249201595E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997000576123297	WITHOUT_CLASSIFICATION	2.9994238767028507E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999987962914038	WITHOUT_CLASSIFICATION	1.2037085961844275E-6	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999954786749563	WITHOUT_CLASSIFICATION	4.521325043690388E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999995372728577	WITHOUT_CLASSIFICATION	4.627271423597387E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998911711440425	WITHOUT_CLASSIFICATION	1.0882885595757834E-4	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989256999826	WITHOUT_CLASSIFICATION	1.0743000174201508E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989256999826	WITHOUT_CLASSIFICATION	1.0743000174201508E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999786720488036	WITHOUT_CLASSIFICATION	2.1327951196385926E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999863633309	WITHOUT_CLASSIFICATION	1.363666909677735E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999331632964111	WITHOUT_CLASSIFICATION	6.683670358882245E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999330745102213	WITHOUT_CLASSIFICATION	6.692548977874196E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.999866754615433	WITHOUT_CLASSIFICATION	1.3324538456695263E-4	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.99984404750265	WITHOUT_CLASSIFICATION	1.5595249734993335E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996096816218542	WITHOUT_CLASSIFICATION	3.9031837814592057E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999974112137009	WITHOUT_CLASSIFICATION	2.588786299180865E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99996159926264	WITHOUT_CLASSIFICATION	3.8400737359922976E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999958505624999	WITHOUT_CLASSIFICATION	4.1494375000992376E-5	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999443805708902	WITHOUT_CLASSIFICATION	5.561942910977859E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999974112137009	WITHOUT_CLASSIFICATION	2.588786299180865E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999837887501847	WITHOUT_CLASSIFICATION	1.6211249815397387E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999912240315882	WITHOUT_CLASSIFICATION	8.77596841183484E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999989312571784	WITHOUT_CLASSIFICATION	1.0687428216100255E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999673153678073	WITHOUT_CLASSIFICATION	3.2684632192685016E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999739747478729	WITHOUT_CLASSIFICATION	2.602525212707655E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999996065897373	WITHOUT_CLASSIFICATION	3.934102627014314E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999854696367272	WITHOUT_CLASSIFICATION	1.4530363272659026E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999772215170657	WITHOUT_CLASSIFICATION	2.2778482934295934E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999850188192952	WITHOUT_CLASSIFICATION	1.4981180704759132E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999916143506776	WITHOUT_CLASSIFICATION	8.385649322458366E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998595320289038	WITHOUT_CLASSIFICATION	1.4046797109626538E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999936271205867	WITHOUT_CLASSIFICATION	6.372879413331173E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999927535232043	WITHOUT_CLASSIFICATION	7.246476795731637E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999925731320752	WITHOUT_CLASSIFICATION	7.426867924725918E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999917910037877	WITHOUT_CLASSIFICATION	8.208996212365681E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999994706146519	WITHOUT_CLASSIFICATION	5.293853480971025E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9996430427683687	WITHOUT_CLASSIFICATION	3.5695723163126195E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999443243847821	WITHOUT_CLASSIFICATION	5.567561521795784E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999443243847821	WITHOUT_CLASSIFICATION	5.567561521795784E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999854696367272	WITHOUT_CLASSIFICATION	1.4530363272659026E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999815129294054	WITHOUT_CLASSIFICATION	1.8487070594581197E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999986072050971	WITHOUT_CLASSIFICATION	1.3927949028802334E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998457398267261	WITHOUT_CLASSIFICATION	1.5426017327385471E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999436336839166	WITHOUT_CLASSIFICATION	5.636631608342667E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999928480570284	WITHOUT_CLASSIFICATION	7.1519429715730705E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999980629735856	WITHOUT_CLASSIFICATION	1.9370264143768527E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999944785807248	WITHOUT_CLASSIFICATION	5.521419275197617E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999744398891316	WITHOUT_CLASSIFICATION	2.5560110868364767E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999980003631743	WITHOUT_CLASSIFICATION	1.9996368256878356E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999831625082729	WITHOUT_CLASSIFICATION	1.6837491727128205E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999991392308405	WITHOUT_CLASSIFICATION	8.607691594988854E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999994788287789	WITHOUT_CLASSIFICATION	5.211712211093795E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999892404558407	WITHOUT_CLASSIFICATION	1.0759544159355447E-5	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999922328592316	WITHOUT_CLASSIFICATION	7.767140768405337E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999776543388048	WITHOUT_CLASSIFICATION	2.2345661195270322E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999961551117095	WITHOUT_CLASSIFICATION	3.844888290549801E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999984572075352	WITHOUT_CLASSIFICATION	1.5427924647991426E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999978019260443	WITHOUT_CLASSIFICATION	2.1980739556802253E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999344496533179	WITHOUT_CLASSIFICATION	6.555034668213352E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999890465730422	WITHOUT_CLASSIFICATION	1.0953426957838925E-5	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999715484807878	WITHOUT_CLASSIFICATION	2.845151921217814E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999852178248987	WITHOUT_CLASSIFICATION	1.4782175101317408E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999881283686697	WITHOUT_CLASSIFICATION	1.1871631330249782E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999993263245691	WITHOUT_CLASSIFICATION	6.7367543088935E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999856310683155	WITHOUT_CLASSIFICATION	1.4368931684381832E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999990599371794	WITHOUT_CLASSIFICATION	9.40062820605598E-6	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9983392466767992	WITHOUT_CLASSIFICATION	0.00166075332320079	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998677170077338	WITHOUT_CLASSIFICATION	1.3228299226614515E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999804867917622	WITHOUT_CLASSIFICATION	1.951320823771895E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999814329376782	WITHOUT_CLASSIFICATION	1.8567062321786058E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999773347294385	WITHOUT_CLASSIFICATION	2.2665270561430984E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999923907608405	WITHOUT_CLASSIFICATION	7.609239159559378E-6	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999953903814245	WITHOUT_CLASSIFICATION	4.6096185755476255E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999965935366166	WITHOUT_CLASSIFICATION	3.406463383374385E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999902972562709	WITHOUT_CLASSIFICATION	9.702743729113186E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999161161578837	WITHOUT_CLASSIFICATION	8.38838421162951E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999957928726534	WITHOUT_CLASSIFICATION	4.207127346550153E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999908836923365	WITHOUT_CLASSIFICATION	9.116307663465929E-6	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995959858257789	WITHOUT_CLASSIFICATION	4.040141742210617E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999920530035196	WITHOUT_CLASSIFICATION	7.946996480403236E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999644274443631	WITHOUT_CLASSIFICATION	3.5572555636862303E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999869265580268	WITHOUT_CLASSIFICATION	1.3073441973126324E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999479423076633	WITHOUT_CLASSIFICATION	5.2057692336787794E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999077249345227	WITHOUT_CLASSIFICATION	9.227506547724685E-5	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998065118545099	WITHOUT_CLASSIFICATION	1.9348814549014339E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999540782548088	WITHOUT_CLASSIFICATION	4.5921745191307596E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999967989396129	WITHOUT_CLASSIFICATION	3.201060387140624E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997436875288508	WITHOUT_CLASSIFICATION	2.563124711492316E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999993938118531	WITHOUT_CLASSIFICATION	6.061881470124694E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999783341353868	WITHOUT_CLASSIFICATION	2.1665864613254327E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999147917849195	WITHOUT_CLASSIFICATION	8.520821508044826E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99996159926264	WITHOUT_CLASSIFICATION	3.8400737359922976E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996511559218735	WITHOUT_CLASSIFICATION	3.4884407812654745E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999776543388048	WITHOUT_CLASSIFICATION	2.2345661195270322E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999896354864601	WITHOUT_CLASSIFICATION	1.0364513539888825E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999888215969055	WITHOUT_CLASSIFICATION	1.1178403094469515E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999983887650999	WITHOUT_CLASSIFICATION	1.6112349000880274E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999983789391086	WITHOUT_CLASSIFICATION	1.6210608914789958E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999904214147873	WITHOUT_CLASSIFICATION	9.578585212687605E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999998530760301	WITHOUT_CLASSIFICATION	1.4692396989675516E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999840697083543	WITHOUT_CLASSIFICATION	1.593029164567019E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999884491931644	WITHOUT_CLASSIFICATION	1.155080683567356E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999663195352909	WITHOUT_CLASSIFICATION	3.3680464709134905E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999989224534165	WITHOUT_CLASSIFICATION	1.0775465835023608E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999704755872226	WITHOUT_CLASSIFICATION	2.9524412777441795E-5	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999994362126521	WITHOUT_CLASSIFICATION	5.637873478794214E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998317798017	WITHOUT_CLASSIFICATION	1.6822019829800323E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998317798017	WITHOUT_CLASSIFICATION	1.6822019829800323E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999605560700018	WITHOUT_CLASSIFICATION	3.9443929998123096E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995897484659241	WITHOUT_CLASSIFICATION	4.102515340758428E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999982673131067	WITHOUT_CLASSIFICATION	1.7326868933859126E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9991212275213	WITHOUT_CLASSIFICATION	8.787724787001381E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999962514726463	WITHOUT_CLASSIFICATION	3.748527353715592E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999940885212824	WITHOUT_CLASSIFICATION	5.911478717656924E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994835578065	WITHOUT_CLASSIFICATION	5.16442193516553E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999570455465038	WITHOUT_CLASSIFICATION	4.29544534961689E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999983989827805	WITHOUT_CLASSIFICATION	1.6010172195052722E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999897577748401	WITHOUT_CLASSIFICATION	1.0242225159863826E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999841604556569	WITHOUT_CLASSIFICATION	1.5839544343199915E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999841604556569	WITHOUT_CLASSIFICATION	1.5839544343199915E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999081962079	WITHOUT_CLASSIFICATION	9.180379212202032E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999986677041323	WITHOUT_CLASSIFICATION	1.332295867688561E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999963745034657	WITHOUT_CLASSIFICATION	3.625496534325075E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998821022128391	WITHOUT_CLASSIFICATION	1.178977871609238E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991596039394	WITHOUT_CLASSIFICATION	8.403960605635604E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999664602099962	WITHOUT_CLASSIFICATION	3.353979000372425E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999664465099858	WITHOUT_CLASSIFICATION	3.355349001418961E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999978277141176	WITHOUT_CLASSIFICATION	2.1722858823294143E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999923165684728	WITHOUT_CLASSIFICATION	7.683431527229185E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999662257817863	WITHOUT_CLASSIFICATION	3.3774218213786036E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999865654644717	WITHOUT_CLASSIFICATION	1.3434535528289649E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729820272689	WITHOUT_CLASSIFICATION	2.7017972731056493E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999104439481907	WITHOUT_CLASSIFICATION	8.955605180927368E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999951121139968	WITHOUT_CLASSIFICATION	4.887886003227006E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997485644875395	WITHOUT_CLASSIFICATION	2.5143551246053E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974373558642	WITHOUT_CLASSIFICATION	2.5626441358287526E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9995817298479633	WITHOUT_CLASSIFICATION	4.182701520366471E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997669606398177	WITHOUT_CLASSIFICATION	2.3303936018211372E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999957408403188	WITHOUT_CLASSIFICATION	4.259159681146053E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999994866259778	WITHOUT_CLASSIFICATION	5.13374022162855E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997436999867881	WITHOUT_CLASSIFICATION	2.563000132118117E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999644141572359	WITHOUT_CLASSIFICATION	3.55858427641266E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998357585403931	WITHOUT_CLASSIFICATION	1.642414596069723E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999935644664562	WITHOUT_CLASSIFICATION	6.435533543834655E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.99997442978151	WITHOUT_CLASSIFICATION	2.5570218490123486E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999905800537728	WITHOUT_CLASSIFICATION	9.419946227167877E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877887685134	WITHOUT_CLASSIFICATION	1.2211231486647539E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999985146141273	WITHOUT_CLASSIFICATION	1.4853858727067232E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997360137276485	WITHOUT_CLASSIFICATION	2.6398627235155474E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801796706167	WITHOUT_CLASSIFICATION	1.9820329383276927E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9988402766498308	WITHOUT_CLASSIFICATION	0.001159723350169201	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999984924940734	WITHOUT_CLASSIFICATION	1.5075059267334114E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999714167026077	WITHOUT_CLASSIFICATION	2.8583297392356896E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999988788633484	WITHOUT_CLASSIFICATION	1.121136651601414E-5	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822953452154	WITHOUT_CLASSIFICATION	1.7704654784603452E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999987295865226	WITHOUT_CLASSIFICATION	1.270413477451431E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999802921140128	WITHOUT_CLASSIFICATION	1.9707885987082456E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999860606708103	WITHOUT_CLASSIFICATION	1.3939329189616084E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999873164034933	WITHOUT_CLASSIFICATION	1.2683596506884777E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999942604423955	WITHOUT_CLASSIFICATION	5.7395576046035635E-6	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997379339221912	WITHOUT_CLASSIFICATION	2.620660778088164E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999962189673066	WITHOUT_CLASSIFICATION	3.781032693437723E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999971122375785	WITHOUT_CLASSIFICATION	2.887762421453188E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999729485975748	WITHOUT_CLASSIFICATION	2.705140242529705E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999152707659285	WITHOUT_CLASSIFICATION	8.472923407149969E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999939938577757	WITHOUT_CLASSIFICATION	6.006142224389654E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999574515088818	WITHOUT_CLASSIFICATION	4.254849111809354E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999937667712946	WITHOUT_CLASSIFICATION	6.2332287054439276E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999825633202841	WITHOUT_CLASSIFICATION	1.743667971593857E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998834804175819	WITHOUT_CLASSIFICATION	1.1651958241814933E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999933365789783	WITHOUT_CLASSIFICATION	6.663421021758643E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999966008110472	WITHOUT_CLASSIFICATION	3.399188952716959E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999887416119666	WITHOUT_CLASSIFICATION	1.1258388033297698E-5	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999764896752151	WITHOUT_CLASSIFICATION	2.3510324784876213E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999887416119666	WITHOUT_CLASSIFICATION	1.1258388033297698E-5	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999767829528988	WITHOUT_CLASSIFICATION	2.321704710111467E-5	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999975277335831	WITHOUT_CLASSIFICATION	2.4722664169299305E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999914032658938	WITHOUT_CLASSIFICATION	8.596734106304292E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999989370064406	WITHOUT_CLASSIFICATION	1.0629935594423408E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999862795231174	WITHOUT_CLASSIFICATION	1.3720476882718574E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999914032658938	WITHOUT_CLASSIFICATION	8.596734106304292E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999956279773393	WITHOUT_CLASSIFICATION	4.372022660718209E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998469878038803	WITHOUT_CLASSIFICATION	1.530121961197691E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999996919828317	WITHOUT_CLASSIFICATION	3.0801716831536154E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999994980273683	WITHOUT_CLASSIFICATION	5.019726316975678E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999755066041782	WITHOUT_CLASSIFICATION	2.4493395821809558E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999970873265278	WITHOUT_CLASSIFICATION	2.912673472118366E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999997816684124	WITHOUT_CLASSIFICATION	2.1833158759292E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996499668241301	WITHOUT_CLASSIFICATION	3.500331758698615E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999966994688084	WITHOUT_CLASSIFICATION	3.3005311916059108E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999975037502449	WITHOUT_CLASSIFICATION	2.496249755049314E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999796886842561	WITHOUT_CLASSIFICATION	2.0311315743829393E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999980130232599	WITHOUT_CLASSIFICATION	1.9869767402158393E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997115209399	WITHOUT_CLASSIFICATION	2.8847906000711966E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997886177163277	WITHOUT_CLASSIFICATION	2.113822836723749E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999895722014603	WITHOUT_CLASSIFICATION	1.0427798539677496E-5	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996994502056453	WITHOUT_CLASSIFICATION	3.005497943547128E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9968370178136453	WITHOUT_CLASSIFICATION	0.0031629821863547567	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999984908775443	WITHOUT_CLASSIFICATION	1.5091224556166143E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999764135185828	WITHOUT_CLASSIFICATION	2.3586481417153423E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988160560049902	WITHOUT_CLASSIFICATION	0.001183943995009832	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998208320495741	WITHOUT_CLASSIFICATION	1.7916795042589317E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999561380945027	WITHOUT_CLASSIFICATION	4.386190549726831E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998865659256793	WITHOUT_CLASSIFICATION	1.1343407432070172E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9997015088768443	WITHOUT_CLASSIFICATION	2.984911231556424E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999460854332277	WITHOUT_CLASSIFICATION	5.3914566772424273E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999636880786844	WITHOUT_CLASSIFICATION	3.6311921315626226E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999988479697425	WITHOUT_CLASSIFICATION	1.15203025757016E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999945957931156	WITHOUT_CLASSIFICATION	5.40420688441021E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999749681098079	WITHOUT_CLASSIFICATION	2.5031890192099425E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998248365216307	WITHOUT_CLASSIFICATION	1.7516347836926685E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999858879517818	WITHOUT_CLASSIFICATION	1.4112048218224367E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9986739717506136	WITHOUT_CLASSIFICATION	0.0013260282493863938	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988160560049902	WITHOUT_CLASSIFICATION	0.001183943995009832	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999946723098838	WITHOUT_CLASSIFICATION	5.327690116260817E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9996833764444029	WITHOUT_CLASSIFICATION	3.166235555971968E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998774164423103	WITHOUT_CLASSIFICATION	1.225835576897315E-4	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999519899190007	WITHOUT_CLASSIFICATION	4.801008099925383E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999745427564127	WITHOUT_CLASSIFICATION	2.5457243587288473E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999890266982365	WITHOUT_CLASSIFICATION	1.0973301763421383E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999144271708656	WITHOUT_CLASSIFICATION	8.557282913441931E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999764127764375	WITHOUT_CLASSIFICATION	2.358722356248062E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999774990718907	WITHOUT_CLASSIFICATION	2.2500928109266173E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999793805658797	WITHOUT_CLASSIFICATION	2.061943412028831E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9997268835904415	WITHOUT_CLASSIFICATION	2.731164095585821E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999704682076681	WITHOUT_CLASSIFICATION	2.9531792331958333E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999956860942453	WITHOUT_CLASSIFICATION	4.313905754704061E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999377583799037	WITHOUT_CLASSIFICATION	6.224162009623608E-5	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999415734524587	WITHOUT_CLASSIFICATION	5.842654754133613E-5	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999974400445065	WITHOUT_CLASSIFICATION	2.5599554934430654E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999074709248066	WITHOUT_CLASSIFICATION	9.252907519344962E-5	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999013849173419	WITHOUT_CLASSIFICATION	9.861508265804953E-5	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997570121911816	WITHOUT_CLASSIFICATION	2.4298780881839898E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999654741296747	WITHOUT_CLASSIFICATION	3.452587032530946E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999911582652721	WITHOUT_CLASSIFICATION	8.841734727875712E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999911582652721	WITHOUT_CLASSIFICATION	8.841734727875712E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999919464101656	WITHOUT_CLASSIFICATION	8.05358983439385E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999911582652721	WITHOUT_CLASSIFICATION	8.841734727875712E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999911582652721	WITHOUT_CLASSIFICATION	8.841734727875712E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999740282763538	WITHOUT_CLASSIFICATION	2.5971723646098972E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9980625117469337	WITHOUT_CLASSIFICATION	0.0019374882530663314	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999740432429206	WITHOUT_CLASSIFICATION	2.5956757079475788E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999740432429206	WITHOUT_CLASSIFICATION	2.5956757079475788E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999646470692473	WITHOUT_CLASSIFICATION	3.53529307527685E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999972244140738	WITHOUT_CLASSIFICATION	2.7755859261996836E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999007535958738	WITHOUT_CLASSIFICATION	9.924640412613767E-5	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9946911556765377	WITHOUT_CLASSIFICATION	0.005308844323462358	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999976360157111	WITHOUT_CLASSIFICATION	2.3639842889028538E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997406522665332	WITHOUT_CLASSIFICATION	2.593477334667854E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996112644386953	WITHOUT_CLASSIFICATION	3.887355613046309E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999723553536406	WITHOUT_CLASSIFICATION	2.7644646359342417E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999586805665323	WITHOUT_CLASSIFICATION	4.1319433467697345E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9995228572900644	WITHOUT_CLASSIFICATION	4.771427099355591E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997646728824755	WITHOUT_CLASSIFICATION	2.3532711752457367E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9972063357065721	WITHOUT_CLASSIFICATION	0.002793664293427836	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999966442288986	WITHOUT_CLASSIFICATION	3.355771101367502E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999273200160843	WITHOUT_CLASSIFICATION	7.267998391575871E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998236254892007	WITHOUT_CLASSIFICATION	1.763745107993334E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9994240769316707	WITHOUT_CLASSIFICATION	5.759230683293522E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999998159802967	WITHOUT_CLASSIFICATION	1.8401970329523395E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999938667910842	WITHOUT_CLASSIFICATION	6.133208915865675E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999966442288986	WITHOUT_CLASSIFICATION	3.355771101367502E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9998208320495741	WITHOUT_CLASSIFICATION	1.7916795042589317E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999489280853925	WITHOUT_CLASSIFICATION	5.107191460738392E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999912995956212	WITHOUT_CLASSIFICATION	8.700404378870065E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859806365482	WITHOUT_CLASSIFICATION	1.401936345180707E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999542161723999	WITHOUT_CLASSIFICATION	4.5783827600077226E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999995443076992	WITHOUT_CLASSIFICATION	4.55692300800848E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999171718346448	WITHOUT_CLASSIFICATION	8.282816535526084E-5	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999920584272319	WITHOUT_CLASSIFICATION	7.941572768130582E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999910066651244	WITHOUT_CLASSIFICATION	8.99333487560898E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999884749145611	WITHOUT_CLASSIFICATION	1.1525085438906708E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999488546181842	WITHOUT_CLASSIFICATION	5.11453818158508E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999473838300087	WITHOUT_CLASSIFICATION	5.261616999126939E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999976072039761	WITHOUT_CLASSIFICATION	2.3927960238304297E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999774832409413	WITHOUT_CLASSIFICATION	2.25167590588076E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998982552254511	WITHOUT_CLASSIFICATION	1.017447745489456E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999846086880098	WITHOUT_CLASSIFICATION	1.5391311990249125E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999962364931078	WITHOUT_CLASSIFICATION	3.7635068923036563E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999964246429689	WITHOUT_CLASSIFICATION	3.575357031116746E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999815071627984	WITHOUT_CLASSIFICATION	1.849283720147991E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999674145072119	WITHOUT_CLASSIFICATION	3.258549278810818E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998505407902666	WITHOUT_CLASSIFICATION	1.4945920973339732E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998095527542218	WITHOUT_CLASSIFICATION	1.9044724577817323E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999349665275	WITHOUT_CLASSIFICATION	6.503347255640258E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999910066651244	WITHOUT_CLASSIFICATION	8.99333487560898E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999567126224794	WITHOUT_CLASSIFICATION	4.328737752045506E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999493525556142	WITHOUT_CLASSIFICATION	5.0647444385765536E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999682898210958	WITHOUT_CLASSIFICATION	3.1710178904198927E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999930485593129	WITHOUT_CLASSIFICATION	6.951440687091665E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999460482777663	WITHOUT_CLASSIFICATION	5.395172223352126E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.999979833748453	WITHOUT_CLASSIFICATION	2.01662515469325E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999952780623673	WITHOUT_CLASSIFICATION	4.7219376326427E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999798432092412	WITHOUT_CLASSIFICATION	2.0156790758922363E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999488804991233	WITHOUT_CLASSIFICATION	5.111950087665667E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999863173054916	WITHOUT_CLASSIFICATION	1.3682694508474377E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999691220679904	WITHOUT_CLASSIFICATION	3.087793200968989E-5	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9996960563115693	WITHOUT_CLASSIFICATION	3.039436884306034E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9993778343852027	WITHOUT_CLASSIFICATION	6.22165614797358E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999110903272251	WITHOUT_CLASSIFICATION	8.89096727749563E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997053878511406	WITHOUT_CLASSIFICATION	2.9461214885933277E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999863173054916	WITHOUT_CLASSIFICATION	1.3682694508474377E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999872468767724	WITHOUT_CLASSIFICATION	1.2753123227504704E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999624744564852	WITHOUT_CLASSIFICATION	3.752554351474317E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999490867547903	WITHOUT_CLASSIFICATION	5.091324520973015E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998844429656746	WITHOUT_CLASSIFICATION	1.1555703432539992E-4	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999973883944632	WITHOUT_CLASSIFICATION	2.6116055367798025E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999952749103524	WITHOUT_CLASSIFICATION	4.725089647585161E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999856828517095	WITHOUT_CLASSIFICATION	1.431714829050546E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723418819835	WITHOUT_CLASSIFICATION	2.7658118016541833E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754977319879	WITHOUT_CLASSIFICATION	2.450226801207718E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759454105392	WITHOUT_CLASSIFICATION	2.4054589460734866E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759454105392	WITHOUT_CLASSIFICATION	2.4054589460734866E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759454105392	WITHOUT_CLASSIFICATION	2.4054589460734866E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999969103821437	WITHOUT_CLASSIFICATION	3.0896178562497434E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999969103821437	WITHOUT_CLASSIFICATION	3.0896178562497434E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9993634532458692	WITHOUT_CLASSIFICATION	6.365467541308682E-4	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999970970849328	WITHOUT_CLASSIFICATION	2.902915067112686E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999952318860892	WITHOUT_CLASSIFICATION	4.768113910862048E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999996433925785	WITHOUT_CLASSIFICATION	3.566074214982025E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999018503505265	WITHOUT_CLASSIFICATION	9.81496494735956E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730388488205	WITHOUT_CLASSIFICATION	2.696115117956422E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732944521162	WITHOUT_CLASSIFICATION	2.6705547883864988E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999991262428162	WITHOUT_CLASSIFICATION	8.7375718374453E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977205019394	WITHOUT_CLASSIFICATION	2.2794980606016285E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730388488205	WITHOUT_CLASSIFICATION	2.696115117956422E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732944521162	WITHOUT_CLASSIFICATION	2.6705547883864988E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999536212078918	WITHOUT_CLASSIFICATION	4.63787921081988E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995645823773555	WITHOUT_CLASSIFICATION	4.3541762264453045E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999973889469215	WITHOUT_CLASSIFICATION	2.6110530784365944E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999966158551531	WITHOUT_CLASSIFICATION	3.384144846898504E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998687373030157	WITHOUT_CLASSIFICATION	1.3126269698435198E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998265035260651	WITHOUT_CLASSIFICATION	1.734964739349812E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999824987891187	WITHOUT_CLASSIFICATION	1.7501210881220327E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999881382219145	WITHOUT_CLASSIFICATION	1.1861778085550431E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999224323325998	WITHOUT_CLASSIFICATION	7.75676674001791E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9995161521928713	WITHOUT_CLASSIFICATION	4.8384780712866954E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999855141857097	WITHOUT_CLASSIFICATION	1.4485814290301353E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999796625982135	WITHOUT_CLASSIFICATION	2.0337401786471513E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999177963460568	WITHOUT_CLASSIFICATION	8.22036539431687E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9994933362751031	WITHOUT_CLASSIFICATION	5.066637248969936E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999803801044516	WITHOUT_CLASSIFICATION	1.9619895548459496E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999711033119661	WITHOUT_CLASSIFICATION	2.889668803384002E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999783414942621	WITHOUT_CLASSIFICATION	2.1658505737853795E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999682760749348	WITHOUT_CLASSIFICATION	3.172392506521831E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9994792537532495	WITHOUT_CLASSIFICATION	5.207462467503891E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999931367375701	WITHOUT_CLASSIFICATION	6.8632624299229525E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999942044871676	WITHOUT_CLASSIFICATION	5.795512832371493E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996479186056126	WITHOUT_CLASSIFICATION	3.5208139438739754E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729432329725	WITHOUT_CLASSIFICATION	2.705676702748575E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999906278213219	WITHOUT_CLASSIFICATION	9.372178678215172E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757327030991	WITHOUT_CLASSIFICATION	2.4267296900866438E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693185156191	WITHOUT_CLASSIFICATION	3.068148438094365E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993923068814522	WITHOUT_CLASSIFICATION	6.076931185478864E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993923068814522	WITHOUT_CLASSIFICATION	6.076931185478864E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999730465974794	WITHOUT_CLASSIFICATION	2.6953402520613453E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999980430434784	WITHOUT_CLASSIFICATION	1.9569565216581817E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999962902572446	WITHOUT_CLASSIFICATION	3.709742755393575E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999980645050064	WITHOUT_CLASSIFICATION	1.9354949936473236E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998718886262092	WITHOUT_CLASSIFICATION	1.2811137379081311E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9993957071641844	WITHOUT_CLASSIFICATION	6.042928358157365E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999988974932781	WITHOUT_CLASSIFICATION	1.1025067218159726E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992449374665	WITHOUT_CLASSIFICATION	7.55062533543497E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737095205563	WITHOUT_CLASSIFICATION	2.629047944370892E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735447779106	WITHOUT_CLASSIFICATION	2.6455222089476062E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735840847919	WITHOUT_CLASSIFICATION	2.6415915208099607E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999856866664211	WITHOUT_CLASSIFICATION	1.4313333579061356E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9990181762877551	WITHOUT_CLASSIFICATION	9.818237122448416E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987597893883393	WITHOUT_CLASSIFICATION	0.0012402106116606835	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999965534327048	WITHOUT_CLASSIFICATION	3.4465672952526164E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999903853282508	WITHOUT_CLASSIFICATION	9.614671749080914E-6	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999667465457542	WITHOUT_CLASSIFICATION	3.325345424573926E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999656674454351	WITHOUT_CLASSIFICATION	3.433255456490183E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999853901695975	WITHOUT_CLASSIFICATION	1.4609830402366544E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987597893883393	WITHOUT_CLASSIFICATION	0.0012402106116606835	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987597893883393	WITHOUT_CLASSIFICATION	0.0012402106116606835	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999105139365284	WITHOUT_CLASSIFICATION	8.948606347161408E-4	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999918114662039	WITHOUT_CLASSIFICATION	8.188533796173975E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9973250494721486	WITHOUT_CLASSIFICATION	0.0026749505278514368	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999978424733281	WITHOUT_CLASSIFICATION	2.1575266718957335E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999555280103113	WITHOUT_CLASSIFICATION	4.4471989688753423E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999711033119661	WITHOUT_CLASSIFICATION	2.889668803384002E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997350882282668	WITHOUT_CLASSIFICATION	2.649117717331128E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999904963856203	WITHOUT_CLASSIFICATION	9.503614379671666E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999837076375981	WITHOUT_CLASSIFICATION	1.6292362401864613E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780327710298	WITHOUT_CLASSIFICATION	2.1967228970307285E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999950527233868	WITHOUT_CLASSIFICATION	4.947276613206162E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761212217264	WITHOUT_CLASSIFICATION	2.3878778273563784E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999833428455875	WITHOUT_CLASSIFICATION	1.66571544124546E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999833428455875	WITHOUT_CLASSIFICATION	1.66571544124546E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999833428455875	WITHOUT_CLASSIFICATION	1.66571544124546E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999833428455875	WITHOUT_CLASSIFICATION	1.66571544124546E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766366837315	WITHOUT_CLASSIFICATION	2.3363316268520663E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9993982932746187	WITHOUT_CLASSIFICATION	6.017067253812447E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999823235835148	WITHOUT_CLASSIFICATION	1.767641648525718E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999881239984536	WITHOUT_CLASSIFICATION	1.1876001546314549E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729905237098	WITHOUT_CLASSIFICATION	2.7009476290155633E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779367609621	WITHOUT_CLASSIFICATION	2.2063239037791228E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999989228346278	WITHOUT_CLASSIFICATION	1.0771653721944789E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999939269842162	WITHOUT_CLASSIFICATION	6.073015783722897E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999855908419135	WITHOUT_CLASSIFICATION	1.4409158086429664E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999748693937552	WITHOUT_CLASSIFICATION	2.5130606244830963E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999510669090942	WITHOUT_CLASSIFICATION	4.893309090579859E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999841038550966	WITHOUT_CLASSIFICATION	1.5896144903336348E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998997656299696	WITHOUT_CLASSIFICATION	1.0023437003040258E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999959176913378	WITHOUT_CLASSIFICATION	4.082308662298486E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999959176913378	WITHOUT_CLASSIFICATION	4.082308662298486E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999906678220248	WITHOUT_CLASSIFICATION	9.332177975150813E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999904464434115	WITHOUT_CLASSIFICATION	9.553556588467486E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999721735575	WITHOUT_CLASSIFICATION	2.782644249278505E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729842290273	WITHOUT_CLASSIFICATION	2.7015770972774146E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999948807952573	WITHOUT_CLASSIFICATION	5.1192047426773795E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759454105392	WITHOUT_CLASSIFICATION	2.4054589460734866E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999985886026058	WITHOUT_CLASSIFICATION	1.4113973941841562E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999857659032176	WITHOUT_CLASSIFICATION	1.423409678234576E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999984580877818	WITHOUT_CLASSIFICATION	1.5419122182235992E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999618734914927	WITHOUT_CLASSIFICATION	3.812650850724251E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738790940162	WITHOUT_CLASSIFICATION	2.6120905983743848E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999095314763867	WITHOUT_CLASSIFICATION	9.046852361334501E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999840944976206	WITHOUT_CLASSIFICATION	1.590550237935816E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999965238728398	WITHOUT_CLASSIFICATION	3.4761271603440588E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997764086049812	WITHOUT_CLASSIFICATION	2.2359139501874518E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999812843345364	WITHOUT_CLASSIFICATION	1.871566546354983E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999807972284236	WITHOUT_CLASSIFICATION	1.920277157643263E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999950162917225	WITHOUT_CLASSIFICATION	4.983708277511339E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999995099431209	WITHOUT_CLASSIFICATION	4.900568789942501E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999883866080296	WITHOUT_CLASSIFICATION	1.1613391970336092E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997725180488	WITHOUT_CLASSIFICATION	2.274819510750187E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999468685388585	WITHOUT_CLASSIFICATION	5.31314611415693E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999948029024216	WITHOUT_CLASSIFICATION	5.197097578501979E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998526014942982	WITHOUT_CLASSIFICATION	1.4739850570184688E-4	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999686178121725	WITHOUT_CLASSIFICATION	3.1382187827567964E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998212841144966	WITHOUT_CLASSIFICATION	1.7871588550341002E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999959944949423	WITHOUT_CLASSIFICATION	4.005505057677506E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999415938777777	WITHOUT_CLASSIFICATION	5.840612222230797E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999986285519517	WITHOUT_CLASSIFICATION	1.371448048338807E-6	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999350345047983	WITHOUT_CLASSIFICATION	6.496549520175077E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9996938697952765	WITHOUT_CLASSIFICATION	3.0613020472344886E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999963775023236	WITHOUT_CLASSIFICATION	3.62249767637961E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9957817216570027	WITHOUT_CLASSIFICATION	0.0042182783429972	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997074253303	WITHOUT_CLASSIFICATION	2.9257466968802493E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999891577632966	WITHOUT_CLASSIFICATION	1.0842236703484023E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999894106563503	WITHOUT_CLASSIFICATION	1.0589343649734565E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998735347196144	WITHOUT_CLASSIFICATION	1.2646528038564081E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999701979068933	WITHOUT_CLASSIFICATION	2.9802093106691824E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999884600829746	WITHOUT_CLASSIFICATION	1.1539917025508706E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999625243040979	WITHOUT_CLASSIFICATION	3.7475695902036215E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999937688576311	WITHOUT_CLASSIFICATION	6.2311423689009075E-6	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999482022853216	WITHOUT_CLASSIFICATION	5.1797714678487904E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996596297177514	WITHOUT_CLASSIFICATION	3.4037028224866134E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999603624549521	WITHOUT_CLASSIFICATION	3.9637545047797274E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999494251914667	WITHOUT_CLASSIFICATION	5.057480853322589E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999864124225075	WITHOUT_CLASSIFICATION	1.3587577492502983E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9995456610341619	WITHOUT_CLASSIFICATION	4.5433896583816556E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998649980403708	WITHOUT_CLASSIFICATION	1.3500195962929307E-4	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9987673061719095	WITHOUT_CLASSIFICATION	0.0012326938280904612	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999773043466424	WITHOUT_CLASSIFICATION	2.2695653357545016E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9959453715832572	WITHOUT_CLASSIFICATION	0.00405462841674275	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999548602682193	WITHOUT_CLASSIFICATION	4.5139731780709314E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999978930954384	WITHOUT_CLASSIFICATION	2.10690456170293E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996257618778669	WITHOUT_CLASSIFICATION	3.742381221331001E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999127358820572	WITHOUT_CLASSIFICATION	8.726411794273896E-5	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999913392538955	WITHOUT_CLASSIFICATION	8.660746104508488E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9993496437553445	WITHOUT_CLASSIFICATION	6.503562446553863E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999945824196055	WITHOUT_CLASSIFICATION	5.417580394538004E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999558990745361	WITHOUT_CLASSIFICATION	4.410092546385386E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998369047027375	WITHOUT_CLASSIFICATION	1.630952972626316E-4	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999050240159659	WITHOUT_CLASSIFICATION	9.497598403402961E-5	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999859210514364	WITHOUT_CLASSIFICATION	1.407894856368527E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999693896408206	WITHOUT_CLASSIFICATION	3.061035917944579E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999434522565	WITHOUT_CLASSIFICATION	5.654774349601699E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999181612703477	WITHOUT_CLASSIFICATION	8.183872965236695E-5	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995952832018795	WITHOUT_CLASSIFICATION	4.0471679812053424E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999939511919878	WITHOUT_CLASSIFICATION	6.048808012299532E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998790861472509	WITHOUT_CLASSIFICATION	1.2091385274921759E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999988600292802	WITHOUT_CLASSIFICATION	1.1399707197949276E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999865512878502	WITHOUT_CLASSIFICATION	1.3448712149720094E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999992602146178	WITHOUT_CLASSIFICATION	7.397853821482525E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999995772139628	WITHOUT_CLASSIFICATION	4.227860372073524E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999028758959739	WITHOUT_CLASSIFICATION	9.71241040259971E-5	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999548032527102	WITHOUT_CLASSIFICATION	4.519674728982085E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999932947874858	WITHOUT_CLASSIFICATION	6.7052125141757425E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999874662457965	WITHOUT_CLASSIFICATION	1.2533754203389417E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.999898964327581	WITHOUT_CLASSIFICATION	1.0103567241903604E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996596951563	WITHOUT_CLASSIFICATION	3.403048436931346E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999925337758779	WITHOUT_CLASSIFICATION	7.466224122089455E-5	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999233858367218	WITHOUT_CLASSIFICATION	7.661416327817673E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996994502056453	WITHOUT_CLASSIFICATION	3.005497943547128E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999634534358705	WITHOUT_CLASSIFICATION	3.654656412945544E-5	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999964651900003	WITHOUT_CLASSIFICATION	3.534809999632801E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999815303310539	WITHOUT_CLASSIFICATION	1.8469668946078956E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999934936607164	WITHOUT_CLASSIFICATION	6.506339283532522E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999162431011024	WITHOUT_CLASSIFICATION	8.375689889756995E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998810023636275	WITHOUT_CLASSIFICATION	1.1899763637250657E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9960268209878418	WITHOUT_CLASSIFICATION	0.003973179012158248	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999630810252909	WITHOUT_CLASSIFICATION	3.6918974709200946E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998322797688671	WITHOUT_CLASSIFICATION	1.6772023113288743E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999874581370586	WITHOUT_CLASSIFICATION	1.2541862941393067E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998567190988656	WITHOUT_CLASSIFICATION	1.432809011343883E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999538190084636	WITHOUT_CLASSIFICATION	4.6180991536361014E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999654629605755	WITHOUT_CLASSIFICATION	3.4537039424470787E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999865615636983	WITHOUT_CLASSIFICATION	1.3438436301839566E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999982952076082	WITHOUT_CLASSIFICATION	1.7047923917928307E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999057928875985	WITHOUT_CLASSIFICATION	9.420711240156115E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999939981481694	WITHOUT_CLASSIFICATION	6.001851830644351E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999684668348481	WITHOUT_CLASSIFICATION	3.1533165151896795E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999684668348481	WITHOUT_CLASSIFICATION	3.1533165151896795E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999883486349575	WITHOUT_CLASSIFICATION	1.165136504249189E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998679732922927	WITHOUT_CLASSIFICATION	1.320267077074102E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999973266011457	WITHOUT_CLASSIFICATION	2.67339885429542E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998077096754692	WITHOUT_CLASSIFICATION	1.9229032453077193E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999869458854058	WITHOUT_CLASSIFICATION	1.3054114594163247E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9992369801729502	WITHOUT_CLASSIFICATION	7.63019827049855E-4	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9987779043043068	WITHOUT_CLASSIFICATION	0.001222095695693257	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999927919416155	WITHOUT_CLASSIFICATION	7.2080583845020494E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.998965744379728	WITHOUT_CLASSIFICATION	0.001034255620272013	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999951389738257	WITHOUT_CLASSIFICATION	4.8610261743177254E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999854653811185	WITHOUT_CLASSIFICATION	1.4534618881477556E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999122900606063	WITHOUT_CLASSIFICATION	8.770993939371816E-5	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99999752623152	WITHOUT_CLASSIFICATION	2.4737684800409137E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999962093213007	WITHOUT_CLASSIFICATION	3.790678699264768E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999305107419865	WITHOUT_CLASSIFICATION	6.94892580135027E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999921869295089	WITHOUT_CLASSIFICATION	7.813070491148303E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999921869295089	WITHOUT_CLASSIFICATION	7.813070491148303E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.99998733668387	WITHOUT_CLASSIFICATION	1.2663316130022412E-5	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999050880671823	WITHOUT_CLASSIFICATION	9.49119328176691E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999922559295318	WITHOUT_CLASSIFICATION	7.744070468287115E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999804461732734	WITHOUT_CLASSIFICATION	1.955382672655313E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999939564711332	WITHOUT_CLASSIFICATION	6.04352886678726E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918800466056	WITHOUT_CLASSIFICATION	8.119953394352614E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918800466056	WITHOUT_CLASSIFICATION	8.119953394352614E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999929071339026	WITHOUT_CLASSIFICATION	7.092866097400387E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999839139609936	WITHOUT_CLASSIFICATION	1.6086039006390475E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999785047838256	WITHOUT_CLASSIFICATION	2.1495216174503313E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999982944846	WITHOUT_CLASSIFICATION	1.705515390192707E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998810745429593	WITHOUT_CLASSIFICATION	1.1892545704068456E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999961231902136	WITHOUT_CLASSIFICATION	3.876809786337762E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999947727971302	WITHOUT_CLASSIFICATION	5.227202869828699E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983388388168	WITHOUT_CLASSIFICATION	1.661161183129708E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996649535984645	WITHOUT_CLASSIFICATION	3.3504640153548E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999947842805728	WITHOUT_CLASSIFICATION	5.215719427246782E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999798928446352	WITHOUT_CLASSIFICATION	2.0107155364826052E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.997900845095036	WITHOUT_CLASSIFICATION	0.0020991549049640583	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999917350198338	WITHOUT_CLASSIFICATION	8.264980166101169E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997485644875395	WITHOUT_CLASSIFICATION	2.5143551246053E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998958611641812	WITHOUT_CLASSIFICATION	1.0413883581883603E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999767423380342	WITHOUT_CLASSIFICATION	2.3257661965789595E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998844376098592	WITHOUT_CLASSIFICATION	1.1556239014079218E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999743221289129	WITHOUT_CLASSIFICATION	2.567787108713186E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999726208995314	WITHOUT_CLASSIFICATION	2.7379100468627958E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999872182402503	WITHOUT_CLASSIFICATION	1.2781759749853023E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998932998386266	WITHOUT_CLASSIFICATION	1.067001613733861E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999893894055235	WITHOUT_CLASSIFICATION	1.0610594476457163E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999763374252177	WITHOUT_CLASSIFICATION	2.3662574782307865E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999968722845212	WITHOUT_CLASSIFICATION	3.12771547880458E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999099271021127	WITHOUT_CLASSIFICATION	9.007289788731543E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999989565923802	WITHOUT_CLASSIFICATION	1.0434076198094858E-5	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999952816377697	WITHOUT_CLASSIFICATION	4.718362230228871E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989256999826	WITHOUT_CLASSIFICATION	1.0743000174201508E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998771824907912	WITHOUT_CLASSIFICATION	1.2281750920881815E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999460700705646	WITHOUT_CLASSIFICATION	5.39299294354676E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999446298723795	WITHOUT_CLASSIFICATION	5.537012762043087E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9994048464839307	WITHOUT_CLASSIFICATION	5.951535160693425E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998330595516409	WITHOUT_CLASSIFICATION	1.6694044835910852E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998251065545104	WITHOUT_CLASSIFICATION	1.74893445489577E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999689125871997	WITHOUT_CLASSIFICATION	3.108741280039018E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999966820796001	WITHOUT_CLASSIFICATION	3.3179203999110932E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999951911288555	WITHOUT_CLASSIFICATION	4.808871144501582E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996192528168957	WITHOUT_CLASSIFICATION	3.807471831043177E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999975432804661	WITHOUT_CLASSIFICATION	2.4567195338980245E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999963247593507	WITHOUT_CLASSIFICATION	3.6752406492367783E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998054054987564	WITHOUT_CLASSIFICATION	1.945945012434792E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999708025759795	WITHOUT_CLASSIFICATION	2.9197424020546053E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999996629134259	WITHOUT_CLASSIFICATION	3.3708657410384764E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999826215673192	WITHOUT_CLASSIFICATION	1.737843268080105E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999951911288555	WITHOUT_CLASSIFICATION	4.808871144501582E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996192528168957	WITHOUT_CLASSIFICATION	3.807471831043177E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999173526357247	WITHOUT_CLASSIFICATION	8.264736427531369E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998985591986033	WITHOUT_CLASSIFICATION	1.0144080139674523E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999964777201039	WITHOUT_CLASSIFICATION	3.522279895971374E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999976700546918	WITHOUT_CLASSIFICATION	2.3299453082045435E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999425456049815	WITHOUT_CLASSIFICATION	5.745439501833834E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999083603422304	WITHOUT_CLASSIFICATION	9.163965776964972E-5	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998706030879662	WITHOUT_CLASSIFICATION	1.2939691203388385E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999458893747278	WITHOUT_CLASSIFICATION	5.411062527215681E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999971081755359	WITHOUT_CLASSIFICATION	2.8918244641911883E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999501226267619	WITHOUT_CLASSIFICATION	4.987737323807301E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999945038366513	WITHOUT_CLASSIFICATION	5.4961633487153545E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999501226267619	WITHOUT_CLASSIFICATION	4.987737323807301E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998659101747354	WITHOUT_CLASSIFICATION	1.340898252647218E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997173804124734	WITHOUT_CLASSIFICATION	2.826195875266742E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998659101747354	WITHOUT_CLASSIFICATION	1.340898252647218E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998632563612592	WITHOUT_CLASSIFICATION	1.367436387409509E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999369149496552	WITHOUT_CLASSIFICATION	6.30850503447554E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9994089308670083	WITHOUT_CLASSIFICATION	5.910691329916492E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9994089308670083	WITHOUT_CLASSIFICATION	5.910691329916492E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997261065059687	WITHOUT_CLASSIFICATION	2.7389349403136366E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997274501180566	WITHOUT_CLASSIFICATION	2.725498819433013E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997261065059687	WITHOUT_CLASSIFICATION	2.7389349403136366E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998056378174741	WITHOUT_CLASSIFICATION	1.9436218252596107E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999546369140715	WITHOUT_CLASSIFICATION	4.536308592840948E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999478489307578	WITHOUT_CLASSIFICATION	5.2151069242207294E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994045812702461	WITHOUT_CLASSIFICATION	5.95418729753879E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999436828844331	WITHOUT_CLASSIFICATION	5.631711556691799E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.999946124569961	WITHOUT_CLASSIFICATION	5.387543003908866E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999664879602828	WITHOUT_CLASSIFICATION	3.351203971720175E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999953093172237	WITHOUT_CLASSIFICATION	4.69068277630607E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997844477115865	WITHOUT_CLASSIFICATION	2.1555228841344207E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999988681294486	WITHOUT_CLASSIFICATION	1.131870551400098E-5	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999841588077529	WITHOUT_CLASSIFICATION	1.5841192247068206E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999989344344974	WITHOUT_CLASSIFICATION	1.0655655026055181E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999971143624761	WITHOUT_CLASSIFICATION	2.8856375239355252E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999827044807926	WITHOUT_CLASSIFICATION	1.7295519207395752E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999950489668586	WITHOUT_CLASSIFICATION	4.9510331414076155E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998875457589862	WITHOUT_CLASSIFICATION	1.1245424101390833E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999499361312207	WITHOUT_CLASSIFICATION	5.0063868779153874E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999842405944961	WITHOUT_CLASSIFICATION	1.5759405503905122E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9989949700485126	WITHOUT_CLASSIFICATION	0.0010050299514874174	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999493827514312	WITHOUT_CLASSIFICATION	5.061724856878322E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.99994325552725	WITHOUT_CLASSIFICATION	5.674447275005626E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995924938706754	WITHOUT_CLASSIFICATION	4.0750612932467805E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999887765242529	WITHOUT_CLASSIFICATION	1.1223475747125798E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999478489307578	WITHOUT_CLASSIFICATION	5.2151069242207294E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999926120104092	WITHOUT_CLASSIFICATION	7.3879895907385085E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998884539526742	WITHOUT_CLASSIFICATION	1.1154604732582886E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9973494254128656	WITHOUT_CLASSIFICATION	0.0026505745871344233	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999479434991265	WITHOUT_CLASSIFICATION	5.2056500873482546E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999926776777435	WITHOUT_CLASSIFICATION	7.322322256445221E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998932362168593	WITHOUT_CLASSIFICATION	1.067637831406279E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998056378174741	WITHOUT_CLASSIFICATION	1.9436218252596107E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998056378174741	WITHOUT_CLASSIFICATION	1.9436218252596107E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999128221730257	WITHOUT_CLASSIFICATION	8.717782697432292E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998820231601724	WITHOUT_CLASSIFICATION	1.1797683982772406E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999522099059884	WITHOUT_CLASSIFICATION	4.779009401159139E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999188315869761	WITHOUT_CLASSIFICATION	8.116841302385586E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9988400194092022	WITHOUT_CLASSIFICATION	0.0011599805907978906	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999879301221231	WITHOUT_CLASSIFICATION	1.2069877876869574E-5	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999971324970293	WITHOUT_CLASSIFICATION	2.8675029708096335E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999876012785418	WITHOUT_CLASSIFICATION	1.2398721458163241E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998516831683671	WITHOUT_CLASSIFICATION	1.4831683163277735E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934003157438	WITHOUT_CLASSIFICATION	6.599684256215255E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997844477115865	WITHOUT_CLASSIFICATION	2.1555228841344207E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999461939604728	WITHOUT_CLASSIFICATION	5.380603952725008E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934003157438	WITHOUT_CLASSIFICATION	6.599684256215255E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975082997725	WITHOUT_CLASSIFICATION	2.491700227468416E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999994180815078	WITHOUT_CLASSIFICATION	5.819184921628622E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999163012488892	WITHOUT_CLASSIFICATION	8.369875111088532E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998348139504782	WITHOUT_CLASSIFICATION	1.6518604952163845E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999643948148043	WITHOUT_CLASSIFICATION	3.560518519565404E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999994382415144	WITHOUT_CLASSIFICATION	5.617584856166556E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978588695757	WITHOUT_CLASSIFICATION	2.1411304242713787E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999991021993031	WITHOUT_CLASSIFICATION	8.978006969029365E-6	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999886772018263	WITHOUT_CLASSIFICATION	1.1322798173745606E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999698403541409	WITHOUT_CLASSIFICATION	3.0159645859046956E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999509736482354	WITHOUT_CLASSIFICATION	4.9026351764592296E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934003157438	WITHOUT_CLASSIFICATION	6.599684256215255E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999643948148043	WITHOUT_CLASSIFICATION	3.560518519565404E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978588695757	WITHOUT_CLASSIFICATION	2.1411304242713787E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998953514181139	WITHOUT_CLASSIFICATION	1.0464858188612365E-4	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999993240315588	WITHOUT_CLASSIFICATION	6.759684413396254E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999841875893776	WITHOUT_CLASSIFICATION	1.5812410622420327E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998328430895682	WITHOUT_CLASSIFICATION	1.671569104317476E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999967915234089	WITHOUT_CLASSIFICATION	3.2084765911448733E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951901059371	WITHOUT_CLASSIFICATION	4.809894062979995E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975082997725	WITHOUT_CLASSIFICATION	2.491700227468416E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997437545882819	WITHOUT_CLASSIFICATION	2.562454117181834E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999473604356971	WITHOUT_CLASSIFICATION	5.2639564302757736E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997748871641886	WITHOUT_CLASSIFICATION	2.2511283581143376E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998574908760111	WITHOUT_CLASSIFICATION	1.4250912398900968E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998550128442508	WITHOUT_CLASSIFICATION	1.449871557492178E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999707626636701	WITHOUT_CLASSIFICATION	2.923733632984387E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998632563612592	WITHOUT_CLASSIFICATION	1.367436387409509E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909632553065	WITHOUT_CLASSIFICATION	9.036744693512428E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999634027767487	WITHOUT_CLASSIFICATION	3.659722325132305E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998406874156825	WITHOUT_CLASSIFICATION	1.5931258431742295E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999763978411959	WITHOUT_CLASSIFICATION	2.360215880411493E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999968738429894	WITHOUT_CLASSIFICATION	3.1261570105960905E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999932009013632	WITHOUT_CLASSIFICATION	6.799098636758255E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999952256697818	WITHOUT_CLASSIFICATION	4.774330218111278E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999837967673167	WITHOUT_CLASSIFICATION	1.6203232683273515E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951901059371	WITHOUT_CLASSIFICATION	4.809894062979995E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999463714227907	WITHOUT_CLASSIFICATION	5.362857720936647E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999825170039955	WITHOUT_CLASSIFICATION	1.7482996004534382E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9998540113173815	WITHOUT_CLASSIFICATION	1.4598868261849008E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999969847392427	WITHOUT_CLASSIFICATION	3.0152607572879116E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998954744875245	WITHOUT_CLASSIFICATION	1.0452551247544064E-4	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998215272583919	WITHOUT_CLASSIFICATION	1.7847274160809166E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998707218644346	WITHOUT_CLASSIFICATION	1.292781355654641E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998392657940831	WITHOUT_CLASSIFICATION	1.607342059169327E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999566621384612	WITHOUT_CLASSIFICATION	4.333786153874341E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998969376211901	WITHOUT_CLASSIFICATION	1.0306237880982836E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999405196140411	WITHOUT_CLASSIFICATION	5.948038595881025E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999513258563977	WITHOUT_CLASSIFICATION	4.8674143602369E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999989174962862	WITHOUT_CLASSIFICATION	1.0825037137517934E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999912205711894	WITHOUT_CLASSIFICATION	8.77942881054711E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999637366845417	WITHOUT_CLASSIFICATION	3.626331545832461E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999957570340954	WITHOUT_CLASSIFICATION	4.242965904588799E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999972757804994	WITHOUT_CLASSIFICATION	2.7242195006140987E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997549424770291	WITHOUT_CLASSIFICATION	2.450575229708763E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999696234252722	WITHOUT_CLASSIFICATION	3.037657472788607E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999805353554833	WITHOUT_CLASSIFICATION	1.9464644516798407E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999992837455231	WITHOUT_CLASSIFICATION	7.162544768921749E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999617716771606	WITHOUT_CLASSIFICATION	3.822832283941748E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9961381372302752	WITHOUT_CLASSIFICATION	0.0038618627697248266	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9990910678902647	WITHOUT_CLASSIFICATION	9.089321097351853E-4	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997595650728125	WITHOUT_CLASSIFICATION	2.40434927187549E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999690646650123	WITHOUT_CLASSIFICATION	3.093533498768265E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994428836946742	WITHOUT_CLASSIFICATION	5.57116305325778E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999977098108479	WITHOUT_CLASSIFICATION	2.2901891520976756E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999916143506776	WITHOUT_CLASSIFICATION	8.385649322458366E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999990603362063	WITHOUT_CLASSIFICATION	9.396637936989763E-6	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996511559218735	WITHOUT_CLASSIFICATION	3.4884407812654745E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999794987784828	WITHOUT_CLASSIFICATION	2.0501221517153225E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999657156100966	WITHOUT_CLASSIFICATION	3.4284389903376315E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999742954950653	WITHOUT_CLASSIFICATION	2.5704504934597528E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999250157015677	WITHOUT_CLASSIFICATION	7.49842984323409E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999657156100966	WITHOUT_CLASSIFICATION	3.4284389903376315E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999794987784828	WITHOUT_CLASSIFICATION	2.0501221517153225E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999742954950653	WITHOUT_CLASSIFICATION	2.5704504934597528E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999512784392965	WITHOUT_CLASSIFICATION	4.8721560703473977E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999839587282805	WITHOUT_CLASSIFICATION	1.6041271719544567E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9996219213118998	WITHOUT_CLASSIFICATION	3.780786881001645E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999907952984814	WITHOUT_CLASSIFICATION	9.204701518556289E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999991843258561	WITHOUT_CLASSIFICATION	8.156741439112168E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9973210214749882	WITHOUT_CLASSIFICATION	0.002678978525011809	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9994456024184204	WITHOUT_CLASSIFICATION	5.543975815796421E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999370982602882	WITHOUT_CLASSIFICATION	6.290173971172808E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999788308714112	WITHOUT_CLASSIFICATION	2.116912858874398E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999255815313025	WITHOUT_CLASSIFICATION	7.441846869744029E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999958655724968	WITHOUT_CLASSIFICATION	4.134427503289116E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999144037125425	WITHOUT_CLASSIFICATION	8.5596287457605E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999770127474935	WITHOUT_CLASSIFICATION	2.2987252506548896E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998967209285087	WITHOUT_CLASSIFICATION	1.0327907149132917E-4	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999744723490557	WITHOUT_CLASSIFICATION	2.5527650944348782E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999802773007922	WITHOUT_CLASSIFICATION	1.9722699207891386E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998964280990215	WITHOUT_CLASSIFICATION	1.0357190097854546E-4	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999991460110698	WITHOUT_CLASSIFICATION	8.539889302938919E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999824593205088	WITHOUT_CLASSIFICATION	1.7540679491228307E-5	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999762796796732	WITHOUT_CLASSIFICATION	2.3720320326778106E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999685206115577	WITHOUT_CLASSIFICATION	3.147938844232998E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999979985649863	WITHOUT_CLASSIFICATION	2.0014350136734457E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999080541967408	WITHOUT_CLASSIFICATION	9.194580325919031E-5	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999523458204941	WITHOUT_CLASSIFICATION	4.76541795059455E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999762796796732	WITHOUT_CLASSIFICATION	2.3720320326778106E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999762796796732	WITHOUT_CLASSIFICATION	2.3720320326778106E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999950885687504	WITHOUT_CLASSIFICATION	4.911431249597775E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999950885687504	WITHOUT_CLASSIFICATION	4.911431249597775E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999837274231688	WITHOUT_CLASSIFICATION	1.6272576831244218E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998964280990215	WITHOUT_CLASSIFICATION	1.0357190097854546E-4	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999333650551745	WITHOUT_CLASSIFICATION	6.663494482550146E-5	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999889095393353	WITHOUT_CLASSIFICATION	1.109046066485561E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999154276895686	WITHOUT_CLASSIFICATION	8.457231043142005E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999154276895686	WITHOUT_CLASSIFICATION	8.457231043142005E-5	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999949197133893	WITHOUT_CLASSIFICATION	5.080286610702693E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9989560551638897	WITHOUT_CLASSIFICATION	0.0010439448361102984	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999888924113073	WITHOUT_CLASSIFICATION	1.110758869275365E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998812485791773	WITHOUT_CLASSIFICATION	1.1875142082278575E-4	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999434260672806	WITHOUT_CLASSIFICATION	5.65739327193026E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999927668403	WITHOUT_CLASSIFICATION	7.23315977141716E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999603979667142	WITHOUT_CLASSIFICATION	3.9602033285666464E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997911563369165	WITHOUT_CLASSIFICATION	2.0884366308344298E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999015445627182	WITHOUT_CLASSIFICATION	9.845543728176422E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999959965517146	WITHOUT_CLASSIFICATION	4.003448285401733E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999234135331471	WITHOUT_CLASSIFICATION	7.658646685286412E-5	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998141402091959	WITHOUT_CLASSIFICATION	1.8585979080408278E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999803707339003	WITHOUT_CLASSIFICATION	1.962926609969234E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999460408292508	WITHOUT_CLASSIFICATION	5.39591707491979E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9995918225248784	WITHOUT_CLASSIFICATION	4.0817747512155773E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999790088029528	WITHOUT_CLASSIFICATION	2.0991197047196434E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766175851482	WITHOUT_CLASSIFICATION	2.338241485175125E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999873779826806	WITHOUT_CLASSIFICATION	1.2622017319366333E-5	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999906851175786	WITHOUT_CLASSIFICATION	9.314882421447457E-6	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999970942988995	WITHOUT_CLASSIFICATION	2.905701100571268E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999918928920187	WITHOUT_CLASSIFICATION	8.107107981225907E-6	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999328261432908	WITHOUT_CLASSIFICATION	6.717385670921456E-5	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999957613634028	WITHOUT_CLASSIFICATION	4.238636597084976E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999924582871471	WITHOUT_CLASSIFICATION	7.541712852778083E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996967608025328	WITHOUT_CLASSIFICATION	3.032391974671986E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999890032110285	WITHOUT_CLASSIFICATION	1.0996788971630154E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998969376211901	WITHOUT_CLASSIFICATION	1.0306237880982836E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999184329578987	WITHOUT_CLASSIFICATION	8.156704210134207E-5	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999960121455048	WITHOUT_CLASSIFICATION	3.98785449513387E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730777449789	WITHOUT_CLASSIFICATION	2.692225502109024E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726664669042	WITHOUT_CLASSIFICATION	2.733353309574829E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999486260233874	WITHOUT_CLASSIFICATION	5.137397661255721E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999486260233874	WITHOUT_CLASSIFICATION	5.137397661255721E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999937888358036	WITHOUT_CLASSIFICATION	6.211164196399911E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999955082483157	WITHOUT_CLASSIFICATION	4.491751684224012E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999962387216362	WITHOUT_CLASSIFICATION	3.761278363712826E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999962387216362	WITHOUT_CLASSIFICATION	3.761278363712826E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999161161578837	WITHOUT_CLASSIFICATION	8.38838421162951E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999149252572795	WITHOUT_CLASSIFICATION	8.50747427205014E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.999982234210274	WITHOUT_CLASSIFICATION	1.7765789726008316E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999555280103113	WITHOUT_CLASSIFICATION	4.4471989688753423E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999488546181842	WITHOUT_CLASSIFICATION	5.11453818158508E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9990064697845275	WITHOUT_CLASSIFICATION	9.935302154725244E-4	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999867013805226	WITHOUT_CLASSIFICATION	1.329861947743646E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999647148962516	WITHOUT_CLASSIFICATION	3.52851037483124E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999647148962516	WITHOUT_CLASSIFICATION	3.52851037483124E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999935069791737	WITHOUT_CLASSIFICATION	6.493020826422985E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999352112102549	WITHOUT_CLASSIFICATION	6.478878974508347E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999352112102549	WITHOUT_CLASSIFICATION	6.478878974508347E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999706579128703	WITHOUT_CLASSIFICATION	2.9342087129657274E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999842902756482	WITHOUT_CLASSIFICATION	1.5709724351871183E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999962163541757	WITHOUT_CLASSIFICATION	3.7836458243026447E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999986234031881	WITHOUT_CLASSIFICATION	1.3765968118942676E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.99986119304882	WITHOUT_CLASSIFICATION	1.388069511800702E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999649639225332	WITHOUT_CLASSIFICATION	3.503607746678668E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9991864468434998	WITHOUT_CLASSIFICATION	8.13553156500193E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999383425804933	WITHOUT_CLASSIFICATION	6.165741950663324E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997216515819577	WITHOUT_CLASSIFICATION	2.783484180423657E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928844287724	WITHOUT_CLASSIFICATION	7.115571227617132E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999899380956693	WITHOUT_CLASSIFICATION	1.0061904330817535E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999461886602207	WITHOUT_CLASSIFICATION	5.381133977935239E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999461886602207	WITHOUT_CLASSIFICATION	5.381133977935239E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999461886602207	WITHOUT_CLASSIFICATION	5.381133977935239E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999461886602207	WITHOUT_CLASSIFICATION	5.381133977935239E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999763570043461	WITHOUT_CLASSIFICATION	2.364299565387437E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999900659822615	WITHOUT_CLASSIFICATION	9.934017738502691E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999484099819339	WITHOUT_CLASSIFICATION	5.159001806607319E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999782248770405	WITHOUT_CLASSIFICATION	2.1775122959509518E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9993349751096098	WITHOUT_CLASSIFICATION	6.650248903902382E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9993356254404069	WITHOUT_CLASSIFICATION	6.643745595932508E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997784387020379	WITHOUT_CLASSIFICATION	2.2156129796209112E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999993449347536	WITHOUT_CLASSIFICATION	6.550652462648304E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999841238348691	WITHOUT_CLASSIFICATION	1.587616513084701E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999835359441865	WITHOUT_CLASSIFICATION	1.6464055813439662E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998241479695138	WITHOUT_CLASSIFICATION	1.7585203048625853E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9030637204159475	WITHOUT_CLASSIFICATION	0.0969362795840525	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998655201355992	WITHOUT_CLASSIFICATION	1.3447986440096502E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999615118190331	WITHOUT_CLASSIFICATION	3.848818096682798E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998241479695138	WITHOUT_CLASSIFICATION	1.7585203048625853E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9866042939841116	WITHOUT_CLASSIFICATION	0.013395706015888452	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999974659232855	WITHOUT_CLASSIFICATION	2.5340767144704027E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999871396130502	WITHOUT_CLASSIFICATION	1.286038694978839E-4	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998928130587911	WITHOUT_CLASSIFICATION	1.0718694120894527E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998260822417585	WITHOUT_CLASSIFICATION	1.7391775824155556E-4	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999081612875999	WITHOUT_CLASSIFICATION	9.183871240017643E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999980049056719	WITHOUT_CLASSIFICATION	1.9950943280607817E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999130897943247	WITHOUT_CLASSIFICATION	8.691020567528261E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939551953126	WITHOUT_CLASSIFICATION	6.044804687393237E-6	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999935124994714	WITHOUT_CLASSIFICATION	6.487500528470535E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939551953126	WITHOUT_CLASSIFICATION	6.044804687393237E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999902909425209	WITHOUT_CLASSIFICATION	9.709057479139776E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998244750618925	WITHOUT_CLASSIFICATION	1.7552493810742338E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996179228816486	WITHOUT_CLASSIFICATION	3.8207711835146397E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999976731931962	WITHOUT_CLASSIFICATION	2.3268068037017055E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999997231620477	WITHOUT_CLASSIFICATION	2.7683795229609602E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999547510366243	WITHOUT_CLASSIFICATION	4.524896337562242E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999855626422018	WITHOUT_CLASSIFICATION	1.4437357798172362E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997151217183938	WITHOUT_CLASSIFICATION	2.8487828160624355E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999855626422018	WITHOUT_CLASSIFICATION	1.4437357798172362E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999874679553518	WITHOUT_CLASSIFICATION	1.253204464832006E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999839580803787	WITHOUT_CLASSIFICATION	1.6041919621437643E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999808599377709	WITHOUT_CLASSIFICATION	1.914006222910677E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999215325037557	WITHOUT_CLASSIFICATION	7.846749624431145E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999547510366243	WITHOUT_CLASSIFICATION	4.524896337562242E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997151217183938	WITHOUT_CLASSIFICATION	2.8487828160624355E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999874679553518	WITHOUT_CLASSIFICATION	1.253204464832006E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999492015653109	WITHOUT_CLASSIFICATION	5.079843468924746E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999513113062579	WITHOUT_CLASSIFICATION	4.868869374212431E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999716694305674	WITHOUT_CLASSIFICATION	2.8330569432695053E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999725884069623	WITHOUT_CLASSIFICATION	2.7411593037743898E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999793173150145	WITHOUT_CLASSIFICATION	2.0682684985397897E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999955893564265	WITHOUT_CLASSIFICATION	4.4106435734263135E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766175851482	WITHOUT_CLASSIFICATION	2.338241485175125E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999839580803787	WITHOUT_CLASSIFICATION	1.6041919621437643E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999968779772769	WITHOUT_CLASSIFICATION	3.1220227231427474E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998077073961761	WITHOUT_CLASSIFICATION	1.922926038238633E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999832344268103	WITHOUT_CLASSIFICATION	1.676557318966726E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766175851482	WITHOUT_CLASSIFICATION	2.338241485175125E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998074290097103	WITHOUT_CLASSIFICATION	1.9257099028975225E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766175851482	WITHOUT_CLASSIFICATION	2.338241485175125E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999826946900734	WITHOUT_CLASSIFICATION	1.7305309926582863E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999905800537728	WITHOUT_CLASSIFICATION	9.419946227167877E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996888253460372	WITHOUT_CLASSIFICATION	3.1117465396271384E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999768259230963	WITHOUT_CLASSIFICATION	2.3174076903655724E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999984924940734	WITHOUT_CLASSIFICATION	1.5075059267334114E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999951921818637	WITHOUT_CLASSIFICATION	4.807818136349996E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999939776013106	WITHOUT_CLASSIFICATION	6.022398689381844E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999003812449886	WITHOUT_CLASSIFICATION	9.961875501141335E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998092014426707	WITHOUT_CLASSIFICATION	1.907985573293132E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9989670271851223	WITHOUT_CLASSIFICATION	0.0010329728148776823	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999978416411313	WITHOUT_CLASSIFICATION	2.1583588687928942E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9989664204937435	WITHOUT_CLASSIFICATION	0.001033579506256483	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9957017108652151	WITHOUT_CLASSIFICATION	0.004298289134784926	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999460891950335	WITHOUT_CLASSIFICATION	5.3910804966476346E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999977785233166	WITHOUT_CLASSIFICATION	2.2214766833918058E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996303172792	WITHOUT_CLASSIFICATION	3.6968272071067126E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999970604524174	WITHOUT_CLASSIFICATION	2.939547582548477E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9993769420056547	WITHOUT_CLASSIFICATION	6.230579943453414E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999990961694548	WITHOUT_CLASSIFICATION	9.038305451540123E-7	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999960575246317	WITHOUT_CLASSIFICATION	3.94247536827516E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995174028047112	WITHOUT_CLASSIFICATION	4.825971952886955E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995174028047112	WITHOUT_CLASSIFICATION	4.825971952886955E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999928757588964	WITHOUT_CLASSIFICATION	7.1242411036585275E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999640957645378	WITHOUT_CLASSIFICATION	3.590423546218106E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993684796778565	WITHOUT_CLASSIFICATION	6.315203221435458E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999811489501947	WITHOUT_CLASSIFICATION	1.8851049805292123E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999997689628176	WITHOUT_CLASSIFICATION	2.3103718233196778E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999957498242055	WITHOUT_CLASSIFICATION	4.2501757945632156E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998198135245197	WITHOUT_CLASSIFICATION	1.8018647548039796E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999637631002278	WITHOUT_CLASSIFICATION	3.623689977219766E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9748715003425945	WITHOUT_CLASSIFICATION	0.025128499657405406	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999933365789783	WITHOUT_CLASSIFICATION	6.663421021758643E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996652372118183	WITHOUT_CLASSIFICATION	3.3476278818172123E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.999806075136278	WITHOUT_CLASSIFICATION	1.9392486372210452E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9987802599879433	WITHOUT_CLASSIFICATION	0.0012197400120567007	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999919461718211	WITHOUT_CLASSIFICATION	8.053828178932365E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999989370064406	WITHOUT_CLASSIFICATION	1.0629935594423408E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999717659202335	WITHOUT_CLASSIFICATION	2.823407976648878E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999781943135801	WITHOUT_CLASSIFICATION	2.1805686419831892E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999781943135801	WITHOUT_CLASSIFICATION	2.1805686419831892E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999959713878747	WITHOUT_CLASSIFICATION	4.028612125360498E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999003812449886	WITHOUT_CLASSIFICATION	9.961875501141335E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9997078165660409	WITHOUT_CLASSIFICATION	2.9218343395909935E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997147847809819	WITHOUT_CLASSIFICATION	2.852152190181379E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999967319242505	WITHOUT_CLASSIFICATION	3.268075749461516E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999861335009989	WITHOUT_CLASSIFICATION	1.386649900102391E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998879643503815	WITHOUT_CLASSIFICATION	1.1203564961850633E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9993945562425953	WITHOUT_CLASSIFICATION	6.054437574046622E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999267379265692	WITHOUT_CLASSIFICATION	7.326207343076471E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999939529278605	WITHOUT_CLASSIFICATION	6.047072139511918E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.999997567312567	WITHOUT_CLASSIFICATION	2.432687433004477E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995433350121	WITHOUT_CLASSIFICATION	4.566649879107637E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9997724330405547	WITHOUT_CLASSIFICATION	2.2756695944514896E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999268200408438	WITHOUT_CLASSIFICATION	7.317995915627402E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999989305291033	WITHOUT_CLASSIFICATION	1.0694708967308433E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998374512791688	WITHOUT_CLASSIFICATION	1.6254872083128056E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999960638301536	WITHOUT_CLASSIFICATION	3.936169846455651E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999983211042717	WITHOUT_CLASSIFICATION	1.6788957283950842E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999991979726649	WITHOUT_CLASSIFICATION	8.020273350941326E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999987032008036	WITHOUT_CLASSIFICATION	1.2967991963772662E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999716655312496	WITHOUT_CLASSIFICATION	2.833446875043329E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998714446292095	WITHOUT_CLASSIFICATION	1.285553707904402E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999900397227572	WITHOUT_CLASSIFICATION	9.960277242727632E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999958564669401	WITHOUT_CLASSIFICATION	4.143533059829021E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999812509887311	WITHOUT_CLASSIFICATION	1.8749011268812936E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999989573166163	WITHOUT_CLASSIFICATION	1.0426833837012234E-5	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9979647175112193	WITHOUT_CLASSIFICATION	0.002035282488780811	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998930655486337	WITHOUT_CLASSIFICATION	1.0693445136633443E-4	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999952908530814	WITHOUT_CLASSIFICATION	4.7091469186043465E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9995877897588037	WITHOUT_CLASSIFICATION	4.122102411963631E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999730448889617	WITHOUT_CLASSIFICATION	2.695511103842836E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999742193338359	WITHOUT_CLASSIFICATION	2.5780666164181276E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999745451752856	WITHOUT_CLASSIFICATION	2.5454824714395497E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999888192943036	WITHOUT_CLASSIFICATION	1.118070569627364E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9969601214445274	WITHOUT_CLASSIFICATION	0.0030398785554726325	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9995361189943186	WITHOUT_CLASSIFICATION	4.638810056814504E-4	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999898682349562	WITHOUT_CLASSIFICATION	1.0131765043852169E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998980966414437	WITHOUT_CLASSIFICATION	1.0190335855623558E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998980966414437	WITHOUT_CLASSIFICATION	1.0190335855623558E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999855833758237	WITHOUT_CLASSIFICATION	1.4416624176434036E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999914306676054	WITHOUT_CLASSIFICATION	8.569332394624504E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999418362427897	WITHOUT_CLASSIFICATION	5.816375721030453E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999418362427897	WITHOUT_CLASSIFICATION	5.816375721030453E-4	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999959169798138	WITHOUT_CLASSIFICATION	4.083020186237184E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999723553536406	WITHOUT_CLASSIFICATION	2.7644646359342417E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999912154903797	WITHOUT_CLASSIFICATION	8.784509620144877E-6	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999995673862803	WITHOUT_CLASSIFICATION	4.326137197115192E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999753276735983	WITHOUT_CLASSIFICATION	2.467232640165433E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999938600443457	WITHOUT_CLASSIFICATION	6.139955654360469E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999938600443457	WITHOUT_CLASSIFICATION	6.139955654360469E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999746255820282	WITHOUT_CLASSIFICATION	2.537441797169468E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998056378174741	WITHOUT_CLASSIFICATION	1.9436218252596107E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999951904685529	WITHOUT_CLASSIFICATION	4.809531447115299E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999951904685529	WITHOUT_CLASSIFICATION	4.809531447115299E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999963509174536	WITHOUT_CLASSIFICATION	3.649082546291913E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999969309362361	WITHOUT_CLASSIFICATION	3.0690637640372426E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999985685933858	WITHOUT_CLASSIFICATION	1.4314066141695724E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999858587233637	WITHOUT_CLASSIFICATION	1.414127663640903E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999933764617149	WITHOUT_CLASSIFICATION	6.6235382850858214E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999952117850904	WITHOUT_CLASSIFICATION	4.788214909652163E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999986088617777	WITHOUT_CLASSIFICATION	1.3911382222185526E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.999994697439132	WITHOUT_CLASSIFICATION	5.302560868002912E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999952189612692	WITHOUT_CLASSIFICATION	4.781038730852829E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999039839527741	WITHOUT_CLASSIFICATION	9.601604722596885E-5	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999806555784584	WITHOUT_CLASSIFICATION	1.9344421541597006E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996145469985508	WITHOUT_CLASSIFICATION	3.8545300144919196E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9998290810021375	WITHOUT_CLASSIFICATION	1.709189978623717E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999988377806668	WITHOUT_CLASSIFICATION	1.1622193331883263E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999952210744336	WITHOUT_CLASSIFICATION	4.7789255663736405E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998147861723369	WITHOUT_CLASSIFICATION	1.8521382766322885E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999934821782674	WITHOUT_CLASSIFICATION	6.5178217326633184E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999750770410807	WITHOUT_CLASSIFICATION	2.4922958919275276E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999894919393715	WITHOUT_CLASSIFICATION	1.0508060628466836E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999650709882582	WITHOUT_CLASSIFICATION	3.4929011741889806E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999982013422564	WITHOUT_CLASSIFICATION	1.7986577435997374E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999491827394998	WITHOUT_CLASSIFICATION	5.081726050018654E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9987283003817683	WITHOUT_CLASSIFICATION	0.0012716996182317712	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9994911160743158	WITHOUT_CLASSIFICATION	5.08883925684197E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9993677835691913	WITHOUT_CLASSIFICATION	6.322164308086547E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999973333533768	WITHOUT_CLASSIFICATION	2.6666466231476013E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999903480064001	WITHOUT_CLASSIFICATION	9.651993599914508E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999990932095547	WITHOUT_CLASSIFICATION	9.067904453501128E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999796625982135	WITHOUT_CLASSIFICATION	2.0337401786471513E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999682760749348	WITHOUT_CLASSIFICATION	3.172392506521831E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.99997932906517	WITHOUT_CLASSIFICATION	2.0670934830017992E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999879721103784	WITHOUT_CLASSIFICATION	1.202788962163242E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999925806801402	WITHOUT_CLASSIFICATION	7.419319859836265E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998036486512152	WITHOUT_CLASSIFICATION	1.963513487847144E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999976223031378	WITHOUT_CLASSIFICATION	2.3776968621871138E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999933557054068	WITHOUT_CLASSIFICATION	6.644294593234015E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999963865566552	WITHOUT_CLASSIFICATION	3.613443344649825E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984082625216	WITHOUT_CLASSIFICATION	1.5917374784470739E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999957689042157	WITHOUT_CLASSIFICATION	4.231095784342513E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999954983447041	WITHOUT_CLASSIFICATION	4.501655295898548E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.999995257627244	WITHOUT_CLASSIFICATION	4.742372756064881E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999953159196246	WITHOUT_CLASSIFICATION	4.6840803753597385E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999995740588209	WITHOUT_CLASSIFICATION	4.259411790641868E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999890895351623	WITHOUT_CLASSIFICATION	1.0910464837672835E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999463873414302	WITHOUT_CLASSIFICATION	5.361265856987018E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999973504885201	WITHOUT_CLASSIFICATION	2.649511479894063E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999792954770103	WITHOUT_CLASSIFICATION	2.070452298977147E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999917691995281	WITHOUT_CLASSIFICATION	8.230800471788113E-6	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9963518673167117	WITHOUT_CLASSIFICATION	0.003648132683288321	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999992607987055	WITHOUT_CLASSIFICATION	7.3920129454787E-7	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999989817182925	WITHOUT_CLASSIFICATION	1.0182817075042964E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999981713505583	WITHOUT_CLASSIFICATION	1.8286494416974983E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999985082821542	WITHOUT_CLASSIFICATION	1.4917178457982808E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999908473630209	WITHOUT_CLASSIFICATION	9.152636978992298E-6	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999965796815913	WITHOUT_CLASSIFICATION	3.420318408779491E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999272035615528	WITHOUT_CLASSIFICATION	7.279643844711073E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999990724362482	WITHOUT_CLASSIFICATION	9.275637518244841E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999990724362482	WITHOUT_CLASSIFICATION	9.275637518244841E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999927878663176	WITHOUT_CLASSIFICATION	7.2121336823133894E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999872848584656	WITHOUT_CLASSIFICATION	1.2715141534448105E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999952583290345	WITHOUT_CLASSIFICATION	4.74167096558821E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999928981086023	WITHOUT_CLASSIFICATION	7.101891397662256E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999761469790376	WITHOUT_CLASSIFICATION	2.385302096244073E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9994982622834911	WITHOUT_CLASSIFICATION	5.017377165089538E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999950768673431	WITHOUT_CLASSIFICATION	4.923132656868546E-6	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999993628229386	WITHOUT_CLASSIFICATION	6.371770614177072E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999694876830685	WITHOUT_CLASSIFICATION	3.0512316931595092E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999948803165861	WITHOUT_CLASSIFICATION	5.119683413896548E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999939851511037	WITHOUT_CLASSIFICATION	6.014848896223871E-6	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999045111482633	WITHOUT_CLASSIFICATION	9.548885173669942E-4	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974831649671	WITHOUT_CLASSIFICATION	2.516835032968961E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998624574373701	WITHOUT_CLASSIFICATION	1.3754256262978073E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997053878511406	WITHOUT_CLASSIFICATION	2.9461214885933277E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997053878511406	WITHOUT_CLASSIFICATION	2.9461214885933277E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999854499039406	WITHOUT_CLASSIFICATION	1.4550096059446724E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999820287277005	WITHOUT_CLASSIFICATION	1.7971272299509104E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998750369055971	WITHOUT_CLASSIFICATION	1.2496309440287906E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999995662449574	WITHOUT_CLASSIFICATION	4.337550424800601E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999863173054916	WITHOUT_CLASSIFICATION	1.3682694508474377E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789329109263	WITHOUT_CLASSIFICATION	2.106708907368892E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998660176820021	WITHOUT_CLASSIFICATION	1.339823179978919E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999687393578987	WITHOUT_CLASSIFICATION	3.126064210127439E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999985529139291	WITHOUT_CLASSIFICATION	1.4470860707707123E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998493207340801	WITHOUT_CLASSIFICATION	1.5067926591989483E-4	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.99999499510793	WITHOUT_CLASSIFICATION	5.004892069995846E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997953456317602	WITHOUT_CLASSIFICATION	2.0465436823981784E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999826689173354	WITHOUT_CLASSIFICATION	1.7331082664551633E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999877954899828	WITHOUT_CLASSIFICATION	1.2204510017028788E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999639692499812	WITHOUT_CLASSIFICATION	3.6030750018793266E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999978470526066	WITHOUT_CLASSIFICATION	2.1529473934473995E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999761675964549	WITHOUT_CLASSIFICATION	2.3832403545027504E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999797219139235	WITHOUT_CLASSIFICATION	2.0278086076495386E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999588530387169	WITHOUT_CLASSIFICATION	4.114696128316698E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999995203928486	WITHOUT_CLASSIFICATION	4.7960715140522496E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999915003892081	WITHOUT_CLASSIFICATION	8.499610791752456E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996912552895	WITHOUT_CLASSIFICATION	3.087447104897956E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999922655540314	WITHOUT_CLASSIFICATION	7.734445968626863E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999460246941834	WITHOUT_CLASSIFICATION	5.39753058166187E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999224323325998	WITHOUT_CLASSIFICATION	7.75676674001791E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999875737835773	WITHOUT_CLASSIFICATION	1.2426216422686136E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999986218648463	WITHOUT_CLASSIFICATION	1.3781351536010081E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999954011671875	WITHOUT_CLASSIFICATION	4.598832812399628E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999741466953525	WITHOUT_CLASSIFICATION	2.5853304647546642E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999884460588855	WITHOUT_CLASSIFICATION	1.1553941114411107E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996841445713984	WITHOUT_CLASSIFICATION	3.158554286016389E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999982222310253	WITHOUT_CLASSIFICATION	1.7777689746998303E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999823918720234	WITHOUT_CLASSIFICATION	1.7608127976588194E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999930456917228	WITHOUT_CLASSIFICATION	6.954308277313827E-6	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999930939179162	WITHOUT_CLASSIFICATION	6.906082083748669E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999963601310462	WITHOUT_CLASSIFICATION	3.63986895394007E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999920975626332	WITHOUT_CLASSIFICATION	7.902437366781382E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999804205036122	WITHOUT_CLASSIFICATION	1.957949638773539E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999674243549835	WITHOUT_CLASSIFICATION	3.2575645016519104E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999969679523867	WITHOUT_CLASSIFICATION	3.0320476133243456E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999306529444105	WITHOUT_CLASSIFICATION	6.934705558945558E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999306529444105	WITHOUT_CLASSIFICATION	6.934705558945558E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999793831367831	WITHOUT_CLASSIFICATION	2.0616863216870167E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999954185433517	WITHOUT_CLASSIFICATION	4.581456648257004E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9995759126167609	WITHOUT_CLASSIFICATION	4.240873832391071E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999812567601836	WITHOUT_CLASSIFICATION	1.8743239816470522E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999909536315661	WITHOUT_CLASSIFICATION	9.046368433853733E-6	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999739248940379	WITHOUT_CLASSIFICATION	2.6075105962088754E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999834507890014	WITHOUT_CLASSIFICATION	1.6549210998619178E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9988336628543001	WITHOUT_CLASSIFICATION	0.0011663371456998404	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999997454666266	WITHOUT_CLASSIFICATION	2.545333734015313E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973599912169	WITHOUT_CLASSIFICATION	2.640008783090814E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735418639965	WITHOUT_CLASSIFICATION	2.6458136003601698E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987597893883393	WITHOUT_CLASSIFICATION	0.0012402106116606835	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9929481508144937	WITHOUT_CLASSIFICATION	0.00705184918550624	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999989539126978	WITHOUT_CLASSIFICATION	1.0460873022182433E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999867899996701	WITHOUT_CLASSIFICATION	1.3210000329954612E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.99877494384162	WITHOUT_CLASSIFICATION	0.001225056158380001	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999961179331784	WITHOUT_CLASSIFICATION	3.88206682148954E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999994819363849	WITHOUT_CLASSIFICATION	5.180636150880046E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999927952071033	WITHOUT_CLASSIFICATION	7.20479289669877E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999462821776047	WITHOUT_CLASSIFICATION	5.371782239533465E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999819529765	WITHOUT_CLASSIFICATION	1.8047023504292578E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999102270379364	WITHOUT_CLASSIFICATION	8.977296206359327E-5	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999810589998944	WITHOUT_CLASSIFICATION	1.8941000105543226E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999788255586727	WITHOUT_CLASSIFICATION	2.1174441327285044E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999764650683698	WITHOUT_CLASSIFICATION	2.3534931630177678E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999983768378679	WITHOUT_CLASSIFICATION	1.623162132240582E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999997324520488	WITHOUT_CLASSIFICATION	2.675479512065336E-6	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9993033619159774	WITHOUT_CLASSIFICATION	6.966380840226845E-4	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999721799937762	WITHOUT_CLASSIFICATION	2.782000622372845E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999954405710114	WITHOUT_CLASSIFICATION	4.559428988561596E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999987380512733	WITHOUT_CLASSIFICATION	1.2619487267526695E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999969893648651	WITHOUT_CLASSIFICATION	3.0106351347905255E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999975029857829	WITHOUT_CLASSIFICATION	2.4970142170423036E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999989224534165	WITHOUT_CLASSIFICATION	1.0775465835023608E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999900799389173	WITHOUT_CLASSIFICATION	9.92006108275499E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999984908775443	WITHOUT_CLASSIFICATION	1.5091224556166143E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999877515106529	WITHOUT_CLASSIFICATION	1.2248489347101684E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9996586693683338	WITHOUT_CLASSIFICATION	3.4133063166618945E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999933936094171	WITHOUT_CLASSIFICATION	6.60639058289884E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999850600352808	WITHOUT_CLASSIFICATION	1.4939964719109746E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999939361988729	WITHOUT_CLASSIFICATION	6.063801127121505E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999995373234635	WITHOUT_CLASSIFICATION	4.626765364992594E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999995037828271	WITHOUT_CLASSIFICATION	4.962171728904387E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998491651359038	WITHOUT_CLASSIFICATION	1.5083486409623743E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9987349776891391	WITHOUT_CLASSIFICATION	0.001265022310860957	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999471800240372	WITHOUT_CLASSIFICATION	5.2819975962897585E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998607000506	WITHOUT_CLASSIFICATION	1.3929994932022307E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974831649671	WITHOUT_CLASSIFICATION	2.516835032968961E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999988635715658	WITHOUT_CLASSIFICATION	1.1364284342109051E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998201124435	WITHOUT_CLASSIFICATION	1.798875564432455E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999741941164109	WITHOUT_CLASSIFICATION	2.5805883589167177E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999990388033422	WITHOUT_CLASSIFICATION	9.61196657902364E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999915797816233	WITHOUT_CLASSIFICATION	8.42021837668364E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999698344893716	WITHOUT_CLASSIFICATION	3.0165510628468833E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998975199106304	WITHOUT_CLASSIFICATION	1.0248008936971945E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9985415460672911	WITHOUT_CLASSIFICATION	0.001458453932708957	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999855908419135	WITHOUT_CLASSIFICATION	1.4409158086429664E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999948930985814	WITHOUT_CLASSIFICATION	5.106901418597344E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9997646120745498	WITHOUT_CLASSIFICATION	2.353879254502443E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997570121911816	WITHOUT_CLASSIFICATION	2.4298780881839898E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999951154400057	WITHOUT_CLASSIFICATION	4.884559994263898E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999226465570781	WITHOUT_CLASSIFICATION	7.735344292190852E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998395055782554	WITHOUT_CLASSIFICATION	1.604944217445783E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997084075738308	WITHOUT_CLASSIFICATION	2.9159242616908393E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998863582212	WITHOUT_CLASSIFICATION	1.1364177876006406E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999926474143217	WITHOUT_CLASSIFICATION	7.352585678254293E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998395055782554	WITHOUT_CLASSIFICATION	1.604944217445783E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994054978502089	WITHOUT_CLASSIFICATION	5.945021497911615E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997308184488	WITHOUT_CLASSIFICATION	2.6918155110009896E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998250637774	WITHOUT_CLASSIFICATION	1.7493622275626795E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999886566612609	WITHOUT_CLASSIFICATION	1.1343338739116717E-5	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998278374158223	WITHOUT_CLASSIFICATION	1.7216258417776485E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998909518056663	WITHOUT_CLASSIFICATION	1.0904819433375105E-4	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999985429394517	WITHOUT_CLASSIFICATION	1.4570605483420571E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9992934726352077	WITHOUT_CLASSIFICATION	7.065273647923465E-4	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998523871882092	WITHOUT_CLASSIFICATION	1.4761281179082644E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999065104378297	WITHOUT_CLASSIFICATION	9.348956217015648E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994892660590408	WITHOUT_CLASSIFICATION	5.107339409591716E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9918353661584619	WITHOUT_CLASSIFICATION	0.008164633841538062	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999973526269197	WITHOUT_CLASSIFICATION	2.6473730802484674E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999882926219565	WITHOUT_CLASSIFICATION	1.170737804344751E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999644140469945	WITHOUT_CLASSIFICATION	3.55859530055333E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999900397227572	WITHOUT_CLASSIFICATION	9.960277242727632E-6	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999977731302795	WITHOUT_CLASSIFICATION	2.2268697205979096E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999991131578374	WITHOUT_CLASSIFICATION	8.868421626645172E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9983372433522815	WITHOUT_CLASSIFICATION	0.0016627566477184564	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999931416199651	WITHOUT_CLASSIFICATION	6.858380034906448E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999963018438507	WITHOUT_CLASSIFICATION	3.698156149274589E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999978176065326	WITHOUT_CLASSIFICATION	2.182393467421767E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999866172398052	WITHOUT_CLASSIFICATION	1.3382760194845673E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999589599905	WITHOUT_CLASSIFICATION	4.1040009467309727E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999303037934	WITHOUT_CLASSIFICATION	6.969620659469922E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999522880302518	WITHOUT_CLASSIFICATION	4.771196974821704E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997316134514943	WITHOUT_CLASSIFICATION	2.683865485057014E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997764086049812	WITHOUT_CLASSIFICATION	2.2359139501874518E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999974465004598	WITHOUT_CLASSIFICATION	2.5534995402061978E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999970719985477	WITHOUT_CLASSIFICATION	2.9280014522985655E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999973144191607	WITHOUT_CLASSIFICATION	2.6855808391772897E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999874565791588	WITHOUT_CLASSIFICATION	1.2543420841210228E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999935239757828	WITHOUT_CLASSIFICATION	6.476024217269084E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999994442475196	WITHOUT_CLASSIFICATION	5.557524804014629E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999731838452864	WITHOUT_CLASSIFICATION	2.68161547134842E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997791168058	WITHOUT_CLASSIFICATION	2.2088319418660813E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999971936870473	WITHOUT_CLASSIFICATION	2.806312952711453E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999935958497745	WITHOUT_CLASSIFICATION	6.404150225435801E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997240162406	WITHOUT_CLASSIFICATION	2.759837594656887E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999630810252909	WITHOUT_CLASSIFICATION	3.6918974709200946E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999376625169889	WITHOUT_CLASSIFICATION	6.233748301115554E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999376625169889	WITHOUT_CLASSIFICATION	6.233748301115554E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9992369801729502	WITHOUT_CLASSIFICATION	7.63019827049855E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999951389738257	WITHOUT_CLASSIFICATION	4.8610261743177254E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999804461732734	WITHOUT_CLASSIFICATION	1.955382672655313E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.6194705290864078	WITHOUT_CLASSIFICATION	0.38052947091359207	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999555280103113	WITHOUT_CLASSIFICATION	4.4471989688753423E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999555280103113	WITHOUT_CLASSIFICATION	4.4471989688753423E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999940508902707	WITHOUT_CLASSIFICATION	5.949109729382534E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998958611641812	WITHOUT_CLASSIFICATION	1.0413883581883603E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999436268273486	WITHOUT_CLASSIFICATION	5.637317265141551E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998932998386266	WITHOUT_CLASSIFICATION	1.067001613733861E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999966350851579	WITHOUT_CLASSIFICATION	3.364914842096122E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999890673741852	WITHOUT_CLASSIFICATION	1.0932625814694938E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999988112916136	WITHOUT_CLASSIFICATION	1.1887083864658881E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998530067073498	WITHOUT_CLASSIFICATION	1.4699329265021932E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999460014191464	WITHOUT_CLASSIFICATION	5.399858085362691E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239891643737	WITHOUT_CLASSIFICATION	7.601083562623478E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239891643737	WITHOUT_CLASSIFICATION	7.601083562623478E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998865417513739	WITHOUT_CLASSIFICATION	1.1345824862605315E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999951896908187	WITHOUT_CLASSIFICATION	4.81030918133659E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997028229400327	WITHOUT_CLASSIFICATION	2.971770599673654E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9995551197576739	WITHOUT_CLASSIFICATION	4.448802423261515E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909632553065	WITHOUT_CLASSIFICATION	9.036744693512428E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729345819113	WITHOUT_CLASSIFICATION	2.706541808869884E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999928433847989	WITHOUT_CLASSIFICATION	7.156615201070351E-6	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999162014828623	WITHOUT_CLASSIFICATION	8.379851713776474E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999775819183263	WITHOUT_CLASSIFICATION	2.241808167376399E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999112959357357	WITHOUT_CLASSIFICATION	8.870406426421374E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999065104378297	WITHOUT_CLASSIFICATION	9.348956217015648E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999829197926018	WITHOUT_CLASSIFICATION	1.708020739811686E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9992773513437792	WITHOUT_CLASSIFICATION	7.226486562208901E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999794533212162	WITHOUT_CLASSIFICATION	2.054667878377359E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.999912734307346	WITHOUT_CLASSIFICATION	8.726569265403513E-5	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998238918387627	WITHOUT_CLASSIFICATION	1.761081612371481E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996963746106065	WITHOUT_CLASSIFICATION	3.0362538939358695E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995094172054646	WITHOUT_CLASSIFICATION	4.905827945354438E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999916677101524	WITHOUT_CLASSIFICATION	8.332289847704876E-6	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999658660640463	WITHOUT_CLASSIFICATION	3.4133935953699227E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999705805015122	WITHOUT_CLASSIFICATION	2.9419498487801517E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999705805015122	WITHOUT_CLASSIFICATION	2.9419498487801517E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998241479695138	WITHOUT_CLASSIFICATION	1.7585203048625853E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999974695562	WITHOUT_CLASSIFICATION	2.530443804427289E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999461282667423	WITHOUT_CLASSIFICATION	5.38717332575929E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995562169364024	WITHOUT_CLASSIFICATION	4.4378306359767856E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999935217871739	WITHOUT_CLASSIFICATION	6.478212826127737E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999959793557764	WITHOUT_CLASSIFICATION	4.020644223593434E-6	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999976731931962	WITHOUT_CLASSIFICATION	2.3268068037017055E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999995381284396	WITHOUT_CLASSIFICATION	4.6187156039943293E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999492015653109	WITHOUT_CLASSIFICATION	5.079843468924746E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999908796916456	WITHOUT_CLASSIFICATION	9.120308354337168E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766175851482	WITHOUT_CLASSIFICATION	2.338241485175125E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999965784862344	WITHOUT_CLASSIFICATION	3.4215137656161695E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999975535940695	WITHOUT_CLASSIFICATION	2.44640593045767E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999918669738087	WITHOUT_CLASSIFICATION	8.133026191254165E-6	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999653235187912	WITHOUT_CLASSIFICATION	3.467648120881035E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972006033321	WITHOUT_CLASSIFICATION	2.799396667896707E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999891635930237	WITHOUT_CLASSIFICATION	1.0836406976312498E-5	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999713553453163	WITHOUT_CLASSIFICATION	2.8644654683669675E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999092334374353	WITHOUT_CLASSIFICATION	9.07665625646403E-5	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999973857650755	WITHOUT_CLASSIFICATION	2.614234924468971E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999936345919611	WITHOUT_CLASSIFICATION	6.365408038920059E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999996216646617	WITHOUT_CLASSIFICATION	3.7833533835697755E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999985685933858	WITHOUT_CLASSIFICATION	1.4314066141695724E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999682311091015	WITHOUT_CLASSIFICATION	3.176889089858519E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999857105628698	WITHOUT_CLASSIFICATION	1.4289437130201267E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999857105628698	WITHOUT_CLASSIFICATION	1.4289437130201267E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999880849761263	WITHOUT_CLASSIFICATION	1.1915023873540108E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999922509691664	WITHOUT_CLASSIFICATION	7.749030833613282E-5	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999883321900219	WITHOUT_CLASSIFICATION	1.1667809978040435E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999990547422205	WITHOUT_CLASSIFICATION	9.452577795727029E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999886410921861	WITHOUT_CLASSIFICATION	1.1358907813922909E-5	TEST
