//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999524602874437	WITHOUT_CLASSIFICATION	4.753971255644067E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9994846507552867	WITHOUT_CLASSIFICATION	5.153492447134075E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999914416802557	WITHOUT_CLASSIFICATION	8.558319744366722E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921511945253	WITHOUT_CLASSIFICATION	7.848805474724673E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921511945253	WITHOUT_CLASSIFICATION	7.848805474724673E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999762413048622	WITHOUT_CLASSIFICATION	2.3758695137793083E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999726893063126	WITHOUT_CLASSIFICATION	2.7310693687455772E-5	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999847864574192	WITHOUT_CLASSIFICATION	1.5213542580912238E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999969163635513	WITHOUT_CLASSIFICATION	3.083636448746425E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999544546845617	WITHOUT_CLASSIFICATION	4.55453154383637E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999544546845617	WITHOUT_CLASSIFICATION	4.55453154383637E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999201105570599	WITHOUT_CLASSIFICATION	7.988944294003375E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999996609177805	WITHOUT_CLASSIFICATION	3.3908221949177077E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999821241972808	WITHOUT_CLASSIFICATION	1.7875802719178143E-5	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997871753112892	WITHOUT_CLASSIFICATION	2.128246887108525E-4	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999813501550061	WITHOUT_CLASSIFICATION	1.864984499393325E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999429343547261	WITHOUT_CLASSIFICATION	5.706564527392322E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9996197819381862	WITHOUT_CLASSIFICATION	3.802180618138553E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999901331378345	WITHOUT_CLASSIFICATION	9.866862165552703E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999945594722885	WITHOUT_CLASSIFICATION	5.440527711458405E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999945594722885	WITHOUT_CLASSIFICATION	5.440527711458405E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999793560800877	WITHOUT_CLASSIFICATION	2.0643919912263062E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999426912000724	WITHOUT_CLASSIFICATION	5.7308799927551E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998424824850518	WITHOUT_CLASSIFICATION	1.5751751494823382E-4	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999965873612027	WITHOUT_CLASSIFICATION	3.412638797301281E-5	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999574760318967	WITHOUT_CLASSIFICATION	4.252396810338587E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5884767476620998	WITHOUT_CLASSIFICATION	0.41152325233790027	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5884767476620998	WITHOUT_CLASSIFICATION	0.41152325233790027	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999723040689412	WITHOUT_CLASSIFICATION	2.7695931058873864E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998195794769599	WITHOUT_CLASSIFICATION	1.8042052304017593E-4	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999960296071815	WITHOUT_CLASSIFICATION	3.970392818434908E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998815306865891	WITHOUT_CLASSIFICATION	1.184693134108446E-4	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.999983328179071	WITHOUT_CLASSIFICATION	1.6671820929113428E-5	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999722149705461	WITHOUT_CLASSIFICATION	2.778502945381088E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999950644471848	WITHOUT_CLASSIFICATION	4.935552815109029E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999772307920994	WITHOUT_CLASSIFICATION	2.2769207900613905E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999380272588261	WITHOUT_CLASSIFICATION	6.197274117395002E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999380272588261	WITHOUT_CLASSIFICATION	6.197274117395002E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999411915915262	WITHOUT_CLASSIFICATION	5.8808408473805734E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999839230888612	WITHOUT_CLASSIFICATION	1.607691113873256E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999967900439073	WITHOUT_CLASSIFICATION	3.209956092699036E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999914646580024	WITHOUT_CLASSIFICATION	8.535341997706202E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999991482158886	WITHOUT_CLASSIFICATION	8.517841112792018E-7	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999999715216907	WITHOUT_CLASSIFICATION	2.847830929786956E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997698889526934	WITHOUT_CLASSIFICATION	2.30111047306712E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999524467339801	WITHOUT_CLASSIFICATION	4.75532660198612E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999961106763211	WITHOUT_CLASSIFICATION	3.889323678930663E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999444300035214	WITHOUT_CLASSIFICATION	5.5569996478508394E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999896353582062	WITHOUT_CLASSIFICATION	1.0364641793728503E-5	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999946311459176	WITHOUT_CLASSIFICATION	5.368854082466349E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999927313505561	WITHOUT_CLASSIFICATION	7.268649443863201E-6	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999288409125241	WITHOUT_CLASSIFICATION	7.11590874758139E-5	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999972621941227	WITHOUT_CLASSIFICATION	2.7378058773773886E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999932233958992	WITHOUT_CLASSIFICATION	6.776604100859392E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999956687745694	WITHOUT_CLASSIFICATION	4.331225430688356E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999994109628998	WITHOUT_CLASSIFICATION	5.890371002058713E-6	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999713367950184	WITHOUT_CLASSIFICATION	2.866320498160696E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999878239346974	WITHOUT_CLASSIFICATION	1.2176065302593067E-5	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999630114129268	WITHOUT_CLASSIFICATION	3.698858707325917E-5	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993074430722	WITHOUT_CLASSIFICATION	6.925569278188757E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999978381981305	WITHOUT_CLASSIFICATION	2.161801869583418E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999697862758355	WITHOUT_CLASSIFICATION	3.0213724164454185E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999970646623917	WITHOUT_CLASSIFICATION	2.9353376083682126E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999926806083634	WITHOUT_CLASSIFICATION	7.319391636560413E-6	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999990491791294	WITHOUT_CLASSIFICATION	9.508208706921392E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999815843987312	WITHOUT_CLASSIFICATION	1.8415601268802016E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999935976875074	WITHOUT_CLASSIFICATION	6.4023124925556186E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999182838760458	WITHOUT_CLASSIFICATION	8.17161239542524E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999995074800888	WITHOUT_CLASSIFICATION	4.925199111558125E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999954038764663	WITHOUT_CLASSIFICATION	4.596123533650252E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997012157190192	WITHOUT_CLASSIFICATION	2.987842809808349E-4	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999976036994211	WITHOUT_CLASSIFICATION	2.396300578900043E-5	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999888304600829	WITHOUT_CLASSIFICATION	1.11695399171874E-5	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999919684087304	WITHOUT_CLASSIFICATION	8.031591269683957E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999976036994211	WITHOUT_CLASSIFICATION	2.396300578900043E-5	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998430256043	WITHOUT_CLASSIFICATION	1.5697439570650768E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999560709407028	WITHOUT_CLASSIFICATION	4.3929059297114005E-5	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999921561479784	WITHOUT_CLASSIFICATION	7.843852021545028E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999930906533271	WITHOUT_CLASSIFICATION	6.909346672885229E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999826777440554	WITHOUT_CLASSIFICATION	1.7322255944720124E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999826777440554	WITHOUT_CLASSIFICATION	1.7322255944720124E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999380729759578	WITHOUT_CLASSIFICATION	6.19270240421614E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999686763111422	WITHOUT_CLASSIFICATION	3.132368885789491E-5	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999851557241154	WITHOUT_CLASSIFICATION	1.484427588461207E-5	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999997331660978	WITHOUT_CLASSIFICATION	2.6683390219615373E-6	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999912833490748	WITHOUT_CLASSIFICATION	8.71665092511217E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999879786101302	WITHOUT_CLASSIFICATION	1.2021389869710943E-5	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.99999629135835	WITHOUT_CLASSIFICATION	3.70864164999195E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999918657754705	WITHOUT_CLASSIFICATION	8.134224529512831E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999904927169038	WITHOUT_CLASSIFICATION	9.507283096284795E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999557133101724	WITHOUT_CLASSIFICATION	4.428668982752612E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999557133101724	WITHOUT_CLASSIFICATION	4.428668982752612E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999939825149985	WITHOUT_CLASSIFICATION	6.017485001518291E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999974920329482	WITHOUT_CLASSIFICATION	2.5079670518568466E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999910979254303	WITHOUT_CLASSIFICATION	8.90207456976053E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999557133101724	WITHOUT_CLASSIFICATION	4.428668982752612E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999939825149985	WITHOUT_CLASSIFICATION	6.017485001518291E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999939825149985	WITHOUT_CLASSIFICATION	6.017485001518291E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999923217228628	WITHOUT_CLASSIFICATION	7.678277137230402E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999842100827663	WITHOUT_CLASSIFICATION	1.5789917233759924E-5	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999892338948114	WITHOUT_CLASSIFICATION	1.0766105188693569E-5	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999947929211147	WITHOUT_CLASSIFICATION	5.207078885315376E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999855065504398	WITHOUT_CLASSIFICATION	1.4493449560210945E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999855065504398	WITHOUT_CLASSIFICATION	1.4493449560210945E-5	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998725272909349	WITHOUT_CLASSIFICATION	1.274727090649858E-4	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996978444754024	WITHOUT_CLASSIFICATION	3.0215552459748494E-4	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999919511234532	WITHOUT_CLASSIFICATION	8.048876546802242E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999930075509998	WITHOUT_CLASSIFICATION	6.992449000133184E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999930075509998	WITHOUT_CLASSIFICATION	6.992449000133184E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997096127609986	WITHOUT_CLASSIFICATION	2.9038723900149874E-4	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999887710181374	WITHOUT_CLASSIFICATION	1.122898186265829E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9960631104921146	WITHOUT_CLASSIFICATION	0.003936889507885395	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999994768189213	WITHOUT_CLASSIFICATION	5.231810787030977E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9995708246225651	WITHOUT_CLASSIFICATION	4.291753774349468E-4	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999855685427991	WITHOUT_CLASSIFICATION	1.4431457200990518E-5	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999780873259757	WITHOUT_CLASSIFICATION	2.1912674024375995E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9991539798972533	WITHOUT_CLASSIFICATION	8.460201027467907E-4	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9960631104921146	WITHOUT_CLASSIFICATION	0.003936889507885395	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999861091875474	WITHOUT_CLASSIFICATION	1.3890812452596742E-4	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970520499482	WITHOUT_CLASSIFICATION	2.9479500517873075E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970520499482	WITHOUT_CLASSIFICATION	2.9479500517873075E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999152843776632	WITHOUT_CLASSIFICATION	8.471562233675153E-5	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998322209068836	WITHOUT_CLASSIFICATION	1.6777909311641774E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998912099315798	WITHOUT_CLASSIFICATION	1.0879006842030786E-4	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9994481314454385	WITHOUT_CLASSIFICATION	5.518685545615552E-4	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9991976432851193	WITHOUT_CLASSIFICATION	8.023567148806297E-4	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9998653845837191	WITHOUT_CLASSIFICATION	1.3461541628094075E-4	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999983947101175	WITHOUT_CLASSIFICATION	1.6052898824778969E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999953633943788	WITHOUT_CLASSIFICATION	4.636605621227927E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999987677358858	WITHOUT_CLASSIFICATION	1.232264114203392E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999987677358858	WITHOUT_CLASSIFICATION	1.232264114203392E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999524602874437	WITHOUT_CLASSIFICATION	4.753971255644067E-5	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999895449686237	WITHOUT_CLASSIFICATION	1.0455031376253184E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999798113907651	WITHOUT_CLASSIFICATION	2.0188609234870273E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999835580556885	WITHOUT_CLASSIFICATION	1.6441944311465104E-5	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999846817050679	WITHOUT_CLASSIFICATION	1.531829493201818E-5	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999994846501642	WITHOUT_CLASSIFICATION	5.153498357883852E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999635191978178	WITHOUT_CLASSIFICATION	3.648080218218279E-5	TEST
// new	WITHOUT_CLASSIFICATION	0.999877031010668	WITHOUT_CLASSIFICATION	1.229689893319964E-4	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999427593962754	WITHOUT_CLASSIFICATION	5.724060372461917E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999868294895695	WITHOUT_CLASSIFICATION	1.3170510430615914E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.999994846501642	WITHOUT_CLASSIFICATION	5.153498357883852E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9995570833395443	WITHOUT_CLASSIFICATION	4.4291666045575813E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999913064342623	WITHOUT_CLASSIFICATION	8.693565737829831E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999834152284166	WITHOUT_CLASSIFICATION	1.6584771583429773E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999912857162352	WITHOUT_CLASSIFICATION	8.714283764784915E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999924286300812	WITHOUT_CLASSIFICATION	7.571369918730958E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921511945253	WITHOUT_CLASSIFICATION	7.848805474724673E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999906816210096	WITHOUT_CLASSIFICATION	9.318378990530015E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999954643737808	WITHOUT_CLASSIFICATION	4.5356262192107034E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999887206151108	WITHOUT_CLASSIFICATION	1.1279384889249371E-5	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999910008353252	WITHOUT_CLASSIFICATION	8.9991646748375E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999945594524009	WITHOUT_CLASSIFICATION	5.440547599142468E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999850283916599	WITHOUT_CLASSIFICATION	1.4971608340107456E-5	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999859579392211	WITHOUT_CLASSIFICATION	1.4042060778924835E-5	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999992781224733	WITHOUT_CLASSIFICATION	7.218775267013253E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999916051754993	WITHOUT_CLASSIFICATION	8.394824500657733E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999912216755599	WITHOUT_CLASSIFICATION	8.778324440073007E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999427593962754	WITHOUT_CLASSIFICATION	5.724060372461917E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999945594524009	WITHOUT_CLASSIFICATION	5.440547599142468E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999762413048622	WITHOUT_CLASSIFICATION	2.3758695137793083E-5	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999865540646579	WITHOUT_CLASSIFICATION	1.3445935342086292E-5	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999401908724774	WITHOUT_CLASSIFICATION	5.980912752263882E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999822790397219	WITHOUT_CLASSIFICATION	1.7720960278083643E-5	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999945970490319	WITHOUT_CLASSIFICATION	5.4029509680310766E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999834733061804	WITHOUT_CLASSIFICATION	1.65266938195896E-5	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9996831660587381	WITHOUT_CLASSIFICATION	3.168339412618986E-4	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999109065522163	WITHOUT_CLASSIFICATION	8.909344778368927E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999109065522163	WITHOUT_CLASSIFICATION	8.909344778368927E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999848664188676	WITHOUT_CLASSIFICATION	1.5133581132296678E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999996259118024	WITHOUT_CLASSIFICATION	3.7408819759611588E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9996333151708219	WITHOUT_CLASSIFICATION	3.6668482917809954E-4	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999779929797769	WITHOUT_CLASSIFICATION	2.200702022315841E-5	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999860531938896	WITHOUT_CLASSIFICATION	1.3946806110423738E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999914758573815	WITHOUT_CLASSIFICATION	8.524142618576864E-6	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999921477353982	WITHOUT_CLASSIFICATION	7.852264601857549E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999726893063126	WITHOUT_CLASSIFICATION	2.7310693687455772E-5	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999945734828803	WITHOUT_CLASSIFICATION	5.426517119677681E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999945734828803	WITHOUT_CLASSIFICATION	5.426517119677681E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999945734828803	WITHOUT_CLASSIFICATION	5.426517119677681E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999897005824987	WITHOUT_CLASSIFICATION	1.0299417501254005E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999945734828803	WITHOUT_CLASSIFICATION	5.426517119677681E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999919181317021	WITHOUT_CLASSIFICATION	8.081868297972895E-6	TEST
// int	WITHOUT_CLASSIFICATION	0.9999465773526628	WITHOUT_CLASSIFICATION	5.342264733709642E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.999969760504022	WITHOUT_CLASSIFICATION	3.02394959780864E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999427593962754	WITHOUT_CLASSIFICATION	5.724060372461917E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999945594524009	WITHOUT_CLASSIFICATION	5.440547599142468E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999945594524009	WITHOUT_CLASSIFICATION	5.440547599142468E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999816622991494	WITHOUT_CLASSIFICATION	1.83377008506647E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999971374015494	WITHOUT_CLASSIFICATION	2.8625984507032428E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999874729842474	WITHOUT_CLASSIFICATION	1.2527015752614081E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999901138602844	WITHOUT_CLASSIFICATION	9.886139715651119E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999969163635513	WITHOUT_CLASSIFICATION	3.083636448746425E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999969163635513	WITHOUT_CLASSIFICATION	3.083636448746425E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999924950626461	WITHOUT_CLASSIFICATION	7.504937354016461E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999954656026868	WITHOUT_CLASSIFICATION	4.534397313145559E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9998732722245393	WITHOUT_CLASSIFICATION	1.2672777546067176E-4	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999465788480402	WITHOUT_CLASSIFICATION	5.3421151959848244E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999644820087137	WITHOUT_CLASSIFICATION	3.551799128624885E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999430508273791	WITHOUT_CLASSIFICATION	5.694917262101032E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999544546845617	WITHOUT_CLASSIFICATION	4.55453154383637E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999427850668919	WITHOUT_CLASSIFICATION	5.721493310802719E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999427850668919	WITHOUT_CLASSIFICATION	5.721493310802719E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999201105570599	WITHOUT_CLASSIFICATION	7.988944294003375E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999201105570599	WITHOUT_CLASSIFICATION	7.988944294003375E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999967745055175	WITHOUT_CLASSIFICATION	3.225494482558627E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999967745055175	WITHOUT_CLASSIFICATION	3.225494482558627E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999725407103598	WITHOUT_CLASSIFICATION	2.745928964019364E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999725407103598	WITHOUT_CLASSIFICATION	2.745928964019364E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999969163635513	WITHOUT_CLASSIFICATION	3.083636448746425E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999544546845617	WITHOUT_CLASSIFICATION	4.55453154383637E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999427850668919	WITHOUT_CLASSIFICATION	5.721493310802719E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999427850668919	WITHOUT_CLASSIFICATION	5.721493310802719E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999201105570599	WITHOUT_CLASSIFICATION	7.988944294003375E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999967745055175	WITHOUT_CLASSIFICATION	3.225494482558627E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999967745055175	WITHOUT_CLASSIFICATION	3.225494482558627E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999725407103598	WITHOUT_CLASSIFICATION	2.745928964019364E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999851867113654	WITHOUT_CLASSIFICATION	1.481328863452795E-5	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999295985496873	WITHOUT_CLASSIFICATION	7.040145031268367E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.99997352440906	WITHOUT_CLASSIFICATION	2.6475590940082515E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999661791870194	WITHOUT_CLASSIFICATION	3.382081298065945E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999336543608898	WITHOUT_CLASSIFICATION	6.634563911028489E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999426833571573	WITHOUT_CLASSIFICATION	5.731664284279358E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997022989697053	WITHOUT_CLASSIFICATION	2.9770103029463994E-4	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999969817498555	WITHOUT_CLASSIFICATION	3.0182501445066964E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997660664158801	WITHOUT_CLASSIFICATION	2.339335841199955E-4	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999885498423069	WITHOUT_CLASSIFICATION	1.1450157693145372E-5	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999750065401706	WITHOUT_CLASSIFICATION	2.4993459829486146E-5	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999803877799944	WITHOUT_CLASSIFICATION	1.961222000559232E-5	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999380729759578	WITHOUT_CLASSIFICATION	6.19270240421614E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999426833571573	WITHOUT_CLASSIFICATION	5.731664284279358E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993399623140382	WITHOUT_CLASSIFICATION	6.600376859616802E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993399623140382	WITHOUT_CLASSIFICATION	6.600376859616802E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999413707047831	WITHOUT_CLASSIFICATION	5.862929521702632E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999775176627044	WITHOUT_CLASSIFICATION	2.2482337295625708E-5	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999775176627044	WITHOUT_CLASSIFICATION	2.2482337295625708E-5	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9996864838230819	WITHOUT_CLASSIFICATION	3.135161769181386E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998962372415218	WITHOUT_CLASSIFICATION	1.037627584781798E-4	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9981216869888514	WITHOUT_CLASSIFICATION	0.0018783130111485735	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999807184547815	WITHOUT_CLASSIFICATION	1.9281545218546235E-5	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999807184547815	WITHOUT_CLASSIFICATION	1.9281545218546235E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999813501550061	WITHOUT_CLASSIFICATION	1.864984499393325E-5	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977347205956	WITHOUT_CLASSIFICATION	2.265279404390523E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977347205956	WITHOUT_CLASSIFICATION	2.265279404390523E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999327740477523	WITHOUT_CLASSIFICATION	6.722595224771842E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999849950900216	WITHOUT_CLASSIFICATION	1.500490997828913E-5	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999901331378345	WITHOUT_CLASSIFICATION	9.866862165552703E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9858426289973725	WITHOUT_CLASSIFICATION	0.01415737100262748	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999429343547261	WITHOUT_CLASSIFICATION	5.706564527392322E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999852531330282	WITHOUT_CLASSIFICATION	1.4746866971836723E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999618283755625	WITHOUT_CLASSIFICATION	3.817162443745258E-5	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9995947430123102	WITHOUT_CLASSIFICATION	4.052569876898138E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999601367912112	WITHOUT_CLASSIFICATION	3.9863208788851206E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999965873612027	WITHOUT_CLASSIFICATION	3.412638797301281E-5	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999993385457789	WITHOUT_CLASSIFICATION	6.614542211255521E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999426632686775	WITHOUT_CLASSIFICATION	5.7336731322566214E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999981662176983	WITHOUT_CLASSIFICATION	1.8337823016870618E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999816641125538	WITHOUT_CLASSIFICATION	1.8335887446164003E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945657202556	WITHOUT_CLASSIFICATION	5.434279744386338E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999901331378345	WITHOUT_CLASSIFICATION	9.866862165552703E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999961046561788	WITHOUT_CLASSIFICATION	3.89534382120379E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999947009072797	WITHOUT_CLASSIFICATION	5.299092720305559E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999427154005548	WITHOUT_CLASSIFICATION	5.728459944516687E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945657202556	WITHOUT_CLASSIFICATION	5.434279744386338E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999961046561788	WITHOUT_CLASSIFICATION	3.89534382120379E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999427154005548	WITHOUT_CLASSIFICATION	5.728459944516687E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999433069159722	WITHOUT_CLASSIFICATION	5.6693084027796054E-5	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999433069159722	WITHOUT_CLASSIFICATION	5.6693084027796054E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999945594722885	WITHOUT_CLASSIFICATION	5.440527711458405E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999952014529004	WITHOUT_CLASSIFICATION	4.79854709953344E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997126677439415	WITHOUT_CLASSIFICATION	2.8733225605854146E-4	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999782154549265	WITHOUT_CLASSIFICATION	2.178454507342165E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999892110901321	WITHOUT_CLASSIFICATION	1.078890986793761E-5	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999764055939077	WITHOUT_CLASSIFICATION	2.3594406092316558E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999684155583458	WITHOUT_CLASSIFICATION	3.1584441654178806E-5	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999974168740129	WITHOUT_CLASSIFICATION	2.5831259871768035E-6	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999764055939077	WITHOUT_CLASSIFICATION	2.3594406092316558E-5	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999426912000724	WITHOUT_CLASSIFICATION	5.7308799927551E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999931674108827	WITHOUT_CLASSIFICATION	6.832589117299488E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999430352357321	WITHOUT_CLASSIFICATION	5.696476426791802E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945657202556	WITHOUT_CLASSIFICATION	5.434279744386338E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999882798688354	WITHOUT_CLASSIFICATION	1.1720131164605035E-5	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999888435230244	WITHOUT_CLASSIFICATION	1.1156476975550537E-5	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9995821564174685	WITHOUT_CLASSIFICATION	4.178435825314965E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999955224887089	WITHOUT_CLASSIFICATION	4.4775112910977166E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999653140836033	WITHOUT_CLASSIFICATION	3.468591639660145E-5	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999989300447298	WITHOUT_CLASSIFICATION	1.0699552702328458E-6	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999140942309221	WITHOUT_CLASSIFICATION	8.590576907773453E-5	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999746788693826	WITHOUT_CLASSIFICATION	2.5321130617297662E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999945847503293	WITHOUT_CLASSIFICATION	5.415249670724405E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999816622991494	WITHOUT_CLASSIFICATION	1.83377008506647E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999744268888707	WITHOUT_CLASSIFICATION	2.5573111129315684E-5	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999965873612027	WITHOUT_CLASSIFICATION	3.412638797301281E-5	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999828530659365	WITHOUT_CLASSIFICATION	1.7146934063515687E-5	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997805470008548	WITHOUT_CLASSIFICATION	2.1945299914512118E-4	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999953319623153	WITHOUT_CLASSIFICATION	4.66803768475472E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999976523219924	WITHOUT_CLASSIFICATION	2.3476780075788487E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999976597899833	WITHOUT_CLASSIFICATION	2.3402100166234916E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999770801372265	WITHOUT_CLASSIFICATION	2.291986277347434E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999935736851795	WITHOUT_CLASSIFICATION	6.426314820531334E-6	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999725747892908	WITHOUT_CLASSIFICATION	2.7425210709160182E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998503230805983	WITHOUT_CLASSIFICATION	1.4967691940169335E-4	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999815725192439	WITHOUT_CLASSIFICATION	1.8427480756098537E-4	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999937186773313	WITHOUT_CLASSIFICATION	6.281322668705664E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999937186773313	WITHOUT_CLASSIFICATION	6.281322668705664E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997887397929144	WITHOUT_CLASSIFICATION	2.1126020708555374E-4	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999822869905602	WITHOUT_CLASSIFICATION	1.771300943981378E-5	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998914544696281	WITHOUT_CLASSIFICATION	1.0854553037186134E-4	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999818497582033	WITHOUT_CLASSIFICATION	1.8150241796720857E-5	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997888116831539	WITHOUT_CLASSIFICATION	2.1118831684601658E-4	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9997959951477305	WITHOUT_CLASSIFICATION	2.0400485226935243E-4	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999856815603339	WITHOUT_CLASSIFICATION	1.4318439666111368E-5	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999141925056217	WITHOUT_CLASSIFICATION	8.580749437830449E-4	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997514108181367	WITHOUT_CLASSIFICATION	2.4858918186330996E-4	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999534912558418	WITHOUT_CLASSIFICATION	4.650874415819034E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999889690831008	WITHOUT_CLASSIFICATION	1.1030916899153563E-5	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999976480538806	WITHOUT_CLASSIFICATION	2.3519461193971264E-5	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998667477992141	WITHOUT_CLASSIFICATION	1.3325220078591946E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783636125713	WITHOUT_CLASSIFICATION	2.1636387428681704E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783038421912	WITHOUT_CLASSIFICATION	2.1696157808779255E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999705433300518	WITHOUT_CLASSIFICATION	2.9456669948203214E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999675772892703	WITHOUT_CLASSIFICATION	3.242271072967187E-5	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999643418075843	WITHOUT_CLASSIFICATION	3.565819241568506E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999958255715563	WITHOUT_CLASSIFICATION	4.174428443639286E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999533475764234	WITHOUT_CLASSIFICATION	4.66524235766384E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999533475764234	WITHOUT_CLASSIFICATION	4.66524235766384E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999372651617984	WITHOUT_CLASSIFICATION	6.273483820164179E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999372651617984	WITHOUT_CLASSIFICATION	6.273483820164179E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998503230805983	WITHOUT_CLASSIFICATION	1.4967691940169335E-4	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9995887330274229	WITHOUT_CLASSIFICATION	4.1126697257706985E-4	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989399745255582	WITHOUT_CLASSIFICATION	0.0010600254744418357	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998920706349803	WITHOUT_CLASSIFICATION	1.0792936501972826E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989399745255582	WITHOUT_CLASSIFICATION	0.0010600254744418357	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998920706349803	WITHOUT_CLASSIFICATION	1.0792936501972826E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996423166849294	WITHOUT_CLASSIFICATION	3.5768331507054807E-4	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998906152635826	WITHOUT_CLASSIFICATION	1.0938473641741608E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999987023597893	WITHOUT_CLASSIFICATION	1.297640210743622E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999967375433839	WITHOUT_CLASSIFICATION	3.262456616084821E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996345502726807	WITHOUT_CLASSIFICATION	3.6544972731934473E-4	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.998898064519696	WITHOUT_CLASSIFICATION	0.0011019354803039729	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999383288402466	WITHOUT_CLASSIFICATION	6.16711597533287E-5	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9992358015966217	WITHOUT_CLASSIFICATION	7.641984033783259E-4	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996412649932769	WITHOUT_CLASSIFICATION	3.58735006723146E-4	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999891758246974	WITHOUT_CLASSIFICATION	1.082417530267923E-5	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999989454011223	WITHOUT_CLASSIFICATION	1.054598877701874E-5	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999960812675331	WITHOUT_CLASSIFICATION	3.91873246686001E-6	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999960882863258	WITHOUT_CLASSIFICATION	3.911713674223028E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999799421931422	WITHOUT_CLASSIFICATION	2.0057806857795972E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999799421931422	WITHOUT_CLASSIFICATION	2.0057806857795972E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992007757910937	WITHOUT_CLASSIFICATION	7.992242089063546E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992007757910937	WITHOUT_CLASSIFICATION	7.992242089063546E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999986175674661	WITHOUT_CLASSIFICATION	1.38243253387502E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996423166849294	WITHOUT_CLASSIFICATION	3.5768331507054807E-4	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999825646432805	WITHOUT_CLASSIFICATION	1.7435356719426257E-5	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999170744451936	WITHOUT_CLASSIFICATION	8.292555480640226E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996326733434222	WITHOUT_CLASSIFICATION	3.6732665657778976E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994067808708686	WITHOUT_CLASSIFICATION	5.932191291314386E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9899676842302021	WITHOUT_CLASSIFICATION	0.010032315769797993	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996423166849294	WITHOUT_CLASSIFICATION	3.5768331507054807E-4	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994067808708686	WITHOUT_CLASSIFICATION	5.932191291314386E-4	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9899676842302021	WITHOUT_CLASSIFICATION	0.010032315769797993	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9994537973314629	WITHOUT_CLASSIFICATION	5.462026685370957E-4	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999946476989482	WITHOUT_CLASSIFICATION	5.3523010518164975E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999429421382802	WITHOUT_CLASSIFICATION	5.705786171988775E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996423166849294	WITHOUT_CLASSIFICATION	3.5768331507054807E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996423166849294	WITHOUT_CLASSIFICATION	3.5768331507054807E-4	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999972790758463	WITHOUT_CLASSIFICATION	2.7209241537042163E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999972279194058	WITHOUT_CLASSIFICATION	2.7720805942286356E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999873257063965	WITHOUT_CLASSIFICATION	1.2674293603449942E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999916878699767	WITHOUT_CLASSIFICATION	8.312130023312117E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998608973379096	WITHOUT_CLASSIFICATION	1.3910266209042879E-4	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999989383672983	WITHOUT_CLASSIFICATION	1.0616327017127927E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999833798649358	WITHOUT_CLASSIFICATION	1.6620135064212654E-4	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999992156829037	WITHOUT_CLASSIFICATION	7.843170963059559E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999935194432544	WITHOUT_CLASSIFICATION	6.480556745528812E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999760238444765	WITHOUT_CLASSIFICATION	2.397615552350731E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999877102504119	WITHOUT_CLASSIFICATION	1.228974958805672E-5	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999903394398937	WITHOUT_CLASSIFICATION	9.660560106340127E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999790831531806	WITHOUT_CLASSIFICATION	2.0916846819303723E-5	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999710497873544	WITHOUT_CLASSIFICATION	2.8950212645533078E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721243902524	WITHOUT_CLASSIFICATION	2.7875609747555056E-5	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9996694457133268	WITHOUT_CLASSIFICATION	3.3055428667321874E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998815306865891	WITHOUT_CLASSIFICATION	1.184693134108446E-4	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998249869769236	WITHOUT_CLASSIFICATION	1.750130230763711E-4	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997528151440038	WITHOUT_CLASSIFICATION	2.471848559961523E-4	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998920706349803	WITHOUT_CLASSIFICATION	1.0792936501972826E-4	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997587747462362	WITHOUT_CLASSIFICATION	2.4122525376380893E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998815306865891	WITHOUT_CLASSIFICATION	1.184693134108446E-4	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993258654718674	WITHOUT_CLASSIFICATION	6.741345281326782E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999512583554693	WITHOUT_CLASSIFICATION	4.874164453069198E-4	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9967743352563587	WITHOUT_CLASSIFICATION	0.003225664743641331	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999941201981685	WITHOUT_CLASSIFICATION	5.8798018315016186E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999374536670186	WITHOUT_CLASSIFICATION	6.254633298144459E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999925520772726	WITHOUT_CLASSIFICATION	7.447922727389182E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999797257551103	WITHOUT_CLASSIFICATION	2.0274244889649276E-5	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999988995998713	WITHOUT_CLASSIFICATION	1.1004001286862086E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999795880178054	WITHOUT_CLASSIFICATION	2.0411982194544164E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999440730391211	WITHOUT_CLASSIFICATION	5.592696087890318E-5	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999766229803676	WITHOUT_CLASSIFICATION	2.3377019632329413E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999732896446316	WITHOUT_CLASSIFICATION	2.671035536842587E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999973764112875	WITHOUT_CLASSIFICATION	2.6235887125557806E-6	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933746975618	WITHOUT_CLASSIFICATION	6.6253024381857514E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996827695337154	WITHOUT_CLASSIFICATION	3.172304662846025E-4	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999961314121814	WITHOUT_CLASSIFICATION	3.8685878185605674E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999458893931157	WITHOUT_CLASSIFICATION	5.411060688437907E-5	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919759057112	WITHOUT_CLASSIFICATION	8.024094288836189E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999698777902604	WITHOUT_CLASSIFICATION	3.01222097396329E-5	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999832680298489	WITHOUT_CLASSIFICATION	1.673197015108727E-4	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999975477455632	WITHOUT_CLASSIFICATION	2.4522544368929274E-6	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871430511268	WITHOUT_CLASSIFICATION	1.2856948873232507E-5	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870557505528	WITHOUT_CLASSIFICATION	1.2944249447204163E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802035676371	WITHOUT_CLASSIFICATION	1.979643236299591E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725443078996	WITHOUT_CLASSIFICATION	2.745569210039992E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999737126864635	WITHOUT_CLASSIFICATION	2.6287313536439166E-5	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999712058394726	WITHOUT_CLASSIFICATION	2.879416052731241E-5	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804022528066	WITHOUT_CLASSIFICATION	1.9597747193413857E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828648654474	WITHOUT_CLASSIFICATION	1.7135134552607088E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796227524126	WITHOUT_CLASSIFICATION	2.037724758741054E-5	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887893000132	WITHOUT_CLASSIFICATION	1.1210699986854043E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794428256726	WITHOUT_CLASSIFICATION	2.055717432741739E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794743120882	WITHOUT_CLASSIFICATION	2.0525687911800566E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999848076145366	WITHOUT_CLASSIFICATION	1.5192385463317079E-5	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721363528796	WITHOUT_CLASSIFICATION	2.786364712036869E-5	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999986658059716	WITHOUT_CLASSIFICATION	1.3341940284042017E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960202749224	WITHOUT_CLASSIFICATION	3.97972507761105E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999996151574154	WITHOUT_CLASSIFICATION	3.8484258461849726E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9989540506366261	WITHOUT_CLASSIFICATION	0.0010459493633738425	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998700983047581	WITHOUT_CLASSIFICATION	1.2990169524174718E-4	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9994537973314629	WITHOUT_CLASSIFICATION	5.462026685370957E-4	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999816792744108	WITHOUT_CLASSIFICATION	1.8320725589122444E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999819865952184	WITHOUT_CLASSIFICATION	1.8013404781604464E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999945867099121	WITHOUT_CLASSIFICATION	5.4132900878467895E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.99999769245821	WITHOUT_CLASSIFICATION	2.3075417899951182E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999847258808413	WITHOUT_CLASSIFICATION	1.5274119158613308E-5	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999979145353756	WITHOUT_CLASSIFICATION	2.0854646244034544E-5	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999890962595666	WITHOUT_CLASSIFICATION	1.0903740433410984E-5	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745818653755	WITHOUT_CLASSIFICATION	2.5418134624501572E-5	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767060100655	WITHOUT_CLASSIFICATION	2.3293989934512322E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944740932442	WITHOUT_CLASSIFICATION	5.525906755862126E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974600621345	WITHOUT_CLASSIFICATION	2.5399378655035792E-5	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998580617369424	WITHOUT_CLASSIFICATION	1.4193826305761303E-4	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999569466976684	WITHOUT_CLASSIFICATION	4.3053302331570866E-5	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999880962907652	WITHOUT_CLASSIFICATION	1.1903709234691997E-5	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999893222511862	WITHOUT_CLASSIFICATION	1.0677748813751121E-5	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827176949927	WITHOUT_CLASSIFICATION	1.7282305007217913E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999795576874979	WITHOUT_CLASSIFICATION	2.0442312502040296E-5	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999841436508408	WITHOUT_CLASSIFICATION	1.585634915931563E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999826176531935	WITHOUT_CLASSIFICATION	1.7382346806543065E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999952100210189	WITHOUT_CLASSIFICATION	4.789978981094178E-6	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999417718846216	WITHOUT_CLASSIFICATION	5.822811537829042E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999788078093546	WITHOUT_CLASSIFICATION	2.1192190645477618E-5	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999739907370296	WITHOUT_CLASSIFICATION	2.600926297034323E-5	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999852013702072	WITHOUT_CLASSIFICATION	1.479862979278267E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9989540506366261	WITHOUT_CLASSIFICATION	0.0010459493633738425	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999970038733068	WITHOUT_CLASSIFICATION	2.9961266932440587E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999947781671017	WITHOUT_CLASSIFICATION	5.221832898345652E-6	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999885375212564	WITHOUT_CLASSIFICATION	1.146247874361126E-5	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960202749224	WITHOUT_CLASSIFICATION	3.97972507761105E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999891328058635	WITHOUT_CLASSIFICATION	1.0867194136477728E-5	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9991510735421951	WITHOUT_CLASSIFICATION	8.489264578048551E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999688926776937	WITHOUT_CLASSIFICATION	3.11073223063553E-5	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999779951161235	WITHOUT_CLASSIFICATION	2.2004883876429487E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999481831938267	WITHOUT_CLASSIFICATION	5.1816806173352995E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999721721095782	WITHOUT_CLASSIFICATION	2.7827890421752342E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999740514180064	WITHOUT_CLASSIFICATION	2.594858199351565E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999976233285199	WITHOUT_CLASSIFICATION	2.376671480098768E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999843276320542	WITHOUT_CLASSIFICATION	1.5672367945815104E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997402518122037	WITHOUT_CLASSIFICATION	2.597481877962772E-4	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999977473629194	WITHOUT_CLASSIFICATION	2.252637080605138E-5	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9994537973314629	WITHOUT_CLASSIFICATION	5.462026685370957E-4	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960202749224	WITHOUT_CLASSIFICATION	3.97972507761105E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999822970317722	WITHOUT_CLASSIFICATION	1.7702968227691996E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998888016097455	WITHOUT_CLASSIFICATION	1.1119839025457073E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999955182372275	WITHOUT_CLASSIFICATION	4.481762772413113E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.999862622699999	WITHOUT_CLASSIFICATION	1.37377300000979E-4	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999557831012834	WITHOUT_CLASSIFICATION	4.421689871655944E-5	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999993121592151	WITHOUT_CLASSIFICATION	6.878407848900879E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999964146116802	WITHOUT_CLASSIFICATION	3.585388319687353E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999614956235956	WITHOUT_CLASSIFICATION	3.850437640442008E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9996197819381862	WITHOUT_CLASSIFICATION	3.802180618138553E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999416929499758	WITHOUT_CLASSIFICATION	5.830705002416313E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998035158154177	WITHOUT_CLASSIFICATION	1.9648418458228497E-4	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960202749224	WITHOUT_CLASSIFICATION	3.97972507761105E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9989540506366261	WITHOUT_CLASSIFICATION	0.0010459493633738425	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999542587148099	WITHOUT_CLASSIFICATION	4.57412851899936E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999971644042926	WITHOUT_CLASSIFICATION	2.835595707411801E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9985518498189069	WITHOUT_CLASSIFICATION	0.0014481501810930813	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9989540506366261	WITHOUT_CLASSIFICATION	0.0010459493633738425	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999574648283497	WITHOUT_CLASSIFICATION	4.2535171650426734E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999955182372275	WITHOUT_CLASSIFICATION	4.481762772413113E-6	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997062572774409	WITHOUT_CLASSIFICATION	2.937427225590664E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.994865912855059	WITHOUT_CLASSIFICATION	0.00513408714494099	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999738144105215	WITHOUT_CLASSIFICATION	2.618558947846446E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999481831938267	WITHOUT_CLASSIFICATION	5.1816806173352995E-5	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999721721095782	WITHOUT_CLASSIFICATION	2.7827890421752342E-5	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999740514180064	WITHOUT_CLASSIFICATION	2.594858199351565E-5	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999902986372724	WITHOUT_CLASSIFICATION	9.701362727598599E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999803039865843	WITHOUT_CLASSIFICATION	1.969601341565585E-5	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999501530615762	WITHOUT_CLASSIFICATION	4.98469384238022E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999891733911795	WITHOUT_CLASSIFICATION	1.0826608820424606E-5	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999617391018515	WITHOUT_CLASSIFICATION	3.8260898148496164E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9989540506366261	WITHOUT_CLASSIFICATION	0.0010459493633738425	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999976233285199	WITHOUT_CLASSIFICATION	2.376671480098768E-5	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999843276320542	WITHOUT_CLASSIFICATION	1.5672367945815104E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959673078562	WITHOUT_CLASSIFICATION	4.032692143849749E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996218186008	WITHOUT_CLASSIFICATION	3.7818139920042477E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999787423249801	WITHOUT_CLASSIFICATION	2.1257675019974548E-5	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999833204685311	WITHOUT_CLASSIFICATION	1.6679531468890816E-5	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999792815799288	WITHOUT_CLASSIFICATION	2.0718420071293895E-5	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.99991037038233	WITHOUT_CLASSIFICATION	8.962961767010246E-5	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998877252861078	WITHOUT_CLASSIFICATION	1.122747138922071E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999464420078709	WITHOUT_CLASSIFICATION	5.3557992129116155E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999975570449019	WITHOUT_CLASSIFICATION	2.4429550981110972E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999816622991494	WITHOUT_CLASSIFICATION	1.83377008506647E-5	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828648654474	WITHOUT_CLASSIFICATION	1.7135134552607088E-5	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999816622991494	WITHOUT_CLASSIFICATION	1.83377008506647E-5	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999866147149195	WITHOUT_CLASSIFICATION	1.3385285080587088E-5	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999746902265151	WITHOUT_CLASSIFICATION	2.5309773485001253E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799091755458	WITHOUT_CLASSIFICATION	2.0090824454239483E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999909642671297	WITHOUT_CLASSIFICATION	9.035732870222852E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999373105433739	WITHOUT_CLASSIFICATION	6.268945662610129E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796227524126	WITHOUT_CLASSIFICATION	2.037724758741054E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794425055256	WITHOUT_CLASSIFICATION	2.055749447435008E-5	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999952100210189	WITHOUT_CLASSIFICATION	4.789978981094178E-6	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999816296677039	WITHOUT_CLASSIFICATION	1.837033229605674E-5	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999990895360175	WITHOUT_CLASSIFICATION	9.1046398249029E-6	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999916266819726	WITHOUT_CLASSIFICATION	8.373318027380819E-6	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9996044667832586	WITHOUT_CLASSIFICATION	3.9553321674135544E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999975972849042	WITHOUT_CLASSIFICATION	2.402715095872719E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9993464272413495	WITHOUT_CLASSIFICATION	6.535727586505195E-4	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999218834656171	WITHOUT_CLASSIFICATION	7.811653438300822E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999988995998713	WITHOUT_CLASSIFICATION	1.1004001286862086E-6	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999838252915171	WITHOUT_CLASSIFICATION	1.6174708482892343E-5	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999808046653408	WITHOUT_CLASSIFICATION	1.9195334659286345E-5	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999894294251878	WITHOUT_CLASSIFICATION	1.0570574812265852E-5	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999828462076334	WITHOUT_CLASSIFICATION	1.7153792366640315E-5	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999963603055385	WITHOUT_CLASSIFICATION	3.639694461567103E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999736702992567	WITHOUT_CLASSIFICATION	2.6329700743422793E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879667402837	WITHOUT_CLASSIFICATION	1.2033259716361008E-5	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880922929711	WITHOUT_CLASSIFICATION	1.1907707028895943E-5	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999652687861597	WITHOUT_CLASSIFICATION	3.473121384025449E-5	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999769104199642	WITHOUT_CLASSIFICATION	2.308958003583264E-5	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999666647237287	WITHOUT_CLASSIFICATION	3.333527627123841E-5	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999662551044763	WITHOUT_CLASSIFICATION	3.3744895523662286E-5	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859036004098	WITHOUT_CLASSIFICATION	1.4096399590172993E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891628460296	WITHOUT_CLASSIFICATION	1.0837153970422998E-5	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999754857509583	WITHOUT_CLASSIFICATION	2.45142490416338E-5	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999706128039962	WITHOUT_CLASSIFICATION	2.9387196003739726E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859036004098	WITHOUT_CLASSIFICATION	1.4096399590172993E-5	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999517680213758	WITHOUT_CLASSIFICATION	4.823197862427005E-5	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999631258337013	WITHOUT_CLASSIFICATION	3.6874166298705295E-5	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790336235709	WITHOUT_CLASSIFICATION	2.096637642910869E-5	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999948765008083	WITHOUT_CLASSIFICATION	5.12349919169516E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993716014711	WITHOUT_CLASSIFICATION	6.2839852900072E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999844219593479	WITHOUT_CLASSIFICATION	1.5578040652067476E-5	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999964510143154	WITHOUT_CLASSIFICATION	3.5489856845688995E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997990266031814	WITHOUT_CLASSIFICATION	2.0097339681861517E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997990266031814	WITHOUT_CLASSIFICATION	2.0097339681861517E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999978944866588	WITHOUT_CLASSIFICATION	2.1055133412577665E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999975514301412	WITHOUT_CLASSIFICATION	2.4485698587264246E-6	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999744342223397	WITHOUT_CLASSIFICATION	2.5565777660238637E-5	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999961280600249	WITHOUT_CLASSIFICATION	3.871939975175706E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999995251355657	WITHOUT_CLASSIFICATION	4.748644343460646E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999700692404363	WITHOUT_CLASSIFICATION	2.993075956361902E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999548439954818	WITHOUT_CLASSIFICATION	4.515600451816436E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999851292611647	WITHOUT_CLASSIFICATION	1.4870738835336295E-5	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999243961736918	WITHOUT_CLASSIFICATION	7.560382630828541E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999985196683433	WITHOUT_CLASSIFICATION	1.4803316566932534E-6	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999615406017381	WITHOUT_CLASSIFICATION	3.84593982617828E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999587565351086	WITHOUT_CLASSIFICATION	4.124346489138862E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998977812138417	WITHOUT_CLASSIFICATION	1.0221878615828447E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.99998512032498	WITHOUT_CLASSIFICATION	1.4879675020053443E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999477952209859	WITHOUT_CLASSIFICATION	5.220477901411986E-5	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996107277736711	WITHOUT_CLASSIFICATION	3.892722263289397E-4	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999931180472692	WITHOUT_CLASSIFICATION	6.881952730746476E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999534772051587	WITHOUT_CLASSIFICATION	4.6522794841297144E-4	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999835327171814	WITHOUT_CLASSIFICATION	1.6467282818549135E-5	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999413426145561	WITHOUT_CLASSIFICATION	5.865738544374538E-5	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999907588049034	WITHOUT_CLASSIFICATION	9.241195096575393E-6	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999379296625078	WITHOUT_CLASSIFICATION	6.20703374922699E-5	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999905506051323	WITHOUT_CLASSIFICATION	9.44939486771287E-6	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999927381882432	WITHOUT_CLASSIFICATION	7.261811756807747E-6	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999732167203369	WITHOUT_CLASSIFICATION	2.6783279663136176E-5	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999908401513026	WITHOUT_CLASSIFICATION	9.159848697519245E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999976990693474	WITHOUT_CLASSIFICATION	2.300930652597339E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999978589956657	WITHOUT_CLASSIFICATION	2.141004334224454E-6	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996722975551098	WITHOUT_CLASSIFICATION	3.2770244489028447E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999994573509052	WITHOUT_CLASSIFICATION	5.426490948041629E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999763201687021	WITHOUT_CLASSIFICATION	2.3679831297850128E-5	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.99996992194245	WITHOUT_CLASSIFICATION	3.007805754999821E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998965766759111	WITHOUT_CLASSIFICATION	1.0342332408887369E-4	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999081246248186	WITHOUT_CLASSIFICATION	9.187537518134333E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997193065368402	WITHOUT_CLASSIFICATION	2.8069346315984174E-4	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999946917421546	WITHOUT_CLASSIFICATION	5.308257845450408E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997451895020901	WITHOUT_CLASSIFICATION	2.5481049790985257E-4	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997123313181215	WITHOUT_CLASSIFICATION	2.876686818784968E-4	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999838277941964	WITHOUT_CLASSIFICATION	1.6172205803651346E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998557000054117	WITHOUT_CLASSIFICATION	1.4429999458828935E-4	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999005438440576	WITHOUT_CLASSIFICATION	9.945615594241266E-5	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9994537973314629	WITHOUT_CLASSIFICATION	5.462026685370957E-4	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9994537973314629	WITHOUT_CLASSIFICATION	5.462026685370957E-4	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999974965555275	WITHOUT_CLASSIFICATION	2.5034444725055665E-5	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999853421709632	WITHOUT_CLASSIFICATION	1.4657829036754531E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9994587965559931	WITHOUT_CLASSIFICATION	5.412034440069116E-4	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999956176106956	WITHOUT_CLASSIFICATION	4.38238930445144E-6	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999993405192149	WITHOUT_CLASSIFICATION	6.5948078510926296E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9993537378353804	WITHOUT_CLASSIFICATION	6.462621646196899E-4	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997081125813593	WITHOUT_CLASSIFICATION	2.9188741864071796E-4	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9995949491973338	WITHOUT_CLASSIFICATION	4.050508026662315E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999560163233945	WITHOUT_CLASSIFICATION	4.3983676605516144E-5	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998998979188325	WITHOUT_CLASSIFICATION	1.001020811674906E-4	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999290468463951	WITHOUT_CLASSIFICATION	7.09531536048927E-4	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999166042021199	WITHOUT_CLASSIFICATION	8.339579788009508E-5	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996889950959819	WITHOUT_CLASSIFICATION	3.110049040182199E-4	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999631373128268	WITHOUT_CLASSIFICATION	3.68626871731901E-4	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999695899771621	WITHOUT_CLASSIFICATION	3.0410022837852772E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.99999887889816	WITHOUT_CLASSIFICATION	1.1211018400612448E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999105819694	WITHOUT_CLASSIFICATION	8.941803055043698E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999989836125848	WITHOUT_CLASSIFICATION	1.0163874153026098E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999489251022542	WITHOUT_CLASSIFICATION	5.107489774580832E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999217102393837	WITHOUT_CLASSIFICATION	7.828976061626298E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999989836125848	WITHOUT_CLASSIFICATION	1.0163874153026098E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999784954608336	WITHOUT_CLASSIFICATION	2.1504539166394104E-5	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999882079505753	WITHOUT_CLASSIFICATION	1.1792049424608063E-5	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998928048756308	WITHOUT_CLASSIFICATION	1.0719512436917993E-4	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999015680046246	WITHOUT_CLASSIFICATION	9.843199537538098E-5	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999946299496352	WITHOUT_CLASSIFICATION	5.3700503649228276E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999910578643117	WITHOUT_CLASSIFICATION	8.942135688315035E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996793571618552	WITHOUT_CLASSIFICATION	3.206428381447508E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999782008600429	WITHOUT_CLASSIFICATION	2.179913995710584E-5	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999976403868465	WITHOUT_CLASSIFICATION	2.3596131534785673E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999723090307391	WITHOUT_CLASSIFICATION	2.769096926096693E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999948793807037	WITHOUT_CLASSIFICATION	5.120619296244175E-6	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998866265264257	WITHOUT_CLASSIFICATION	1.1337347357428976E-4	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999954766395905	WITHOUT_CLASSIFICATION	4.523360409442442E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999942937136791	WITHOUT_CLASSIFICATION	5.7062863209166415E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999839986260424	WITHOUT_CLASSIFICATION	1.6001373957644532E-5	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9990577312774667	WITHOUT_CLASSIFICATION	9.42268722533274E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999925935811638	WITHOUT_CLASSIFICATION	7.406418836245505E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999571079671777	WITHOUT_CLASSIFICATION	4.2892032822216836E-5	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9980431146281047	WITHOUT_CLASSIFICATION	0.0019568853718952717	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9997895325043434	WITHOUT_CLASSIFICATION	2.1046749565653506E-4	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999647667678	WITHOUT_CLASSIFICATION	3.5233232204211076E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999886762038227	WITHOUT_CLASSIFICATION	1.1323796177289497E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999152518206924	WITHOUT_CLASSIFICATION	8.474817930758666E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999967999955801	WITHOUT_CLASSIFICATION	3.2000044199137613E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999995599172465	WITHOUT_CLASSIFICATION	4.400827535239705E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998264888946671	WITHOUT_CLASSIFICATION	1.7351110533280373E-4	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997834015520521	WITHOUT_CLASSIFICATION	2.1659844794775748E-4	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999912729665524	WITHOUT_CLASSIFICATION	8.727033447638462E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999736702992567	WITHOUT_CLASSIFICATION	2.6329700743422793E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994122209580935	WITHOUT_CLASSIFICATION	5.877790419065351E-4	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999640093680301	WITHOUT_CLASSIFICATION	3.599063196992804E-5	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999708409519318	WITHOUT_CLASSIFICATION	2.915904806819749E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9972089812833829	WITHOUT_CLASSIFICATION	0.002791018716617108	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999328381002194	WITHOUT_CLASSIFICATION	6.716189978064668E-5	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9998925430242914	WITHOUT_CLASSIFICATION	1.0745697570862343E-4	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999966310467668	WITHOUT_CLASSIFICATION	3.368953233199987E-5	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999937779470132	WITHOUT_CLASSIFICATION	6.222052986838311E-6	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999959691710051	WITHOUT_CLASSIFICATION	4.030828994916275E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999959698260534	WITHOUT_CLASSIFICATION	4.030173946530172E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999886286438671	WITHOUT_CLASSIFICATION	1.1371356132819063E-5	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999934927030427	WITHOUT_CLASSIFICATION	6.507296957355811E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9910207392107946	WITHOUT_CLASSIFICATION	0.008979260789205403	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999606475539193	WITHOUT_CLASSIFICATION	3.935244608071981E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999209458428678	WITHOUT_CLASSIFICATION	7.905415713206674E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999181489559391	WITHOUT_CLASSIFICATION	8.185104406085802E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999338718505894	WITHOUT_CLASSIFICATION	6.612814941065842E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999796384244045	WITHOUT_CLASSIFICATION	2.0361575595483284E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999378559904412	WITHOUT_CLASSIFICATION	6.214400955892744E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999632785459706	WITHOUT_CLASSIFICATION	3.672145402946759E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999795549217604	WITHOUT_CLASSIFICATION	2.0445078239615692E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999973154838477	WITHOUT_CLASSIFICATION	2.684516152187656E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999817255770711	WITHOUT_CLASSIFICATION	1.8274422928865237E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999337770387987	WITHOUT_CLASSIFICATION	6.622296120137253E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999971764016958	WITHOUT_CLASSIFICATION	2.8235983040634603E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999994585131133	WITHOUT_CLASSIFICATION	5.414868866997689E-6	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999995421225213	WITHOUT_CLASSIFICATION	4.57877478672342E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999491606025953	WITHOUT_CLASSIFICATION	5.083939740469389E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9998229812474296	WITHOUT_CLASSIFICATION	1.7701875257039945E-4	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747279670382	WITHOUT_CLASSIFICATION	2.527203296168649E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661648815356	WITHOUT_CLASSIFICATION	3.383511846443387E-5	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683574276071	WITHOUT_CLASSIFICATION	3.1642572392865886E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999968333439047	WITHOUT_CLASSIFICATION	3.1666560953399035E-6	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999909936819776	WITHOUT_CLASSIFICATION	9.00631802236761E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995028563256	WITHOUT_CLASSIFICATION	4.971436743988698E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999996475836257	WITHOUT_CLASSIFICATION	3.5241637423644856E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999948530686966	WITHOUT_CLASSIFICATION	5.146931303430471E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745923899126	WITHOUT_CLASSIFICATION	2.5407610087380638E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999948530686966	WITHOUT_CLASSIFICATION	5.146931303430471E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999309263451873	WITHOUT_CLASSIFICATION	6.907365481267711E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999953600053615	WITHOUT_CLASSIFICATION	4.639994638474287E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999959859511025	WITHOUT_CLASSIFICATION	4.014048897481954E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999280975285748	WITHOUT_CLASSIFICATION	7.190247142518923E-5	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999476422134953	WITHOUT_CLASSIFICATION	5.2357786504595515E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.992437121555078	WITHOUT_CLASSIFICATION	0.007562878444922033	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999997705002956	WITHOUT_CLASSIFICATION	2.294997043926131E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999944065708414	WITHOUT_CLASSIFICATION	5.593429158629439E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999975391578023	WITHOUT_CLASSIFICATION	2.460842197722095E-6	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998143065245597	WITHOUT_CLASSIFICATION	1.8569347544014866E-4	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999907325265749	WITHOUT_CLASSIFICATION	9.267473425079766E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999904878090928	WITHOUT_CLASSIFICATION	9.512190907102204E-6	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990013367286811	WITHOUT_CLASSIFICATION	9.986632713189173E-4	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9989612187339189	WITHOUT_CLASSIFICATION	0.001038781266081088	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999743621098861	WITHOUT_CLASSIFICATION	2.5637890113852836E-5	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999975256257388	WITHOUT_CLASSIFICATION	2.474374261251972E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999332448540595	WITHOUT_CLASSIFICATION	6.675514594048355E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999332448540595	WITHOUT_CLASSIFICATION	6.675514594048355E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998975092336799	WITHOUT_CLASSIFICATION	1.024907663200007E-4	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999869141471744	WITHOUT_CLASSIFICATION	1.3085852825498402E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999790861219152	WITHOUT_CLASSIFICATION	2.0913878084742837E-5	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999762991478894	WITHOUT_CLASSIFICATION	2.3700852110597333E-5	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999851405302612	WITHOUT_CLASSIFICATION	1.48594697387394E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999862085011479	WITHOUT_CLASSIFICATION	1.379149885213136E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999071489584072	WITHOUT_CLASSIFICATION	9.285104159279375E-4	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998876406096734	WITHOUT_CLASSIFICATION	1.1235939032658622E-4	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999957274673731	WITHOUT_CLASSIFICATION	4.272532626912404E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999726263992386	WITHOUT_CLASSIFICATION	2.7373600761366717E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999403470254437	WITHOUT_CLASSIFICATION	5.965297455632158E-5	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999880092260744	WITHOUT_CLASSIFICATION	1.1990773925516049E-5	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999911370023757	WITHOUT_CLASSIFICATION	8.862997624204459E-6	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999565626156812	WITHOUT_CLASSIFICATION	4.343738431879496E-5	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999895546902593	WITHOUT_CLASSIFICATION	1.0445309740682448E-5	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999985216247234	WITHOUT_CLASSIFICATION	1.4783752765969657E-5	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999717114988838	WITHOUT_CLASSIFICATION	2.8288501116272156E-5	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997164252963111	WITHOUT_CLASSIFICATION	2.8357470368887977E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999532500994187	WITHOUT_CLASSIFICATION	4.6749900581289544E-5	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999918507104125	WITHOUT_CLASSIFICATION	8.149289587506774E-6	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999627765922396	WITHOUT_CLASSIFICATION	3.722340776033594E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999995640611992	WITHOUT_CLASSIFICATION	4.359388008017377E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999876052973284	WITHOUT_CLASSIFICATION	1.2394702671483957E-5	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999895025005763	WITHOUT_CLASSIFICATION	1.0497499423656534E-5	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.999815699305232	WITHOUT_CLASSIFICATION	1.8430069476798932E-4	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999954175259173	WITHOUT_CLASSIFICATION	4.582474082723206E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9986438478150452	WITHOUT_CLASSIFICATION	0.0013561521849547308	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999559252547374	WITHOUT_CLASSIFICATION	4.407474526260493E-4	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999373131054985	WITHOUT_CLASSIFICATION	6.268689450146571E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999578766574215	WITHOUT_CLASSIFICATION	4.21233425785064E-5	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9993929544780117	WITHOUT_CLASSIFICATION	6.070455219883218E-4	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999568495315013	WITHOUT_CLASSIFICATION	4.3150468498697416E-5	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9910581577215812	WITHOUT_CLASSIFICATION	0.008941842278418802	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999036760060133	WITHOUT_CLASSIFICATION	9.632399398675915E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997976606556145	WITHOUT_CLASSIFICATION	2.0233934438556138E-4	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999888895965316	WITHOUT_CLASSIFICATION	1.1110403468320266E-5	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999698026077075	WITHOUT_CLASSIFICATION	3.0197392292506912E-5	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999579599104254	WITHOUT_CLASSIFICATION	4.204008957458274E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999921556086544	WITHOUT_CLASSIFICATION	7.844391345629408E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996662221618952	WITHOUT_CLASSIFICATION	3.3377783810477915E-4	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999582828964115	WITHOUT_CLASSIFICATION	4.171710358838251E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725106778787	WITHOUT_CLASSIFICATION	2.7489322121259846E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999372413093789	WITHOUT_CLASSIFICATION	6.275869062114332E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998792864349212	WITHOUT_CLASSIFICATION	1.2071356507883359E-4	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999900054608514	WITHOUT_CLASSIFICATION	9.994539148594858E-6	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999983779492571	WITHOUT_CLASSIFICATION	1.622050742952231E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999826425315534	WITHOUT_CLASSIFICATION	1.7357468446487906E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999974803401506	WITHOUT_CLASSIFICATION	2.5196598493968778E-5	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999854824026384	WITHOUT_CLASSIFICATION	1.4517597361686136E-5	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999803515597377	WITHOUT_CLASSIFICATION	1.9648440262278324E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725106778787	WITHOUT_CLASSIFICATION	2.7489322121259846E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997928322513431	WITHOUT_CLASSIFICATION	2.07167748657038E-4	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998085595606965	WITHOUT_CLASSIFICATION	1.9144043930341306E-4	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999689243371067	WITHOUT_CLASSIFICATION	3.1075662893310064E-5	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999706914933485	WITHOUT_CLASSIFICATION	2.9308506651464226E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999574648283497	WITHOUT_CLASSIFICATION	4.2535171650426734E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999574648283497	WITHOUT_CLASSIFICATION	4.2535171650426734E-5	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.998004160873476	WITHOUT_CLASSIFICATION	0.0019958391265241064	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999959434614302	WITHOUT_CLASSIFICATION	4.056538569808385E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998998616875374	WITHOUT_CLASSIFICATION	1.0013831246251219E-4	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999668410272665	WITHOUT_CLASSIFICATION	3.3158972733546134E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999824068197795	WITHOUT_CLASSIFICATION	1.7593180220571823E-5	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999974971626916	WITHOUT_CLASSIFICATION	2.5028373084005083E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9994507919030684	WITHOUT_CLASSIFICATION	5.492080969317115E-4	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999348522869924	WITHOUT_CLASSIFICATION	6.51477130075385E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997758422339723	WITHOUT_CLASSIFICATION	2.2415776602761995E-4	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999441574655304	WITHOUT_CLASSIFICATION	5.5842534469544026E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999871278308171	WITHOUT_CLASSIFICATION	1.2872169182904754E-4	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997974324420577	WITHOUT_CLASSIFICATION	2.025675579424057E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999981766221366	WITHOUT_CLASSIFICATION	1.8233778633645266E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998956820697706	WITHOUT_CLASSIFICATION	1.0431793022932956E-4	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991543796970833	WITHOUT_CLASSIFICATION	8.456203029166236E-4	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997020974087	WITHOUT_CLASSIFICATION	2.9790259127030247E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998634627073972	WITHOUT_CLASSIFICATION	1.3653729260271004E-4	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997940894932007	WITHOUT_CLASSIFICATION	2.059105067994029E-4	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999989687360689	WITHOUT_CLASSIFICATION	1.0312639311106137E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999732523456582	WITHOUT_CLASSIFICATION	2.674765434180244E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999944427106059	WITHOUT_CLASSIFICATION	5.557289394095205E-6	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999979265052975	WITHOUT_CLASSIFICATION	2.073494702607952E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999986784146568	WITHOUT_CLASSIFICATION	1.3215853431986494E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9991352336855082	WITHOUT_CLASSIFICATION	8.647663144919353E-4	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999790845107033	WITHOUT_CLASSIFICATION	2.0915489296759894E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999612765439567	WITHOUT_CLASSIFICATION	3.87234560431826E-5	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999930550606867	WITHOUT_CLASSIFICATION	6.944939313367125E-6	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999826146389458	WITHOUT_CLASSIFICATION	1.7385361054184255E-5	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9996648414162702	WITHOUT_CLASSIFICATION	3.351585837298424E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999979225044109	WITHOUT_CLASSIFICATION	2.0774955891067856E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999826146389458	WITHOUT_CLASSIFICATION	1.7385361054184255E-5	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999992643973178	WITHOUT_CLASSIFICATION	7.3560268220091755E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9994137692649518	WITHOUT_CLASSIFICATION	5.862307350480777E-4	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.99997831788122	WITHOUT_CLASSIFICATION	2.1682118779996818E-5	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9995804050646371	WITHOUT_CLASSIFICATION	4.19594935362998E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996836748178225	WITHOUT_CLASSIFICATION	3.1632518217745585E-4	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999403470254437	WITHOUT_CLASSIFICATION	5.965297455632158E-5	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9995765592936048	WITHOUT_CLASSIFICATION	4.2344070639523134E-4	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993464272413495	WITHOUT_CLASSIFICATION	6.535727586505195E-4	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999965376483393	WITHOUT_CLASSIFICATION	3.4623516606930225E-5	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999859248702658	WITHOUT_CLASSIFICATION	1.4075129734156103E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.99951491971625	WITHOUT_CLASSIFICATION	4.850802837500843E-4	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.999972728632621	WITHOUT_CLASSIFICATION	2.727136737897516E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9994596518378318	WITHOUT_CLASSIFICATION	5.403481621681774E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999738987989827	WITHOUT_CLASSIFICATION	2.6101201017258882E-5	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999607739325016	WITHOUT_CLASSIFICATION	3.92260674983555E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999987519339415	WITHOUT_CLASSIFICATION	1.2480660585043884E-5	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999952716752959	WITHOUT_CLASSIFICATION	4.7283247041023715E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999948085260424	WITHOUT_CLASSIFICATION	5.191473957673461E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999973595741551	WITHOUT_CLASSIFICATION	2.640425844838676E-6	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999719628604444	WITHOUT_CLASSIFICATION	2.803713955558878E-5	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999976486805802	WITHOUT_CLASSIFICATION	2.3513194198022233E-5	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999977991029764	WITHOUT_CLASSIFICATION	2.200897023601832E-5	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999950912564777	WITHOUT_CLASSIFICATION	4.908743522348305E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996783885903981	WITHOUT_CLASSIFICATION	3.216114096017482E-4	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999960718301986	WITHOUT_CLASSIFICATION	3.9281698013491105E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999682276534736	WITHOUT_CLASSIFICATION	3.1772346526409484E-4	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999015866666935	WITHOUT_CLASSIFICATION	9.841333330653558E-5	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999729569651508	WITHOUT_CLASSIFICATION	2.7043034849189566E-4	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999952987816044	WITHOUT_CLASSIFICATION	4.701218395503377E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999875852588266	WITHOUT_CLASSIFICATION	1.2414741173364206E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759419463655	WITHOUT_CLASSIFICATION	2.4058053634478998E-5	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977909336991	WITHOUT_CLASSIFICATION	2.2090663009052052E-5	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999834175554954	WITHOUT_CLASSIFICATION	1.6582444504649876E-5	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999935566004591	WITHOUT_CLASSIFICATION	6.443399540938469E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999944772341779	WITHOUT_CLASSIFICATION	5.522765822057967E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999715934687	WITHOUT_CLASSIFICATION	2.840653130591023E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999958537782684	WITHOUT_CLASSIFICATION	4.146221731691272E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999938173389862	WITHOUT_CLASSIFICATION	6.182661013912595E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999837938108999	WITHOUT_CLASSIFICATION	1.6206189100156873E-5	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999972219355171	WITHOUT_CLASSIFICATION	2.7780644829282162E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999775875648258	WITHOUT_CLASSIFICATION	2.2412435174164683E-5	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999937429956623	WITHOUT_CLASSIFICATION	6.257004337668303E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999439627332511	WITHOUT_CLASSIFICATION	5.6037266749010784E-5	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999731724956531	WITHOUT_CLASSIFICATION	2.682750434691571E-5	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999975612090386	WITHOUT_CLASSIFICATION	2.438790961288246E-6	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999926601808969	WITHOUT_CLASSIFICATION	7.3398191030554256E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999714360185217	WITHOUT_CLASSIFICATION	2.856398147825119E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998581645799516	WITHOUT_CLASSIFICATION	1.4183542004844808E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999942966616822	WITHOUT_CLASSIFICATION	5.7033383177868844E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999869025669708	WITHOUT_CLASSIFICATION	1.3097433029221139E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999961826515416	WITHOUT_CLASSIFICATION	3.817348458427236E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999266229712598	WITHOUT_CLASSIFICATION	7.337702874020892E-5	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999238337581802	WITHOUT_CLASSIFICATION	7.616624181988867E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999828662007901	WITHOUT_CLASSIFICATION	1.7133799209912283E-5	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996684652580271	WITHOUT_CLASSIFICATION	3.315347419728313E-4	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999990614251119	WITHOUT_CLASSIFICATION	9.385748881814968E-7	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999925264894167	WITHOUT_CLASSIFICATION	7.473510583377462E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992952326395493	WITHOUT_CLASSIFICATION	7.047673604507157E-4	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999281584668066	WITHOUT_CLASSIFICATION	7.184153319345115E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759419463655	WITHOUT_CLASSIFICATION	2.4058053634478998E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999698647894255	WITHOUT_CLASSIFICATION	3.0135210574525795E-5	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999994703844102	WITHOUT_CLASSIFICATION	5.29615589890081E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.999951366288406	WITHOUT_CLASSIFICATION	4.863371159405985E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999732322536035	WITHOUT_CLASSIFICATION	2.6767746396573355E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999863614864648	WITHOUT_CLASSIFICATION	1.3638513535225278E-5	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999651907460279	WITHOUT_CLASSIFICATION	3.480925397213386E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763074016101	WITHOUT_CLASSIFICATION	2.3692598389880885E-5	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999998386618449	WITHOUT_CLASSIFICATION	1.6133815509802232E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999986580576761	WITHOUT_CLASSIFICATION	1.341942323930582E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999492380839677	WITHOUT_CLASSIFICATION	5.0761916032198544E-5	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999973472635119	WITHOUT_CLASSIFICATION	2.652736488117422E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996788637108331	WITHOUT_CLASSIFICATION	3.2113628916686257E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999993289697667	WITHOUT_CLASSIFICATION	6.710302333010588E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999841364358484	WITHOUT_CLASSIFICATION	1.5863564151674724E-5	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999309263451873	WITHOUT_CLASSIFICATION	6.907365481267711E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997793579438	WITHOUT_CLASSIFICATION	2.2064205616688647E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999994162338962	WITHOUT_CLASSIFICATION	5.837661038585229E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999943441263562	WITHOUT_CLASSIFICATION	5.6558736437180245E-6	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999970084154004	WITHOUT_CLASSIFICATION	2.9915845995261837E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999994881842705	WITHOUT_CLASSIFICATION	5.11815729414335E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998083247650611	WITHOUT_CLASSIFICATION	1.916752349388407E-4	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998083247650611	WITHOUT_CLASSIFICATION	1.916752349388407E-4	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999851965480706	WITHOUT_CLASSIFICATION	1.4803451929438991E-5	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999971228061589	WITHOUT_CLASSIFICATION	2.8771938411225777E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999990510204264	WITHOUT_CLASSIFICATION	9.48979573601624E-6	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999883543247862	WITHOUT_CLASSIFICATION	1.1645675213778201E-5	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999584121077549	WITHOUT_CLASSIFICATION	4.158789224508054E-5	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999948610399821	WITHOUT_CLASSIFICATION	5.138960017773255E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999838113560301	WITHOUT_CLASSIFICATION	1.618864396993012E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999941977235108	WITHOUT_CLASSIFICATION	5.8022764892018235E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999941977235108	WITHOUT_CLASSIFICATION	5.8022764892018235E-5	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995436498130816	WITHOUT_CLASSIFICATION	4.5635018691835976E-4	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999921152426179	WITHOUT_CLASSIFICATION	7.88475738210083E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998892550527483	WITHOUT_CLASSIFICATION	1.1074494725181588E-4	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999936738250451	WITHOUT_CLASSIFICATION	6.3261749549240715E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999936738250451	WITHOUT_CLASSIFICATION	6.3261749549240715E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999936738250451	WITHOUT_CLASSIFICATION	6.3261749549240715E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999615454017423	WITHOUT_CLASSIFICATION	3.8454598257618224E-5	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999849440097086	WITHOUT_CLASSIFICATION	1.5055990291380158E-5	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999840658197664	WITHOUT_CLASSIFICATION	1.593418023361525E-5	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999641380783963	WITHOUT_CLASSIFICATION	3.58619216036813E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999959418830746	WITHOUT_CLASSIFICATION	4.058116925343411E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999999441744353	WITHOUT_CLASSIFICATION	5.582556470359788E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999476562098899	WITHOUT_CLASSIFICATION	5.234379011005333E-5	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990697216358785	WITHOUT_CLASSIFICATION	9.302783641214298E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999947146904558	WITHOUT_CLASSIFICATION	5.285309544202993E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999946662180944	WITHOUT_CLASSIFICATION	5.333781905607071E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999806622715003	WITHOUT_CLASSIFICATION	1.9337728499623305E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999106820800382	WITHOUT_CLASSIFICATION	8.931791996181292E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999919160261717	WITHOUT_CLASSIFICATION	8.083973828332014E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999976388774826	WITHOUT_CLASSIFICATION	2.3611225172995087E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999926403657339	WITHOUT_CLASSIFICATION	7.359634266018247E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999952313937803	WITHOUT_CLASSIFICATION	4.768606219637567E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999996157186129	WITHOUT_CLASSIFICATION	3.842813870916586E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998083247650611	WITHOUT_CLASSIFICATION	1.916752349388407E-4	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999937947056089	WITHOUT_CLASSIFICATION	6.205294391084399E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999892265385304	WITHOUT_CLASSIFICATION	1.07734614695543E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999768262928487	WITHOUT_CLASSIFICATION	2.317370715128616E-5	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999829646443587	WITHOUT_CLASSIFICATION	1.7035355641329996E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999917405640355	WITHOUT_CLASSIFICATION	8.259435964424241E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999987978582886	WITHOUT_CLASSIFICATION	1.2021417113068435E-6	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999728117424976	WITHOUT_CLASSIFICATION	2.718825750241141E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999943725321255	WITHOUT_CLASSIFICATION	5.627467874385601E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998878193373999	WITHOUT_CLASSIFICATION	1.1218066260007627E-4	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999859795832662	WITHOUT_CLASSIFICATION	1.4020416733811001E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997906843346035	WITHOUT_CLASSIFICATION	2.0931566539648507E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999986227636783	WITHOUT_CLASSIFICATION	1.3772363217018016E-5	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999643439679904	WITHOUT_CLASSIFICATION	3.5656032009576724E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999517253979135	WITHOUT_CLASSIFICATION	4.827460208655002E-5	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999867281359277	WITHOUT_CLASSIFICATION	1.3271864072203762E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999994439585291	WITHOUT_CLASSIFICATION	5.56041470925783E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999975006557856	WITHOUT_CLASSIFICATION	2.4993442143917536E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999985156564113	WITHOUT_CLASSIFICATION	1.4843435887471754E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999899939000567	WITHOUT_CLASSIFICATION	1.000609994320106E-5	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999899939000567	WITHOUT_CLASSIFICATION	1.000609994320106E-5	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999882560830288	WITHOUT_CLASSIFICATION	1.1743916971164985E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999972632574406	WITHOUT_CLASSIFICATION	2.7367425592930496E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999881298568566	WITHOUT_CLASSIFICATION	1.1870143143386192E-5	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999836640144926	WITHOUT_CLASSIFICATION	1.633598550749693E-5	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999928521506718	WITHOUT_CLASSIFICATION	7.147849328202155E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999799146807672	WITHOUT_CLASSIFICATION	2.0085319232736964E-5	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999867036855936	WITHOUT_CLASSIFICATION	1.3296314406270356E-5	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998970966120895	WITHOUT_CLASSIFICATION	1.029033879104735E-4	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999886653844088	WITHOUT_CLASSIFICATION	1.1334615591259381E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999926107455452	WITHOUT_CLASSIFICATION	7.389254454738068E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999401233804113	WITHOUT_CLASSIFICATION	5.987661958879394E-5	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999680467013135	WITHOUT_CLASSIFICATION	3.195329868651216E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999988556312671	WITHOUT_CLASSIFICATION	1.1443687329696883E-6	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999958661277879	WITHOUT_CLASSIFICATION	4.13387221211698E-6	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999996564748695	WITHOUT_CLASSIFICATION	3.435251303862735E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999240460307033	WITHOUT_CLASSIFICATION	7.595396929672175E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990560469154	WITHOUT_CLASSIFICATION	9.439530845492737E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990560469154	WITHOUT_CLASSIFICATION	9.439530845492737E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999771747735018	WITHOUT_CLASSIFICATION	2.282522649820129E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998554633617	WITHOUT_CLASSIFICATION	1.445366382270842E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999445099687779	WITHOUT_CLASSIFICATION	5.549003122212608E-5	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.999944478186346	WITHOUT_CLASSIFICATION	5.5521813654023754E-5	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998983719668142	WITHOUT_CLASSIFICATION	1.0162803318577093E-4	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998553799073107	WITHOUT_CLASSIFICATION	1.4462009268935492E-4	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995735115049659	WITHOUT_CLASSIFICATION	4.2648849503407985E-4	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999976603781914	WITHOUT_CLASSIFICATION	2.339621808596512E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999663407001266	WITHOUT_CLASSIFICATION	3.365929987343053E-5	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999481040666512	WITHOUT_CLASSIFICATION	5.1895933348787144E-5	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999548791961856	WITHOUT_CLASSIFICATION	4.512080381429848E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999976603781914	WITHOUT_CLASSIFICATION	2.339621808596512E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999747875937806	WITHOUT_CLASSIFICATION	2.5212406219510573E-5	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999927683665667	WITHOUT_CLASSIFICATION	7.2316334332430984E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999998517495385	WITHOUT_CLASSIFICATION	1.4825046149014207E-6	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.999965383898495	WITHOUT_CLASSIFICATION	3.4616101505039266E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999652723345147	WITHOUT_CLASSIFICATION	3.472766548534442E-5	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999951729431789	WITHOUT_CLASSIFICATION	4.8270568212042085E-6	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999836339709848	WITHOUT_CLASSIFICATION	1.636602901519149E-5	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999844178574809	WITHOUT_CLASSIFICATION	1.5582142518965434E-5	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999984175076169	WITHOUT_CLASSIFICATION	1.5824923830133538E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999911593786204	WITHOUT_CLASSIFICATION	8.840621379529218E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998720062258767	WITHOUT_CLASSIFICATION	1.2799377412339504E-4	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999961417246	WITHOUT_CLASSIFICATION	3.858275399975134E-6	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999993951254999	WITHOUT_CLASSIFICATION	6.0487450009116454E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999993925439757	WITHOUT_CLASSIFICATION	6.074560243033536E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999937048685342	WITHOUT_CLASSIFICATION	6.295131465846381E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999947986769416	WITHOUT_CLASSIFICATION	5.201323058334037E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995362344961526	WITHOUT_CLASSIFICATION	4.637655038475098E-4	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999411727678041	WITHOUT_CLASSIFICATION	5.8827232195923104E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999411727678041	WITHOUT_CLASSIFICATION	5.8827232195923104E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999836339709848	WITHOUT_CLASSIFICATION	1.636602901519149E-5	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999849538179106	WITHOUT_CLASSIFICATION	1.5046182089430442E-5	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999979767801079	WITHOUT_CLASSIFICATION	2.023219892114443E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998069097458979	WITHOUT_CLASSIFICATION	1.930902541020531E-4	TEST
// #2	WITHOUT_CLASSIFICATION	0.999942654330324	WITHOUT_CLASSIFICATION	5.734566967595142E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999937129582069	WITHOUT_CLASSIFICATION	6.287041792957459E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970520499482	WITHOUT_CLASSIFICATION	2.9479500517873075E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999942796041952	WITHOUT_CLASSIFICATION	5.720395804839277E-6	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999663060621744	WITHOUT_CLASSIFICATION	3.36939378256257E-5	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999998488701853	WITHOUT_CLASSIFICATION	1.5112981470089644E-6	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999858968960617	WITHOUT_CLASSIFICATION	1.4103103938225482E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999991129672673	WITHOUT_CLASSIFICATION	8.87032732619341E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999951294397387	WITHOUT_CLASSIFICATION	4.8705602612817005E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999905759277116	WITHOUT_CLASSIFICATION	9.42407228836607E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999909870372395	WITHOUT_CLASSIFICATION	9.012962760416611E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999764040887967	WITHOUT_CLASSIFICATION	2.3595911203299592E-5	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999949650697015	WITHOUT_CLASSIFICATION	5.034930298512876E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999981875983381	WITHOUT_CLASSIFICATION	1.8124016618621976E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999981749388747	WITHOUT_CLASSIFICATION	1.8250611252876268E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999435928600631	WITHOUT_CLASSIFICATION	5.6407139936824434E-5	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999911154716867	WITHOUT_CLASSIFICATION	8.884528313269822E-6	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999959358753095	WITHOUT_CLASSIFICATION	4.064124690498557E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999792966841758	WITHOUT_CLASSIFICATION	2.070331582417181E-5	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999877825485942	WITHOUT_CLASSIFICATION	1.2217451405830067E-5	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999958843203159	WITHOUT_CLASSIFICATION	4.115679684013704E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999825496221254	WITHOUT_CLASSIFICATION	1.745037787456213E-5	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999882433066593	WITHOUT_CLASSIFICATION	1.175669334064954E-5	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9984028239152273	WITHOUT_CLASSIFICATION	0.0015971760847726813	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999837303204794	WITHOUT_CLASSIFICATION	1.626967952059313E-4	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999807906697682	WITHOUT_CLASSIFICATION	1.9209330231810337E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999842112821946	WITHOUT_CLASSIFICATION	1.578871780545911E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999759099569016	WITHOUT_CLASSIFICATION	2.4090043098419932E-5	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999934951460022	WITHOUT_CLASSIFICATION	6.504853997673855E-6	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999946699907399	WITHOUT_CLASSIFICATION	5.3300092600776474E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999973338141457	WITHOUT_CLASSIFICATION	2.6661858542148225E-6	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999927819691238	WITHOUT_CLASSIFICATION	7.218030876220838E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999284632488771	WITHOUT_CLASSIFICATION	7.153675112301859E-5	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999996762997896	WITHOUT_CLASSIFICATION	3.237002104151277E-6	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999896796020726	WITHOUT_CLASSIFICATION	1.0320397927410186E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997733488112605	WITHOUT_CLASSIFICATION	2.2665118873964197E-4	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999935396763013	WITHOUT_CLASSIFICATION	6.4603236987140666E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999598716596768	WITHOUT_CLASSIFICATION	4.012834032324886E-5	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999863217661172	WITHOUT_CLASSIFICATION	1.3678233882662583E-5	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999262353857402	WITHOUT_CLASSIFICATION	7.376461425975326E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998885452578085	WITHOUT_CLASSIFICATION	1.1145474219145007E-4	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998385343799845	WITHOUT_CLASSIFICATION	1.614656200155348E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999560039306999	WITHOUT_CLASSIFICATION	4.399606929997422E-5	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999981610719101	WITHOUT_CLASSIFICATION	1.8389280899434535E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997756674376361	WITHOUT_CLASSIFICATION	2.2433256236388196E-4	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999993406717532	WITHOUT_CLASSIFICATION	6.593282468210617E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999774645995114	WITHOUT_CLASSIFICATION	2.253540048855835E-5	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999922880354312	WITHOUT_CLASSIFICATION	7.711964568799731E-5	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999663407001266	WITHOUT_CLASSIFICATION	3.365929987343053E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995356191904192	WITHOUT_CLASSIFICATION	4.643808095807745E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999764040887967	WITHOUT_CLASSIFICATION	2.3595911203299592E-5	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999891208249668	WITHOUT_CLASSIFICATION	1.0879175033219334E-5	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999861057488162	WITHOUT_CLASSIFICATION	1.3894251183763777E-5	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999981184290322	WITHOUT_CLASSIFICATION	1.8815709677686997E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998102146661	WITHOUT_CLASSIFICATION	1.897853338985572E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999882299647573	WITHOUT_CLASSIFICATION	1.1770035242690931E-5	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999988213351293	WITHOUT_CLASSIFICATION	1.1786648707184117E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999842549662167	WITHOUT_CLASSIFICATION	1.574503378334437E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999864212527353	WITHOUT_CLASSIFICATION	1.3578747264799753E-5	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999683915966325	WITHOUT_CLASSIFICATION	3.1608403367400536E-5	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999998864072699	WITHOUT_CLASSIFICATION	1.135927301008462E-6	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999605359101927	WITHOUT_CLASSIFICATION	3.946408980716773E-5	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999994787245543	WITHOUT_CLASSIFICATION	5.212754457916271E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999981325176235	WITHOUT_CLASSIFICATION	1.8674823765659007E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999981325176235	WITHOUT_CLASSIFICATION	1.8674823765659007E-6	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999577462191355	WITHOUT_CLASSIFICATION	4.225378086453944E-5	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995653834332155	WITHOUT_CLASSIFICATION	4.3461656678446504E-4	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999982681317071	WITHOUT_CLASSIFICATION	1.7318682928397468E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9990591653669378	WITHOUT_CLASSIFICATION	9.408346330620879E-4	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999957986329048	WITHOUT_CLASSIFICATION	4.201367095221427E-6	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999950586061438	WITHOUT_CLASSIFICATION	4.941393856217868E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999993459156119	WITHOUT_CLASSIFICATION	6.54084388183647E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999745087615775	WITHOUT_CLASSIFICATION	2.549123842259076E-5	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999826239373196	WITHOUT_CLASSIFICATION	1.737606268037023E-5	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999886176162579	WITHOUT_CLASSIFICATION	1.1382383742031275E-5	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.999982690392778	WITHOUT_CLASSIFICATION	1.7309607222002596E-5	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999982690392778	WITHOUT_CLASSIFICATION	1.7309607222002596E-5	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999417761252	WITHOUT_CLASSIFICATION	5.822387492651328E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999874473519033	WITHOUT_CLASSIFICATION	1.2552648096770374E-5	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999954974685019	WITHOUT_CLASSIFICATION	4.502531498150341E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998185560669124	WITHOUT_CLASSIFICATION	1.8144393308761E-4	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999992099865596	WITHOUT_CLASSIFICATION	7.900134404011583E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999798860836344	WITHOUT_CLASSIFICATION	2.0113916365552773E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999674085603778	WITHOUT_CLASSIFICATION	3.2591439622281416E-5	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999981129306015	WITHOUT_CLASSIFICATION	1.8870693986189808E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999933440455652	WITHOUT_CLASSIFICATION	6.655954434836737E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999664249390494	WITHOUT_CLASSIFICATION	3.357506095058735E-5	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999885076189824	WITHOUT_CLASSIFICATION	1.1492381017651958E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721623841474	WITHOUT_CLASSIFICATION	2.783761585260424E-5	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999440730391211	WITHOUT_CLASSIFICATION	5.592696087890318E-5	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999961769747072	WITHOUT_CLASSIFICATION	3.823025292734771E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997096127609986	WITHOUT_CLASSIFICATION	2.9038723900149874E-4	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960202749224	WITHOUT_CLASSIFICATION	3.97972507761105E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9996197819381862	WITHOUT_CLASSIFICATION	3.802180618138553E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997528151440038	WITHOUT_CLASSIFICATION	2.471848559961523E-4	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999996891495747	WITHOUT_CLASSIFICATION	3.1085042530127996E-6	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999991228577034	WITHOUT_CLASSIFICATION	8.771422964967786E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999732523456582	WITHOUT_CLASSIFICATION	2.674765434180244E-4	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999753281580587	WITHOUT_CLASSIFICATION	2.4671841941325172E-5	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998298828729877	WITHOUT_CLASSIFICATION	1.701171270122876E-4	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999943307754632	WITHOUT_CLASSIFICATION	5.669224536776366E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999772372915594	WITHOUT_CLASSIFICATION	2.2762708440584347E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999898575385561	WITHOUT_CLASSIFICATION	1.0142461443913926E-5	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877244864108	WITHOUT_CLASSIFICATION	1.2275513589255983E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999985625377965	WITHOUT_CLASSIFICATION	1.437462203518228E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9996772115254114	WITHOUT_CLASSIFICATION	3.227884745885511E-4	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799091755458	WITHOUT_CLASSIFICATION	2.0090824454239483E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9988515222807128	WITHOUT_CLASSIFICATION	0.0011484777192871734	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.99999863760756	WITHOUT_CLASSIFICATION	1.3623924399370303E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999755556428668	WITHOUT_CLASSIFICATION	2.4444357133258525E-5	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999908407555493	WITHOUT_CLASSIFICATION	9.159244450642144E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824538512077	WITHOUT_CLASSIFICATION	1.754614879243068E-5	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999986429897307	WITHOUT_CLASSIFICATION	1.3570102693269937E-6	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999838363163063	WITHOUT_CLASSIFICATION	1.6163683693636605E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999887473948701	WITHOUT_CLASSIFICATION	1.125260512984105E-5	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999894065651194	WITHOUT_CLASSIFICATION	1.0593434880630711E-5	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999919366768902	WITHOUT_CLASSIFICATION	8.063323109769914E-6	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9996810038759065	WITHOUT_CLASSIFICATION	3.1899612409338785E-4	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999959326819272	WITHOUT_CLASSIFICATION	4.067318072773241E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999967509919883	WITHOUT_CLASSIFICATION	3.2490080118474998E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999972127949023	WITHOUT_CLASSIFICATION	2.787205097699906E-5	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999465886619234	WITHOUT_CLASSIFICATION	5.3411338076715244E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999949756237735	WITHOUT_CLASSIFICATION	5.024376226459444E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999494051816784	WITHOUT_CLASSIFICATION	5.059481832151236E-5	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999928738517473	WITHOUT_CLASSIFICATION	7.1261482527159635E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999811976553897	WITHOUT_CLASSIFICATION	1.880234461026199E-5	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998651691139132	WITHOUT_CLASSIFICATION	1.3483088608678474E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999940836315677	WITHOUT_CLASSIFICATION	5.916368432252369E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999996952556471	WITHOUT_CLASSIFICATION	3.0474435289902812E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999990728515916	WITHOUT_CLASSIFICATION	9.271484083940908E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999750205557691	WITHOUT_CLASSIFICATION	2.4979444230855127E-5	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999990728515916	WITHOUT_CLASSIFICATION	9.271484083940908E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999855735761964	WITHOUT_CLASSIFICATION	1.4426423803610253E-5	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999980203417675	WITHOUT_CLASSIFICATION	1.9796582324492006E-6	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999925343455585	WITHOUT_CLASSIFICATION	7.465654441536134E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999986723516554	WITHOUT_CLASSIFICATION	1.3276483446333033E-6	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999883662133963	WITHOUT_CLASSIFICATION	1.1633786603655755E-5	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999925343455585	WITHOUT_CLASSIFICATION	7.465654441536134E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999960175734235	WITHOUT_CLASSIFICATION	3.982426576607813E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998168135275366	WITHOUT_CLASSIFICATION	1.831864724633761E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999968956690882	WITHOUT_CLASSIFICATION	3.1043309117708814E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999949135260149	WITHOUT_CLASSIFICATION	5.086473985065874E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999788901048928	WITHOUT_CLASSIFICATION	2.1109895107097764E-5	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999973439976739	WITHOUT_CLASSIFICATION	2.6560023260471474E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999980007412382	WITHOUT_CLASSIFICATION	1.9992587617230407E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999710971905967	WITHOUT_CLASSIFICATION	2.890280940330461E-4	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999969524395388	WITHOUT_CLASSIFICATION	3.0475604612440013E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999976227675564	WITHOUT_CLASSIFICATION	2.377232443553507E-6	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999773385252864	WITHOUT_CLASSIFICATION	2.2661474713637532E-5	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999998386858329	WITHOUT_CLASSIFICATION	1.6131416709171906E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998307455146	WITHOUT_CLASSIFICATION	1.692544854152668E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998182298840438	WITHOUT_CLASSIFICATION	1.8177011595614642E-4	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999905202251351	WITHOUT_CLASSIFICATION	9.479774864908416E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996802258845846	WITHOUT_CLASSIFICATION	3.1977411541539056E-4	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9971445861532279	WITHOUT_CLASSIFICATION	0.002855413846772067	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999997780483357	WITHOUT_CLASSIFICATION	2.219516643113294E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999756715718965	WITHOUT_CLASSIFICATION	2.4328428103514666E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988784772111325	WITHOUT_CLASSIFICATION	0.0011215227888674779	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.99980690137669	WITHOUT_CLASSIFICATION	1.9309862331003642E-4	TEST
//default mode	WITHOUT_CLASSIFICATION	0.999949649428854	WITHOUT_CLASSIFICATION	5.035057114592171E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998702696318419	WITHOUT_CLASSIFICATION	1.297303681581243E-4	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9997553894816992	WITHOUT_CLASSIFICATION	2.4461051830077104E-4	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999372952281984	WITHOUT_CLASSIFICATION	6.270477180161815E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999702844770026	WITHOUT_CLASSIFICATION	2.9715522997306015E-5	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999998890323456	WITHOUT_CLASSIFICATION	1.109676544012925E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999951458772267	WITHOUT_CLASSIFICATION	4.85412277334096E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999705701950651	WITHOUT_CLASSIFICATION	2.942980493488986E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998578924198409	WITHOUT_CLASSIFICATION	1.4210758015909192E-4	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999821407911598	WITHOUT_CLASSIFICATION	1.7859208840229953E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9985518498189069	WITHOUT_CLASSIFICATION	0.0014481501810930813	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988784772111325	WITHOUT_CLASSIFICATION	0.0011215227888674779	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999930533438205	WITHOUT_CLASSIFICATION	6.946656179536811E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995297903765339	WITHOUT_CLASSIFICATION	4.702096234660509E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997635467746463	WITHOUT_CLASSIFICATION	2.364532253536742E-4	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999421827938164	WITHOUT_CLASSIFICATION	5.781720618356778E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999738904291485	WITHOUT_CLASSIFICATION	2.6109570851417298E-5	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999819335197448	WITHOUT_CLASSIFICATION	1.8066480255087366E-5	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999236302238156	WITHOUT_CLASSIFICATION	7.636977618440666E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999975670747824	WITHOUT_CLASSIFICATION	2.4329252176060673E-5	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999722053572798	WITHOUT_CLASSIFICATION	2.7794642720136788E-5	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9997751044686426	WITHOUT_CLASSIFICATION	2.2489553135742374E-4	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9996745027324231	WITHOUT_CLASSIFICATION	3.2549726757694964E-4	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999496720549427	WITHOUT_CLASSIFICATION	5.032794505733374E-5	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999962948367553	WITHOUT_CLASSIFICATION	3.7051632447067183E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999177350224263	WITHOUT_CLASSIFICATION	8.226497757364027E-5	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999324723293394	WITHOUT_CLASSIFICATION	6.752767066065798E-5	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999976324467373	WITHOUT_CLASSIFICATION	2.3675532626184646E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999128504759169	WITHOUT_CLASSIFICATION	8.714952408310408E-5	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998877544109409	WITHOUT_CLASSIFICATION	1.1224558905909425E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999847130684217	WITHOUT_CLASSIFICATION	1.5286931578293585E-4	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999794204290341	WITHOUT_CLASSIFICATION	2.0579570965873143E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999902785099135	WITHOUT_CLASSIFICATION	9.721490086481994E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999902785099135	WITHOUT_CLASSIFICATION	9.721490086481994E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999925520772726	WITHOUT_CLASSIFICATION	7.447922727389182E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999902785099135	WITHOUT_CLASSIFICATION	9.721490086481994E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999902785099135	WITHOUT_CLASSIFICATION	9.721490086481994E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999759902204723	WITHOUT_CLASSIFICATION	2.400977952767353E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.997944768806249	WITHOUT_CLASSIFICATION	0.0020552311937509873	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999722949066675	WITHOUT_CLASSIFICATION	2.7705093332432562E-5	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999722949066675	WITHOUT_CLASSIFICATION	2.7705093332432562E-5	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999797257551103	WITHOUT_CLASSIFICATION	2.0274244889649276E-5	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999788814552851	WITHOUT_CLASSIFICATION	2.1118544714815056E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999883755697348	WITHOUT_CLASSIFICATION	1.1624430265195002E-4	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9936616172049986	WITHOUT_CLASSIFICATION	0.006338382795001494	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999695861288426	WITHOUT_CLASSIFICATION	3.0413871157441572E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996857054553236	WITHOUT_CLASSIFICATION	3.142945446763574E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995353651993605	WITHOUT_CLASSIFICATION	4.6463480063958123E-4	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999677086527474	WITHOUT_CLASSIFICATION	3.22913472525393E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9994868194218991	WITHOUT_CLASSIFICATION	5.131805781009074E-4	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9993949649122925	WITHOUT_CLASSIFICATION	6.050350877073825E-4	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997329967398969	WITHOUT_CLASSIFICATION	2.670032601031071E-4	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9972734481741306	WITHOUT_CLASSIFICATION	0.0027265518258694416	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995028563256	WITHOUT_CLASSIFICATION	4.971436743988698E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999163475673698	WITHOUT_CLASSIFICATION	8.365243263025517E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998007323536267	WITHOUT_CLASSIFICATION	1.9926764637334088E-4	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9992797321273758	WITHOUT_CLASSIFICATION	7.202678726242348E-4	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999986016089735	WITHOUT_CLASSIFICATION	1.3983910265139297E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999935868697641	WITHOUT_CLASSIFICATION	6.4131302358696345E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995028563256	WITHOUT_CLASSIFICATION	4.971436743988698E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.99980690137669	WITHOUT_CLASSIFICATION	1.9309862331003642E-4	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999409772794314	WITHOUT_CLASSIFICATION	5.902272056850283E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891628460296	WITHOUT_CLASSIFICATION	1.0837153970422998E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999859036004098	WITHOUT_CLASSIFICATION	1.4096399590172993E-5	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999469969888146	WITHOUT_CLASSIFICATION	5.300301118544854E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999958237656136	WITHOUT_CLASSIFICATION	4.176234386427454E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999095801328801	WITHOUT_CLASSIFICATION	9.041986711985337E-5	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999939153401074	WITHOUT_CLASSIFICATION	6.084659892625357E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999925729217864	WITHOUT_CLASSIFICATION	7.427078213598311E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999842202870228	WITHOUT_CLASSIFICATION	1.5779712977115734E-5	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999406644571233	WITHOUT_CLASSIFICATION	5.9335542876841754E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999424937129587	WITHOUT_CLASSIFICATION	5.750628704133462E-5	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999978824128631	WITHOUT_CLASSIFICATION	2.1175871368838765E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999832271385737	WITHOUT_CLASSIFICATION	1.6772861426318923E-5	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998854303181595	WITHOUT_CLASSIFICATION	1.1456968184041694E-4	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999988060809535	WITHOUT_CLASSIFICATION	1.1939190465049982E-5	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999958544933528	WITHOUT_CLASSIFICATION	4.145506647228642E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999962140543754	WITHOUT_CLASSIFICATION	3.7859456245928413E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999812647922571	WITHOUT_CLASSIFICATION	1.8735207742847507E-5	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999618730755895	WITHOUT_CLASSIFICATION	3.812692441054085E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998509677548817	WITHOUT_CLASSIFICATION	1.4903224511836517E-4	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999795996161825	WITHOUT_CLASSIFICATION	2.040038381749831E-4	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999240307218	WITHOUT_CLASSIFICATION	7.59692782107812E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999925729217864	WITHOUT_CLASSIFICATION	7.427078213598311E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999506336410989	WITHOUT_CLASSIFICATION	4.936635890099047E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999408133353426	WITHOUT_CLASSIFICATION	5.9186664657442676E-5	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996614436693646	WITHOUT_CLASSIFICATION	3.385563306354189E-4	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999464420078709	WITHOUT_CLASSIFICATION	5.3557992129116155E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999372642948412	WITHOUT_CLASSIFICATION	6.273570515883431E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999746788693826	WITHOUT_CLASSIFICATION	2.5321130617297662E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999946589818954	WITHOUT_CLASSIFICATION	5.341018104596135E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999746916527882	WITHOUT_CLASSIFICATION	2.5308347211898067E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999399229414587	WITHOUT_CLASSIFICATION	6.007705854114611E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999853318993119	WITHOUT_CLASSIFICATION	1.4668100687950037E-5	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999770977594896	WITHOUT_CLASSIFICATION	2.2902240510367395E-5	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999738014759154	WITHOUT_CLASSIFICATION	2.6198524084595484E-4	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9992754955010279	WITHOUT_CLASSIFICATION	7.245044989720747E-4	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998841696413358	WITHOUT_CLASSIFICATION	1.1583035866429329E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997250353022759	WITHOUT_CLASSIFICATION	2.749646977241766E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999853318993119	WITHOUT_CLASSIFICATION	1.4668100687950037E-5	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999821477402095	WITHOUT_CLASSIFICATION	1.785225979050016E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999640815340386	WITHOUT_CLASSIFICATION	3.591846596140647E-5	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999413426145561	WITHOUT_CLASSIFICATION	5.865738544374538E-5	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999083071951685	WITHOUT_CLASSIFICATION	9.169280483153913E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999976519042796	WITHOUT_CLASSIFICATION	2.3480957203126875E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999798422000608	WITHOUT_CLASSIFICATION	2.015779993922273E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999864899593459	WITHOUT_CLASSIFICATION	1.351004065419861E-5	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686971612681	WITHOUT_CLASSIFICATION	3.130283873188948E-5	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750012900659	WITHOUT_CLASSIFICATION	2.4998709934124702E-5	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754025906687	WITHOUT_CLASSIFICATION	2.4597409331194277E-5	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754025906687	WITHOUT_CLASSIFICATION	2.4597409331194277E-5	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754025906687	WITHOUT_CLASSIFICATION	2.4597409331194277E-5	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975481322174	WITHOUT_CLASSIFICATION	2.4518677826048425E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975481322174	WITHOUT_CLASSIFICATION	2.4518677826048425E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.998798869518002	WITHOUT_CLASSIFICATION	0.0012011304819980362	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999973078424073	WITHOUT_CLASSIFICATION	2.6921575927733755E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999946086658966	WITHOUT_CLASSIFICATION	5.391334103309066E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999960143064306	WITHOUT_CLASSIFICATION	3.985693569398344E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999153373040645	WITHOUT_CLASSIFICATION	8.466269593555309E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972209891334	WITHOUT_CLASSIFICATION	2.7790108666017943E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726323836394	WITHOUT_CLASSIFICATION	2.736761636049196E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999990053810023	WITHOUT_CLASSIFICATION	9.946189976947724E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763021034518	WITHOUT_CLASSIFICATION	2.3697896548210485E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972209891334	WITHOUT_CLASSIFICATION	2.7790108666017943E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726323836394	WITHOUT_CLASSIFICATION	2.736761636049196E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999633007669124	WITHOUT_CLASSIFICATION	3.669923308751162E-5	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996132379007734	WITHOUT_CLASSIFICATION	3.867620992265497E-4	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999969723176556	WITHOUT_CLASSIFICATION	3.0276823443760243E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999672552761982	WITHOUT_CLASSIFICATION	3.2744723801678E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998572681609724	WITHOUT_CLASSIFICATION	1.4273183902752546E-4	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998138750012603	WITHOUT_CLASSIFICATION	1.8612499873963344E-4	TEST
//stats	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999816622991494	WITHOUT_CLASSIFICATION	1.83377008506647E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999878994297176	WITHOUT_CLASSIFICATION	1.210057028238672E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998949476136696	WITHOUT_CLASSIFICATION	1.0505238633036156E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9994584138181565	WITHOUT_CLASSIFICATION	5.415861818434917E-4	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999857922928402	WITHOUT_CLASSIFICATION	1.4207707159738288E-5	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999817567514303	WITHOUT_CLASSIFICATION	1.8243248569719774E-5	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999014021726216	WITHOUT_CLASSIFICATION	9.859782737840963E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9991560977985443	WITHOUT_CLASSIFICATION	8.439022014556715E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999794294159895	WITHOUT_CLASSIFICATION	2.057058401040993E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999613691868754	WITHOUT_CLASSIFICATION	3.863081312448698E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999804405309277	WITHOUT_CLASSIFICATION	1.9559469072209094E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999944277567775	WITHOUT_CLASSIFICATION	5.572243222494527E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999466972942448	WITHOUT_CLASSIFICATION	5.33027057552018E-4	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999945094230346	WITHOUT_CLASSIFICATION	5.490576965481148E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999947727787512	WITHOUT_CLASSIFICATION	5.227221248864604E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996323654734734	WITHOUT_CLASSIFICATION	3.676345265266258E-4	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721208194801	WITHOUT_CLASSIFICATION	2.7879180520003702E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999921638051995	WITHOUT_CLASSIFICATION	7.836194800413768E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999724098290955	WITHOUT_CLASSIFICATION	2.7590170904428815E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968757174612	WITHOUT_CLASSIFICATION	3.124282538808898E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999290468463951	WITHOUT_CLASSIFICATION	7.09531536048927E-4	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999290468463951	WITHOUT_CLASSIFICATION	7.09531536048927E-4	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999774591736628	WITHOUT_CLASSIFICATION	2.2540826337303726E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999981264628863	WITHOUT_CLASSIFICATION	1.8735371137218277E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999624336606856	WITHOUT_CLASSIFICATION	3.756633931446376E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999996825881362	WITHOUT_CLASSIFICATION	3.1741186380967073E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998401390658395	WITHOUT_CLASSIFICATION	1.5986093416046218E-4	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9993640941650185	WITHOUT_CLASSIFICATION	6.359058349814824E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999986659776839	WITHOUT_CLASSIFICATION	1.334022316081857E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.99999887889816	WITHOUT_CLASSIFICATION	1.1211018400612448E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972909107059	WITHOUT_CLASSIFICATION	2.7090892940863367E-5	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727290778134	WITHOUT_CLASSIFICATION	2.7270922186602988E-5	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727717798024	WITHOUT_CLASSIFICATION	2.7228220197574652E-5	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999812829286946	WITHOUT_CLASSIFICATION	1.8717071305408112E-5	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9991490319242702	WITHOUT_CLASSIFICATION	8.50968075729855E-4	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985312553266494	WITHOUT_CLASSIFICATION	0.0014687446733505703	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999958396376621	WITHOUT_CLASSIFICATION	4.160362337811773E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999842999815572	WITHOUT_CLASSIFICATION	1.5700018442720945E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999667846344522	WITHOUT_CLASSIFICATION	3.3215365547882606E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999478055850938	WITHOUT_CLASSIFICATION	5.21944149061853E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999847839780639	WITHOUT_CLASSIFICATION	1.5216021936115188E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985312553266494	WITHOUT_CLASSIFICATION	0.0014687446733505703	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985312553266494	WITHOUT_CLASSIFICATION	0.0014687446733505703	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9991158293376539	WITHOUT_CLASSIFICATION	8.841706623461354E-4	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999896774288973	WITHOUT_CLASSIFICATION	1.0322571102713408E-5	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.996720213789065	WITHOUT_CLASSIFICATION	0.003279786210935054	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999957057576133	WITHOUT_CLASSIFICATION	4.294242386684903E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999517253979135	WITHOUT_CLASSIFICATION	4.827460208655002E-5	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999613691868754	WITHOUT_CLASSIFICATION	3.863081312448698E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997462377796922	WITHOUT_CLASSIFICATION	2.537622203078209E-4	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999920846573016	WITHOUT_CLASSIFICATION	7.915342698375162E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999827998234846	WITHOUT_CLASSIFICATION	1.7200176515329295E-5	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778175666949	WITHOUT_CLASSIFICATION	2.2182433305057943E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999954939853187	WITHOUT_CLASSIFICATION	4.506014681184648E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738915034878	WITHOUT_CLASSIFICATION	2.6108496512120435E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999797303271164	WITHOUT_CLASSIFICATION	2.0269672883576998E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999797303271164	WITHOUT_CLASSIFICATION	2.0269672883576998E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999797303271164	WITHOUT_CLASSIFICATION	2.0269672883576998E-5	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999797303271164	WITHOUT_CLASSIFICATION	2.0269672883576998E-5	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999764417142555	WITHOUT_CLASSIFICATION	2.355828574458225E-5	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9993470929397977	WITHOUT_CLASSIFICATION	6.529070602022158E-4	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999790023292946	WITHOUT_CLASSIFICATION	2.0997670705374634E-5	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999852190517968	WITHOUT_CLASSIFICATION	1.4780948203323526E-5	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721732884669	WITHOUT_CLASSIFICATION	2.7826711533114506E-5	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773642265284	WITHOUT_CLASSIFICATION	2.263577347163131E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999986380089221	WITHOUT_CLASSIFICATION	1.361991077892284E-5	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999935916494126	WITHOUT_CLASSIFICATION	6.408350587344431E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999974103048203	WITHOUT_CLASSIFICATION	2.5896951796960438E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999973551393595	WITHOUT_CLASSIFICATION	2.6448606405079764E-5	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999590477389664	WITHOUT_CLASSIFICATION	4.09522610336659E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999835847840974	WITHOUT_CLASSIFICATION	1.641521590259177E-5	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9998756837503718	WITHOUT_CLASSIFICATION	1.243162496281488E-4	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999941958403353	WITHOUT_CLASSIFICATION	5.804159664586496E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999941958403353	WITHOUT_CLASSIFICATION	5.804159664586496E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999877563538833	WITHOUT_CLASSIFICATION	1.2243646116768466E-5	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999897341027963	WITHOUT_CLASSIFICATION	1.0265897203585917E-5	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999995351540617	WITHOUT_CLASSIFICATION	4.6484593833977574E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721579313373	WITHOUT_CLASSIFICATION	2.7842068662660893E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999931720922846	WITHOUT_CLASSIFICATION	6.827907715388596E-6	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754025906687	WITHOUT_CLASSIFICATION	2.4597409331194277E-5	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999998612121366	WITHOUT_CLASSIFICATION	1.387878633962304E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999844790709748	WITHOUT_CLASSIFICATION	1.5520929025232822E-5	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999997963803074	WITHOUT_CLASSIFICATION	2.0361969259997816E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999601502958743	WITHOUT_CLASSIFICATION	3.984970412569589E-5	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721243902524	WITHOUT_CLASSIFICATION	2.7875609747555056E-5	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999176779739523	WITHOUT_CLASSIFICATION	8.232202604780145E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999835916532208	WITHOUT_CLASSIFICATION	1.640834677920041E-5	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999960880880567	WITHOUT_CLASSIFICATION	3.911911943323624E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998408106698532	WITHOUT_CLASSIFICATION	1.591893301468989E-4	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999794741848709	WITHOUT_CLASSIFICATION	2.052581512918071E-5	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999802011830647	WITHOUT_CLASSIFICATION	1.9798816935210136E-5	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999955075731459	WITHOUT_CLASSIFICATION	4.492426854103837E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999990082980825	WITHOUT_CLASSIFICATION	9.917019174556275E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999809714158859	WITHOUT_CLASSIFICATION	1.9028584114020185E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996871162128	WITHOUT_CLASSIFICATION	3.1288378723172964E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999173731887301	WITHOUT_CLASSIFICATION	8.2626811269953E-5	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999956727560148	WITHOUT_CLASSIFICATION	4.3272439852577255E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998994849141756	WITHOUT_CLASSIFICATION	1.0051508582447659E-4	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999705996981947	WITHOUT_CLASSIFICATION	2.9400301805258153E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998064573222951	WITHOUT_CLASSIFICATION	1.9354267770486052E-4	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999899232204176	WITHOUT_CLASSIFICATION	1.0076779582517657E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999338718505894	WITHOUT_CLASSIFICATION	6.612814941065842E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999986045201407	WITHOUT_CLASSIFICATION	1.395479859293251E-6	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999294378224971	WITHOUT_CLASSIFICATION	7.056217750286938E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999509372424792	WITHOUT_CLASSIFICATION	4.906275752080497E-4	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999952671756661	WITHOUT_CLASSIFICATION	4.732824333911536E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.994744546673108	WITHOUT_CLASSIFICATION	0.005255453326892109	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997020974087	WITHOUT_CLASSIFICATION	2.9790259127030247E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999988499864922	WITHOUT_CLASSIFICATION	1.1500135077955548E-5	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999842535429769	WITHOUT_CLASSIFICATION	1.574645702301081E-5	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.999864643184243	WITHOUT_CLASSIFICATION	1.3535681575703684E-4	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999762737137035	WITHOUT_CLASSIFICATION	2.3726286296554158E-5	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999987204309525	WITHOUT_CLASSIFICATION	1.2795690474885018E-5	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999615133655279	WITHOUT_CLASSIFICATION	3.848663447227273E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999944165813219	WITHOUT_CLASSIFICATION	5.583418678185943E-6	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999944267292985	WITHOUT_CLASSIFICATION	5.5732707015003076E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996392730390185	WITHOUT_CLASSIFICATION	3.60726960981491E-4	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999544738808254	WITHOUT_CLASSIFICATION	4.552611917469945E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999332448540595	WITHOUT_CLASSIFICATION	6.675514594048355E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999848798264606	WITHOUT_CLASSIFICATION	1.5120173539498646E-5	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9993497601584458	WITHOUT_CLASSIFICATION	6.502398415542817E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999906360424603	WITHOUT_CLASSIFICATION	9.363957539702765E-5	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9983343612856593	WITHOUT_CLASSIFICATION	0.0016656387143406544	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999772823343616	WITHOUT_CLASSIFICATION	2.2717665638417997E-5	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9947214435766589	WITHOUT_CLASSIFICATION	0.005278556423341026	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999964855812506	WITHOUT_CLASSIFICATION	3.514418749389962E-5	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999973889463702	WITHOUT_CLASSIFICATION	2.611053629647031E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996480969889253	WITHOUT_CLASSIFICATION	3.519030110747155E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999216424915266	WITHOUT_CLASSIFICATION	7.835750847346239E-5	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999881407843142	WITHOUT_CLASSIFICATION	1.1859215685881572E-5	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9992854570731603	WITHOUT_CLASSIFICATION	7.145429268397083E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999934717890387	WITHOUT_CLASSIFICATION	6.528210961328025E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999588474390523	WITHOUT_CLASSIFICATION	4.115256094776453E-5	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998463499651057	WITHOUT_CLASSIFICATION	1.5365003489425976E-4	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999252200451221	WITHOUT_CLASSIFICATION	7.477995487801146E-5	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999884479829372	WITHOUT_CLASSIFICATION	1.1552017062794315E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999626751414493	WITHOUT_CLASSIFICATION	3.732485855069449E-5	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999101931114	WITHOUT_CLASSIFICATION	8.980688861183119E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999888228923396	WITHOUT_CLASSIFICATION	1.1177107660397465E-4	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995773839725488	WITHOUT_CLASSIFICATION	4.226160274512588E-4	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999992878810613	WITHOUT_CLASSIFICATION	7.1211893870316725E-6	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998239282063356	WITHOUT_CLASSIFICATION	1.760717936644349E-4	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999989459950691	WITHOUT_CLASSIFICATION	1.0540049309790922E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999829252005032	WITHOUT_CLASSIFICATION	1.7074799496748515E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999245847457	WITHOUT_CLASSIFICATION	7.541525428766614E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999972982438574	WITHOUT_CLASSIFICATION	2.7017561426656655E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998930555281704	WITHOUT_CLASSIFICATION	1.0694447182958339E-4	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999625218713657	WITHOUT_CLASSIFICATION	3.7478128634259795E-5	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999939025919341	WITHOUT_CLASSIFICATION	6.09740806587213E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999822920195272	WITHOUT_CLASSIFICATION	1.770798047281736E-5	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9998737965989712	WITHOUT_CLASSIFICATION	1.26203401028741E-4	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999994800564218	WITHOUT_CLASSIFICATION	5.199435782507925E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999189509961129	WITHOUT_CLASSIFICATION	8.104900388707327E-5	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999250839373858	WITHOUT_CLASSIFICATION	7.491606261420039E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996802258845846	WITHOUT_CLASSIFICATION	3.1977411541539056E-4	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999486046958863	WITHOUT_CLASSIFICATION	5.139530411380608E-5	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999954163067104	WITHOUT_CLASSIFICATION	4.5836932895915716E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999802904352054	WITHOUT_CLASSIFICATION	1.970956479461442E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999919436289171	WITHOUT_CLASSIFICATION	8.056371082921505E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999325880357764	WITHOUT_CLASSIFICATION	6.74119642235654E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998462048638389	WITHOUT_CLASSIFICATION	1.5379513616103717E-4	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997810284244268	WITHOUT_CLASSIFICATION	2.1897157557327946E-4	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999962072260428	WITHOUT_CLASSIFICATION	3.7927739572067756E-5	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998065493331072	WITHOUT_CLASSIFICATION	1.9345066689276772E-4	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998572290121783	WITHOUT_CLASSIFICATION	1.427709878216374E-4	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998565440026224	WITHOUT_CLASSIFICATION	1.4345599737760676E-4	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999547052078575	WITHOUT_CLASSIFICATION	4.5294792142494486E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999753170685364	WITHOUT_CLASSIFICATION	2.4682931463631512E-5	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999985620230183	WITHOUT_CLASSIFICATION	1.4379769816968944E-5	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999823976525929	WITHOUT_CLASSIFICATION	1.760234740711779E-5	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998940428823953	WITHOUT_CLASSIFICATION	1.0595711760470985E-4	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999941365875157	WITHOUT_CLASSIFICATION	5.8634124842797144E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999654974343753	WITHOUT_CLASSIFICATION	3.450256562462718E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999654974343753	WITHOUT_CLASSIFICATION	3.450256562462718E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998294176356626	WITHOUT_CLASSIFICATION	1.705823643374604E-4	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998441180686393	WITHOUT_CLASSIFICATION	1.5588193136076945E-4	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999722164796585	WITHOUT_CLASSIFICATION	2.7783520341506883E-5	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9997993983582693	WITHOUT_CLASSIFICATION	2.0060164173075508E-4	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999865986541957	WITHOUT_CLASSIFICATION	1.3401345804165153E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9989662429287121	WITHOUT_CLASSIFICATION	0.001033757071288009	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9988385208478588	WITHOUT_CLASSIFICATION	0.0011614791521411753	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999933405171484	WITHOUT_CLASSIFICATION	6.6594828516189804E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991648844904037	WITHOUT_CLASSIFICATION	8.351155095963598E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999949687355332	WITHOUT_CLASSIFICATION	5.031264466819038E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999788688728529	WITHOUT_CLASSIFICATION	2.1131127147147494E-5	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998940763220183	WITHOUT_CLASSIFICATION	1.0592367798167557E-4	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999997237274031	WITHOUT_CLASSIFICATION	2.7627259689657294E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999996763166142	WITHOUT_CLASSIFICATION	3.2368338579131955E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999417361590074	WITHOUT_CLASSIFICATION	5.826384099251856E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999893813042896	WITHOUT_CLASSIFICATION	1.061869571043696E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999893813042896	WITHOUT_CLASSIFICATION	1.061869571043696E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999929212937053	WITHOUT_CLASSIFICATION	7.078706294729915E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999211983345975	WITHOUT_CLASSIFICATION	7.880166540244818E-5	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999934180418608	WITHOUT_CLASSIFICATION	6.581958139290346E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999833143664436	WITHOUT_CLASSIFICATION	1.6685633556354562E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999949870659675	WITHOUT_CLASSIFICATION	5.012934032513821E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918256794614	WITHOUT_CLASSIFICATION	8.174320538597538E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918256794614	WITHOUT_CLASSIFICATION	8.174320538597538E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999580486309606	WITHOUT_CLASSIFICATION	4.1951369039485825E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999841514734442	WITHOUT_CLASSIFICATION	1.5848526555740194E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999660767534226	WITHOUT_CLASSIFICATION	3.392324657744454E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999708423435	WITHOUT_CLASSIFICATION	2.915765652199234E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998920166879225	WITHOUT_CLASSIFICATION	1.0798331207752982E-4	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999967378959622	WITHOUT_CLASSIFICATION	3.2621040378449867E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999996157186129	WITHOUT_CLASSIFICATION	3.842813870916586E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985464158554	WITHOUT_CLASSIFICATION	1.4535841446615626E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998145938157409	WITHOUT_CLASSIFICATION	1.854061842590768E-4	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999961826515416	WITHOUT_CLASSIFICATION	3.817348458427236E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999732322536035	WITHOUT_CLASSIFICATION	2.6767746396573355E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9966049632044769	WITHOUT_CLASSIFICATION	0.0033950367955231224	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999905906601172	WITHOUT_CLASSIFICATION	9.409339882810718E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997096127609986	WITHOUT_CLASSIFICATION	2.9038723900149874E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998994618473526	WITHOUT_CLASSIFICATION	1.0053815264743127E-4	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999703996886022	WITHOUT_CLASSIFICATION	2.9600311397720622E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999857892732528	WITHOUT_CLASSIFICATION	1.4210726747197123E-4	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999732803610552	WITHOUT_CLASSIFICATION	2.6719638944834093E-5	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999718380123692	WITHOUT_CLASSIFICATION	2.816198763085013E-5	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999856908580291	WITHOUT_CLASSIFICATION	1.4309141970936278E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999175138405723	WITHOUT_CLASSIFICATION	8.24861594276662E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999891058342434	WITHOUT_CLASSIFICATION	1.089416575652856E-5	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999740474629994	WITHOUT_CLASSIFICATION	2.595253700062299E-5	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999960652412777	WITHOUT_CLASSIFICATION	3.9347587222919035E-5	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999484027321015	WITHOUT_CLASSIFICATION	5.1597267898457074E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999990437504406	WITHOUT_CLASSIFICATION	9.562495593996139E-6	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999947807841993	WITHOUT_CLASSIFICATION	5.2192158006899275E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990560469154	WITHOUT_CLASSIFICATION	9.439530845492737E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998643268451956	WITHOUT_CLASSIFICATION	1.356731548044395E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.999937290339891	WITHOUT_CLASSIFICATION	6.270966010903151E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999399392675844	WITHOUT_CLASSIFICATION	6.0060732415676655E-5	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9993835164755672	WITHOUT_CLASSIFICATION	6.164835244327683E-4	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998241822827124	WITHOUT_CLASSIFICATION	1.7581771728760587E-4	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998298166485277	WITHOUT_CLASSIFICATION	1.7018335147233804E-4	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999667911792172	WITHOUT_CLASSIFICATION	3.320882078281425E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999965232352841	WITHOUT_CLASSIFICATION	3.4767647159823133E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999945604039321	WITHOUT_CLASSIFICATION	5.43959606790895E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995595294219403	WITHOUT_CLASSIFICATION	4.404705780597242E-4	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999979033215691	WITHOUT_CLASSIFICATION	2.0966784308596144E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999955093386267	WITHOUT_CLASSIFICATION	4.49066137334263E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997901226302635	WITHOUT_CLASSIFICATION	2.0987736973645965E-4	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999629837272355	WITHOUT_CLASSIFICATION	3.701627276447485E-5	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999993080076597	WITHOUT_CLASSIFICATION	6.919923403379737E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998163327965944	WITHOUT_CLASSIFICATION	1.836672034056049E-4	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999945604039321	WITHOUT_CLASSIFICATION	5.43959606790895E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995595294219403	WITHOUT_CLASSIFICATION	4.404705780597242E-4	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9990633784866743	WITHOUT_CLASSIFICATION	9.366215133256032E-4	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998887178293495	WITHOUT_CLASSIFICATION	1.1128217065045642E-4	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999995590617856	WITHOUT_CLASSIFICATION	4.409382143879248E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999763671443384	WITHOUT_CLASSIFICATION	2.3632855661569258E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999512775183913	WITHOUT_CLASSIFICATION	4.872248160868739E-5	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998990718475419	WITHOUT_CLASSIFICATION	1.0092815245816823E-4	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999834293944022	WITHOUT_CLASSIFICATION	1.657060559780201E-4	TEST
// }	WITHOUT_CLASSIFICATION	0.9999453616560869	WITHOUT_CLASSIFICATION	5.463834391305838E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999953898169334	WITHOUT_CLASSIFICATION	4.6101830665884445E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999474058508907	WITHOUT_CLASSIFICATION	5.259414910936654E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999946632156259	WITHOUT_CLASSIFICATION	5.33678437400821E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999474058508907	WITHOUT_CLASSIFICATION	5.259414910936654E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998797399156583	WITHOUT_CLASSIFICATION	1.2026008434181006E-4	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997035423831705	WITHOUT_CLASSIFICATION	2.9645761682949403E-4	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998797399156583	WITHOUT_CLASSIFICATION	1.2026008434181006E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998774271201343	WITHOUT_CLASSIFICATION	1.2257287986567955E-4	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999953602101796	WITHOUT_CLASSIFICATION	4.639789820399697E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9993640435893111	WITHOUT_CLASSIFICATION	6.359564106888755E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9993640435893111	WITHOUT_CLASSIFICATION	6.359564106888755E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997081125813593	WITHOUT_CLASSIFICATION	2.9188741864071796E-4	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997098680061853	WITHOUT_CLASSIFICATION	2.901319938146948E-4	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997081125813593	WITHOUT_CLASSIFICATION	2.9188741864071796E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997897024081207	WITHOUT_CLASSIFICATION	2.1029759187921458E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999342870889399	WITHOUT_CLASSIFICATION	6.571291106011398E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999392816643086	WITHOUT_CLASSIFICATION	6.071833569137869E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9993057723848017	WITHOUT_CLASSIFICATION	6.942276151982696E-4	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999427154005548	WITHOUT_CLASSIFICATION	5.728459944516687E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999373541004698	WITHOUT_CLASSIFICATION	6.26458995302395E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999668516706588	WITHOUT_CLASSIFICATION	3.314832934114823E-5	TEST
//types	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999946214873798	WITHOUT_CLASSIFICATION	5.3785126201825245E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997488581558964	WITHOUT_CLASSIFICATION	2.511418441035544E-4	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999908390101728	WITHOUT_CLASSIFICATION	9.160989827177113E-6	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999871339375517	WITHOUT_CLASSIFICATION	1.2866062448225107E-5	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999881271595153	WITHOUT_CLASSIFICATION	1.1872840484708846E-5	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999970661424613	WITHOUT_CLASSIFICATION	2.93385753872655E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999818184709836	WITHOUT_CLASSIFICATION	1.818152901649118E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999994607444497	WITHOUT_CLASSIFICATION	5.392555502926834E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998714025364377	WITHOUT_CLASSIFICATION	1.2859746356238047E-4	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999381633470316	WITHOUT_CLASSIFICATION	6.183665296843832E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999985236260932	WITHOUT_CLASSIFICATION	1.4763739068033492E-5	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999035800375921	WITHOUT_CLASSIFICATION	9.641996240790211E-4	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999448099297338	WITHOUT_CLASSIFICATION	5.519007026625136E-5	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999938086844604	WITHOUT_CLASSIFICATION	6.191315539605009E-5	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995297992094635	WITHOUT_CLASSIFICATION	4.702007905364664E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999871818972051	WITHOUT_CLASSIFICATION	1.2818102794926313E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999392816643086	WITHOUT_CLASSIFICATION	6.071833569137869E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999914862892046	WITHOUT_CLASSIFICATION	8.513710795383179E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998661652768046	WITHOUT_CLASSIFICATION	1.3383472319539305E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9973063143957884	WITHOUT_CLASSIFICATION	0.0026936856042115804	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999394874139466	WITHOUT_CLASSIFICATION	6.0512586053514866E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999939220824638	WITHOUT_CLASSIFICATION	6.077917536179861E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998959149216564	WITHOUT_CLASSIFICATION	1.0408507834363768E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997897024081207	WITHOUT_CLASSIFICATION	2.1029759187921458E-4	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9997897024081207	WITHOUT_CLASSIFICATION	2.1029759187921458E-4	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999289873228395	WITHOUT_CLASSIFICATION	7.10126771604605E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998887819125435	WITHOUT_CLASSIFICATION	1.1121808745645315E-4	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999442875323009	WITHOUT_CLASSIFICATION	5.5712467699219066E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999318334416976	WITHOUT_CLASSIFICATION	6.816655830243813E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9988595018851837	WITHOUT_CLASSIFICATION	0.0011404981148163207	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999866564159521	WITHOUT_CLASSIFICATION	1.3343584047953573E-5	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999972915824016	WITHOUT_CLASSIFICATION	2.7084175984540434E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999837163032275	WITHOUT_CLASSIFICATION	1.6283696772524853E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998572310507353	WITHOUT_CLASSIFICATION	1.4276894926468578E-4	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999464982944	WITHOUT_CLASSIFICATION	5.350170560021568E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997488581558964	WITHOUT_CLASSIFICATION	2.511418441035544E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999374494801376	WITHOUT_CLASSIFICATION	6.255051986239333E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999464982944	WITHOUT_CLASSIFICATION	5.350170560021568E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999977637627804	WITHOUT_CLASSIFICATION	2.2362372195309443E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999996225318025	WITHOUT_CLASSIFICATION	3.774681974553927E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999253588352401	WITHOUT_CLASSIFICATION	7.46411647598758E-5	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9998291274391102	WITHOUT_CLASSIFICATION	1.7087256088975418E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999577254523777	WITHOUT_CLASSIFICATION	4.2274547622299004E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999342917953	WITHOUT_CLASSIFICATION	6.570820470207835E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977431233297	WITHOUT_CLASSIFICATION	2.2568766702625283E-6	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.99998545857204	WITHOUT_CLASSIFICATION	1.4541427959884126E-5	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999889801378758	WITHOUT_CLASSIFICATION	1.1019862124293234E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999610622920165	WITHOUT_CLASSIFICATION	3.8937707983408556E-5	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999931469274589	WITHOUT_CLASSIFICATION	6.853072541102713E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999464982944	WITHOUT_CLASSIFICATION	5.350170560021568E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999577254523777	WITHOUT_CLASSIFICATION	4.2274547622299004E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977431233297	WITHOUT_CLASSIFICATION	2.2568766702625283E-6	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999092482787242	WITHOUT_CLASSIFICATION	9.075172127572873E-5	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999992613829184	WITHOUT_CLASSIFICATION	7.38617081657823E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999829438303157	WITHOUT_CLASSIFICATION	1.7056169684259476E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997672407297188	WITHOUT_CLASSIFICATION	2.327592702812316E-4	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999963369334881	WITHOUT_CLASSIFICATION	3.6630665119223023E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999945594722885	WITHOUT_CLASSIFICATION	5.440527711458405E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999977637627804	WITHOUT_CLASSIFICATION	2.2362372195309443E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997325968444108	WITHOUT_CLASSIFICATION	2.6740315558919755E-4	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999384230042511	WITHOUT_CLASSIFICATION	6.15769957489029E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997265146275611	WITHOUT_CLASSIFICATION	2.734853724388744E-4	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999822903401606	WITHOUT_CLASSIFICATION	1.7709659839397734E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998202254993419	WITHOUT_CLASSIFICATION	1.7977450065807913E-4	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999729167525973	WITHOUT_CLASSIFICATION	2.708324740276463E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998774271201343	WITHOUT_CLASSIFICATION	1.2257287986567955E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910376267025	WITHOUT_CLASSIFICATION	8.96237329739219E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999610883735518	WITHOUT_CLASSIFICATION	3.891162644821635E-5	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998135453234253	WITHOUT_CLASSIFICATION	1.864546765747012E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999704300849718	WITHOUT_CLASSIFICATION	2.956991502821975E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999586967911491	WITHOUT_CLASSIFICATION	4.130320885095376E-5	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999944460351176	WITHOUT_CLASSIFICATION	5.553964882493408E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999946001346979	WITHOUT_CLASSIFICATION	5.399865302042222E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999748306859575	WITHOUT_CLASSIFICATION	2.5169314042449366E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999945594722885	WITHOUT_CLASSIFICATION	5.440527711458405E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.999937635351984	WITHOUT_CLASSIFICATION	6.236464801610466E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999981683057795	WITHOUT_CLASSIFICATION	1.8316942204975155E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9998186649805225	WITHOUT_CLASSIFICATION	1.8133501947743087E-4	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999977863501601	WITHOUT_CLASSIFICATION	2.2136498397796793E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999922003155094	WITHOUT_CLASSIFICATION	7.799684490588133E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998069060123044	WITHOUT_CLASSIFICATION	1.9309398769557846E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998722891150003	WITHOUT_CLASSIFICATION	1.2771088499976893E-4	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998967375096102	WITHOUT_CLASSIFICATION	1.0326249038984679E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999491155782795	WITHOUT_CLASSIFICATION	5.0884421720570895E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998785421861757	WITHOUT_CLASSIFICATION	1.2145781382441675E-4	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999459460176902	WITHOUT_CLASSIFICATION	5.405398230992354E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999434457592554	WITHOUT_CLASSIFICATION	5.6554240744560044E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999984400453417	WITHOUT_CLASSIFICATION	1.559954658359115E-6	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999915652135251	WITHOUT_CLASSIFICATION	8.434786474880107E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999650780075799	WITHOUT_CLASSIFICATION	3.492199242008236E-5	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999964038257121	WITHOUT_CLASSIFICATION	3.596174287987033E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999722747577527	WITHOUT_CLASSIFICATION	2.7725242247273642E-5	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997004889106696	WITHOUT_CLASSIFICATION	2.9951108933036464E-4	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999697659390776	WITHOUT_CLASSIFICATION	3.0234060922503847E-5	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999795959207665	WITHOUT_CLASSIFICATION	2.0404079233506762E-5	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999945153505873	WITHOUT_CLASSIFICATION	5.484649412713873E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999617935751892	WITHOUT_CLASSIFICATION	3.820642481075078E-5	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9960518168253288	WITHOUT_CLASSIFICATION	0.003948183174671121	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9991593327908557	WITHOUT_CLASSIFICATION	8.406672091444653E-4	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997154885103628	WITHOUT_CLASSIFICATION	2.84511489637147E-4	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999744468595309	WITHOUT_CLASSIFICATION	2.5553140469189765E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994411139361351	WITHOUT_CLASSIFICATION	5.58886063864867E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999757360490084	WITHOUT_CLASSIFICATION	2.4263950991709986E-5	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999911593786204	WITHOUT_CLASSIFICATION	8.840621379529218E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999888941377393	WITHOUT_CLASSIFICATION	1.110586226065805E-5	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995356191904192	WITHOUT_CLASSIFICATION	4.643808095807745E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999880814234468	WITHOUT_CLASSIFICATION	1.1918576553235615E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999637006658114	WITHOUT_CLASSIFICATION	3.629933418854484E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999771331131482	WITHOUT_CLASSIFICATION	2.2866886851844726E-5	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999525131186524	WITHOUT_CLASSIFICATION	4.7486881347715186E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999637006658114	WITHOUT_CLASSIFICATION	3.629933418854484E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999880814234468	WITHOUT_CLASSIFICATION	1.1918576553235615E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999771331131482	WITHOUT_CLASSIFICATION	2.2866886851844726E-5	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999535534240085	WITHOUT_CLASSIFICATION	4.644657599160584E-5	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999832043026491	WITHOUT_CLASSIFICATION	1.6795697350994713E-5	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997170356619198	WITHOUT_CLASSIFICATION	2.8296433808016084E-4	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999923166913264	WITHOUT_CLASSIFICATION	7.683308673651913E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999989333564397	WITHOUT_CLASSIFICATION	1.066643560204503E-6	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9976111194632447	WITHOUT_CLASSIFICATION	0.002388880536755258	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9992849417550712	WITHOUT_CLASSIFICATION	7.15058244928855E-4	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998674677565836	WITHOUT_CLASSIFICATION	1.325322434163815E-4	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999695790685554	WITHOUT_CLASSIFICATION	3.042093144465126E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999196794664944	WITHOUT_CLASSIFICATION	8.032053350557094E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999950470083447	WITHOUT_CLASSIFICATION	4.952991655301002E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999111309381407	WITHOUT_CLASSIFICATION	8.886906185933008E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999779842936757	WITHOUT_CLASSIFICATION	2.2015706324247454E-5	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999911379070284	WITHOUT_CLASSIFICATION	8.862092971604859E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999753900381704	WITHOUT_CLASSIFICATION	2.46099618296727E-5	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999793492013089	WITHOUT_CLASSIFICATION	2.065079869105708E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999315374856345	WITHOUT_CLASSIFICATION	6.846251436547268E-5	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999986940187535	WITHOUT_CLASSIFICATION	1.3059812465393048E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999900653738729	WITHOUT_CLASSIFICATION	9.934626127202537E-6	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999738850619775	WITHOUT_CLASSIFICATION	2.6114938022543108E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999639327472091	WITHOUT_CLASSIFICATION	3.606725279098716E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999979701324093	WITHOUT_CLASSIFICATION	2.0298675907375817E-6	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998774429534876	WITHOUT_CLASSIFICATION	1.2255704651248245E-4	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999610056992733	WITHOUT_CLASSIFICATION	3.899430072675912E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999738850619775	WITHOUT_CLASSIFICATION	2.6114938022543108E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999738850619775	WITHOUT_CLASSIFICATION	2.6114938022543108E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999960142543921	WITHOUT_CLASSIFICATION	3.985745607856644E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999960142543921	WITHOUT_CLASSIFICATION	3.985745607856644E-6	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999830127249452	WITHOUT_CLASSIFICATION	1.6987275054885757E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999315374856345	WITHOUT_CLASSIFICATION	6.846251436547268E-5	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999138451160327	WITHOUT_CLASSIFICATION	8.615488396730658E-5	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999908742334435	WITHOUT_CLASSIFICATION	9.125766556508287E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998992678803794	WITHOUT_CLASSIFICATION	1.0073211962048299E-4	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998992678803794	WITHOUT_CLASSIFICATION	1.0073211962048299E-4	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.99995473027127	WITHOUT_CLASSIFICATION	4.526972873000145E-5	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9991651702685674	WITHOUT_CLASSIFICATION	8.348297314326574E-4	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999877543935867	WITHOUT_CLASSIFICATION	1.2245606413269382E-5	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999021593655107	WITHOUT_CLASSIFICATION	9.784063448927938E-5	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999216464033577	WITHOUT_CLASSIFICATION	7.835359664231834E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999900623617	WITHOUT_CLASSIFICATION	9.937638183012043E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999969229793493	WITHOUT_CLASSIFICATION	3.0770206507005965E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999753731581655	WITHOUT_CLASSIFICATION	2.462684183449458E-4	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999150241017283	WITHOUT_CLASSIFICATION	8.497589827165483E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999965740577063	WITHOUT_CLASSIFICATION	3.425942293600996E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.999933936953091	WITHOUT_CLASSIFICATION	6.606304690893245E-5	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997984775281464	WITHOUT_CLASSIFICATION	2.0152247185356893E-4	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997885698583214	WITHOUT_CLASSIFICATION	2.114301416785178E-4	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999372570495929	WITHOUT_CLASSIFICATION	6.274295040703911E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9993852027020547	WITHOUT_CLASSIFICATION	6.147972979452556E-4	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999982392824806	WITHOUT_CLASSIFICATION	1.7607175193894164E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756174501333	WITHOUT_CLASSIFICATION	2.4382549866776363E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999924251826534	WITHOUT_CLASSIFICATION	7.5748173465328616E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999905412085771	WITHOUT_CLASSIFICATION	9.458791422864121E-6	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999966164889479	WITHOUT_CLASSIFICATION	3.3835110521370615E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999921953141288	WITHOUT_CLASSIFICATION	7.804685871331037E-6	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999221900046344	WITHOUT_CLASSIFICATION	7.780999536554724E-5	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999964348817716	WITHOUT_CLASSIFICATION	3.565118228331161E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999927798039084	WITHOUT_CLASSIFICATION	7.220196091512287E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996788637108331	WITHOUT_CLASSIFICATION	3.2113628916686257E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999898524265582	WITHOUT_CLASSIFICATION	1.014757344180761E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998785421861757	WITHOUT_CLASSIFICATION	1.2145781382441675E-4	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999256929326389	WITHOUT_CLASSIFICATION	7.430706736111578E-5	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999971839388059	WITHOUT_CLASSIFICATION	2.8160611941243026E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999722447179116	WITHOUT_CLASSIFICATION	2.7755282088442622E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971663751056	WITHOUT_CLASSIFICATION	2.8336248944012852E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999940592076383	WITHOUT_CLASSIFICATION	5.940792361697689E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999940592076383	WITHOUT_CLASSIFICATION	5.940792361697689E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999927023776557	WITHOUT_CLASSIFICATION	7.2976223443855575E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999948310550602	WITHOUT_CLASSIFICATION	5.168944939834162E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999950220203274	WITHOUT_CLASSIFICATION	4.9779796725729945E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999950220203274	WITHOUT_CLASSIFICATION	4.9779796725729945E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999284632488771	WITHOUT_CLASSIFICATION	7.153675112301859E-5	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998988383436953	WITHOUT_CLASSIFICATION	1.0116165630474455E-4	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999788135333554	WITHOUT_CLASSIFICATION	2.1186466644582103E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999517253979135	WITHOUT_CLASSIFICATION	4.827460208655002E-5	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999406644571233	WITHOUT_CLASSIFICATION	5.9335542876841754E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9991525973122976	WITHOUT_CLASSIFICATION	8.474026877023444E-4	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999851867113654	WITHOUT_CLASSIFICATION	1.481328863452795E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999972499034338	WITHOUT_CLASSIFICATION	2.7500965661991167E-5	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999972499034338	WITHOUT_CLASSIFICATION	2.7500965661991167E-5	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999929300289291	WITHOUT_CLASSIFICATION	7.069971070872674E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999537961389646	WITHOUT_CLASSIFICATION	4.620386103545142E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999537961389646	WITHOUT_CLASSIFICATION	4.620386103545142E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999769819224303	WITHOUT_CLASSIFICATION	2.30180775696302E-5	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.99998336800111	WITHOUT_CLASSIFICATION	1.6631998890063235E-5	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999966199169338	WITHOUT_CLASSIFICATION	3.380083066303435E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999886082501297	WITHOUT_CLASSIFICATION	1.1391749870280682E-5	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998099898721634	WITHOUT_CLASSIFICATION	1.9001012783646462E-4	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999651282461979	WITHOUT_CLASSIFICATION	3.4871753802063784E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994329502337777	WITHOUT_CLASSIFICATION	5.670497662223192E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999471126067515	WITHOUT_CLASSIFICATION	5.288739324850129E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996860529296047	WITHOUT_CLASSIFICATION	3.1394707039533146E-4	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999957143227846	WITHOUT_CLASSIFICATION	4.285677215456989E-6	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999924163767865	WITHOUT_CLASSIFICATION	7.583623213525999E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999374536670186	WITHOUT_CLASSIFICATION	6.254633298144459E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999374536670186	WITHOUT_CLASSIFICATION	6.254633298144459E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999374536670186	WITHOUT_CLASSIFICATION	6.254633298144459E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999374536670186	WITHOUT_CLASSIFICATION	6.254633298144459E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999768677721348	WITHOUT_CLASSIFICATION	2.313222786519697E-5	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999311975966715	WITHOUT_CLASSIFICATION	6.880240332846646E-5	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999396240236985	WITHOUT_CLASSIFICATION	6.037597630139323E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9997217210472348	WITHOUT_CLASSIFICATION	2.782789527651146E-4	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9993345526232439	WITHOUT_CLASSIFICATION	6.654473767561513E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9989611792902563	WITHOUT_CLASSIFICATION	0.0010388207097437288	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997686478094164	WITHOUT_CLASSIFICATION	2.3135219058349795E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999992651527155	WITHOUT_CLASSIFICATION	7.348472844561175E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.999985729174521	WITHOUT_CLASSIFICATION	1.4270825479075581E-5	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999827732179633	WITHOUT_CLASSIFICATION	1.722678203672527E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997845492452434	WITHOUT_CLASSIFICATION	2.1545075475650277E-4	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9036410349637497	WITHOUT_CLASSIFICATION	0.09635896503625033	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998083438638359	WITHOUT_CLASSIFICATION	1.9165613616401575E-4	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999665779387519	WITHOUT_CLASSIFICATION	3.3422061248206335E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997845492452434	WITHOUT_CLASSIFICATION	2.1545075475650277E-4	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9829636405797384	WITHOUT_CLASSIFICATION	0.017036359420261674	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999973523990262	WITHOUT_CLASSIFICATION	2.6476009737791927E-6	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999033762038654	WITHOUT_CLASSIFICATION	9.662379613460377E-5	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998618210799713	WITHOUT_CLASSIFICATION	1.381789200286967E-4	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997748347640948	WITHOUT_CLASSIFICATION	2.2516523590513353E-4	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999250334270982	WITHOUT_CLASSIFICATION	7.496657290187914E-5	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999984357600323	WITHOUT_CLASSIFICATION	1.564239967657237E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999283077091794	WITHOUT_CLASSIFICATION	7.169229082065325E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991789700036	WITHOUT_CLASSIFICATION	8.210299963946265E-6	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999952141345462	WITHOUT_CLASSIFICATION	4.78586545380012E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991789700036	WITHOUT_CLASSIFICATION	8.210299963946265E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999893499134079	WITHOUT_CLASSIFICATION	1.0650086592011859E-5	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998370721533295	WITHOUT_CLASSIFICATION	1.6292784667051028E-4	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995961813641961	WITHOUT_CLASSIFICATION	4.038186358039204E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999977781086902	WITHOUT_CLASSIFICATION	2.221891309822731E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999969314787248	WITHOUT_CLASSIFICATION	3.0685212752691487E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999955896679818	WITHOUT_CLASSIFICATION	4.41033201819243E-5	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881642713987	WITHOUT_CLASSIFICATION	1.183572860127761E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997239880663773	WITHOUT_CLASSIFICATION	2.760119336226718E-4	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881642713987	WITHOUT_CLASSIFICATION	1.183572860127761E-5	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999988530211284	WITHOUT_CLASSIFICATION	1.1469788715999312E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999748426547185	WITHOUT_CLASSIFICATION	2.5157345281436905E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.999979811695765	WITHOUT_CLASSIFICATION	2.018830423499827E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999391205818363	WITHOUT_CLASSIFICATION	6.087941816369484E-4	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999955896679818	WITHOUT_CLASSIFICATION	4.41033201819243E-5	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997239880663773	WITHOUT_CLASSIFICATION	2.760119336226718E-4	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999988530211284	WITHOUT_CLASSIFICATION	1.1469788715999312E-5	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99994123982578	WITHOUT_CLASSIFICATION	5.87601742200944E-5	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999430368091301	WITHOUT_CLASSIFICATION	5.69631908698299E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999739054069996	WITHOUT_CLASSIFICATION	2.6094593000331732E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999748591454178	WITHOUT_CLASSIFICATION	2.5140854582250776E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999869146795239	WITHOUT_CLASSIFICATION	1.308532047608278E-5	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999944005428447	WITHOUT_CLASSIFICATION	5.599457155341087E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756174501333	WITHOUT_CLASSIFICATION	2.4382549866776363E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999748426547185	WITHOUT_CLASSIFICATION	2.5157345281436905E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999974010027878	WITHOUT_CLASSIFICATION	2.5989972122817537E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998138167540762	WITHOUT_CLASSIFICATION	1.8618324592372288E-4	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999824171449284	WITHOUT_CLASSIFICATION	1.7582855071602013E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756174501333	WITHOUT_CLASSIFICATION	2.4382549866776363E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998317336554732	WITHOUT_CLASSIFICATION	1.6826634452691395E-4	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756174501333	WITHOUT_CLASSIFICATION	2.4382549866776363E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999978402875521	WITHOUT_CLASSIFICATION	2.1597124479125263E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999898575385561	WITHOUT_CLASSIFICATION	1.0142461443913926E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997064259948496	WITHOUT_CLASSIFICATION	2.9357400515032445E-4	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999802544152657	WITHOUT_CLASSIFICATION	1.9745584734300457E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.99999863760756	WITHOUT_CLASSIFICATION	1.3623924399370303E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999945617951895	WITHOUT_CLASSIFICATION	5.438204810513746E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999927912879734	WITHOUT_CLASSIFICATION	7.208712026674222E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999904452158216	WITHOUT_CLASSIFICATION	9.55478417839195E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997659614401383	WITHOUT_CLASSIFICATION	2.3403855986173713E-4	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9992922760986618	WITHOUT_CLASSIFICATION	7.077239013382096E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999975165431946	WITHOUT_CLASSIFICATION	2.4834568054469496E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9992917755202249	WITHOUT_CLASSIFICATION	7.082244797751401E-4	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9960254353145538	WITHOUT_CLASSIFICATION	0.003974564685446255	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999373005300725	WITHOUT_CLASSIFICATION	6.269946992752131E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999843841688886	WITHOUT_CLASSIFICATION	1.5615831111395548E-5	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996757699502	WITHOUT_CLASSIFICATION	3.242300498250308E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999969907588641	WITHOUT_CLASSIFICATION	3.009241135878417E-6	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9993010611005675	WITHOUT_CLASSIFICATION	6.989388994324816E-4	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999989463675725	WITHOUT_CLASSIFICATION	1.0536324275496979E-6	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999963631832436	WITHOUT_CLASSIFICATION	3.636816756356751E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994591278437773	WITHOUT_CLASSIFICATION	5.408721562226536E-4	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994591278437773	WITHOUT_CLASSIFICATION	5.408721562226536E-4	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999991824656056	WITHOUT_CLASSIFICATION	8.175343944120127E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999685656449696	WITHOUT_CLASSIFICATION	3.1434355030335986E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9993399623140382	WITHOUT_CLASSIFICATION	6.600376859616802E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999836279285687	WITHOUT_CLASSIFICATION	1.6372071431372893E-5	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999996331571857	WITHOUT_CLASSIFICATION	3.6684281442448036E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999952673904704	WITHOUT_CLASSIFICATION	4.732609529503387E-6	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998068886365757	WITHOUT_CLASSIFICATION	1.931113634243697E-4	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995154428684866	WITHOUT_CLASSIFICATION	4.845571315133557E-4	TEST
//TODO	WITHOUT_CLASSIFICATION	0.974215521670437	WITHOUT_CLASSIFICATION	0.025784478329562953	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999940836315677	WITHOUT_CLASSIFICATION	5.916368432252369E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996449476195176	WITHOUT_CLASSIFICATION	3.550523804823962E-4	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9997494351741969	WITHOUT_CLASSIFICATION	2.505648258030447E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.998529681192266	WITHOUT_CLASSIFICATION	0.0014703188077338474	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999942028739672	WITHOUT_CLASSIFICATION	5.797126032729451E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999986723516554	WITHOUT_CLASSIFICATION	1.3276483446333033E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999701226732157	WITHOUT_CLASSIFICATION	2.9877326784291403E-4	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999697865714099	WITHOUT_CLASSIFICATION	3.0213428590180334E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999697865714099	WITHOUT_CLASSIFICATION	3.0213428590180334E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999971444740547	WITHOUT_CLASSIFICATION	2.8555259451364032E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999904452158216	WITHOUT_CLASSIFICATION	9.55478417839195E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9996988200717473	WITHOUT_CLASSIFICATION	3.0117992825281874E-4	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9996556305225497	WITHOUT_CLASSIFICATION	3.443694774502728E-4	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999967691161427	WITHOUT_CLASSIFICATION	3.23088385728916E-6	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999871992485464	WITHOUT_CLASSIFICATION	1.2800751453471108E-5	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998907529358579	WITHOUT_CLASSIFICATION	1.0924706414205932E-4	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9993683803408288	WITHOUT_CLASSIFICATION	6.316196591712967E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999660162077081	WITHOUT_CLASSIFICATION	3.3983792291884446E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999290558184208	WITHOUT_CLASSIFICATION	7.094418157916439E-5	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999972476292041	WITHOUT_CLASSIFICATION	2.752370795887318E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999999279271197	WITHOUT_CLASSIFICATION	7.207288029481826E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9997790121094745	WITHOUT_CLASSIFICATION	2.2098789052555262E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999939403227821	WITHOUT_CLASSIFICATION	6.059677217890726E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999979087109352	WITHOUT_CLASSIFICATION	2.091289064930444E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998268396258286	WITHOUT_CLASSIFICATION	1.731603741714283E-4	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999958670427159	WITHOUT_CLASSIFICATION	4.132957284135611E-6	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999979897562653	WITHOUT_CLASSIFICATION	2.010243734662061E-6	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999991620158342	WITHOUT_CLASSIFICATION	8.37984165746024E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999986769969323	WITHOUT_CLASSIFICATION	1.3230030676519256E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999701152467836	WITHOUT_CLASSIFICATION	2.9884753216357325E-5	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998583742832047	WITHOUT_CLASSIFICATION	1.4162571679520965E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896776001909	WITHOUT_CLASSIFICATION	1.0322399809192828E-5	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999948040775256	WITHOUT_CLASSIFICATION	5.19592247441064E-6	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999717483199692	WITHOUT_CLASSIFICATION	2.8251680030765895E-5	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999911738579068	WITHOUT_CLASSIFICATION	8.826142093201263E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9975982960109793	WITHOUT_CLASSIFICATION	0.0024017039890207176	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999134207136161	WITHOUT_CLASSIFICATION	8.657928638389513E-5	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999546709835644	WITHOUT_CLASSIFICATION	4.5329016435554516E-5	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997399074781296	WITHOUT_CLASSIFICATION	2.6009252187038405E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999722184139881	WITHOUT_CLASSIFICATION	2.7781586011923348E-5	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999733020675592	WITHOUT_CLASSIFICATION	2.6697932440798458E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999738650216129	WITHOUT_CLASSIFICATION	2.6134978387089818E-5	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999896349379745	WITHOUT_CLASSIFICATION	1.0365062025428937E-5	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9958561816676048	WITHOUT_CLASSIFICATION	0.00414381833239522	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9993029269197402	WITHOUT_CLASSIFICATION	6.970730802597654E-4	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999889779305328	WITHOUT_CLASSIFICATION	1.102206946727653E-5	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998939017924542	WITHOUT_CLASSIFICATION	1.0609820754585404E-4	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998939017924542	WITHOUT_CLASSIFICATION	1.0609820754585404E-4	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999843037292506	WITHOUT_CLASSIFICATION	1.569627074938396E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999990976687769	WITHOUT_CLASSIFICATION	9.023312230962056E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999125563195146	WITHOUT_CLASSIFICATION	8.744368048540144E-4	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999125563195146	WITHOUT_CLASSIFICATION	8.744368048540144E-4	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999956571848371	WITHOUT_CLASSIFICATION	4.342815162989243E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999677086527474	WITHOUT_CLASSIFICATION	3.22913472525393E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999992291301834	WITHOUT_CLASSIFICATION	7.708698166063743E-6	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999412640124	WITHOUT_CLASSIFICATION	5.87359875921004E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999748298183785	WITHOUT_CLASSIFICATION	2.5170181621581298E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999934979386704	WITHOUT_CLASSIFICATION	6.502061329653745E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999934979386704	WITHOUT_CLASSIFICATION	6.502061329653745E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999609782385659	WITHOUT_CLASSIFICATION	3.90217614341307E-5	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9997897024081207	WITHOUT_CLASSIFICATION	2.1029759187921458E-4	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999945597737132	WITHOUT_CLASSIFICATION	5.440226286789933E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999945597737132	WITHOUT_CLASSIFICATION	5.440226286789933E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999956892693268	WITHOUT_CLASSIFICATION	4.310730673161681E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999973911281105	WITHOUT_CLASSIFICATION	2.608871889496512E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999982180240352	WITHOUT_CLASSIFICATION	1.7819759648446703E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999827672361933	WITHOUT_CLASSIFICATION	1.7232763806725042E-5	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999993623290208	WITHOUT_CLASSIFICATION	6.376709792046976E-6	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999945822792543	WITHOUT_CLASSIFICATION	5.417720745743656E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999983410273999	WITHOUT_CLASSIFICATION	1.6589726001702986E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999956683605438	WITHOUT_CLASSIFICATION	4.331639456248349E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999956117572292	WITHOUT_CLASSIFICATION	4.388242770882113E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998796024553245	WITHOUT_CLASSIFICATION	1.203975446756049E-4	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9997989073188814	WITHOUT_CLASSIFICATION	2.0109268111846365E-4	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9997339714585237	WITHOUT_CLASSIFICATION	2.6602854147639017E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9997742369151991	WITHOUT_CLASSIFICATION	2.2576308480094383E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999986330956423	WITHOUT_CLASSIFICATION	1.366904357766196E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999945953374839	WITHOUT_CLASSIFICATION	5.4046625159910215E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997757363284111	WITHOUT_CLASSIFICATION	2.242636715888214E-4	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999938956245985	WITHOUT_CLASSIFICATION	6.1043754014241005E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999791394063893	WITHOUT_CLASSIFICATION	2.0860593610803945E-5	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999898733809418	WITHOUT_CLASSIFICATION	1.0126619058153434E-5	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999570618911605	WITHOUT_CLASSIFICATION	4.293810883942601E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999824714257025	WITHOUT_CLASSIFICATION	1.7528574297505204E-5	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999455816708055	WITHOUT_CLASSIFICATION	5.441832919439303E-5	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9983351980041908	WITHOUT_CLASSIFICATION	0.0016648019958091947	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9993872037705006	WITHOUT_CLASSIFICATION	6.127962294993182E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9993390007131584	WITHOUT_CLASSIFICATION	6.609992868416417E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999973939837591	WITHOUT_CLASSIFICATION	2.6060162408374155E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999918482196897	WITHOUT_CLASSIFICATION	8.151780310275367E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999985073626719	WITHOUT_CLASSIFICATION	1.492637328117499E-6	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999817567514303	WITHOUT_CLASSIFICATION	1.8243248569719774E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999944277567775	WITHOUT_CLASSIFICATION	5.572243222494527E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999799895441706	WITHOUT_CLASSIFICATION	2.0010455829425024E-5	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999851583686972	WITHOUT_CLASSIFICATION	1.4841631302763757E-5	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999993298021925	WITHOUT_CLASSIFICATION	6.701978074873929E-6	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997885127629633	WITHOUT_CLASSIFICATION	2.1148723703671497E-4	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999740219138357	WITHOUT_CLASSIFICATION	2.5978086164268253E-5	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999948210263239	WITHOUT_CLASSIFICATION	5.178973676143895E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999972019582958	WITHOUT_CLASSIFICATION	2.798041704262817E-6	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984442443347	WITHOUT_CLASSIFICATION	1.5557556652459754E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999952057449706	WITHOUT_CLASSIFICATION	4.794255029379457E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999949277956255	WITHOUT_CLASSIFICATION	5.072204374508322E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999946497635767	WITHOUT_CLASSIFICATION	5.350236423340504E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999947099975469	WITHOUT_CLASSIFICATION	5.290002453136861E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.999999545469577	WITHOUT_CLASSIFICATION	4.5453042286225866E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999901852898587	WITHOUT_CLASSIFICATION	9.814710141380968E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999594987786106	WITHOUT_CLASSIFICATION	4.050122138950418E-5	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999948399918317	WITHOUT_CLASSIFICATION	5.160008168266229E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999781036841582	WITHOUT_CLASSIFICATION	2.189631584177415E-5	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999922729798056	WITHOUT_CLASSIFICATION	7.727020194408453E-6	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9945804675848684	WITHOUT_CLASSIFICATION	0.005419532415131669	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999992054860651	WITHOUT_CLASSIFICATION	7.945139349751449E-7	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999989532321706	WITHOUT_CLASSIFICATION	1.0467678294319774E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999821989434104	WITHOUT_CLASSIFICATION	1.780105658947944E-5	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999985332204897	WITHOUT_CLASSIFICATION	1.466779510274375E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999896360440198	WITHOUT_CLASSIFICATION	1.036395598014878E-5	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999965933072732	WITHOUT_CLASSIFICATION	3.4066927266602275E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998678572872872	WITHOUT_CLASSIFICATION	1.3214271271275814E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991088319277	WITHOUT_CLASSIFICATION	8.91168072270754E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991088319277	WITHOUT_CLASSIFICATION	8.91168072270754E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999887748320473	WITHOUT_CLASSIFICATION	1.1225167952837375E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999879482872363	WITHOUT_CLASSIFICATION	1.205171276375387E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999954722520495	WITHOUT_CLASSIFICATION	4.527747950402425E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999940429390655	WITHOUT_CLASSIFICATION	5.957060934534487E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999811483227455	WITHOUT_CLASSIFICATION	1.8851677254433005E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995998197410452	WITHOUT_CLASSIFICATION	4.001802589547948E-4	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999959705890362	WITHOUT_CLASSIFICATION	4.029410963796641E-6	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995954410911	WITHOUT_CLASSIFICATION	4.0455890900164227E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999746134463043	WITHOUT_CLASSIFICATION	2.5386553695719917E-5	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999924296972057	WITHOUT_CLASSIFICATION	7.570302794300295E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999918575037545	WITHOUT_CLASSIFICATION	8.142496245423884E-6	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9990661985477232	WITHOUT_CLASSIFICATION	9.338014522769218E-4	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999969954855492	WITHOUT_CLASSIFICATION	3.004514450826014E-6	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998661360901901	WITHOUT_CLASSIFICATION	1.3386390980979417E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997250353022759	WITHOUT_CLASSIFICATION	2.749646977241766E-4	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997250353022759	WITHOUT_CLASSIFICATION	2.749646977241766E-4	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999849950900216	WITHOUT_CLASSIFICATION	1.500490997828913E-5	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999823621531486	WITHOUT_CLASSIFICATION	1.763784685134266E-5	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998577306553057	WITHOUT_CLASSIFICATION	1.4226934469421904E-4	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999995809383665	WITHOUT_CLASSIFICATION	4.190616334416759E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999853318993119	WITHOUT_CLASSIFICATION	1.4668100687950037E-5	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781594931103	WITHOUT_CLASSIFICATION	2.1840506889736373E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998591830077285	WITHOUT_CLASSIFICATION	1.4081699227150714E-4	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999702235954333	WITHOUT_CLASSIFICATION	2.977640456678194E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999985500030345	WITHOUT_CLASSIFICATION	1.4499969654193707E-6	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997307560147888	WITHOUT_CLASSIFICATION	2.69243985211174E-4	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999952947168786	WITHOUT_CLASSIFICATION	4.705283121396528E-6	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997815599031566	WITHOUT_CLASSIFICATION	2.1844009684331064E-4	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999823748045885	WITHOUT_CLASSIFICATION	1.7625195411537742E-5	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999890142017586	WITHOUT_CLASSIFICATION	1.098579824154382E-5	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999455637751707	WITHOUT_CLASSIFICATION	5.443622482934538E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999970038733068	WITHOUT_CLASSIFICATION	2.9961266932440587E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999738144105215	WITHOUT_CLASSIFICATION	2.618558947846446E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999747072138938	WITHOUT_CLASSIFICATION	2.529278610619872E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999551125197365	WITHOUT_CLASSIFICATION	4.488748026360936E-5	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999962303006878	WITHOUT_CLASSIFICATION	3.7696993121541546E-6	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999905007450332	WITHOUT_CLASSIFICATION	9.499254966766728E-6	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998028542265	WITHOUT_CLASSIFICATION	1.9714577344453166E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999927619397312	WITHOUT_CLASSIFICATION	7.238060268876587E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999372401037399	WITHOUT_CLASSIFICATION	6.275989626018328E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998949476136696	WITHOUT_CLASSIFICATION	1.0505238633036156E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999891643134753	WITHOUT_CLASSIFICATION	1.0835686524778045E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999984263313865	WITHOUT_CLASSIFICATION	1.5736686135548977E-6	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999996206530104	WITHOUT_CLASSIFICATION	3.7934698960806035E-6	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999820738217432	WITHOUT_CLASSIFICATION	1.792617825681504E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999887559853861	WITHOUT_CLASSIFICATION	1.1244014613925854E-5	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996875844500068	WITHOUT_CLASSIFICATION	3.1241554999310165E-4	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999998250277047	WITHOUT_CLASSIFICATION	1.7497229530068871E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999884822209443	WITHOUT_CLASSIFICATION	1.1517779055675146E-5	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999921087502516	WITHOUT_CLASSIFICATION	7.891249748406088E-6	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999845689928629	WITHOUT_CLASSIFICATION	1.5431007137107374E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999968425449492	WITHOUT_CLASSIFICATION	3.157455050864252E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999988538198487	WITHOUT_CLASSIFICATION	1.1461801512942003E-5	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999767558961512	WITHOUT_CLASSIFICATION	2.3244103848733554E-5	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999683407840939	WITHOUT_CLASSIFICATION	3.165921590617103E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999997615926227	WITHOUT_CLASSIFICATION	2.384073772988572E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999443566894948	WITHOUT_CLASSIFICATION	5.564331050521337E-5	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999443566894948	WITHOUT_CLASSIFICATION	5.564331050521337E-5	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999824354630357	WITHOUT_CLASSIFICATION	1.756453696434044E-5	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999991231845629	WITHOUT_CLASSIFICATION	8.768154370972454E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999503210101158	WITHOUT_CLASSIFICATION	4.967898988420124E-4	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999820290063991	WITHOUT_CLASSIFICATION	1.7970993600991318E-5	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999853309689124	WITHOUT_CLASSIFICATION	1.466903108755136E-5	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999648646157356	WITHOUT_CLASSIFICATION	3.513538426435816E-5	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999782969667805	WITHOUT_CLASSIFICATION	2.170303321940619E-5	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9991012521953605	WITHOUT_CLASSIFICATION	8.987478046395212E-4	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999996615855531	WITHOUT_CLASSIFICATION	3.384144469667257E-7	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727960593877	WITHOUT_CLASSIFICATION	2.7203940612280343E-5	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727255363426	WITHOUT_CLASSIFICATION	2.727446365737633E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985312553266494	WITHOUT_CLASSIFICATION	0.0014687446733505703	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9930393120302682	WITHOUT_CLASSIFICATION	0.006960687969731848	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999990184479618	WITHOUT_CLASSIFICATION	9.81552038206007E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999824781024051	WITHOUT_CLASSIFICATION	1.752189759477569E-5	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9988050877299967	WITHOUT_CLASSIFICATION	0.0011949122700033747	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999977063379758	WITHOUT_CLASSIFICATION	2.293662024195174E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999994473017163	WITHOUT_CLASSIFICATION	5.526982837299434E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999908232680617	WITHOUT_CLASSIFICATION	9.176731938303245E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999285222227559	WITHOUT_CLASSIFICATION	7.1477777244191E-5	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998772515092	WITHOUT_CLASSIFICATION	1.2274849088859136E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998908373362257	WITHOUT_CLASSIFICATION	1.091626637742587E-4	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999980123116727	WITHOUT_CLASSIFICATION	1.9876883273030496E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997756752599624	WITHOUT_CLASSIFICATION	2.2432474003766882E-4	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999726311608151	WITHOUT_CLASSIFICATION	2.7368839184804274E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999980737627073	WITHOUT_CLASSIFICATION	1.926237292692015E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999956517602616	WITHOUT_CLASSIFICATION	4.348239738458783E-6	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989424983051566	WITHOUT_CLASSIFICATION	0.001057501694843437	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999476281440557	WITHOUT_CLASSIFICATION	5.2371855944419764E-5	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999958826297618	WITHOUT_CLASSIFICATION	4.117370238230774E-6	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999987643750655	WITHOUT_CLASSIFICATION	1.235624934488932E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999968600028736	WITHOUT_CLASSIFICATION	3.1399971263608635E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999970502706357	WITHOUT_CLASSIFICATION	2.949729364266032E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999998864072699	WITHOUT_CLASSIFICATION	1.135927301008462E-6	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999827582822233	WITHOUT_CLASSIFICATION	1.72417177768271E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999997780483357	WITHOUT_CLASSIFICATION	2.219516643113294E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999841276625994	WITHOUT_CLASSIFICATION	1.5872337400645813E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9996995802629003	WITHOUT_CLASSIFICATION	3.004197370997049E-4	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999956823692853	WITHOUT_CLASSIFICATION	4.317630714699425E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.999979488641409	WITHOUT_CLASSIFICATION	2.0511358591052587E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999951554787463	WITHOUT_CLASSIFICATION	4.844521253784841E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999996418275457	WITHOUT_CLASSIFICATION	3.581724542338335E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999957064319089	WITHOUT_CLASSIFICATION	4.293568091034647E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998892596885165	WITHOUT_CLASSIFICATION	1.1074031148351502E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9982980053784308	WITHOUT_CLASSIFICATION	0.0017019946215691521	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999453376637994	WITHOUT_CLASSIFICATION	5.4662336200644E-5	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997246188165	WITHOUT_CLASSIFICATION	2.7538118346693895E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999969954855492	WITHOUT_CLASSIFICATION	3.004514450826014E-6	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999979914600999	WITHOUT_CLASSIFICATION	2.008539900040572E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999997647202946	WITHOUT_CLASSIFICATION	2.3527970532113535E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999546969870916	WITHOUT_CLASSIFICATION	4.53030129083782E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999985816461262	WITHOUT_CLASSIFICATION	1.4183538737904428E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999870724894165	WITHOUT_CLASSIFICATION	1.2927510583534066E-5	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999691210266011	WITHOUT_CLASSIFICATION	3.0878973398869244E-5	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998229211952037	WITHOUT_CLASSIFICATION	1.770788047964001E-4	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9984236822585413	WITHOUT_CLASSIFICATION	0.0015763177414587235	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999974103048203	WITHOUT_CLASSIFICATION	2.5896951796960438E-5	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999943582184647	WITHOUT_CLASSIFICATION	5.64178153531544E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9996536842285598	WITHOUT_CLASSIFICATION	3.463157714402504E-4	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999847130684217	WITHOUT_CLASSIFICATION	1.5286931578293585E-4	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999906898796658	WITHOUT_CLASSIFICATION	9.310120334134485E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999160561282439	WITHOUT_CLASSIFICATION	8.39438717562153E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998557404330775	WITHOUT_CLASSIFICATION	1.4425956692256964E-4	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996944471098829	WITHOUT_CLASSIFICATION	3.05552890117173E-4	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998607588841	WITHOUT_CLASSIFICATION	1.3924111589956986E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999934220994527	WITHOUT_CLASSIFICATION	6.577900547313132E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998557404330775	WITHOUT_CLASSIFICATION	1.4425956692256964E-4	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9993157983740801	WITHOUT_CLASSIFICATION	6.842016259198687E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997011137349	WITHOUT_CLASSIFICATION	2.988862650613106E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999840848454	WITHOUT_CLASSIFICATION	1.5915154608543208E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999895032054814	WITHOUT_CLASSIFICATION	1.049679451866156E-5	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997651413249652	WITHOUT_CLASSIFICATION	2.348586750348572E-4	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999285339249512	WITHOUT_CLASSIFICATION	7.146607504882137E-5	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999983631571303	WITHOUT_CLASSIFICATION	1.6368428696011881E-6	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9990745554298844	WITHOUT_CLASSIFICATION	9.254445701154993E-4	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999806949751357	WITHOUT_CLASSIFICATION	1.9305024864296852E-4	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999352605710458	WITHOUT_CLASSIFICATION	6.473942895430122E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994417533194057	WITHOUT_CLASSIFICATION	5.582466805943209E-4	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9888412483000574	WITHOUT_CLASSIFICATION	0.011158751699942657	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999976457679777	WITHOUT_CLASSIFICATION	2.3542320224258553E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999861005025108	WITHOUT_CLASSIFICATION	1.389949748909023E-5	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999665398863685	WITHOUT_CLASSIFICATION	3.3460113631519194E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896776001909	WITHOUT_CLASSIFICATION	1.0322399809192828E-5	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999937910677344	WITHOUT_CLASSIFICATION	6.20893226555733E-6	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999984853473007	WITHOUT_CLASSIFICATION	1.514652699272111E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9980093470039907	WITHOUT_CLASSIFICATION	0.0019906529960093122	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999932851322549	WITHOUT_CLASSIFICATION	6.7148677450963255E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999995626129499	WITHOUT_CLASSIFICATION	4.373870501065484E-6	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999997106125036	WITHOUT_CLASSIFICATION	2.893874964056308E-6	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999844784986938	WITHOUT_CLASSIFICATION	1.5521501306189495E-5	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999429029093	WITHOUT_CLASSIFICATION	5.7097090810281406E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999993173101749	WITHOUT_CLASSIFICATION	6.826898250688668E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999695276574783	WITHOUT_CLASSIFICATION	3.0472342521761597E-5	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997716161728458	WITHOUT_CLASSIFICATION	2.2838382715424774E-4	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998408106698532	WITHOUT_CLASSIFICATION	1.591893301468989E-4	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999952373453178	WITHOUT_CLASSIFICATION	4.762654682186743E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999968957595191	WITHOUT_CLASSIFICATION	3.1042404808795376E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999979251117629	WITHOUT_CLASSIFICATION	2.0748882370476734E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998924987405605	WITHOUT_CLASSIFICATION	1.0750125943947129E-4	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999994661638357	WITHOUT_CLASSIFICATION	5.338361643025425E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999993254839539	WITHOUT_CLASSIFICATION	6.745160461946729E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999637980500197	WITHOUT_CLASSIFICATION	3.620194998036418E-5	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995438886907	WITHOUT_CLASSIFICATION	4.561113093648381E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999960314830973	WITHOUT_CLASSIFICATION	3.968516902696401E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999992549935729	WITHOUT_CLASSIFICATION	7.450064271083121E-6	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999994382706919	WITHOUT_CLASSIFICATION	5.617293080254815E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999962072260428	WITHOUT_CLASSIFICATION	3.7927739572067756E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999247920269277	WITHOUT_CLASSIFICATION	7.520797307220478E-5	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999247920269277	WITHOUT_CLASSIFICATION	7.520797307220478E-5	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9989662429287121	WITHOUT_CLASSIFICATION	0.001033757071288009	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999949687355332	WITHOUT_CLASSIFICATION	5.031264466819038E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999833143664436	WITHOUT_CLASSIFICATION	1.6685633556354562E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5884767476620998	WITHOUT_CLASSIFICATION	0.41152325233790027	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999517253979135	WITHOUT_CLASSIFICATION	4.827460208655002E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999517253979135	WITHOUT_CLASSIFICATION	4.827460208655002E-5	TEST
//        }	WITHOUT_CLASSIFICATION	0.999993533643566	WITHOUT_CLASSIFICATION	6.4663564340927465E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998994618473526	WITHOUT_CLASSIFICATION	1.0053815264743127E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999426623249751	WITHOUT_CLASSIFICATION	5.733767502495781E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999175138405723	WITHOUT_CLASSIFICATION	8.24861594276662E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999650008839879	WITHOUT_CLASSIFICATION	3.499911601216095E-5	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999913781474304	WITHOUT_CLASSIFICATION	8.621852569477525E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999986970468108	WITHOUT_CLASSIFICATION	1.3029531892593574E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998270789932354	WITHOUT_CLASSIFICATION	1.729210067645951E-4	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998904165356329	WITHOUT_CLASSIFICATION	1.0958346436710473E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095608558749	WITHOUT_CLASSIFICATION	9.043914412502477E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095608558749	WITHOUT_CLASSIFICATION	9.043914412502477E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998702340229073	WITHOUT_CLASSIFICATION	1.2976597709278025E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999945589347012	WITHOUT_CLASSIFICATION	5.441065298785619E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999686240842453	WITHOUT_CLASSIFICATION	3.137591575469516E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999529919593019	WITHOUT_CLASSIFICATION	4.700804069810523E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910376267025	WITHOUT_CLASSIFICATION	8.96237329739219E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721132886914	WITHOUT_CLASSIFICATION	2.7886711308516866E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999920775178611	WITHOUT_CLASSIFICATION	7.922482138775445E-6	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999057061588111	WITHOUT_CLASSIFICATION	9.429384118887032E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999795672929226	WITHOUT_CLASSIFICATION	2.0432707077515272E-5	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999304953074653	WITHOUT_CLASSIFICATION	6.950469253463975E-5	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999352605710458	WITHOUT_CLASSIFICATION	6.473942895430122E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999817081547943	WITHOUT_CLASSIFICATION	1.829184520583275E-5	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9992816585178584	WITHOUT_CLASSIFICATION	7.183414821414295E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999784343796085	WITHOUT_CLASSIFICATION	2.1565620391369937E-5	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999187979283513	WITHOUT_CLASSIFICATION	8.120207164879901E-5	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997548156899395	WITHOUT_CLASSIFICATION	2.451843100604838E-4	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996784171342641	WITHOUT_CLASSIFICATION	3.2158286573587914E-4	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995574092392289	WITHOUT_CLASSIFICATION	4.425907607711194E-4	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999890568815519	WITHOUT_CLASSIFICATION	1.0943118448103395E-5	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9996493146314774	WITHOUT_CLASSIFICATION	3.506853685224885E-4	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999597944153288	WITHOUT_CLASSIFICATION	4.020558467115227E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999597944153288	WITHOUT_CLASSIFICATION	4.020558467115227E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997845492452434	WITHOUT_CLASSIFICATION	2.1545075475650277E-4	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999721034846	WITHOUT_CLASSIFICATION	2.7896515490548027E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999373807489735	WITHOUT_CLASSIFICATION	6.261925102646783E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995111208500708	WITHOUT_CLASSIFICATION	4.888791499292337E-4	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999921561479784	WITHOUT_CLASSIFICATION	7.843852021545028E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999910631541162	WITHOUT_CLASSIFICATION	8.936845883662215E-6	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999977781086902	WITHOUT_CLASSIFICATION	2.221891309822731E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999996076380988	WITHOUT_CLASSIFICATION	3.923619011708126E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99994123982578	WITHOUT_CLASSIFICATION	5.87601742200944E-5	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999914646580024	WITHOUT_CLASSIFICATION	8.535341997706202E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756174501333	WITHOUT_CLASSIFICATION	2.4382549866776363E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999965922200987	WITHOUT_CLASSIFICATION	3.4077799013228767E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999974793864671	WITHOUT_CLASSIFICATION	2.5206135327916823E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999927313505561	WITHOUT_CLASSIFICATION	7.268649443863201E-6	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999775336503587	WITHOUT_CLASSIFICATION	2.2466349641381543E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999978381981305	WITHOUT_CLASSIFICATION	2.161801869583418E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999858607039489	WITHOUT_CLASSIFICATION	1.4139296051118653E-5	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999697862758355	WITHOUT_CLASSIFICATION	3.0213724164454185E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999059406058863	WITHOUT_CLASSIFICATION	9.405939411359431E-5	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999953537633793	WITHOUT_CLASSIFICATION	4.646236620668369E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999941764220845	WITHOUT_CLASSIFICATION	5.823577915465512E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999996850744662	WITHOUT_CLASSIFICATION	3.1492553376306575E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999982180240352	WITHOUT_CLASSIFICATION	1.7819759648446703E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999123396459554	WITHOUT_CLASSIFICATION	8.766035404462174E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999826777440554	WITHOUT_CLASSIFICATION	1.7322255944720124E-5	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999826777440554	WITHOUT_CLASSIFICATION	1.7322255944720124E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999887710181374	WITHOUT_CLASSIFICATION	1.122898186265829E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998912099315798	WITHOUT_CLASSIFICATION	1.0879006842030786E-4	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999863810945651	WITHOUT_CLASSIFICATION	1.3618905434991183E-5	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999979350707201	WITHOUT_CLASSIFICATION	2.064929279974076E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999881762143021	WITHOUT_CLASSIFICATION	1.182378569775878E-5	TEST
