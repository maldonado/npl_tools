test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998855483058476	WITHOUT_CLASSIFICATION	1.1445169415243138E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9995222805035403	WITHOUT_CLASSIFICATION	4.7771949645970005E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999912092732165	WITHOUT_CLASSIFICATION	8.790726783495862E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999922662883297	WITHOUT_CLASSIFICATION	7.733711670229148E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999994012173465	WITHOUT_CLASSIFICATION	5.987826534852599E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999994012173465	WITHOUT_CLASSIFICATION	5.987826534852599E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999991840059671	WITHOUT_CLASSIFICATION	8.159940329261463E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994019482827	WITHOUT_CLASSIFICATION	5.980517173189669E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999980994545434	WITHOUT_CLASSIFICATION	1.9005454566308564E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905285604497	WITHOUT_CLASSIFICATION	9.471439550259578E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999455837321087	WITHOUT_CLASSIFICATION	5.441626789127208E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999455837321087	WITHOUT_CLASSIFICATION	5.441626789127208E-5	TEST
long	WITHOUT_CLASSIFICATION	0.999696144085757	WITHOUT_CLASSIFICATION	3.038559142429806E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999999795387856	WITHOUT_CLASSIFICATION	2.04612143982462E-7	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999979541628284	WITHOUT_CLASSIFICATION	2.045837171621982E-6	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999978059648216	WITHOUT_CLASSIFICATION	2.1940351785149304E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998288458372	WITHOUT_CLASSIFICATION	1.7115416288305922E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9991663807807033	WITHOUT_CLASSIFICATION	8.336192192966495E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9998887132159391	WITHOUT_CLASSIFICATION	1.1128678406082097E-4	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995063145304893	WITHOUT_CLASSIFICATION	4.93685469510673E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9992856588995801	WITHOUT_CLASSIFICATION	7.143411004199396E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997247738122	WITHOUT_CLASSIFICATION	2.7522618784619396E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.99987582529462	WITHOUT_CLASSIFICATION	1.2417470537999867E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9996965278312065	WITHOUT_CLASSIFICATION	3.0347216879351177E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994870592166	WITHOUT_CLASSIFICATION	5.129407834341506E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998359440773695	WITHOUT_CLASSIFICATION	1.640559226303404E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998359440773695	WITHOUT_CLASSIFICATION	1.640559226303404E-4	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999891987673827	WITHOUT_CLASSIFICATION	1.0801232617325513E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9994781853803103	WITHOUT_CLASSIFICATION	5.218146196897407E-4	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998188326635	WITHOUT_CLASSIFICATION	1.8116733642977083E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999472679523	WITHOUT_CLASSIFICATION	5.273204760624264E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999962378097077	WITHOUT_CLASSIFICATION	3.762190292239687E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999999392280483	WITHOUT_CLASSIFICATION	6.077195170670782E-8	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999951577574547	WITHOUT_CLASSIFICATION	4.842242545254021E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999995063174366	WITHOUT_CLASSIFICATION	4.936825634143863E-7	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.999999994268683	WITHOUT_CLASSIFICATION	5.731317070285848E-9	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999981639914743	WITHOUT_CLASSIFICATION	1.8360085256351438E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992641955835	WITHOUT_CLASSIFICATION	7.358044165356846E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999995853112216	WITHOUT_CLASSIFICATION	4.14688778472716E-7	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999595674631	WITHOUT_CLASSIFICATION	4.043253686249072E-8	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990018195881	WITHOUT_CLASSIFICATION	9.98180411932525E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999981957125631	WITHOUT_CLASSIFICATION	1.8042874368801168E-6	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937914649163	WITHOUT_CLASSIFICATION	6.2085350836627595E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693075630816	WITHOUT_CLASSIFICATION	3.069243691832442E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998695768324	WITHOUT_CLASSIFICATION	1.3042316757781687E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999979971601738	WITHOUT_CLASSIFICATION	2.0028398262104953E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999786305878363	WITHOUT_CLASSIFICATION	2.136941216369979E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999994481138	WITHOUT_CLASSIFICATION	5.518861979896545E-9	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999953095791599	WITHOUT_CLASSIFICATION	4.6904208400158685E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999786305878363	WITHOUT_CLASSIFICATION	2.136941216369979E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999953095791599	WITHOUT_CLASSIFICATION	4.6904208400158685E-6	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999965199980871	WITHOUT_CLASSIFICATION	3.4800019129116877E-6	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999276392784355	WITHOUT_CLASSIFICATION	7.236072156440394E-5	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999987727371914	WITHOUT_CLASSIFICATION	1.2272628086063423E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999988087624189	WITHOUT_CLASSIFICATION	1.1912375811832551E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999993478057152	WITHOUT_CLASSIFICATION	6.521942847887636E-7	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999990434751979	WITHOUT_CLASSIFICATION	9.565248021487486E-7	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999994843146073	WITHOUT_CLASSIFICATION	5.156853927030882E-6	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999808060712227	WITHOUT_CLASSIFICATION	1.919392877725138E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999157560598	WITHOUT_CLASSIFICATION	8.424394019292102E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9997733431708836	WITHOUT_CLASSIFICATION	2.2665682911635822E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994233504261	WITHOUT_CLASSIFICATION	5.766495738180888E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999953095791599	WITHOUT_CLASSIFICATION	4.6904208400158685E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999993541233831	WITHOUT_CLASSIFICATION	6.458766168027955E-7	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999993353818348	WITHOUT_CLASSIFICATION	6.646181652133228E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999984748755715	WITHOUT_CLASSIFICATION	1.5251244286143478E-6	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999940121405569	WITHOUT_CLASSIFICATION	5.98785944309712E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999992731871492	WITHOUT_CLASSIFICATION	7.268128507844481E-7	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998435517504	WITHOUT_CLASSIFICATION	1.5644824958120423E-7	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999978679492713	WITHOUT_CLASSIFICATION	2.132050728758129E-6	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999994467224232	WITHOUT_CLASSIFICATION	5.532775768518519E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999894282989629	WITHOUT_CLASSIFICATION	1.0571701037260498E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999355346241	WITHOUT_CLASSIFICATION	6.44653759768788E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997993179444	WITHOUT_CLASSIFICATION	2.0068205554608403E-7	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968304951622	WITHOUT_CLASSIFICATION	3.1695048378332805E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999992761172809	WITHOUT_CLASSIFICATION	7.238827191595448E-7	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998861054485	WITHOUT_CLASSIFICATION	1.1389455146079445E-7	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999794596371	WITHOUT_CLASSIFICATION	2.0540362888556058E-8	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999507490589	WITHOUT_CLASSIFICATION	4.925094099124534E-8	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999986906979875	WITHOUT_CLASSIFICATION	1.3093020124090189E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999610615696	WITHOUT_CLASSIFICATION	3.8938430390204806E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999972121873079	WITHOUT_CLASSIFICATION	2.7878126921686312E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999999234502162	WITHOUT_CLASSIFICATION	7.654978379195321E-7	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999999420478153	WITHOUT_CLASSIFICATION	5.795218469553467E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997421879903	WITHOUT_CLASSIFICATION	2.578120097443375E-7	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999980934187681	WITHOUT_CLASSIFICATION	1.9065812319038387E-6	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999369411676	WITHOUT_CLASSIFICATION	6.30588323466346E-8	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997421879903	WITHOUT_CLASSIFICATION	2.578120097443375E-7	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999325747221	WITHOUT_CLASSIFICATION	6.742527796583773E-8	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999995890986277	WITHOUT_CLASSIFICATION	4.109013722777022E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999786305878363	WITHOUT_CLASSIFICATION	2.136941216369979E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999981182732551	WITHOUT_CLASSIFICATION	1.8817267448940487E-6	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999995138018302	WITHOUT_CLASSIFICATION	4.861981699016676E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997027418419	WITHOUT_CLASSIFICATION	2.97258158089947E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997027418419	WITHOUT_CLASSIFICATION	2.97258158089947E-7	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999886897234629	WITHOUT_CLASSIFICATION	1.1310276537090753E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999984501639572	WITHOUT_CLASSIFICATION	1.5498360428292773E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999996663726788	WITHOUT_CLASSIFICATION	3.336273212648472E-7	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999310228374	WITHOUT_CLASSIFICATION	6.897716263652737E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996800557028	WITHOUT_CLASSIFICATION	3.1994429719634993E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999989941916624	WITHOUT_CLASSIFICATION	1.0058083375786824E-6	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999984964291456	WITHOUT_CLASSIFICATION	1.5035708544228037E-6	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999990294733777	WITHOUT_CLASSIFICATION	9.705266222872675E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999950494815535	WITHOUT_CLASSIFICATION	4.950518446548972E-6	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999994279564985	WITHOUT_CLASSIFICATION	5.720435014763412E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999977564899898	WITHOUT_CLASSIFICATION	2.243510010129967E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999977564899898	WITHOUT_CLASSIFICATION	2.243510010129967E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997939169804	WITHOUT_CLASSIFICATION	2.0608301960508312E-7	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998274622127	WITHOUT_CLASSIFICATION	1.7253778736520853E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999759153229671	WITHOUT_CLASSIFICATION	2.4084677032925093E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999977564899898	WITHOUT_CLASSIFICATION	2.243510010129967E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997939169804	WITHOUT_CLASSIFICATION	2.0608301960508312E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997939169804	WITHOUT_CLASSIFICATION	2.0608301960508312E-7	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999167335998796	WITHOUT_CLASSIFICATION	8.326640012037315E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999969207647409	WITHOUT_CLASSIFICATION	3.0792352591216845E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998401030893	WITHOUT_CLASSIFICATION	1.5989691069615863E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999931176355331	WITHOUT_CLASSIFICATION	6.882364466839697E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999958886245387	WITHOUT_CLASSIFICATION	4.111375461299277E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999958886245387	WITHOUT_CLASSIFICATION	4.111375461299277E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999979619268194	WITHOUT_CLASSIFICATION	2.0380731806606964E-6	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999969702937659	WITHOUT_CLASSIFICATION	3.0297062340203618E-6	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999951664665837	WITHOUT_CLASSIFICATION	4.833533416239045E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997461382509	WITHOUT_CLASSIFICATION	2.538617491078663E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997461382509	WITHOUT_CLASSIFICATION	2.538617491078663E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999975606901546	WITHOUT_CLASSIFICATION	2.439309845389262E-6	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999910665110957	WITHOUT_CLASSIFICATION	8.933488904299485E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998057910154	WITHOUT_CLASSIFICATION	1.9420898461782775E-7	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999989074959917	WITHOUT_CLASSIFICATION	1.0925040082492816E-6	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999854891056759	WITHOUT_CLASSIFICATION	1.451089432424852E-5	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997835813649	WITHOUT_CLASSIFICATION	2.1641863507636778E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999984592523613	WITHOUT_CLASSIFICATION	1.5407476386676857E-6	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999994117921945	WITHOUT_CLASSIFICATION	5.882078054323659E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999948988431787	WITHOUT_CLASSIFICATION	5.101156821275894E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998057910154	WITHOUT_CLASSIFICATION	1.9420898461782775E-7	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999939527428505	WITHOUT_CLASSIFICATION	6.0472571495153E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999959681795314	WITHOUT_CLASSIFICATION	4.031820468598253E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999959681795314	WITHOUT_CLASSIFICATION	4.031820468598253E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999880583588	WITHOUT_CLASSIFICATION	1.1941641272814754E-8	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999857402738487	WITHOUT_CLASSIFICATION	1.4259726151374679E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999507672107	WITHOUT_CLASSIFICATION	4.923278919606072E-8	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995391427705	WITHOUT_CLASSIFICATION	4.6085722949783183E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999912586763908	WITHOUT_CLASSIFICATION	8.741323609199487E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999951479973276	WITHOUT_CLASSIFICATION	4.852002672389962E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.999994653790223	WITHOUT_CLASSIFICATION	5.3462097770118576E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999977992773862	WITHOUT_CLASSIFICATION	2.200722613729424E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999996849144931	WITHOUT_CLASSIFICATION	3.150855069103081E-7	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994424198578	WITHOUT_CLASSIFICATION	5.575801420803089E-7	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994424198578	WITHOUT_CLASSIFICATION	5.575801420803089E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998855483058476	WITHOUT_CLASSIFICATION	1.1445169415243138E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999990248481134	WITHOUT_CLASSIFICATION	9.751518865269663E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999867078918805	WITHOUT_CLASSIFICATION	1.3292108119525939E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999770786112162	WITHOUT_CLASSIFICATION	2.2921388783834844E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999965282658093	WITHOUT_CLASSIFICATION	3.471734190742775E-6	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999946025401111	WITHOUT_CLASSIFICATION	5.397459888928958E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.999972625268522	WITHOUT_CLASSIFICATION	2.7374731477862608E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999979676391101	WITHOUT_CLASSIFICATION	2.0323608898673072E-6	TEST
new	WITHOUT_CLASSIFICATION	0.9996829451016094	WITHOUT_CLASSIFICATION	3.170548983905469E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.9995695915667386	WITHOUT_CLASSIFICATION	4.304084332613711E-4	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999929119399202	WITHOUT_CLASSIFICATION	7.088060079670037E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999912092732165	WITHOUT_CLASSIFICATION	8.790726783495862E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999922286353269	WITHOUT_CLASSIFICATION	7.771364673059156E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999922286353269	WITHOUT_CLASSIFICATION	7.771364673059156E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999926050345965	WITHOUT_CLASSIFICATION	7.39496540347271E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997295675387792	WITHOUT_CLASSIFICATION	2.704324612207318E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999989314274079	WITHOUT_CLASSIFICATION	1.0685725920321001E-6	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999845922689011	WITHOUT_CLASSIFICATION	1.5407731098892357E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999992894636063	WITHOUT_CLASSIFICATION	7.105363936901869E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999987146794561	WITHOUT_CLASSIFICATION	1.2853205437841982E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999994012173465	WITHOUT_CLASSIFICATION	5.987826534852599E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996413656264	WITHOUT_CLASSIFICATION	3.5863437358704244E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999682035362547	WITHOUT_CLASSIFICATION	3.1796463745259647E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999940506049096	WITHOUT_CLASSIFICATION	5.949395090367064E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999957677391078	WITHOUT_CLASSIFICATION	4.232260892191357E-6	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999703686797352	WITHOUT_CLASSIFICATION	2.963132026478706E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9998447998825392	WITHOUT_CLASSIFICATION	1.5520011746074667E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999876642709684	WITHOUT_CLASSIFICATION	1.2335729031632353E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999722009905	WITHOUT_CLASSIFICATION	2.7799009497786914E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999489554331	WITHOUT_CLASSIFICATION	5.104456688898289E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999995668726301	WITHOUT_CLASSIFICATION	4.3312736986895564E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995927735498	WITHOUT_CLASSIFICATION	4.072264502448542E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999971105906373	WITHOUT_CLASSIFICATION	2.8894093626094784E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9998388068770689	WITHOUT_CLASSIFICATION	1.61193122931103E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9995695915667386	WITHOUT_CLASSIFICATION	4.304084332613711E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999922286353269	WITHOUT_CLASSIFICATION	7.771364673059156E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999876642709684	WITHOUT_CLASSIFICATION	1.2335729031632353E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999991840059671	WITHOUT_CLASSIFICATION	8.159940329261463E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999968688747489	WITHOUT_CLASSIFICATION	3.1311252510122114E-6	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999957078008457	WITHOUT_CLASSIFICATION	4.292199154320215E-6	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999989876121015	WITHOUT_CLASSIFICATION	1.0123878985070584E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999636954760691	WITHOUT_CLASSIFICATION	3.630452393098301E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999986516674861	WITHOUT_CLASSIFICATION	1.3483325138260184E-6	TEST
athrow	WITHOUT_CLASSIFICATION	0.999900054116916	WITHOUT_CLASSIFICATION	9.99458830840249E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999988639757178	WITHOUT_CLASSIFICATION	1.1360242821726914E-6	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999230739501802	WITHOUT_CLASSIFICATION	7.692604981978831E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9998193721562301	WITHOUT_CLASSIFICATION	1.80627843770014E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996200591634673	WITHOUT_CLASSIFICATION	3.799408365327119E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996200591634673	WITHOUT_CLASSIFICATION	3.799408365327119E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999991085159974	WITHOUT_CLASSIFICATION	8.914840026302249E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999998905302303	WITHOUT_CLASSIFICATION	1.0946976975690473E-7	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998143554895546	WITHOUT_CLASSIFICATION	1.8564451044546986E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999499575243924	WITHOUT_CLASSIFICATION	5.0042475607622004E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996383252406	WITHOUT_CLASSIFICATION	3.61674759336018E-7	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999997398114641	WITHOUT_CLASSIFICATION	2.6018853597205483E-7	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999921242318488	WITHOUT_CLASSIFICATION	7.875768151267158E-6	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994019482827	WITHOUT_CLASSIFICATION	5.980517173189669E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999705934409954	WITHOUT_CLASSIFICATION	2.940655900461135E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999981891396682	WITHOUT_CLASSIFICATION	1.8108603317839928E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999981891396682	WITHOUT_CLASSIFICATION	1.8108603317839928E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.999996636450249	WITHOUT_CLASSIFICATION	3.363549750909928E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999962137644421	WITHOUT_CLASSIFICATION	3.7862355578575675E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999925868336291	WITHOUT_CLASSIFICATION	7.413166370885619E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999994515448962	WITHOUT_CLASSIFICATION	5.484551038665766E-7	TEST
int	WITHOUT_CLASSIFICATION	0.999879646173791	WITHOUT_CLASSIFICATION	1.2035382620897945E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999859098659803	WITHOUT_CLASSIFICATION	1.4090134019731723E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9995695915667386	WITHOUT_CLASSIFICATION	4.304084332613711E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999912092732165	WITHOUT_CLASSIFICATION	8.790726783495862E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999876642709684	WITHOUT_CLASSIFICATION	1.2335729031632353E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999876642709684	WITHOUT_CLASSIFICATION	1.2335729031632353E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988955503515	WITHOUT_CLASSIFICATION	1.1044496485138103E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988955503515	WITHOUT_CLASSIFICATION	1.1044496485138103E-6	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999973345519033	WITHOUT_CLASSIFICATION	2.6654480966903716E-6	TEST
load_1	WITHOUT_CLASSIFICATION	0.9998469388490463	WITHOUT_CLASSIFICATION	1.530611509537286E-4	TEST
load_1	WITHOUT_CLASSIFICATION	0.9998469388490463	WITHOUT_CLASSIFICATION	1.530611509537286E-4	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999855189354673	WITHOUT_CLASSIFICATION	1.4481064532777172E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999975768446177	WITHOUT_CLASSIFICATION	2.4231553823432826E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999613056657218	WITHOUT_CLASSIFICATION	3.869433427817854E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999982932394569	WITHOUT_CLASSIFICATION	1.706760543046013E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999987458769752	WITHOUT_CLASSIFICATION	1.2541230247637538E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905285604497	WITHOUT_CLASSIFICATION	9.471439550259578E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905285604497	WITHOUT_CLASSIFICATION	9.471439550259578E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999869747598127	WITHOUT_CLASSIFICATION	1.302524018728226E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999946870612263	WITHOUT_CLASSIFICATION	5.312938773636093E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999600275158549	WITHOUT_CLASSIFICATION	3.9972484145079193E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9998055799990908	WITHOUT_CLASSIFICATION	1.9442000090916424E-4	TEST
char	WITHOUT_CLASSIFICATION	0.9998012341881747	WITHOUT_CLASSIFICATION	1.987658118252917E-4	TEST
short	WITHOUT_CLASSIFICATION	0.9998591041444617	WITHOUT_CLASSIFICATION	1.4089585553843246E-4	TEST
double	WITHOUT_CLASSIFICATION	0.9999455837321087	WITHOUT_CLASSIFICATION	5.441626789127208E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9998949421688034	WITHOUT_CLASSIFICATION	1.0505783119668014E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998949421688034	WITHOUT_CLASSIFICATION	1.0505783119668014E-4	TEST
long	WITHOUT_CLASSIFICATION	0.999696144085757	WITHOUT_CLASSIFICATION	3.038559142429806E-4	TEST
long	WITHOUT_CLASSIFICATION	0.999696144085757	WITHOUT_CLASSIFICATION	3.038559142429806E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999816247023047	WITHOUT_CLASSIFICATION	1.837529769532543E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999816247023047	WITHOUT_CLASSIFICATION	1.837529769532543E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962267958834	WITHOUT_CLASSIFICATION	3.7732041165688794E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962267958834	WITHOUT_CLASSIFICATION	3.7732041165688794E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905285604497	WITHOUT_CLASSIFICATION	9.471439550259578E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999455837321087	WITHOUT_CLASSIFICATION	5.441626789127208E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9998949421688034	WITHOUT_CLASSIFICATION	1.0505783119668014E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998949421688034	WITHOUT_CLASSIFICATION	1.0505783119668014E-4	TEST
long	WITHOUT_CLASSIFICATION	0.999696144085757	WITHOUT_CLASSIFICATION	3.038559142429806E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999816247023047	WITHOUT_CLASSIFICATION	1.837529769532543E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999816247023047	WITHOUT_CLASSIFICATION	1.837529769532543E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999962267958834	WITHOUT_CLASSIFICATION	3.7732041165688794E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999996243858961	WITHOUT_CLASSIFICATION	3.756141038997438E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999999329165426	WITHOUT_CLASSIFICATION	6.708345739274844E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999986236767333	WITHOUT_CLASSIFICATION	1.3763232667055886E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999773211873327	WITHOUT_CLASSIFICATION	2.2678812667355575E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999920718532211	WITHOUT_CLASSIFICATION	7.928146778874353E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9997283145171096	WITHOUT_CLASSIFICATION	2.7168548289041507E-4	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999707917595	WITHOUT_CLASSIFICATION	2.920824044542139E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999968972681615	WITHOUT_CLASSIFICATION	3.1027318385493322E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999999570435398	WITHOUT_CLASSIFICATION	4.2956460104078795E-8	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999987172429523	WITHOUT_CLASSIFICATION	1.2827570477253407E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999988385185908	WITHOUT_CLASSIFICATION	1.161481409130337E-6	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999909359227682	WITHOUT_CLASSIFICATION	9.064077231768659E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999886897234629	WITHOUT_CLASSIFICATION	1.1310276537090753E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9997283145171096	WITHOUT_CLASSIFICATION	2.7168548289041507E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9997283145171096	WITHOUT_CLASSIFICATION	2.7168548289041507E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9997283145171096	WITHOUT_CLASSIFICATION	2.7168548289041507E-4	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997421751526	WITHOUT_CLASSIFICATION	2.578248473716308E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999981015099754	WITHOUT_CLASSIFICATION	1.898490024570401E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999981015099754	WITHOUT_CLASSIFICATION	1.898490024570401E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999929861773028	WITHOUT_CLASSIFICATION	7.013822697158688E-6	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995389097279	WITHOUT_CLASSIFICATION	4.610902721034538E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999997622525287	WITHOUT_CLASSIFICATION	2.377474713581832E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999991813946928	WITHOUT_CLASSIFICATION	8.186053072374643E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999991813946928	WITHOUT_CLASSIFICATION	8.186053072374643E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998288458372	WITHOUT_CLASSIFICATION	1.7115416288305922E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999994494856109	WITHOUT_CLASSIFICATION	5.505143891789814E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999994494856109	WITHOUT_CLASSIFICATION	5.505143891789814E-7	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999757846924916	WITHOUT_CLASSIFICATION	2.4215307508410787E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999988545395773	WITHOUT_CLASSIFICATION	1.1454604227093334E-6	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999987406657725	WITHOUT_CLASSIFICATION	1.2593342274834025E-6	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9993534330659013	WITHOUT_CLASSIFICATION	6.465669340986672E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9996656405209361	WITHOUT_CLASSIFICATION	3.3435947906387516E-4	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9991671809796224	WITHOUT_CLASSIFICATION	8.328190203777139E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9991663807807033	WITHOUT_CLASSIFICATION	8.336192192966495E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9993529951439811	WITHOUT_CLASSIFICATION	6.470048560189657E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9924571977858616	WITHOUT_CLASSIFICATION	0.007542802214138308	TEST
ID	WITHOUT_CLASSIFICATION	0.9987932891253519	WITHOUT_CLASSIFICATION	0.0012067108746481217	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999238291170949	WITHOUT_CLASSIFICATION	7.61708829050468E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9992856588995801	WITHOUT_CLASSIFICATION	7.143411004199396E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999985191686728	WITHOUT_CLASSIFICATION	1.4808313272243495E-6	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999346989927173	WITHOUT_CLASSIFICATION	6.530100728271592E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999904423966111	WITHOUT_CLASSIFICATION	9.557603388909895E-6	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9992856588995801	WITHOUT_CLASSIFICATION	7.143411004199396E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998811106298	WITHOUT_CLASSIFICATION	1.1888937030760652E-7	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999050320082	WITHOUT_CLASSIFICATION	9.496799181684362E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998592972189541	WITHOUT_CLASSIFICATION	1.4070278104594676E-4	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9997217004314038	WITHOUT_CLASSIFICATION	2.782995685961347E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999343880544922	WITHOUT_CLASSIFICATION	6.561194550780514E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999138594094019	WITHOUT_CLASSIFICATION	8.614059059798321E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998679201243954	WITHOUT_CLASSIFICATION	1.3207987560452842E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9996965278312065	WITHOUT_CLASSIFICATION	3.0347216879351177E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999454192020298	WITHOUT_CLASSIFICATION	5.458079797029708E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994870592166	WITHOUT_CLASSIFICATION	5.129407834341506E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999681006537443	WITHOUT_CLASSIFICATION	3.189934625561488E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999961250036976	WITHOUT_CLASSIFICATION	3.874996302399734E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9989365412292179	WITHOUT_CLASSIFICATION	0.001063458770782055	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9991663807807033	WITHOUT_CLASSIFICATION	8.336192192966495E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999454192020298	WITHOUT_CLASSIFICATION	5.458079797029708E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999681006537443	WITHOUT_CLASSIFICATION	3.189934625561488E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9989365412292179	WITHOUT_CLASSIFICATION	0.001063458770782055	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999278148772	WITHOUT_CLASSIFICATION	7.218512280841346E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9997371316486018	WITHOUT_CLASSIFICATION	2.6286835139823807E-4	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998733870873	WITHOUT_CLASSIFICATION	1.2661291264530265E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998359440773695	WITHOUT_CLASSIFICATION	1.640559226303404E-4	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998520931966833	WITHOUT_CLASSIFICATION	1.4790680331661454E-4	TEST
column index	WITHOUT_CLASSIFICATION	0.9999929787260263	WITHOUT_CLASSIFICATION	7.02127397366783E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999956169416746	WITHOUT_CLASSIFICATION	4.3830583254514685E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999987797754943	WITHOUT_CLASSIFICATION	1.2202245056692691E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999780217102524	WITHOUT_CLASSIFICATION	2.1978289747578183E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999992759604932	WITHOUT_CLASSIFICATION	7.240395068109894E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998883297296	WITHOUT_CLASSIFICATION	1.1167027044359677E-7	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999888766272361	WITHOUT_CLASSIFICATION	1.1123372763740619E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999996726002441	WITHOUT_CLASSIFICATION	3.273997558847259E-7	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999490447564	WITHOUT_CLASSIFICATION	5.095524359625494E-8	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9997578853022119	WITHOUT_CLASSIFICATION	2.4211469778817775E-4	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997964145764975	WITHOUT_CLASSIFICATION	2.0358542350250235E-4	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9994781853803103	WITHOUT_CLASSIFICATION	5.218146196897407E-4	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999970104530036	WITHOUT_CLASSIFICATION	2.9895469964225523E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9996125590496657	WITHOUT_CLASSIFICATION	3.87440950334229E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999454192020298	WITHOUT_CLASSIFICATION	5.458079797029708E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999863325343418	WITHOUT_CLASSIFICATION	1.3667465658309599E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999152563852	WITHOUT_CLASSIFICATION	8.474361479520872E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999993380741985	WITHOUT_CLASSIFICATION	6.619258015468367E-7	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9968272195892092	WITHOUT_CLASSIFICATION	0.0031727804107907097	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999922951818554	WITHOUT_CLASSIFICATION	7.704818144642938E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999997696034049	WITHOUT_CLASSIFICATION	2.3039659509355961E-7	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999998796983	WITHOUT_CLASSIFICATION	1.2030170110023483E-9	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997299342336	WITHOUT_CLASSIFICATION	2.70065766348247E-7	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999795375601828	WITHOUT_CLASSIFICATION	2.0462439817278146E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9996183177701592	WITHOUT_CLASSIFICATION	3.816822298407532E-4	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998757849281111	WITHOUT_CLASSIFICATION	1.2421507188885221E-4	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999066250644729	WITHOUT_CLASSIFICATION	9.337493552706953E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999982687864866	WITHOUT_CLASSIFICATION	1.7312135134119765E-6	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999472679523	WITHOUT_CLASSIFICATION	5.273204760624264E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999994062864709	WITHOUT_CLASSIFICATION	5.937135290598043E-7	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996203137325	WITHOUT_CLASSIFICATION	3.79686267609187E-7	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999945314271194	WITHOUT_CLASSIFICATION	5.468572880736304E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.999998995171879	WITHOUT_CLASSIFICATION	1.0048281210523449E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999991758371064	WITHOUT_CLASSIFICATION	8.24162893562582E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999654079848564	WITHOUT_CLASSIFICATION	3.459201514361532E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999565078882	WITHOUT_CLASSIFICATION	4.349211180384948E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999999839247177	WITHOUT_CLASSIFICATION	1.6075282307994782E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999629050201	WITHOUT_CLASSIFICATION	3.7094979893568593E-7	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999972693715183	WITHOUT_CLASSIFICATION	2.7306284816855127E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999986934936529	WITHOUT_CLASSIFICATION	1.3065063471192522E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999986934936529	WITHOUT_CLASSIFICATION	1.3065063471192522E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999972546972988	WITHOUT_CLASSIFICATION	2.7453027010288565E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999989757736273	WITHOUT_CLASSIFICATION	1.0242263727654612E-6	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998872486379	WITHOUT_CLASSIFICATION	1.1275136219446344E-7	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999986055875424	WITHOUT_CLASSIFICATION	1.394412457637272E-6	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999970069838588	WITHOUT_CLASSIFICATION	2.993016141080953E-6	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999995665464225	WITHOUT_CLASSIFICATION	4.33453577571027E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999993899103498	WITHOUT_CLASSIFICATION	6.100896501846806E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999979768645066	WITHOUT_CLASSIFICATION	2.0231354933113596E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999643447647598	WITHOUT_CLASSIFICATION	3.565523524018444E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999952491311084	WITHOUT_CLASSIFICATION	4.750868891702015E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999686662015409	WITHOUT_CLASSIFICATION	3.1333798459136895E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999856919318785	WITHOUT_CLASSIFICATION	1.43080681215252E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999957380194955	WITHOUT_CLASSIFICATION	4.261980504486808E-6	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999981058508841	WITHOUT_CLASSIFICATION	1.8941491158309052E-6	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999998696101773	WITHOUT_CLASSIFICATION	1.3038982269320876E-6	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999993203414725	WITHOUT_CLASSIFICATION	6.79658527392339E-7	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999993052253142	WITHOUT_CLASSIFICATION	6.947746857916039E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999996584623165	WITHOUT_CLASSIFICATION	3.4153768341720453E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956134330499	WITHOUT_CLASSIFICATION	4.386566950093586E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999908763389	WITHOUT_CLASSIFICATION	9.123661101456705E-8	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969802639744	WITHOUT_CLASSIFICATION	3.0197360256662335E-6	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999959842301823	WITHOUT_CLASSIFICATION	4.01576981775573E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999842882529076	WITHOUT_CLASSIFICATION	1.5711747092403216E-5	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999714220777642	WITHOUT_CLASSIFICATION	2.8577922235750516E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999997740408012	WITHOUT_CLASSIFICATION	2.2595919889351218E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999956330778242	WITHOUT_CLASSIFICATION	4.3669221757331605E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999919778954379	WITHOUT_CLASSIFICATION	8.022104562081089E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999995807195645	WITHOUT_CLASSIFICATION	4.1928043536516614E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997326613406	WITHOUT_CLASSIFICATION	2.673386594508534E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999926859019176	WITHOUT_CLASSIFICATION	7.314098082425329E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999908763389	WITHOUT_CLASSIFICATION	9.123661101456705E-8	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999976926455837	WITHOUT_CLASSIFICATION	2.3073544162754153E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999998751464568	WITHOUT_CLASSIFICATION	1.248535432062962E-6	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999988836154159	WITHOUT_CLASSIFICATION	1.1163845841227622E-6	TEST
found	WITHOUT_CLASSIFICATION	0.9999207998290097	WITHOUT_CLASSIFICATION	7.92001709902804E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999207998290097	WITHOUT_CLASSIFICATION	7.92001709902804E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999980449479103	WITHOUT_CLASSIFICATION	1.9550520896818567E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999982659615971	WITHOUT_CLASSIFICATION	1.734038402760267E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999559308524341	WITHOUT_CLASSIFICATION	4.406914756586632E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999559308524341	WITHOUT_CLASSIFICATION	4.406914756586632E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999629050201	WITHOUT_CLASSIFICATION	3.7094979893568593E-7	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999595996144	WITHOUT_CLASSIFICATION	4.040038552200687E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999959940193237	WITHOUT_CLASSIFICATION	4.005980676277475E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993706311421	WITHOUT_CLASSIFICATION	6.29368857897181E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999959940193237	WITHOUT_CLASSIFICATION	4.005980676277475E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993706311421	WITHOUT_CLASSIFICATION	6.29368857897181E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999965801239536	WITHOUT_CLASSIFICATION	3.419876046290985E-6	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998900517259485	WITHOUT_CLASSIFICATION	1.099482740515308E-4	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999058575273	WITHOUT_CLASSIFICATION	9.41424726742955E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999996982956179	WITHOUT_CLASSIFICATION	3.017043821944851E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999989570898492	WITHOUT_CLASSIFICATION	1.0429101506992388E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998917848950223	WITHOUT_CLASSIFICATION	1.082151049776648E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999941917900546	WITHOUT_CLASSIFICATION	5.80820994540191E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999941917900546	WITHOUT_CLASSIFICATION	5.80820994540191E-6	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999995410654798	WITHOUT_CLASSIFICATION	4.589345200569067E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998697365964	WITHOUT_CLASSIFICATION	1.3026340361455947E-7	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999974982033027	WITHOUT_CLASSIFICATION	2.5017966973012736E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999859583092	WITHOUT_CLASSIFICATION	1.4041690881677968E-8	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999932507126457	WITHOUT_CLASSIFICATION	6.749287354338038E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999982984254451	WITHOUT_CLASSIFICATION	1.7015745549061573E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999910867676278	WITHOUT_CLASSIFICATION	8.913232372107085E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999717041242729	WITHOUT_CLASSIFICATION	2.8295875727159397E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999717041242729	WITHOUT_CLASSIFICATION	2.8295875727159397E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999233667868	WITHOUT_CLASSIFICATION	7.66332131959413E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999965801239536	WITHOUT_CLASSIFICATION	3.419876046290985E-6	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999901991673482	WITHOUT_CLASSIFICATION	9.800832651805961E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998888345201622	WITHOUT_CLASSIFICATION	1.1116547983785448E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999286476171	WITHOUT_CLASSIFICATION	7.135238288270692E-8	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999884598844018	WITHOUT_CLASSIFICATION	1.1540115598160718E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995785785869402	WITHOUT_CLASSIFICATION	4.214214130597778E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999965801239536	WITHOUT_CLASSIFICATION	3.419876046290985E-6	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999884598844018	WITHOUT_CLASSIFICATION	1.1540115598160718E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995785785869402	WITHOUT_CLASSIFICATION	4.214214130597778E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999838106796	WITHOUT_CLASSIFICATION	1.6189320500295212E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999909534901037	WITHOUT_CLASSIFICATION	9.04650989622725E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999789539156	WITHOUT_CLASSIFICATION	2.104608448592575E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999965801239536	WITHOUT_CLASSIFICATION	3.419876046290985E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999965801239536	WITHOUT_CLASSIFICATION	3.419876046290985E-6	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999834434771095	WITHOUT_CLASSIFICATION	1.6556522890400807E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999915853291017	WITHOUT_CLASSIFICATION	8.41467089822037E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.999999068773834	WITHOUT_CLASSIFICATION	9.312261660320406E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990018195881	WITHOUT_CLASSIFICATION	9.98180411932525E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999994958645896	WITHOUT_CLASSIFICATION	5.041354103269921E-7	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999987117000603	WITHOUT_CLASSIFICATION	1.288299939674021E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999975273040583	WITHOUT_CLASSIFICATION	2.4726959416235484E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999983158880379	WITHOUT_CLASSIFICATION	1.6841119620965212E-6	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999994255789416	WITHOUT_CLASSIFICATION	5.744210584624675E-7	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999569602256329	WITHOUT_CLASSIFICATION	4.303977436717545E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998521808581	WITHOUT_CLASSIFICATION	1.4781914187443263E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999990922872559	WITHOUT_CLASSIFICATION	9.077127439422007E-7	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999935336514714	WITHOUT_CLASSIFICATION	6.4663485287013095E-6	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999975099710755	WITHOUT_CLASSIFICATION	2.490028924598658E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973022049036	WITHOUT_CLASSIFICATION	2.6977950964160624E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999496451179122	WITHOUT_CLASSIFICATION	5.0354882087876895E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990018195881	WITHOUT_CLASSIFICATION	9.98180411932525E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999696633686501	WITHOUT_CLASSIFICATION	3.0336631349808434E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999986134315941	WITHOUT_CLASSIFICATION	1.38656840588239E-6	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999016435417	WITHOUT_CLASSIFICATION	9.835645831074765E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999970247990139	WITHOUT_CLASSIFICATION	2.975200986184943E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.999953584641623	WITHOUT_CLASSIFICATION	4.641535837715802E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.999953584641623	WITHOUT_CLASSIFICATION	4.641535837715802E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990018195881	WITHOUT_CLASSIFICATION	9.98180411932525E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9961670471212134	WITHOUT_CLASSIFICATION	0.003832952878786654	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999879583913407	WITHOUT_CLASSIFICATION	1.2041608659228E-5	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9997077763149129	WITHOUT_CLASSIFICATION	2.922236850871436E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999981012854063	WITHOUT_CLASSIFICATION	1.8987145935508823E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999970696091696	WITHOUT_CLASSIFICATION	2.9303908304841584E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999993838953672	WITHOUT_CLASSIFICATION	6.161046326722226E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999725533166	WITHOUT_CLASSIFICATION	2.7446683415238605E-8	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999964098309609	WITHOUT_CLASSIFICATION	3.5901690390838092E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999950757957	WITHOUT_CLASSIFICATION	4.9242043206861466E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999990998401086	WITHOUT_CLASSIFICATION	9.001598913885526E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999991869023167	WITHOUT_CLASSIFICATION	8.130976833013725E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999961342883259	WITHOUT_CLASSIFICATION	3.865711674143273E-6	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999056883237314	WITHOUT_CLASSIFICATION	9.431167626862127E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999050781226	WITHOUT_CLASSIFICATION	9.492187737208593E-8	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999852369577	WITHOUT_CLASSIFICATION	1.4763042285593418E-7	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999995208173812	WITHOUT_CLASSIFICATION	4.791826188614597E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999918309498	WITHOUT_CLASSIFICATION	8.16905020435057E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999967081466558	WITHOUT_CLASSIFICATION	3.291853344295016E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993797911605	WITHOUT_CLASSIFICATION	6.202088395464853E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999997688065279	WITHOUT_CLASSIFICATION	2.3119347211606142E-7	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999445328127	WITHOUT_CLASSIFICATION	5.546718734356734E-8	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999250708796	WITHOUT_CLASSIFICATION	7.492912031097461E-8	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972859764837	WITHOUT_CLASSIFICATION	2.7140235161835715E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867767722639	WITHOUT_CLASSIFICATION	1.3223227736187818E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782874710503	WITHOUT_CLASSIFICATION	2.1712528949685787E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931169262134	WITHOUT_CLASSIFICATION	6.883073786572482E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422431936117	WITHOUT_CLASSIFICATION	5.775680638829552E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999430377835765	WITHOUT_CLASSIFICATION	5.6962216423400896E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162331154231	WITHOUT_CLASSIFICATION	8.376688457691234E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901724749337	WITHOUT_CLASSIFICATION	9.827525066398366E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999984256228832	WITHOUT_CLASSIFICATION	1.5743771168392526E-6	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999565457565	WITHOUT_CLASSIFICATION	4.345424362957913E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782496679787	WITHOUT_CLASSIFICATION	2.1750332021304693E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790258895025	WITHOUT_CLASSIFICATION	2.097411049752938E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968483859932	WITHOUT_CLASSIFICATION	3.1516140067863657E-6	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859808189634	WITHOUT_CLASSIFICATION	1.4019181036650973E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765194168962	WITHOUT_CLASSIFICATION	2.3480583103684927E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920390444988	WITHOUT_CLASSIFICATION	7.96095550125008E-6	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999707336674	WITHOUT_CLASSIFICATION	2.9266332600515085E-6	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998551259429534	WITHOUT_CLASSIFICATION	1.4487405704662485E-4	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999939849031795	WITHOUT_CLASSIFICATION	6.0150968204352345E-6	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980117099015	WITHOUT_CLASSIFICATION	1.9882900984886465E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999940281112513	WITHOUT_CLASSIFICATION	5.971888748779975E-6	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983120212858	WITHOUT_CLASSIFICATION	1.68797871435235E-6	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999295423042	WITHOUT_CLASSIFICATION	7.045769588265537E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998935414759542	WITHOUT_CLASSIFICATION	1.0645852404573572E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999730245030459	WITHOUT_CLASSIFICATION	2.69754969541191E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999999184649262	WITHOUT_CLASSIFICATION	8.153507380977266E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999892549954	WITHOUT_CLASSIFICATION	1.0745004589109267E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999938759813857	WITHOUT_CLASSIFICATION	6.124018614297247E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999170176679043	WITHOUT_CLASSIFICATION	8.298233209566695E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998978238368023	WITHOUT_CLASSIFICATION	1.0217616319775687E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999259043888877	WITHOUT_CLASSIFICATION	7.409561111217993E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999513893433826	WITHOUT_CLASSIFICATION	4.861065661745605E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999982866224318	WITHOUT_CLASSIFICATION	1.7133775682333082E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999824079082	WITHOUT_CLASSIFICATION	1.7592091839397318E-8	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999993707542683	WITHOUT_CLASSIFICATION	6.29245731733149E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9986953847928363	WITHOUT_CLASSIFICATION	0.0013046152071636804	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998566103349	WITHOUT_CLASSIFICATION	1.433896651040188E-7	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951969378106	WITHOUT_CLASSIFICATION	4.803062189439692E-6	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825506653284	WITHOUT_CLASSIFICATION	1.7449334671721426E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988760623898	WITHOUT_CLASSIFICATION	1.1239376101810107E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938992834762	WITHOUT_CLASSIFICATION	6.10071652376489E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999872640580795	WITHOUT_CLASSIFICATION	1.273594192056218E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999833626718	WITHOUT_CLASSIFICATION	1.663732820379618E-7	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999421694206	WITHOUT_CLASSIFICATION	5.7830579486453415E-8	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994803123531	WITHOUT_CLASSIFICATION	5.196876469909626E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869775208483	WITHOUT_CLASSIFICATION	1.3022479151692525E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999817407913	WITHOUT_CLASSIFICATION	1.825920869486151E-7	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999770190078779	WITHOUT_CLASSIFICATION	2.2980992122090845E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999342619816	WITHOUT_CLASSIFICATION	6.573801838499086E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999803976971	WITHOUT_CLASSIFICATION	1.9602302870570225E-8	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999916486338234	WITHOUT_CLASSIFICATION	8.351366176546838E-6	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999998721910821	WITHOUT_CLASSIFICATION	1.278089177893721E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999994363339059	WITHOUT_CLASSIFICATION	5.636660941693756E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999937942513374	WITHOUT_CLASSIFICATION	6.205748662637628E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998935414759542	WITHOUT_CLASSIFICATION	1.0645852404573572E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999996664900829	WITHOUT_CLASSIFICATION	3.3350991720909976E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999790094669	WITHOUT_CLASSIFICATION	2.0990533076007905E-8	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999994000028714	WITHOUT_CLASSIFICATION	5.999971285358182E-7	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999971945243075	WITHOUT_CLASSIFICATION	2.805475692503484E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998112212074	WITHOUT_CLASSIFICATION	1.887787926206863E-7	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999981273796849	WITHOUT_CLASSIFICATION	1.8726203151551864E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999872640580795	WITHOUT_CLASSIFICATION	1.273594192056218E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999971489100573	WITHOUT_CLASSIFICATION	2.8510899427515315E-6	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999976546904307	WITHOUT_CLASSIFICATION	2.345309569304389E-6	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992465175406	WITHOUT_CLASSIFICATION	7.534824593209287E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997285790071	WITHOUT_CLASSIFICATION	2.7142099286886594E-7	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999182585528	WITHOUT_CLASSIFICATION	8.174144710065349E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993502266102	WITHOUT_CLASSIFICATION	6.497733897549348E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998085345242	WITHOUT_CLASSIFICATION	1.914654758217954E-7	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999994693059415	WITHOUT_CLASSIFICATION	5.306940584659799E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999973166148286	WITHOUT_CLASSIFICATION	2.68338517139711E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999992590783585	WITHOUT_CLASSIFICATION	7.409216414173913E-7	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999125771114	WITHOUT_CLASSIFICATION	8.742288852930575E-8	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999961073710744	WITHOUT_CLASSIFICATION	3.892628925589024E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999992062713443	WITHOUT_CLASSIFICATION	7.937286557511808E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999440407593629	WITHOUT_CLASSIFICATION	5.595924063715893E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999971862103286	WITHOUT_CLASSIFICATION	2.813789671339004E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996776716018	WITHOUT_CLASSIFICATION	3.2232839821756964E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999998628511756	WITHOUT_CLASSIFICATION	1.3714882439068974E-7	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999508986136	WITHOUT_CLASSIFICATION	4.9101386435359954E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997412153412	WITHOUT_CLASSIFICATION	2.587846588157101E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999837357423388	WITHOUT_CLASSIFICATION	1.6264257661242103E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999994445347139	WITHOUT_CLASSIFICATION	5.554652861153376E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999999323056627	WITHOUT_CLASSIFICATION	6.769433731047658E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999948612068905	WITHOUT_CLASSIFICATION	5.138793109575922E-6	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999991266721878	WITHOUT_CLASSIFICATION	8.733278122521956E-7	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999995551642236	WITHOUT_CLASSIFICATION	4.448357763892024E-7	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999589652057	WITHOUT_CLASSIFICATION	4.103479429046924E-7	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994521839278	WITHOUT_CLASSIFICATION	5.478160720934298E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998935414759542	WITHOUT_CLASSIFICATION	1.0645852404573572E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999984767351715	WITHOUT_CLASSIFICATION	1.523264828407813E-6	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999983562089652	WITHOUT_CLASSIFICATION	1.643791034838428E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993662352548665	WITHOUT_CLASSIFICATION	6.337647451335488E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999997224901654	WITHOUT_CLASSIFICATION	2.775098345919142E-6	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999997916494801	WITHOUT_CLASSIFICATION	2.0835051989992232E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999997028927186	WITHOUT_CLASSIFICATION	2.9710728140360134E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998935414759542	WITHOUT_CLASSIFICATION	1.0645852404573572E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.99997127921799	WITHOUT_CLASSIFICATION	2.872078200997671E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999998628511756	WITHOUT_CLASSIFICATION	1.3714882439068974E-7	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999958095659893	WITHOUT_CLASSIFICATION	4.190434010688305E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996776716018	WITHOUT_CLASSIFICATION	3.2232839821756964E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999989657239	WITHOUT_CLASSIFICATION	1.0342760940496032E-8	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999615152734697	WITHOUT_CLASSIFICATION	3.8484726530364935E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999917476707586	WITHOUT_CLASSIFICATION	8.252329241325557E-6	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992465175406	WITHOUT_CLASSIFICATION	7.534824593209287E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997285790071	WITHOUT_CLASSIFICATION	2.7142099286886594E-7	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999182585528	WITHOUT_CLASSIFICATION	8.174144710065349E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999996210838149	WITHOUT_CLASSIFICATION	3.7891618509415813E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999977150773394	WITHOUT_CLASSIFICATION	2.284922660639668E-6	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999991682057724	WITHOUT_CLASSIFICATION	8.317942276386706E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996776716018	WITHOUT_CLASSIFICATION	3.2232839821756964E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999989657239	WITHOUT_CLASSIFICATION	1.0342760940496032E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998935414759542	WITHOUT_CLASSIFICATION	1.0645852404573572E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993502266102	WITHOUT_CLASSIFICATION	6.497733897549348E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998085345242	WITHOUT_CLASSIFICATION	1.914654758217954E-7	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999994693059415	WITHOUT_CLASSIFICATION	5.306940584659799E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983850005952	WITHOUT_CLASSIFICATION	1.6149994046625633E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994519118095	WITHOUT_CLASSIFICATION	5.480881905703713E-7	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999913500443991	WITHOUT_CLASSIFICATION	8.649955600894946E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998555109327	WITHOUT_CLASSIFICATION	1.4448906729966845E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999928350162148	WITHOUT_CLASSIFICATION	7.1649837851446545E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999905083238	WITHOUT_CLASSIFICATION	9.49167627759719E-9	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998551259429534	WITHOUT_CLASSIFICATION	1.4487405704662485E-4	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999961915533033	WITHOUT_CLASSIFICATION	3.808446696728117E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996508444295271	WITHOUT_CLASSIFICATION	3.4915557047286553E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999909346980022	WITHOUT_CLASSIFICATION	9.065301997816129E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999426586429	WITHOUT_CLASSIFICATION	5.734135717265653E-8	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995748211884	WITHOUT_CLASSIFICATION	4.251788116131177E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422431936117	WITHOUT_CLASSIFICATION	5.775680638829552E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999430377835765	WITHOUT_CLASSIFICATION	5.6962216423400896E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790258895025	WITHOUT_CLASSIFICATION	2.097411049752938E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995748211884	WITHOUT_CLASSIFICATION	4.251788116131177E-7	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999995422859377	WITHOUT_CLASSIFICATION	4.5771406240653146E-7	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998264180683	WITHOUT_CLASSIFICATION	1.7358193165729594E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987981064558	WITHOUT_CLASSIFICATION	1.2018935441915608E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898255822641	WITHOUT_CLASSIFICATION	1.0174417735889164E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999997308142763	WITHOUT_CLASSIFICATION	2.691857237224182E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999259349226562	WITHOUT_CLASSIFICATION	7.406507734364514E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968483859932	WITHOUT_CLASSIFICATION	3.1516140067863657E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920390444988	WITHOUT_CLASSIFICATION	7.96095550125008E-6	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999803976971	WITHOUT_CLASSIFICATION	1.9602302870570225E-8	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999991460783202	WITHOUT_CLASSIFICATION	8.539216798705618E-7	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999488092041	WITHOUT_CLASSIFICATION	5.119079589214143E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999995579992811	WITHOUT_CLASSIFICATION	4.4200071883702173E-7	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999887000629144	WITHOUT_CLASSIFICATION	1.1299937085613682E-5	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997978955919	WITHOUT_CLASSIFICATION	2.021044080858528E-7	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999411358396	WITHOUT_CLASSIFICATION	5.886416044483618E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999989062920022	WITHOUT_CLASSIFICATION	1.0937079977984962E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999950757957	WITHOUT_CLASSIFICATION	4.9242043206861466E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999997781770641	WITHOUT_CLASSIFICATION	2.2182293598523716E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999928764372089	WITHOUT_CLASSIFICATION	7.123562791004198E-6	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999994864822024	WITHOUT_CLASSIFICATION	5.135177975652448E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999913504129307	WITHOUT_CLASSIFICATION	8.649587069222562E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999244476813	WITHOUT_CLASSIFICATION	7.555231878549746E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999996160978054	WITHOUT_CLASSIFICATION	3.839021945939446E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986518276865	WITHOUT_CLASSIFICATION	1.3481723134404018E-6	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996818451492	WITHOUT_CLASSIFICATION	3.181548507394192E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992668897077	WITHOUT_CLASSIFICATION	7.331102921972464E-7	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999898703410937	WITHOUT_CLASSIFICATION	1.0129658906304648E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999974208517894	WITHOUT_CLASSIFICATION	2.57914821055267E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996497263862	WITHOUT_CLASSIFICATION	3.5027361375555207E-7	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997935125511	WITHOUT_CLASSIFICATION	2.0648744889399483E-7	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995454946279	WITHOUT_CLASSIFICATION	4.5450537204645224E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997836884379	WITHOUT_CLASSIFICATION	2.1631156198972095E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999954168971125	WITHOUT_CLASSIFICATION	4.583102887542941E-6	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999909516435939	WITHOUT_CLASSIFICATION	9.048356406198112E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996255738625	WITHOUT_CLASSIFICATION	3.744261374836839E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999991989481543	WITHOUT_CLASSIFICATION	8.010518457085387E-7	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990160325848	WITHOUT_CLASSIFICATION	9.839674151490525E-7	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986211960419	WITHOUT_CLASSIFICATION	1.3788039580889188E-6	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999961673255813	WITHOUT_CLASSIFICATION	3.832674418743602E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999987647197304	WITHOUT_CLASSIFICATION	1.235280269601146E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999989670492103	WITHOUT_CLASSIFICATION	1.032950789723868E-6	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999984867767815	WITHOUT_CLASSIFICATION	1.5132232184613027E-6	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999958276106202	WITHOUT_CLASSIFICATION	4.1723893798057255E-6	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999945046367692	WITHOUT_CLASSIFICATION	5.495363230735378E-6	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999878387125208	WITHOUT_CLASSIFICATION	1.2161287479040679E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998386943925	WITHOUT_CLASSIFICATION	1.6130560751896555E-7	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999988083674117	WITHOUT_CLASSIFICATION	1.1916325882781053E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999977801031201	WITHOUT_CLASSIFICATION	2.219896879823642E-6	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999676270869	WITHOUT_CLASSIFICATION	3.237291312023823E-8	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999936611597869	WITHOUT_CLASSIFICATION	6.33884021303554E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999918879389513	WITHOUT_CLASSIFICATION	8.112061048655429E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999993225634729	WITHOUT_CLASSIFICATION	6.774365270673277E-7	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999376423010349	WITHOUT_CLASSIFICATION	6.235769896506797E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999988698873202	WITHOUT_CLASSIFICATION	1.1301126798120119E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999941127170264	WITHOUT_CLASSIFICATION	5.887282973515225E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999760346439334	WITHOUT_CLASSIFICATION	2.396535606660601E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999644971938291	WITHOUT_CLASSIFICATION	3.550280617094673E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998521508489613	WITHOUT_CLASSIFICATION	1.4784915103880652E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999998859744877	WITHOUT_CLASSIFICATION	1.1402551218863743E-7	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999980184996534	WITHOUT_CLASSIFICATION	1.9815003466889006E-6	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997761349669	WITHOUT_CLASSIFICATION	2.2386503311129885E-7	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999996540262904	WITHOUT_CLASSIFICATION	3.4597370955871757E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999998690884788	WITHOUT_CLASSIFICATION	1.3091152120540276E-6	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999990930473157	WITHOUT_CLASSIFICATION	9.069526841795107E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998172777526	WITHOUT_CLASSIFICATION	1.8272224742885922E-7	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999994787576008	WITHOUT_CLASSIFICATION	5.2124239919942335E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999978272446848	WITHOUT_CLASSIFICATION	2.1727553152599264E-6	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999998669524012	WITHOUT_CLASSIFICATION	1.3304759882615413E-7	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995808556417	WITHOUT_CLASSIFICATION	4.19144358358035E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999949900483739	WITHOUT_CLASSIFICATION	5.009951626147102E-6	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998909668897	WITHOUT_CLASSIFICATION	1.0903311030733865E-7	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999138287498	WITHOUT_CLASSIFICATION	8.617125026570716E-8	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999910717409889	WITHOUT_CLASSIFICATION	8.928259011093028E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999959220935474	WITHOUT_CLASSIFICATION	4.077906452697074E-6	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999989495958239	WITHOUT_CLASSIFICATION	1.0504041760887742E-6	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999993042850475	WITHOUT_CLASSIFICATION	6.957149524858414E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999945325795	WITHOUT_CLASSIFICATION	5.467420507523753E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999995772678224	WITHOUT_CLASSIFICATION	4.227321776977618E-7	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999867496179756	WITHOUT_CLASSIFICATION	1.3250382024389341E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999931521062592	WITHOUT_CLASSIFICATION	6.847893740873536E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999481911995826	WITHOUT_CLASSIFICATION	5.180880041733934E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999962627235077	WITHOUT_CLASSIFICATION	3.7372764921629476E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999980136506332	WITHOUT_CLASSIFICATION	1.9863493668716855E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999957266194014	WITHOUT_CLASSIFICATION	4.273380598602088E-6	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999472842609	WITHOUT_CLASSIFICATION	5.271573904107153E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999998766586322	WITHOUT_CLASSIFICATION	1.2334136780833379E-7	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999832752618	WITHOUT_CLASSIFICATION	1.6724738218407188E-7	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999953422789928	WITHOUT_CLASSIFICATION	4.657721007202516E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999955804950473	WITHOUT_CLASSIFICATION	4.419504952662881E-6	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999990859651188	WITHOUT_CLASSIFICATION	9.140348812853771E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998246501328	WITHOUT_CLASSIFICATION	1.7534986715137028E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999969493241574	WITHOUT_CLASSIFICATION	3.0506758425646306E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.999982785983841	WITHOUT_CLASSIFICATION	1.7214016159057695E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999988484899204	WITHOUT_CLASSIFICATION	1.1515100796980442E-6	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997578503168697	WITHOUT_CLASSIFICATION	2.4214968313024065E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999977016328286	WITHOUT_CLASSIFICATION	2.298367171358647E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999988227296975	WITHOUT_CLASSIFICATION	1.1772703025087972E-6	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.999997496520388	WITHOUT_CLASSIFICATION	2.503479611961147E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146042921	WITHOUT_CLASSIFICATION	1.4853957078942995E-6	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999991968214399	WITHOUT_CLASSIFICATION	8.031785601239652E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999417569686407	WITHOUT_CLASSIFICATION	5.824303135926205E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998272940545376	WITHOUT_CLASSIFICATION	1.7270594546230463E-4	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999987239824746	WITHOUT_CLASSIFICATION	1.2760175254121206E-6	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999991846532701	WITHOUT_CLASSIFICATION	8.153467298176833E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999950888610409	WITHOUT_CLASSIFICATION	4.911138959148835E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999962212051285	WITHOUT_CLASSIFICATION	3.7787948713967776E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999998249623	WITHOUT_CLASSIFICATION	1.7503755305715076E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999924920687543	WITHOUT_CLASSIFICATION	7.507931245717068E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999777546488542	WITHOUT_CLASSIFICATION	2.2245351145892082E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999912821214648	WITHOUT_CLASSIFICATION	8.717878535175226E-6	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999924920687543	WITHOUT_CLASSIFICATION	7.507931245717068E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999988051606931	WITHOUT_CLASSIFICATION	1.1948393069408258E-6	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999987073297024	WITHOUT_CLASSIFICATION	1.2926702974808425E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999703517982945	WITHOUT_CLASSIFICATION	2.9648201705366495E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999433125606624	WITHOUT_CLASSIFICATION	5.668743933776536E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999997541597027	WITHOUT_CLASSIFICATION	2.4584029733047314E-7	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999992629114856	WITHOUT_CLASSIFICATION	7.370885145098467E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998087803865559	WITHOUT_CLASSIFICATION	1.912196134441925E-4	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999988199584642	WITHOUT_CLASSIFICATION	1.1800415358940692E-6	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999998815500079	WITHOUT_CLASSIFICATION	1.1844999214187191E-7	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999009722215194	WITHOUT_CLASSIFICATION	9.90277784806586E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999997786614225	WITHOUT_CLASSIFICATION	2.21338577529712E-7	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999968470022308	WITHOUT_CLASSIFICATION	3.152997769151688E-6	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999974269731765	WITHOUT_CLASSIFICATION	2.573026823443304E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999984320625722	WITHOUT_CLASSIFICATION	1.5679374278457808E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999974960296908	WITHOUT_CLASSIFICATION	2.5039703091661593E-6	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999997572718374	WITHOUT_CLASSIFICATION	2.427281624960627E-7	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999783505755769	WITHOUT_CLASSIFICATION	2.1649424423142744E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999783505755769	WITHOUT_CLASSIFICATION	2.1649424423142744E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993521323775	WITHOUT_CLASSIFICATION	6.478676226052277E-7	TEST
optimization	WITHOUT_CLASSIFICATION	0.9998115610010445	WITHOUT_CLASSIFICATION	1.884389989554529E-4	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999274303327569	WITHOUT_CLASSIFICATION	7.256966724307606E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.999980620189683	WITHOUT_CLASSIFICATION	1.937981031698849E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999972795728145	WITHOUT_CLASSIFICATION	2.7204271854899485E-6	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999572718146171	WITHOUT_CLASSIFICATION	4.272818538290217E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999907985116516	WITHOUT_CLASSIFICATION	9.201488348423639E-6	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999156961115	WITHOUT_CLASSIFICATION	8.430388847015334E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999971222899641	WITHOUT_CLASSIFICATION	2.877710035910938E-6	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998684517326326	WITHOUT_CLASSIFICATION	1.3154826736728952E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999999951905441	WITHOUT_CLASSIFICATION	4.809455901501234E-8	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999842990178	WITHOUT_CLASSIFICATION	1.5700982144134998E-8	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999994405259012	WITHOUT_CLASSIFICATION	5.59474098794291E-7	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999996883981691	WITHOUT_CLASSIFICATION	3.1160183084221744E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999545084738	WITHOUT_CLASSIFICATION	4.549152631985872E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999996160978054	WITHOUT_CLASSIFICATION	3.839021945939446E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999976861319513	WITHOUT_CLASSIFICATION	2.3138680486604694E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998360764863	WITHOUT_CLASSIFICATION	1.639235136068941E-7	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999990364883351	WITHOUT_CLASSIFICATION	9.635116649379123E-7	TEST
do the test	WITHOUT_CLASSIFICATION	0.9984278461057741	WITHOUT_CLASSIFICATION	0.0015721538942258756	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999042581798	WITHOUT_CLASSIFICATION	9.574182021132975E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999901662853194	WITHOUT_CLASSIFICATION	9.833714680503094E-6	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999409028806	WITHOUT_CLASSIFICATION	5.909711948225538E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999992981043735	WITHOUT_CLASSIFICATION	7.018956265983103E-7	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999280765404	WITHOUT_CLASSIFICATION	7.192345970784712E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999379117291	WITHOUT_CLASSIFICATION	6.208827089841037E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999998189774327	WITHOUT_CLASSIFICATION	1.810225673338013E-7	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999993743353667	WITHOUT_CLASSIFICATION	6.25664633291143E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999961864735427	WITHOUT_CLASSIFICATION	3.813526457368534E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999826830286	WITHOUT_CLASSIFICATION	1.731697139995449E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999997162488655	WITHOUT_CLASSIFICATION	2.8375113442668773E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996631353355	WITHOUT_CLASSIFICATION	3.368646643973615E-7	TEST
count++;	WITHOUT_CLASSIFICATION	0.999957400708724	WITHOUT_CLASSIFICATION	4.259929127613333E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999953653948264	WITHOUT_CLASSIFICATION	4.634605173679284E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999994202795293	WITHOUT_CLASSIFICATION	5.797204707476583E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998427322486	WITHOUT_CLASSIFICATION	1.5726775143444484E-7	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999986595657306	WITHOUT_CLASSIFICATION	1.3404342694418205E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999999656142908	WITHOUT_CLASSIFICATION	3.438570919622955E-7	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999989491435357	WITHOUT_CLASSIFICATION	1.0508564642757713E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999927524672013	WITHOUT_CLASSIFICATION	7.247532798666228E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999736246613137	WITHOUT_CLASSIFICATION	2.6375338686375038E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999976870945277	WITHOUT_CLASSIFICATION	2.3129054723240573E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999997176513733	WITHOUT_CLASSIFICATION	2.823486266723597E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998937621967	WITHOUT_CLASSIFICATION	1.0623780331656256E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999637021382842	WITHOUT_CLASSIFICATION	3.629786171574717E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999946359328618	WITHOUT_CLASSIFICATION	5.364067138144062E-6	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970137348369	WITHOUT_CLASSIFICATION	2.986265163097739E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928097956311	WITHOUT_CLASSIFICATION	7.190204368932475E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999768154920291	WITHOUT_CLASSIFICATION	2.318450797094621E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999855893704	WITHOUT_CLASSIFICATION	1.441062960139555E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999997832616745	WITHOUT_CLASSIFICATION	2.1673832563969927E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999933722601411	WITHOUT_CLASSIFICATION	6.627739858952293E-6	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998777576238	WITHOUT_CLASSIFICATION	1.2224237635154504E-7	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999983869685748	WITHOUT_CLASSIFICATION	1.6130314252453365E-6	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800339202065	WITHOUT_CLASSIFICATION	1.9966079793524237E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999983869685748	WITHOUT_CLASSIFICATION	1.6130314252453365E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999980903371676	WITHOUT_CLASSIFICATION	1.909662832467981E-6	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999969529740798	WITHOUT_CLASSIFICATION	3.047025920196808E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999629304352614	WITHOUT_CLASSIFICATION	3.706956473864745E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996470081723	WITHOUT_CLASSIFICATION	3.529918276590516E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999645961852773	WITHOUT_CLASSIFICATION	3.540381472265061E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9994388244971277	WITHOUT_CLASSIFICATION	5.611755028723039E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997879373078	WITHOUT_CLASSIFICATION	2.1206269212635993E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999996978030631	WITHOUT_CLASSIFICATION	3.021969368838057E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999264299231	WITHOUT_CLASSIFICATION	7.357007695594345E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999738791265281	WITHOUT_CLASSIFICATION	2.6120873471857656E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999996627739969	WITHOUT_CLASSIFICATION	3.372260031050753E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999994695973261	WITHOUT_CLASSIFICATION	5.304026738047732E-7	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999987573128255	WITHOUT_CLASSIFICATION	1.2426871745074211E-5	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999202565126438	WITHOUT_CLASSIFICATION	7.97434873561755E-5	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999816446364	WITHOUT_CLASSIFICATION	1.8355363514991765E-8	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998755843943	WITHOUT_CLASSIFICATION	1.244156056987151E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999822098099519	WITHOUT_CLASSIFICATION	1.7790190048197727E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999822098099519	WITHOUT_CLASSIFICATION	1.7790190048197727E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999981169543937	WITHOUT_CLASSIFICATION	1.8830456062899845E-6	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999929915574063	WITHOUT_CLASSIFICATION	7.008442593607134E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998151219608	WITHOUT_CLASSIFICATION	1.848780391988615E-7	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999650436805	WITHOUT_CLASSIFICATION	3.4956319495825145E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999989867886098	WITHOUT_CLASSIFICATION	1.0132113903138343E-6	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994460433796	WITHOUT_CLASSIFICATION	5.539566203292768E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999997422519892	WITHOUT_CLASSIFICATION	2.577480108785017E-7	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999781113435843	WITHOUT_CLASSIFICATION	2.1888656415747737E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999872472198907	WITHOUT_CLASSIFICATION	1.2752780109253159E-5	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999241469608	WITHOUT_CLASSIFICATION	7.585303914996465E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999990860784108	WITHOUT_CLASSIFICATION	9.139215892140096E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999303718107	WITHOUT_CLASSIFICATION	6.962818925057633E-8	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999995016380676	WITHOUT_CLASSIFICATION	4.983619324054901E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999965294257759	WITHOUT_CLASSIFICATION	3.4705742241014385E-6	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997210417424	WITHOUT_CLASSIFICATION	2.7895825765783504E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999996646346163	WITHOUT_CLASSIFICATION	3.353653836839986E-7	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998481022702	WITHOUT_CLASSIFICATION	1.518977298796619E-7	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999963496338063	WITHOUT_CLASSIFICATION	3.650366193566069E-6	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999998228104472	WITHOUT_CLASSIFICATION	1.7718955272754045E-7	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999838186292	WITHOUT_CLASSIFICATION	1.6181370797826143E-8	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999970440857602	WITHOUT_CLASSIFICATION	2.9559142399133904E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998061512066	WITHOUT_CLASSIFICATION	1.9384879332111172E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998966288194	WITHOUT_CLASSIFICATION	1.033711806266408E-7	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999307503301	WITHOUT_CLASSIFICATION	6.924966991693636E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999971815603793	WITHOUT_CLASSIFICATION	2.818439620587723E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999990096371331	WITHOUT_CLASSIFICATION	9.903628669828594E-7	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999995613914257	WITHOUT_CLASSIFICATION	4.3860857434842393E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999994480097284	WITHOUT_CLASSIFICATION	5.519902716415505E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9998132104176883	WITHOUT_CLASSIFICATION	1.8678958231168203E-4	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999997782859972	WITHOUT_CLASSIFICATION	2.2171400279024463E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999997239058484	WITHOUT_CLASSIFICATION	2.7609415160054824E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999942510259459	WITHOUT_CLASSIFICATION	5.748974054080821E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999725744958154	WITHOUT_CLASSIFICATION	2.7425504184525075E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999878580434813	WITHOUT_CLASSIFICATION	1.2141956518662688E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999956317839486	WITHOUT_CLASSIFICATION	4.368216051406734E-6	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999377445186	WITHOUT_CLASSIFICATION	6.22554815041054E-8	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998324587763	WITHOUT_CLASSIFICATION	1.6754122361905572E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999918452383427	WITHOUT_CLASSIFICATION	8.154761657144476E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998400165481	WITHOUT_CLASSIFICATION	1.5998345190854594E-7	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999998898033322	WITHOUT_CLASSIFICATION	1.1019666779629648E-6	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998753209105	WITHOUT_CLASSIFICATION	1.2467908941734637E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927025992792	WITHOUT_CLASSIFICATION	7.2974007208128525E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999756100617134	WITHOUT_CLASSIFICATION	2.4389938286630832E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999812512367	WITHOUT_CLASSIFICATION	1.8748763352460923E-8	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999939823183	WITHOUT_CLASSIFICATION	6.0176816947615015E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999993668698317	WITHOUT_CLASSIFICATION	6.331301682415209E-7	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999994386459619	WITHOUT_CLASSIFICATION	5.613540380611278E-7	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999120038948	WITHOUT_CLASSIFICATION	8.799610507979495E-8	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999992006444097	WITHOUT_CLASSIFICATION	7.993555903901351E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999944840068085	WITHOUT_CLASSIFICATION	5.515993191509638E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988413666355	WITHOUT_CLASSIFICATION	1.1586333645020907E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999998924756539	WITHOUT_CLASSIFICATION	1.0752434610542756E-6	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994476887512	WITHOUT_CLASSIFICATION	5.523112489188454E-7	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999998787878227	WITHOUT_CLASSIFICATION	1.2121217729330917E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999920609668754	WITHOUT_CLASSIFICATION	7.93903312458321E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.99997127921799	WITHOUT_CLASSIFICATION	2.872078200997671E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.99997127921799	WITHOUT_CLASSIFICATION	2.872078200997671E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999988637822111	WITHOUT_CLASSIFICATION	1.1362177888999076E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997242933614696	WITHOUT_CLASSIFICATION	2.7570663853039313E-4	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998744496342	WITHOUT_CLASSIFICATION	1.2555036580163043E-7	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999969454129665	WITHOUT_CLASSIFICATION	3.054587033485822E-6	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999995756429322	WITHOUT_CLASSIFICATION	4.2435706787078213E-7	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998603876913	WITHOUT_CLASSIFICATION	1.396123087939042E-7	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997055818312	WITHOUT_CLASSIFICATION	2.944181688065779E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999587051767	WITHOUT_CLASSIFICATION	4.1294823209226965E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999999901862144	WITHOUT_CLASSIFICATION	9.813785602410356E-8	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999842970603032	WITHOUT_CLASSIFICATION	1.570293969670205E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999999843105405	WITHOUT_CLASSIFICATION	1.56894594949359E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999998798920688	WITHOUT_CLASSIFICATION	1.2010793119850295E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999994199168412	WITHOUT_CLASSIFICATION	5.800831588764605E-7	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999693979731662	WITHOUT_CLASSIFICATION	3.06020268338453E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999997230866075	WITHOUT_CLASSIFICATION	2.769133925197568E-7	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999291592478038	WITHOUT_CLASSIFICATION	7.084075219627337E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999806145453669	WITHOUT_CLASSIFICATION	1.9385454633101526E-5	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999320728288	WITHOUT_CLASSIFICATION	6.792717122186438E-8	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999557949493572	WITHOUT_CLASSIFICATION	4.420505064281591E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999993366581528	WITHOUT_CLASSIFICATION	6.633418472122541E-7	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999983493373121	WITHOUT_CLASSIFICATION	1.6506626878629063E-6	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999324467745	WITHOUT_CLASSIFICATION	6.755322543147196E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999937672458605	WITHOUT_CLASSIFICATION	6.232754139459654E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999762400358013	WITHOUT_CLASSIFICATION	2.3759964198704457E-4	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999996023352254	WITHOUT_CLASSIFICATION	3.976647746220198E-7	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998952951642	WITHOUT_CLASSIFICATION	1.0470483584777662E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999992852921274	WITHOUT_CLASSIFICATION	7.147078725556591E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999976314323836	WITHOUT_CLASSIFICATION	2.3685676162884832E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998558841334345	WITHOUT_CLASSIFICATION	1.4411586656553485E-4	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999977642487182	WITHOUT_CLASSIFICATION	2.2357512818072135E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999762400358013	WITHOUT_CLASSIFICATION	2.3759964198704457E-4	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999995830219774	WITHOUT_CLASSIFICATION	4.169780225085083E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999999733843	WITHOUT_CLASSIFICATION	2.661569388507376E-10	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9993395692485716	WITHOUT_CLASSIFICATION	6.60430751428379E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999941522173978	WITHOUT_CLASSIFICATION	5.847782602076606E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999299693111	WITHOUT_CLASSIFICATION	7.003068896406113E-8	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999990295775906	WITHOUT_CLASSIFICATION	9.704224093953794E-6	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999990514646105	WITHOUT_CLASSIFICATION	9.48535389385653E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999101442135	WITHOUT_CLASSIFICATION	8.985578650470468E-7	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999755554615458	WITHOUT_CLASSIFICATION	2.4444538454166683E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999941522173978	WITHOUT_CLASSIFICATION	5.847782602076606E-6	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999971405299949	WITHOUT_CLASSIFICATION	2.8594700051046884E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999101442135	WITHOUT_CLASSIFICATION	8.985578650470468E-7	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999404871399	WITHOUT_CLASSIFICATION	5.951286011795172E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999430673815027	WITHOUT_CLASSIFICATION	5.6932618497123556E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999086285286	WITHOUT_CLASSIFICATION	9.137147130165398E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999990860784108	WITHOUT_CLASSIFICATION	9.139215892140096E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998239221063	WITHOUT_CLASSIFICATION	1.7607789371188967E-7	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999965156086981	WITHOUT_CLASSIFICATION	3.4843913020355572E-6	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998551327643	WITHOUT_CLASSIFICATION	1.4486723569754458E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999994584881172	WITHOUT_CLASSIFICATION	5.415118828618117E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999908232043145	WITHOUT_CLASSIFICATION	9.176795685383599E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999973280857251	WITHOUT_CLASSIFICATION	2.671914274834634E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999970054680409	WITHOUT_CLASSIFICATION	2.9945319590904114E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999929533355287	WITHOUT_CLASSIFICATION	7.046664471222622E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999906301307934	WITHOUT_CLASSIFICATION	9.369869206610321E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999994498196707	WITHOUT_CLASSIFICATION	5.501803292067149E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999216032363158	WITHOUT_CLASSIFICATION	7.839676368416373E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999229726172	WITHOUT_CLASSIFICATION	7.70273827876534E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998244437075	WITHOUT_CLASSIFICATION	1.7555629252046145E-7	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999860923598374	WITHOUT_CLASSIFICATION	1.3907640162668791E-5	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999629639278	WITHOUT_CLASSIFICATION	3.703607213047317E-8	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999876223057068	WITHOUT_CLASSIFICATION	1.237769429313896E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999947246280892	WITHOUT_CLASSIFICATION	5.275371910728678E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999985299364702	WITHOUT_CLASSIFICATION	1.4700635297511525E-6	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999991392422239	WITHOUT_CLASSIFICATION	8.607577760058013E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999991832403846	WITHOUT_CLASSIFICATION	8.167596154229177E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999986567665139	WITHOUT_CLASSIFICATION	1.343233486145588E-6	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998763607013	WITHOUT_CLASSIFICATION	1.2363929861169618E-7	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999997554937915	WITHOUT_CLASSIFICATION	2.4450620845148637E-7	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999845306156712	WITHOUT_CLASSIFICATION	1.546938432876479E-5	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999982064951569	WITHOUT_CLASSIFICATION	1.7935048430519667E-6	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.999527210494515	WITHOUT_CLASSIFICATION	4.7278950548497255E-4	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999929964002825	WITHOUT_CLASSIFICATION	7.003599717591974E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945159342426	WITHOUT_CLASSIFICATION	5.484065757397907E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968959213462	WITHOUT_CLASSIFICATION	3.1040786536645385E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999999604225696	WITHOUT_CLASSIFICATION	3.957743043834221E-8	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999930813813225	WITHOUT_CLASSIFICATION	6.918618677592843E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999989028559602	WITHOUT_CLASSIFICATION	1.097144039836108E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999928931936	WITHOUT_CLASSIFICATION	7.106806352418255E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999983816155342	WITHOUT_CLASSIFICATION	1.6183844658757219E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999997615676346	WITHOUT_CLASSIFICATION	2.384323653972928E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999995893969346	WITHOUT_CLASSIFICATION	4.106030654793642E-7	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999997810446605	WITHOUT_CLASSIFICATION	2.1895533963985354E-7	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999985537196442	WITHOUT_CLASSIFICATION	1.4462803557507937E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999899701677968	WITHOUT_CLASSIFICATION	1.0029832203176681E-5	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999994612569475	WITHOUT_CLASSIFICATION	5.387430524852469E-7	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999976994239902	WITHOUT_CLASSIFICATION	2.3005760098166945E-6	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999796035214	WITHOUT_CLASSIFICATION	2.0396478627889185E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999998318643138	WITHOUT_CLASSIFICATION	1.6813568612717998E-7	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987212897875	WITHOUT_CLASSIFICATION	1.2787102125070432E-6	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998461756961431	WITHOUT_CLASSIFICATION	1.5382430385692212E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999961812085073	WITHOUT_CLASSIFICATION	3.8187914927424335E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999896923378817	WITHOUT_CLASSIFICATION	1.0307662118327639E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998932563412	WITHOUT_CLASSIFICATION	1.0674365872382714E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999943916860436	WITHOUT_CLASSIFICATION	5.6083139563323685E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999981997031627	WITHOUT_CLASSIFICATION	1.8002968373025394E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999997990435773	WITHOUT_CLASSIFICATION	2.0095642275299028E-7	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999971891142281	WITHOUT_CLASSIFICATION	2.8108857718996575E-5	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999914951044	WITHOUT_CLASSIFICATION	8.504895538904919E-9	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999938538191322	WITHOUT_CLASSIFICATION	6.146180867717551E-6	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998977010684202	WITHOUT_CLASSIFICATION	1.0229893157972053E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999917553942779	WITHOUT_CLASSIFICATION	8.244605722063205E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945159342426	WITHOUT_CLASSIFICATION	5.484065757397907E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999995684711304	WITHOUT_CLASSIFICATION	4.3152886965791376E-7	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999732950688	WITHOUT_CLASSIFICATION	2.670493116496455E-8	TEST
switch	WITHOUT_CLASSIFICATION	0.999922785451223	WITHOUT_CLASSIFICATION	7.721454877691266E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999593504772195	WITHOUT_CLASSIFICATION	4.064952278050338E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998825573977	WITHOUT_CLASSIFICATION	1.1744260230379152E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999908996204	WITHOUT_CLASSIFICATION	9.100379608256364E-8	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869484964631	WITHOUT_CLASSIFICATION	1.305150353689911E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999996213511884	WITHOUT_CLASSIFICATION	3.786488116162273E-7	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999997698177563	WITHOUT_CLASSIFICATION	2.3018224378509543E-7	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999969823015653	WITHOUT_CLASSIFICATION	3.0176984346904737E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999255236537	WITHOUT_CLASSIFICATION	7.447634626097495E-8	TEST
/	WITHOUT_CLASSIFICATION	0.998704959864255	WITHOUT_CLASSIFICATION	0.0012950401357448924	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999966964024983	WITHOUT_CLASSIFICATION	3.303597501745466E-6	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999893178233374	WITHOUT_CLASSIFICATION	1.0682176662573315E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999980903371676	WITHOUT_CLASSIFICATION	1.909662832467981E-6	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999977756478	WITHOUT_CLASSIFICATION	2.2243521946997076E-8	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999976618323	WITHOUT_CLASSIFICATION	2.3381677249381026E-9	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999986895774462	WITHOUT_CLASSIFICATION	1.3104225537763374E-6	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999904154779654	WITHOUT_CLASSIFICATION	9.584522034553845E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999623079868	WITHOUT_CLASSIFICATION	3.769201316931918E-8	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999961290011649	WITHOUT_CLASSIFICATION	3.870998835165586E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999961290011649	WITHOUT_CLASSIFICATION	3.870998835165586E-6	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999962516442847	WITHOUT_CLASSIFICATION	3.7483557151862536E-6	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999998892271471	WITHOUT_CLASSIFICATION	1.107728529560693E-7	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998259841821	WITHOUT_CLASSIFICATION	1.7401581783147945E-7	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999965286830262	WITHOUT_CLASSIFICATION	3.4713169738313656E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999992689087549	WITHOUT_CLASSIFICATION	7.310912451291552E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998026493065	WITHOUT_CLASSIFICATION	1.9735069343887655E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999573602708648	WITHOUT_CLASSIFICATION	4.263972913513597E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997444160985	WITHOUT_CLASSIFICATION	2.5558390149217906E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997444160985	WITHOUT_CLASSIFICATION	2.5558390149217906E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999923496007054	WITHOUT_CLASSIFICATION	7.65039929453911E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999990343328624	WITHOUT_CLASSIFICATION	9.656671375216402E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999993419978882	WITHOUT_CLASSIFICATION	6.580021117106219E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991456168248	WITHOUT_CLASSIFICATION	8.543831751359309E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991456168248	WITHOUT_CLASSIFICATION	8.543831751359309E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991456168248	WITHOUT_CLASSIFICATION	8.543831751359309E-7	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999996601181194	WITHOUT_CLASSIFICATION	3.3988188071066116E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999997742980178	WITHOUT_CLASSIFICATION	2.257019822844777E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999973737552531	WITHOUT_CLASSIFICATION	2.626244746972994E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999821758691445	WITHOUT_CLASSIFICATION	1.7824130855429605E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999991377185891	WITHOUT_CLASSIFICATION	8.622814109725891E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999597306564	WITHOUT_CLASSIFICATION	4.026934359931641E-8	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999678599266	WITHOUT_CLASSIFICATION	3.2140073372543264E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999936633657995	WITHOUT_CLASSIFICATION	6.336634200506528E-6	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999988903942855	WITHOUT_CLASSIFICATION	1.1096057145678328E-6	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999246924478	WITHOUT_CLASSIFICATION	7.530755219966261E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.999994152750164	WITHOUT_CLASSIFICATION	5.847249835975031E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999783854861718	WITHOUT_CLASSIFICATION	2.1614513828269077E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999963237994082	WITHOUT_CLASSIFICATION	3.6762005917852044E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998442680252	WITHOUT_CLASSIFICATION	1.5573197481660236E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999765215462	WITHOUT_CLASSIFICATION	2.3478453832563125E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998532739086	WITHOUT_CLASSIFICATION	1.4672609141188242E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999995904410551	WITHOUT_CLASSIFICATION	4.095589448951727E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999892129206041	WITHOUT_CLASSIFICATION	1.0787079395902692E-4	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999892129206041	WITHOUT_CLASSIFICATION	1.0787079395902692E-4	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999262772908484	WITHOUT_CLASSIFICATION	7.372270915165948E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999262772908484	WITHOUT_CLASSIFICATION	7.372270915165948E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999264909481691	WITHOUT_CLASSIFICATION	7.3509051830896E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999143198718469	WITHOUT_CLASSIFICATION	8.568012815307591E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999143198718469	WITHOUT_CLASSIFICATION	8.568012815307591E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999409363531296	WITHOUT_CLASSIFICATION	5.9063646870337724E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998322043357641	WITHOUT_CLASSIFICATION	1.6779566423589457E-4	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999835879252	WITHOUT_CLASSIFICATION	1.6412074800613337E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999961290011649	WITHOUT_CLASSIFICATION	3.870998835165586E-6	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999485073708	WITHOUT_CLASSIFICATION	5.149262916115E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998322043357641	WITHOUT_CLASSIFICATION	1.6779566423589457E-4	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999977081883	WITHOUT_CLASSIFICATION	2.2918116874721532E-8	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999951124499337	WITHOUT_CLASSIFICATION	4.887550066305694E-6	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998358849663569	WITHOUT_CLASSIFICATION	1.6411503364314092E-4	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999089436351305	WITHOUT_CLASSIFICATION	9.105636486949045E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999967028481	WITHOUT_CLASSIFICATION	3.2971518424044505E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999976829424191	WITHOUT_CLASSIFICATION	2.317057580910543E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999990256747151	WITHOUT_CLASSIFICATION	9.743252848219628E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999996701116	WITHOUT_CLASSIFICATION	3.298884000536207E-7	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999415423105	WITHOUT_CLASSIFICATION	5.845768934384589E-8	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999982811111932	WITHOUT_CLASSIFICATION	1.7188888067684967E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999715315429	WITHOUT_CLASSIFICATION	2.846845706111396E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999583060569017	WITHOUT_CLASSIFICATION	4.169394309834965E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999836240164219	WITHOUT_CLASSIFICATION	1.6375983578048223E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.999992237093535	WITHOUT_CLASSIFICATION	7.762906464933472E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999990868706577	WITHOUT_CLASSIFICATION	9.131293422809181E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999996148612664	WITHOUT_CLASSIFICATION	3.851387335939261E-7	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999789526824	WITHOUT_CLASSIFICATION	2.1047317572842554E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999573745858256	WITHOUT_CLASSIFICATION	4.262541417444377E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999573745858256	WITHOUT_CLASSIFICATION	4.262541417444377E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999989693826336	WITHOUT_CLASSIFICATION	1.0306173663609072E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999989111397605	WITHOUT_CLASSIFICATION	1.0888602395346226E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999415801603	WITHOUT_CLASSIFICATION	5.841983970124326E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999993378502235	WITHOUT_CLASSIFICATION	6.6214977650575105E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999919283419548	WITHOUT_CLASSIFICATION	8.071658045183364E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999183963246	WITHOUT_CLASSIFICATION	8.160367537234227E-8	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999512521935	WITHOUT_CLASSIFICATION	4.874780637487459E-8	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999971795108112	WITHOUT_CLASSIFICATION	2.8204891887074573E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999982720537696	WITHOUT_CLASSIFICATION	1.7279462304757521E-6	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999060344499	WITHOUT_CLASSIFICATION	9.396555011760407E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999995074838339	WITHOUT_CLASSIFICATION	4.925161659836446E-7	TEST
/	WITHOUT_CLASSIFICATION	0.998704959864255	WITHOUT_CLASSIFICATION	0.0012950401357448924	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998973682953	WITHOUT_CLASSIFICATION	1.0263170462581523E-7	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999991327945622	WITHOUT_CLASSIFICATION	8.672054378737967E-7	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999997719603393	WITHOUT_CLASSIFICATION	2.2803966070088027E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999994945036955	WITHOUT_CLASSIFICATION	5.054963044610176E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998762066205	WITHOUT_CLASSIFICATION	1.237933795126471E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998762066205	WITHOUT_CLASSIFICATION	1.237933795126471E-7	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999872252997438	WITHOUT_CLASSIFICATION	1.2774700256209335E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999728112924	WITHOUT_CLASSIFICATION	2.7188707601597744E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.999997730190675	WITHOUT_CLASSIFICATION	2.269809325063702E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999983056930143	WITHOUT_CLASSIFICATION	1.6943069856022763E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999980461167239	WITHOUT_CLASSIFICATION	1.9538832761475027E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999885185027431	WITHOUT_CLASSIFICATION	1.1481497256899938E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998550523226	WITHOUT_CLASSIFICATION	1.4494767738131915E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999837104498	WITHOUT_CLASSIFICATION	1.6289550116510223E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999999298209767	WITHOUT_CLASSIFICATION	7.017902331358118E-7	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999989307001957	WITHOUT_CLASSIFICATION	1.0692998041534438E-6	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999992848149142	WITHOUT_CLASSIFICATION	7.151850859130837E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999837104498	WITHOUT_CLASSIFICATION	1.6289550116510223E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999999844242474	WITHOUT_CLASSIFICATION	1.5575752607507752E-7	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999558216649	WITHOUT_CLASSIFICATION	4.417833504141547E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999992314007846	WITHOUT_CLASSIFICATION	7.685992152815581E-7	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999924054780542	WITHOUT_CLASSIFICATION	7.594521945753369E-6	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999951993368	WITHOUT_CLASSIFICATION	4.800663170691822E-9	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999608909231	WITHOUT_CLASSIFICATION	3.910907696468532E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999989851748258	WITHOUT_CLASSIFICATION	1.0148251742064336E-6	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999991604330851	WITHOUT_CLASSIFICATION	8.395669148785524E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999996894129347	WITHOUT_CLASSIFICATION	3.105870653043885E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999866726574821	WITHOUT_CLASSIFICATION	1.3327342517847313E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999967034508291	WITHOUT_CLASSIFICATION	3.2965491708722787E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999994966025638	WITHOUT_CLASSIFICATION	5.033974362582705E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999626627761	WITHOUT_CLASSIFICATION	3.7337223863901615E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999993270318001	WITHOUT_CLASSIFICATION	6.729681998969633E-7	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999967461800583	WITHOUT_CLASSIFICATION	3.253819941608936E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999766129432606	WITHOUT_CLASSIFICATION	2.338705673948989E-5	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999242694396461	WITHOUT_CLASSIFICATION	7.573056035398479E-5	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999726398640897	WITHOUT_CLASSIFICATION	2.736013591026119E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999650537225668	WITHOUT_CLASSIFICATION	3.494627743323182E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999994247988725	WITHOUT_CLASSIFICATION	5.752011274725303E-7	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999995822345036	WITHOUT_CLASSIFICATION	4.1776549652934396E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998196505885	WITHOUT_CLASSIFICATION	1.8034941158311736E-7	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999032133618724	WITHOUT_CLASSIFICATION	9.678663812760323E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9985687581773568	WITHOUT_CLASSIFICATION	0.0014312418226431697	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999983215769631	WITHOUT_CLASSIFICATION	1.6784230368291777E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999959681795314	WITHOUT_CLASSIFICATION	4.031820468598253E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998106315776	WITHOUT_CLASSIFICATION	1.8936842246244153E-7	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999998893758606	WITHOUT_CLASSIFICATION	1.1062413941713711E-7	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999944886377	WITHOUT_CLASSIFICATION	5.511362287212026E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999750114047276	WITHOUT_CLASSIFICATION	2.4988595272438677E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999980329077	WITHOUT_CLASSIFICATION	1.9670922914936683E-8	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999997629982809	WITHOUT_CLASSIFICATION	2.3700171920072882E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999935676127892	WITHOUT_CLASSIFICATION	6.432387210694913E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999173718737	WITHOUT_CLASSIFICATION	8.262812636597894E-8	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992381465577	WITHOUT_CLASSIFICATION	7.618534423891701E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999945225397368	WITHOUT_CLASSIFICATION	5.4774602631898625E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999935355824	WITHOUT_CLASSIFICATION	6.46441750897821E-9	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999533918438	WITHOUT_CLASSIFICATION	4.66081562175895E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999953933009135	WITHOUT_CLASSIFICATION	4.6066990864433325E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999998532568846	WITHOUT_CLASSIFICATION	1.4674311548803645E-7	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999881813586897	WITHOUT_CLASSIFICATION	1.1818641310261927E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999998876933934	WITHOUT_CLASSIFICATION	1.1230660652102075E-7	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.99999989442263	WITHOUT_CLASSIFICATION	1.0557736997007516E-7	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999994001321715	WITHOUT_CLASSIFICATION	5.998678284915703E-7	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999977657330158	WITHOUT_CLASSIFICATION	2.2342669842640803E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994642556953	WITHOUT_CLASSIFICATION	5.357443046451921E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999990452573941	WITHOUT_CLASSIFICATION	9.547426058536108E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999909441938813	WITHOUT_CLASSIFICATION	9.055806118683679E-6	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999984250403783	WITHOUT_CLASSIFICATION	1.5749596216857292E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999994557604023	WITHOUT_CLASSIFICATION	5.442395976407996E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988590209619	WITHOUT_CLASSIFICATION	1.1409790380922788E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999988822559781	WITHOUT_CLASSIFICATION	1.1177440218715813E-6	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999990013792976	WITHOUT_CLASSIFICATION	9.986207023493126E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999161058314	WITHOUT_CLASSIFICATION	8.389416860016416E-7	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999325209348	WITHOUT_CLASSIFICATION	6.747906527129186E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999994376243401	WITHOUT_CLASSIFICATION	5.623756599535497E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994326074356	WITHOUT_CLASSIFICATION	5.673925643609057E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999412252404	WITHOUT_CLASSIFICATION	5.877475960067607E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999889798467289	WITHOUT_CLASSIFICATION	1.1020153271123937E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999905861946081	WITHOUT_CLASSIFICATION	9.413805391896298E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999996712264498	WITHOUT_CLASSIFICATION	3.287735502190455E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993621089668	WITHOUT_CLASSIFICATION	6.378910331414643E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999997050749877	WITHOUT_CLASSIFICATION	2.949250122460778E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999962217140295	WITHOUT_CLASSIFICATION	3.7782859705617205E-6	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999980416173698	WITHOUT_CLASSIFICATION	1.9583826301610867E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999986818544918	WITHOUT_CLASSIFICATION	1.3181455081959094E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988590209619	WITHOUT_CLASSIFICATION	1.1409790380922788E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999987225582071	WITHOUT_CLASSIFICATION	1.2774417928927442E-6	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999262863284	WITHOUT_CLASSIFICATION	7.371367157073389E-8	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998671673657	WITHOUT_CLASSIFICATION	1.32832634453814E-7	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999998654902884	WITHOUT_CLASSIFICATION	1.345097116371817E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999953010215807	WITHOUT_CLASSIFICATION	4.698978419285896E-6	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999990029131482	WITHOUT_CLASSIFICATION	9.970868517925401E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999999298209767	WITHOUT_CLASSIFICATION	7.017902331358118E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999795652701846	WITHOUT_CLASSIFICATION	2.0434729815339026E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992381465577	WITHOUT_CLASSIFICATION	7.618534423891701E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999989420051135	WITHOUT_CLASSIFICATION	1.0579948864972606E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998690713258	WITHOUT_CLASSIFICATION	1.3092867416330737E-7	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998253596014	WITHOUT_CLASSIFICATION	1.7464039859595156E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999976677083979	WITHOUT_CLASSIFICATION	2.332291601948354E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999993752968099	WITHOUT_CLASSIFICATION	6.247031901592894E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998077952327	WITHOUT_CLASSIFICATION	1.9220476726864303E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999979604069305	WITHOUT_CLASSIFICATION	2.0395930695033872E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999988418025602	WITHOUT_CLASSIFICATION	1.158197439863348E-6	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999794691226	WITHOUT_CLASSIFICATION	2.05308774877609E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999391697726	WITHOUT_CLASSIFICATION	6.083022743119049E-8	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999994897685607	WITHOUT_CLASSIFICATION	5.1023143929873846E-6	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999995166205372	WITHOUT_CLASSIFICATION	4.833794628828229E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995783169132	WITHOUT_CLASSIFICATION	4.216830868208635E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995783169132	WITHOUT_CLASSIFICATION	4.216830868208635E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999505720373	WITHOUT_CLASSIFICATION	4.942796274801338E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999896176560885	WITHOUT_CLASSIFICATION	1.0382343911416807E-5	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999982942720195	WITHOUT_CLASSIFICATION	1.705727980527925E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999965913918656	WITHOUT_CLASSIFICATION	3.408608134292434E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998980436682	WITHOUT_CLASSIFICATION	1.0195633181424993E-7	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999993290872506	WITHOUT_CLASSIFICATION	6.709127494143657E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999673493805	WITHOUT_CLASSIFICATION	3.265061958059067E-8	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999992434279781	WITHOUT_CLASSIFICATION	7.565720218565982E-7	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998857175896	WITHOUT_CLASSIFICATION	1.1428241050071237E-7	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999805930880243	WITHOUT_CLASSIFICATION	1.940691197558719E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999950109839993	WITHOUT_CLASSIFICATION	4.989016000634482E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999931733303399	WITHOUT_CLASSIFICATION	6.826669660030816E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999989642822374	WITHOUT_CLASSIFICATION	1.0357177626073658E-6	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999989304744	WITHOUT_CLASSIFICATION	1.0695255523004449E-9	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999997749910294	WITHOUT_CLASSIFICATION	2.2500897051143264E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999997694510224	WITHOUT_CLASSIFICATION	2.3054897753048613E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998983147627	WITHOUT_CLASSIFICATION	1.0168523731890736E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999605404725445	WITHOUT_CLASSIFICATION	3.9459527455628866E-5	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999837780834	WITHOUT_CLASSIFICATION	1.6221916605990656E-7	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999873350456	WITHOUT_CLASSIFICATION	1.2664954400535763E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999995796624678	WITHOUT_CLASSIFICATION	4.203375322385231E-7	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999993440422856	WITHOUT_CLASSIFICATION	6.559577143157039E-7	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999900468701094	WITHOUT_CLASSIFICATION	9.953129890590731E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995500360208	WITHOUT_CLASSIFICATION	4.499639792671475E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999348152184008	WITHOUT_CLASSIFICATION	6.518478159932484E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999993108574534	WITHOUT_CLASSIFICATION	6.891425466202523E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981737660955	WITHOUT_CLASSIFICATION	1.8262339044516345E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999991869023167	WITHOUT_CLASSIFICATION	8.130976833013725E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999997745045646	WITHOUT_CLASSIFICATION	2.2549543539716394E-7	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999952324880623	WITHOUT_CLASSIFICATION	4.767511937703556E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992373848325	WITHOUT_CLASSIFICATION	7.626151673988152E-7	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999998929064079	WITHOUT_CLASSIFICATION	1.0709359211261573E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999990718866405	WITHOUT_CLASSIFICATION	9.281133594199007E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998467016654	WITHOUT_CLASSIFICATION	1.5329833456910137E-7	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999980055252	WITHOUT_CLASSIFICATION	1.994474843080674E-9	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998298989158	WITHOUT_CLASSIFICATION	1.7010108417869805E-7	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994098312491	WITHOUT_CLASSIFICATION	5.901687508339073E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999996404262484	WITHOUT_CLASSIFICATION	3.595737516034432E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999999798310601	WITHOUT_CLASSIFICATION	2.0168939896040104E-7	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999970152166177	WITHOUT_CLASSIFICATION	2.9847833822806168E-6	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999917132721199	WITHOUT_CLASSIFICATION	8.286727880073833E-6	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822783422213	WITHOUT_CLASSIFICATION	1.7721657778635185E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999853908795	WITHOUT_CLASSIFICATION	1.4609120573694236E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999681674509673	WITHOUT_CLASSIFICATION	3.1832549032669964E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999960970677976	WITHOUT_CLASSIFICATION	3.902932202406997E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999957643618151	WITHOUT_CLASSIFICATION	4.235638184825587E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987981064558	WITHOUT_CLASSIFICATION	1.2018935441915608E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9924571977858616	WITHOUT_CLASSIFICATION	0.007542802214138308	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999994877313273	WITHOUT_CLASSIFICATION	5.12268672666912E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996188783832	WITHOUT_CLASSIFICATION	3.8112161680623105E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999953449913787	WITHOUT_CLASSIFICATION	4.655008621319122E-6	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923597255427	WITHOUT_CLASSIFICATION	7.640274457297837E-6	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999875045985	WITHOUT_CLASSIFICATION	1.2495401417963105E-8	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999990309722	WITHOUT_CLASSIFICATION	9.690277999931193E-7	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999938873769265	WITHOUT_CLASSIFICATION	6.112623073571245E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999972202590256	WITHOUT_CLASSIFICATION	2.779740974406528E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999467879605	WITHOUT_CLASSIFICATION	5.321203950495175E-7	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999800390013227	WITHOUT_CLASSIFICATION	1.9960998677265836E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999974303779865	WITHOUT_CLASSIFICATION	2.5696220134682195E-6	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999992591714161	WITHOUT_CLASSIFICATION	7.408285838766552E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999989412196263	WITHOUT_CLASSIFICATION	1.0587803737133317E-6	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999958634126924	WITHOUT_CLASSIFICATION	4.136587307571509E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996693120511	WITHOUT_CLASSIFICATION	3.3068794886639085E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999986769374097	WITHOUT_CLASSIFICATION	1.3230625902668494E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999967202861781	WITHOUT_CLASSIFICATION	3.2797138217906487E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999986865629494	WITHOUT_CLASSIFICATION	1.3134370505514556E-6	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999728638564	WITHOUT_CLASSIFICATION	2.7136143531568395E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999605929118603	WITHOUT_CLASSIFICATION	3.940708813968961E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999987977485459	WITHOUT_CLASSIFICATION	1.2022514541318436E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994013092577	WITHOUT_CLASSIFICATION	5.986907423367867E-7	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999974432142191	WITHOUT_CLASSIFICATION	2.556785780866662E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994013092577	WITHOUT_CLASSIFICATION	5.986907423367867E-7	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999404849235	WITHOUT_CLASSIFICATION	5.951507646724854E-8	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999503483994	WITHOUT_CLASSIFICATION	4.9651600573191495E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999997260452117	WITHOUT_CLASSIFICATION	2.7395478832182196E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999554380604	WITHOUT_CLASSIFICATION	4.456193964235773E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999728067024	WITHOUT_CLASSIFICATION	2.7193297626376867E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999997907957431	WITHOUT_CLASSIFICATION	2.0920425703116687E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993676549365	WITHOUT_CLASSIFICATION	6.32345063451012E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9976893277611071	WITHOUT_CLASSIFICATION	0.002310672238892888	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999988781380572	WITHOUT_CLASSIFICATION	1.1218619427542818E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999936329298	WITHOUT_CLASSIFICATION	6.367070196745408E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999996307609314	WITHOUT_CLASSIFICATION	3.692390685884345E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997061715791	WITHOUT_CLASSIFICATION	2.9382842087841644E-7	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996161942236	WITHOUT_CLASSIFICATION	3.838057764911467E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999943937146671	WITHOUT_CLASSIFICATION	5.606285332935505E-6	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999960345072688	WITHOUT_CLASSIFICATION	3.965492731234058E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999584028649	WITHOUT_CLASSIFICATION	4.159713507352773E-8	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998729623738	WITHOUT_CLASSIFICATION	1.2703762625685233E-7	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999994365846555	WITHOUT_CLASSIFICATION	5.634153444554896E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999932472834	WITHOUT_CLASSIFICATION	6.752716570065001E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999987969468251	WITHOUT_CLASSIFICATION	1.2030531749087554E-5	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999542713331	WITHOUT_CLASSIFICATION	4.572866679418669E-8	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999987380290387	WITHOUT_CLASSIFICATION	1.2619709612705615E-6	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997940803559746	WITHOUT_CLASSIFICATION	2.0591964402530842E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999995216399887	WITHOUT_CLASSIFICATION	4.783600112407386E-7	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999984824478036	WITHOUT_CLASSIFICATION	1.5175521963463968E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999969459356157	WITHOUT_CLASSIFICATION	3.0540643842210164E-6	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999780781944914	WITHOUT_CLASSIFICATION	2.192180550872583E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999927268033558	WITHOUT_CLASSIFICATION	7.2731966442959484E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999944294762	WITHOUT_CLASSIFICATION	5.570523794882208E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999992733105446	WITHOUT_CLASSIFICATION	7.266894553844668E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999898324241717	WITHOUT_CLASSIFICATION	1.0167575828290035E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999997440649181	WITHOUT_CLASSIFICATION	2.5593508188111295E-7	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999957181052	WITHOUT_CLASSIFICATION	4.281894826988657E-9	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998934437939395	WITHOUT_CLASSIFICATION	1.0655620606050183E-4	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999961663874668	WITHOUT_CLASSIFICATION	3.833612533150543E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9998398452629771	WITHOUT_CLASSIFICATION	1.6015473702293866E-4	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999935358518893	WITHOUT_CLASSIFICATION	6.4641481106052625E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998906892689	WITHOUT_CLASSIFICATION	1.0931073103397356E-7	TEST
important!!	WITHOUT_CLASSIFICATION	0.9998977276281283	WITHOUT_CLASSIFICATION	1.0227237187173078E-4	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999990706779519	WITHOUT_CLASSIFICATION	9.293220480360432E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999289603016892	WITHOUT_CLASSIFICATION	7.103969831079953E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999994713412306	WITHOUT_CLASSIFICATION	5.286587694878146E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993662352548665	WITHOUT_CLASSIFICATION	6.337647451335488E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999969459356157	WITHOUT_CLASSIFICATION	3.0540643842210164E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999026906292724	WITHOUT_CLASSIFICATION	9.730937072754602E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999983873824684	WITHOUT_CLASSIFICATION	1.6126175316769949E-6	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999045007936224	WITHOUT_CLASSIFICATION	9.549920637764403E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999928606698699	WITHOUT_CLASSIFICATION	7.139330130019421E-6	TEST
special case	WITHOUT_CLASSIFICATION	0.9999974714612561	WITHOUT_CLASSIFICATION	2.5285387439010644E-6	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999977186357032	WITHOUT_CLASSIFICATION	2.2813642967365074E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999045501806	WITHOUT_CLASSIFICATION	9.544981938958743E-8	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999970044610804	WITHOUT_CLASSIFICATION	2.995538919686669E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989706518615	WITHOUT_CLASSIFICATION	1.0293481384883128E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999940987373518	WITHOUT_CLASSIFICATION	5.901262648272443E-6	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999929983518234	WITHOUT_CLASSIFICATION	7.001648176573664E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999990617422237	WITHOUT_CLASSIFICATION	9.382577762736867E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999946615493972	WITHOUT_CLASSIFICATION	5.338450602740256E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999681997967363	WITHOUT_CLASSIFICATION	3.180020326364255E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997663786303	WITHOUT_CLASSIFICATION	2.3362136967055746E-7	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999326325507	WITHOUT_CLASSIFICATION	6.736744920549808E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.999999101132694	WITHOUT_CLASSIFICATION	8.988673060040957E-7	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999986807221578	WITHOUT_CLASSIFICATION	1.3192778421962007E-6	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999195119141	WITHOUT_CLASSIFICATION	8.048808592687588E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999026906292724	WITHOUT_CLASSIFICATION	9.730937072754602E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999893961693024	WITHOUT_CLASSIFICATION	1.0603830697561157E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999943773484332	WITHOUT_CLASSIFICATION	5.622651566753479E-6	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999885707377089	WITHOUT_CLASSIFICATION	1.1429262291127091E-5	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999989809015786	WITHOUT_CLASSIFICATION	1.0190984214861622E-6	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999995136626249	WITHOUT_CLASSIFICATION	4.863373750677806E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999585754537523	WITHOUT_CLASSIFICATION	4.142454624767587E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999585754537523	WITHOUT_CLASSIFICATION	4.142454624767587E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997931103641	WITHOUT_CLASSIFICATION	2.0688963580011293E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999585754537523	WITHOUT_CLASSIFICATION	4.142454624767587E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999585754537523	WITHOUT_CLASSIFICATION	4.142454624767587E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999700857465698	WITHOUT_CLASSIFICATION	2.9914253430244677E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999939182207513	WITHOUT_CLASSIFICATION	6.08177924865234E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996074068834	WITHOUT_CLASSIFICATION	3.9259311660913074E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995736990023	WITHOUT_CLASSIFICATION	4.263009977144785E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999891246104	WITHOUT_CLASSIFICATION	1.0875389511659923E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999919295037552	WITHOUT_CLASSIFICATION	8.070496244888429E-6	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999986860182161	WITHOUT_CLASSIFICATION	1.31398178393798E-6	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999997861255884	WITHOUT_CLASSIFICATION	2.1387441167918403E-7	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999950808088192	WITHOUT_CLASSIFICATION	4.919191180811401E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999000968229469	WITHOUT_CLASSIFICATION	9.990317705302176E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999954935211822	WITHOUT_CLASSIFICATION	4.506478817772323E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999993644813222	WITHOUT_CLASSIFICATION	6.355186776718032E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999942090541386	WITHOUT_CLASSIFICATION	5.790945861437172E-6	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999980191595864	WITHOUT_CLASSIFICATION	1.9808404135852724E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999991037322746	WITHOUT_CLASSIFICATION	8.962677253214084E-7	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999532439703497	WITHOUT_CLASSIFICATION	4.675602965023507E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999933722601411	WITHOUT_CLASSIFICATION	6.627739858952293E-6	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999989251120527	WITHOUT_CLASSIFICATION	1.074887947269079E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999892444944691	WITHOUT_CLASSIFICATION	1.0755505530907792E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999976530716553	WITHOUT_CLASSIFICATION	2.3469283447427893E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985478907317	WITHOUT_CLASSIFICATION	1.4521092682605738E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999817988612718	WITHOUT_CLASSIFICATION	1.8201138728250266E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999933722601411	WITHOUT_CLASSIFICATION	6.627739858952293E-6	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999780781944914	WITHOUT_CLASSIFICATION	2.192180550872583E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999964804153686	WITHOUT_CLASSIFICATION	3.519584631332674E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997836884379	WITHOUT_CLASSIFICATION	2.1631156198972095E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996255738625	WITHOUT_CLASSIFICATION	3.744261374836839E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999896323876959	WITHOUT_CLASSIFICATION	1.0367612304089524E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999997999777417	WITHOUT_CLASSIFICATION	2.0002225831882571E-7	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9998704225765959	WITHOUT_CLASSIFICATION	1.2957742340422037E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999995648290759	WITHOUT_CLASSIFICATION	4.351709240935757E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999993513157819	WITHOUT_CLASSIFICATION	6.48684218096011E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998665587324	WITHOUT_CLASSIFICATION	1.3344126755959883E-7	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999974582368444	WITHOUT_CLASSIFICATION	2.5417631555677804E-6	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992901426894	WITHOUT_CLASSIFICATION	7.098573106370213E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999966309943308	WITHOUT_CLASSIFICATION	3.36900566916577E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999992954613016	WITHOUT_CLASSIFICATION	7.045386983470448E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998182079091288	WITHOUT_CLASSIFICATION	1.8179209087113972E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999748759688	WITHOUT_CLASSIFICATION	2.51240312361515E-8	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999798966963903	WITHOUT_CLASSIFICATION	2.010330360963478E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999879716097465	WITHOUT_CLASSIFICATION	1.2028390253467517E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999875639705645	WITHOUT_CLASSIFICATION	1.2436029435550013E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999746665670899	WITHOUT_CLASSIFICATION	2.5333432910066223E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999988867489954	WITHOUT_CLASSIFICATION	1.113251004589752E-6	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999966623655893	WITHOUT_CLASSIFICATION	3.3376344107547666E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999996431844	WITHOUT_CLASSIFICATION	3.568155949852468E-10	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999993513157819	WITHOUT_CLASSIFICATION	6.48684218096011E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999987378560928	WITHOUT_CLASSIFICATION	1.2621439072352931E-6	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999988755401769	WITHOUT_CLASSIFICATION	1.1244598231919443E-6	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999995342003095	WITHOUT_CLASSIFICATION	4.6579969042802474E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999905925441139	WITHOUT_CLASSIFICATION	9.407455886070656E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849212604965	WITHOUT_CLASSIFICATION	1.5078739503557205E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999329113815174	WITHOUT_CLASSIFICATION	6.708861848263498E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999833328090201	WITHOUT_CLASSIFICATION	1.6667190979989698E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999976103429017	WITHOUT_CLASSIFICATION	2.3896570983275233E-6	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999958783829038	WITHOUT_CLASSIFICATION	4.121617096097214E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999210051672919	WITHOUT_CLASSIFICATION	7.899483270810468E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999974635524894	WITHOUT_CLASSIFICATION	2.536447510587422E-6	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998950310741	WITHOUT_CLASSIFICATION	1.0496892588952914E-7	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999989406659715	WITHOUT_CLASSIFICATION	1.0593340284636374E-6	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999953701013137	WITHOUT_CLASSIFICATION	4.62989868630027E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999905020677785	WITHOUT_CLASSIFICATION	9.497932221529524E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996972579368	WITHOUT_CLASSIFICATION	3.0274206315050837E-7	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999974635524894	WITHOUT_CLASSIFICATION	2.536447510587422E-6	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999997144800885	WITHOUT_CLASSIFICATION	2.85519911501646E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999986880117827	WITHOUT_CLASSIFICATION	1.311988217208004E-6	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999979018077333	WITHOUT_CLASSIFICATION	2.0981922667384647E-6	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999981352946409	WITHOUT_CLASSIFICATION	1.8647053591496167E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.999998471884686	WITHOUT_CLASSIFICATION	1.5281153139146135E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999997996061775	WITHOUT_CLASSIFICATION	2.0039382256010557E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999996960988101	WITHOUT_CLASSIFICATION	3.039011899924461E-7	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986937485612	WITHOUT_CLASSIFICATION	1.3062514387658797E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954082291992	WITHOUT_CLASSIFICATION	4.5917708008438496E-6	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966391786154	WITHOUT_CLASSIFICATION	3.3608213845276606E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995258520483	WITHOUT_CLASSIFICATION	4.7414795170908646E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995501987794	WITHOUT_CLASSIFICATION	4.4980122062326706E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995561227356	WITHOUT_CLASSIFICATION	4.438772643631558E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995561227356	WITHOUT_CLASSIFICATION	4.438772643631558E-7	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.99992642990303	WITHOUT_CLASSIFICATION	7.357009697006619E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996548425097	WITHOUT_CLASSIFICATION	3.4515749023530666E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999956823590133	WITHOUT_CLASSIFICATION	4.317640986704975E-6	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999921546372162	WITHOUT_CLASSIFICATION	7.845362783851791E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999960234516259	WITHOUT_CLASSIFICATION	3.976548374119745E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875575222466	WITHOUT_CLASSIFICATION	1.2442477753532736E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998490432119519	WITHOUT_CLASSIFICATION	1.5095678804811992E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471102434296	WITHOUT_CLASSIFICATION	5.288975657047236E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999938724766372	WITHOUT_CLASSIFICATION	6.127523362910488E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702502710365	WITHOUT_CLASSIFICATION	2.974972896353946E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875575222466	WITHOUT_CLASSIFICATION	1.2442477753532736E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998490432119519	WITHOUT_CLASSIFICATION	1.5095678804811992E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471102434296	WITHOUT_CLASSIFICATION	5.288975657047236E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999314879818942	WITHOUT_CLASSIFICATION	6.851201810570924E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999798060224617	WITHOUT_CLASSIFICATION	2.0193977538327613E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999997945393813	WITHOUT_CLASSIFICATION	2.0546061859995823E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999995460341747	WITHOUT_CLASSIFICATION	4.5396582524612525E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999969101881493	WITHOUT_CLASSIFICATION	3.0898118506386E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999997823780301	WITHOUT_CLASSIFICATION	2.1762196977003028E-7	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999047019979	WITHOUT_CLASSIFICATION	9.529800210435062E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.999990821646891	WITHOUT_CLASSIFICATION	9.17835310900685E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9997513853123272	WITHOUT_CLASSIFICATION	2.4861468767282605E-4	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999859007450641	WITHOUT_CLASSIFICATION	1.4099254935858417E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999935020638177	WITHOUT_CLASSIFICATION	6.497936182339152E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999155573604469	WITHOUT_CLASSIFICATION	8.44426395531232E-5	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999631409154103	WITHOUT_CLASSIFICATION	3.6859084589657755E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999991565631021	WITHOUT_CLASSIFICATION	8.434368979083072E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999958642748	WITHOUT_CLASSIFICATION	4.135725192007124E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999975077582646	WITHOUT_CLASSIFICATION	2.492241735525408E-6	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9992673707331704	WITHOUT_CLASSIFICATION	7.326292668296173E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999382336469569	WITHOUT_CLASSIFICATION	6.176635304304545E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999974288742337	WITHOUT_CLASSIFICATION	2.5711257662572942E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999661308478702	WITHOUT_CLASSIFICATION	3.3869152129737285E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999999890405184	WITHOUT_CLASSIFICATION	1.0959481600277937E-7	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999831780555	WITHOUT_CLASSIFICATION	1.6821944493280124E-8	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995733527618	WITHOUT_CLASSIFICATION	4.2664723820089203E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999994746535047	WITHOUT_CLASSIFICATION	5.2534649540684E-7	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999998154335132	WITHOUT_CLASSIFICATION	1.8456648678655263E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999974792862159	WITHOUT_CLASSIFICATION	2.5207137841737246E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999252169377159	WITHOUT_CLASSIFICATION	7.478306228413022E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997706518855894	WITHOUT_CLASSIFICATION	2.2934811441053266E-4	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999988729741016	WITHOUT_CLASSIFICATION	1.1270258983161225E-6	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832683226868	WITHOUT_CLASSIFICATION	1.1673167731316614E-4	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996960796826054	WITHOUT_CLASSIFICATION	3.039203173945669E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146042921	WITHOUT_CLASSIFICATION	1.4853957078942995E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146042921	WITHOUT_CLASSIFICATION	1.4853957078942995E-6	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999498554040587	WITHOUT_CLASSIFICATION	5.014459594131995E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999971136752056	WITHOUT_CLASSIFICATION	2.8863247944452595E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999993925526903	WITHOUT_CLASSIFICATION	6.07447309707181E-7	TEST
/	WITHOUT_CLASSIFICATION	0.998704959864255	WITHOUT_CLASSIFICATION	0.0012950401357448924	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999966088799983	WITHOUT_CLASSIFICATION	3.391120001748171E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998900720651	WITHOUT_CLASSIFICATION	1.0992793484374806E-7	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999286106494455	WITHOUT_CLASSIFICATION	7.138935055451066E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999982226688651	WITHOUT_CLASSIFICATION	1.7773311349914419E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999962212051285	WITHOUT_CLASSIFICATION	3.7787948713967776E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910884012432	WITHOUT_CLASSIFICATION	8.911598756850231E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989720745007	WITHOUT_CLASSIFICATION	1.0279254992974792E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885381962285	WITHOUT_CLASSIFICATION	1.1461803771591247E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623078318494	WITHOUT_CLASSIFICATION	3.769216815059991E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927384860774	WITHOUT_CLASSIFICATION	7.261513922636245E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999655509790458	WITHOUT_CLASSIFICATION	3.4449020954191976E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908834794345	WITHOUT_CLASSIFICATION	9.116520565377216E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914823824635	WITHOUT_CLASSIFICATION	8.517617536456243E-6	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885950465549	WITHOUT_CLASSIFICATION	1.1404953444967857E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730072846608	WITHOUT_CLASSIFICATION	2.6992715339284703E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974585585916	WITHOUT_CLASSIFICATION	2.5414414084079516E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999994265947132	WITHOUT_CLASSIFICATION	5.734052867576951E-7	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999732883772543	WITHOUT_CLASSIFICATION	2.6711622745802377E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999869594781611	WITHOUT_CLASSIFICATION	1.3040521839012784E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999999930597432	WITHOUT_CLASSIFICATION	6.940256802925986E-8	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997805169615	WITHOUT_CLASSIFICATION	2.1948303852185995E-7	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.999999650392708	WITHOUT_CLASSIFICATION	3.4960729189772007E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999983172059875	WITHOUT_CLASSIFICATION	1.6827940123915904E-6	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999221632188	WITHOUT_CLASSIFICATION	7.783678120732351E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999869594781611	WITHOUT_CLASSIFICATION	1.3040521839012784E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999869594781611	WITHOUT_CLASSIFICATION	1.3040521839012784E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999961342677285	WITHOUT_CLASSIFICATION	3.86573227152123E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999995464970309	WITHOUT_CLASSIFICATION	4.5350296906014564E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999991536097097	WITHOUT_CLASSIFICATION	8.463902902735144E-7	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999951736571906	WITHOUT_CLASSIFICATION	4.826342809403743E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999836240164219	WITHOUT_CLASSIFICATION	1.6375983578048223E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999661308478702	WITHOUT_CLASSIFICATION	3.3869152129737285E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999509270213598	WITHOUT_CLASSIFICATION	4.907297864024033E-5	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997732436393	WITHOUT_CLASSIFICATION	2.2675636064796734E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999977526230276	WITHOUT_CLASSIFICATION	2.247376972286774E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922258353706	WITHOUT_CLASSIFICATION	7.774164629410709E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999972253770821	WITHOUT_CLASSIFICATION	2.7746229178997346E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891813746666	WITHOUT_CLASSIFICATION	1.0818625333294095E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999977898055484	WITHOUT_CLASSIFICATION	2.2101944514693968E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999977898055484	WITHOUT_CLASSIFICATION	2.2101944514693968E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999955098817612	WITHOUT_CLASSIFICATION	4.490118238778672E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999955098817612	WITHOUT_CLASSIFICATION	4.490118238778672E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953959164815	WITHOUT_CLASSIFICATION	4.604083518599268E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765451723852	WITHOUT_CLASSIFICATION	2.3454827614826574E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999951909190324	WITHOUT_CLASSIFICATION	4.8090809675820365E-6	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851563242964	WITHOUT_CLASSIFICATION	1.4843675703645395E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999994314684566	WITHOUT_CLASSIFICATION	5.685315434963184E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999989138321519	WITHOUT_CLASSIFICATION	1.0861678481825228E-6	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937975545988	WITHOUT_CLASSIFICATION	6.2024454012755635E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915403400624	WITHOUT_CLASSIFICATION	8.45965993757174E-6	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999990905870063	WITHOUT_CLASSIFICATION	9.094129937533972E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9995859331525505	WITHOUT_CLASSIFICATION	4.140668474494608E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999976054299572	WITHOUT_CLASSIFICATION	2.394570042872112E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999954349585745	WITHOUT_CLASSIFICATION	4.565041425578691E-6	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999999644951595	WITHOUT_CLASSIFICATION	3.550484049942532E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999985260149922	WITHOUT_CLASSIFICATION	1.4739850077731858E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999951141031922	WITHOUT_CLASSIFICATION	4.885896807700842E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999951141031922	WITHOUT_CLASSIFICATION	4.885896807700842E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999951141031922	WITHOUT_CLASSIFICATION	4.885896807700842E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999756751252	WITHOUT_CLASSIFICATION	2.4324874840747073E-8	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.999992986412906	WITHOUT_CLASSIFICATION	7.013587093901904E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998284422011	WITHOUT_CLASSIFICATION	1.7155779876890513E-7	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997242933614696	WITHOUT_CLASSIFICATION	2.7570663853039313E-4	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996542657676	WITHOUT_CLASSIFICATION	3.457342323908201E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830212843239	WITHOUT_CLASSIFICATION	1.6978715676067206E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998062573091	WITHOUT_CLASSIFICATION	1.9374269082803882E-7	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999687419919	WITHOUT_CLASSIFICATION	3.125800810173498E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999629815124	WITHOUT_CLASSIFICATION	3.701848759746826E-8	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999494202376	WITHOUT_CLASSIFICATION	5.057976233392192E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998233290245	WITHOUT_CLASSIFICATION	1.7667097547398195E-7	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999989390294023	WITHOUT_CLASSIFICATION	1.0609705977524793E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973022049036	WITHOUT_CLASSIFICATION	2.6977950964160624E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999424962459	WITHOUT_CLASSIFICATION	5.750375408069836E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999987069655417	WITHOUT_CLASSIFICATION	1.293034458294447E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999998393510952	WITHOUT_CLASSIFICATION	1.6064890489157147E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995834279923	WITHOUT_CLASSIFICATION	4.1657200771993386E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999985485117484	WITHOUT_CLASSIFICATION	1.451488251565418E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999998690027365	WITHOUT_CLASSIFICATION	1.3099726350471932E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999998273024235	WITHOUT_CLASSIFICATION	1.7269757641941694E-7	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999996936821736	WITHOUT_CLASSIFICATION	3.0631782652471384E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999969507775243	WITHOUT_CLASSIFICATION	3.049222475758369E-6	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998252310869	WITHOUT_CLASSIFICATION	1.7476891308808046E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999992776985137	WITHOUT_CLASSIFICATION	7.223014863862379E-7	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999955308745986	WITHOUT_CLASSIFICATION	4.469125401357404E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999996032270527	WITHOUT_CLASSIFICATION	3.967729473786984E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994232437387	WITHOUT_CLASSIFICATION	5.767562613659684E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999978694715591	WITHOUT_CLASSIFICATION	2.130528440965938E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999986140107239	WITHOUT_CLASSIFICATION	1.385989276186357E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999953653948264	WITHOUT_CLASSIFICATION	4.634605173679284E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999975303088	WITHOUT_CLASSIFICATION	2.4696911970281567E-9	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999994733782194	WITHOUT_CLASSIFICATION	5.266217806580453E-7	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999996188251927	WITHOUT_CLASSIFICATION	3.8117480728799827E-6	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999996555529216	WITHOUT_CLASSIFICATION	3.444470783650774E-7	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999388615165098	WITHOUT_CLASSIFICATION	6.113848349014822E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999977069736551	WITHOUT_CLASSIFICATION	2.2930263449356866E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999320728288	WITHOUT_CLASSIFICATION	6.792717122186438E-8	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.999999365799194	WITHOUT_CLASSIFICATION	6.342008059999582E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999815246941	WITHOUT_CLASSIFICATION	1.8475305887258794E-7	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999996735571073	WITHOUT_CLASSIFICATION	3.264428927791774E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999999994143241	WITHOUT_CLASSIFICATION	5.856758968179138E-9	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999974264498489	WITHOUT_CLASSIFICATION	2.5735501511476983E-6	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999946594903338	WITHOUT_CLASSIFICATION	5.340509666175571E-6	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996162893869	WITHOUT_CLASSIFICATION	3.8371061301148004E-7	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999998650583656	WITHOUT_CLASSIFICATION	1.3494163449718368E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999985396363557	WITHOUT_CLASSIFICATION	1.460363644375548E-6	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999978321791413	WITHOUT_CLASSIFICATION	2.1678208587333356E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999822098099519	WITHOUT_CLASSIFICATION	1.7790190048197727E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999991469682297	WITHOUT_CLASSIFICATION	8.530317702944788E-6	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998139369491242	WITHOUT_CLASSIFICATION	1.860630508757463E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999998819433811	WITHOUT_CLASSIFICATION	1.180566189465127E-7	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998799486629965	WITHOUT_CLASSIFICATION	1.2005133700355921E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999941849935104	WITHOUT_CLASSIFICATION	5.8150064895650256E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999771309309378	WITHOUT_CLASSIFICATION	2.2869069062181207E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999994143923577	WITHOUT_CLASSIFICATION	5.856076423873727E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999679324877719	WITHOUT_CLASSIFICATION	3.206751222810168E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998452733033985	WITHOUT_CLASSIFICATION	1.5472669660154633E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999986449806161	WITHOUT_CLASSIFICATION	1.3550193838911217E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999928762893494	WITHOUT_CLASSIFICATION	7.123710650667024E-6	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999655083477115	WITHOUT_CLASSIFICATION	3.4491652288463056E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999989172364788	WITHOUT_CLASSIFICATION	1.082763521169267E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998816136099	WITHOUT_CLASSIFICATION	1.1838639010246091E-7	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999982379028985	WITHOUT_CLASSIFICATION	1.7620971015466634E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999993568539383	WITHOUT_CLASSIFICATION	6.43146061700014E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999333325605	WITHOUT_CLASSIFICATION	6.666743950235788E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999978775396	WITHOUT_CLASSIFICATION	2.1224603910998585E-8	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999948418721	WITHOUT_CLASSIFICATION	5.158127933667919E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999849150347	WITHOUT_CLASSIFICATION	1.5084965309765656E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999762400358013	WITHOUT_CLASSIFICATION	2.3759964198704457E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999762400358013	WITHOUT_CLASSIFICATION	2.3759964198704457E-4	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999949949047285	WITHOUT_CLASSIFICATION	5.005095271447281E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999981858251051	WITHOUT_CLASSIFICATION	1.8141748948840603E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999993882566514	WITHOUT_CLASSIFICATION	6.117433486583239E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999992370763002	WITHOUT_CLASSIFICATION	7.629236996809033E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999998128621547	WITHOUT_CLASSIFICATION	1.8713784547145574E-7	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999677804449827	WITHOUT_CLASSIFICATION	3.221955501725964E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999720512731	WITHOUT_CLASSIFICATION	2.7948726901851884E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994109810771	WITHOUT_CLASSIFICATION	5.890189229171186E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999980537275068	WITHOUT_CLASSIFICATION	1.946272493090832E-6	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999996893573112	WITHOUT_CLASSIFICATION	3.1064268883740207E-7	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996680453257	WITHOUT_CLASSIFICATION	3.319546743623211E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999962843659	WITHOUT_CLASSIFICATION	3.7156341361247326E-9	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999982429055493	WITHOUT_CLASSIFICATION	1.7570944507183448E-6	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999034913055	WITHOUT_CLASSIFICATION	9.65086945650562E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999992949149562	WITHOUT_CLASSIFICATION	7.050850437622481E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999933398158144	WITHOUT_CLASSIFICATION	6.660184185644104E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999995292468122	WITHOUT_CLASSIFICATION	4.707531878427589E-7	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999960209813665	WITHOUT_CLASSIFICATION	3.979018633438115E-6	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999995321507482	WITHOUT_CLASSIFICATION	4.678492517707667E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999892708251982	WITHOUT_CLASSIFICATION	1.0729174801801523E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999917025831275	WITHOUT_CLASSIFICATION	8.297416872423861E-6	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999196710447	WITHOUT_CLASSIFICATION	8.032895530427057E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999300592732272	WITHOUT_CLASSIFICATION	6.994072677288594E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999992196305527	WITHOUT_CLASSIFICATION	7.803694472329442E-7	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999449471731	WITHOUT_CLASSIFICATION	5.505282693100662E-8	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999979039228212	WITHOUT_CLASSIFICATION	2.0960771788847443E-6	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.99999949830277	WITHOUT_CLASSIFICATION	5.016972300392284E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999996746182319	WITHOUT_CLASSIFICATION	3.2538176804115487E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999773462881978	WITHOUT_CLASSIFICATION	2.2653711802188407E-5	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999967324634379	WITHOUT_CLASSIFICATION	3.2675365621221857E-6	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999943994034416	WITHOUT_CLASSIFICATION	5.6005965583657774E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999993577865942	WITHOUT_CLASSIFICATION	6.422134057379436E-7	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999989519912421	WITHOUT_CLASSIFICATION	1.048008757935964E-6	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999926841839742	WITHOUT_CLASSIFICATION	7.315816025810068E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999986947616237	WITHOUT_CLASSIFICATION	1.3052383761997936E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999986947616237	WITHOUT_CLASSIFICATION	1.3052383761997936E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999995541742333	WITHOUT_CLASSIFICATION	4.4582576683472244E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999817334783999	WITHOUT_CLASSIFICATION	1.8266521600090086E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997211124085	WITHOUT_CLASSIFICATION	2.788875914653371E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999948293387694	WITHOUT_CLASSIFICATION	5.170661230649811E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999979447281931	WITHOUT_CLASSIFICATION	2.055271806859074E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999961474708381	WITHOUT_CLASSIFICATION	3.852529161903539E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999982219509107	WITHOUT_CLASSIFICATION	1.7780490893414407E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999997583197	WITHOUT_CLASSIFICATION	2.416802999187767E-7	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999984375308307	WITHOUT_CLASSIFICATION	1.562469169319081E-6	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999041809621706	WITHOUT_CLASSIFICATION	9.581903782939183E-5	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993959875193	WITHOUT_CLASSIFICATION	6.040124807027151E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999830279275	WITHOUT_CLASSIFICATION	1.6972072485235206E-8	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999953806290832	WITHOUT_CLASSIFICATION	4.619370916757946E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999908377621491	WITHOUT_CLASSIFICATION	9.162237850815117E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999969552774519	WITHOUT_CLASSIFICATION	3.04472254813507E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999847652625243	WITHOUT_CLASSIFICATION	1.5234737475765043E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999892547190493	WITHOUT_CLASSIFICATION	1.0745280950702412E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999892547190493	WITHOUT_CLASSIFICATION	1.0745280950702412E-4	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999992768515	WITHOUT_CLASSIFICATION	7.231484926251693E-9	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999914366378476	WITHOUT_CLASSIFICATION	8.563362152349619E-6	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999994903913907	WITHOUT_CLASSIFICATION	5.096086092054779E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996881276548	WITHOUT_CLASSIFICATION	3.118723451140856E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999975601717215	WITHOUT_CLASSIFICATION	2.4398282785412013E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998558841334345	WITHOUT_CLASSIFICATION	1.4411586656553485E-4	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999993641022722	WITHOUT_CLASSIFICATION	6.358977278063352E-7	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999997160656185	WITHOUT_CLASSIFICATION	2.8393438150587633E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999016101105	WITHOUT_CLASSIFICATION	9.838988950449759E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999982298563225	WITHOUT_CLASSIFICATION	1.7701436775156471E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999982298563225	WITHOUT_CLASSIFICATION	1.7701436775156471E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999991430819654	WITHOUT_CLASSIFICATION	8.569180346304126E-7	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999818881516	WITHOUT_CLASSIFICATION	1.811184838576326E-8	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999997625862624	WITHOUT_CLASSIFICATION	2.3741373752263953E-7	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999871371716827	WITHOUT_CLASSIFICATION	1.2862828317195478E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999990950530324	WITHOUT_CLASSIFICATION	9.049469676022017E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999996155829609	WITHOUT_CLASSIFICATION	3.844170390017833E-7	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999999086419015	WITHOUT_CLASSIFICATION	9.135809850143975E-7	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999430673815027	WITHOUT_CLASSIFICATION	5.6932618497123556E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999998860736109	WITHOUT_CLASSIFICATION	1.1392638915509364E-7	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999835879252	WITHOUT_CLASSIFICATION	1.6412074800613337E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999965180159317	WITHOUT_CLASSIFICATION	3.4819840681902174E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999916398624532	WITHOUT_CLASSIFICATION	8.360137546707335E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998932563412	WITHOUT_CLASSIFICATION	1.0674365872382714E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999593504772195	WITHOUT_CLASSIFICATION	4.064952278050338E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999162031779193	WITHOUT_CLASSIFICATION	8.379682208080005E-5	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999264909481691	WITHOUT_CLASSIFICATION	7.3509051830896E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999952324880623	WITHOUT_CLASSIFICATION	4.767511937703556E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999695605197	WITHOUT_CLASSIFICATION	3.0439480268767657E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999979549826316	WITHOUT_CLASSIFICATION	2.0450173684209214E-6	TEST
by default	WITHOUT_CLASSIFICATION	0.9999983839613904	WITHOUT_CLASSIFICATION	1.6160386096115921E-6	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999935397031805	WITHOUT_CLASSIFICATION	6.460296819408011E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999997496728136	WITHOUT_CLASSIFICATION	2.5032718643208903E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999914738938482	WITHOUT_CLASSIFICATION	8.52610615182035E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999409363531296	WITHOUT_CLASSIFICATION	5.9063646870337724E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999980160253111	WITHOUT_CLASSIFICATION	1.983974688932548E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999994296365861	WITHOUT_CLASSIFICATION	5.703634139964603E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999995149335922	WITHOUT_CLASSIFICATION	4.850664078896216E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997774089705	WITHOUT_CLASSIFICATION	2.2259102958027827E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996459713672098	WITHOUT_CLASSIFICATION	3.540286327902141E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999997715830871	WITHOUT_CLASSIFICATION	2.2841691305648379E-7	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998655266732	WITHOUT_CLASSIFICATION	1.3447332676898628E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998762066205	WITHOUT_CLASSIFICATION	1.237933795126471E-7	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999609983621374	WITHOUT_CLASSIFICATION	3.9001637862709776E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999961335411084	WITHOUT_CLASSIFICATION	3.866458891562864E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999813517441836	WITHOUT_CLASSIFICATION	1.864825581645448E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999959391233051	WITHOUT_CLASSIFICATION	4.060876694953448E-6	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999776526271094	WITHOUT_CLASSIFICATION	2.2347372890578795E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999878647547848	WITHOUT_CLASSIFICATION	1.2135245215087383E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999954857154737	WITHOUT_CLASSIFICATION	4.5142845263306945E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999954857154737	WITHOUT_CLASSIFICATION	4.5142845263306945E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999946289025784	WITHOUT_CLASSIFICATION	5.37109742149839E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999985191686728	WITHOUT_CLASSIFICATION	1.4808313272243495E-6	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998140595375	WITHOUT_CLASSIFICATION	1.8594046237965988E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999948836767096	WITHOUT_CLASSIFICATION	5.116323290391745E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999989806366922	WITHOUT_CLASSIFICATION	1.0193633077425605E-6	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999864582726	WITHOUT_CLASSIFICATION	1.354172738348489E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999991436198	WITHOUT_CLASSIFICATION	8.563802682620167E-10	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999982092828558	WITHOUT_CLASSIFICATION	1.7907171442631911E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999946289025784	WITHOUT_CLASSIFICATION	5.37109742149839E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999985191686728	WITHOUT_CLASSIFICATION	1.4808313272243495E-6	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999944226818133	WITHOUT_CLASSIFICATION	5.5773181867230956E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999989511927422	WITHOUT_CLASSIFICATION	1.0488072578828897E-6	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999954974014353	WITHOUT_CLASSIFICATION	4.502598564713877E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999836684509672	WITHOUT_CLASSIFICATION	1.6331549032768074E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999487358537	WITHOUT_CLASSIFICATION	5.126414616209194E-8	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999995972612231	WITHOUT_CLASSIFICATION	4.0273877695478324E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999996703517886	WITHOUT_CLASSIFICATION	3.2964821148540717E-7	TEST
}	WITHOUT_CLASSIFICATION	0.9987765687865248	WITHOUT_CLASSIFICATION	0.0012234312134751623	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998037023379	WITHOUT_CLASSIFICATION	1.9629766208772857E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999768650981853	WITHOUT_CLASSIFICATION	2.3134901814771923E-5	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999961169662813	WITHOUT_CLASSIFICATION	3.883033718701846E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999768650981853	WITHOUT_CLASSIFICATION	2.3134901814771923E-5	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999893666837207	WITHOUT_CLASSIFICATION	1.0633316279248147E-5	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999930226042263	WITHOUT_CLASSIFICATION	6.977395773674473E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999828831979923	WITHOUT_CLASSIFICATION	1.7116802007599177E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855757376088	WITHOUT_CLASSIFICATION	1.4424262391163967E-5	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999955017947755	WITHOUT_CLASSIFICATION	4.498205224584394E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9987765687865248	WITHOUT_CLASSIFICATION	0.0012234312134751623	TEST
}	WITHOUT_CLASSIFICATION	0.9987765687865248	WITHOUT_CLASSIFICATION	0.0012234312134751623	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999995685953702	WITHOUT_CLASSIFICATION	4.314046297999981E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999993060808122	WITHOUT_CLASSIFICATION	6.939191877510469E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999972165819202	WITHOUT_CLASSIFICATION	2.7834180797633223E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999990269978719	WITHOUT_CLASSIFICATION	9.730021281606044E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999996879086838	WITHOUT_CLASSIFICATION	3.120913162219391E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999969608766115	WITHOUT_CLASSIFICATION	3.039123388436239E-6	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999659614437806	WITHOUT_CLASSIFICATION	3.40385562193837E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999958909500318	WITHOUT_CLASSIFICATION	4.109049968112332E-6	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999992008781388	WITHOUT_CLASSIFICATION	7.991218611974697E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9989365412292179	WITHOUT_CLASSIFICATION	0.001063458770782055	TEST
columns	WITHOUT_CLASSIFICATION	0.999957508946855	WITHOUT_CLASSIFICATION	4.2491053144989945E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999863441191128	WITHOUT_CLASSIFICATION	1.3655880887179713E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999982568420218	WITHOUT_CLASSIFICATION	1.7431579781343097E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9998780671018508	WITHOUT_CLASSIFICATION	1.2193289814921311E-4	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999935448971057	WITHOUT_CLASSIFICATION	6.455102894342838E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999999305173432	WITHOUT_CLASSIFICATION	6.94826567928374E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.99999994999468	WITHOUT_CLASSIFICATION	5.0005320108512775E-8	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999990857459781	WITHOUT_CLASSIFICATION	9.142540219126604E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998347165986	WITHOUT_CLASSIFICATION	1.6528340145075264E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999995218153473	WITHOUT_CLASSIFICATION	4.781846527334277E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9996561454684983	WITHOUT_CLASSIFICATION	3.4385453150166917E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999382164845	WITHOUT_CLASSIFICATION	6.17835155816362E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999412479104892	WITHOUT_CLASSIFICATION	5.875208951090994E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995801681661	WITHOUT_CLASSIFICATION	4.1983183384452954E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999993866876703	WITHOUT_CLASSIFICATION	6.133123296507718E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999992399440897	WITHOUT_CLASSIFICATION	7.600559104022036E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998497867241588	WITHOUT_CLASSIFICATION	1.5021327584124273E-4	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999857742923	WITHOUT_CLASSIFICATION	1.4225707703190645E-8	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999988518298074	WITHOUT_CLASSIFICATION	1.148170192539486E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999971046238391	WITHOUT_CLASSIFICATION	2.895376161001923E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999976602537123	WITHOUT_CLASSIFICATION	2.339746287705213E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999847071305894	WITHOUT_CLASSIFICATION	1.5292869410531552E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999965332387122	WITHOUT_CLASSIFICATION	3.4667612878752407E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999958909500318	WITHOUT_CLASSIFICATION	4.109049968112332E-6	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999976357630239	WITHOUT_CLASSIFICATION	2.364236975968361E-6	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999088556607817	WITHOUT_CLASSIFICATION	9.114433921828997E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9976162564088418	WITHOUT_CLASSIFICATION	0.0023837435911582805	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999851345728437	WITHOUT_CLASSIFICATION	1.4865427156260791E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999988110014691	WITHOUT_CLASSIFICATION	1.1889985308271553E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999967554922351	WITHOUT_CLASSIFICATION	3.2445077648405576E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999990269978719	WITHOUT_CLASSIFICATION	9.730021281606044E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999990269978719	WITHOUT_CLASSIFICATION	9.730021281606044E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999993418329484	WITHOUT_CLASSIFICATION	6.581670515665582E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999972340878835	WITHOUT_CLASSIFICATION	2.7659121164253113E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999983746423604	WITHOUT_CLASSIFICATION	1.6253576394980241E-6	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996805561361	WITHOUT_CLASSIFICATION	3.19443863893172E-7	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999975332344935	WITHOUT_CLASSIFICATION	2.4667655065745025E-6	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999990046049531	WITHOUT_CLASSIFICATION	9.95395046968051E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999982299754007	WITHOUT_CLASSIFICATION	1.7700245992877114E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999994447132673	WITHOUT_CLASSIFICATION	5.552867327557819E-7	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999997840013294	WITHOUT_CLASSIFICATION	2.159986707010345E-7	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999999411529886	WITHOUT_CLASSIFICATION	5.884701140570308E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999994226864117	WITHOUT_CLASSIFICATION	5.773135882562466E-7	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999990262852333	WITHOUT_CLASSIFICATION	9.737147667038897E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999561680335404	WITHOUT_CLASSIFICATION	4.383196645959786E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999946289025784	WITHOUT_CLASSIFICATION	5.37109742149839E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999994226864117	WITHOUT_CLASSIFICATION	5.773135882562466E-7	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999981409045995	WITHOUT_CLASSIFICATION	1.8590954005006598E-5	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999993286999226	WITHOUT_CLASSIFICATION	6.713000772747251E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996025421639	WITHOUT_CLASSIFICATION	3.9745783609374325E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9949453201611002	WITHOUT_CLASSIFICATION	0.005054679838899842	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999561680335404	WITHOUT_CLASSIFICATION	4.383196645959786E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998574375589094	WITHOUT_CLASSIFICATION	1.4256244109048087E-4	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997446681396	WITHOUT_CLASSIFICATION	2.5533186040696E-7	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997739916083	WITHOUT_CLASSIFICATION	2.2600839163084056E-7	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999914025861	WITHOUT_CLASSIFICATION	8.59741395567884E-9	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9994414519470782	WITHOUT_CLASSIFICATION	5.585480529217194E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999990765595526	WITHOUT_CLASSIFICATION	9.234404474027144E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999986923439245	WITHOUT_CLASSIFICATION	1.3076560755609173E-6	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995907356847078	WITHOUT_CLASSIFICATION	4.092643152922021E-4	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999965227438932	WITHOUT_CLASSIFICATION	3.4772561067973824E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988245095364	WITHOUT_CLASSIFICATION	1.175490463624607E-6	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999982411293679	WITHOUT_CLASSIFICATION	1.7588706321539626E-6	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999999880876388	WITHOUT_CLASSIFICATION	1.1912361199753827E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999994226864117	WITHOUT_CLASSIFICATION	5.773135882562466E-7	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998574375589094	WITHOUT_CLASSIFICATION	1.4256244109048087E-4	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997739916083	WITHOUT_CLASSIFICATION	2.2600839163084056E-7	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999994592510525	WITHOUT_CLASSIFICATION	5.407489475204389E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999948304497589	WITHOUT_CLASSIFICATION	5.169550241129654E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999988782755345	WITHOUT_CLASSIFICATION	1.121724465500439E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999561680335404	WITHOUT_CLASSIFICATION	4.383196645959786E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999986041376058	WITHOUT_CLASSIFICATION	1.3958623942873733E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9996559604811919	WITHOUT_CLASSIFICATION	3.4403951880810317E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9992856588995801	WITHOUT_CLASSIFICATION	7.143411004199396E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998359440773695	WITHOUT_CLASSIFICATION	1.640559226303404E-4	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995907356847078	WITHOUT_CLASSIFICATION	4.092643152922021E-4	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999981409045995	WITHOUT_CLASSIFICATION	1.8590954005006598E-5	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9996598008584396	WITHOUT_CLASSIFICATION	3.4019914156033855E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999998047432421	WITHOUT_CLASSIFICATION	1.9525675789968897E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999907845882008	WITHOUT_CLASSIFICATION	9.215411799212804E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999911576091389	WITHOUT_CLASSIFICATION	8.842390861046285E-6	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999829779335757	WITHOUT_CLASSIFICATION	1.702206642427891E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999887571620812	WITHOUT_CLASSIFICATION	1.1242837918800803E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999948085109035	WITHOUT_CLASSIFICATION	5.191489096514792E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855757376088	WITHOUT_CLASSIFICATION	1.4424262391163967E-5	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984373645523	WITHOUT_CLASSIFICATION	1.5626354476340215E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995128142862	WITHOUT_CLASSIFICATION	4.871857136981505E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998116970690718	WITHOUT_CLASSIFICATION	1.8830293092821074E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999959631838286	WITHOUT_CLASSIFICATION	4.036816171382643E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999992459292113	WITHOUT_CLASSIFICATION	7.540707887665943E-7	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998995402547	WITHOUT_CLASSIFICATION	1.0045974528828981E-7	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999637569742045	WITHOUT_CLASSIFICATION	3.6243025795393326E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999980036787227	WITHOUT_CLASSIFICATION	1.9963212772966088E-6	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998359440773695	WITHOUT_CLASSIFICATION	1.640559226303404E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9996168259363603	WITHOUT_CLASSIFICATION	3.831740636396671E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9997617461860883	WITHOUT_CLASSIFICATION	2.3825381391184277E-4	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998865317526435	WITHOUT_CLASSIFICATION	1.1346824735643402E-4	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998513009581244	WITHOUT_CLASSIFICATION	1.4869904187564536E-4	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.999978816846187	WITHOUT_CLASSIFICATION	2.1183153812995832E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999684539878	WITHOUT_CLASSIFICATION	3.154601228640505E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999992466664739	WITHOUT_CLASSIFICATION	7.533335261519657E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999993530437962	WITHOUT_CLASSIFICATION	6.469562038897991E-7	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998113915493	WITHOUT_CLASSIFICATION	1.886084507816032E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999725097182557	WITHOUT_CLASSIFICATION	2.7490281744371288E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999957294496123	WITHOUT_CLASSIFICATION	4.2705503876593685E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999962422428313	WITHOUT_CLASSIFICATION	3.7577571687544238E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999953462354235	WITHOUT_CLASSIFICATION	4.653764576546069E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.999997104408184	WITHOUT_CLASSIFICATION	2.8955918160117943E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999997567151055	WITHOUT_CLASSIFICATION	2.4328489443220365E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999990567222835	WITHOUT_CLASSIFICATION	9.432777164013597E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999857546213	WITHOUT_CLASSIFICATION	1.4245378574818448E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999996248852481	WITHOUT_CLASSIFICATION	3.751147518745905E-7	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999975650413854	WITHOUT_CLASSIFICATION	2.4349586147461793E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999981448787524	WITHOUT_CLASSIFICATION	1.855121247540444E-6	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9995769871110035	WITHOUT_CLASSIFICATION	4.23012888996535E-4	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999991311570015	WITHOUT_CLASSIFICATION	8.688429985080331E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999998805000356	WITHOUT_CLASSIFICATION	1.194999643934865E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999201861114	WITHOUT_CLASSIFICATION	7.981388857227947E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999973468516471	WITHOUT_CLASSIFICATION	2.6531483528377077E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997279517667079	WITHOUT_CLASSIFICATION	2.7204823329216087E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999917744576635	WITHOUT_CLASSIFICATION	8.225542336429765E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999916115002259	WITHOUT_CLASSIFICATION	8.388499774153704E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999971917368462	WITHOUT_CLASSIFICATION	2.8082631537684257E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.999907773490487	WITHOUT_CLASSIFICATION	9.22265095130421E-5	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999976105017753	WITHOUT_CLASSIFICATION	2.38949822476913E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999866726574821	WITHOUT_CLASSIFICATION	1.3327342517847313E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999981272033709	WITHOUT_CLASSIFICATION	1.8727966292221014E-6	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999795652701846	WITHOUT_CLASSIFICATION	2.0434729815339026E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999972770299336	WITHOUT_CLASSIFICATION	2.7229700663931377E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999967544977679	WITHOUT_CLASSIFICATION	3.245502232078209E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999991589673003	WITHOUT_CLASSIFICATION	8.410326996299021E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999993547135946	WITHOUT_CLASSIFICATION	6.452864054742789E-7	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999967544977679	WITHOUT_CLASSIFICATION	3.245502232078209E-6	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999972770299336	WITHOUT_CLASSIFICATION	2.7229700663931377E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999991589673003	WITHOUT_CLASSIFICATION	8.410326996299021E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.999994982921677	WITHOUT_CLASSIFICATION	5.017078322995742E-6	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999991691556152	WITHOUT_CLASSIFICATION	8.308443848027686E-7	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999995318706658	WITHOUT_CLASSIFICATION	4.681293341862244E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999980553719926	WITHOUT_CLASSIFICATION	1.9446280073604837E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999975004625	WITHOUT_CLASSIFICATION	2.4995374659013274E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997470779539819	WITHOUT_CLASSIFICATION	2.529220460180572E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999990774144198	WITHOUT_CLASSIFICATION	9.22585580259427E-7	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999978428067632	WITHOUT_CLASSIFICATION	2.157193236850978E-6	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999996454583253	WITHOUT_CLASSIFICATION	3.5454167468743985E-7	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999999687205183	WITHOUT_CLASSIFICATION	3.1279481713565565E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999915193717751	WITHOUT_CLASSIFICATION	8.480628224872065E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999998186103457	WITHOUT_CLASSIFICATION	1.8138965429295412E-6	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999981960403527	WITHOUT_CLASSIFICATION	1.8039596473269389E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999980553719926	WITHOUT_CLASSIFICATION	1.9446280073604837E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999999687648828	WITHOUT_CLASSIFICATION	3.1235117198386294E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999988777473059	WITHOUT_CLASSIFICATION	1.1222526940900745E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997650604732	WITHOUT_CLASSIFICATION	2.3493952689019675E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999855643409	WITHOUT_CLASSIFICATION	1.4435659153685114E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999997651083958	WITHOUT_CLASSIFICATION	2.3489160425384328E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999994122935184	WITHOUT_CLASSIFICATION	5.877064815330742E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999979048554631	WITHOUT_CLASSIFICATION	2.095144536905765E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.99999997535136	WITHOUT_CLASSIFICATION	2.4648639984443905E-8	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999939952078678	WITHOUT_CLASSIFICATION	6.0047921322097875E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.99999890782924	WITHOUT_CLASSIFICATION	1.0921707599456257E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999992871450877	WITHOUT_CLASSIFICATION	7.128549122191881E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999992871450877	WITHOUT_CLASSIFICATION	7.128549122191881E-7	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999974538427	WITHOUT_CLASSIFICATION	2.5461572921765118E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999974538427	WITHOUT_CLASSIFICATION	2.5461572921765118E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999786687441826	WITHOUT_CLASSIFICATION	2.133125581736277E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997650604732	WITHOUT_CLASSIFICATION	2.3493952689019675E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999963047608974	WITHOUT_CLASSIFICATION	3.6952391026727665E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999320312535	WITHOUT_CLASSIFICATION	6.796874654857617E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.999998683451234	WITHOUT_CLASSIFICATION	1.3165487659486966E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.999998683451234	WITHOUT_CLASSIFICATION	1.3165487659486966E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998048175068	WITHOUT_CLASSIFICATION	1.951824931540628E-7	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999769984977706	WITHOUT_CLASSIFICATION	2.3001502229405398E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999774243722	WITHOUT_CLASSIFICATION	2.2575627781933694E-8	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999967832433195	WITHOUT_CLASSIFICATION	3.2167566804381056E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998189331571	WITHOUT_CLASSIFICATION	1.8106684287354622E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999953492363	WITHOUT_CLASSIFICATION	4.650763674090757E-9	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999990320139996	WITHOUT_CLASSIFICATION	9.67986000325776E-7	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999367823396382	WITHOUT_CLASSIFICATION	6.321766036184239E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999992049627403	WITHOUT_CLASSIFICATION	7.950372596751523E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998592928969	WITHOUT_CLASSIFICATION	1.4070710305014133E-7	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999997725067367	WITHOUT_CLASSIFICATION	2.2749326342839076E-7	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999991045870789	WITHOUT_CLASSIFICATION	8.954129210215073E-7	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997805700607	WITHOUT_CLASSIFICATION	2.1942993927654248E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.999996829915419	WITHOUT_CLASSIFICATION	3.1700845810212637E-6	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999968533236455	WITHOUT_CLASSIFICATION	3.1466763544511017E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996792191838	WITHOUT_CLASSIFICATION	3.2078081621621796E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520162842931	WITHOUT_CLASSIFICATION	4.79837157069809E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999349625901	WITHOUT_CLASSIFICATION	6.50374099415842E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999997111061999	WITHOUT_CLASSIFICATION	2.888938001597827E-7	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999719639417	WITHOUT_CLASSIFICATION	2.803605832786437E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999324548821	WITHOUT_CLASSIFICATION	6.75451179681347E-8	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999875053166977	WITHOUT_CLASSIFICATION	1.249468330233144E-5	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998652210141	WITHOUT_CLASSIFICATION	1.347789858161057E-7	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998741918013	WITHOUT_CLASSIFICATION	1.258081987472658E-7	TEST
/	WITHOUT_CLASSIFICATION	0.998704959864255	WITHOUT_CLASSIFICATION	0.0012950401357448924	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999978602968225	WITHOUT_CLASSIFICATION	2.139703177548131E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999962422428313	WITHOUT_CLASSIFICATION	3.7577571687544238E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999995881008974	WITHOUT_CLASSIFICATION	4.118991026401688E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996347633622	WITHOUT_CLASSIFICATION	3.652366378612581E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999936671312012	WITHOUT_CLASSIFICATION	6.332868798799981E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816248858219	WITHOUT_CLASSIFICATION	1.8375114178159423E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999948918501923	WITHOUT_CLASSIFICATION	5.1081498077311785E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999948918501923	WITHOUT_CLASSIFICATION	5.1081498077311785E-6	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999983152993771	WITHOUT_CLASSIFICATION	1.6847006229591878E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999913934106905	WITHOUT_CLASSIFICATION	8.606589309525576E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999572867329778	WITHOUT_CLASSIFICATION	4.271326702211834E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999572867329778	WITHOUT_CLASSIFICATION	4.271326702211834E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994326074356	WITHOUT_CLASSIFICATION	5.673925643609057E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999998463264226	WITHOUT_CLASSIFICATION	1.5367357739939507E-6	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999522592236215	WITHOUT_CLASSIFICATION	4.774077637844742E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999836240164219	WITHOUT_CLASSIFICATION	1.6375983578048223E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999928785891304	WITHOUT_CLASSIFICATION	7.1214108694988936E-6	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999974692375087	WITHOUT_CLASSIFICATION	2.5307624912366356E-6	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999941553539271	WITHOUT_CLASSIFICATION	5.844646072893209E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999996243858961	WITHOUT_CLASSIFICATION	3.756141038997438E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999983374809251	WITHOUT_CLASSIFICATION	1.662519074833977E-6	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999983374809251	WITHOUT_CLASSIFICATION	1.662519074833977E-6	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999789003294	WITHOUT_CLASSIFICATION	2.1099670662722328E-8	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999988416545296	WITHOUT_CLASSIFICATION	1.1583454705014674E-6	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999988416545296	WITHOUT_CLASSIFICATION	1.1583454705014674E-6	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993855029526	WITHOUT_CLASSIFICATION	6.144970474406344E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999967469944399	WITHOUT_CLASSIFICATION	3.253005560223454E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9919590387677014	WITHOUT_CLASSIFICATION	0.008040961232298641	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.999997971499983	WITHOUT_CLASSIFICATION	2.028500016972331E-6	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997615616133	WITHOUT_CLASSIFICATION	2.3843838671750253E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999166682187	WITHOUT_CLASSIFICATION	8.33317812214028E-8	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999880467822767	WITHOUT_CLASSIFICATION	1.1953217723378303E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999978141847248	WITHOUT_CLASSIFICATION	2.18581527520553E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999927959459	WITHOUT_CLASSIFICATION	7.204054156116486E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999778386910415	WITHOUT_CLASSIFICATION	2.216130895846632E-5	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999964560888	WITHOUT_CLASSIFICATION	3.5439112498509416E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999253060461	WITHOUT_CLASSIFICATION	7.469395389991612E-8	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999970696091696	WITHOUT_CLASSIFICATION	2.9303908304841584E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999970696091696	WITHOUT_CLASSIFICATION	2.9303908304841584E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999970696091696	WITHOUT_CLASSIFICATION	2.9303908304841584E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999970696091696	WITHOUT_CLASSIFICATION	2.9303908304841584E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999997516024146	WITHOUT_CLASSIFICATION	2.483975854074064E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999974989653628	WITHOUT_CLASSIFICATION	2.50103463727165E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999924897911873	WITHOUT_CLASSIFICATION	7.51020881273444E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999689904983935	WITHOUT_CLASSIFICATION	3.1009501606539834E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999972961952187	WITHOUT_CLASSIFICATION	2.7038047813334804E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999929679279185	WITHOUT_CLASSIFICATION	7.03207208152343E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999360751765534	WITHOUT_CLASSIFICATION	6.392482344660292E-5	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999968800666836	WITHOUT_CLASSIFICATION	3.1199333162528615E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999699289207	WITHOUT_CLASSIFICATION	3.007107934060181E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999989305740367	WITHOUT_CLASSIFICATION	1.069425963399993E-6	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999907006156538	WITHOUT_CLASSIFICATION	9.299384346266926E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999870484892	WITHOUT_CLASSIFICATION	1.2951510806207118E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9998878461634704	WITHOUT_CLASSIFICATION	1.1215383652964409E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999761962949515	WITHOUT_CLASSIFICATION	2.3803705048427033E-5	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999987822621813	WITHOUT_CLASSIFICATION	1.2177378187220538E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999870484892	WITHOUT_CLASSIFICATION	1.2951510806207118E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999793584345024	WITHOUT_CLASSIFICATION	2.0641565497541004E-5	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999679465346	WITHOUT_CLASSIFICATION	3.205346533890939E-8	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999707953765	WITHOUT_CLASSIFICATION	2.9204623505566777E-7	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999781562928308	WITHOUT_CLASSIFICATION	2.1843707169234392E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999999826592319	WITHOUT_CLASSIFICATION	1.7340768093854553E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999983941838443	WITHOUT_CLASSIFICATION	1.605816155711272E-6	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999676527543	WITHOUT_CLASSIFICATION	3.234724571566569E-8	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999996191498275	WITHOUT_CLASSIFICATION	3.808501725407406E-7	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998560421679	WITHOUT_CLASSIFICATION	1.4395783213305326E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998901026383	WITHOUT_CLASSIFICATION	1.09897361671001E-7	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995032654528	WITHOUT_CLASSIFICATION	4.967345472115082E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997166711387	WITHOUT_CLASSIFICATION	2.8332886123640344E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999829367685565	WITHOUT_CLASSIFICATION	1.7063231443358655E-5	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997698940506227	WITHOUT_CLASSIFICATION	2.3010594937739122E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998968298867	WITHOUT_CLASSIFICATION	1.0317011329955213E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999687865584636	WITHOUT_CLASSIFICATION	3.1213441536407155E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998147075228	WITHOUT_CLASSIFICATION	1.8529247718797221E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995085089863	WITHOUT_CLASSIFICATION	4.914910136960653E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999903610957418	WITHOUT_CLASSIFICATION	9.63890425820035E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995085089863	WITHOUT_CLASSIFICATION	4.914910136960653E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999669956511	WITHOUT_CLASSIFICATION	3.300434892423226E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999942253292426	WITHOUT_CLASSIFICATION	5.774670757395383E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999216497302	WITHOUT_CLASSIFICATION	7.835026973542535E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999965338318509	WITHOUT_CLASSIFICATION	3.4661681491278994E-6	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999447335678	WITHOUT_CLASSIFICATION	5.5266432251569155E-8	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999713967610074	WITHOUT_CLASSIFICATION	2.8603238992561168E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999940240835024	WITHOUT_CLASSIFICATION	5.9759164975706646E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998147075228	WITHOUT_CLASSIFICATION	1.8529247718797221E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999903610957418	WITHOUT_CLASSIFICATION	9.63890425820035E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999669956511	WITHOUT_CLASSIFICATION	3.300434892423226E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998014108895	WITHOUT_CLASSIFICATION	1.9858911057258359E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999986008509097	WITHOUT_CLASSIFICATION	1.3991490902638436E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999941460304239	WITHOUT_CLASSIFICATION	5.8539695760949456E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999748909257	WITHOUT_CLASSIFICATION	2.5109074344572984E-8	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999986188182864	WITHOUT_CLASSIFICATION	1.3811817134646211E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998654715757	WITHOUT_CLASSIFICATION	1.3452842422943605E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999968717141581	WITHOUT_CLASSIFICATION	3.1282858419501892E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520162842931	WITHOUT_CLASSIFICATION	4.79837157069809E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999942253292426	WITHOUT_CLASSIFICATION	5.774670757395383E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999618887503	WITHOUT_CLASSIFICATION	3.8111249617537635E-8	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999992477087712	WITHOUT_CLASSIFICATION	7.522912286964107E-7	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999989745030249	WITHOUT_CLASSIFICATION	1.025496975150254E-6	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999993677938468	WITHOUT_CLASSIFICATION	6.322061532255682E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520162842931	WITHOUT_CLASSIFICATION	4.79837157069809E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999999905791278	WITHOUT_CLASSIFICATION	9.42087220607519E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520162842931	WITHOUT_CLASSIFICATION	4.79837157069809E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999975364404952	WITHOUT_CLASSIFICATION	2.463559504942388E-6	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999917132721199	WITHOUT_CLASSIFICATION	8.286727880073833E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999930872902987	WITHOUT_CLASSIFICATION	6.912709701274858E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999982228824679	WITHOUT_CLASSIFICATION	1.7771175321311569E-6	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999994877313273	WITHOUT_CLASSIFICATION	5.12268672666912E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999962954748688	WITHOUT_CLASSIFICATION	3.704525131221423E-6	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999894977411224	WITHOUT_CLASSIFICATION	1.0502258877571478E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999986061714567	WITHOUT_CLASSIFICATION	1.393828543277284E-6	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987025274311	WITHOUT_CLASSIFICATION	1.2974725689202535E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999965653232568	WITHOUT_CLASSIFICATION	3.43467674319907E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999762400358013	WITHOUT_CLASSIFICATION	2.3759964198704457E-4	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999992836297469	WITHOUT_CLASSIFICATION	7.163702532378371E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9919590387677014	WITHOUT_CLASSIFICATION	0.008040961232298641	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999720790512698	WITHOUT_CLASSIFICATION	2.7920948730258322E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999855607025986	WITHOUT_CLASSIFICATION	1.4439297401494894E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999898489759768	WITHOUT_CLASSIFICATION	1.0151024023195462E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999681674509673	WITHOUT_CLASSIFICATION	3.1832549032669964E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999996028124997	WITHOUT_CLASSIFICATION	3.9718750026062384E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999991762763194	WITHOUT_CLASSIFICATION	8.237236806797287E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999441032281	WITHOUT_CLASSIFICATION	5.589677186658155E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999999562347687	WITHOUT_CLASSIFICATION	4.3765231293332324E-7	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999959815767	WITHOUT_CLASSIFICATION	4.018423300191661E-8	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999996952897196	WITHOUT_CLASSIFICATION	3.0471028041016893E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.990681069160549	WITHOUT_CLASSIFICATION	0.009318930839451052	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999973147020754	WITHOUT_CLASSIFICATION	2.6852979245174097E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999990663722892	WITHOUT_CLASSIFICATION	9.336277108495415E-7	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999593070031013	WITHOUT_CLASSIFICATION	4.069299689859693E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999689831608265	WITHOUT_CLASSIFICATION	3.101683917361062E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9997283145171096	WITHOUT_CLASSIFICATION	2.7168548289041507E-4	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998203933059	WITHOUT_CLASSIFICATION	1.796066941051533E-7	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999814631543	WITHOUT_CLASSIFICATION	1.85368456790802E-8	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999998907702232	WITHOUT_CLASSIFICATION	1.0922977676764035E-7	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999876046350912	WITHOUT_CLASSIFICATION	1.2395364908900239E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999964692929569	WITHOUT_CLASSIFICATION	3.5307070431734717E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.991238770522939	WITHOUT_CLASSIFICATION	0.00876122947706106	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999605929118603	WITHOUT_CLASSIFICATION	3.940708813968961E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999995169700404	WITHOUT_CLASSIFICATION	4.830299596647891E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999711459159487	WITHOUT_CLASSIFICATION	2.8854084051404317E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998413951459812	WITHOUT_CLASSIFICATION	1.5860485401877601E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999997373027245	WITHOUT_CLASSIFICATION	2.626972755772855E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9699938078955064	WITHOUT_CLASSIFICATION	0.03000619210449364	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999943558036	WITHOUT_CLASSIFICATION	5.6441963940192385E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999998272829641	WITHOUT_CLASSIFICATION	1.727170358288367E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999959681795314	WITHOUT_CLASSIFICATION	4.031820468598253E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999959681795314	WITHOUT_CLASSIFICATION	4.031820468598253E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999498498906	WITHOUT_CLASSIFICATION	5.0150109444953806E-8	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999986061714567	WITHOUT_CLASSIFICATION	1.393828543277284E-6	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999989528073283	WITHOUT_CLASSIFICATION	1.0471926716488612E-6	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999956140659942	WITHOUT_CLASSIFICATION	4.385934005706802E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999918030547	WITHOUT_CLASSIFICATION	8.196945304336746E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999993864303727	WITHOUT_CLASSIFICATION	6.135696272734692E-7	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.999995720714953	WITHOUT_CLASSIFICATION	4.279285046906454E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9998241152540407	WITHOUT_CLASSIFICATION	1.7588474595922333E-4	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999961920067276	WITHOUT_CLASSIFICATION	3.807993272364445E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999998308570802	WITHOUT_CLASSIFICATION	1.691429198127046E-6	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999997696906505	WITHOUT_CLASSIFICATION	2.3030934952864544E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999994180218101	WITHOUT_CLASSIFICATION	5.819781898361725E-7	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998477392101	WITHOUT_CLASSIFICATION	1.5226078990553756E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999983209710208	WITHOUT_CLASSIFICATION	1.6790289791176843E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999979211926929	WITHOUT_CLASSIFICATION	2.078807307112624E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999329315103	WITHOUT_CLASSIFICATION	6.706848960059542E-8	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999128848465	WITHOUT_CLASSIFICATION	8.711515351546295E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999997664427929	WITHOUT_CLASSIFICATION	2.335572070595559E-7	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998375864079	WITHOUT_CLASSIFICATION	1.6241359213079535E-7	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999952453588	WITHOUT_CLASSIFICATION	4.754641194628596E-9	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999937658751	WITHOUT_CLASSIFICATION	6.234124782857967E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999988527501938	WITHOUT_CLASSIFICATION	1.1472498060962704E-6	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999995801249196	WITHOUT_CLASSIFICATION	4.198750803442745E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999806097633	WITHOUT_CLASSIFICATION	1.9390236759534496E-8	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9699938078955064	WITHOUT_CLASSIFICATION	0.03000619210449364	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999999614776492	WITHOUT_CLASSIFICATION	3.852235079122084E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999755519744	WITHOUT_CLASSIFICATION	2.4448025588971763E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996099354378	WITHOUT_CLASSIFICATION	3.9006456218164396E-7	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999986598676038	WITHOUT_CLASSIFICATION	1.3401323961837448E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999988886919177	WITHOUT_CLASSIFICATION	1.1113080823124314E-6	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999987145761629	WITHOUT_CLASSIFICATION	1.285423837155903E-6	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999792053089218	WITHOUT_CLASSIFICATION	2.0794691078172794E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999906636978299	WITHOUT_CLASSIFICATION	9.336302170057298E-6	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999951369152641	WITHOUT_CLASSIFICATION	4.863084735959187E-6	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999997810544603	WITHOUT_CLASSIFICATION	2.189455396883829E-7	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999968367496421	WITHOUT_CLASSIFICATION	3.1632503578789746E-6	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999968526290859	WITHOUT_CLASSIFICATION	3.147370914088622E-6	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9953552797801724	WITHOUT_CLASSIFICATION	0.004644720219827611	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999933868357943	WITHOUT_CLASSIFICATION	6.6131642056463235E-6	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999994726738161	WITHOUT_CLASSIFICATION	5.273261839908946E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993395838179	WITHOUT_CLASSIFICATION	6.60416182022009E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993395838179	WITHOUT_CLASSIFICATION	6.60416182022009E-7	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999957210905787	WITHOUT_CLASSIFICATION	4.27890942126084E-6	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999974829664869	WITHOUT_CLASSIFICATION	2.517033513086693E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999968975315895	WITHOUT_CLASSIFICATION	3.102468410538873E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999968975315895	WITHOUT_CLASSIFICATION	3.102468410538873E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999226277173	WITHOUT_CLASSIFICATION	7.737228270260685E-8	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999993644813222	WITHOUT_CLASSIFICATION	6.355186776718032E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999603097871	WITHOUT_CLASSIFICATION	3.969021299280109E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999989426962088	WITHOUT_CLASSIFICATION	1.0573037911602492E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999132689372171	WITHOUT_CLASSIFICATION	8.673106278290647E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999897409661807	WITHOUT_CLASSIFICATION	1.0259033819386759E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998572104285	WITHOUT_CLASSIFICATION	1.4278957148518455E-7	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998572104285	WITHOUT_CLASSIFICATION	1.4278957148518455E-7	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999886710346737	WITHOUT_CLASSIFICATION	1.132896532627552E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999996402781354	WITHOUT_CLASSIFICATION	3.597218646851854E-7	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999762637658934	WITHOUT_CLASSIFICATION	2.3736234106580944E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999981451798373	WITHOUT_CLASSIFICATION	1.8548201625989506E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999981451798373	WITHOUT_CLASSIFICATION	1.8548201625989506E-6	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999979576413811	WITHOUT_CLASSIFICATION	2.042358618901307E-6	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999976566698463	WITHOUT_CLASSIFICATION	2.3433301537408126E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999990895809757	WITHOUT_CLASSIFICATION	9.104190242078688E-7	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999978988774173	WITHOUT_CLASSIFICATION	2.101122582636611E-6	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999994768518673	WITHOUT_CLASSIFICATION	5.231481327112182E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999921358921269	WITHOUT_CLASSIFICATION	7.864107873206249E-6	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999996739887705	WITHOUT_CLASSIFICATION	3.2601122946460573E-7	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999994831199764	WITHOUT_CLASSIFICATION	5.168800235795574E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999988200291843	WITHOUT_CLASSIFICATION	1.1799708157501223E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999987845011079	WITHOUT_CLASSIFICATION	1.2154988921334202E-6	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999964387186	WITHOUT_CLASSIFICATION	3.561281439072464E-9	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999950612549678	WITHOUT_CLASSIFICATION	4.938745032104979E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9998605673792598	WITHOUT_CLASSIFICATION	1.3943262074021315E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999984649328792	WITHOUT_CLASSIFICATION	1.5350671208233843E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.999984011298939	WITHOUT_CLASSIFICATION	1.5988701061109142E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999906684370264	WITHOUT_CLASSIFICATION	9.331562973510453E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999949676638	WITHOUT_CLASSIFICATION	5.032336193270345E-8	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999993927913732	WITHOUT_CLASSIFICATION	6.072086268606468E-7	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999991948339786	WITHOUT_CLASSIFICATION	8.051660214671322E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999847879575586	WITHOUT_CLASSIFICATION	1.5212042441405819E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999996415598825	WITHOUT_CLASSIFICATION	3.5844011749908716E-6	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999959223030341	WITHOUT_CLASSIFICATION	4.077696965873764E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.99947314701756	WITHOUT_CLASSIFICATION	5.268529824400405E-4	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999767745434821	WITHOUT_CLASSIFICATION	2.322545651785444E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999767561810061	WITHOUT_CLASSIFICATION	2.324381899387626E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999967172735754	WITHOUT_CLASSIFICATION	3.2827264245492527E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999930298292975	WITHOUT_CLASSIFICATION	6.970170702571559E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998318109009889	WITHOUT_CLASSIFICATION	1.6818909901110233E-4	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999927835072	WITHOUT_CLASSIFICATION	7.216492796846712E-8	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999958642748	WITHOUT_CLASSIFICATION	4.135725192007124E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999831780555	WITHOUT_CLASSIFICATION	1.6821944493280124E-8	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999380888072	WITHOUT_CLASSIFICATION	6.191119286121536E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998118122622	WITHOUT_CLASSIFICATION	1.8818773777182822E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999973569454363	WITHOUT_CLASSIFICATION	2.643054563623011E-6	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999997158724208	WITHOUT_CLASSIFICATION	2.841275792571304E-7	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999736636946625	WITHOUT_CLASSIFICATION	2.633630533758363E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999876899865867	WITHOUT_CLASSIFICATION	1.2310013413330702E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999994676124506	WITHOUT_CLASSIFICATION	5.323875493804642E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999966403799233	WITHOUT_CLASSIFICATION	3.3596200767005614E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999994365572731	WITHOUT_CLASSIFICATION	5.634427270102361E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999997914862472	WITHOUT_CLASSIFICATION	2.085137528962391E-7	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999989361234085	WITHOUT_CLASSIFICATION	1.0638765914759027E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999982267708221	WITHOUT_CLASSIFICATION	1.773229177994948E-6	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.999999351050689	WITHOUT_CLASSIFICATION	6.489493110230638E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999973383506514	WITHOUT_CLASSIFICATION	2.6616493486734267E-6	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999972965550737	WITHOUT_CLASSIFICATION	2.7034449262643424E-6	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.99999773264005	WITHOUT_CLASSIFICATION	2.267359949957893E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999902029454483	WITHOUT_CLASSIFICATION	9.79705455170212E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999989120887464	WITHOUT_CLASSIFICATION	1.0879112536198115E-6	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999951079983772	WITHOUT_CLASSIFICATION	4.892001622761396E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999971938189325	WITHOUT_CLASSIFICATION	2.806181067547701E-6	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997458250192	WITHOUT_CLASSIFICATION	2.541749808808041E-7	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999724109849917	WITHOUT_CLASSIFICATION	2.7589015008366606E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999579395883	WITHOUT_CLASSIFICATION	4.206041170819916E-8	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999984493469304	WITHOUT_CLASSIFICATION	1.5506530695995796E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999999708045363	WITHOUT_CLASSIFICATION	2.9195463701794297E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999997255578916	WITHOUT_CLASSIFICATION	2.744421082948394E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999998717027475	WITHOUT_CLASSIFICATION	1.2829725248841545E-6	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999996527967722	WITHOUT_CLASSIFICATION	3.4720322779344455E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999920412366899	WITHOUT_CLASSIFICATION	7.958763310098149E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993460074117	WITHOUT_CLASSIFICATION	6.539925884071346E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993460074117	WITHOUT_CLASSIFICATION	6.539925884071346E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999496772871386	WITHOUT_CLASSIFICATION	5.032271286147472E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999232882858995	WITHOUT_CLASSIFICATION	7.671171410044732E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999638990931	WITHOUT_CLASSIFICATION	3.610090694537938E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999993143841959	WITHOUT_CLASSIFICATION	6.856158041021095E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999939489781381	WITHOUT_CLASSIFICATION	6.051021861952403E-6	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999823335245835	WITHOUT_CLASSIFICATION	1.766647541652442E-5	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999999717725929	WITHOUT_CLASSIFICATION	2.8227407097027253E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999925415677	WITHOUT_CLASSIFICATION	7.458432320646389E-9	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999952879702967	WITHOUT_CLASSIFICATION	4.712029703271355E-6	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999752749579265	WITHOUT_CLASSIFICATION	2.4725042073513376E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999997969284617	WITHOUT_CLASSIFICATION	2.0307153828413535E-7	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999939584853508	WITHOUT_CLASSIFICATION	6.0415146492036265E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999993546811198	WITHOUT_CLASSIFICATION	6.453188802578183E-7	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999995295832552	WITHOUT_CLASSIFICATION	4.7041674480173113E-7	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996972579368	WITHOUT_CLASSIFICATION	3.0274206315050837E-7	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996972579368	WITHOUT_CLASSIFICATION	3.0274206315050837E-7	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999998644203142	WITHOUT_CLASSIFICATION	1.3557968579799723E-7	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999850370047006	WITHOUT_CLASSIFICATION	1.4962995299391495E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996940960927	WITHOUT_CLASSIFICATION	3.0590390728556656E-7	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999992189864	WITHOUT_CLASSIFICATION	7.810136867472369E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999974635524894	WITHOUT_CLASSIFICATION	2.536447510587422E-6	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998465883859392	WITHOUT_CLASSIFICATION	1.5341161406070948E-4	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999783802764	WITHOUT_CLASSIFICATION	2.1619723600465346E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999975349279092	WITHOUT_CLASSIFICATION	2.465072090807352E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999986772655844	WITHOUT_CLASSIFICATION	1.322734415586256E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999910782068	WITHOUT_CLASSIFICATION	8.921793233829552E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999998392635351	WITHOUT_CLASSIFICATION	1.6073646490135394E-7	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999760053209	WITHOUT_CLASSIFICATION	2.399467908476265E-8	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999994777104915	WITHOUT_CLASSIFICATION	5.222895085236585E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999996966107	WITHOUT_CLASSIFICATION	3.0338936105186284E-10	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998498090241	WITHOUT_CLASSIFICATION	1.501909758895802E-7	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999992742723851	WITHOUT_CLASSIFICATION	7.25727614859493E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999996664900829	WITHOUT_CLASSIFICATION	3.3350991720909976E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999917476707586	WITHOUT_CLASSIFICATION	8.252329241325557E-6	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999958968636938	WITHOUT_CLASSIFICATION	4.1031363061386855E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999989657239	WITHOUT_CLASSIFICATION	1.0342760940496032E-8	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999999783331804	WITHOUT_CLASSIFICATION	2.166681960181401E-7	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.99999999997465	WITHOUT_CLASSIFICATION	2.5350047999916794E-11	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999886774975	WITHOUT_CLASSIFICATION	1.1322502450593865E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999952588904	WITHOUT_CLASSIFICATION	4.741109648375427E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997710957764	WITHOUT_CLASSIFICATION	2.2890422354186848E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999562626591	WITHOUT_CLASSIFICATION	4.373734090005715E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999155573604469	WITHOUT_CLASSIFICATION	8.44426395531232E-5	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999970859517511	WITHOUT_CLASSIFICATION	2.9140482489836497E-6	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998779846404	WITHOUT_CLASSIFICATION	1.220153596102059E-7	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.99999958215084	WITHOUT_CLASSIFICATION	4.1784916006418093E-7	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999933828558131	WITHOUT_CLASSIFICATION	6.617144186897654E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999993791457157	WITHOUT_CLASSIFICATION	6.208542842925342E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999911003122467	WITHOUT_CLASSIFICATION	8.899687753232749E-6	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999247145097	WITHOUT_CLASSIFICATION	7.528549027952116E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999937325779	WITHOUT_CLASSIFICATION	6.267422148283067E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999994880500871	WITHOUT_CLASSIFICATION	5.119499129978454E-7	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999999942347152	WITHOUT_CLASSIFICATION	5.765284773939019E-9	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995798877825	WITHOUT_CLASSIFICATION	4.201122173833806E-7	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999541077003	WITHOUT_CLASSIFICATION	4.58922996798713E-8	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999920468623756	WITHOUT_CLASSIFICATION	7.953137624371287E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999959263672293	WITHOUT_CLASSIFICATION	4.073632770560485E-6	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999991720885644	WITHOUT_CLASSIFICATION	8.279114356896513E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998763948897	WITHOUT_CLASSIFICATION	1.2360511020819893E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998763948897	WITHOUT_CLASSIFICATION	1.2360511020819893E-7	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999996224204709	WITHOUT_CLASSIFICATION	3.775795290973205E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999566611832	WITHOUT_CLASSIFICATION	4.333881674810875E-8	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.999999847084096	WITHOUT_CLASSIFICATION	1.5291590398952627E-7	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999993248639176	WITHOUT_CLASSIFICATION	6.751360823006166E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999993185622854	WITHOUT_CLASSIFICATION	6.814377146078147E-7	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999916330353	WITHOUT_CLASSIFICATION	8.366964700981619E-9	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.999999445680607	WITHOUT_CLASSIFICATION	5.543193930541683E-7	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999994606520615	WITHOUT_CLASSIFICATION	5.393479385223948E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999998266817	WITHOUT_CLASSIFICATION	1.7331830259442115E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999676584001457	WITHOUT_CLASSIFICATION	3.2341599854448164E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620925871818	WITHOUT_CLASSIFICATION	3.790741281820019E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999869594781611	WITHOUT_CLASSIFICATION	1.3040521839012784E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999987966653034	WITHOUT_CLASSIFICATION	1.203334696610862E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999283141291	WITHOUT_CLASSIFICATION	7.168587093037371E-8	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999992373360832	WITHOUT_CLASSIFICATION	7.626639168190684E-7	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999996053571368	WITHOUT_CLASSIFICATION	3.9464286322934513E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999682358472	WITHOUT_CLASSIFICATION	3.176415279488916E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999993615718	WITHOUT_CLASSIFICATION	6.384282230061939E-10	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999409869887	WITHOUT_CLASSIFICATION	5.90130112231224E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999994067289444	WITHOUT_CLASSIFICATION	5.932710556242974E-7	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999986476727105	WITHOUT_CLASSIFICATION	1.3523272894624374E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999683015641	WITHOUT_CLASSIFICATION	3.169843584941817E-8	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998755516833	WITHOUT_CLASSIFICATION	1.2444831672707562E-7	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999946521245524	WITHOUT_CLASSIFICATION	5.347875447549971E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999993985239414	WITHOUT_CLASSIFICATION	6.01476058623757E-7	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999999891249858	WITHOUT_CLASSIFICATION	1.0875014198398875E-7	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999919516416931	WITHOUT_CLASSIFICATION	8.048358306893927E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999909711382	WITHOUT_CLASSIFICATION	9.02886186831128E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999332557272	WITHOUT_CLASSIFICATION	6.67442727278214E-8	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998070696331	WITHOUT_CLASSIFICATION	1.9293036680951172E-7	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999996806761018	WITHOUT_CLASSIFICATION	3.193238982253273E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999381242903	WITHOUT_CLASSIFICATION	6.187570964279587E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999896284038	WITHOUT_CLASSIFICATION	1.037159619126965E-8	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999998850032877	WITHOUT_CLASSIFICATION	1.1499671231557595E-7	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999391697726	WITHOUT_CLASSIFICATION	6.083022743119049E-8	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999981492084226	WITHOUT_CLASSIFICATION	1.8507915773548375E-6	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999995216399887	WITHOUT_CLASSIFICATION	4.783600112407386E-7	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999999904267722	WITHOUT_CLASSIFICATION	9.573227802618235E-8	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999961201424867	WITHOUT_CLASSIFICATION	3.879857513263466E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999405030717	WITHOUT_CLASSIFICATION	5.949692823235924E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999994880197044	WITHOUT_CLASSIFICATION	5.119802955599444E-7	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999941667951229	WITHOUT_CLASSIFICATION	5.83320487716162E-6	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999995045249713	WITHOUT_CLASSIFICATION	4.954750285427992E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999985819749	WITHOUT_CLASSIFICATION	1.4180250970268038E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999948333443	WITHOUT_CLASSIFICATION	5.166655594216098E-9	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999998624777727	WITHOUT_CLASSIFICATION	1.3752222716955292E-7	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999969585212	WITHOUT_CLASSIFICATION	3.0414788043845227E-9	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999970391983771	WITHOUT_CLASSIFICATION	2.960801622879753E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999891174377746	WITHOUT_CLASSIFICATION	1.0882562225411006E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999993546811198	WITHOUT_CLASSIFICATION	6.453188802578183E-7	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999895042800038	WITHOUT_CLASSIFICATION	1.0495719996266985E-5	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999990140121972	WITHOUT_CLASSIFICATION	9.859878029019154E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999993164073971	WITHOUT_CLASSIFICATION	6.835926029194314E-7	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999015709613	WITHOUT_CLASSIFICATION	9.842903870638795E-8	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999932212901	WITHOUT_CLASSIFICATION	6.778709908838846E-8	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999788375534	WITHOUT_CLASSIFICATION	2.116244654954793E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999997218350436	WITHOUT_CLASSIFICATION	2.7816495641014556E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9995856422841899	WITHOUT_CLASSIFICATION	4.143577158101418E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999976054299572	WITHOUT_CLASSIFICATION	2.394570042872112E-6	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999977323768264	WITHOUT_CLASSIFICATION	2.267623173453385E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999938636904	WITHOUT_CLASSIFICATION	6.136309465623436E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999988096861585	WITHOUT_CLASSIFICATION	1.1903138414627197E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999989809015786	WITHOUT_CLASSIFICATION	1.0190984214861622E-6	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999974848985881	WITHOUT_CLASSIFICATION	2.515101411944305E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999505054878	WITHOUT_CLASSIFICATION	4.949451209777017E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973593389064	WITHOUT_CLASSIFICATION	2.6406610935286982E-6	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999847240417794	WITHOUT_CLASSIFICATION	1.5275958220613583E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999711234359374	WITHOUT_CLASSIFICATION	2.8876564062589354E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998998852382	WITHOUT_CLASSIFICATION	1.0011476184556378E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999978958267476	WITHOUT_CLASSIFICATION	2.1041732524305304E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973593389064	WITHOUT_CLASSIFICATION	2.6406610935286982E-6	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9995455914684661	WITHOUT_CLASSIFICATION	4.544085315338376E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999883367570761	WITHOUT_CLASSIFICATION	1.1663242923951596E-5	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999143871056	WITHOUT_CLASSIFICATION	8.561289438688342E-8	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999970360675065	WITHOUT_CLASSIFICATION	2.9639324935045065E-6	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999872282791626	WITHOUT_CLASSIFICATION	1.2771720837433946E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997917885695	WITHOUT_CLASSIFICATION	2.0821143051611796E-7	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999627250868	WITHOUT_CLASSIFICATION	3.7274913124704475E-8	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999967038431864	WITHOUT_CLASSIFICATION	3.296156813601657E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999997994891673	WITHOUT_CLASSIFICATION	2.005108327713094E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999457117638	WITHOUT_CLASSIFICATION	5.428823611485378E-8	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999996281541005	WITHOUT_CLASSIFICATION	3.7184589957476287E-7	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998942047750355	WITHOUT_CLASSIFICATION	1.0579522496448533E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999942534827	WITHOUT_CLASSIFICATION	5.746517219865496E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999998169765403	WITHOUT_CLASSIFICATION	1.8302345976477714E-7	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999683622446	WITHOUT_CLASSIFICATION	3.163775547285458E-8	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999998324148876	WITHOUT_CLASSIFICATION	1.6758511239444048E-6	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999806097633	WITHOUT_CLASSIFICATION	1.9390236759534496E-8	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999990274531	WITHOUT_CLASSIFICATION	9.725468945453178E-9	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998642772769	WITHOUT_CLASSIFICATION	1.357227230338296E-7	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999997568489007	WITHOUT_CLASSIFICATION	2.431510993157749E-7	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999455144959	WITHOUT_CLASSIFICATION	5.448550408991123E-8	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999299196421	WITHOUT_CLASSIFICATION	7.008035783691212E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999995268604883	WITHOUT_CLASSIFICATION	4.731395117150643E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999924449805	WITHOUT_CLASSIFICATION	7.555019463480598E-9	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999924415308	WITHOUT_CLASSIFICATION	7.558469313155508E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999709423173	WITHOUT_CLASSIFICATION	2.905768259632412E-8	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999982364347704	WITHOUT_CLASSIFICATION	1.7635652295898637E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999964195966853	WITHOUT_CLASSIFICATION	3.5804033148229455E-6	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995834279923	WITHOUT_CLASSIFICATION	4.1657200771993386E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999993263600946	WITHOUT_CLASSIFICATION	6.736399053649932E-7	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999994702687722	WITHOUT_CLASSIFICATION	5.297312277916101E-7	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999994528405076	WITHOUT_CLASSIFICATION	5.47159492334974E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999965597414264	WITHOUT_CLASSIFICATION	3.4402585734809706E-6	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999994275397222	WITHOUT_CLASSIFICATION	5.724602778920295E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999820025443	WITHOUT_CLASSIFICATION	1.7997455767964816E-8	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999948099563	WITHOUT_CLASSIFICATION	5.190043696576166E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999815564317	WITHOUT_CLASSIFICATION	1.844356835512321E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999994580666619	WITHOUT_CLASSIFICATION	5.419333380975799E-7	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999266624615	WITHOUT_CLASSIFICATION	7.333753851480502E-8	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999233816249	WITHOUT_CLASSIFICATION	7.661837512509749E-8	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999449471731	WITHOUT_CLASSIFICATION	5.505282693100662E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999997739016863	WITHOUT_CLASSIFICATION	2.2609831372779084E-7	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999997739016863	WITHOUT_CLASSIFICATION	2.2609831372779084E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999961474708381	WITHOUT_CLASSIFICATION	3.852529161903539E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993959875193	WITHOUT_CLASSIFICATION	6.040124807027151E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996881276548	WITHOUT_CLASSIFICATION	3.118723451140856E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999213931245	WITHOUT_CLASSIFICATION	7.860687551428462E-8	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999836240164219	WITHOUT_CLASSIFICATION	1.6375983578048223E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999836240164219	WITHOUT_CLASSIFICATION	1.6375983578048223E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9987765687865248	WITHOUT_CLASSIFICATION	0.0012234312134751623	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999419925812	WITHOUT_CLASSIFICATION	5.8007418699145156E-8	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999997676050363	WITHOUT_CLASSIFICATION	2.3239496377578105E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999695605197	WITHOUT_CLASSIFICATION	3.0439480268767657E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999996304703472	WITHOUT_CLASSIFICATION	3.695296527065615E-7	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999980160253111	WITHOUT_CLASSIFICATION	1.983974688932548E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.99999967079275	WITHOUT_CLASSIFICATION	3.292072500563465E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999961816836316	WITHOUT_CLASSIFICATION	3.818316368405423E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.99999970425704	WITHOUT_CLASSIFICATION	2.9574296002302216E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998760620324	WITHOUT_CLASSIFICATION	1.239379675330789E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999963867774541	WITHOUT_CLASSIFICATION	3.6132225458221077E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988320321541	WITHOUT_CLASSIFICATION	1.1679678459017743E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988320321541	WITHOUT_CLASSIFICATION	1.1679678459017743E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999826211613	WITHOUT_CLASSIFICATION	1.737883868508548E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995907356847078	WITHOUT_CLASSIFICATION	4.092643152922021E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999990765595526	WITHOUT_CLASSIFICATION	9.234404474027144E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999917173076414	WITHOUT_CLASSIFICATION	8.282692358656055E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999981794368296	WITHOUT_CLASSIFICATION	1.8205631703386393E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984373645523	WITHOUT_CLASSIFICATION	1.5626354476340215E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841010996543444	WITHOUT_CLASSIFICATION	0.01589890034565555	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999992636313882	WITHOUT_CLASSIFICATION	7.363686117693681E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999997923666474	WITHOUT_CLASSIFICATION	2.0763335251397308E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999983307455119	WITHOUT_CLASSIFICATION	1.6692544881302878E-6	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999987202604456	WITHOUT_CLASSIFICATION	1.2797395544835488E-6	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999457117638	WITHOUT_CLASSIFICATION	5.428823611485378E-8	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999689521945245	WITHOUT_CLASSIFICATION	3.1047805475439415E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999729008850304	WITHOUT_CLASSIFICATION	2.7099114969601963E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999987312340942	WITHOUT_CLASSIFICATION	1.2687659058240912E-6	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999995740705558	WITHOUT_CLASSIFICATION	4.259294441789599E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999852926243665	WITHOUT_CLASSIFICATION	1.4707375633441358E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999963275846241	WITHOUT_CLASSIFICATION	3.6724153758258035E-6	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999988434060797	WITHOUT_CLASSIFICATION	1.1565939203030962E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999622018759	WITHOUT_CLASSIFICATION	3.7798124075641616E-8	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999001875218	WITHOUT_CLASSIFICATION	9.981247817915008E-8	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999977029372261	WITHOUT_CLASSIFICATION	2.2970627739020533E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999977029372261	WITHOUT_CLASSIFICATION	2.2970627739020533E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999870484892	WITHOUT_CLASSIFICATION	1.2951510806207118E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999206858	WITHOUT_CLASSIFICATION	7.931420998038209E-11	TEST
package	WITHOUT_CLASSIFICATION	0.999931702598139	WITHOUT_CLASSIFICATION	6.829740186095874E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999440150968	WITHOUT_CLASSIFICATION	5.598490313629622E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999981182732551	WITHOUT_CLASSIFICATION	1.8817267448940487E-6	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999662103904	WITHOUT_CLASSIFICATION	3.378960950581985E-8	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998968298867	WITHOUT_CLASSIFICATION	1.0317011329955213E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.99999995715866	WITHOUT_CLASSIFICATION	4.2841339964552117E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998014108895	WITHOUT_CLASSIFICATION	1.9858911057258359E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999988087624189	WITHOUT_CLASSIFICATION	1.1912375811832551E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520162842931	WITHOUT_CLASSIFICATION	4.79837157069809E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999993611666443	WITHOUT_CLASSIFICATION	6.388333556604158E-7	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998620929451	WITHOUT_CLASSIFICATION	1.379070547924557E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999993541233831	WITHOUT_CLASSIFICATION	6.458766168027955E-7	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999922178146975	WITHOUT_CLASSIFICATION	7.782185302579937E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997993179444	WITHOUT_CLASSIFICATION	2.0068205554608403E-7	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999728383748	WITHOUT_CLASSIFICATION	2.716162513608031E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968304951622	WITHOUT_CLASSIFICATION	3.1695048378332805E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.99998796639907	WITHOUT_CLASSIFICATION	1.2033600930031598E-5	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999997008678725	WITHOUT_CLASSIFICATION	2.9913212744496927E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999844577844	WITHOUT_CLASSIFICATION	1.5542215663447787E-8	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999996042346924	WITHOUT_CLASSIFICATION	3.9576530769937904E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999990895809757	WITHOUT_CLASSIFICATION	9.104190242078688E-7	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999910267069	WITHOUT_CLASSIFICATION	8.97329309060701E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997027418419	WITHOUT_CLASSIFICATION	2.97258158089947E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997027418419	WITHOUT_CLASSIFICATION	2.97258158089947E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999910665110957	WITHOUT_CLASSIFICATION	8.933488904299485E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995391427705	WITHOUT_CLASSIFICATION	4.6085722949783183E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999997783229937	WITHOUT_CLASSIFICATION	2.2167700633005213E-7	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999994904509483	WITHOUT_CLASSIFICATION	5.09549051676814E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999988414348683	WITHOUT_CLASSIFICATION	1.1585651317591258E-6	TEST
