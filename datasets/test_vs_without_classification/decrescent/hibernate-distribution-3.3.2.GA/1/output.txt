test out the optimizer:	WITHOUT_CLASSIFICATION	0.9993010319883011	WITHOUT_CLASSIFICATION	6.989680116988207E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9995159333602744	WITHOUT_CLASSIFICATION	4.840666397255862E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999776343756038	WITHOUT_CLASSIFICATION	2.236562439613219E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999836382275779	WITHOUT_CLASSIFICATION	1.6361772422151294E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999836382275779	WITHOUT_CLASSIFICATION	1.6361772422151294E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999219208629367	WITHOUT_CLASSIFICATION	7.807913706330615E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998566627379046	WITHOUT_CLASSIFICATION	1.433372620954278E-4	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999345709887331	WITHOUT_CLASSIFICATION	6.542901126698528E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999074056913202	WITHOUT_CLASSIFICATION	9.259430867981519E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9998679586734224	WITHOUT_CLASSIFICATION	1.320413265775108E-4	TEST
double	WITHOUT_CLASSIFICATION	0.9998679586734224	WITHOUT_CLASSIFICATION	1.320413265775108E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998536241105949	WITHOUT_CLASSIFICATION	1.4637588940509975E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999479793459155	WITHOUT_CLASSIFICATION	5.202065408446445E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999507221026086	WITHOUT_CLASSIFICATION	4.927789739128194E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998968217814813	WITHOUT_CLASSIFICATION	1.0317821851872149E-4	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999840260346406	WITHOUT_CLASSIFICATION	1.597396535926575E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9998453128474288	WITHOUT_CLASSIFICATION	1.5468715257111672E-4	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998889245298462	WITHOUT_CLASSIFICATION	1.1107547015376023E-4	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999786834092238	WITHOUT_CLASSIFICATION	2.1316590776126502E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999022926288441	WITHOUT_CLASSIFICATION	9.770737115599311E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998452026430771	WITHOUT_CLASSIFICATION	1.547973569228842E-4	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998583394645653	WITHOUT_CLASSIFICATION	1.4166053543477824E-4	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9995325273145689	WITHOUT_CLASSIFICATION	4.6747268543112264E-4	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999993709388871	WITHOUT_CLASSIFICATION	6.2906111289688194E-6	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9998643384793808	WITHOUT_CLASSIFICATION	1.3566152061921733E-4	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999522303714424	WITHOUT_CLASSIFICATION	4.776962855743441E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999923446684453	WITHOUT_CLASSIFICATION	7.6553315546227E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999513395027221	WITHOUT_CLASSIFICATION	4.8660497277870315E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998534605294548	WITHOUT_CLASSIFICATION	1.4653947054523754E-4	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999915503344875	WITHOUT_CLASSIFICATION	8.449665512503943E-5	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999791890126767	WITHOUT_CLASSIFICATION	2.0810987323338896E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999807870943498	WITHOUT_CLASSIFICATION	1.92129056501557E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999527299102638	WITHOUT_CLASSIFICATION	4.727008973622084E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999090837421661	WITHOUT_CLASSIFICATION	9.091625783378307E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999453886463553	WITHOUT_CLASSIFICATION	5.461135364466666E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
ignore!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999090837421661	WITHOUT_CLASSIFICATION	9.091625783378307E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9984123489299361	WITHOUT_CLASSIFICATION	0.001587651070063916	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998568059364162	WITHOUT_CLASSIFICATION	1.4319406358368684E-4	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998322798581851	WITHOUT_CLASSIFICATION	1.6772014181479832E-4	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999946883346968	WITHOUT_CLASSIFICATION	5.311665303176818E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999995104328079	WITHOUT_CLASSIFICATION	4.895671920947064E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9995788797127921	WITHOUT_CLASSIFICATION	4.211202872079176E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996508273433756	WITHOUT_CLASSIFICATION	3.49172656624449E-4	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999840824391212	WITHOUT_CLASSIFICATION	1.591756087885691E-5	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.999835200584246	WITHOUT_CLASSIFICATION	1.6479941575406562E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999314788953523	WITHOUT_CLASSIFICATION	6.85211046476812E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9997013108550581	WITHOUT_CLASSIFICATION	2.986891449418712E-4	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9997437145526678	WITHOUT_CLASSIFICATION	2.5628544733225753E-4	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9997640282015308	WITHOUT_CLASSIFICATION	2.3597179846919085E-4	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999512031971992	WITHOUT_CLASSIFICATION	4.879680280082655E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999957907679589	WITHOUT_CLASSIFICATION	4.209232041096016E-5	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999613777849161	WITHOUT_CLASSIFICATION	3.862221508401442E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999154095324889	WITHOUT_CLASSIFICATION	8.459046751102555E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999579594478423	WITHOUT_CLASSIFICATION	4.204055215781464E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999934645819621	WITHOUT_CLASSIFICATION	6.535418037891247E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999818907582599	WITHOUT_CLASSIFICATION	1.8109241740031037E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999800017190739	WITHOUT_CLASSIFICATION	1.9998280926038045E-5	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999953523022703	WITHOUT_CLASSIFICATION	4.6476977297075217E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9997543611707207	WITHOUT_CLASSIFICATION	2.45638829279263E-4	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999451356210144	WITHOUT_CLASSIFICATION	5.486437898551278E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999814410143864	WITHOUT_CLASSIFICATION	1.8558985613617964E-5	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999823401531966	WITHOUT_CLASSIFICATION	1.7659846803304027E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998511494162616	WITHOUT_CLASSIFICATION	1.488505837384346E-4	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999677051087814	WITHOUT_CLASSIFICATION	3.229489121863031E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999433466458398	WITHOUT_CLASSIFICATION	5.6653354160224864E-5	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999726484589045	WITHOUT_CLASSIFICATION	2.7351541095514586E-5	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997583661887818	WITHOUT_CLASSIFICATION	2.4163381121815753E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999804332096156	WITHOUT_CLASSIFICATION	1.9566790384395566E-4	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999680165018853	WITHOUT_CLASSIFICATION	3.198349811466316E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999948025793759	WITHOUT_CLASSIFICATION	5.1974206240949504E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999804332096156	WITHOUT_CLASSIFICATION	1.9566790384395566E-4	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999977249358746	WITHOUT_CLASSIFICATION	2.2750641254629503E-6	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999366803449655	WITHOUT_CLASSIFICATION	6.331965503448834E-4	TEST
ignore!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9995063887384565	WITHOUT_CLASSIFICATION	4.936112615433544E-4	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999446358078528	WITHOUT_CLASSIFICATION	5.5364192147214854E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997924869153764	WITHOUT_CLASSIFICATION	2.0751308462362299E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997924869153764	WITHOUT_CLASSIFICATION	2.0751308462362299E-4	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9993070581278214	WITHOUT_CLASSIFICATION	6.929418721785604E-4	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9993384537819446	WITHOUT_CLASSIFICATION	6.615462180553137E-4	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999806979016279	WITHOUT_CLASSIFICATION	1.9302098372090776E-5	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999944202080991	WITHOUT_CLASSIFICATION	5.579791900903305E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999483831743337	WITHOUT_CLASSIFICATION	5.1616825666337576E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999874360887624	WITHOUT_CLASSIFICATION	1.2563911237678961E-5	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999440251084993	WITHOUT_CLASSIFICATION	5.597489150063469E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999343468360566	WITHOUT_CLASSIFICATION	6.565316394331247E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999050873258354	WITHOUT_CLASSIFICATION	9.491267416466904E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999050873258354	WITHOUT_CLASSIFICATION	9.491267416466904E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999575755140423	WITHOUT_CLASSIFICATION	4.24244859578003E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999699247787047	WITHOUT_CLASSIFICATION	3.0075221295339288E-5	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998956772305336	WITHOUT_CLASSIFICATION	1.0432276946636613E-4	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999050873258354	WITHOUT_CLASSIFICATION	9.491267416466904E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999575755140423	WITHOUT_CLASSIFICATION	4.24244859578003E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999575755140423	WITHOUT_CLASSIFICATION	4.24244859578003E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999895739772299	WITHOUT_CLASSIFICATION	1.0426022770107725E-4	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999577376283578	WITHOUT_CLASSIFICATION	4.226237164215995E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999325970328055	WITHOUT_CLASSIFICATION	6.740296719449052E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998760562838259	WITHOUT_CLASSIFICATION	1.239437161741136E-4	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998240469599824	WITHOUT_CLASSIFICATION	1.7595304001754019E-4	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998240469599824	WITHOUT_CLASSIFICATION	1.7595304001754019E-4	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999177002148609	WITHOUT_CLASSIFICATION	8.229978513907452E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998944236742975	WITHOUT_CLASSIFICATION	1.0557632570257492E-4	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.999879089901441	WITHOUT_CLASSIFICATION	1.2091009855891336E-4	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999041406845681	WITHOUT_CLASSIFICATION	9.585931543184565E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999041406845681	WITHOUT_CLASSIFICATION	9.585931543184565E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999516715970547	WITHOUT_CLASSIFICATION	4.832840294538529E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999849395920904	WITHOUT_CLASSIFICATION	1.506040790959913E-4	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9986462526299258	WITHOUT_CLASSIFICATION	0.0013537473700741913	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999598408101981	WITHOUT_CLASSIFICATION	4.0159189801990056E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9973698604641096	WITHOUT_CLASSIFICATION	0.0026301395358902906	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999816920475947	WITHOUT_CLASSIFICATION	1.8307952405309724E-5	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996304343941529	WITHOUT_CLASSIFICATION	3.6956560584709155E-4	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999501784859925	WITHOUT_CLASSIFICATION	4.9821514007336446E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9986462526299258	WITHOUT_CLASSIFICATION	0.0013537473700741913	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999103402892563	WITHOUT_CLASSIFICATION	8.965971074374969E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999230211277306	WITHOUT_CLASSIFICATION	7.697887226937627E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999230211277306	WITHOUT_CLASSIFICATION	7.697887226937627E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999691816291763	WITHOUT_CLASSIFICATION	3.081837082369243E-5	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9994432660632845	WITHOUT_CLASSIFICATION	5.567339367154986E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999330091897765	WITHOUT_CLASSIFICATION	6.699081022359576E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998683730544876	WITHOUT_CLASSIFICATION	1.3162694551248913E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9994509554890728	WITHOUT_CLASSIFICATION	5.490445109271499E-4	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999496412391147	WITHOUT_CLASSIFICATION	5.035876088524745E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999104494595262	WITHOUT_CLASSIFICATION	8.955054047374239E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999717078669978	WITHOUT_CLASSIFICATION	2.8292133002209313E-5	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9995773558344323	WITHOUT_CLASSIFICATION	4.2264416556766734E-4	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999794193865239	WITHOUT_CLASSIFICATION	2.0580613476199043E-5	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999794193865239	WITHOUT_CLASSIFICATION	2.0580613476199043E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9993010319883011	WITHOUT_CLASSIFICATION	6.989680116988207E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999871471375037	WITHOUT_CLASSIFICATION	1.285286249624175E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998925090477442	WITHOUT_CLASSIFICATION	1.0749095225587779E-4	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998875376853067	WITHOUT_CLASSIFICATION	1.1246231469326543E-4	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998969535620105	WITHOUT_CLASSIFICATION	1.030464379894318E-4	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9998878426672484	WITHOUT_CLASSIFICATION	1.1215733275159397E-4	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9998458998288231	WITHOUT_CLASSIFICATION	1.5410017117685365E-4	TEST
new	WITHOUT_CLASSIFICATION	0.9997479364017446	WITHOUT_CLASSIFICATION	2.5206359825531423E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999761830299605	WITHOUT_CLASSIFICATION	2.3816970039547555E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9998878426672484	WITHOUT_CLASSIFICATION	1.1215733275159397E-4	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9996369303462402	WITHOUT_CLASSIFICATION	3.6306965375976664E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999518822428725	WITHOUT_CLASSIFICATION	4.811775712754727E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998972020976683	WITHOUT_CLASSIFICATION	1.027979023316213E-4	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999761830299605	WITHOUT_CLASSIFICATION	2.3816970039547555E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999507123180409	WITHOUT_CLASSIFICATION	4.9287681959171524E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999836382275779	WITHOUT_CLASSIFICATION	1.6361772422151294E-5	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999412970142947	WITHOUT_CLASSIFICATION	5.8702985705218804E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998511093553579	WITHOUT_CLASSIFICATION	1.488906446420838E-4	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999766696386807	WITHOUT_CLASSIFICATION	2.3330361319342042E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999976271528657	WITHOUT_CLASSIFICATION	2.3728471343084033E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aaload	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998968294365078	WITHOUT_CLASSIFICATION	1.0317056349221009E-4	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998970629046037	WITHOUT_CLASSIFICATION	1.0293709539633536E-4	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999855798498464	WITHOUT_CLASSIFICATION	1.4420150153472134E-5	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999492035248214	WITHOUT_CLASSIFICATION	5.0796475178559376E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999808612214528	WITHOUT_CLASSIFICATION	1.913877854716436E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999219208629367	WITHOUT_CLASSIFICATION	7.807913706330615E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999677570737608	WITHOUT_CLASSIFICATION	3.224292623910975E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999188674084556	WITHOUT_CLASSIFICATION	8.113259154440293E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999663662956453	WITHOUT_CLASSIFICATION	3.363370435473962E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9998451266690257	WITHOUT_CLASSIFICATION	1.5487333097422153E-4	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
athrow	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999087383125034	WITHOUT_CLASSIFICATION	9.126168749666124E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9998316541047239	WITHOUT_CLASSIFICATION	1.6834589527613077E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996193664234492	WITHOUT_CLASSIFICATION	3.8063357655078374E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996193664234492	WITHOUT_CLASSIFICATION	3.8063357655078374E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999093157488337	WITHOUT_CLASSIFICATION	9.068425116631878E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999788691296431	WITHOUT_CLASSIFICATION	2.113087035699372E-5	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9995405979738428	WITHOUT_CLASSIFICATION	4.594020261572004E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999522901098608	WITHOUT_CLASSIFICATION	4.7709890139368383E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998587946098287	WITHOUT_CLASSIFICATION	1.4120539017137097E-4	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999731084519581	WITHOUT_CLASSIFICATION	2.6891548041822184E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999737958460005	WITHOUT_CLASSIFICATION	2.6204153999451878E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998566627379046	WITHOUT_CLASSIFICATION	1.433372620954278E-4	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999539394520771	WITHOUT_CLASSIFICATION	4.606054792295371E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999539394520771	WITHOUT_CLASSIFICATION	4.606054792295371E-5	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999121672869808	WITHOUT_CLASSIFICATION	8.783271301908808E-5	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.999978680506251	WITHOUT_CLASSIFICATION	2.1319493748926975E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999121672869808	WITHOUT_CLASSIFICATION	8.783271301908808E-5	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9998881659482098	WITHOUT_CLASSIFICATION	1.1183405179006967E-4	TEST
int	WITHOUT_CLASSIFICATION	0.9998454766062563	WITHOUT_CLASSIFICATION	1.5452339374361456E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
load_1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
load_1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
putfield	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999185835721346	WITHOUT_CLASSIFICATION	8.141642786540062E-5	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.999872463465433	WITHOUT_CLASSIFICATION	1.2753653456697937E-4	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999619926825323	WITHOUT_CLASSIFICATION	3.80073174677987E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999074056913202	WITHOUT_CLASSIFICATION	9.259430867981519E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999074056913202	WITHOUT_CLASSIFICATION	9.259430867981519E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9995570169112266	WITHOUT_CLASSIFICATION	4.4298308877346805E-4	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999695061993684	WITHOUT_CLASSIFICATION	3.049380063152752E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9998481705130857	WITHOUT_CLASSIFICATION	1.5182948691421544E-4	TEST
byte	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
char	WITHOUT_CLASSIFICATION	0.9998474185167409	WITHOUT_CLASSIFICATION	1.5258148325907126E-4	TEST
short	WITHOUT_CLASSIFICATION	0.9998454266678662	WITHOUT_CLASSIFICATION	1.545733321337374E-4	TEST
double	WITHOUT_CLASSIFICATION	0.9998679586734224	WITHOUT_CLASSIFICATION	1.320413265775108E-4	TEST
float	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
float	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998536241105949	WITHOUT_CLASSIFICATION	1.4637588940509975E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998536241105949	WITHOUT_CLASSIFICATION	1.4637588940509975E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999868340250252	WITHOUT_CLASSIFICATION	1.31659749748108E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999868340250252	WITHOUT_CLASSIFICATION	1.31659749748108E-4	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998616498980798	WITHOUT_CLASSIFICATION	1.3835010192015315E-4	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998616498980798	WITHOUT_CLASSIFICATION	1.3835010192015315E-4	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999074056913202	WITHOUT_CLASSIFICATION	9.259430867981519E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9998679586734224	WITHOUT_CLASSIFICATION	1.320413265775108E-4	TEST
float	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
float	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998536241105949	WITHOUT_CLASSIFICATION	1.4637588940509975E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999868340250252	WITHOUT_CLASSIFICATION	1.31659749748108E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999868340250252	WITHOUT_CLASSIFICATION	1.31659749748108E-4	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998616498980798	WITHOUT_CLASSIFICATION	1.3835010192015315E-4	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999621157915805	WITHOUT_CLASSIFICATION	3.788420841966349E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998011641638646	WITHOUT_CLASSIFICATION	1.988358361354209E-4	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999462041144708	WITHOUT_CLASSIFICATION	5.37958855291793E-5	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9990194384810461	WITHOUT_CLASSIFICATION	9.805615189538205E-4	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999792556876403	WITHOUT_CLASSIFICATION	2.074431235956096E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9998449342609551	WITHOUT_CLASSIFICATION	1.5506573904488003E-4	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999587122291679	WITHOUT_CLASSIFICATION	4.128777083211116E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998705525180515	WITHOUT_CLASSIFICATION	1.29447481948494E-4	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999566804360096	WITHOUT_CLASSIFICATION	4.3319563990330996E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9996171098912353	WITHOUT_CLASSIFICATION	3.8289010876468464E-4	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998691103306065	WITHOUT_CLASSIFICATION	1.3088966939339344E-4	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999559269765962	WITHOUT_CLASSIFICATION	4.4073023403941995E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998449342609551	WITHOUT_CLASSIFICATION	1.5506573904488003E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998449342609551	WITHOUT_CLASSIFICATION	1.5506573904488003E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998449342609551	WITHOUT_CLASSIFICATION	1.5506573904488003E-4	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9997203704894863	WITHOUT_CLASSIFICATION	2.796295105137063E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998924384927396	WITHOUT_CLASSIFICATION	1.0756150726049736E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998924384927396	WITHOUT_CLASSIFICATION	1.0756150726049736E-4	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999819187860685	WITHOUT_CLASSIFICATION	1.8081213931505228E-4	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999394748191541	WITHOUT_CLASSIFICATION	6.052518084600379E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9990721092472661	WITHOUT_CLASSIFICATION	9.278907527338004E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999208529653056	WITHOUT_CLASSIFICATION	7.914703469435329E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999208529653056	WITHOUT_CLASSIFICATION	7.914703469435329E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999840260346406	WITHOUT_CLASSIFICATION	1.597396535926575E-5	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999944259867718	WITHOUT_CLASSIFICATION	5.574013228205748E-5	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999944259867718	WITHOUT_CLASSIFICATION	5.574013228205748E-5	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9981839228076301	WITHOUT_CLASSIFICATION	0.001816077192369883	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999388124200621	WITHOUT_CLASSIFICATION	6.118757993782761E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999786834092238	WITHOUT_CLASSIFICATION	2.1316590776126502E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
WHERE	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9917095236085441	WITHOUT_CLASSIFICATION	0.008290476391455961	TEST
ID	WITHOUT_CLASSIFICATION	0.9998453128474288	WITHOUT_CLASSIFICATION	1.5468715257111672E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998987312017713	WITHOUT_CLASSIFICATION	1.0126879822871069E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999589624119648	WITHOUT_CLASSIFICATION	4.10375880352784E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9976165331834311	WITHOUT_CLASSIFICATION	0.002383466816568869	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.999894919691971	WITHOUT_CLASSIFICATION	1.0508030802905097E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998583394645653	WITHOUT_CLASSIFICATION	1.4166053543477824E-4	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999968768014	WITHOUT_CLASSIFICATION	3.1231986000238296E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998448880498525	WITHOUT_CLASSIFICATION	1.5511195014753426E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999786834092238	WITHOUT_CLASSIFICATION	2.1316590776126502E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9998670352364908	WITHOUT_CLASSIFICATION	1.3296476350915473E-4	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9998926951728209	WITHOUT_CLASSIFICATION	1.0730482717918145E-4	TEST
KEY	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998448880498525	WITHOUT_CLASSIFICATION	1.5511195014753426E-4	TEST
properties	WITHOUT_CLASSIFICATION	0.9998670352364908	WITHOUT_CLASSIFICATION	1.3296476350915473E-4	TEST
KEY	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997687595460221	WITHOUT_CLASSIFICATION	2.3124045397785562E-4	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997687595460221	WITHOUT_CLASSIFICATION	2.3124045397785562E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
column index	WITHOUT_CLASSIFICATION	0.9998902637258277	WITHOUT_CLASSIFICATION	1.097362741723238E-4	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9998900416412203	WITHOUT_CLASSIFICATION	1.0995835877975626E-4	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997112788505653	WITHOUT_CLASSIFICATION	2.8872114943461846E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9995868606584454	WITHOUT_CLASSIFICATION	4.1313934155461584E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9990755833724045	WITHOUT_CLASSIFICATION	9.244166275953232E-4	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999280155135238	WITHOUT_CLASSIFICATION	7.198448647609985E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999148524595671	WITHOUT_CLASSIFICATION	8.51475404329803E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9996077735103877	WITHOUT_CLASSIFICATION	3.9222648961233117E-4	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999280155135238	WITHOUT_CLASSIFICATION	7.198448647609985E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
TABLE	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999388600743078	WITHOUT_CLASSIFICATION	6.11399256922478E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998448880498525	WITHOUT_CLASSIFICATION	1.5511195014753426E-4	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9997495751798647	WITHOUT_CLASSIFICATION	2.504248201352342E-4	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999276807907953	WITHOUT_CLASSIFICATION	7.231920920477037E-5	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9984505609319708	WITHOUT_CLASSIFICATION	0.0015494390680292232	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999826235627823	WITHOUT_CLASSIFICATION	1.7376437217666078E-5	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999412427676377	WITHOUT_CLASSIFICATION	5.8757232362377955E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999946598248707	WITHOUT_CLASSIFICATION	5.340175129338689E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998383402621318	WITHOUT_CLASSIFICATION	1.616597378681563E-4	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999458503384258	WITHOUT_CLASSIFICATION	5.414966157419634E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999887830924223	WITHOUT_CLASSIFICATION	1.1216907577704817E-4	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9997653438035705	WITHOUT_CLASSIFICATION	2.3465619642937943E-4	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998583394645653	WITHOUT_CLASSIFICATION	1.4166053543477824E-4	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.99989476616225	WITHOUT_CLASSIFICATION	1.0523383775007718E-4	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9988363243999909	WITHOUT_CLASSIFICATION	0.001163675600009038	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999503059148726	WITHOUT_CLASSIFICATION	4.969408512741625E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998973488561039	WITHOUT_CLASSIFICATION	1.0265114389608299E-4	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999722628331094	WITHOUT_CLASSIFICATION	2.7737166890524867E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999701678097367	WITHOUT_CLASSIFICATION	2.9832190263365177E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9994079176244444	WITHOUT_CLASSIFICATION	5.920823755555893E-4	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998878329106049	WITHOUT_CLASSIFICATION	1.1216708939517626E-4	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999911382884012	WITHOUT_CLASSIFICATION	8.861711598772485E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999911382884012	WITHOUT_CLASSIFICATION	8.861711598772485E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999630206901006	WITHOUT_CLASSIFICATION	3.6979309899466955E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999852792612047	WITHOUT_CLASSIFICATION	1.4720738795273749E-5	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999500415961655	WITHOUT_CLASSIFICATION	4.9958403834431456E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999950086182044	WITHOUT_CLASSIFICATION	4.991381795616112E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999503093474119	WITHOUT_CLASSIFICATION	4.969065258817998E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999562254824049	WITHOUT_CLASSIFICATION	4.377451759511387E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9993179279339917	WITHOUT_CLASSIFICATION	6.820720660082682E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999220142650405	WITHOUT_CLASSIFICATION	7.798573495954507E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999907724439656	WITHOUT_CLASSIFICATION	9.22755603438701E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999357540047797	WITHOUT_CLASSIFICATION	6.424599522030111E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999288510868066	WITHOUT_CLASSIFICATION	7.114891319337872E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998944687702721	WITHOUT_CLASSIFICATION	1.0553122972793382E-4	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999921874430919	WITHOUT_CLASSIFICATION	7.812556908113142E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.999976675684118	WITHOUT_CLASSIFICATION	2.332431588193777E-5	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998935323462539	WITHOUT_CLASSIFICATION	1.0646765374605054E-4	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999511547796104	WITHOUT_CLASSIFICATION	4.884522038967326E-5	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675898473265	WITHOUT_CLASSIFICATION	1.3241015267348346E-4	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999402392101124	WITHOUT_CLASSIFICATION	5.976078988764191E-5	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999766808029196	WITHOUT_CLASSIFICATION	2.331919708037343E-5	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9953121485380736	WITHOUT_CLASSIFICATION	0.004687851461926318	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.999976675684118	WITHOUT_CLASSIFICATION	2.332431588193777E-5	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999504548518025	WITHOUT_CLASSIFICATION	4.954514819753374E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998873389002984	WITHOUT_CLASSIFICATION	1.1266109970155998E-4	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998873389002984	WITHOUT_CLASSIFICATION	1.1266109970155998E-4	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999952581355975	WITHOUT_CLASSIFICATION	4.7418644025068124E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9994610956180587	WITHOUT_CLASSIFICATION	5.38904381941238E-4	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999511547796104	WITHOUT_CLASSIFICATION	4.884522038967326E-5	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999719749979985	WITHOUT_CLASSIFICATION	2.80250020015751E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999309244573591	WITHOUT_CLASSIFICATION	6.907554264086411E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9998555810049912	WITHOUT_CLASSIFICATION	1.4441899500888895E-4	TEST
found	WITHOUT_CLASSIFICATION	0.9998555810049912	WITHOUT_CLASSIFICATION	1.4441899500888895E-4	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998649105083869	WITHOUT_CLASSIFICATION	1.3508949161311753E-4	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9998874427574354	WITHOUT_CLASSIFICATION	1.1255724256462274E-4	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9998874427574354	WITHOUT_CLASSIFICATION	1.1255724256462274E-4	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9994079176244444	WITHOUT_CLASSIFICATION	5.920823755555893E-4	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999938475089378	WITHOUT_CLASSIFICATION	6.152491062192974E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9978063025169581	WITHOUT_CLASSIFICATION	0.0021936974830418492	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999609369487847	WITHOUT_CLASSIFICATION	3.9063051215295245E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9978063025169581	WITHOUT_CLASSIFICATION	0.0021936974830418492	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999609369487847	WITHOUT_CLASSIFICATION	3.9063051215295245E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997819367992634	WITHOUT_CLASSIFICATION	2.1806320073661483E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999433296567483	WITHOUT_CLASSIFICATION	5.667034325174609E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999927237965528	WITHOUT_CLASSIFICATION	7.276203447221133E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.99999138289548	WITHOUT_CLASSIFICATION	8.617104519961927E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998453542187713	WITHOUT_CLASSIFICATION	1.546457812287274E-4	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9946239869389878	WITHOUT_CLASSIFICATION	0.005376013061012156	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999418496806516	WITHOUT_CLASSIFICATION	5.8150319348425387E-5	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999418496806516	WITHOUT_CLASSIFICATION	5.8150319348425387E-5	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9993665258150997	WITHOUT_CLASSIFICATION	6.334741849003141E-4	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9997016842414399	WITHOUT_CLASSIFICATION	2.983157585601229E-4	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998593248516346	WITHOUT_CLASSIFICATION	1.406751483653956E-4	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999623896154324	WITHOUT_CLASSIFICATION	3.7610384567742554E-5	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.999983272078874	WITHOUT_CLASSIFICATION	1.672792112597015E-5	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9998799997953438	WITHOUT_CLASSIFICATION	1.2000020465612071E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9998799997953438	WITHOUT_CLASSIFICATION	1.2000020465612071E-4	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999369495304743	WITHOUT_CLASSIFICATION	6.305046952571333E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999369495304743	WITHOUT_CLASSIFICATION	6.305046952571333E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999909180923517	WITHOUT_CLASSIFICATION	9.081907648341154E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997819367992634	WITHOUT_CLASSIFICATION	2.1806320073661483E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998721558377823	WITHOUT_CLASSIFICATION	1.2784416221767463E-4	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9994654471739396	WITHOUT_CLASSIFICATION	5.345528260603407E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996920628824417	WITHOUT_CLASSIFICATION	3.0793711755828607E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999308706805908	WITHOUT_CLASSIFICATION	6.912931940906161E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9672977367626134	WITHOUT_CLASSIFICATION	0.032702263237386585	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997819367992634	WITHOUT_CLASSIFICATION	2.1806320073661483E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999308706805908	WITHOUT_CLASSIFICATION	6.912931940906161E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9672977367626134	WITHOUT_CLASSIFICATION	0.032702263237386585	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9998961166014141	WITHOUT_CLASSIFICATION	1.0388339858587306E-4	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998881997167405	WITHOUT_CLASSIFICATION	1.1180028325950775E-4	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999039181216773	WITHOUT_CLASSIFICATION	9.608187832273451E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997819367992634	WITHOUT_CLASSIFICATION	2.1806320073661483E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997819367992634	WITHOUT_CLASSIFICATION	2.1806320073661483E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9998955296487945	WITHOUT_CLASSIFICATION	1.0447035120554362E-4	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999242459326656	WITHOUT_CLASSIFICATION	7.575406733443223E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999559859447352	WITHOUT_CLASSIFICATION	4.4014055264744965E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999807870943498	WITHOUT_CLASSIFICATION	1.92129056501557E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.999946930194352	WITHOUT_CLASSIFICATION	5.306980564811456E-5	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999868387021927	WITHOUT_CLASSIFICATION	1.3161297807356317E-5	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997456569598475	WITHOUT_CLASSIFICATION	2.543430401524988E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999712593948427	WITHOUT_CLASSIFICATION	2.8740605157362605E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999581315550164	WITHOUT_CLASSIFICATION	4.186844498353781E-5	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9997435324049002	WITHOUT_CLASSIFICATION	2.5646759509981336E-4	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999834095848545	WITHOUT_CLASSIFICATION	1.6590415145557202E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999876587971798	WITHOUT_CLASSIFICATION	1.2341202820197627E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999013207268813	WITHOUT_CLASSIFICATION	9.867927311857593E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999612354850347	WITHOUT_CLASSIFICATION	3.876451496534717E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9988220464218591	WITHOUT_CLASSIFICATION	0.00117795357814083	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999807870943498	WITHOUT_CLASSIFICATION	1.92129056501557E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999533032031167	WITHOUT_CLASSIFICATION	4.6696796883397385E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9998932797126066	WITHOUT_CLASSIFICATION	1.0672028739349414E-4	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999317515297564	WITHOUT_CLASSIFICATION	6.824847024353305E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999640987264496	WITHOUT_CLASSIFICATION	3.590127355042052E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999807870943498	WITHOUT_CLASSIFICATION	1.92129056501557E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9991862473977072	WITHOUT_CLASSIFICATION	8.13752602292885E-4	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9926054449067913	WITHOUT_CLASSIFICATION	0.007394555093208782	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.996809610571036	WITHOUT_CLASSIFICATION	0.003190389428964005	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999822418812052	WITHOUT_CLASSIFICATION	1.775811879474008E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999900063716598	WITHOUT_CLASSIFICATION	9.993628340309155E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999650965898182	WITHOUT_CLASSIFICATION	3.490341018180598E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999864987158387	WITHOUT_CLASSIFICATION	1.3501284161324205E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999854165281027	WITHOUT_CLASSIFICATION	1.458347189729402E-4	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998535717163389	WITHOUT_CLASSIFICATION	1.4642828366106462E-4	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999988062392918	WITHOUT_CLASSIFICATION	1.1937607082030746E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999447895904292	WITHOUT_CLASSIFICATION	5.521040957086643E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999620137507225	WITHOUT_CLASSIFICATION	3.798624927755018E-5	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953591465219	WITHOUT_CLASSIFICATION	4.640853478097312E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9998607736159034	WITHOUT_CLASSIFICATION	1.3922638409655683E-4	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999979807237777	WITHOUT_CLASSIFICATION	2.0192762223079717E-5	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670605815191	WITHOUT_CLASSIFICATION	3.293941848089422E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999406373421696	WITHOUT_CLASSIFICATION	5.9362657830385235E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999212375236646	WITHOUT_CLASSIFICATION	7.876247633547462E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999544221202223	WITHOUT_CLASSIFICATION	4.55778797776769E-5	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898014787038	WITHOUT_CLASSIFICATION	1.0198521296204034E-4	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898014787038	WITHOUT_CLASSIFICATION	1.0198521296204034E-4	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870745423235	WITHOUT_CLASSIFICATION	1.1292545767648911E-4	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998567092319381	WITHOUT_CLASSIFICATION	1.4329076806181374E-4	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999222329137868	WITHOUT_CLASSIFICATION	7.776708621324955E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998684141550148	WITHOUT_CLASSIFICATION	1.3158584498509224E-4	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998876768730922	WITHOUT_CLASSIFICATION	1.1232312690768675E-4	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999891213274256	WITHOUT_CLASSIFICATION	1.0878672574400633E-4	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998826131389661	WITHOUT_CLASSIFICATION	1.173868610339239E-4	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999157596907784	WITHOUT_CLASSIFICATION	8.424030922168642E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998149840980639	WITHOUT_CLASSIFICATION	1.85015901936044E-4	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9996991216428107	WITHOUT_CLASSIFICATION	3.008783571892508E-4	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999574746775093	WITHOUT_CLASSIFICATION	4.252532249072835E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999794794423134	WITHOUT_CLASSIFICATION	2.0520557686705603E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997345712132839	WITHOUT_CLASSIFICATION	2.654287867161284E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9998935328903544	WITHOUT_CLASSIFICATION	1.0646710964557342E-4	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999352042127971	WITHOUT_CLASSIFICATION	6.479578720286147E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999972703562247	WITHOUT_CLASSIFICATION	2.7296437752936E-5	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998653267279141	WITHOUT_CLASSIFICATION	1.3467327208603423E-4	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999287310982267	WITHOUT_CLASSIFICATION	7.126890177333925E-5	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999386095354243	WITHOUT_CLASSIFICATION	6.139046457558947E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999779878842666	WITHOUT_CLASSIFICATION	2.2012115733325662E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998973863445101	WITHOUT_CLASSIFICATION	1.0261365548988785E-4	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614232692111	WITHOUT_CLASSIFICATION	1.3857673078895882E-4	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735124347162	WITHOUT_CLASSIFICATION	2.6487565283787236E-5	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998566647359493	WITHOUT_CLASSIFICATION	1.43335264050758E-4	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9995466051513189	WITHOUT_CLASSIFICATION	4.533948486811832E-4	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998585767979105	WITHOUT_CLASSIFICATION	1.4142320208943864E-4	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999751849669141	WITHOUT_CLASSIFICATION	2.4815033085942625E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998178485498062	WITHOUT_CLASSIFICATION	1.8215145019375733E-4	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998589598143215	WITHOUT_CLASSIFICATION	1.410401856785223E-4	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997795745183189	WITHOUT_CLASSIFICATION	2.204254816811605E-4	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998497463773726	WITHOUT_CLASSIFICATION	1.5025362262749146E-4	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999875713701664	WITHOUT_CLASSIFICATION	1.2428629833599947E-4	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999932538037612	WITHOUT_CLASSIFICATION	6.746196238811021E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998878024532961	WITHOUT_CLASSIFICATION	1.1219754670393724E-4	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999552453505293	WITHOUT_CLASSIFICATION	4.4754649470739544E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999051482310481	WITHOUT_CLASSIFICATION	9.485176895182346E-5	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999565816337973	WITHOUT_CLASSIFICATION	4.341836620276562E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997345712132839	WITHOUT_CLASSIFICATION	2.654287867161284E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999919352393399	WITHOUT_CLASSIFICATION	8.064760660097762E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999111823062502	WITHOUT_CLASSIFICATION	8.881769374978738E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999303343527108	WITHOUT_CLASSIFICATION	6.96656472891099E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999574746775093	WITHOUT_CLASSIFICATION	4.252532249072835E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999030534023203	WITHOUT_CLASSIFICATION	9.694659767972189E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9995466051513189	WITHOUT_CLASSIFICATION	4.533948486811832E-4	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999064857791781	WITHOUT_CLASSIFICATION	9.351422082198076E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997473796076994	WITHOUT_CLASSIFICATION	2.5262039230055733E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996495340136052	WITHOUT_CLASSIFICATION	3.5046598639470414E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999514344120352	WITHOUT_CLASSIFICATION	4.8565587964824865E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999741652275685	WITHOUT_CLASSIFICATION	2.5834772431508867E-4	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999250683738988	WITHOUT_CLASSIFICATION	7.493162610118306E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999407961861635	WITHOUT_CLASSIFICATION	5.9203813836449345E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999615039392323	WITHOUT_CLASSIFICATION	3.8496060767739946E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9998956296041859	WITHOUT_CLASSIFICATION	1.0437039581413972E-4	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999574746775093	WITHOUT_CLASSIFICATION	4.252532249072835E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999455086998813	WITHOUT_CLASSIFICATION	5.449130011858435E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9997726829949173	WITHOUT_CLASSIFICATION	2.2731700508266762E-4	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999421750223154	WITHOUT_CLASSIFICATION	5.782497768464046E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999314505581504	WITHOUT_CLASSIFICATION	6.854944184957513E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999493889995703	WITHOUT_CLASSIFICATION	5.061100042968702E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999556513624429	WITHOUT_CLASSIFICATION	4.434863755715018E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998071387075813	WITHOUT_CLASSIFICATION	1.9286129241860488E-4	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999532134444927	WITHOUT_CLASSIFICATION	4.6786555507397205E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999649089764866	WITHOUT_CLASSIFICATION	3.509102351337956E-5	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9997761645973999	WITHOUT_CLASSIFICATION	2.238354026000661E-4	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9997763513289799	WITHOUT_CLASSIFICATION	2.236486710200628E-4	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999045127699995	WITHOUT_CLASSIFICATION	9.548723000062005E-5	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999045127699995	WITHOUT_CLASSIFICATION	9.548723000062005E-5	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999574746775093	WITHOUT_CLASSIFICATION	4.252532249072835E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997345712132839	WITHOUT_CLASSIFICATION	2.654287867161284E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9992954042636072	WITHOUT_CLASSIFICATION	7.04595736392821E-4	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9998736653184344	WITHOUT_CLASSIFICATION	1.2633468156559034E-4	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9972006095416356	WITHOUT_CLASSIFICATION	0.0027993904583644745	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997345712132839	WITHOUT_CLASSIFICATION	2.654287867161284E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999314505581504	WITHOUT_CLASSIFICATION	6.854944184957513E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9995205851379821	WITHOUT_CLASSIFICATION	4.794148620178564E-4	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999421750223154	WITHOUT_CLASSIFICATION	5.782497768464046E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999870540140715	WITHOUT_CLASSIFICATION	1.2945985928611375E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9971805001362055	WITHOUT_CLASSIFICATION	0.002819499863794394	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9997953413429499	WITHOUT_CLASSIFICATION	2.0465865705006386E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996495340136052	WITHOUT_CLASSIFICATION	3.5046598639470414E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999434333178188	WITHOUT_CLASSIFICATION	5.6566682181287256E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999333114969032	WITHOUT_CLASSIFICATION	6.66885030967619E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999538887220313	WITHOUT_CLASSIFICATION	4.611127796869302E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999421750223154	WITHOUT_CLASSIFICATION	5.782497768464046E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999870540140715	WITHOUT_CLASSIFICATION	1.2945985928611375E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997345712132839	WITHOUT_CLASSIFICATION	2.654287867161284E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999514344120352	WITHOUT_CLASSIFICATION	4.8565587964824865E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999741652275685	WITHOUT_CLASSIFICATION	2.5834772431508867E-4	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999250683738988	WITHOUT_CLASSIFICATION	7.493162610118306E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643256999814	WITHOUT_CLASSIFICATION	3.567430001869372E-5	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971258144026	WITHOUT_CLASSIFICATION	2.8741855974021215E-5	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9998769427760063	WITHOUT_CLASSIFICATION	1.230572239937161E-4	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999123711393125	WITHOUT_CLASSIFICATION	8.762886068744252E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999927843802288	WITHOUT_CLASSIFICATION	7.215619771186425E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998991921860907	WITHOUT_CLASSIFICATION	1.0080781390930131E-4	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.99942182601349	WITHOUT_CLASSIFICATION	5.781739865099725E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9997982982860415	WITHOUT_CLASSIFICATION	2.0170171395837401E-4	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999343237313808	WITHOUT_CLASSIFICATION	6.567626861924731E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999891213274256	WITHOUT_CLASSIFICATION	1.0878672574400633E-4	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999178368686418	WITHOUT_CLASSIFICATION	8.216313135826104E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998650984093174	WITHOUT_CLASSIFICATION	1.3490159068265016E-4	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998869990399768	WITHOUT_CLASSIFICATION	1.1300096002319299E-4	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9996231891653358	WITHOUT_CLASSIFICATION	3.7681083466422347E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
<String>	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998826131389661	WITHOUT_CLASSIFICATION	1.173868610339239E-4	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820409934325	WITHOUT_CLASSIFICATION	1.1795900656755953E-4	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999932538037612	WITHOUT_CLASSIFICATION	6.746196238811021E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9993350581840831	WITHOUT_CLASSIFICATION	6.64941815916936E-4	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998772532406836	WITHOUT_CLASSIFICATION	1.2274675931636374E-4	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998694273613404	WITHOUT_CLASSIFICATION	1.3057263865958767E-4	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9990612656503662	WITHOUT_CLASSIFICATION	9.387343496338774E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999370349460819	WITHOUT_CLASSIFICATION	6.296505391808888E-5	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9997687595460221	WITHOUT_CLASSIFICATION	2.3124045397785562E-4	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999591045406622	WITHOUT_CLASSIFICATION	4.089545933789539E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999864987158387	WITHOUT_CLASSIFICATION	1.3501284161324205E-5	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999637944159637	WITHOUT_CLASSIFICATION	3.620558403629497E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998271219756891	WITHOUT_CLASSIFICATION	1.7287802431079842E-4	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999376093433198	WITHOUT_CLASSIFICATION	6.2390656680223E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999333874410553	WITHOUT_CLASSIFICATION	6.661255894459175E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999917083157446	WITHOUT_CLASSIFICATION	8.291684255400473E-5	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999287055046697	WITHOUT_CLASSIFICATION	7.129449533021269E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284767062502	WITHOUT_CLASSIFICATION	7.152329374993189E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998153759400759	WITHOUT_CLASSIFICATION	1.8462405992408884E-4	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998327963042181	WITHOUT_CLASSIFICATION	1.6720369578201693E-4	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999182255035866	WITHOUT_CLASSIFICATION	8.177449641348757E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999542307779323	WITHOUT_CLASSIFICATION	4.576922206773596E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999539653390036	WITHOUT_CLASSIFICATION	4.6034660996486875E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999196480551876	WITHOUT_CLASSIFICATION	8.035194481242547E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999278947233259	WITHOUT_CLASSIFICATION	7.210527667403872E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997957985037963	WITHOUT_CLASSIFICATION	2.0420149620375562E-4	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997647398165701	WITHOUT_CLASSIFICATION	2.3526018342999455E-4	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999196480551876	WITHOUT_CLASSIFICATION	8.035194481242547E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999748074559429	WITHOUT_CLASSIFICATION	2.519254405710899E-5	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999774524338421	WITHOUT_CLASSIFICATION	2.2547566157913774E-4	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933613033685	WITHOUT_CLASSIFICATION	1.0663869663154945E-4	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999766744257826	WITHOUT_CLASSIFICATION	2.332557421732255E-5	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999051610521623	WITHOUT_CLASSIFICATION	9.483894783760917E-5	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999649993473494	WITHOUT_CLASSIFICATION	3.500065265061223E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9998895978273606	WITHOUT_CLASSIFICATION	1.1040217263937701E-4	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999752650997823	WITHOUT_CLASSIFICATION	2.4734900217723954E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999752650997823	WITHOUT_CLASSIFICATION	2.4734900217723954E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999967465439532	WITHOUT_CLASSIFICATION	3.253456046798012E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999737491751932	WITHOUT_CLASSIFICATION	2.6250824806818562E-5	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999767432429757	WITHOUT_CLASSIFICATION	2.3256757024243272E-5	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999119325248603	WITHOUT_CLASSIFICATION	8.80674751397677E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999929392053836	WITHOUT_CLASSIFICATION	7.060794616531684E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997430649357353	WITHOUT_CLASSIFICATION	2.569350642647171E-4	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9997011600405363	WITHOUT_CLASSIFICATION	2.988399594636915E-4	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999916672675467	WITHOUT_CLASSIFICATION	8.332732453302518E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9994072077659852	WITHOUT_CLASSIFICATION	5.927922340148049E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999865033980685	WITHOUT_CLASSIFICATION	1.3496601931455395E-5	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997626857260378	WITHOUT_CLASSIFICATION	2.3731427396224896E-4	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9991379271638395	WITHOUT_CLASSIFICATION	8.620728361605277E-4	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999439645614574	WITHOUT_CLASSIFICATION	5.603543854260486E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999059648455422	WITHOUT_CLASSIFICATION	9.40351544577927E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999572850136751	WITHOUT_CLASSIFICATION	4.271498632483328E-5	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.99940378122619	WITHOUT_CLASSIFICATION	5.962187738099065E-4	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999342119595724	WITHOUT_CLASSIFICATION	6.578804042756656E-5	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999668713437376	WITHOUT_CLASSIFICATION	3.312865626228462E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999587732879951	WITHOUT_CLASSIFICATION	4.122671200488112E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998569586795482	WITHOUT_CLASSIFICATION	1.4304132045179325E-4	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999513411732727	WITHOUT_CLASSIFICATION	4.865882672724282E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999501744140361	WITHOUT_CLASSIFICATION	4.9825585963927274E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998124636941311	WITHOUT_CLASSIFICATION	1.875363058688412E-4	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999539518669259	WITHOUT_CLASSIFICATION	4.6048133073981735E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999457903459862	WITHOUT_CLASSIFICATION	5.4209654013740966E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999176938291218	WITHOUT_CLASSIFICATION	8.230617087821062E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999885734992262	WITHOUT_CLASSIFICATION	1.1426500773921593E-5	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999541139923284	WITHOUT_CLASSIFICATION	4.5886007671665706E-5	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9860329933661948	WITHOUT_CLASSIFICATION	0.013967006633805184	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998339543405069	WITHOUT_CLASSIFICATION	1.6604565949304354E-4	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999576220939925	WITHOUT_CLASSIFICATION	4.237790600753707E-5	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999857915806903	WITHOUT_CLASSIFICATION	1.4208419309574474E-5	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999901367778258	WITHOUT_CLASSIFICATION	9.863222174164491E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999164353758028	WITHOUT_CLASSIFICATION	8.356462419718561E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9998877759137276	WITHOUT_CLASSIFICATION	1.1222408627236211E-4	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9971028749434061	WITHOUT_CLASSIFICATION	0.0028971250565939465	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996464058742799	WITHOUT_CLASSIFICATION	3.535941257201524E-4	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998825526008069	WITHOUT_CLASSIFICATION	1.1744739919308609E-4	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999090066765638	WITHOUT_CLASSIFICATION	9.09933234363046E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998917618740752	WITHOUT_CLASSIFICATION	1.0823812592482607E-4	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9998956296041859	WITHOUT_CLASSIFICATION	1.0437039581413972E-4	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9998956296041859	WITHOUT_CLASSIFICATION	1.0437039581413972E-4	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997203176167793	WITHOUT_CLASSIFICATION	2.796823832207474E-4	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9996183334810617	WITHOUT_CLASSIFICATION	3.816665189383303E-4	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999592642387126	WITHOUT_CLASSIFICATION	4.073576128750915E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999694624354749	WITHOUT_CLASSIFICATION	3.0537564525032815E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998455506077222	WITHOUT_CLASSIFICATION	1.5444939227785332E-4	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9998478725232836	WITHOUT_CLASSIFICATION	1.5212747671633267E-4	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999247877547234	WITHOUT_CLASSIFICATION	7.521224527662321E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9983650667290241	WITHOUT_CLASSIFICATION	0.0016349332709759128	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999279103638707	WITHOUT_CLASSIFICATION	7.208963612932526E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999728771114282	WITHOUT_CLASSIFICATION	2.712288857175456E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998624591133232	WITHOUT_CLASSIFICATION	1.3754088667678192E-4	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9996720399969211	WITHOUT_CLASSIFICATION	3.2796000307894007E-4	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998568607503375	WITHOUT_CLASSIFICATION	1.4313924966240474E-4	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999259502650975	WITHOUT_CLASSIFICATION	7.404973490256828E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998698665441308	WITHOUT_CLASSIFICATION	1.3013345586920032E-4	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999304015192763	WITHOUT_CLASSIFICATION	6.959848072377149E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999297639925829	WITHOUT_CLASSIFICATION	7.02360074169916E-5	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999996078629323	WITHOUT_CLASSIFICATION	3.9213706773608885E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999326520333783	WITHOUT_CLASSIFICATION	6.734796662163947E-5	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999505928403316	WITHOUT_CLASSIFICATION	4.940715966830142E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999410891377084	WITHOUT_CLASSIFICATION	5.891086229160126E-4	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999326520333783	WITHOUT_CLASSIFICATION	6.734796662163947E-5	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999648503315901	WITHOUT_CLASSIFICATION	3.514966840977502E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999436290016632	WITHOUT_CLASSIFICATION	5.637099833685087E-5	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9994553683170863	WITHOUT_CLASSIFICATION	5.446316829136979E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995884108887049	WITHOUT_CLASSIFICATION	4.115891112951659E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.999888304455859	WITHOUT_CLASSIFICATION	1.1169554414099953E-4	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999783974640942	WITHOUT_CLASSIFICATION	2.1602535905777316E-5	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998781037604269	WITHOUT_CLASSIFICATION	1.2189623957310703E-4	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999841553224394	WITHOUT_CLASSIFICATION	1.584467756050726E-5	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998568696219836	WITHOUT_CLASSIFICATION	1.4313037801633296E-4	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999441471153614	WITHOUT_CLASSIFICATION	5.5852884638665713E-5	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9991552888803207	WITHOUT_CLASSIFICATION	8.447111196793527E-4	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999446711163515	WITHOUT_CLASSIFICATION	5.5328883648462185E-5	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9997128135522291	WITHOUT_CLASSIFICATION	2.8718644777091885E-4	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999370070129833	WITHOUT_CLASSIFICATION	6.299298701675921E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998048215779284	WITHOUT_CLASSIFICATION	1.9517842207156488E-4	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999611766735352	WITHOUT_CLASSIFICATION	3.882332646487055E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998387283706426	WITHOUT_CLASSIFICATION	1.6127162935737E-4	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9978187034912633	WITHOUT_CLASSIFICATION	0.0021812965087367095	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9998820571618141	WITHOUT_CLASSIFICATION	1.1794283818584068E-4	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999926421772056	WITHOUT_CLASSIFICATION	7.35782279433824E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999245745636505	WITHOUT_CLASSIFICATION	7.542543634951944E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9928517032836096	WITHOUT_CLASSIFICATION	0.007148296716390422	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9997264884591929	WITHOUT_CLASSIFICATION	2.7351154080717784E-4	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999923169422282	WITHOUT_CLASSIFICATION	7.683057771814707E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999643274533329	WITHOUT_CLASSIFICATION	3.5672546667195845E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999202560892483	WITHOUT_CLASSIFICATION	7.974391075166743E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999922956965677	WITHOUT_CLASSIFICATION	7.704303432358715E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999683946483825	WITHOUT_CLASSIFICATION	3.160535161739611E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999693589461017	WITHOUT_CLASSIFICATION	3.064105389834186E-5	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999504444770788	WITHOUT_CLASSIFICATION	4.955552292118976E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.997735557864343	WITHOUT_CLASSIFICATION	0.002264442135657138	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997968513844344	WITHOUT_CLASSIFICATION	2.031486155654454E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9993887914102417	WITHOUT_CLASSIFICATION	6.112085897581888E-4	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9994867837924706	WITHOUT_CLASSIFICATION	5.132162075294167E-4	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999940891224463	WITHOUT_CLASSIFICATION	5.910877553697772E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999618488026939	WITHOUT_CLASSIFICATION	3.8151197306183925E-5	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999618673021609	WITHOUT_CLASSIFICATION	3.813269783908209E-5	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999438153400344	WITHOUT_CLASSIFICATION	5.618465996559242E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999267406040434	WITHOUT_CLASSIFICATION	7.325939595666525E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9973983889778946	WITHOUT_CLASSIFICATION	0.0026016110221055264	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9998951575682156	WITHOUT_CLASSIFICATION	1.0484243178441218E-4	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999758368058731	WITHOUT_CLASSIFICATION	2.416319412687802E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999465819710412	WITHOUT_CLASSIFICATION	5.3418028958816054E-5	TEST
count++;	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999524592791711	WITHOUT_CLASSIFICATION	4.7540720828935206E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999578999866047	WITHOUT_CLASSIFICATION	4.210001339536353E-5	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9998824429980918	WITHOUT_CLASSIFICATION	1.1755700190814165E-4	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999707323529629	WITHOUT_CLASSIFICATION	2.9267647037242642E-5	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999957541440049	WITHOUT_CLASSIFICATION	4.245855995092749E-5	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999677522417743	WITHOUT_CLASSIFICATION	3.224775822574835E-5	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998666981090788	WITHOUT_CLASSIFICATION	1.3330189092124086E-4	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998158055934201	WITHOUT_CLASSIFICATION	1.8419440657983294E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9998148308672749	WITHOUT_CLASSIFICATION	1.851691327251771E-4	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999952716918234	WITHOUT_CLASSIFICATION	4.728308176603701E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999972191423497	WITHOUT_CLASSIFICATION	2.7808576502651758E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9996949062373142	WITHOUT_CLASSIFICATION	3.050937626858382E-4	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9979334092532481	WITHOUT_CLASSIFICATION	0.0020665907467518176	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997980526787588	WITHOUT_CLASSIFICATION	2.0194732124125908E-4	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997320483209751	WITHOUT_CLASSIFICATION	2.679516790249699E-4	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984823206122	WITHOUT_CLASSIFICATION	1.0151767938783811E-4	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9993216425560015	WITHOUT_CLASSIFICATION	6.783574439985425E-4	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999467593239127	WITHOUT_CLASSIFICATION	5.324067608719151E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997779105340028	WITHOUT_CLASSIFICATION	2.2208946599731175E-4	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9998684191402657	WITHOUT_CLASSIFICATION	1.3158085973429012E-4	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9998938551054857	WITHOUT_CLASSIFICATION	1.0614489451435537E-4	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997979166095117	WITHOUT_CLASSIFICATION	2.0208339048832707E-4	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9998938551054857	WITHOUT_CLASSIFICATION	1.0614489451435537E-4	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999911378189136	WITHOUT_CLASSIFICATION	8.862181086406452E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999763513068186	WITHOUT_CLASSIFICATION	2.364869318141169E-5	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999024983814627	WITHOUT_CLASSIFICATION	9.750161853730123E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999518577990055	WITHOUT_CLASSIFICATION	4.814220099456535E-5	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999832441954811	WITHOUT_CLASSIFICATION	1.6755804518904765E-4	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9990275389445655	WITHOUT_CLASSIFICATION	9.724610554345087E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999867774408628	WITHOUT_CLASSIFICATION	1.3222559137050812E-5	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999828270277997	WITHOUT_CLASSIFICATION	1.717297220026618E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999873744232624	WITHOUT_CLASSIFICATION	1.2625576737573784E-5	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997950453142376	WITHOUT_CLASSIFICATION	2.04954685762372E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999845301215017	WITHOUT_CLASSIFICATION	1.5469878498262417E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998893248033006	WITHOUT_CLASSIFICATION	1.1067519669948909E-4	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997233350108681	WITHOUT_CLASSIFICATION	2.7666498913195774E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9940570027370275	WITHOUT_CLASSIFICATION	0.0059429972629725355	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9997699984041463	WITHOUT_CLASSIFICATION	2.3000159585368374E-4	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999453542615402	WITHOUT_CLASSIFICATION	5.46457384598772E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9998208462105471	WITHOUT_CLASSIFICATION	1.7915378945275966E-4	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9998208462105471	WITHOUT_CLASSIFICATION	1.7915378945275966E-4	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999672466191593	WITHOUT_CLASSIFICATION	3.2753380840833834E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999613118870894	WITHOUT_CLASSIFICATION	3.8688112910631995E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999137971076231	WITHOUT_CLASSIFICATION	8.620289237693795E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999827670191107	WITHOUT_CLASSIFICATION	1.7232980889262657E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998850808885853	WITHOUT_CLASSIFICATION	1.1491911141469584E-4	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999775813225521	WITHOUT_CLASSIFICATION	2.241867744784107E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9986000382280514	WITHOUT_CLASSIFICATION	0.001399961771948486	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998961343528586	WITHOUT_CLASSIFICATION	1.0386564714145054E-4	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999787182801617	WITHOUT_CLASSIFICATION	2.1281719838301673E-5	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999786979435774	WITHOUT_CLASSIFICATION	2.1302056422605142E-4	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998724949660552	WITHOUT_CLASSIFICATION	1.2750503394476584E-4	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999793935376604	WITHOUT_CLASSIFICATION	2.060646233960773E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999337023257288	WITHOUT_CLASSIFICATION	6.629767427114993E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9995591655355942	WITHOUT_CLASSIFICATION	4.4083446440583706E-4	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999354305354186	WITHOUT_CLASSIFICATION	6.456946458146366E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9996722711391175	WITHOUT_CLASSIFICATION	3.2772886088248406E-4	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999829686441274	WITHOUT_CLASSIFICATION	1.703135587266401E-5	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999859094125946	WITHOUT_CLASSIFICATION	1.409058740539835E-4	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999896468156414	WITHOUT_CLASSIFICATION	1.0353184358542342E-5	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9998842869741574	WITHOUT_CLASSIFICATION	1.1571302584249501E-4	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999674484735832	WITHOUT_CLASSIFICATION	3.255152641676543E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999680791457333	WITHOUT_CLASSIFICATION	3.19208542666238E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999525414537435	WITHOUT_CLASSIFICATION	4.7458546256464594E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999377741401313	WITHOUT_CLASSIFICATION	6.222585986878327E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999359309200565	WITHOUT_CLASSIFICATION	6.406907994344292E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999919858202115	WITHOUT_CLASSIFICATION	8.014179788438807E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9996145971815955	WITHOUT_CLASSIFICATION	3.8540281840442265E-4	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998639192605798	WITHOUT_CLASSIFICATION	1.3608073942015256E-4	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9998603443358546	WITHOUT_CLASSIFICATION	1.3965566414532495E-4	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999918447993176	WITHOUT_CLASSIFICATION	8.155200682440439E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997248829624806	WITHOUT_CLASSIFICATION	2.7511703751937976E-4	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998856403297832	WITHOUT_CLASSIFICATION	1.1435967021680246E-4	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9985984296329026	WITHOUT_CLASSIFICATION	0.0014015703670974995	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9995950756922248	WITHOUT_CLASSIFICATION	4.04924307775161E-4	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999818960258693	WITHOUT_CLASSIFICATION	1.8103974130792225E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999951338679075	WITHOUT_CLASSIFICATION	4.866132092499147E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999592999570304	WITHOUT_CLASSIFICATION	4.0700042969572345E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999509316098782	WITHOUT_CLASSIFICATION	4.906839012165441E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999599744481411	WITHOUT_CLASSIFICATION	4.002555185883257E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999542579693049	WITHOUT_CLASSIFICATION	4.5742030695090474E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998988568748667	WITHOUT_CLASSIFICATION	1.0114312513332576E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578685928301	WITHOUT_CLASSIFICATION	1.4213140717000012E-4	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9998603864197403	WITHOUT_CLASSIFICATION	1.3961358025981523E-4	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998783885527236	WITHOUT_CLASSIFICATION	1.2161144727633783E-4	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998857356815254	WITHOUT_CLASSIFICATION	1.1426431847461391E-4	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999464623530201	WITHOUT_CLASSIFICATION	5.353764697990148E-5	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9998958430475833	WITHOUT_CLASSIFICATION	1.041569524167591E-4	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999924435137186	WITHOUT_CLASSIFICATION	7.556486281382127E-6	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999151064142601	WITHOUT_CLASSIFICATION	8.489358573998444E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998413826140651	WITHOUT_CLASSIFICATION	1.5861738593502626E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578685928301	WITHOUT_CLASSIFICATION	1.4213140717000012E-4	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999500891407703	WITHOUT_CLASSIFICATION	4.991085922968243E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9993280943341433	WITHOUT_CLASSIFICATION	6.719056658568128E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999917186957493	WITHOUT_CLASSIFICATION	8.281304250645097E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999530428747002	WITHOUT_CLASSIFICATION	4.6957125299795995E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9996261146792678	WITHOUT_CLASSIFICATION	3.738853207321833E-4	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999705338675005	WITHOUT_CLASSIFICATION	2.9466132499549102E-5	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9989060365455195	WITHOUT_CLASSIFICATION	0.0010939634544805314	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997613302898387	WITHOUT_CLASSIFICATION	2.3866971016118865E-4	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999856601844328	WITHOUT_CLASSIFICATION	1.4339815567192E-4	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999238417002634	WITHOUT_CLASSIFICATION	7.615829973663253E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999845472043802	WITHOUT_CLASSIFICATION	1.5452795619704634E-5	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9990417991756949	WITHOUT_CLASSIFICATION	9.582008243050254E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999967003984855	WITHOUT_CLASSIFICATION	3.2996015144930944E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9992037952274139	WITHOUT_CLASSIFICATION	7.96204772586191E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999604996894208	WITHOUT_CLASSIFICATION	3.950031057908929E-5	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999824808704234	WITHOUT_CLASSIFICATION	1.751912957659367E-5	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998756114569798	WITHOUT_CLASSIFICATION	1.2438854302023857E-4	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999760816017323	WITHOUT_CLASSIFICATION	2.3918398267636078E-5	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9985656112511261	WITHOUT_CLASSIFICATION	0.0014343887488739457	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9973062205197847	WITHOUT_CLASSIFICATION	0.0026937794802154454	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999929721353249	WITHOUT_CLASSIFICATION	7.02786467508451E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999965531405435	WITHOUT_CLASSIFICATION	3.446859456507554E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999671269081993	WITHOUT_CLASSIFICATION	3.287309180072983E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999809453342515	WITHOUT_CLASSIFICATION	1.905466574851106E-5	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999494726533746	WITHOUT_CLASSIFICATION	5.052734662525704E-5	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999860180939459	WITHOUT_CLASSIFICATION	1.398190605402321E-5	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999742193126512	WITHOUT_CLASSIFICATION	2.578068734884527E-5	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999036688992345	WITHOUT_CLASSIFICATION	9.633110076550785E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999067969651855	WITHOUT_CLASSIFICATION	9.320303481454011E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9996693864234296	WITHOUT_CLASSIFICATION	3.306135765704099E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998554717406007	WITHOUT_CLASSIFICATION	1.445282593992229E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999975676730899	WITHOUT_CLASSIFICATION	2.432326910070863E-6	TEST
DELETED	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999048077699224	WITHOUT_CLASSIFICATION	9.519223007760602E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998266611804023	WITHOUT_CLASSIFICATION	1.7333881959758182E-4	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.997152435108104	WITHOUT_CLASSIFICATION	0.0028475648918959537	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9983188747745527	WITHOUT_CLASSIFICATION	0.0016811252254473404	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998266611804023	WITHOUT_CLASSIFICATION	1.7333881959758182E-4	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999374492844926	WITHOUT_CLASSIFICATION	6.255071550741158E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999048077699224	WITHOUT_CLASSIFICATION	9.519223007760602E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9962972982585165	WITHOUT_CLASSIFICATION	0.003702701741483548	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998266611804023	WITHOUT_CLASSIFICATION	1.7333881959758182E-4	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998675475427271	WITHOUT_CLASSIFICATION	1.3245245727287E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999434341492992	WITHOUT_CLASSIFICATION	5.656585070077375E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998724949660552	WITHOUT_CLASSIFICATION	1.2750503394476584E-4	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998980997322144	WITHOUT_CLASSIFICATION	1.0190026778550781E-4	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997687595460221	WITHOUT_CLASSIFICATION	2.3124045397785562E-4	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999981564779791	WITHOUT_CLASSIFICATION	1.843522020895266E-5	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999358207090502	WITHOUT_CLASSIFICATION	6.417929094983462E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9996929424982456	WITHOUT_CLASSIFICATION	3.0705750175440057E-4	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999637282341994	WITHOUT_CLASSIFICATION	3.627176580066081E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9996790018471025	WITHOUT_CLASSIFICATION	3.209981528975079E-4	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9997205200769569	WITHOUT_CLASSIFICATION	2.794799230431035E-4	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998850411698244	WITHOUT_CLASSIFICATION	1.149588301756126E-4	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998922862459804	WITHOUT_CLASSIFICATION	1.0771375401954333E-4	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998411608554045	WITHOUT_CLASSIFICATION	1.5883914459547793E-4	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999330363502738	WITHOUT_CLASSIFICATION	6.696364972625429E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999288138596946	WITHOUT_CLASSIFICATION	7.118614030547982E-5	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999637746457526	WITHOUT_CLASSIFICATION	3.622535424741423E-5	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9996580940951578	WITHOUT_CLASSIFICATION	3.4190590484210124E-4	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998641993123181	WITHOUT_CLASSIFICATION	1.3580068768194082E-4	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9998035381125245	WITHOUT_CLASSIFICATION	1.9646188747550117E-4	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999837654021105	WITHOUT_CLASSIFICATION	1.623459788942823E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999218934904593	WITHOUT_CLASSIFICATION	7.81065095405775E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998879776614291	WITHOUT_CLASSIFICATION	1.1202233857092469E-4	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997953713175489	WITHOUT_CLASSIFICATION	2.046286824509382E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.99980593076101	WITHOUT_CLASSIFICATION	1.9406923899009163E-4	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999004948432992	WITHOUT_CLASSIFICATION	9.950515670070599E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999574997725673	WITHOUT_CLASSIFICATION	4.2500227432821704E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999889535372116	WITHOUT_CLASSIFICATION	1.1046462788402408E-4	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998796749996167	WITHOUT_CLASSIFICATION	1.2032500038336592E-4	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996996981396887	WITHOUT_CLASSIFICATION	3.00301860311199E-4	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999764178724817	WITHOUT_CLASSIFICATION	2.3582127518261032E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999259139716783	WITHOUT_CLASSIFICATION	7.408602832169026E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999947236453338	WITHOUT_CLASSIFICATION	5.276354666208844E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999659020351365	WITHOUT_CLASSIFICATION	3.409796486356998E-5	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999478760857066	WITHOUT_CLASSIFICATION	5.212391429335527E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999180284826829	WITHOUT_CLASSIFICATION	8.19715173171062E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999735370981909	WITHOUT_CLASSIFICATION	2.646290180902897E-5	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998568514893882	WITHOUT_CLASSIFICATION	1.4314851061179398E-4	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999244283919918	WITHOUT_CLASSIFICATION	7.557160800816726E-5	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998969715699051	WITHOUT_CLASSIFICATION	1.0302843009486287E-4	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998231285356229	WITHOUT_CLASSIFICATION	1.7687146437696187E-4	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999978889641224	WITHOUT_CLASSIFICATION	2.1110358776156353E-5	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998526110758255	WITHOUT_CLASSIFICATION	1.473889241745588E-4	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999399794010104	WITHOUT_CLASSIFICATION	6.0020598989489774E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9974744834480225	WITHOUT_CLASSIFICATION	0.00252551655197751	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998677990177857	WITHOUT_CLASSIFICATION	1.322009822144304E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999233422116063	WITHOUT_CLASSIFICATION	7.665778839370242E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999500999663155	WITHOUT_CLASSIFICATION	4.990003368456924E-5	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997094120120015	WITHOUT_CLASSIFICATION	2.905879879985289E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9994628530105175	WITHOUT_CLASSIFICATION	5.371469894823773E-4	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998704993418025	WITHOUT_CLASSIFICATION	1.2950065819744794E-4	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9899456307593373	WITHOUT_CLASSIFICATION	0.010054369240662709	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999989098942498	WITHOUT_CLASSIFICATION	1.0901057502108092E-5	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999810430378019	WITHOUT_CLASSIFICATION	1.8956962198096055E-4	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9984430557671375	WITHOUT_CLASSIFICATION	0.0015569442328624823	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9997563321541474	WITHOUT_CLASSIFICATION	2.4366784585266773E-4	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999889535372116	WITHOUT_CLASSIFICATION	1.1046462788402408E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998304356646888	WITHOUT_CLASSIFICATION	1.6956433531126598E-4	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999924479507355	WITHOUT_CLASSIFICATION	7.5520492645462006E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9998450623040227	WITHOUT_CLASSIFICATION	1.5493769597732578E-4	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999269890568758	WITHOUT_CLASSIFICATION	7.30109431242056E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999742969260328	WITHOUT_CLASSIFICATION	2.5703073967208167E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999136828248048	WITHOUT_CLASSIFICATION	8.63171751952642E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998793916712748	WITHOUT_CLASSIFICATION	1.206083287252054E-4	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998281049019085	WITHOUT_CLASSIFICATION	1.718950980915009E-4	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999849351334557	WITHOUT_CLASSIFICATION	1.506486654444533E-5	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998916863122702	WITHOUT_CLASSIFICATION	1.0831368772981956E-4	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999523032211339	WITHOUT_CLASSIFICATION	4.7696778866066815E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9998603443358546	WITHOUT_CLASSIFICATION	1.3965566414532495E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999454626580171	WITHOUT_CLASSIFICATION	5.453734198286023E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998334498102437	WITHOUT_CLASSIFICATION	1.6655018975633197E-4	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999911378189136	WITHOUT_CLASSIFICATION	8.862181086406452E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999968515574441	WITHOUT_CLASSIFICATION	3.1484425558540926E-6	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999950536699399	WITHOUT_CLASSIFICATION	4.946330060097137E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999450814302621	WITHOUT_CLASSIFICATION	5.491856973798454E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.9998508776227969	WITHOUT_CLASSIFICATION	1.4912237720309825E-4	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999995299414521	WITHOUT_CLASSIFICATION	4.7005854790318915E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999614059187927	WITHOUT_CLASSIFICATION	3.859408120735928E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999614059187927	WITHOUT_CLASSIFICATION	3.859408120735928E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997267693898368	WITHOUT_CLASSIFICATION	2.7323061016317434E-4	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999223772216412	WITHOUT_CLASSIFICATION	7.762277835874184E-5	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999397443880593	WITHOUT_CLASSIFICATION	6.025561194072581E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998876440950166	WITHOUT_CLASSIFICATION	1.1235590498335135E-4	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999161277491407	WITHOUT_CLASSIFICATION	8.38722508593298E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999881381700817	WITHOUT_CLASSIFICATION	1.1861829918342576E-5	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999784399852532	WITHOUT_CLASSIFICATION	2.1560014746821426E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9960557350072237	WITHOUT_CLASSIFICATION	0.003944264992776428	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9960557350072237	WITHOUT_CLASSIFICATION	0.003944264992776428	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9994064039279907	WITHOUT_CLASSIFICATION	5.935960720092737E-4	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999438926380436	WITHOUT_CLASSIFICATION	5.610736195629346E-5	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997833691822984	WITHOUT_CLASSIFICATION	2.1663081770159032E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852202955314	WITHOUT_CLASSIFICATION	1.4779704468607677E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852202955314	WITHOUT_CLASSIFICATION	1.4779704468607677E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852202955314	WITHOUT_CLASSIFICATION	1.4779704468607677E-5	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998097760155916	WITHOUT_CLASSIFICATION	1.902239844082967E-4	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999027573756276	WITHOUT_CLASSIFICATION	9.724262437230869E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999244134106845	WITHOUT_CLASSIFICATION	7.558658931557687E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997965987249244	WITHOUT_CLASSIFICATION	2.034012750755857E-4	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999578147653613	WITHOUT_CLASSIFICATION	4.218523463880717E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999928727899782	WITHOUT_CLASSIFICATION	7.1272100217377E-6	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998404467989541	WITHOUT_CLASSIFICATION	1.595532010459315E-4	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9986436286822664	WITHOUT_CLASSIFICATION	0.0013563713177336398	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998873389002984	WITHOUT_CLASSIFICATION	1.1266109970155998E-4	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9998742282321516	WITHOUT_CLASSIFICATION	1.257717678485096E-4	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999090677166894	WITHOUT_CLASSIFICATION	9.093228331054227E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999215747970808	WITHOUT_CLASSIFICATION	7.842520291934242E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999627810757719	WITHOUT_CLASSIFICATION	3.721892422807161E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999945303241883	WITHOUT_CLASSIFICATION	5.469675811757533E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999742524245805	WITHOUT_CLASSIFICATION	2.574757541948299E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999808023686892	WITHOUT_CLASSIFICATION	1.9197631310793382E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999305395729989	WITHOUT_CLASSIFICATION	6.946042700105453E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999614059187927	WITHOUT_CLASSIFICATION	3.859408120735928E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999344918994214	WITHOUT_CLASSIFICATION	6.550810057861832E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999584087378037	WITHOUT_CLASSIFICATION	4.159126219627686E-5	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999585459855206	WITHOUT_CLASSIFICATION	4.145401447947198E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999515858448256	WITHOUT_CLASSIFICATION	4.8414155174385807E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999681484430563	WITHOUT_CLASSIFICATION	3.185155694381236E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999913901030761	WITHOUT_CLASSIFICATION	8.609896923880887E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999228604313993	WITHOUT_CLASSIFICATION	7.713956860069547E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999427437035507	WITHOUT_CLASSIFICATION	5.725629644917409E-5	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998278200510116	WITHOUT_CLASSIFICATION	1.721799489884054E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999693567060773	WITHOUT_CLASSIFICATION	3.06432939226613E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999296597725807	WITHOUT_CLASSIFICATION	7.034022741932916E-5	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999762331149863	WITHOUT_CLASSIFICATION	2.376688501378162E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9998647687206359	WITHOUT_CLASSIFICATION	1.3523127936411128E-4	TEST
ignore	WITHOUT_CLASSIFICATION	0.9998746331236579	WITHOUT_CLASSIFICATION	1.2536687634207255E-4	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999532070174253	WITHOUT_CLASSIFICATION	4.679298257463919E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999868092139208	WITHOUT_CLASSIFICATION	1.3190786079287342E-5	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999362238990085	WITHOUT_CLASSIFICATION	6.377610099149608E-5	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999885918427089	WITHOUT_CLASSIFICATION	1.1408157291139382E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999448341882465	WITHOUT_CLASSIFICATION	5.516581175356533E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999448341882465	WITHOUT_CLASSIFICATION	5.516581175356533E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999758893772758	WITHOUT_CLASSIFICATION	2.4110622724163123E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999605140341739	WITHOUT_CLASSIFICATION	3.948596582617795E-5	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999758640740161	WITHOUT_CLASSIFICATION	2.4135925983943486E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999516286665157	WITHOUT_CLASSIFICATION	4.837133348429832E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999716776509009	WITHOUT_CLASSIFICATION	2.8322349099069928E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999526308004782	WITHOUT_CLASSIFICATION	4.73691995217714E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999056673369876	WITHOUT_CLASSIFICATION	9.43326630123675E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999318245126346	WITHOUT_CLASSIFICATION	6.817548736527694E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999427066971791	WITHOUT_CLASSIFICATION	5.729330282102961E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998490465252334	WITHOUT_CLASSIFICATION	1.5095347476653685E-4	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998692798245227	WITHOUT_CLASSIFICATION	1.3072017547727298E-4	TEST
/	WITHOUT_CLASSIFICATION	0.9998603443358546	WITHOUT_CLASSIFICATION	1.3965566414532495E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999975485305067	WITHOUT_CLASSIFICATION	2.451469493383898E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999627482339971	WITHOUT_CLASSIFICATION	3.725176600294512E-5	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999993988900209	WITHOUT_CLASSIFICATION	6.011099791006438E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9996925838964659	WITHOUT_CLASSIFICATION	3.0741610353414537E-4	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950171315307	WITHOUT_CLASSIFICATION	4.9828684692277155E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950171315307	WITHOUT_CLASSIFICATION	4.9828684692277155E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998406308525591	WITHOUT_CLASSIFICATION	1.593691474407931E-4	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999975515191604	WITHOUT_CLASSIFICATION	2.448480839555001E-6	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998189762734907	WITHOUT_CLASSIFICATION	1.8102372650937172E-4	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999369298463933	WITHOUT_CLASSIFICATION	6.307015360671154E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9997399157597066	WITHOUT_CLASSIFICATION	2.6008424029345023E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9993914381834316	WITHOUT_CLASSIFICATION	6.085618165684245E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998036018764951	WITHOUT_CLASSIFICATION	1.9639812350485389E-4	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999755952493946	WITHOUT_CLASSIFICATION	2.440475060547614E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999108997367483	WITHOUT_CLASSIFICATION	8.910026325175927E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9991047193027787	WITHOUT_CLASSIFICATION	8.95280697221378E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9996387593085584	WITHOUT_CLASSIFICATION	3.612406914416173E-4	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999755952493946	WITHOUT_CLASSIFICATION	2.440475060547614E-5	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998704950969912	WITHOUT_CLASSIFICATION	1.2950490300874047E-4	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999428442751895	WITHOUT_CLASSIFICATION	5.7155724810406515E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999992110264985	WITHOUT_CLASSIFICATION	7.889735015001576E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999624302704906	WITHOUT_CLASSIFICATION	3.756972950943073E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999987821983937	WITHOUT_CLASSIFICATION	1.217801606288897E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999146910041363	WITHOUT_CLASSIFICATION	8.530899586369562E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9994413337560232	WITHOUT_CLASSIFICATION	5.586662439767976E-4	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999278293954983	WITHOUT_CLASSIFICATION	7.217060450170963E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999878794300822	WITHOUT_CLASSIFICATION	1.2120569917815614E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996978972506106	WITHOUT_CLASSIFICATION	3.02102749389415E-4	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998714381229303	WITHOUT_CLASSIFICATION	1.2856187706969716E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999702793926791	WITHOUT_CLASSIFICATION	2.9720607320912605E-5	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999582520491638	WITHOUT_CLASSIFICATION	4.1747950836237665E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999615744259553	WITHOUT_CLASSIFICATION	3.842557404460202E-5	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999865716985484	WITHOUT_CLASSIFICATION	1.342830145149764E-5	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.999950288254478	WITHOUT_CLASSIFICATION	4.97117455221434E-5	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9969805260244087	WITHOUT_CLASSIFICATION	0.0030194739755912926	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999222976603718	WITHOUT_CLASSIFICATION	7.770233962826866E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999222976603718	WITHOUT_CLASSIFICATION	7.770233962826866E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9994413337560232	WITHOUT_CLASSIFICATION	5.586662439767976E-4	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9992880598820003	WITHOUT_CLASSIFICATION	7.119401179997779E-4	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999652256115178	WITHOUT_CLASSIFICATION	3.4774388482204545E-5	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.998656873015384	WITHOUT_CLASSIFICATION	0.0013431269846159472	TEST
#2	WITHOUT_CLASSIFICATION	0.9998447827243514	WITHOUT_CLASSIFICATION	1.5521727564855303E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999430254090657	WITHOUT_CLASSIFICATION	5.6974590934238195E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999230211277306	WITHOUT_CLASSIFICATION	7.697887226937627E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999244867623026	WITHOUT_CLASSIFICATION	7.551323769741545E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997611565423545	WITHOUT_CLASSIFICATION	2.388434576455886E-4	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999834435112053	WITHOUT_CLASSIFICATION	1.6556488794737797E-5	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998340887178334	WITHOUT_CLASSIFICATION	1.659112821666639E-4	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999882900363649	WITHOUT_CLASSIFICATION	1.1709963634996001E-5	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999945625056356	WITHOUT_CLASSIFICATION	5.4374943644065704E-5	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999079041960652	WITHOUT_CLASSIFICATION	9.20958039348718E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9995674689205343	WITHOUT_CLASSIFICATION	4.3253107946578014E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998917999327548	WITHOUT_CLASSIFICATION	1.0820006724532434E-4	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999512332617472	WITHOUT_CLASSIFICATION	4.876673825283578E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999940776351045	WITHOUT_CLASSIFICATION	5.922364895543565E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999832705097078	WITHOUT_CLASSIFICATION	1.6729490292256547E-5	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9996350327004077	WITHOUT_CLASSIFICATION	3.6496729959233917E-4	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999975453175796	WITHOUT_CLASSIFICATION	2.4546824204040844E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9973222523619247	WITHOUT_CLASSIFICATION	0.0026777476380751637	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999491391117918	WITHOUT_CLASSIFICATION	5.086088820820514E-4	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998418151914023	WITHOUT_CLASSIFICATION	1.5818480859771934E-4	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999020525463617	WITHOUT_CLASSIFICATION	9.794745363838074E-5	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999789552475662	WITHOUT_CLASSIFICATION	2.1044752433710008E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998590339084051	WITHOUT_CLASSIFICATION	1.4096609159484458E-4	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9979392579613986	WITHOUT_CLASSIFICATION	0.0020607420386014193	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999092030284172	WITHOUT_CLASSIFICATION	9.07969715827252E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999924594124705	WITHOUT_CLASSIFICATION	7.540587529497115E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999360044077705	WITHOUT_CLASSIFICATION	6.399559222942521E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998917999327548	WITHOUT_CLASSIFICATION	1.0820006724532434E-4	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999113081193892	WITHOUT_CLASSIFICATION	8.86918806107585E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999539236302217	WITHOUT_CLASSIFICATION	4.6076369778233794E-5	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999462684210869	WITHOUT_CLASSIFICATION	5.373157891308054E-5	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999594859974927	WITHOUT_CLASSIFICATION	4.0514002507336006E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995395242537854	WITHOUT_CLASSIFICATION	4.6047574621458753E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999830354314868	WITHOUT_CLASSIFICATION	1.6964568513169178E-5	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999715869892609	WITHOUT_CLASSIFICATION	2.8413010739040158E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998877380735085	WITHOUT_CLASSIFICATION	1.1226192649159499E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998859879116717	WITHOUT_CLASSIFICATION	1.1401208832820658E-4	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999937177947062	WITHOUT_CLASSIFICATION	6.28220529378998E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.999909735652852	WITHOUT_CLASSIFICATION	9.026434714801674E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998295808017684	WITHOUT_CLASSIFICATION	1.7041919823152012E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999255843442874	WITHOUT_CLASSIFICATION	7.441565571263803E-5	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9996749810913098	WITHOUT_CLASSIFICATION	3.250189086901438E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9996076011703007	WITHOUT_CLASSIFICATION	3.9239882969932977E-4	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999733036651586	WITHOUT_CLASSIFICATION	2.6696334841513562E-5	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9994893923142234	WITHOUT_CLASSIFICATION	5.106076857765362E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999809506012087	WITHOUT_CLASSIFICATION	1.9049398791179312E-5	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998959533145677	WITHOUT_CLASSIFICATION	1.0404668543235364E-4	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998445658440817	WITHOUT_CLASSIFICATION	1.5543415591844813E-4	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999108997367483	WITHOUT_CLASSIFICATION	8.910026325175927E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999036766200599	WITHOUT_CLASSIFICATION	9.63233799401908E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998917999327548	WITHOUT_CLASSIFICATION	1.0820006724532434E-4	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999648463121461	WITHOUT_CLASSIFICATION	3.5153687853909926E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998685287157167	WITHOUT_CLASSIFICATION	1.314712842832648E-4	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999446200076364	WITHOUT_CLASSIFICATION	5.537999236363696E-5	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999446200076364	WITHOUT_CLASSIFICATION	5.537999236363696E-5	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999868183244034	WITHOUT_CLASSIFICATION	1.3181675596607922E-4	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999843969817608	WITHOUT_CLASSIFICATION	1.560301823929913E-5	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996579771580794	WITHOUT_CLASSIFICATION	3.4202284192064267E-4	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9997349679776608	WITHOUT_CLASSIFICATION	2.650320223391119E-4	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9996971605530984	WITHOUT_CLASSIFICATION	3.028394469015518E-4	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999936816982747	WITHOUT_CLASSIFICATION	6.318301725242602E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997713626634785	WITHOUT_CLASSIFICATION	2.286373365213477E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999856328202172	WITHOUT_CLASSIFICATION	1.4367179782682792E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998959317521713	WITHOUT_CLASSIFICATION	1.0406824782875025E-4	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998959317521713	WITHOUT_CLASSIFICATION	1.0406824782875025E-4	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998383563338182	WITHOUT_CLASSIFICATION	1.6164366618178638E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9977942964602791	WITHOUT_CLASSIFICATION	0.0022057035397210233	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998330475620214	WITHOUT_CLASSIFICATION	1.6695243797854414E-4	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9988762162089556	WITHOUT_CLASSIFICATION	0.001123783791044337	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999633385593701	WITHOUT_CLASSIFICATION	3.666144062995519E-5	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999812625106417	WITHOUT_CLASSIFICATION	1.873748935840301E-5	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999981772674428	WITHOUT_CLASSIFICATION	1.8227325571928842E-5	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998529191943079	WITHOUT_CLASSIFICATION	1.470808056920177E-4	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9998748135688863	WITHOUT_CLASSIFICATION	1.2518643111365183E-4	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999604785561126	WITHOUT_CLASSIFICATION	3.9521443887394476E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999604785561126	WITHOUT_CLASSIFICATION	3.9521443887394476E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999886560698596	WITHOUT_CLASSIFICATION	1.1343930140389544E-4	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990098211252	WITHOUT_CLASSIFICATION	9.901788748007526E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998005556685662	WITHOUT_CLASSIFICATION	1.9944433143383972E-4	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999605044176364	WITHOUT_CLASSIFICATION	3.949558236361402E-5	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9998700564391074	WITHOUT_CLASSIFICATION	1.299435608926087E-4	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9991525971136267	WITHOUT_CLASSIFICATION	8.47402886373346E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999856717401127	WITHOUT_CLASSIFICATION	1.4328259887364803E-5	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999628229058408	WITHOUT_CLASSIFICATION	3.7177094159140676E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998505038191424	WITHOUT_CLASSIFICATION	1.494961808575619E-4	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999527781927944	WITHOUT_CLASSIFICATION	4.722180720557455E-5	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999971326528874	WITHOUT_CLASSIFICATION	2.8673471126031726E-5	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998592043009904	WITHOUT_CLASSIFICATION	1.4079569900953296E-4	TEST
implied	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999368397049104	WITHOUT_CLASSIFICATION	6.316029508954171E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998573297677152	WITHOUT_CLASSIFICATION	1.4267023228485467E-4	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998535717163389	WITHOUT_CLASSIFICATION	1.4642828366106462E-4	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999908033949345	WITHOUT_CLASSIFICATION	9.196605065492351E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999516715970547	WITHOUT_CLASSIFICATION	4.832840294538529E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999574746775093	WITHOUT_CLASSIFICATION	4.252532249072835E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999716255563872	WITHOUT_CLASSIFICATION	2.837444361288951E-5	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9998932797126066	WITHOUT_CLASSIFICATION	1.0672028739349414E-4	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999866705874652	WITHOUT_CLASSIFICATION	1.3329412534702144E-5	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999954136268393	WITHOUT_CLASSIFICATION	4.586373160741881E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999227697435026	WITHOUT_CLASSIFICATION	7.723025649737948E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999567999633527	WITHOUT_CLASSIFICATION	4.3200036647246754E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999759660194946	WITHOUT_CLASSIFICATION	2.4033980505461347E-5	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999680351954112	WITHOUT_CLASSIFICATION	3.196480458876053E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999326268066869	WITHOUT_CLASSIFICATION	6.737319331307633E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984173065234	WITHOUT_CLASSIFICATION	1.01582693476655E-4	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999708321085193	WITHOUT_CLASSIFICATION	2.9167891480607942E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998894930509102	WITHOUT_CLASSIFICATION	1.1050694908979768E-4	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998869990399768	WITHOUT_CLASSIFICATION	1.1300096002319299E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9917095236085441	WITHOUT_CLASSIFICATION	0.008290476391455961	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999723098126796	WITHOUT_CLASSIFICATION	2.7690187320385163E-5	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9996007349573467	WITHOUT_CLASSIFICATION	3.992650426532719E-4	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999936607518811	WITHOUT_CLASSIFICATION	6.339248118903734E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998838728332256	WITHOUT_CLASSIFICATION	1.1612716677450878E-4	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999987101661893	WITHOUT_CLASSIFICATION	1.2898338107063398E-5	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998366681758565	WITHOUT_CLASSIFICATION	1.6333182414346215E-4	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999419487032032	WITHOUT_CLASSIFICATION	5.805129679683382E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999769236373867	WITHOUT_CLASSIFICATION	2.307636261335324E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999061557622615	WITHOUT_CLASSIFICATION	9.384423773857934E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9994763032403318	WITHOUT_CLASSIFICATION	5.236967596682311E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999034458407646	WITHOUT_CLASSIFICATION	9.65541592354008E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999030534023203	WITHOUT_CLASSIFICATION	9.694659767972189E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999620688450992	WITHOUT_CLASSIFICATION	3.7931154900897976E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9995830908784591	WITHOUT_CLASSIFICATION	4.1690912154094623E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999702623014918	WITHOUT_CLASSIFICATION	2.9737698508126228E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999640802498058	WITHOUT_CLASSIFICATION	3.59197501941965E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999710849051209	WITHOUT_CLASSIFICATION	2.8915094879127565E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999847952274901	WITHOUT_CLASSIFICATION	1.520477250980444E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999891811366106	WITHOUT_CLASSIFICATION	1.0818863389305346E-5	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999830202553339	WITHOUT_CLASSIFICATION	1.6979744666009867E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999620171206626	WITHOUT_CLASSIFICATION	3.798287933747429E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998701287179761	WITHOUT_CLASSIFICATION	1.298712820239548E-4	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997795718812976	WITHOUT_CLASSIFICATION	2.2042811870225603E-4	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998701287179761	WITHOUT_CLASSIFICATION	1.298712820239548E-4	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999854176662164	WITHOUT_CLASSIFICATION	1.4582333783470566E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999902907494984	WITHOUT_CLASSIFICATION	9.709250501509626E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999638442222011	WITHOUT_CLASSIFICATION	3.615577779892122E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999639516608289	WITHOUT_CLASSIFICATION	3.6048339171158435E-5	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999949004913316	WITHOUT_CLASSIFICATION	5.099508668396872E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999638442222011	WITHOUT_CLASSIFICATION	3.615577779892122E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999972467893883	WITHOUT_CLASSIFICATION	2.753210611703627E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9978979427846624	WITHOUT_CLASSIFICATION	0.0021020572153376163	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999081059564122	WITHOUT_CLASSIFICATION	9.189404358779532E-5	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999598817650341	WITHOUT_CLASSIFICATION	4.011823496578182E-5	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999627214481314	WITHOUT_CLASSIFICATION	3.727855186853391E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999622241849385	WITHOUT_CLASSIFICATION	3.7775815061414665E-5	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999882489868938	WITHOUT_CLASSIFICATION	1.1751013106224883E-5	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9995198900966552	WITHOUT_CLASSIFICATION	4.80109903344765E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999672759118878	WITHOUT_CLASSIFICATION	3.272408811213757E-5	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999984412921471	WITHOUT_CLASSIFICATION	1.5587078529050153E-5	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9998622127302432	WITHOUT_CLASSIFICATION	1.3778726975673702E-4	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999883937231615	WITHOUT_CLASSIFICATION	1.160627683863824E-5	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999954447761706	WITHOUT_CLASSIFICATION	4.555223829372276E-6	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9989773521410792	WITHOUT_CLASSIFICATION	0.0010226478589208676	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999980024763225	WITHOUT_CLASSIFICATION	1.9975236774877006E-6	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998593059312803	WITHOUT_CLASSIFICATION	1.406940687197532E-4	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9921760874931119	WITHOUT_CLASSIFICATION	0.007823912506888157	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997665353461764	WITHOUT_CLASSIFICATION	2.3346465382348365E-4	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998592248937714	WITHOUT_CLASSIFICATION	1.407751062284988E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993301217989703	WITHOUT_CLASSIFICATION	6.698782010296708E-4	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999578539761359	WITHOUT_CLASSIFICATION	4.214602386401265E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999378516085997	WITHOUT_CLASSIFICATION	6.214839140020908E-5	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998218716239098	WITHOUT_CLASSIFICATION	1.7812837609020564E-4	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9998964171222823	WITHOUT_CLASSIFICATION	1.035828777176743E-4	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999049454274314	WITHOUT_CLASSIFICATION	9.505457256871347E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999988864036552	WITHOUT_CLASSIFICATION	1.113596344822077E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999705673304164	WITHOUT_CLASSIFICATION	2.9432669583538672E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999114295567874	WITHOUT_CLASSIFICATION	8.857044321264545E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999781468446672	WITHOUT_CLASSIFICATION	2.185315533274425E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999317515297564	WITHOUT_CLASSIFICATION	6.824847024353305E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9998763032851746	WITHOUT_CLASSIFICATION	1.2369671482548007E-4	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999559996825212	WITHOUT_CLASSIFICATION	4.40003174787044E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9972006095416356	WITHOUT_CLASSIFICATION	0.0027993904583644745	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993301217989703	WITHOUT_CLASSIFICATION	6.698782010296708E-4	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999677749078193	WITHOUT_CLASSIFICATION	3.222509218073801E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998758585621387	WITHOUT_CLASSIFICATION	1.2414143786132698E-4	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992771804479111	WITHOUT_CLASSIFICATION	7.228195520888065E-4	TEST
special case	WITHOUT_CLASSIFICATION	0.9999415628094874	WITHOUT_CLASSIFICATION	5.843719051246927E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999755270502519	WITHOUT_CLASSIFICATION	2.4472949748034008E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999723401476629	WITHOUT_CLASSIFICATION	2.765985233713363E-5	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998461894541856	WITHOUT_CLASSIFICATION	1.5381054581446136E-4	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998588880148894	WITHOUT_CLASSIFICATION	1.411119851106885E-4	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9995127288185089	WITHOUT_CLASSIFICATION	4.8727118149100354E-4	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999487997039433	WITHOUT_CLASSIFICATION	5.120029605671676E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9997842748700206	WITHOUT_CLASSIFICATION	2.1572512997935454E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999769045404246	WITHOUT_CLASSIFICATION	2.3095459575336894E-5	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999572242013137	WITHOUT_CLASSIFICATION	4.277579868625795E-5	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999149188853401	WITHOUT_CLASSIFICATION	8.508111465979181E-5	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999806956970466	WITHOUT_CLASSIFICATION	1.9304302953371354E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999648259870316	WITHOUT_CLASSIFICATION	3.5174012968347044E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9990952338000798	WITHOUT_CLASSIFICATION	9.047661999202493E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9995776486898655	WITHOUT_CLASSIFICATION	4.223513101344576E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997410022192888	WITHOUT_CLASSIFICATION	0.0025899778071120003	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997616315678076	WITHOUT_CLASSIFICATION	2.383684321924257E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.999549585821983	WITHOUT_CLASSIFICATION	4.504141780169868E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.999549585821983	WITHOUT_CLASSIFICATION	4.504141780169868E-4	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999900063716598	WITHOUT_CLASSIFICATION	9.993628340309155E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.999549585821983	WITHOUT_CLASSIFICATION	4.504141780169868E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.999549585821983	WITHOUT_CLASSIFICATION	4.504141780169868E-4	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999550289632466	WITHOUT_CLASSIFICATION	4.4971036753332643E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9989609497073718	WITHOUT_CLASSIFICATION	0.0010390502926281918	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999650965898182	WITHOUT_CLASSIFICATION	3.490341018180598E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999084974617403	WITHOUT_CLASSIFICATION	9.150253825975776E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999163322237826	WITHOUT_CLASSIFICATION	8.366777621730885E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997064903292361	WITHOUT_CLASSIFICATION	2.9350967076392125E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999259351546065	WITHOUT_CLASSIFICATION	7.406484539348724E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9993863169276018	WITHOUT_CLASSIFICATION	6.136830723981135E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999553004231357	WITHOUT_CLASSIFICATION	4.4699576864302634E-4	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999512756922199	WITHOUT_CLASSIFICATION	4.872430778017841E-5	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999820735398132	WITHOUT_CLASSIFICATION	1.7926460186802783E-4	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9996206726049758	WITHOUT_CLASSIFICATION	3.79327395024168E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999313166833715	WITHOUT_CLASSIFICATION	6.868331662845304E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9994150334842947	WITHOUT_CLASSIFICATION	5.849665157052915E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997779105340028	WITHOUT_CLASSIFICATION	2.2208946599731175E-4	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999950860157492	WITHOUT_CLASSIFICATION	4.913984250795857E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997982056777979	WITHOUT_CLASSIFICATION	2.0179432220211916E-4	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9996158275212854	WITHOUT_CLASSIFICATION	3.841724787146036E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999958972935987	WITHOUT_CLASSIFICATION	4.102706401238827E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9998192743152412	WITHOUT_CLASSIFICATION	1.8072568475887188E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997779105340028	WITHOUT_CLASSIFICATION	2.2208946599731175E-4	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999578539761359	WITHOUT_CLASSIFICATION	4.214602386401265E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999021832957092	WITHOUT_CLASSIFICATION	9.78167042907598E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999278947233259	WITHOUT_CLASSIFICATION	7.210527667403872E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999196480551876	WITHOUT_CLASSIFICATION	8.035194481242547E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999235662751647	WITHOUT_CLASSIFICATION	7.643372483530864E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999962390298714	WITHOUT_CLASSIFICATION	3.760970128604173E-5	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9993959433155509	WITHOUT_CLASSIFICATION	6.040566844490425E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999036738657847	WITHOUT_CLASSIFICATION	9.632613421526152E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999752600154814	WITHOUT_CLASSIFICATION	2.4739984518589542E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999381497902771	WITHOUT_CLASSIFICATION	6.185020972300421E-5	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9998994899533956	WITHOUT_CLASSIFICATION	1.0051004660440181E-4	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.99977682185319	WITHOUT_CLASSIFICATION	2.231781468100117E-4	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999789104038678	WITHOUT_CLASSIFICATION	2.1089596132201526E-5	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999568587024114	WITHOUT_CLASSIFICATION	4.314129758861438E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9992504313943404	WITHOUT_CLASSIFICATION	7.495686056595978E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999052495839386	WITHOUT_CLASSIFICATION	9.475041606139646E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999407254557935	WITHOUT_CLASSIFICATION	5.927454420651521E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999484696098306	WITHOUT_CLASSIFICATION	5.153039016933006E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998741499847845	WITHOUT_CLASSIFICATION	1.258500152155132E-4	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995609355272447	WITHOUT_CLASSIFICATION	4.390644727553723E-4	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999355645595506	WITHOUT_CLASSIFICATION	6.443544044937375E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999590573314776	WITHOUT_CLASSIFICATION	4.094266852240281E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999995002845438	WITHOUT_CLASSIFICATION	4.9971545630638E-7	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999752600154814	WITHOUT_CLASSIFICATION	2.4739984518589542E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999104001413304	WITHOUT_CLASSIFICATION	8.959985866956642E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9998074568279698	WITHOUT_CLASSIFICATION	1.9254317203017886E-4	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999522548718888	WITHOUT_CLASSIFICATION	4.774512811111611E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999104699446686	WITHOUT_CLASSIFICATION	8.953005533137692E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
hilo params	WITHOUT_CLASSIFICATION	0.999887626503244	WITHOUT_CLASSIFICATION	1.1237349675602618E-4	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999455373202913	WITHOUT_CLASSIFICATION	5.446267970873239E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9998880339247491	WITHOUT_CLASSIFICATION	1.1196607525080538E-4	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999455373202913	WITHOUT_CLASSIFICATION	5.446267970873239E-5	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9998874483579672	WITHOUT_CLASSIFICATION	1.1255164203282228E-4	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998599022099016	WITHOUT_CLASSIFICATION	1.4009779009836097E-4	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999809332206393	WITHOUT_CLASSIFICATION	1.906677936062978E-5	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999952498470079	WITHOUT_CLASSIFICATION	4.7501529920918213E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9997290144259796	WITHOUT_CLASSIFICATION	2.7098557402036174E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999257978702709	WITHOUT_CLASSIFICATION	7.42021297290813E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998212497820397	WITHOUT_CLASSIFICATION	1.787502179602707E-4	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998599022099016	WITHOUT_CLASSIFICATION	1.4009779009836097E-4	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998321008307897	WITHOUT_CLASSIFICATION	1.678991692102737E-4	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997771909027553	WITHOUT_CLASSIFICATION	2.228090972448244E-4	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998569586795482	WITHOUT_CLASSIFICATION	1.4304132045179325E-4	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999753249648354	WITHOUT_CLASSIFICATION	2.4675035164595965E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9996077332568403	WITHOUT_CLASSIFICATION	3.922667431597139E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999388413522777	WITHOUT_CLASSIFICATION	6.115864772229853E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998844644573254	WITHOUT_CLASSIFICATION	1.1553554267462874E-4	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998691103306065	WITHOUT_CLASSIFICATION	1.3088966939339344E-4	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960776421982	WITHOUT_CLASSIFICATION	1.0392235780167087E-4	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960776421982	WITHOUT_CLASSIFICATION	1.0392235780167087E-4	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960776421982	WITHOUT_CLASSIFICATION	1.0392235780167087E-4	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999953946360056	WITHOUT_CLASSIFICATION	4.605363994348695E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999953946360056	WITHOUT_CLASSIFICATION	4.605363994348695E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999075322310569	WITHOUT_CLASSIFICATION	9.246776894312356E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999850477415971	WITHOUT_CLASSIFICATION	1.4952258402807402E-5	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9998876585054088	WITHOUT_CLASSIFICATION	1.1234149459112573E-4	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.999894285311071	WITHOUT_CLASSIFICATION	1.0571468892893789E-4	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9995397253046725	WITHOUT_CLASSIFICATION	4.602746953275986E-4	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998568417531003	WITHOUT_CLASSIFICATION	1.4315824689962496E-4	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999866377497622	WITHOUT_CLASSIFICATION	1.3362250237811856E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9998989197137539	WITHOUT_CLASSIFICATION	1.0108028624621742E-4	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998811645719238	WITHOUT_CLASSIFICATION	1.1883542807625813E-4	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998568417531003	WITHOUT_CLASSIFICATION	1.4315824689962496E-4	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999866377497622	WITHOUT_CLASSIFICATION	1.3362250237811856E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Caches	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998961906241638	WITHOUT_CLASSIFICATION	1.0380937583620194E-4	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999659070218565	WITHOUT_CLASSIFICATION	3.4092978143479826E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999784515942193	WITHOUT_CLASSIFICATION	2.154840578074431E-5	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999244022930038	WITHOUT_CLASSIFICATION	7.559770699610928E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999570688148477	WITHOUT_CLASSIFICATION	4.293118515235067E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999179038196667	WITHOUT_CLASSIFICATION	8.20961803333116E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9998449239532226	WITHOUT_CLASSIFICATION	1.5507604677732507E-4	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999459636275161	WITHOUT_CLASSIFICATION	5.4036372484004235E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995237783756526	WITHOUT_CLASSIFICATION	4.762216243473216E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998106824989336	WITHOUT_CLASSIFICATION	1.893175010663721E-4	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999034904417945	WITHOUT_CLASSIFICATION	9.650955820556109E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999634284465058	WITHOUT_CLASSIFICATION	3.6571553494187345E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998691796464791	WITHOUT_CLASSIFICATION	1.3082035352088113E-4	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.971573736455228	WITHOUT_CLASSIFICATION	0.02842626354477204	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998922862459804	WITHOUT_CLASSIFICATION	1.0771375401954333E-4	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999117421727177	WITHOUT_CLASSIFICATION	8.825782728225747E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.999773721242282	WITHOUT_CLASSIFICATION	2.2627875771792817E-4	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999876773633299	WITHOUT_CLASSIFICATION	1.2322636670166272E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998107839921324	WITHOUT_CLASSIFICATION	1.8921600786764385E-4	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999488820099725	WITHOUT_CLASSIFICATION	5.1117990027520826E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.99998539255233	WITHOUT_CLASSIFICATION	1.460744766989813E-5	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999814344559785	WITHOUT_CLASSIFICATION	1.8565544021555434E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998360148095766	WITHOUT_CLASSIFICATION	1.6398519042332558E-4	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999272026881154	WITHOUT_CLASSIFICATION	7.27973118845541E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998567321360926	WITHOUT_CLASSIFICATION	1.4326786390729876E-4	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997736547642329	WITHOUT_CLASSIFICATION	2.263452357670532E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998624591133232	WITHOUT_CLASSIFICATION	1.3754088667678192E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998624591133232	WITHOUT_CLASSIFICATION	1.3754088667678192E-4	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996387809494881	WITHOUT_CLASSIFICATION	3.6121905051191277E-4	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999662632058322	WITHOUT_CLASSIFICATION	3.3736794167914784E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9994826435158748	WITHOUT_CLASSIFICATION	5.173564841253037E-4	TEST
/	WITHOUT_CLASSIFICATION	0.9998603443358546	WITHOUT_CLASSIFICATION	1.3965566414532495E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999637459786266	WITHOUT_CLASSIFICATION	3.6254021373446275E-5	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999376939180584	WITHOUT_CLASSIFICATION	6.230608194162704E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9997258037600144	WITHOUT_CLASSIFICATION	2.741962399855835E-4	TEST
just ignore	WITHOUT_CLASSIFICATION	0.999952203401057	WITHOUT_CLASSIFICATION	4.7796598942975844E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999297639925829	WITHOUT_CLASSIFICATION	7.02360074169916E-5	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9995483924954383	WITHOUT_CLASSIFICATION	4.516075045617259E-4	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9989846892020559	WITHOUT_CLASSIFICATION	0.0010153107979440701	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994536949147713	WITHOUT_CLASSIFICATION	5.463050852286287E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999912761194237	WITHOUT_CLASSIFICATION	8.723880576258394E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999157175897153	WITHOUT_CLASSIFICATION	8.428241028478908E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9997650668454798	WITHOUT_CLASSIFICATION	2.3493315452015245E-4	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9997404466607517	WITHOUT_CLASSIFICATION	2.595533392483098E-4	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999859262362271	WITHOUT_CLASSIFICATION	1.4073763772886866E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994536949147713	WITHOUT_CLASSIFICATION	5.463050852286287E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994536949147713	WITHOUT_CLASSIFICATION	5.463050852286287E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999306971447294	WITHOUT_CLASSIFICATION	6.930285527060629E-4	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999437109720293	WITHOUT_CLASSIFICATION	5.628902797068966E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9834767901358339	WITHOUT_CLASSIFICATION	0.016523209864166107	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999605444951001	WITHOUT_CLASSIFICATION	3.945550489981673E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9998746331236579	WITHOUT_CLASSIFICATION	1.2536687634207255E-4	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.999773721242282	WITHOUT_CLASSIFICATION	2.2627875771792817E-4	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9983537379197001	WITHOUT_CLASSIFICATION	0.001646262080299996	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999750563158655	WITHOUT_CLASSIFICATION	2.4943684134628175E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999552642508851	WITHOUT_CLASSIFICATION	4.473574911482193E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998021129435982	WITHOUT_CLASSIFICATION	1.9788705640189062E-4	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999465674870646	WITHOUT_CLASSIFICATION	5.343251293536943E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998887334340036	WITHOUT_CLASSIFICATION	1.1126656599633585E-4	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999588732447469	WITHOUT_CLASSIFICATION	4.1126755253209425E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999588732447469	WITHOUT_CLASSIFICATION	4.1126755253209425E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999588732447469	WITHOUT_CLASSIFICATION	4.1126755253209425E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999588732447469	WITHOUT_CLASSIFICATION	4.1126755253209425E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999859247155162	WITHOUT_CLASSIFICATION	1.4075284483808486E-4	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9993238161513951	WITHOUT_CLASSIFICATION	6.76183848604908E-4	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9993689499119495	WITHOUT_CLASSIFICATION	6.310500880505356E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9996959268852059	WITHOUT_CLASSIFICATION	3.0407311479408437E-4	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998568488635291	WITHOUT_CLASSIFICATION	1.4315113647097208E-4	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998628154149357	WITHOUT_CLASSIFICATION	1.3718458506434473E-4	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998784620676157	WITHOUT_CLASSIFICATION	1.2153793238440926E-4	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999120784812182	WITHOUT_CLASSIFICATION	8.792151878181553E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998605338393954	WITHOUT_CLASSIFICATION	1.3946616060455449E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998745247106186	WITHOUT_CLASSIFICATION	1.254752893814589E-4	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999774009632281	WITHOUT_CLASSIFICATION	2.2599036771954895E-5	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999903880443713	WITHOUT_CLASSIFICATION	9.611955628691068E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999108468693849	WITHOUT_CLASSIFICATION	8.915313061502806E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999108468693849	WITHOUT_CLASSIFICATION	8.915313061502806E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999108468693849	WITHOUT_CLASSIFICATION	8.915313061502806E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999806839335721	WITHOUT_CLASSIFICATION	1.93160664278609E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.999960434548599	WITHOUT_CLASSIFICATION	3.9565451400969865E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999616881010367	WITHOUT_CLASSIFICATION	3.8311898963305495E-5	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999583400170909	WITHOUT_CLASSIFICATION	4.165998290906864E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960776421982	WITHOUT_CLASSIFICATION	1.0392235780167087E-4	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999741020695473	WITHOUT_CLASSIFICATION	2.5897930452783956E-5	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999783401896464	WITHOUT_CLASSIFICATION	2.1659810353641937E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997907176808986	WITHOUT_CLASSIFICATION	2.0928231910137372E-4	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998571306028708	WITHOUT_CLASSIFICATION	1.4286939712917224E-4	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999775416662497	WITHOUT_CLASSIFICATION	2.245833375033647E-5	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999702693301813	WITHOUT_CLASSIFICATION	2.9730669818668116E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9997099300810003	WITHOUT_CLASSIFICATION	2.900699189996381E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997027797309539	WITHOUT_CLASSIFICATION	2.972202690460218E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998523440175786	WITHOUT_CLASSIFICATION	1.476559824213978E-4	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998179024426167	WITHOUT_CLASSIFICATION	1.8209755738340887E-4	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999663356836715	WITHOUT_CLASSIFICATION	3.3664316328405915E-5	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999265280487527	WITHOUT_CLASSIFICATION	7.34719512472785E-5	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9996946374297749	WITHOUT_CLASSIFICATION	3.0536257022512433E-4	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999776837901223	WITHOUT_CLASSIFICATION	2.231620987767333E-5	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998962768931511	WITHOUT_CLASSIFICATION	1.0372310684895912E-4	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999656392455188	WITHOUT_CLASSIFICATION	3.4360754481125873E-5	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9997416328323288	WITHOUT_CLASSIFICATION	2.583671676711965E-4	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999808946043629	WITHOUT_CLASSIFICATION	1.9105395637144324E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999526562378497	WITHOUT_CLASSIFICATION	4.7343762150198174E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9996138676783852	WITHOUT_CLASSIFICATION	3.8613232161486627E-4	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999524592791711	WITHOUT_CLASSIFICATION	4.7540720828935206E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999974188335128	WITHOUT_CLASSIFICATION	2.5811664871525117E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997354723566816	WITHOUT_CLASSIFICATION	2.6452764331839413E-4	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999229016764942	WITHOUT_CLASSIFICATION	7.709832350574701E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999610920805999	WITHOUT_CLASSIFICATION	3.890791940002359E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999646951423715	WITHOUT_CLASSIFICATION	3.5304857628510846E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999929721353249	WITHOUT_CLASSIFICATION	7.02786467508451E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.999967380224345	WITHOUT_CLASSIFICATION	3.261977565511791E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998984123894255	WITHOUT_CLASSIFICATION	1.0158761057455344E-4	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.999972322992681	WITHOUT_CLASSIFICATION	2.7677007318974365E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9998870245923361	WITHOUT_CLASSIFICATION	1.1297540766391479E-4	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999896500600685	WITHOUT_CLASSIFICATION	1.0349939931496067E-4	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9990953363539502	WITHOUT_CLASSIFICATION	9.046636460497108E-4	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998289979275922	WITHOUT_CLASSIFICATION	1.7100207240777608E-4	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999808183875432	WITHOUT_CLASSIFICATION	1.9181612456808354E-5	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997466946366387	WITHOUT_CLASSIFICATION	2.5330536336137945E-4	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.999984241251794	WITHOUT_CLASSIFICATION	1.575874820606173E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9998208462105471	WITHOUT_CLASSIFICATION	1.7915378945275966E-4	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998917974615684	WITHOUT_CLASSIFICATION	1.082025384315904E-4	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998295306106789	WITHOUT_CLASSIFICATION	1.7046938932111132E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999844376592583	WITHOUT_CLASSIFICATION	1.556234074174915E-5	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9991187845767311	WITHOUT_CLASSIFICATION	8.812154232688858E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998554963633864	WITHOUT_CLASSIFICATION	1.4450363661351368E-4	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992367476884216	WITHOUT_CLASSIFICATION	7.632523115782291E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999333403493471	WITHOUT_CLASSIFICATION	6.665965065293291E-5	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9998861095957984	WITHOUT_CLASSIFICATION	1.1389040420159957E-4	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998251308588896	WITHOUT_CLASSIFICATION	1.748691411104155E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999923742913265	WITHOUT_CLASSIFICATION	7.625708673567103E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999519514237906	WITHOUT_CLASSIFICATION	4.804857620935081E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996372212673312	WITHOUT_CLASSIFICATION	3.627787326687028E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999889136198759	WITHOUT_CLASSIFICATION	1.1086380124213619E-5	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999783684725195	WITHOUT_CLASSIFICATION	2.1631527480471696E-5	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999391069609975	WITHOUT_CLASSIFICATION	6.089303900241152E-5	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999487383059463	WITHOUT_CLASSIFICATION	5.1261694053693345E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999890104744026	WITHOUT_CLASSIFICATION	1.0989525597412309E-4	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9997557411269539	WITHOUT_CLASSIFICATION	2.4425887304617254E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999987438415314	WITHOUT_CLASSIFICATION	1.2561584686176154E-6	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999859645015489	WITHOUT_CLASSIFICATION	1.4035498451107502E-4	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9963005509651834	WITHOUT_CLASSIFICATION	0.0036994490348164974	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999496777312805	WITHOUT_CLASSIFICATION	5.032226871944631E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999185335859797	WITHOUT_CLASSIFICATION	8.146641402029755E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999824376799433	WITHOUT_CLASSIFICATION	1.756232005662465E-5	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998704078199545	WITHOUT_CLASSIFICATION	1.2959218004554096E-4	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999598143423833	WITHOUT_CLASSIFICATION	4.018565761661343E-5	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999957127346465	WITHOUT_CLASSIFICATION	4.287265353503278E-5	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999759671030981	WITHOUT_CLASSIFICATION	2.40328969019011E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9998748687913025	WITHOUT_CLASSIFICATION	1.2513120869756265E-4	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999991016045094	WITHOUT_CLASSIFICATION	8.983954906008163E-6	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999606555806159	WITHOUT_CLASSIFICATION	3.934441938415017E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999419991957827	WITHOUT_CLASSIFICATION	5.800080421718275E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999934889093988	WITHOUT_CLASSIFICATION	6.511090601259926E-6	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999444002869445	WITHOUT_CLASSIFICATION	5.559971305551156E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9991479431096126	WITHOUT_CLASSIFICATION	8.520568903874441E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998583213074315	WITHOUT_CLASSIFICATION	1.416786925685812E-4	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9992098141646081	WITHOUT_CLASSIFICATION	7.901858353919752E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9973110979781745	WITHOUT_CLASSIFICATION	0.0026889020218254485	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9998547995125584	WITHOUT_CLASSIFICATION	1.4520048744164405E-4	TEST
we found it	WITHOUT_CLASSIFICATION	0.9994184826657685	WITHOUT_CLASSIFICATION	5.815173342315105E-4	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999212004845631	WITHOUT_CLASSIFICATION	7.879951543688903E-5	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998730943490649	WITHOUT_CLASSIFICATION	1.2690565093499158E-4	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9986902784180975	WITHOUT_CLASSIFICATION	0.0013097215819024254	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999460671789082	WITHOUT_CLASSIFICATION	5.3932821091746554E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.999960198891022	WITHOUT_CLASSIFICATION	3.9801108978099914E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999392649558272	WITHOUT_CLASSIFICATION	6.073504417291137E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999989743480141	WITHOUT_CLASSIFICATION	1.0256519858971724E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997531474447644	WITHOUT_CLASSIFICATION	2.4685255523556547E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998555134702062	WITHOUT_CLASSIFICATION	1.444865297938401E-4	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998907295601478	WITHOUT_CLASSIFICATION	1.0927043985233075E-4	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.999977224975695	WITHOUT_CLASSIFICATION	2.277502430497987E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.999930540850408	WITHOUT_CLASSIFICATION	6.945914959207953E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998851951698415	WITHOUT_CLASSIFICATION	1.1480483015846826E-4	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998851951698415	WITHOUT_CLASSIFICATION	1.1480483015846826E-4	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997970953989832	WITHOUT_CLASSIFICATION	2.0290460101680166E-4	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9998368280440844	WITHOUT_CLASSIFICATION	1.6317195591568172E-4	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999502258028558	WITHOUT_CLASSIFICATION	4.9774197144162894E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998537525375796	WITHOUT_CLASSIFICATION	1.4624746242038926E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998954995266495	WITHOUT_CLASSIFICATION	1.0450047335061015E-4	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.997712027863841	WITHOUT_CLASSIFICATION	0.002287972136159096	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9988037119916288	WITHOUT_CLASSIFICATION	0.0011962880083712932	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9990635044711978	WITHOUT_CLASSIFICATION	9.364955288022631E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999866201773679	WITHOUT_CLASSIFICATION	1.337982263209869E-4	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9921940086826294	WITHOUT_CLASSIFICATION	0.007805991317370564	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999383381061309	WITHOUT_CLASSIFICATION	6.166189386916093E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998922286042207	WITHOUT_CLASSIFICATION	1.0777139577929665E-4	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999248271387932	WITHOUT_CLASSIFICATION	7.517286120679977E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999407565499903	WITHOUT_CLASSIFICATION	5.92434500096913E-5	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999521424102219	WITHOUT_CLASSIFICATION	4.7857589778144114E-5	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9993340842419641	WITHOUT_CLASSIFICATION	6.65915758035983E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995408545622178	WITHOUT_CLASSIFICATION	4.591454377822173E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995408545622178	WITHOUT_CLASSIFICATION	4.591454377822173E-4	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999681423731517	WITHOUT_CLASSIFICATION	3.1857626848279464E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9993756609241247	WITHOUT_CLASSIFICATION	6.24339075875257E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999919237354651	WITHOUT_CLASSIFICATION	8.076264534900415E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999043840893446	WITHOUT_CLASSIFICATION	9.561591065538156E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998938816452133	WITHOUT_CLASSIFICATION	1.061183547867018E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999067969651855	WITHOUT_CLASSIFICATION	9.320303481454011E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998938816452133	WITHOUT_CLASSIFICATION	1.061183547867018E-4	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999771814210098	WITHOUT_CLASSIFICATION	2.2818578990265807E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998917833905049	WITHOUT_CLASSIFICATION	1.0821660949519818E-4	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999621730611511	WITHOUT_CLASSIFICATION	3.7826938848914606E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999621730611511	WITHOUT_CLASSIFICATION	3.7826938848914606E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999007585496519	WITHOUT_CLASSIFICATION	9.924145034814442E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999738131638058	WITHOUT_CLASSIFICATION	2.6186836194137193E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.99943618221658	WITHOUT_CLASSIFICATION	5.638177834199895E-4	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999874971920336	WITHOUT_CLASSIFICATION	1.2502807966405762E-5	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9997410284118122	WITHOUT_CLASSIFICATION	2.589715881878015E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999795538953512	WITHOUT_CLASSIFICATION	2.0446104648787337E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999305395729989	WITHOUT_CLASSIFICATION	6.946042700105453E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999637909048052	WITHOUT_CLASSIFICATION	3.620909519472487E-5	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9990002951622426	WITHOUT_CLASSIFICATION	9.99704837757358E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999500999663155	WITHOUT_CLASSIFICATION	4.990003368456924E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999269890568758	WITHOUT_CLASSIFICATION	7.30109431242056E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9566601300107787	WITHOUT_CLASSIFICATION	0.043339869989221305	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999968369825841	WITHOUT_CLASSIFICATION	3.163017415899009E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999516715970547	WITHOUT_CLASSIFICATION	4.832840294538529E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999595539762958	WITHOUT_CLASSIFICATION	4.044602370425605E-5	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999137961856351	WITHOUT_CLASSIFICATION	8.620381436475575E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9995205294944853	WITHOUT_CLASSIFICATION	4.794705055146038E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999638313060428	WITHOUT_CLASSIFICATION	3.616869395719578E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999500840559828	WITHOUT_CLASSIFICATION	4.991594401712826E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999092098499586	WITHOUT_CLASSIFICATION	9.079015004139579E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999900720947088	WITHOUT_CLASSIFICATION	9.92790529120112E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999306045038991	WITHOUT_CLASSIFICATION	6.939549610085448E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998892822820221	WITHOUT_CLASSIFICATION	1.1071771797789791E-4	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999892505656303	WITHOUT_CLASSIFICATION	1.0749434369693526E-4	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.997414588032016	WITHOUT_CLASSIFICATION	0.0025854119679840255	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9997530185609739	WITHOUT_CLASSIFICATION	2.469814390260944E-4	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999641462966434	WITHOUT_CLASSIFICATION	3.585370335662372E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950171315307	WITHOUT_CLASSIFICATION	4.9828684692277155E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998398691937971	WITHOUT_CLASSIFICATION	1.601308062028706E-4	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9998884350344251	WITHOUT_CLASSIFICATION	1.1156496557486426E-4	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9994756693696634	WITHOUT_CLASSIFICATION	5.243306303365706E-4	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999829041074802	WITHOUT_CLASSIFICATION	1.7095892519789117E-4	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999767562060834	WITHOUT_CLASSIFICATION	2.3243793916605962E-4	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999598774993035	WITHOUT_CLASSIFICATION	4.0122500696542685E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999685066866492	WITHOUT_CLASSIFICATION	3.149331335081616E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999685066866492	WITHOUT_CLASSIFICATION	3.149331335081616E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9998450546708763	WITHOUT_CLASSIFICATION	1.5494532912381696E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999589624119648	WITHOUT_CLASSIFICATION	4.10375880352784E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999756297082454	WITHOUT_CLASSIFICATION	2.4370291754609054E-5	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999090928168733	WITHOUT_CLASSIFICATION	9.090718312664722E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999504922129965	WITHOUT_CLASSIFICATION	4.950778700357902E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999861424767081	WITHOUT_CLASSIFICATION	1.3857523291868236E-5	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999985655312921	WITHOUT_CLASSIFICATION	1.4344687078904183E-6	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999840120699753	WITHOUT_CLASSIFICATION	1.5987930024692298E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9998450546708763	WITHOUT_CLASSIFICATION	1.5494532912381696E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999589624119648	WITHOUT_CLASSIFICATION	4.10375880352784E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999884751832813	WITHOUT_CLASSIFICATION	1.152481671870534E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999263515773411	WITHOUT_CLASSIFICATION	7.36484226588435E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999751741129531	WITHOUT_CLASSIFICATION	2.4825887046933465E-5	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998047103232117	WITHOUT_CLASSIFICATION	1.9528967678836243E-4	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999146496594211	WITHOUT_CLASSIFICATION	8.535034057896903E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9998279252897881	WITHOUT_CLASSIFICATION	1.7207471021196745E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999100002613801	WITHOUT_CLASSIFICATION	8.999973861987925E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9998550912404424	WITHOUT_CLASSIFICATION	1.4490875955762731E-4	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.99995048717257	WITHOUT_CLASSIFICATION	4.9512827430129496E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9978747800582479	WITHOUT_CLASSIFICATION	0.0021252199417520676	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999629805261017	WITHOUT_CLASSIFICATION	3.701947389846221E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9978747800582479	WITHOUT_CLASSIFICATION	0.0021252199417520676	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.999818656136807	WITHOUT_CLASSIFICATION	1.8134386319298136E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999859645015489	WITHOUT_CLASSIFICATION	1.4035498451107502E-4	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.999818656136807	WITHOUT_CLASSIFICATION	1.8134386319298136E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993801057759335	WITHOUT_CLASSIFICATION	6.198942240664225E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9997871651445499	WITHOUT_CLASSIFICATION	2.1283485545013192E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9998550912404424	WITHOUT_CLASSIFICATION	1.4490875955762731E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9998550912404424	WITHOUT_CLASSIFICATION	1.4490875955762731E-4	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999247877547234	WITHOUT_CLASSIFICATION	7.521224527662321E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999249366322469	WITHOUT_CLASSIFICATION	7.506336775306961E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999247877547234	WITHOUT_CLASSIFICATION	7.521224527662321E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998887898599199	WITHOUT_CLASSIFICATION	1.1121014008005151E-4	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999737972427014	WITHOUT_CLASSIFICATION	2.6202757298583175E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999506273382438	WITHOUT_CLASSIFICATION	4.937266175608521E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9996493375720342	WITHOUT_CLASSIFICATION	3.506624279657963E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9998880122528303	WITHOUT_CLASSIFICATION	1.119877471696852E-4	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998956296041859	WITHOUT_CLASSIFICATION	1.0437039581413972E-4	TEST
KEY	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999731456800526	WITHOUT_CLASSIFICATION	2.6854319947464255E-5	TEST
types	WITHOUT_CLASSIFICATION	0.9998240608267992	WITHOUT_CLASSIFICATION	1.759391732007533E-4	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9998450931363342	WITHOUT_CLASSIFICATION	1.5490686366582387E-4	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998685656728518	WITHOUT_CLASSIFICATION	1.314343271482244E-4	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999856897717216	WITHOUT_CLASSIFICATION	1.4310228278401928E-4	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998502867287496	WITHOUT_CLASSIFICATION	1.4971327125030024E-4	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999978691024315	WITHOUT_CLASSIFICATION	2.130897568507302E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999854515259323	WITHOUT_CLASSIFICATION	1.4548474067820477E-5	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999742102373466	WITHOUT_CLASSIFICATION	2.578976265347013E-5	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999309479187656	WITHOUT_CLASSIFICATION	6.90520812345158E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998878686676764	WITHOUT_CLASSIFICATION	1.1213133232349614E-4	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998718681033913	WITHOUT_CLASSIFICATION	1.281318966086378E-4	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996051425936047	WITHOUT_CLASSIFICATION	3.948574063952457E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999613412505318	WITHOUT_CLASSIFICATION	3.8658749468190766E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999317336006257	WITHOUT_CLASSIFICATION	6.826639937429698E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9915173996151041	WITHOUT_CLASSIFICATION	0.00848260038489597	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999377604301964	WITHOUT_CLASSIFICATION	6.223956980356624E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9998880122528303	WITHOUT_CLASSIFICATION	1.119877471696852E-4	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999672307665222	WITHOUT_CLASSIFICATION	3.276923347779468E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9997206469913367	WITHOUT_CLASSIFICATION	2.7935300866330443E-4	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9480595790904371	WITHOUT_CLASSIFICATION	0.05194042090956279	TEST
an assertion	WITHOUT_CLASSIFICATION	0.999865071025907	WITHOUT_CLASSIFICATION	1.3492897409286307E-4	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999810114554603	WITHOUT_CLASSIFICATION	1.8988544539737868E-5	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.999939414994951	WITHOUT_CLASSIFICATION	6.0585005049080135E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998887898599199	WITHOUT_CLASSIFICATION	1.1121014008005151E-4	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998887898599199	WITHOUT_CLASSIFICATION	1.1121014008005151E-4	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999843047217644	WITHOUT_CLASSIFICATION	1.5695278235635606E-5	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999635472923956	WITHOUT_CLASSIFICATION	3.6452707604350185E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9998883544207303	WITHOUT_CLASSIFICATION	1.1164557926961282E-4	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999470985448774	WITHOUT_CLASSIFICATION	5.2901455122549464E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9973101438211269	WITHOUT_CLASSIFICATION	0.0026898561788730466	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999629153116255	WITHOUT_CLASSIFICATION	3.7084688374397034E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999367188007123	WITHOUT_CLASSIFICATION	6.328119928763561E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999044696394288	WITHOUT_CLASSIFICATION	9.553036057122315E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9997116037064734	WITHOUT_CLASSIFICATION	2.883962935266488E-4	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999219243193329	WITHOUT_CLASSIFICATION	7.807568066708903E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999868162475656	WITHOUT_CLASSIFICATION	1.3183752434337258E-5	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998685656728518	WITHOUT_CLASSIFICATION	1.314343271482244E-4	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9998450546708763	WITHOUT_CLASSIFICATION	1.5494532912381696E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999868162475656	WITHOUT_CLASSIFICATION	1.3183752434337258E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999933040942076	WITHOUT_CLASSIFICATION	6.6959057924631275E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999790678477727	WITHOUT_CLASSIFICATION	2.093215222723347E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9975757549958838	WITHOUT_CLASSIFICATION	0.0024242450041162835	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997617253163653	WITHOUT_CLASSIFICATION	2.382746836345835E-4	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999991172153353	WITHOUT_CLASSIFICATION	8.827846646924102E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999804905878303	WITHOUT_CLASSIFICATION	1.950941216961084E-5	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999820464350163	WITHOUT_CLASSIFICATION	1.7953564983629833E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9998450546708763	WITHOUT_CLASSIFICATION	1.5494532912381696E-4	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999578702466435	WITHOUT_CLASSIFICATION	4.21297533565394E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998583394645653	WITHOUT_CLASSIFICATION	1.4166053543477824E-4	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998583394645653	WITHOUT_CLASSIFICATION	1.4166053543477824E-4	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9997804337878383	WITHOUT_CLASSIFICATION	2.1956621216166013E-4	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998312899314981	WITHOUT_CLASSIFICATION	1.68710068501953E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999868162475656	WITHOUT_CLASSIFICATION	1.3183752434337258E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997617253163653	WITHOUT_CLASSIFICATION	2.382746836345835E-4	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999804905878303	WITHOUT_CLASSIFICATION	1.950941216961084E-5	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999841172834191	WITHOUT_CLASSIFICATION	1.5882716580885383E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999905601080155	WITHOUT_CLASSIFICATION	9.439891984504178E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9998904655834014	WITHOUT_CLASSIFICATION	1.0953441659864666E-4	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998931457253372	WITHOUT_CLASSIFICATION	1.0685427466280508E-4	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999032749479538	WITHOUT_CLASSIFICATION	9.672505204621694E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999437999784998	WITHOUT_CLASSIFICATION	5.620002150018307E-5	TEST
JOINS	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998891536013566	WITHOUT_CLASSIFICATION	1.108463986434728E-4	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999851942106112	WITHOUT_CLASSIFICATION	1.4805789388805718E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994936576876324	WITHOUT_CLASSIFICATION	5.063423123675516E-4	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9994936576876324	WITHOUT_CLASSIFICATION	5.063423123675516E-4	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999438625189725	WITHOUT_CLASSIFICATION	5.613748102759205E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993801057759335	WITHOUT_CLASSIFICATION	6.198942240664225E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999006514475618	WITHOUT_CLASSIFICATION	9.934855243816447E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998014169627245	WITHOUT_CLASSIFICATION	1.9858303727551645E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998623404875706	WITHOUT_CLASSIFICATION	1.3765951242934377E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999969082742082	WITHOUT_CLASSIFICATION	3.091725791801216E-5	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999639008357364	WITHOUT_CLASSIFICATION	3.609916426361172E-5	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999590041621103	WITHOUT_CLASSIFICATION	4.0995837889793745E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9998881999652669	WITHOUT_CLASSIFICATION	1.1180003473304891E-4	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9996390666580025	WITHOUT_CLASSIFICATION	3.6093334199740253E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9998780155790422	WITHOUT_CLASSIFICATION	1.2198442095771786E-4	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999785992108203	WITHOUT_CLASSIFICATION	2.1400789179668658E-5	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9994976837954498	WITHOUT_CLASSIFICATION	5.023162045502428E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999507210632154	WITHOUT_CLASSIFICATION	4.927893678466747E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998541194946351	WITHOUT_CLASSIFICATION	1.4588050536493223E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996129383441799	WITHOUT_CLASSIFICATION	3.870616558201274E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998949358312395	WITHOUT_CLASSIFICATION	1.0506416876049654E-4	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999349609282764	WITHOUT_CLASSIFICATION	6.503907172361321E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999112649510381	WITHOUT_CLASSIFICATION	8.873504896186555E-5	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999257669357215	WITHOUT_CLASSIFICATION	7.423306427843524E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999054114417719	WITHOUT_CLASSIFICATION	9.458855822805925E-5	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998393044150354	WITHOUT_CLASSIFICATION	1.6069558496456255E-4	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999506123343282	WITHOUT_CLASSIFICATION	4.9387665671763805E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999567605595103	WITHOUT_CLASSIFICATION	4.323944048964557E-5	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999082219191795	WITHOUT_CLASSIFICATION	9.177808082054549E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996710837653422	WITHOUT_CLASSIFICATION	3.2891623465770636E-4	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998640388633663	WITHOUT_CLASSIFICATION	1.3596113663374464E-4	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999117421727177	WITHOUT_CLASSIFICATION	8.825782728225747E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999953761217727	WITHOUT_CLASSIFICATION	4.6238782273040785E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998664010725461	WITHOUT_CLASSIFICATION	1.33598927453855E-4	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9941108212218641	WITHOUT_CLASSIFICATION	0.005889178778135833	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996342692044667	WITHOUT_CLASSIFICATION	3.657307955332356E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9993865464966647	WITHOUT_CLASSIFICATION	6.13453503335246E-4	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999360763542008	WITHOUT_CLASSIFICATION	6.392364579913965E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9973168858760054	WITHOUT_CLASSIFICATION	0.0026831141239945194	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9996276453421865	WITHOUT_CLASSIFICATION	3.7235465781352536E-4	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996978972506106	WITHOUT_CLASSIFICATION	3.02102749389415E-4	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9996398816156647	WITHOUT_CLASSIFICATION	3.601183843352393E-4	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999036766200599	WITHOUT_CLASSIFICATION	9.63233799401908E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999798630015034	WITHOUT_CLASSIFICATION	2.013699849661553E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999456052445275	WITHOUT_CLASSIFICATION	5.439475547246632E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999681584446309	WITHOUT_CLASSIFICATION	3.184155536900512E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.99997461632967	WITHOUT_CLASSIFICATION	2.5383670330097058E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999456052445275	WITHOUT_CLASSIFICATION	5.439475547246632E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999798630015034	WITHOUT_CLASSIFICATION	2.013699849661553E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999681584446309	WITHOUT_CLASSIFICATION	3.184155536900512E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999422132044182	WITHOUT_CLASSIFICATION	5.778679558176006E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998897747394213	WITHOUT_CLASSIFICATION	1.102252605786773E-4	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9985455089646972	WITHOUT_CLASSIFICATION	0.0014544910353027844	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999452672437957	WITHOUT_CLASSIFICATION	5.473275620433225E-5	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999841628282373	WITHOUT_CLASSIFICATION	1.583717176266465E-5	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997619814441888	WITHOUT_CLASSIFICATION	2.380185558111858E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9990774070821717	WITHOUT_CLASSIFICATION	9.225929178282393E-4	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997634612505328	WITHOUT_CLASSIFICATION	2.3653874946726405E-4	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999600875012294	WITHOUT_CLASSIFICATION	3.991249877050208E-5	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999667593204762	WITHOUT_CLASSIFICATION	3.324067952376022E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9998887573244626	WITHOUT_CLASSIFICATION	1.1124267553737156E-4	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999912291134046	WITHOUT_CLASSIFICATION	8.770886595394094E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998427586693989	WITHOUT_CLASSIFICATION	1.5724133060103358E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999452672437957	WITHOUT_CLASSIFICATION	5.473275620433225E-5	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998103714545954	WITHOUT_CLASSIFICATION	1.8962854540469323E-4	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9996017440130556	WITHOUT_CLASSIFICATION	3.9825598694441934E-4	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9996442596141641	WITHOUT_CLASSIFICATION	3.5574038583589725E-4	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999954252717684	WITHOUT_CLASSIFICATION	4.574728231537729E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999747850247611	WITHOUT_CLASSIFICATION	2.52149752389383E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998424249085508	WITHOUT_CLASSIFICATION	1.575750914491468E-4	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999125767600551	WITHOUT_CLASSIFICATION	8.742323994489608E-5	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999473375220084	WITHOUT_CLASSIFICATION	5.2662477991674485E-5	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998934377772728	WITHOUT_CLASSIFICATION	1.0656222272714912E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9995830746896016	WITHOUT_CLASSIFICATION	4.1692531039838555E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998424249085508	WITHOUT_CLASSIFICATION	1.575750914491468E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998424249085508	WITHOUT_CLASSIFICATION	1.575750914491468E-4	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999601611817104	WITHOUT_CLASSIFICATION	3.983881828970281E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999601611817104	WITHOUT_CLASSIFICATION	3.983881828970281E-5	TEST
not supported	WITHOUT_CLASSIFICATION	0.9988082627803212	WITHOUT_CLASSIFICATION	0.001191737219678829	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9996442596141641	WITHOUT_CLASSIFICATION	3.5574038583589725E-4	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9996859665117931	WITHOUT_CLASSIFICATION	3.1403348820694256E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999438023208945	WITHOUT_CLASSIFICATION	5.6197679105529214E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999828102585309	WITHOUT_CLASSIFICATION	1.7189741469098794E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999828102585309	WITHOUT_CLASSIFICATION	1.7189741469098794E-5	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999509148125216	WITHOUT_CLASSIFICATION	4.9085187478264225E-5	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9977278144324321	WITHOUT_CLASSIFICATION	0.0022721855675678776	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999760927810217	WITHOUT_CLASSIFICATION	2.3907218978182846E-5	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999618929340597	WITHOUT_CLASSIFICATION	3.810706594035204E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998618173235219	WITHOUT_CLASSIFICATION	1.3818267647805436E-4	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999980872056765	WITHOUT_CLASSIFICATION	1.9127943235491077E-6	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999921978012467	WITHOUT_CLASSIFICATION	7.802198753358602E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9996755439539136	WITHOUT_CLASSIFICATION	3.2445604608648964E-4	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999490932214202	WITHOUT_CLASSIFICATION	5.090677857989807E-5	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999811949916383	WITHOUT_CLASSIFICATION	1.8805008361676555E-5	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999798681873936	WITHOUT_CLASSIFICATION	2.0131812606325976E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9998263330502637	WITHOUT_CLASSIFICATION	1.7366694973634908E-4	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9998613898994225	WITHOUT_CLASSIFICATION	1.3861010057743663E-4	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998215538058082	WITHOUT_CLASSIFICATION	1.7844619419172365E-4	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998923287931374	WITHOUT_CLASSIFICATION	1.0767120686271913E-4	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610970673425	WITHOUT_CLASSIFICATION	1.3890293265746037E-4	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999670204016258	WITHOUT_CLASSIFICATION	3.2979598374237594E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9986657839114487	WITHOUT_CLASSIFICATION	0.001334216088551282	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9993080919391645	WITHOUT_CLASSIFICATION	6.91908060835581E-4	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999703572980295	WITHOUT_CLASSIFICATION	2.9642701970411085E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9972150858132374	WITHOUT_CLASSIFICATION	0.002784914186762676	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999900121245867	WITHOUT_CLASSIFICATION	9.987875413300785E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999297812097763	WITHOUT_CLASSIFICATION	7.021879022374955E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9998603443358546	WITHOUT_CLASSIFICATION	1.3965566414532495E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999242681243228	WITHOUT_CLASSIFICATION	7.573187567723475E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999349609282764	WITHOUT_CLASSIFICATION	6.503907172361321E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999946465444486	WITHOUT_CLASSIFICATION	5.353455551399176E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999942212132406	WITHOUT_CLASSIFICATION	5.778786759475119E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998559400692474	WITHOUT_CLASSIFICATION	1.4405993075260117E-4	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9998992348539497	WITHOUT_CLASSIFICATION	1.0076514605029644E-4	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9998992348539497	WITHOUT_CLASSIFICATION	1.0076514605029644E-4	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999110583443173	WITHOUT_CLASSIFICATION	8.894165568274211E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9998243305227815	WITHOUT_CLASSIFICATION	1.7566947721835756E-4	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9998069274275204	WITHOUT_CLASSIFICATION	1.9307257247964984E-4	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9998069274275204	WITHOUT_CLASSIFICATION	1.9307257247964984E-4	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995395242537854	WITHOUT_CLASSIFICATION	4.6047574621458753E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999504346636455	WITHOUT_CLASSIFICATION	4.956533635450844E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9995930857763431	WITHOUT_CLASSIFICATION	4.069142236569348E-4	TEST
ignore	WITHOUT_CLASSIFICATION	0.9998746331236579	WITHOUT_CLASSIFICATION	1.2536687634207255E-4	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9998891848946334	WITHOUT_CLASSIFICATION	1.108151053665957E-4	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996562328554346	WITHOUT_CLASSIFICATION	3.4376714456546586E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999621157915805	WITHOUT_CLASSIFICATION	3.788420841966349E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998774790284604	WITHOUT_CLASSIFICATION	1.2252097153968346E-4	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998774790284604	WITHOUT_CLASSIFICATION	1.2252097153968346E-4	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999824902470439	WITHOUT_CLASSIFICATION	1.7509752956045042E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999134084516211	WITHOUT_CLASSIFICATION	8.659154837895828E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999134084516211	WITHOUT_CLASSIFICATION	8.659154837895828E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998845294949197	WITHOUT_CLASSIFICATION	1.1547050508037073E-4	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998878726582011	WITHOUT_CLASSIFICATION	1.1212734179895519E-4	TEST
TODO!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999511997362266	WITHOUT_CLASSIFICATION	4.8800263773401654E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999783406959124	WITHOUT_CLASSIFICATION	2.1659304087614112E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998987863004419	WITHOUT_CLASSIFICATION	1.0121369955807817E-4	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9987888709346029	WITHOUT_CLASSIFICATION	0.001211129065397156	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996841031381059	WITHOUT_CLASSIFICATION	3.158968618942549E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999966703345379	WITHOUT_CLASSIFICATION	3.329665462094044E-5	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995415043572882	WITHOUT_CLASSIFICATION	4.584956427118478E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999160480262849	WITHOUT_CLASSIFICATION	8.395197371520566E-5	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999755863914509	WITHOUT_CLASSIFICATION	2.4413608549078776E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998411164843152	WITHOUT_CLASSIFICATION	1.588835156847542E-4	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9996290881519082	WITHOUT_CLASSIFICATION	3.7091184809181756E-4	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9997258037600144	WITHOUT_CLASSIFICATION	2.741962399855835E-4	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998911369266832	WITHOUT_CLASSIFICATION	1.0886307331691511E-4	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999569140948015	WITHOUT_CLASSIFICATION	4.30859051984756E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991051800224099	WITHOUT_CLASSIFICATION	8.948199775900973E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999096168927157	WITHOUT_CLASSIFICATION	9.038310728426751E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999972512036495	WITHOUT_CLASSIFICATION	2.7487963504902414E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999065600552764	WITHOUT_CLASSIFICATION	9.34399447235433E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9998954452013601	WITHOUT_CLASSIFICATION	1.0455479863995018E-4	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999428873042661	WITHOUT_CLASSIFICATION	5.711269573389615E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9982908591572889	WITHOUT_CLASSIFICATION	0.0017091408427111125	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9884852260295155	WITHOUT_CLASSIFICATION	0.011514773970484496	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999664368851696	WITHOUT_CLASSIFICATION	3.356311483039895E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999428873042661	WITHOUT_CLASSIFICATION	5.711269573389615E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9638711851587227	WITHOUT_CLASSIFICATION	0.03612881484127739	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999855467028635	WITHOUT_CLASSIFICATION	1.4453297136423729E-5	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998306999985901	WITHOUT_CLASSIFICATION	1.6930000140991116E-4	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995319492807135	WITHOUT_CLASSIFICATION	4.680507192864656E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999590692627572	WITHOUT_CLASSIFICATION	4.0930737242769196E-5	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9994719062278062	WITHOUT_CLASSIFICATION	5.280937721938531E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999624936040339	WITHOUT_CLASSIFICATION	3.7506395966230226E-5	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999657264663561	WITHOUT_CLASSIFICATION	3.427353364396061E-5	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998504568206323	WITHOUT_CLASSIFICATION	1.4954317936761904E-4	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999774816397086	WITHOUT_CLASSIFICATION	2.251836029146783E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998504568206323	WITHOUT_CLASSIFICATION	1.4954317936761904E-4	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999709174301357	WITHOUT_CLASSIFICATION	2.9082569864329614E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9993563192486465	WITHOUT_CLASSIFICATION	6.436807513534004E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9970821361759176	WITHOUT_CLASSIFICATION	0.0029178638240823147	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999464036667995	WITHOUT_CLASSIFICATION	5.359633320055823E-5	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999739592671898	WITHOUT_CLASSIFICATION	2.6040732810203782E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999890914775808	WITHOUT_CLASSIFICATION	1.0908522419191459E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999294645766981	WITHOUT_CLASSIFICATION	7.053542330197591E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998231988585504	WITHOUT_CLASSIFICATION	1.7680114144955677E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999294645766981	WITHOUT_CLASSIFICATION	7.053542330197591E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999399329850556	WITHOUT_CLASSIFICATION	6.006701494447932E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9993862564144688	WITHOUT_CLASSIFICATION	6.137435855312136E-4	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998639737039887	WITHOUT_CLASSIFICATION	1.3602629601121573E-4	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999119535469293	WITHOUT_CLASSIFICATION	8.804645307076277E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999003966316369	WITHOUT_CLASSIFICATION	9.960336836317264E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9992328388300137	WITHOUT_CLASSIFICATION	7.671611699863342E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999890914775808	WITHOUT_CLASSIFICATION	1.0908522419191459E-4	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998231988585504	WITHOUT_CLASSIFICATION	1.7680114144955677E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999399329850556	WITHOUT_CLASSIFICATION	6.006701494447932E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999154960065159	WITHOUT_CLASSIFICATION	8.45039934841746E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999409632838433	WITHOUT_CLASSIFICATION	5.903671615654874E-5	TEST
reset the id	WITHOUT_CLASSIFICATION	0.999947062534024	WITHOUT_CLASSIFICATION	5.293746597604736E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999885884529526	WITHOUT_CLASSIFICATION	1.1411547047517826E-5	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999501448698218	WITHOUT_CLASSIFICATION	4.9855130178280274E-5	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998036356235983	WITHOUT_CLASSIFICATION	1.9636437640160268E-4	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999204053891557	WITHOUT_CLASSIFICATION	7.959461084428519E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610970673425	WITHOUT_CLASSIFICATION	1.3890293265746037E-4	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9993862564144688	WITHOUT_CLASSIFICATION	6.137435855312136E-4	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999852708828764	WITHOUT_CLASSIFICATION	1.472911712364283E-5	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999247877547234	WITHOUT_CLASSIFICATION	7.521224527662321E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9988974107892463	WITHOUT_CLASSIFICATION	0.0011025892107536745	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.999951405761766	WITHOUT_CLASSIFICATION	4.859423823397757E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610970673425	WITHOUT_CLASSIFICATION	1.3890293265746037E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999342435064672	WITHOUT_CLASSIFICATION	6.575649353283053E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610970673425	WITHOUT_CLASSIFICATION	1.3890293265746037E-4	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9997882974082068	WITHOUT_CLASSIFICATION	2.1170259179308676E-4	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999326268066869	WITHOUT_CLASSIFICATION	6.737319331307633E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998671043582379	WITHOUT_CLASSIFICATION	1.3289564176204445E-4	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999388121381828	WITHOUT_CLASSIFICATION	6.118786181727291E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999723098126796	WITHOUT_CLASSIFICATION	2.7690187320385163E-5	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.999914539607833	WITHOUT_CLASSIFICATION	8.546039216698243E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999539292171875	WITHOUT_CLASSIFICATION	4.60707828125357E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999807785799588	WITHOUT_CLASSIFICATION	1.9221420041155213E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999531415282653	WITHOUT_CLASSIFICATION	4.685847173468716E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999515962940699	WITHOUT_CLASSIFICATION	4.840370592999895E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999913472841464	WITHOUT_CLASSIFICATION	8.652715853554229E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999023603817048	WITHOUT_CLASSIFICATION	9.763961829512372E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9981860994548325	WITHOUT_CLASSIFICATION	0.0018139005451674978	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999402863096368	WITHOUT_CLASSIFICATION	5.971369036317245E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999925535862447	WITHOUT_CLASSIFICATION	7.4464137553125115E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998876552005124	WITHOUT_CLASSIFICATION	1.1234479948764374E-4	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997355179806852	WITHOUT_CLASSIFICATION	2.644820193148072E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999923193383284	WITHOUT_CLASSIFICATION	7.680661671536658E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999769255621446	WITHOUT_CLASSIFICATION	2.307443785540262E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999575090996212	WITHOUT_CLASSIFICATION	4.249090037880753E-4	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999575090996212	WITHOUT_CLASSIFICATION	4.249090037880753E-4	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.999902412602603	WITHOUT_CLASSIFICATION	9.758739739698628E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998167220084564	WITHOUT_CLASSIFICATION	1.8327799154367418E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998449342609551	WITHOUT_CLASSIFICATION	1.5506573904488003E-4	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999237660553223	WITHOUT_CLASSIFICATION	7.623394467764831E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.99999610839107	WITHOUT_CLASSIFICATION	3.8916089299769575E-6	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999692916359482	WITHOUT_CLASSIFICATION	3.070836405184445E-5	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999447895904292	WITHOUT_CLASSIFICATION	5.521040957086643E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999030802015828	WITHOUT_CLASSIFICATION	9.691979841714312E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9993679681969769	WITHOUT_CLASSIFICATION	6.32031803023079E-4	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999830202553339	WITHOUT_CLASSIFICATION	1.6979744666009867E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998131904343928	WITHOUT_CLASSIFICATION	1.868095656072198E-4	TEST
cache this	WITHOUT_CLASSIFICATION	0.9994503227083702	WITHOUT_CLASSIFICATION	5.496772916297872E-4	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9991152603900886	WITHOUT_CLASSIFICATION	8.847396099114451E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999688287613941	WITHOUT_CLASSIFICATION	3.117123860584024E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999639516608289	WITHOUT_CLASSIFICATION	3.6048339171158435E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998975075092184	WITHOUT_CLASSIFICATION	1.024924907815668E-4	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999230211277306	WITHOUT_CLASSIFICATION	7.697887226937627E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999230211277306	WITHOUT_CLASSIFICATION	7.697887226937627E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9996259668160229	WITHOUT_CLASSIFICATION	3.7403318397711996E-4	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999807785799588	WITHOUT_CLASSIFICATION	1.9221420041155213E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9996866252369228	WITHOUT_CLASSIFICATION	3.133747630771995E-4	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9998638733978397	WITHOUT_CLASSIFICATION	1.3612660216038222E-4	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997688603207813	WITHOUT_CLASSIFICATION	2.3113967921873212E-4	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999806925622596	WITHOUT_CLASSIFICATION	1.9307437740338003E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.999979747996453	WITHOUT_CLASSIFICATION	2.0252003547030195E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9995489681832203	WITHOUT_CLASSIFICATION	4.5103181677979415E-4	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998556631626608	WITHOUT_CLASSIFICATION	1.4433683733920712E-4	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999420956642815	WITHOUT_CLASSIFICATION	5.790433571846331E-5	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999910182297383	WITHOUT_CLASSIFICATION	8.98177026171251E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999680764954155	WITHOUT_CLASSIFICATION	3.192350458457135E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999208002373264	WITHOUT_CLASSIFICATION	7.919976267362494E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999949946867015	WITHOUT_CLASSIFICATION	5.0053132985483885E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999596655096347	WITHOUT_CLASSIFICATION	4.033449036529945E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999701784647554	WITHOUT_CLASSIFICATION	2.982153524462671E-5	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999953408835144	WITHOUT_CLASSIFICATION	4.659116485598806E-5	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999902566183488	WITHOUT_CLASSIFICATION	9.743381651096578E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999933026373372	WITHOUT_CLASSIFICATION	6.697362662842639E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999143718968735	WITHOUT_CLASSIFICATION	8.562810312658725E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9995230812804307	WITHOUT_CLASSIFICATION	4.769187195692971E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999588712439637	WITHOUT_CLASSIFICATION	4.112875603634117E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999409682689734	WITHOUT_CLASSIFICATION	5.903173102664078E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999566652921447	WITHOUT_CLASSIFICATION	4.333470785542977E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999539152792662	WITHOUT_CLASSIFICATION	4.608472073366829E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998935685392542	WITHOUT_CLASSIFICATION	1.0643146074590825E-4	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9990671057479796	WITHOUT_CLASSIFICATION	9.328942520202493E-4	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9983860287137407	WITHOUT_CLASSIFICATION	0.001613971286259274	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997511097574368	WITHOUT_CLASSIFICATION	2.4889024256331637E-4	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998568417531003	WITHOUT_CLASSIFICATION	1.4315824689962496E-4	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998612620089609	WITHOUT_CLASSIFICATION	1.387379910391834E-4	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999295818466214	WITHOUT_CLASSIFICATION	7.041815337853568E-5	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999857576765843	WITHOUT_CLASSIFICATION	1.4242323415693804E-4	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999851493731075	WITHOUT_CLASSIFICATION	1.4850626892502764E-4	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9933906808196741	WITHOUT_CLASSIFICATION	0.006609319180325993	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992591201852293	WITHOUT_CLASSIFICATION	7.408798147706028E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999982136005061	WITHOUT_CLASSIFICATION	1.7863994938904628E-5	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988988165612225	WITHOUT_CLASSIFICATION	0.0011011834387774796	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988988165612225	WITHOUT_CLASSIFICATION	0.0011011834387774796	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998680561234792	WITHOUT_CLASSIFICATION	1.3194387652077342E-4	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998965331857531	WITHOUT_CLASSIFICATION	1.0346681424694168E-4	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998188576303664	WITHOUT_CLASSIFICATION	1.811423696336513E-4	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998188576303664	WITHOUT_CLASSIFICATION	1.811423696336513E-4	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999614820462929	WITHOUT_CLASSIFICATION	3.851795370714294E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999512756922199	WITHOUT_CLASSIFICATION	4.872430778017841E-5	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9995374267165078	WITHOUT_CLASSIFICATION	4.6257328349223135E-4	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999952654693204	WITHOUT_CLASSIFICATION	4.7345306795977466E-5	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998567149700494	WITHOUT_CLASSIFICATION	1.4328502995071164E-4	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999847894266686	WITHOUT_CLASSIFICATION	1.5210573331550016E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999847894266686	WITHOUT_CLASSIFICATION	1.5210573331550016E-5	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9996775057482741	WITHOUT_CLASSIFICATION	3.2249425172593225E-4	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9998887898599199	WITHOUT_CLASSIFICATION	1.1121014008005151E-4	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999066859365748	WITHOUT_CLASSIFICATION	9.331406342518979E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999734639405651	WITHOUT_CLASSIFICATION	2.6536059434815222E-5	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999639661685158	WITHOUT_CLASSIFICATION	3.603383148431478E-5	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999532503385136	WITHOUT_CLASSIFICATION	4.6749661486514025E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999810456425117	WITHOUT_CLASSIFICATION	1.895435748838266E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998875065076395	WITHOUT_CLASSIFICATION	1.1249349236043833E-4	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999769639821509	WITHOUT_CLASSIFICATION	2.30360178491725E-5	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999600445526935	WITHOUT_CLASSIFICATION	3.9955447306375357E-5	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999758139335767	WITHOUT_CLASSIFICATION	2.4186066423257826E-5	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999387558535957	WITHOUT_CLASSIFICATION	6.124414640434432E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999657350324909	WITHOUT_CLASSIFICATION	3.4264967509158994E-5	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9992403895061085	WITHOUT_CLASSIFICATION	7.596104938913761E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9996859402367033	WITHOUT_CLASSIFICATION	3.140597632966094E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999771820821495	WITHOUT_CLASSIFICATION	2.2817917850516516E-5	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9998448007226896	WITHOUT_CLASSIFICATION	1.5519927731049666E-4	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9993256291952957	WITHOUT_CLASSIFICATION	6.743708047043787E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999845619185218	WITHOUT_CLASSIFICATION	1.5438081478175505E-5	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999107703826596	WITHOUT_CLASSIFICATION	8.922961734040339E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998820690020763	WITHOUT_CLASSIFICATION	1.1793099792368647E-4	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9996584734942825	WITHOUT_CLASSIFICATION	3.415265057173991E-4	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998316744686173	WITHOUT_CLASSIFICATION	1.683255313826912E-4	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997158454877624	WITHOUT_CLASSIFICATION	2.841545122375817E-4	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9971971228445107	WITHOUT_CLASSIFICATION	0.0028028771554893216	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998684667330288	WITHOUT_CLASSIFICATION	1.3153326697116499E-4	TEST
faster?	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.999981554445952	WITHOUT_CLASSIFICATION	1.8445554047975207E-5	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999865493238388	WITHOUT_CLASSIFICATION	1.3450676161164255E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999559996825212	WITHOUT_CLASSIFICATION	4.40003174787044E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999860458272994	WITHOUT_CLASSIFICATION	1.3954172700522642E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999634284465058	WITHOUT_CLASSIFICATION	3.6571553494187345E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998107839921324	WITHOUT_CLASSIFICATION	1.8921600786764385E-4	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999332307399077	WITHOUT_CLASSIFICATION	6.676926009221537E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999925584114129	WITHOUT_CLASSIFICATION	7.441588587102939E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999501990477161	WITHOUT_CLASSIFICATION	4.9800952283989495E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999500331451653	WITHOUT_CLASSIFICATION	4.9966854834762914E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999627137338013	WITHOUT_CLASSIFICATION	3.728626619870955E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999958716454934	WITHOUT_CLASSIFICATION	4.12835450661074E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999731532791193	WITHOUT_CLASSIFICATION	2.6846720880839224E-5	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999407199930807	WITHOUT_CLASSIFICATION	5.928000691939906E-5	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9998894492096854	WITHOUT_CLASSIFICATION	1.1055079031464845E-4	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9998996312638724	WITHOUT_CLASSIFICATION	1.0036873612760855E-4	TEST
Print page	WITHOUT_CLASSIFICATION	0.9998451077469275	WITHOUT_CLASSIFICATION	1.5489225307240261E-4	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998879611022402	WITHOUT_CLASSIFICATION	1.1203889775980652E-4	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999418836479347	WITHOUT_CLASSIFICATION	5.811635206521071E-5	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998752060323782	WITHOUT_CLASSIFICATION	1.2479396762175168E-4	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999964694478404	WITHOUT_CLASSIFICATION	3.530552159597656E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999681783368104	WITHOUT_CLASSIFICATION	3.182166318959448E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998032376751305	WITHOUT_CLASSIFICATION	1.967623248694438E-4	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997040802378092	WITHOUT_CLASSIFICATION	2.9591976219082235E-4	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9871123581234428	WITHOUT_CLASSIFICATION	0.012887641876557325	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998803416631826	WITHOUT_CLASSIFICATION	1.1965833681739219E-4	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999788108099583	WITHOUT_CLASSIFICATION	2.1189190041675827E-5	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998828029806959	WITHOUT_CLASSIFICATION	1.1719701930407129E-4	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999740171002764	WITHOUT_CLASSIFICATION	2.5982899723571558E-5	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999623031356467	WITHOUT_CLASSIFICATION	3.769686435326452E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999966114070968	WITHOUT_CLASSIFICATION	3.388592903200891E-5	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9995968673059694	WITHOUT_CLASSIFICATION	4.031326940306036E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999869619263473	WITHOUT_CLASSIFICATION	1.3038073652709692E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999869619263473	WITHOUT_CLASSIFICATION	1.3038073652709692E-5	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999304224049671	WITHOUT_CLASSIFICATION	6.957759503289012E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999378587657171	WITHOUT_CLASSIFICATION	6.21412342829611E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999918398232362	WITHOUT_CLASSIFICATION	8.160176763807422E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999869734476124	WITHOUT_CLASSIFICATION	1.302655238748743E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999255661425361	WITHOUT_CLASSIFICATION	7.443385746386738E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9977174051073963	WITHOUT_CLASSIFICATION	0.002282594892603625	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999391190769157	WITHOUT_CLASSIFICATION	6.0880923084366756E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999975131077381	WITHOUT_CLASSIFICATION	2.486892261857888E-6	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9998499363023737	WITHOUT_CLASSIFICATION	1.5006369762634984E-4	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9998987631234165	WITHOUT_CLASSIFICATION	1.0123687658341225E-4	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999469053989354	WITHOUT_CLASSIFICATION	5.309460106457277E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.99959860803923	WITHOUT_CLASSIFICATION	4.01391960770081E-4	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998940521719454	WITHOUT_CLASSIFICATION	1.0594782805460234E-4	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998275175673446	WITHOUT_CLASSIFICATION	1.724824326555315E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998212497820397	WITHOUT_CLASSIFICATION	1.787502179602707E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998212497820397	WITHOUT_CLASSIFICATION	1.787502179602707E-4	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999388124200621	WITHOUT_CLASSIFICATION	6.118757993782761E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998445681785277	WITHOUT_CLASSIFICATION	1.5543182147225565E-4	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999201553203769	WITHOUT_CLASSIFICATION	7.984467962306273E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999944388553981	WITHOUT_CLASSIFICATION	5.561144601970677E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998599022099016	WITHOUT_CLASSIFICATION	1.4009779009836097E-4	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998780499202766	WITHOUT_CLASSIFICATION	1.2195007972334195E-4	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999402392101124	WITHOUT_CLASSIFICATION	5.976078988764191E-5	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999506522252495	WITHOUT_CLASSIFICATION	4.934777475055669E-5	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9997445966937619	WITHOUT_CLASSIFICATION	2.5540330623809203E-4	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999948860440231	WITHOUT_CLASSIFICATION	5.113955976930357E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999123992480572	WITHOUT_CLASSIFICATION	8.760075194272048E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999341147428932	WITHOUT_CLASSIFICATION	6.588525710684322E-5	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9995520352792941	WITHOUT_CLASSIFICATION	4.4796472070587814E-4	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999731596041992	WITHOUT_CLASSIFICATION	2.6840395800809568E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999916527602298	WITHOUT_CLASSIFICATION	8.347239770200309E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997200412408699	WITHOUT_CLASSIFICATION	2.7995875913011973E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999919352393399	WITHOUT_CLASSIFICATION	8.064760660097762E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9997953413429499	WITHOUT_CLASSIFICATION	2.0465865705006386E-4	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999710975335696	WITHOUT_CLASSIFICATION	2.890246643037904E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999870540140715	WITHOUT_CLASSIFICATION	1.2945985928611375E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998713518849758	WITHOUT_CLASSIFICATION	1.2864811502427578E-4	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999742711670156	WITHOUT_CLASSIFICATION	2.572883298428475E-5	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.99993198261414	WITHOUT_CLASSIFICATION	6.801738585996972E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999997956995973	WITHOUT_CLASSIFICATION	2.0430040269997574E-6	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999893489664353	WITHOUT_CLASSIFICATION	1.0651033564699954E-4	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9998874243977112	WITHOUT_CLASSIFICATION	1.1257560228882627E-4	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995237783756526	WITHOUT_CLASSIFICATION	4.762216243473216E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999423203866389	WITHOUT_CLASSIFICATION	5.767961336109694E-4	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999696569259907	WITHOUT_CLASSIFICATION	3.0343074009382895E-5	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999237840874791	WITHOUT_CLASSIFICATION	7.621591252091568E-4	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9995198190056124	WITHOUT_CLASSIFICATION	4.8018099438753567E-4	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999959209022757	WITHOUT_CLASSIFICATION	4.079097724290901E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999852020107948	WITHOUT_CLASSIFICATION	1.479798920520595E-4	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999827240774398	WITHOUT_CLASSIFICATION	1.727592256020302E-5	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999931769336231	WITHOUT_CLASSIFICATION	6.823066376910808E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999954243402695	WITHOUT_CLASSIFICATION	4.575659730495789E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999586645881743	WITHOUT_CLASSIFICATION	4.133541182573226E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999270468277193	WITHOUT_CLASSIFICATION	7.295317228072065E-5	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999788613239476	WITHOUT_CLASSIFICATION	2.1138676052355848E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999851815205533	WITHOUT_CLASSIFICATION	1.4818479446694716E-4	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.997884894863117	WITHOUT_CLASSIFICATION	0.0021151051368829155	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9994657193768266	WITHOUT_CLASSIFICATION	5.342806231734994E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99975340573086	WITHOUT_CLASSIFICATION	2.4659426913994014E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99975340573086	WITHOUT_CLASSIFICATION	2.4659426913994014E-4	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999058946836771	WITHOUT_CLASSIFICATION	9.410531632285334E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998253430778945	WITHOUT_CLASSIFICATION	1.7465692210544268E-4	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999052838737933	WITHOUT_CLASSIFICATION	9.471612620675774E-5	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999231892226014	WITHOUT_CLASSIFICATION	7.681077739854546E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9984755916187055	WITHOUT_CLASSIFICATION	0.0015244083812944855	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999735248748604	WITHOUT_CLASSIFICATION	2.6475125139757355E-5	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9996234880088307	WITHOUT_CLASSIFICATION	3.7651199116920715E-4	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9992998881674753	WITHOUT_CLASSIFICATION	7.00111832524617E-4	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999672909270608	WITHOUT_CLASSIFICATION	3.270907293925839E-5	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619386284701	WITHOUT_CLASSIFICATION	1.380613715299334E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994536949147713	WITHOUT_CLASSIFICATION	5.463050852286287E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9981610048373348	WITHOUT_CLASSIFICATION	0.0018389951626652434	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999970058128602	WITHOUT_CLASSIFICATION	2.9941871398631275E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999472387997826	WITHOUT_CLASSIFICATION	5.276120021737606E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9979298837706286	WITHOUT_CLASSIFICATION	0.0020701162293712654	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999944229630047	WITHOUT_CLASSIFICATION	5.577036995249152E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999909014643695	WITHOUT_CLASSIFICATION	9.098535630393734E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999314143665597	WITHOUT_CLASSIFICATION	6.858563344027205E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998640157371537	WITHOUT_CLASSIFICATION	1.3598426284622744E-4	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999200960910211	WITHOUT_CLASSIFICATION	7.990390897896614E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999983796787479	WITHOUT_CLASSIFICATION	1.6203212520721034E-6	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9987806686939174	WITHOUT_CLASSIFICATION	0.0012193313060826737	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999633177971664	WITHOUT_CLASSIFICATION	3.668220283360622E-4	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9998964707407982	WITHOUT_CLASSIFICATION	1.0352925920180882E-4	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999624968097311	WITHOUT_CLASSIFICATION	3.7503190268897124E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999682218187794	WITHOUT_CLASSIFICATION	3.177818122058677E-5	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997687211129158	WITHOUT_CLASSIFICATION	2.3127888708423576E-4	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999845710348884	WITHOUT_CLASSIFICATION	1.5428965111652703E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998360563873452	WITHOUT_CLASSIFICATION	1.6394361265480777E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999664603168086	WITHOUT_CLASSIFICATION	3.353968319129334E-5	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999823875158506	WITHOUT_CLASSIFICATION	1.7612484149336202E-5	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999906547252239	WITHOUT_CLASSIFICATION	9.345274776161086E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999916583033732	WITHOUT_CLASSIFICATION	8.341696626733876E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999936816982747	WITHOUT_CLASSIFICATION	6.318301725242602E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999749053824491	WITHOUT_CLASSIFICATION	2.509461755090386E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997665353461764	WITHOUT_CLASSIFICATION	2.3346465382348365E-4	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999978032908173	WITHOUT_CLASSIFICATION	2.1967091827015692E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999092300237665	WITHOUT_CLASSIFICATION	9.076997623347192E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998960123346626	WITHOUT_CLASSIFICATION	1.0398766533734397E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999609202285927	WITHOUT_CLASSIFICATION	3.907977140730546E-5	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997550650024217	WITHOUT_CLASSIFICATION	2.449349975782585E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999451924180732	WITHOUT_CLASSIFICATION	5.480758192671747E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999989010717538	WITHOUT_CLASSIFICATION	1.0989282461538273E-6	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999710478117602	WITHOUT_CLASSIFICATION	2.8952188239855378E-5	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9991117713619423	WITHOUT_CLASSIFICATION	8.882286380576742E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9982254485042055	WITHOUT_CLASSIFICATION	0.0017745514957944425	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9991956213298304	WITHOUT_CLASSIFICATION	8.043786701695018E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999706696674439	WITHOUT_CLASSIFICATION	2.933033255613815E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998940521719454	WITHOUT_CLASSIFICATION	1.0594782805460234E-4	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998817376010513	WITHOUT_CLASSIFICATION	1.1826239894884137E-4	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999687846368415	WITHOUT_CLASSIFICATION	3.121536315853178E-5	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9991923125968596	WITHOUT_CLASSIFICATION	8.076874031403042E-4	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999838843476767	WITHOUT_CLASSIFICATION	1.6115652323328838E-5	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999757943173692	WITHOUT_CLASSIFICATION	2.4205682630795914E-5	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999362291304134	WITHOUT_CLASSIFICATION	6.377086958657777E-5	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998817044117306	WITHOUT_CLASSIFICATION	1.1829558826941033E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9979806958738593	WITHOUT_CLASSIFICATION	0.0020193041261406123	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998605338393954	WITHOUT_CLASSIFICATION	1.3946616060455449E-4	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999453070624634	WITHOUT_CLASSIFICATION	5.469293753651633E-5	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999181680449974	WITHOUT_CLASSIFICATION	8.183195500256959E-5	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9988887744279874	WITHOUT_CLASSIFICATION	0.0011112255720125228	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997410022192888	WITHOUT_CLASSIFICATION	0.0025899778071120003	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9996234991330424	WITHOUT_CLASSIFICATION	3.7650086695760563E-4	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998279252897881	WITHOUT_CLASSIFICATION	1.7207471021196745E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993858862410158	WITHOUT_CLASSIFICATION	6.141137589842856E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999592078978724	WITHOUT_CLASSIFICATION	4.0792102127508366E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999927719330014	WITHOUT_CLASSIFICATION	7.228066998623476E-6	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999945492521953	WITHOUT_CLASSIFICATION	5.450747804659747E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993858862410158	WITHOUT_CLASSIFICATION	6.141137589842856E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994029917497856	WITHOUT_CLASSIFICATION	5.970082502143824E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9995628237052446	WITHOUT_CLASSIFICATION	4.3717629475535045E-4	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999644146829125	WITHOUT_CLASSIFICATION	3.5585317087580035E-5	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9995804595725826	WITHOUT_CLASSIFICATION	4.195404274174121E-4	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9994477263836944	WITHOUT_CLASSIFICATION	5.522736163056682E-4	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9996274290396466	WITHOUT_CLASSIFICATION	3.7257096035341644E-4	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999897271241658	WITHOUT_CLASSIFICATION	1.0272875834282953E-5	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9982741853678944	WITHOUT_CLASSIFICATION	0.0017258146321055734	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9991563960130733	WITHOUT_CLASSIFICATION	8.436039869267846E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999353532160791	WITHOUT_CLASSIFICATION	6.464678392095861E-5	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9989801043478772	WITHOUT_CLASSIFICATION	0.0010198956521228107	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9990871203789664	WITHOUT_CLASSIFICATION	9.128796210336055E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999050618694834	WITHOUT_CLASSIFICATION	9.493813051659576E-5	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999401551883568	WITHOUT_CLASSIFICATION	5.984481164325063E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999297076633982	WITHOUT_CLASSIFICATION	7.029233660176416E-5	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999588712439637	WITHOUT_CLASSIFICATION	4.112875603634117E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999969459024273	WITHOUT_CLASSIFICATION	3.0540975727214974E-6	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999851210740047	WITHOUT_CLASSIFICATION	1.4878925995312245E-5	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9989769685372955	WITHOUT_CLASSIFICATION	0.0010230314627044804	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9997817125922616	WITHOUT_CLASSIFICATION	2.1828740773844374E-4	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999940674568619	WITHOUT_CLASSIFICATION	5.932543138085387E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999464413154106	WITHOUT_CLASSIFICATION	5.355868458953862E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999704748561892	WITHOUT_CLASSIFICATION	2.9525143810904306E-5	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999949610247383	WITHOUT_CLASSIFICATION	5.038975261814666E-6	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999977701005785	WITHOUT_CLASSIFICATION	2.2298994214993165E-5	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999242858994444	WITHOUT_CLASSIFICATION	7.571410055560247E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9979306350645231	WITHOUT_CLASSIFICATION	0.002069364935476853	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997027797309539	WITHOUT_CLASSIFICATION	2.972202690460218E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999392812802381	WITHOUT_CLASSIFICATION	6.0718719761866736E-5	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9994262193856862	WITHOUT_CLASSIFICATION	5.73780614313846E-4	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999900927212081	WITHOUT_CLASSIFICATION	9.907278791987355E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999112862909482	WITHOUT_CLASSIFICATION	8.871370905184777E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999257097686487	WITHOUT_CLASSIFICATION	7.429023135130215E-5	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999901562334605	WITHOUT_CLASSIFICATION	9.843766539321982E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998287460881063	WITHOUT_CLASSIFICATION	1.7125391189364833E-4	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999627556736161	WITHOUT_CLASSIFICATION	3.72443263837894E-5	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999678216285969	WITHOUT_CLASSIFICATION	3.217837140309997E-4	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999621163346591	WITHOUT_CLASSIFICATION	3.7883665340893785E-5	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999855275272833	WITHOUT_CLASSIFICATION	1.4472472716537285E-5	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999460671789082	WITHOUT_CLASSIFICATION	5.3932821091746554E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999297616141192	WITHOUT_CLASSIFICATION	7.023838588074836E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999297616141192	WITHOUT_CLASSIFICATION	7.023838588074836E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.997712027863841	WITHOUT_CLASSIFICATION	0.002287972136159096	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999383381061309	WITHOUT_CLASSIFICATION	6.166189386916093E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999043840893446	WITHOUT_CLASSIFICATION	9.561591065538156E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999867604001897	WITHOUT_CLASSIFICATION	1.3239599810334244E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9998746331236579	WITHOUT_CLASSIFICATION	1.2536687634207255E-4	TEST
ignore	WITHOUT_CLASSIFICATION	0.9998746331236579	WITHOUT_CLASSIFICATION	1.2536687634207255E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9998550912404424	WITHOUT_CLASSIFICATION	1.4490875955762731E-4	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999525593866575	WITHOUT_CLASSIFICATION	4.744061334252607E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9998873871799729	WITHOUT_CLASSIFICATION	1.1261282002701538E-4	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999595539762958	WITHOUT_CLASSIFICATION	4.044602370425605E-5	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999900720947088	WITHOUT_CLASSIFICATION	9.92790529120112E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9991371706074434	WITHOUT_CLASSIFICATION	8.628293925565222E-4	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999076572161327	WITHOUT_CLASSIFICATION	9.234278386722078E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999947437623542	WITHOUT_CLASSIFICATION	5.25623764570163E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999233791645524	WITHOUT_CLASSIFICATION	7.662083544759223E-5	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999881937287023	WITHOUT_CLASSIFICATION	1.1806271297754212E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996560674157451	WITHOUT_CLASSIFICATION	3.4393258425488663E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996560674157451	WITHOUT_CLASSIFICATION	3.4393258425488663E-4	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999306149490473	WITHOUT_CLASSIFICATION	6.938505095269809E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99984475224956	WITHOUT_CLASSIFICATION	1.5524775044000561E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9998450546708763	WITHOUT_CLASSIFICATION	1.5494532912381696E-4	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998679288712318	WITHOUT_CLASSIFICATION	1.3207112876833957E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999678339338609	WITHOUT_CLASSIFICATION	3.216606613920945E-5	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999006514475618	WITHOUT_CLASSIFICATION	9.934855243816447E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999202673887085	WITHOUT_CLASSIFICATION	7.973261129150322E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999777487749103	WITHOUT_CLASSIFICATION	2.225122508970416E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998210508036315	WITHOUT_CLASSIFICATION	1.7894919636858038E-4	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9997079815241554	WITHOUT_CLASSIFICATION	2.9201847584465926E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999353532160791	WITHOUT_CLASSIFICATION	6.464678392095861E-5	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9998895091596074	WITHOUT_CLASSIFICATION	1.1049084039259203E-4	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998289164858607	WITHOUT_CLASSIFICATION	1.7108351413933805E-4	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998655853859448	WITHOUT_CLASSIFICATION	1.344146140552481E-4	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999849639009208	WITHOUT_CLASSIFICATION	1.5036099079087775E-5	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998917833905049	WITHOUT_CLASSIFICATION	1.0821660949519818E-4	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998565817993886	WITHOUT_CLASSIFICATION	1.4341820061134142E-4	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999839057844693	WITHOUT_CLASSIFICATION	1.6094215530785204E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9998131868066872	WITHOUT_CLASSIFICATION	1.8681319331288114E-4	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999497158287576	WITHOUT_CLASSIFICATION	5.028417124234914E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996272694279226	WITHOUT_CLASSIFICATION	3.727305720774016E-4	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996272694279226	WITHOUT_CLASSIFICATION	3.727305720774016E-4	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999428873042661	WITHOUT_CLASSIFICATION	5.711269573389615E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999989657444415	WITHOUT_CLASSIFICATION	1.034255558500238E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998564437904305	WITHOUT_CLASSIFICATION	1.435562095695093E-4	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9993901198140008	WITHOUT_CLASSIFICATION	6.098801859992088E-4	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9995063887384565	WITHOUT_CLASSIFICATION	4.936112615433544E-4	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999087754539273	WITHOUT_CLASSIFICATION	9.12245460727055E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999464036667995	WITHOUT_CLASSIFICATION	5.359633320055823E-5	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999976999521725	WITHOUT_CLASSIFICATION	2.3000478276133136E-6	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999154960065159	WITHOUT_CLASSIFICATION	8.45039934841746E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998322798581851	WITHOUT_CLASSIFICATION	1.6772014181479832E-4	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610970673425	WITHOUT_CLASSIFICATION	1.3890293265746037E-4	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9993144355349958	WITHOUT_CLASSIFICATION	6.855644650041235E-4	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999854954067038	WITHOUT_CLASSIFICATION	1.4504593296187726E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9997013108550581	WITHOUT_CLASSIFICATION	2.986891449418712E-4	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9995551317607856	WITHOUT_CLASSIFICATION	4.4486823921431406E-4	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999800017190739	WITHOUT_CLASSIFICATION	1.9998280926038045E-5	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999980913915565	WITHOUT_CLASSIFICATION	1.908608443538976E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999953523022703	WITHOUT_CLASSIFICATION	4.6476977297075217E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998002269134352	WITHOUT_CLASSIFICATION	1.9977308656473337E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9996823789090932	WITHOUT_CLASSIFICATION	3.176210909068156E-4	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999253588988126	WITHOUT_CLASSIFICATION	7.464110118745882E-5	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9997740044383355	WITHOUT_CLASSIFICATION	2.25995561664438E-4	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999639661685158	WITHOUT_CLASSIFICATION	3.603383148431478E-5	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9990778309521579	WITHOUT_CLASSIFICATION	9.221690478420743E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997924869153764	WITHOUT_CLASSIFICATION	2.0751308462362299E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997924869153764	WITHOUT_CLASSIFICATION	2.0751308462362299E-4	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999849395920904	WITHOUT_CLASSIFICATION	1.506040790959913E-4	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998683730544876	WITHOUT_CLASSIFICATION	1.3162694551248913E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998334229969933	WITHOUT_CLASSIFICATION	1.6657700300675492E-4	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999913881388656	WITHOUT_CLASSIFICATION	8.611861134405659E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247587801261	WITHOUT_CLASSIFICATION	7.524121987393954E-5	TEST
