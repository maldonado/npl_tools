test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996089408907979	WITHOUT_CLASSIFICATION	3.9105910920205655E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9990101297409435	WITHOUT_CLASSIFICATION	9.898702590564862E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999759205211749	WITHOUT_CLASSIFICATION	2.407947882506647E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999888632485997	WITHOUT_CLASSIFICATION	1.1136751400224225E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999967710084366	WITHOUT_CLASSIFICATION	3.228991563312676E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999967710084366	WITHOUT_CLASSIFICATION	3.228991563312676E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999993239049679	WITHOUT_CLASSIFICATION	6.760950321758087E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994157050385	WITHOUT_CLASSIFICATION	5.842949614959044E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999933856143361	WITHOUT_CLASSIFICATION	6.614385663855874E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999753637480023	WITHOUT_CLASSIFICATION	2.463625199767324E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9998415201862221	WITHOUT_CLASSIFICATION	1.584798137779889E-4	TEST
double	WITHOUT_CLASSIFICATION	0.9998415201862221	WITHOUT_CLASSIFICATION	1.584798137779889E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9994619358300592	WITHOUT_CLASSIFICATION	5.380641699408336E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999969013953749	WITHOUT_CLASSIFICATION	3.098604625044494E-6	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999922711459026	WITHOUT_CLASSIFICATION	7.728854097374722E-6	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999920207123546	WITHOUT_CLASSIFICATION	7.979287645382513E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999991311802966	WITHOUT_CLASSIFICATION	8.688197034589893E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9974333271649362	WITHOUT_CLASSIFICATION	0.0025666728350638005	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.999618059019779	WITHOUT_CLASSIFICATION	3.8194098022103535E-4	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9982391461651817	WITHOUT_CLASSIFICATION	0.001760853834818278	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9979196524166893	WITHOUT_CLASSIFICATION	0.0020803475833107068	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999993465794793	WITHOUT_CLASSIFICATION	6.534205207188354E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9994332942719033	WITHOUT_CLASSIFICATION	5.667057280966486E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9989295036528895	WITHOUT_CLASSIFICATION	0.001070496347110588	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986357998907	WITHOUT_CLASSIFICATION	1.3642001093129504E-6	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991732872598146	WITHOUT_CLASSIFICATION	8.267127401854796E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991732872598146	WITHOUT_CLASSIFICATION	8.267127401854796E-4	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999986054008183	WITHOUT_CLASSIFICATION	1.394599181625823E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9983613280701116	WITHOUT_CLASSIFICATION	0.0016386719298883286	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999508040983	WITHOUT_CLASSIFICATION	4.919590170475529E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998745590665	WITHOUT_CLASSIFICATION	1.254409334491846E-7	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999954129067546	WITHOUT_CLASSIFICATION	4.587093245370807E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998107521041	WITHOUT_CLASSIFICATION	1.8924789594714127E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999964391346184	WITHOUT_CLASSIFICATION	3.560865381464218E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999988024974864	WITHOUT_CLASSIFICATION	1.1975025136433263E-6	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999924627831	WITHOUT_CLASSIFICATION	7.537216885229075E-9	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999932157760492	WITHOUT_CLASSIFICATION	6.784223950735332E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999929000316895	WITHOUT_CLASSIFICATION	7.099968310504256E-6	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999982593474517	WITHOUT_CLASSIFICATION	1.7406525483005158E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999997752236893	WITHOUT_CLASSIFICATION	2.2477631057151149E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977747605676	WITHOUT_CLASSIFICATION	2.2252394323324674E-6	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999973064278065	WITHOUT_CLASSIFICATION	2.693572193529769E-6	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909467351655	WITHOUT_CLASSIFICATION	9.053264834378278E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999539215546067	WITHOUT_CLASSIFICATION	4.6078445393253395E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999999511846173	WITHOUT_CLASSIFICATION	4.881538269216639E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999822443349964	WITHOUT_CLASSIFICATION	1.7755665003646044E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999647584039955	WITHOUT_CLASSIFICATION	3.524159600448803E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999511727093	WITHOUT_CLASSIFICATION	4.882729066246201E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999873572328406	WITHOUT_CLASSIFICATION	1.2642767159436461E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999647584039955	WITHOUT_CLASSIFICATION	3.524159600448803E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999873572328406	WITHOUT_CLASSIFICATION	1.2642767159436461E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999609968556292	WITHOUT_CLASSIFICATION	3.900314437072885E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9997197403026268	WITHOUT_CLASSIFICATION	2.8025969737324665E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999880879072119	WITHOUT_CLASSIFICATION	1.191209278804973E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999931932497536	WITHOUT_CLASSIFICATION	6.806750246418332E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999965950923356	WITHOUT_CLASSIFICATION	3.4049076643189817E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999951307541193	WITHOUT_CLASSIFICATION	4.869245880716205E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999962000108903	WITHOUT_CLASSIFICATION	3.7999891097698825E-6	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999606187063961	WITHOUT_CLASSIFICATION	3.938129360383332E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999981966289866	WITHOUT_CLASSIFICATION	1.8033710133723321E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9993610471453325	WITHOUT_CLASSIFICATION	6.389528546674651E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999898237125467	WITHOUT_CLASSIFICATION	1.0176287453250346E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999873572328406	WITHOUT_CLASSIFICATION	1.2642767159436461E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999905491031702	WITHOUT_CLASSIFICATION	9.45089682972563E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999937719832439	WITHOUT_CLASSIFICATION	6.228016756143953E-6	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999942958984701	WITHOUT_CLASSIFICATION	5.704101529886499E-6	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9996206436358249	WITHOUT_CLASSIFICATION	3.793563641749889E-4	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999906863229118	WITHOUT_CLASSIFICATION	9.313677088113147E-6	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999995635425635	WITHOUT_CLASSIFICATION	4.3645743654618087E-7	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999723421821405	WITHOUT_CLASSIFICATION	2.7657817859551306E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999896242609762	WITHOUT_CLASSIFICATION	1.0375739023848717E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999866255173228	WITHOUT_CLASSIFICATION	1.3374482677287915E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999987784966311	WITHOUT_CLASSIFICATION	1.2215033688886903E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.99999718057832	WITHOUT_CLASSIFICATION	2.819421680024792E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999929126256143	WITHOUT_CLASSIFICATION	7.087374385791116E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999992174589762	WITHOUT_CLASSIFICATION	7.825410236404067E-7	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993232167891	WITHOUT_CLASSIFICATION	6.767832109714075E-7	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999084655682	WITHOUT_CLASSIFICATION	9.15344318379787E-8	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999997146649536	WITHOUT_CLASSIFICATION	2.8533504641336607E-7	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999937120008325	WITHOUT_CLASSIFICATION	6.287999167483239E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999986409013196	WITHOUT_CLASSIFICATION	1.359098680385969E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999967658241224	WITHOUT_CLASSIFICATION	3.2341758775969764E-5	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999981529758709	WITHOUT_CLASSIFICATION	1.8470241291079681E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999930360802797	WITHOUT_CLASSIFICATION	6.963919720298247E-6	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999985773141646	WITHOUT_CLASSIFICATION	1.4226858353233778E-6	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999974353648239	WITHOUT_CLASSIFICATION	2.564635176115778E-6	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996664323552	WITHOUT_CLASSIFICATION	3.335676448373519E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999985773141646	WITHOUT_CLASSIFICATION	1.4226858353233778E-6	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997637056981	WITHOUT_CLASSIFICATION	2.3629430201362968E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999992391758054	WITHOUT_CLASSIFICATION	7.608241947278769E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999647584039955	WITHOUT_CLASSIFICATION	3.524159600448803E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999975179626869	WITHOUT_CLASSIFICATION	2.482037313140328E-6	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999955815151684	WITHOUT_CLASSIFICATION	4.418484831554254E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999980395666587	WITHOUT_CLASSIFICATION	1.960433341420007E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999980395666587	WITHOUT_CLASSIFICATION	1.960433341420007E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999705001234798	WITHOUT_CLASSIFICATION	2.9499876520286105E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999997116342688	WITHOUT_CLASSIFICATION	2.8836573119573834E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999988831520973	WITHOUT_CLASSIFICATION	1.116847902771706E-6	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999982372814957	WITHOUT_CLASSIFICATION	1.7627185042690025E-6	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999978596087853	WITHOUT_CLASSIFICATION	2.140391214842314E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999930387102443	WITHOUT_CLASSIFICATION	6.961289755778695E-6	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999933075092292	WITHOUT_CLASSIFICATION	6.692490770862945E-6	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999924626889903	WITHOUT_CLASSIFICATION	7.537311009727352E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999659423390338	WITHOUT_CLASSIFICATION	3.40576609661689E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999966946998935	WITHOUT_CLASSIFICATION	3.3053001065270668E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979274783318	WITHOUT_CLASSIFICATION	2.0725216682240655E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979274783318	WITHOUT_CLASSIFICATION	2.0725216682240655E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998101859182	WITHOUT_CLASSIFICATION	1.898140816454746E-7	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999984385566139	WITHOUT_CLASSIFICATION	1.5614433860777337E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998826676496657	WITHOUT_CLASSIFICATION	1.1733235033426943E-4	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979274783318	WITHOUT_CLASSIFICATION	2.0725216682240655E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998101859182	WITHOUT_CLASSIFICATION	1.898140816454746E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998101859182	WITHOUT_CLASSIFICATION	1.898140816454746E-7	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998186984369375	WITHOUT_CLASSIFICATION	1.8130156306244593E-4	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999948689091721	WITHOUT_CLASSIFICATION	5.131090827929368E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997498539255	WITHOUT_CLASSIFICATION	2.501460745301908E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999493900881282	WITHOUT_CLASSIFICATION	5.0609911871822954E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999934450372845	WITHOUT_CLASSIFICATION	6.554962715470464E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999934450372845	WITHOUT_CLASSIFICATION	6.554962715470464E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999954893336686	WITHOUT_CLASSIFICATION	4.510666331454362E-6	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999715016753717	WITHOUT_CLASSIFICATION	2.849832462824075E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999467249695189	WITHOUT_CLASSIFICATION	5.3275030481112596E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999966671483346	WITHOUT_CLASSIFICATION	3.3328516654091154E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999966671483346	WITHOUT_CLASSIFICATION	3.3328516654091154E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999938755583879	WITHOUT_CLASSIFICATION	6.12444161207909E-6	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969397270119	WITHOUT_CLASSIFICATION	3.0602729881645603E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999984368457183	WITHOUT_CLASSIFICATION	1.5631542817117529E-6	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999950668667668	WITHOUT_CLASSIFICATION	4.933133233264991E-6	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999721784527296	WITHOUT_CLASSIFICATION	2.7821547270550692E-5	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998729902837	WITHOUT_CLASSIFICATION	1.2700971628851994E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999978833347244	WITHOUT_CLASSIFICATION	2.116665275667013E-6	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999982618843251	WITHOUT_CLASSIFICATION	1.7381156749875507E-6	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999951879843203	WITHOUT_CLASSIFICATION	4.812015679741798E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999984368457183	WITHOUT_CLASSIFICATION	1.5631542817117529E-6	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999642483380597	WITHOUT_CLASSIFICATION	3.5751661940262935E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999900428635849	WITHOUT_CLASSIFICATION	9.957136415094139E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999900428635849	WITHOUT_CLASSIFICATION	9.957136415094139E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999978753445297	WITHOUT_CLASSIFICATION	2.124655470295893E-6	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999332219008608	WITHOUT_CLASSIFICATION	6.67780991391785E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999992816032711	WITHOUT_CLASSIFICATION	7.183967289165475E-7	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991959857455	WITHOUT_CLASSIFICATION	8.040142544152073E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999982005673315	WITHOUT_CLASSIFICATION	1.7994326685113525E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.999990393606233	WITHOUT_CLASSIFICATION	9.606393767039831E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999688693322064	WITHOUT_CLASSIFICATION	3.1130667793629525E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999953553088735	WITHOUT_CLASSIFICATION	4.644691126478588E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999988821532969	WITHOUT_CLASSIFICATION	1.1178467030328124E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990004028092	WITHOUT_CLASSIFICATION	9.995971908652947E-7	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990004028092	WITHOUT_CLASSIFICATION	9.995971908652947E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996089408907979	WITHOUT_CLASSIFICATION	3.9105910920205655E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999981722162866	WITHOUT_CLASSIFICATION	1.8277837133692958E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999759797120656	WITHOUT_CLASSIFICATION	2.402028793435231E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999748010814021	WITHOUT_CLASSIFICATION	2.5198918597850484E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999777288145867	WITHOUT_CLASSIFICATION	2.2271185413381962E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.999993133937832	WITHOUT_CLASSIFICATION	6.8660621680595415E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999671104572289	WITHOUT_CLASSIFICATION	3.288954277112981E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999953831489418	WITHOUT_CLASSIFICATION	4.616851058185895E-6	TEST
new	WITHOUT_CLASSIFICATION	0.9991444429353542	WITHOUT_CLASSIFICATION	8.555570646457037E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.9987884531299994	WITHOUT_CLASSIFICATION	0.0012115468700006347	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999910229755368	WITHOUT_CLASSIFICATION	8.977024463260545E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999759205211749	WITHOUT_CLASSIFICATION	2.407947882506647E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999800270087686	WITHOUT_CLASSIFICATION	1.9972991231461855E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999800270087686	WITHOUT_CLASSIFICATION	1.9972991231461855E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999932991991187	WITHOUT_CLASSIFICATION	6.700800881295568E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9995839285512403	WITHOUT_CLASSIFICATION	4.1607144875971066E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999984268133157	WITHOUT_CLASSIFICATION	1.5731866842637044E-6	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999831011986108	WITHOUT_CLASSIFICATION	1.6898801389257556E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999911800710153	WITHOUT_CLASSIFICATION	8.819928984741646E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999896824714006	WITHOUT_CLASSIFICATION	1.0317528599398924E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999967710084366	WITHOUT_CLASSIFICATION	3.228991563312676E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999984843492498	WITHOUT_CLASSIFICATION	1.5156507502422605E-6	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998665702355451	WITHOUT_CLASSIFICATION	1.334297644547475E-4	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999992104053008	WITHOUT_CLASSIFICATION	7.895946992051992E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999970195829551	WITHOUT_CLASSIFICATION	2.9804170448598514E-6	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999394058022456	WITHOUT_CLASSIFICATION	6.0594197754431E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9997690581120219	WITHOUT_CLASSIFICATION	2.309418879780639E-4	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999741672823746	WITHOUT_CLASSIFICATION	2.5832717625463606E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999993473627233	WITHOUT_CLASSIFICATION	6.526372766395833E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999980182705811	WITHOUT_CLASSIFICATION	1.9817294188347465E-6	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999979299366901	WITHOUT_CLASSIFICATION	2.070063309815273E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999989415808102	WITHOUT_CLASSIFICATION	1.058419189856585E-6	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999954719975721	WITHOUT_CLASSIFICATION	4.528002427874164E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9997647011449868	WITHOUT_CLASSIFICATION	2.3529885501330638E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9987884531299994	WITHOUT_CLASSIFICATION	0.0012115468700006347	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999800270087686	WITHOUT_CLASSIFICATION	1.9972991231461855E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999741672823746	WITHOUT_CLASSIFICATION	2.5832717625463606E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999993239049679	WITHOUT_CLASSIFICATION	6.760950321758087E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999973960633481	WITHOUT_CLASSIFICATION	2.6039366517926986E-6	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999870790052781	WITHOUT_CLASSIFICATION	1.2920994721973305E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999926399046475	WITHOUT_CLASSIFICATION	7.360095352483821E-6	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999316917764792	WITHOUT_CLASSIFICATION	6.830822352078566E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999975014251368	WITHOUT_CLASSIFICATION	2.498574863237651E-6	TEST
athrow	WITHOUT_CLASSIFICATION	0.9997558302536144	WITHOUT_CLASSIFICATION	2.441697463855922E-4	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999956894275194	WITHOUT_CLASSIFICATION	4.310572480661381E-6	TEST
swallow	WITHOUT_CLASSIFICATION	0.9998030569902304	WITHOUT_CLASSIFICATION	1.9694300976969844E-4	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999428350917106	WITHOUT_CLASSIFICATION	5.716490828938746E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996972604238519	WITHOUT_CLASSIFICATION	3.027395761481965E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996972604238519	WITHOUT_CLASSIFICATION	3.027395761481965E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999962710197042	WITHOUT_CLASSIFICATION	3.7289802957571145E-6	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999994103983656	WITHOUT_CLASSIFICATION	5.896016344146393E-7	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998978238765684	WITHOUT_CLASSIFICATION	1.0217612343164923E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999499330451345	WITHOUT_CLASSIFICATION	5.006695486554827E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999978570437834	WITHOUT_CLASSIFICATION	2.14295621649335E-6	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999992514571633	WITHOUT_CLASSIFICATION	7.485428366726556E-7	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999703717913735	WITHOUT_CLASSIFICATION	2.9628208626496848E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994157050385	WITHOUT_CLASSIFICATION	5.842949614959044E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9998729565020159	WITHOUT_CLASSIFICATION	1.2704349798416437E-4	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999935206453318	WITHOUT_CLASSIFICATION	6.479354668230581E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999935206453318	WITHOUT_CLASSIFICATION	6.479354668230581E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999942331150773	WITHOUT_CLASSIFICATION	5.7668849227455575E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999931870809119	WITHOUT_CLASSIFICATION	6.812919088167316E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999881329643107	WITHOUT_CLASSIFICATION	1.1867035689253566E-5	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999990537093013	WITHOUT_CLASSIFICATION	9.462906986737009E-7	TEST
int	WITHOUT_CLASSIFICATION	0.9996591375839443	WITHOUT_CLASSIFICATION	3.4086241605563796E-4	TEST
return	WITHOUT_CLASSIFICATION	0.9999602460326061	WITHOUT_CLASSIFICATION	3.975396739384501E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9987884531299994	WITHOUT_CLASSIFICATION	0.0012115468700006347	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999759205211749	WITHOUT_CLASSIFICATION	2.407947882506647E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999741672823746	WITHOUT_CLASSIFICATION	2.5832717625463606E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999741672823746	WITHOUT_CLASSIFICATION	2.5832717625463606E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992010802659	WITHOUT_CLASSIFICATION	7.98919734155601E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992010802659	WITHOUT_CLASSIFICATION	7.98919734155601E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999878178734946	WITHOUT_CLASSIFICATION	1.218212650537403E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9997880510553594	WITHOUT_CLASSIFICATION	2.1194894464061746E-4	TEST
load_1	WITHOUT_CLASSIFICATION	0.9997880510553594	WITHOUT_CLASSIFICATION	2.1194894464061746E-4	TEST
putfield	WITHOUT_CLASSIFICATION	0.999944663645995	WITHOUT_CLASSIFICATION	5.533635400501934E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999905827101605	WITHOUT_CLASSIFICATION	9.417289839607437E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999533033560144	WITHOUT_CLASSIFICATION	4.669664398554783E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999934750536197	WITHOUT_CLASSIFICATION	6.524946380337801E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999964290032922	WITHOUT_CLASSIFICATION	3.5709967076931082E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999753637480023	WITHOUT_CLASSIFICATION	2.463625199767324E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999753637480023	WITHOUT_CLASSIFICATION	2.463625199767324E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9999660535718031	WITHOUT_CLASSIFICATION	3.394642819692359E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999809870746726	WITHOUT_CLASSIFICATION	1.901292532727163E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9998879617088202	WITHOUT_CLASSIFICATION	1.1203829117986443E-4	TEST
byte	WITHOUT_CLASSIFICATION	0.9995850500283625	WITHOUT_CLASSIFICATION	4.149499716374696E-4	TEST
char	WITHOUT_CLASSIFICATION	0.9994461581068438	WITHOUT_CLASSIFICATION	5.538418931562104E-4	TEST
short	WITHOUT_CLASSIFICATION	0.9998244259318256	WITHOUT_CLASSIFICATION	1.755740681742913E-4	TEST
double	WITHOUT_CLASSIFICATION	0.9998415201862221	WITHOUT_CLASSIFICATION	1.584798137779889E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998140765386737	WITHOUT_CLASSIFICATION	1.85923461326312E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998140765386737	WITHOUT_CLASSIFICATION	1.85923461326312E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9994619358300592	WITHOUT_CLASSIFICATION	5.380641699408336E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9994619358300592	WITHOUT_CLASSIFICATION	5.380641699408336E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999734388249305	WITHOUT_CLASSIFICATION	2.6561175069553322E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999734388249305	WITHOUT_CLASSIFICATION	2.6561175069553322E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999892364499636	WITHOUT_CLASSIFICATION	1.0763550036339263E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999892364499636	WITHOUT_CLASSIFICATION	1.0763550036339263E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999753637480023	WITHOUT_CLASSIFICATION	2.463625199767324E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9998415201862221	WITHOUT_CLASSIFICATION	1.584798137779889E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998140765386737	WITHOUT_CLASSIFICATION	1.85923461326312E-4	TEST
float	WITHOUT_CLASSIFICATION	0.9998140765386737	WITHOUT_CLASSIFICATION	1.85923461326312E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9994619358300592	WITHOUT_CLASSIFICATION	5.380641699408336E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999734388249305	WITHOUT_CLASSIFICATION	2.6561175069553322E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999734388249305	WITHOUT_CLASSIFICATION	2.6561175069553322E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999892364499636	WITHOUT_CLASSIFICATION	1.0763550036339263E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999991582132457	WITHOUT_CLASSIFICATION	8.417867542671239E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999989218298047	WITHOUT_CLASSIFICATION	1.0781701952985735E-5	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999935103613832	WITHOUT_CLASSIFICATION	6.489638616805368E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999381080493107	WITHOUT_CLASSIFICATION	6.189195068934537E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999783957447044	WITHOUT_CLASSIFICATION	2.1604255295670507E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9995431002481407	WITHOUT_CLASSIFICATION	4.5689975185937026E-4	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999996977385405	WITHOUT_CLASSIFICATION	3.022614595437931E-7	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999924718034878	WITHOUT_CLASSIFICATION	7.528196512145063E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999991672192252	WITHOUT_CLASSIFICATION	8.327807747613038E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999914559376313	WITHOUT_CLASSIFICATION	8.544062368737268E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999999169803909	WITHOUT_CLASSIFICATION	8.301960910519767E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999970576237673	WITHOUT_CLASSIFICATION	2.942376232804827E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999705001234798	WITHOUT_CLASSIFICATION	2.9499876520286105E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9995431002481407	WITHOUT_CLASSIFICATION	4.5689975185937026E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9995431002481407	WITHOUT_CLASSIFICATION	4.5689975185937026E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9995431002481407	WITHOUT_CLASSIFICATION	4.5689975185937026E-4	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999979375390582	WITHOUT_CLASSIFICATION	2.062460941700923E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999998093519247	WITHOUT_CLASSIFICATION	1.9064807530247065E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999998093519247	WITHOUT_CLASSIFICATION	1.9064807530247065E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997510498106214	WITHOUT_CLASSIFICATION	2.4895018937870457E-4	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999988324177345	WITHOUT_CLASSIFICATION	1.1675822655165177E-6	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999991879377136	WITHOUT_CLASSIFICATION	8.12062286506153E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999985731340244	WITHOUT_CLASSIFICATION	1.4268659755290688E-6	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999985731340244	WITHOUT_CLASSIFICATION	1.4268659755290688E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999991311802966	WITHOUT_CLASSIFICATION	8.688197034589893E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999912511055971	WITHOUT_CLASSIFICATION	8.748894403032636E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999912511055971	WITHOUT_CLASSIFICATION	8.748894403032636E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998462200342952	WITHOUT_CLASSIFICATION	1.5377996570479534E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999984254475724	WITHOUT_CLASSIFICATION	1.5745524274411238E-6	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999977153397713	WITHOUT_CLASSIFICATION	2.284660228792205E-6	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.996678117343971	WITHOUT_CLASSIFICATION	0.0033218826560290574	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9989215681337337	WITHOUT_CLASSIFICATION	0.0010784318662662438	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9976908662413184	WITHOUT_CLASSIFICATION	0.0023091337586815517	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9974333271649362	WITHOUT_CLASSIFICATION	0.0025666728350638005	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9982014691066989	WITHOUT_CLASSIFICATION	0.001798530893301089	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9933722572952876	WITHOUT_CLASSIFICATION	0.006627742704712457	TEST
ID	WITHOUT_CLASSIFICATION	0.997470516650696	WITHOUT_CLASSIFICATION	0.0025294833493040235	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9994529197324096	WITHOUT_CLASSIFICATION	5.470802675904616E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9979196524166893	WITHOUT_CLASSIFICATION	0.0020803475833107068	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999949903893102	WITHOUT_CLASSIFICATION	5.0096106898958885E-6	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997972853928485	WITHOUT_CLASSIFICATION	2.027146071515933E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999917061361056	WITHOUT_CLASSIFICATION	8.293863894352068E-6	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9979196524166893	WITHOUT_CLASSIFICATION	0.0020803475833107068	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999995493451919	WITHOUT_CLASSIFICATION	4.5065480818790245E-7	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997381705495	WITHOUT_CLASSIFICATION	2.6182945050773185E-7	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9991992541316209	WITHOUT_CLASSIFICATION	8.007458683791731E-4	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.999125745115962	WITHOUT_CLASSIFICATION	8.742548840379562E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999723070603554	WITHOUT_CLASSIFICATION	2.7692939644600534E-4	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9994029106006239	WITHOUT_CLASSIFICATION	5.970893993760122E-4	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9993861813889336	WITHOUT_CLASSIFICATION	6.138186110663841E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9989295036528895	WITHOUT_CLASSIFICATION	0.001070496347110588	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998201181413339	WITHOUT_CLASSIFICATION	1.798818586660996E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986357998907	WITHOUT_CLASSIFICATION	1.3642001093129504E-6	TEST
properties	WITHOUT_CLASSIFICATION	0.9999779599501314	WITHOUT_CLASSIFICATION	2.204004986867813E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999908018111145	WITHOUT_CLASSIFICATION	9.198188885430248E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9966728973201919	WITHOUT_CLASSIFICATION	0.0033271026798081687	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9974333271649362	WITHOUT_CLASSIFICATION	0.0025666728350638005	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998201181413339	WITHOUT_CLASSIFICATION	1.798818586660996E-4	TEST
properties	WITHOUT_CLASSIFICATION	0.9999779599501314	WITHOUT_CLASSIFICATION	2.204004986867813E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9966728973201919	WITHOUT_CLASSIFICATION	0.0033271026798081687	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999983375261475	WITHOUT_CLASSIFICATION	1.662473852473012E-6	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9988635546724377	WITHOUT_CLASSIFICATION	0.0011364453275623488	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999502155448	WITHOUT_CLASSIFICATION	4.978445520026638E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991732872598146	WITHOUT_CLASSIFICATION	8.267127401854796E-4	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9993811133547108	WITHOUT_CLASSIFICATION	6.188866452891401E-4	TEST
column index	WITHOUT_CLASSIFICATION	0.9999666720544754	WITHOUT_CLASSIFICATION	3.3327945524475286E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999711583266176	WITHOUT_CLASSIFICATION	2.8841673382377782E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999961581425176	WITHOUT_CLASSIFICATION	3.841857482322518E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9998832252430216	WITHOUT_CLASSIFICATION	1.1677475697830731E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999991200762756	WITHOUT_CLASSIFICATION	8.799237243816615E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999979716639329	WITHOUT_CLASSIFICATION	2.0283360669907396E-6	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999968048185327	WITHOUT_CLASSIFICATION	3.1951814673294252E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999991019479789	WITHOUT_CLASSIFICATION	8.980520210475132E-7	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992314208368	WITHOUT_CLASSIFICATION	7.685791632004001E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9987933676997266	WITHOUT_CLASSIFICATION	0.0012066323002734	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9992059559659185	WITHOUT_CLASSIFICATION	7.940440340815121E-4	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9983613280701116	WITHOUT_CLASSIFICATION	0.0016386719298883286	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999994344987008	WITHOUT_CLASSIFICATION	5.655012991859896E-7	TEST
SORT	WITHOUT_CLASSIFICATION	0.9989012211510315	WITHOUT_CLASSIFICATION	0.0010987788489684618	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998201181413339	WITHOUT_CLASSIFICATION	1.798818586660996E-4	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999966327988443	WITHOUT_CLASSIFICATION	3.367201155721982E-6	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999989394559283	WITHOUT_CLASSIFICATION	1.0605440716295938E-6	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999978501689467	WITHOUT_CLASSIFICATION	2.149831053283174E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9915445208891389	WITHOUT_CLASSIFICATION	0.008455479110860952	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999929670144161	WITHOUT_CLASSIFICATION	7.03298558389838E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999947725406998	WITHOUT_CLASSIFICATION	5.2274593002274416E-6	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999930855507	WITHOUT_CLASSIFICATION	6.914449292122434E-9	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999992383580146	WITHOUT_CLASSIFICATION	7.616419853789489E-7	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999412913402097	WITHOUT_CLASSIFICATION	5.8708659790418875E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9986789908618554	WITHOUT_CLASSIFICATION	0.0013210091381445509	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994400185722809	WITHOUT_CLASSIFICATION	5.59981427719067E-4	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995654785830336	WITHOUT_CLASSIFICATION	4.345214169664673E-4	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999986443240243	WITHOUT_CLASSIFICATION	1.3556759756109214E-6	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998745590665	WITHOUT_CLASSIFICATION	1.254409334491846E-7	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999982996291547	WITHOUT_CLASSIFICATION	1.700370845258015E-6	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999988835442741	WITHOUT_CLASSIFICATION	1.1164557259280508E-6	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999721501947122	WITHOUT_CLASSIFICATION	2.784980528774282E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999947478122886	WITHOUT_CLASSIFICATION	5.252187711419083E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999961223942343	WITHOUT_CLASSIFICATION	3.877605765743278E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999625926481108	WITHOUT_CLASSIFICATION	3.740735188927628E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999986235796989	WITHOUT_CLASSIFICATION	1.3764203010812638E-6	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999990273163106	WITHOUT_CLASSIFICATION	9.726836893389053E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999966901284195	WITHOUT_CLASSIFICATION	3.309871580502118E-6	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999967233475359	WITHOUT_CLASSIFICATION	3.2766524640520983E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999967128592695	WITHOUT_CLASSIFICATION	3.287140730514856E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999967128592695	WITHOUT_CLASSIFICATION	3.287140730514856E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999908948111567	WITHOUT_CLASSIFICATION	9.10518884338253E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999918700542684	WITHOUT_CLASSIFICATION	8.129945731568826E-6	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.999999775923282	WITHOUT_CLASSIFICATION	2.2407671798003547E-7	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999959102891631	WITHOUT_CLASSIFICATION	4.089710836873407E-6	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999916942759991	WITHOUT_CLASSIFICATION	8.30572400094865E-6	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999982797834942	WITHOUT_CLASSIFICATION	1.7202165058074237E-6	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999979673962213	WITHOUT_CLASSIFICATION	2.0326037787357474E-6	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999980681133586	WITHOUT_CLASSIFICATION	1.931886641515468E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999173858105183	WITHOUT_CLASSIFICATION	8.261418948172487E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999997062046975	WITHOUT_CLASSIFICATION	2.93795302503496E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999677758717728	WITHOUT_CLASSIFICATION	3.222412822718536E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999852898183818	WITHOUT_CLASSIFICATION	1.4710181618224198E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999936689741881	WITHOUT_CLASSIFICATION	6.331025811955674E-6	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999986003959674	WITHOUT_CLASSIFICATION	1.3996040324802816E-6	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999961716975074	WITHOUT_CLASSIFICATION	3.82830249257087E-6	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999991471221642	WITHOUT_CLASSIFICATION	8.528778357458935E-7	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999993662328982	WITHOUT_CLASSIFICATION	6.337671017863283E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999987358536299	WITHOUT_CLASSIFICATION	1.2641463700760665E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819656603827	WITHOUT_CLASSIFICATION	1.8034339617391796E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999991955644877	WITHOUT_CLASSIFICATION	8.044355122493951E-7	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977120311703	WITHOUT_CLASSIFICATION	2.287968829678275E-6	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.999995075802685	WITHOUT_CLASSIFICATION	4.924197315033502E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999537751062825	WITHOUT_CLASSIFICATION	4.622489371748819E-5	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999324383663518	WITHOUT_CLASSIFICATION	6.756163364820686E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999994822505032	WITHOUT_CLASSIFICATION	5.177494967253622E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999931328542075	WITHOUT_CLASSIFICATION	6.867145792487536E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999844795575702	WITHOUT_CLASSIFICATION	1.552044242982337E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999969067014861	WITHOUT_CLASSIFICATION	3.093298513847621E-6	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999997627810628	WITHOUT_CLASSIFICATION	2.3721893720958192E-6	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999809905737312	WITHOUT_CLASSIFICATION	1.9009426268860664E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999991955644877	WITHOUT_CLASSIFICATION	8.044355122493951E-7	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999956410849243	WITHOUT_CLASSIFICATION	4.358915075596894E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999995753892247	WITHOUT_CLASSIFICATION	4.246107753039315E-6	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999964294582561	WITHOUT_CLASSIFICATION	3.5705417439985407E-6	TEST
found	WITHOUT_CLASSIFICATION	0.9997148479984989	WITHOUT_CLASSIFICATION	2.8515200150117125E-4	TEST
found	WITHOUT_CLASSIFICATION	0.9997148479984989	WITHOUT_CLASSIFICATION	2.8515200150117125E-4	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999890779460231	WITHOUT_CLASSIFICATION	1.0922053976886642E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999977697146936	WITHOUT_CLASSIFICATION	2.230285306397671E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9998365200879329	WITHOUT_CLASSIFICATION	1.6347991206707858E-4	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9998365200879329	WITHOUT_CLASSIFICATION	1.6347991206707858E-4	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999966901284195	WITHOUT_CLASSIFICATION	3.309871580502118E-6	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999994732994103	WITHOUT_CLASSIFICATION	5.26700589734292E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999557074161095	WITHOUT_CLASSIFICATION	4.4292583890467445E-5	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999981113080563	WITHOUT_CLASSIFICATION	1.8886919436934435E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999557074161095	WITHOUT_CLASSIFICATION	4.4292583890467445E-5	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999981113080563	WITHOUT_CLASSIFICATION	1.8886919436934435E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999922715453522	WITHOUT_CLASSIFICATION	7.728454647908794E-6	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999217464873578	WITHOUT_CLASSIFICATION	7.825351264219753E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999998052505213	WITHOUT_CLASSIFICATION	1.9474947866170635E-7	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999979574493832	WITHOUT_CLASSIFICATION	2.0425506167691328E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999970249314067	WITHOUT_CLASSIFICATION	2.9750685932660924E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9996469557956928	WITHOUT_CLASSIFICATION	3.5304420430717383E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999962845455682	WITHOUT_CLASSIFICATION	3.7154544318458003E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999962845455682	WITHOUT_CLASSIFICATION	3.7154544318458003E-6	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999882189747349	WITHOUT_CLASSIFICATION	1.1781025265022534E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999925002982769	WITHOUT_CLASSIFICATION	7.499701723137458E-6	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999843432545036	WITHOUT_CLASSIFICATION	1.5656745496398873E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998179872339	WITHOUT_CLASSIFICATION	1.8201276598721682E-7	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999903477727305	WITHOUT_CLASSIFICATION	9.652227269315065E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999726692987887	WITHOUT_CLASSIFICATION	2.7330701211199993E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999837819147015	WITHOUT_CLASSIFICATION	1.6218085298553468E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999048049795464	WITHOUT_CLASSIFICATION	9.519502045358849E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999048049795464	WITHOUT_CLASSIFICATION	9.519502045358849E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999983197648886	WITHOUT_CLASSIFICATION	1.6802351114498906E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999922715453522	WITHOUT_CLASSIFICATION	7.728454647908794E-6	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999966009608811	WITHOUT_CLASSIFICATION	3.399039118894902E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999533677952799	WITHOUT_CLASSIFICATION	4.6632204720063225E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995712109943	WITHOUT_CLASSIFICATION	4.287890057804127E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999821655560075	WITHOUT_CLASSIFICATION	1.783444399239828E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945286413334294	WITHOUT_CLASSIFICATION	0.005471358666570668	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999922715453522	WITHOUT_CLASSIFICATION	7.728454647908794E-6	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999821655560075	WITHOUT_CLASSIFICATION	1.783444399239828E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945286413334294	WITHOUT_CLASSIFICATION	0.005471358666570668	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999997459162111	WITHOUT_CLASSIFICATION	2.54083788917909E-7	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999908517412787	WITHOUT_CLASSIFICATION	9.148258721312937E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999997113972183	WITHOUT_CLASSIFICATION	2.886027816385596E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999922715453522	WITHOUT_CLASSIFICATION	7.728454647908794E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999922715453522	WITHOUT_CLASSIFICATION	7.728454647908794E-6	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999718874312363	WITHOUT_CLASSIFICATION	2.8112568763658093E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999884858061828	WITHOUT_CLASSIFICATION	1.1514193817122631E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999911619674411	WITHOUT_CLASSIFICATION	8.838032558823299E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977747605676	WITHOUT_CLASSIFICATION	2.2252394323324674E-6	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999977120968184	WITHOUT_CLASSIFICATION	2.2879031815031487E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999983483382926	WITHOUT_CLASSIFICATION	1.65166170746295E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999983211437045	WITHOUT_CLASSIFICATION	1.6788562956023288E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999915127358122	WITHOUT_CLASSIFICATION	8.487264187720159E-6	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999983442338164	WITHOUT_CLASSIFICATION	1.655766183500367E-6	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9998546666091549	WITHOUT_CLASSIFICATION	1.4533339084504238E-4	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999996263645157	WITHOUT_CLASSIFICATION	3.7363548427225744E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999960322176704	WITHOUT_CLASSIFICATION	3.967782329548909E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.99997324566139	WITHOUT_CLASSIFICATION	2.6754338610084245E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999962429753039	WITHOUT_CLASSIFICATION	3.757024696065745E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922627179689	WITHOUT_CLASSIFICATION	7.737282031169536E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9963906933037798	WITHOUT_CLASSIFICATION	0.0036093066962201	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977747605676	WITHOUT_CLASSIFICATION	2.2252394323324674E-6	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999892311445708	WITHOUT_CLASSIFICATION	1.0768855429205714E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999987351147829	WITHOUT_CLASSIFICATION	1.2648852171520678E-6	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999989248793892	WITHOUT_CLASSIFICATION	1.075120610740161E-6	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999849310578922	WITHOUT_CLASSIFICATION	1.5068942107848349E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9998485070426665	WITHOUT_CLASSIFICATION	1.5149295733348937E-4	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9998485070426665	WITHOUT_CLASSIFICATION	1.5149295733348937E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977747605676	WITHOUT_CLASSIFICATION	2.2252394323324674E-6	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9830980636830855	WITHOUT_CLASSIFICATION	0.016901936316914522	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996572411644563	WITHOUT_CLASSIFICATION	3.4275883554370673E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998111821521326	WITHOUT_CLASSIFICATION	1.8881784786742002E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999989220115879	WITHOUT_CLASSIFICATION	1.0779884121051474E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999775008505206	WITHOUT_CLASSIFICATION	2.2499149479401068E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999990997139543	WITHOUT_CLASSIFICATION	9.002860457445935E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999992061462519	WITHOUT_CLASSIFICATION	7.938537480513045E-7	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999862136923559	WITHOUT_CLASSIFICATION	1.3786307644181753E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999356518875	WITHOUT_CLASSIFICATION	6.434811253321045E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999933141338918	WITHOUT_CLASSIFICATION	6.685866108243001E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999980405071455	WITHOUT_CLASSIFICATION	1.959492854570271E-6	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999938444082014	WITHOUT_CLASSIFICATION	6.155591798693137E-6	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9994054179240119	WITHOUT_CLASSIFICATION	5.945820759880032E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996040916438	WITHOUT_CLASSIFICATION	3.959083561565863E-7	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998635221512	WITHOUT_CLASSIFICATION	1.3647784880308425E-6	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999530627626	WITHOUT_CLASSIFICATION	4.693723740153462E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999047977648	WITHOUT_CLASSIFICATION	9.520223518539382E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999935282730661	WITHOUT_CLASSIFICATION	6.471726933882418E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976819477471	WITHOUT_CLASSIFICATION	2.3180522528856774E-6	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999998991558876	WITHOUT_CLASSIFICATION	1.008441124067402E-6	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996558111428	WITHOUT_CLASSIFICATION	3.4418885711376605E-7	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999996531659389	WITHOUT_CLASSIFICATION	3.468340610731537E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951350447446	WITHOUT_CLASSIFICATION	4.864955255427863E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870233753945	WITHOUT_CLASSIFICATION	1.297662460553749E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999109624548362	WITHOUT_CLASSIFICATION	8.903754516379777E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860665863254	WITHOUT_CLASSIFICATION	1.393341367456136E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997718345352146	WITHOUT_CLASSIFICATION	2.2816546478545736E-4	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996799615148197	WITHOUT_CLASSIFICATION	3.200384851802174E-4	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997270287570902	WITHOUT_CLASSIFICATION	2.7297124290985266E-4	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472602919514	WITHOUT_CLASSIFICATION	5.273970804873564E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999863263814847	WITHOUT_CLASSIFICATION	1.3673618515381208E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999991363927497	WITHOUT_CLASSIFICATION	8.636072501553309E-7	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741278675934	WITHOUT_CLASSIFICATION	2.587213240662121E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812660868804	WITHOUT_CLASSIFICATION	1.8733913119516606E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961626742105	WITHOUT_CLASSIFICATION	3.837325789441521E-6	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435399663084	WITHOUT_CLASSIFICATION	5.646003369163463E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999871006278528	WITHOUT_CLASSIFICATION	1.2899372147200526E-4	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644239404463	WITHOUT_CLASSIFICATION	3.5576059553733926E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839887009581	WITHOUT_CLASSIFICATION	1.601129904202457E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995847368675382	WITHOUT_CLASSIFICATION	4.152631324617515E-4	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999838823325485	WITHOUT_CLASSIFICATION	1.611766745138373E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996428995779	WITHOUT_CLASSIFICATION	3.571004221024423E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999830068533383	WITHOUT_CLASSIFICATION	1.6993146661665385E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999949620377222	WITHOUT_CLASSIFICATION	5.037962277793827E-6	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999991347073031	WITHOUT_CLASSIFICATION	8.652926969236902E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997764232809673	WITHOUT_CLASSIFICATION	2.2357671903266646E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.999904166205424	WITHOUT_CLASSIFICATION	9.583379457598827E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999977233370853	WITHOUT_CLASSIFICATION	2.2766629147857028E-6	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999999759577863	WITHOUT_CLASSIFICATION	2.4042213699999847E-7	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995630515924241	WITHOUT_CLASSIFICATION	4.3694840757588715E-4	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995076139436084	WITHOUT_CLASSIFICATION	4.923860563916973E-4	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9994412909671581	WITHOUT_CLASSIFICATION	5.587090328419822E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9995340212539292	WITHOUT_CLASSIFICATION	4.659787460708046E-4	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.999774969772237	WITHOUT_CLASSIFICATION	2.2503022776301066E-4	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999851947724138	WITHOUT_CLASSIFICATION	1.4805227586204036E-5	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999995218645759	WITHOUT_CLASSIFICATION	4.781354240891939E-7	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999978711552087	WITHOUT_CLASSIFICATION	2.128844791296741E-6	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.997586164970331	WITHOUT_CLASSIFICATION	0.002413835029669001	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998830553891	WITHOUT_CLASSIFICATION	1.1694461084414976E-7	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585913083189	WITHOUT_CLASSIFICATION	4.140869168107532E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726544832798	WITHOUT_CLASSIFICATION	1.273455167201829E-4	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973965995881	WITHOUT_CLASSIFICATION	2.603400411876813E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607725270744	WITHOUT_CLASSIFICATION	3.922747292550749E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999482001341738	WITHOUT_CLASSIFICATION	5.179986582610708E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999995925264515	WITHOUT_CLASSIFICATION	4.0747354850771524E-7	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999996284621812	WITHOUT_CLASSIFICATION	3.7153781883769354E-7	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999939496067788	WITHOUT_CLASSIFICATION	6.050393221283715E-6	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612177762192	WITHOUT_CLASSIFICATION	3.878222378086152E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999366077372	WITHOUT_CLASSIFICATION	6.339226278176095E-7	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999547954671929	WITHOUT_CLASSIFICATION	4.5204532807026393E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999998099233042	WITHOUT_CLASSIFICATION	1.9007669580466773E-6	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999570254442	WITHOUT_CLASSIFICATION	4.2974555780211994E-8	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999901654461237	WITHOUT_CLASSIFICATION	9.83455387637093E-6	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999993516761666	WITHOUT_CLASSIFICATION	6.483238334538301E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999976102958836	WITHOUT_CLASSIFICATION	2.389704116483013E-6	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999982889484735	WITHOUT_CLASSIFICATION	1.7110515265025634E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997764232809673	WITHOUT_CLASSIFICATION	2.2357671903266646E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999994394465815	WITHOUT_CLASSIFICATION	5.605534184692984E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999994581194913	WITHOUT_CLASSIFICATION	5.418805085810684E-7	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999973424805939	WITHOUT_CLASSIFICATION	2.657519406183495E-6	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999926337218178	WITHOUT_CLASSIFICATION	7.366278182197451E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994467303568	WITHOUT_CLASSIFICATION	5.532696433422895E-7	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999872966789158	WITHOUT_CLASSIFICATION	1.2703321084090958E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999482001341738	WITHOUT_CLASSIFICATION	5.179986582610708E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999934705870659	WITHOUT_CLASSIFICATION	6.529412934128779E-6	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999617443366997	WITHOUT_CLASSIFICATION	3.825566330025049E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999981448749587	WITHOUT_CLASSIFICATION	1.8551250412247167E-6	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999992207522364	WITHOUT_CLASSIFICATION	7.792477636074219E-7	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997901974353	WITHOUT_CLASSIFICATION	2.0980256478238742E-7	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999982616464903	WITHOUT_CLASSIFICATION	1.7383535096969685E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99999964187628	WITHOUT_CLASSIFICATION	3.581237200297166E-7	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999983141591325	WITHOUT_CLASSIFICATION	1.6858408673761922E-6	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999159312239257	WITHOUT_CLASSIFICATION	8.40687760743426E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999956193354959	WITHOUT_CLASSIFICATION	4.38066450416797E-6	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999989311057369	WITHOUT_CLASSIFICATION	1.0688942630992527E-6	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999900389238368	WITHOUT_CLASSIFICATION	9.961076163149364E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999951243043138	WITHOUT_CLASSIFICATION	4.875695686202252E-6	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999520268100833	WITHOUT_CLASSIFICATION	4.797318991678295E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999933865420216	WITHOUT_CLASSIFICATION	6.613457978381807E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999982269516542	WITHOUT_CLASSIFICATION	1.7730483457928296E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999342863535	WITHOUT_CLASSIFICATION	6.571364649913569E-7	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999994944915035	WITHOUT_CLASSIFICATION	5.055084964502741E-7	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999990292633906	WITHOUT_CLASSIFICATION	9.70736609423754E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999964442870312	WITHOUT_CLASSIFICATION	3.555712968755489E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999987540880118	WITHOUT_CLASSIFICATION	1.245911988221076E-6	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999973735970002	WITHOUT_CLASSIFICATION	2.626402999869206E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999868404453076	WITHOUT_CLASSIFICATION	1.3159554692273956E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999964289576829	WITHOUT_CLASSIFICATION	3.571042317114961E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999986271718904	WITHOUT_CLASSIFICATION	1.3728281095657085E-6	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999981493206065	WITHOUT_CLASSIFICATION	1.8506793935163759E-6	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985410926892	WITHOUT_CLASSIFICATION	1.4589073108871096E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997764232809673	WITHOUT_CLASSIFICATION	2.2357671903266646E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999970046525907	WITHOUT_CLASSIFICATION	2.995347409217416E-6	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999656042755012	WITHOUT_CLASSIFICATION	3.439572449874703E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997001120446003	WITHOUT_CLASSIFICATION	2.9988795539973327E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999992545255637	WITHOUT_CLASSIFICATION	7.454744363050032E-6	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999932310697031	WITHOUT_CLASSIFICATION	6.768930296940972E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999916399515557	WITHOUT_CLASSIFICATION	8.360048444320644E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997764232809673	WITHOUT_CLASSIFICATION	2.2357671903266646E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999667388205851	WITHOUT_CLASSIFICATION	3.3261179414910404E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999342863535	WITHOUT_CLASSIFICATION	6.571364649913569E-7	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999892358434564	WITHOUT_CLASSIFICATION	1.0764156543443741E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999982269516542	WITHOUT_CLASSIFICATION	1.7730483457928296E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996486735543	WITHOUT_CLASSIFICATION	3.513264457987077E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998895637549388	WITHOUT_CLASSIFICATION	1.1043624506133242E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998117835933209	WITHOUT_CLASSIFICATION	1.8821640667907255E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999981448749587	WITHOUT_CLASSIFICATION	1.8551250412247167E-6	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999992207522364	WITHOUT_CLASSIFICATION	7.792477636074219E-7	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997901974353	WITHOUT_CLASSIFICATION	2.0980256478238742E-7	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999945559666565	WITHOUT_CLASSIFICATION	5.44403334348322E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999942388062154	WITHOUT_CLASSIFICATION	5.761193784601744E-6	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999953599539638	WITHOUT_CLASSIFICATION	4.64004603618825E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999982269516542	WITHOUT_CLASSIFICATION	1.7730483457928296E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996486735543	WITHOUT_CLASSIFICATION	3.513264457987077E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997764232809673	WITHOUT_CLASSIFICATION	2.2357671903266646E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999982616464903	WITHOUT_CLASSIFICATION	1.7383535096969685E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99999964187628	WITHOUT_CLASSIFICATION	3.581237200297166E-7	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999983141591325	WITHOUT_CLASSIFICATION	1.6858408673761922E-6	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939399649435	WITHOUT_CLASSIFICATION	6.060035056618442E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976554941278	WITHOUT_CLASSIFICATION	2.344505872159804E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999722612210667	WITHOUT_CLASSIFICATION	2.773877893314439E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999007361884	WITHOUT_CLASSIFICATION	9.92638116009574E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999956657198504	WITHOUT_CLASSIFICATION	4.3342801496033696E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999998663326023	WITHOUT_CLASSIFICATION	1.3366739761542625E-7	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995847368675382	WITHOUT_CLASSIFICATION	4.152631324617515E-4	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999884130144746	WITHOUT_CLASSIFICATION	1.1586985525498717E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996116161499744	WITHOUT_CLASSIFICATION	3.88383850025518E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999713956187728	WITHOUT_CLASSIFICATION	2.8604381227160506E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998148984204	WITHOUT_CLASSIFICATION	1.8510157964570832E-7	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985744346616	WITHOUT_CLASSIFICATION	1.4255653383980335E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997718345352146	WITHOUT_CLASSIFICATION	2.2816546478545736E-4	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996799615148197	WITHOUT_CLASSIFICATION	3.200384851802174E-4	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812660868804	WITHOUT_CLASSIFICATION	1.8733913119516606E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985744346616	WITHOUT_CLASSIFICATION	1.4255653383980335E-6	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999989622694205	WITHOUT_CLASSIFICATION	1.037730579554917E-6	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999994625309316	WITHOUT_CLASSIFICATION	5.374690683898962E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516139276087	WITHOUT_CLASSIFICATION	4.83860723913781E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467568640941	WITHOUT_CLASSIFICATION	5.32431359058169E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999924905844929	WITHOUT_CLASSIFICATION	7.509415507128852E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9998001722731436	WITHOUT_CLASSIFICATION	1.9982772685650608E-4	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961626742105	WITHOUT_CLASSIFICATION	3.837325789441521E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644239404463	WITHOUT_CLASSIFICATION	3.5576059553733926E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999570254442	WITHOUT_CLASSIFICATION	4.2974555780211994E-8	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999937626500622	WITHOUT_CLASSIFICATION	6.237349937732384E-6	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999998344526541	WITHOUT_CLASSIFICATION	1.6554734593903536E-7	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999950937520495	WITHOUT_CLASSIFICATION	4.906247950541991E-6	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998654805813788	WITHOUT_CLASSIFICATION	1.3451941862122383E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999976505003956	WITHOUT_CLASSIFICATION	2.3494996044226855E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999994780610703	WITHOUT_CLASSIFICATION	5.21938929726827E-7	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999970676235921	WITHOUT_CLASSIFICATION	2.9323764079193223E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999356518875	WITHOUT_CLASSIFICATION	6.434811253321045E-8	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999997940358177	WITHOUT_CLASSIFICATION	2.0596418229680837E-6	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999973053980514	WITHOUT_CLASSIFICATION	2.694601948611153E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999982867561926	WITHOUT_CLASSIFICATION	1.7132438073047639E-6	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999892684563993	WITHOUT_CLASSIFICATION	1.0731543600619074E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999998262467944	WITHOUT_CLASSIFICATION	1.7375320559268792E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999778697950304	WITHOUT_CLASSIFICATION	2.2130204969577803E-5	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907971077582	WITHOUT_CLASSIFICATION	9.202892241847405E-6	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991498809943	WITHOUT_CLASSIFICATION	8.501190056591748E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999937110977285	WITHOUT_CLASSIFICATION	6.288902271570443E-6	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999922221484226	WITHOUT_CLASSIFICATION	7.777851577417286E-6	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999992189192034	WITHOUT_CLASSIFICATION	7.810807966031477E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999953770022202	WITHOUT_CLASSIFICATION	4.6229977798142106E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969671317158	WITHOUT_CLASSIFICATION	3.0328682841945617E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999967698925823	WITHOUT_CLASSIFICATION	3.2301074175414674E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998839198868	WITHOUT_CLASSIFICATION	1.1608011320262013E-6	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999974458333458	WITHOUT_CLASSIFICATION	2.554166654236155E-6	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999852394181525	WITHOUT_CLASSIFICATION	1.4760581847477357E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999981658584551	WITHOUT_CLASSIFICATION	1.8341415447512952E-6	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999989439826623	WITHOUT_CLASSIFICATION	1.056017337715305E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999951110018044	WITHOUT_CLASSIFICATION	4.888998195532554E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997073754336	WITHOUT_CLASSIFICATION	2.926245663964815E-6	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999914468939576	WITHOUT_CLASSIFICATION	8.553106042394762E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999891434321949	WITHOUT_CLASSIFICATION	1.0856567804982153E-5	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999968686872313	WITHOUT_CLASSIFICATION	3.131312768673244E-6	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999957694272794	WITHOUT_CLASSIFICATION	4.2305727205379395E-6	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999829419604086	WITHOUT_CLASSIFICATION	1.705803959131692E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999802081890306	WITHOUT_CLASSIFICATION	1.9791810969486918E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999469104658801	WITHOUT_CLASSIFICATION	5.3089534119792014E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999998587686931	WITHOUT_CLASSIFICATION	1.412313068990776E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999990969601686	WITHOUT_CLASSIFICATION	9.03039831246325E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999992749065019	WITHOUT_CLASSIFICATION	7.250934981061703E-6	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999003574425	WITHOUT_CLASSIFICATION	9.964255749549832E-8	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999703356309295	WITHOUT_CLASSIFICATION	2.966436907048165E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999629859165157	WITHOUT_CLASSIFICATION	3.701408348420976E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999964408729705	WITHOUT_CLASSIFICATION	3.5591270296327582E-6	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997147354269127	WITHOUT_CLASSIFICATION	2.852645730872832E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999987740635797	WITHOUT_CLASSIFICATION	1.225936420290416E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999730849197225	WITHOUT_CLASSIFICATION	2.691508027745563E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999823536892279	WITHOUT_CLASSIFICATION	1.7646310772104855E-4	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999807842043587	WITHOUT_CLASSIFICATION	1.921579564133033E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9996247647597409	WITHOUT_CLASSIFICATION	3.7523524025912333E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999990174934832	WITHOUT_CLASSIFICATION	9.825065167764516E-7	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.99998686010465	WITHOUT_CLASSIFICATION	1.313989535007727E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999986824012324	WITHOUT_CLASSIFICATION	1.3175987676580417E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999990207574496	WITHOUT_CLASSIFICATION	9.79242550396906E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999998616471981	WITHOUT_CLASSIFICATION	1.3835280190905252E-6	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999929032060434	WITHOUT_CLASSIFICATION	7.096793956714192E-6	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999982465688073	WITHOUT_CLASSIFICATION	1.7534311926226921E-6	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999827833058949	WITHOUT_CLASSIFICATION	1.7216694105135956E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999966765151389	WITHOUT_CLASSIFICATION	3.323484861165639E-6	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999986543502233	WITHOUT_CLASSIFICATION	1.3456497767161012E-6	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999959518984507	WITHOUT_CLASSIFICATION	4.048101549301415E-6	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999718300694211	WITHOUT_CLASSIFICATION	2.8169930578900305E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999997623191932	WITHOUT_CLASSIFICATION	2.3768080695556802E-7	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999994240299174	WITHOUT_CLASSIFICATION	5.759700826212045E-7	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995684260656382	WITHOUT_CLASSIFICATION	4.3157393436172437E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.99999461006829	WITHOUT_CLASSIFICATION	5.3899317099652775E-6	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999978058190669	WITHOUT_CLASSIFICATION	2.1941809329924625E-6	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999954258727061	WITHOUT_CLASSIFICATION	4.574127294001114E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999994819821247	WITHOUT_CLASSIFICATION	5.180178752481364E-7	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999991952460172	WITHOUT_CLASSIFICATION	8.047539828738995E-7	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999822292720958	WITHOUT_CLASSIFICATION	1.777072790419014E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999792342880387	WITHOUT_CLASSIFICATION	2.076571196129402E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996314495823541	WITHOUT_CLASSIFICATION	3.6855041764601867E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999848128098705	WITHOUT_CLASSIFICATION	1.518719012948465E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999654700018842	WITHOUT_CLASSIFICATION	3.452999811585771E-5	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999922135225127	WITHOUT_CLASSIFICATION	7.78647748724543E-6	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999994668715032	WITHOUT_CLASSIFICATION	5.331284968264989E-7	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999982935679849	WITHOUT_CLASSIFICATION	1.7064320151015813E-6	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999982367455508	WITHOUT_CLASSIFICATION	1.7632544492149416E-6	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999903081821458	WITHOUT_CLASSIFICATION	9.691817854259421E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999463451902254	WITHOUT_CLASSIFICATION	5.365480977463186E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999991273826132	WITHOUT_CLASSIFICATION	8.726173868640253E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995823128734	WITHOUT_CLASSIFICATION	4.176871265122533E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999976264859125	WITHOUT_CLASSIFICATION	2.3735140874168073E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999645383473742	WITHOUT_CLASSIFICATION	3.546165262578742E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999994069082004	WITHOUT_CLASSIFICATION	5.930917995897744E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997868341458626	WITHOUT_CLASSIFICATION	2.1316585413737237E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999980227445554	WITHOUT_CLASSIFICATION	1.9772554446560125E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999994579280798	WITHOUT_CLASSIFICATION	5.420719202793978E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999893087511915	WITHOUT_CLASSIFICATION	1.0691248808486309E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933362915447	WITHOUT_CLASSIFICATION	6.6637084552233195E-6	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999917581960273	WITHOUT_CLASSIFICATION	8.24180397273212E-6	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998998832239032	WITHOUT_CLASSIFICATION	1.001167760967117E-4	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993668485915315	WITHOUT_CLASSIFICATION	6.331514084685659E-4	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999958123118285	WITHOUT_CLASSIFICATION	4.18768817140952E-6	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999967792623745	WITHOUT_CLASSIFICATION	3.220737625539998E-6	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.999995462471181	WITHOUT_CLASSIFICATION	4.5375288189864456E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999895283510639	WITHOUT_CLASSIFICATION	1.0471648936091305E-5	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999984732678	WITHOUT_CLASSIFICATION	1.5267322399977263E-9	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999414513432805	WITHOUT_CLASSIFICATION	5.854865671953509E-5	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999528534201959	WITHOUT_CLASSIFICATION	4.714657980414342E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999698445316665	WITHOUT_CLASSIFICATION	3.015546833352576E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999414513432805	WITHOUT_CLASSIFICATION	5.854865671953509E-5	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999949517044431	WITHOUT_CLASSIFICATION	5.048295556942379E-6	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999929176199418	WITHOUT_CLASSIFICATION	7.082380058186113E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999076296262579	WITHOUT_CLASSIFICATION	9.237037374211293E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998986611209058	WITHOUT_CLASSIFICATION	1.0133887909423312E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999994094609569	WITHOUT_CLASSIFICATION	5.905390429836514E-7	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999975044297778	WITHOUT_CLASSIFICATION	2.4955702222431735E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9993208168051324	WITHOUT_CLASSIFICATION	6.791831948677215E-4	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999968807653148	WITHOUT_CLASSIFICATION	3.1192346851891294E-6	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999994228503788	WITHOUT_CLASSIFICATION	5.771496212361966E-7	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9995065477842137	WITHOUT_CLASSIFICATION	4.934522157863367E-4	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999985666053327	WITHOUT_CLASSIFICATION	1.433394667365479E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999781629797615	WITHOUT_CLASSIFICATION	2.1837020238554062E-5	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999908025479136	WITHOUT_CLASSIFICATION	9.197452086393952E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999936148188519	WITHOUT_CLASSIFICATION	6.3851811481298265E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999940460415746	WITHOUT_CLASSIFICATION	5.953958425313515E-6	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999958341059468	WITHOUT_CLASSIFICATION	4.1658940532052205E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999933838565142	WITHOUT_CLASSIFICATION	6.616143485800824E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999933838565142	WITHOUT_CLASSIFICATION	6.616143485800824E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999970615685231	WITHOUT_CLASSIFICATION	2.9384314768390593E-6	TEST
optimization	WITHOUT_CLASSIFICATION	0.9997591381850667	WITHOUT_CLASSIFICATION	2.4086181493344683E-4	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9998995404570253	WITHOUT_CLASSIFICATION	1.0045954297468227E-4	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999772382744258	WITHOUT_CLASSIFICATION	2.2761725574341126E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999985615076887	WITHOUT_CLASSIFICATION	1.4384923112587936E-6	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999493092574544	WITHOUT_CLASSIFICATION	5.0690742545626736E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999879656681293	WITHOUT_CLASSIFICATION	1.2034331870605158E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996608635521	WITHOUT_CLASSIFICATION	3.3913644794472246E-7	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999954388241754	WITHOUT_CLASSIFICATION	4.561175824584799E-6	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998341018815607	WITHOUT_CLASSIFICATION	1.658981184391596E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999984260143604	WITHOUT_CLASSIFICATION	1.5739856395660403E-6	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999670391522	WITHOUT_CLASSIFICATION	3.2960847844643415E-8	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999991380600188	WITHOUT_CLASSIFICATION	8.619399811738096E-7	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999994886977251	WITHOUT_CLASSIFICATION	5.11302274853182E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998451814206	WITHOUT_CLASSIFICATION	1.548185794016344E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999778697950304	WITHOUT_CLASSIFICATION	2.2130204969577803E-5	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999967644802815	WITHOUT_CLASSIFICATION	3.2355197184848878E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999984885154776	WITHOUT_CLASSIFICATION	1.5114845224238045E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999981272176565	WITHOUT_CLASSIFICATION	1.872782343530187E-6	TEST
do the test	WITHOUT_CLASSIFICATION	0.9964152057988184	WITHOUT_CLASSIFICATION	0.003584794201181645	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999995198991155	WITHOUT_CLASSIFICATION	4.80100884445286E-7	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999571461868306	WITHOUT_CLASSIFICATION	4.285381316948473E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999995887823412	WITHOUT_CLASSIFICATION	4.11217658849133E-7	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999984587985231	WITHOUT_CLASSIFICATION	1.5412014768878633E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999993690768801	WITHOUT_CLASSIFICATION	6.309231198000826E-7	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996991200644	WITHOUT_CLASSIFICATION	3.0087993555777803E-7	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999985284837566	WITHOUT_CLASSIFICATION	1.4715162433961304E-6	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999983351648501	WITHOUT_CLASSIFICATION	1.6648351498353965E-6	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999976252747854	WITHOUT_CLASSIFICATION	2.3747252146158227E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9998025589535827	WITHOUT_CLASSIFICATION	1.9744104641733254E-4	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999985210259686	WITHOUT_CLASSIFICATION	1.478974031362665E-6	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999988271830377	WITHOUT_CLASSIFICATION	1.1728169623998162E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9998049470717406	WITHOUT_CLASSIFICATION	1.9505292825935401E-4	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999739343097421	WITHOUT_CLASSIFICATION	2.606569025786762E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999893446567937	WITHOUT_CLASSIFICATION	1.0655343206265393E-5	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999972646356344	WITHOUT_CLASSIFICATION	2.7353643655315237E-6	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999957575114895	WITHOUT_CLASSIFICATION	4.242488510530786E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999932114301321	WITHOUT_CLASSIFICATION	6.7885698679592205E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999954324354366	WITHOUT_CLASSIFICATION	4.567564563389256E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999838425461559	WITHOUT_CLASSIFICATION	1.6157453844115854E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999115212244759	WITHOUT_CLASSIFICATION	8.847877552410894E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999929548765076	WITHOUT_CLASSIFICATION	7.045123492440279E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999997816910993	WITHOUT_CLASSIFICATION	2.1830890075667397E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999999752629456	WITHOUT_CLASSIFICATION	2.473705440393316E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999316116682103	WITHOUT_CLASSIFICATION	6.838833178974552E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999951427356197	WITHOUT_CLASSIFICATION	4.857264380275901E-6	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998106257398927	WITHOUT_CLASSIFICATION	1.8937426010728805E-4	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839980168195	WITHOUT_CLASSIFICATION	1.6001983180466106E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731677711536	WITHOUT_CLASSIFICATION	2.6832228846285597E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999996342050083	WITHOUT_CLASSIFICATION	3.657949916428464E-7	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999986035093503	WITHOUT_CLASSIFICATION	1.396490649653729E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999717988794657	WITHOUT_CLASSIFICATION	2.8201120534183078E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999992847505016	WITHOUT_CLASSIFICATION	7.152494985113373E-7	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999956002871202	WITHOUT_CLASSIFICATION	4.399712879785684E-6	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798471978606	WITHOUT_CLASSIFICATION	1.2015280213933583E-4	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999956002871202	WITHOUT_CLASSIFICATION	4.399712879785684E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999914440569255	WITHOUT_CLASSIFICATION	8.555943074499251E-6	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999930741089925	WITHOUT_CLASSIFICATION	6.925891007497788E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.999970957794367	WITHOUT_CLASSIFICATION	2.904220563296326E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999985989375866	WITHOUT_CLASSIFICATION	1.4010624134000085E-6	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999521162013578	WITHOUT_CLASSIFICATION	4.7883798642087795E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9995971484044295	WITHOUT_CLASSIFICATION	4.028515955704782E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999994140009831	WITHOUT_CLASSIFICATION	5.859990169338591E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999980644586743	WITHOUT_CLASSIFICATION	1.9355413255779147E-6	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999995839125737	WITHOUT_CLASSIFICATION	4.1608742632370655E-7	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999847449467612	WITHOUT_CLASSIFICATION	1.525505323877051E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.99999875045118	WITHOUT_CLASSIFICATION	1.2495488199957785E-6	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999915230858977	WITHOUT_CLASSIFICATION	8.476914102415086E-6	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999816170194931	WITHOUT_CLASSIFICATION	1.8382980506859347E-5	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9989836817619356	WITHOUT_CLASSIFICATION	0.0010163182380643586	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999995843934278	WITHOUT_CLASSIFICATION	4.15606572111091E-7	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999986340610919	WITHOUT_CLASSIFICATION	1.3659389081085126E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999679279729224	WITHOUT_CLASSIFICATION	3.207202707754394E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999679279729224	WITHOUT_CLASSIFICATION	3.207202707754394E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999955018017224	WITHOUT_CLASSIFICATION	4.4981982775332775E-6	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999988088209897	WITHOUT_CLASSIFICATION	1.1911790103664885E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999999441055844	WITHOUT_CLASSIFICATION	5.589441558677192E-7	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999074932031	WITHOUT_CLASSIFICATION	9.250679690560812E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999856225038612	WITHOUT_CLASSIFICATION	1.43774961388373E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999915486374863	WITHOUT_CLASSIFICATION	8.451362513684237E-6	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999948230066771	WITHOUT_CLASSIFICATION	5.176993322841084E-6	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999877150076371	WITHOUT_CLASSIFICATION	1.2284992362921156E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999652605353279	WITHOUT_CLASSIFICATION	3.473946467214465E-5	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999990490940474	WITHOUT_CLASSIFICATION	9.509059525129603E-7	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999955715730274	WITHOUT_CLASSIFICATION	4.428426972523757E-6	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999474804859	WITHOUT_CLASSIFICATION	5.251951403781979E-8	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999994240901873	WITHOUT_CLASSIFICATION	5.759098126478179E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999763482937508	WITHOUT_CLASSIFICATION	2.365170624920959E-5	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999980358521903	WITHOUT_CLASSIFICATION	1.964147809773377E-6	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999974851329002	WITHOUT_CLASSIFICATION	2.5148670997514584E-6	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998195107183	WITHOUT_CLASSIFICATION	1.8048928176841557E-7	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999993035564187	WITHOUT_CLASSIFICATION	6.964435813069065E-6	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999986765368603	WITHOUT_CLASSIFICATION	1.3234631397985853E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997691304503	WITHOUT_CLASSIFICATION	2.3086954981800124E-7	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999930856127879	WITHOUT_CLASSIFICATION	6.91438721201266E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999963236192521	WITHOUT_CLASSIFICATION	3.6763807478700966E-6	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999995819206646	WITHOUT_CLASSIFICATION	4.180793353886133E-7	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999993471947337	WITHOUT_CLASSIFICATION	6.52805266306977E-7	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999965036436959	WITHOUT_CLASSIFICATION	3.496356304232913E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999964484179135	WITHOUT_CLASSIFICATION	3.5515820866320937E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999903836834063	WITHOUT_CLASSIFICATION	9.616316593774682E-6	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999972715581644	WITHOUT_CLASSIFICATION	2.7284418354814E-6	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9995640939625834	WITHOUT_CLASSIFICATION	4.3590603741668467E-4	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999980231882686	WITHOUT_CLASSIFICATION	1.9768117313880073E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999988191636613	WITHOUT_CLASSIFICATION	1.1808363387242706E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999816553144147	WITHOUT_CLASSIFICATION	1.8344685585267786E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999175441562267	WITHOUT_CLASSIFICATION	8.245584377337282E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999880638919181	WITHOUT_CLASSIFICATION	1.193610808191245E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999956475873	WITHOUT_CLASSIFICATION	4.352412699948509E-6	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998767797925	WITHOUT_CLASSIFICATION	1.2322020752531175E-7	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994740190071	WITHOUT_CLASSIFICATION	5.259809927864096E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999848622697127	WITHOUT_CLASSIFICATION	1.5137730287191238E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999991511375085	WITHOUT_CLASSIFICATION	8.488624915094344E-7	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999959189033036	WITHOUT_CLASSIFICATION	4.0810966963558255E-6	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999987343884874	WITHOUT_CLASSIFICATION	1.2656115124995896E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790900056754	WITHOUT_CLASSIFICATION	2.090999432456191E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999857754646636	WITHOUT_CLASSIFICATION	1.422453533633419E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999998812756997	WITHOUT_CLASSIFICATION	1.187243002976761E-7	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998839392619	WITHOUT_CLASSIFICATION	1.160607382417511E-7	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999970890787069	WITHOUT_CLASSIFICATION	2.9109212931041444E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.999998463897176	WITHOUT_CLASSIFICATION	1.536102824109187E-6	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998458606282	WITHOUT_CLASSIFICATION	1.541393718402088E-7	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999969478974184	WITHOUT_CLASSIFICATION	3.052102581630494E-6	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999800352270671	WITHOUT_CLASSIFICATION	1.9964772932804383E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683422266368	WITHOUT_CLASSIFICATION	3.165777336325985E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999981342493771	WITHOUT_CLASSIFICATION	1.8657506229880462E-6	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999941780632126	WITHOUT_CLASSIFICATION	5.821936787349741E-6	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999996138153387	WITHOUT_CLASSIFICATION	3.861846613065016E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999884343488092	WITHOUT_CLASSIFICATION	1.1565651190809895E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999667388205851	WITHOUT_CLASSIFICATION	3.3261179414910404E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999667388205851	WITHOUT_CLASSIFICATION	3.3261179414910404E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999755998054757	WITHOUT_CLASSIFICATION	2.440019452438022E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999993473432932	WITHOUT_CLASSIFICATION	6.52656706806349E-7	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999915805571888	WITHOUT_CLASSIFICATION	8.419442811085807E-6	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999974004056182	WITHOUT_CLASSIFICATION	2.599594381645091E-6	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999999752869689	WITHOUT_CLASSIFICATION	2.4713031098161015E-7	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999996471651371	WITHOUT_CLASSIFICATION	3.5283486291066104E-6	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999997699744346	WITHOUT_CLASSIFICATION	2.3002556527851783E-7	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999999635067603	WITHOUT_CLASSIFICATION	3.6493239694404075E-7	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999827267091962	WITHOUT_CLASSIFICATION	1.7273290803882282E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999997192305945	WITHOUT_CLASSIFICATION	2.8076940548694347E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999999387407213	WITHOUT_CLASSIFICATION	6.125927870236287E-7	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999979201398128	WITHOUT_CLASSIFICATION	2.0798601871478605E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998131312629672	WITHOUT_CLASSIFICATION	1.8686873703267564E-4	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999991441793592	WITHOUT_CLASSIFICATION	8.558206408445284E-7	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999291121367649	WITHOUT_CLASSIFICATION	7.088786323503928E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999785867336229	WITHOUT_CLASSIFICATION	2.1413266376989192E-5	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995581289078	WITHOUT_CLASSIFICATION	4.4187109211110655E-7	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9998925966154018	WITHOUT_CLASSIFICATION	1.0740338459824611E-4	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999995447096133	WITHOUT_CLASSIFICATION	4.5529038670197806E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999930925442689	WITHOUT_CLASSIFICATION	6.907455730986149E-6	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999981071113839	WITHOUT_CLASSIFICATION	1.8928886160387004E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999830762551984	WITHOUT_CLASSIFICATION	1.6923744801572163E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999982304177577	WITHOUT_CLASSIFICATION	1.7695822422430721E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999966778551541	WITHOUT_CLASSIFICATION	3.3221448459251716E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999891498303073	WITHOUT_CLASSIFICATION	1.0850169692762144E-5	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999979603968068	WITHOUT_CLASSIFICATION	2.0396031931821315E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994248784755219	WITHOUT_CLASSIFICATION	5.751215244780031E-4	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999985192809262	WITHOUT_CLASSIFICATION	1.4807190738045864E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999974196548155	WITHOUT_CLASSIFICATION	2.580345184531878E-6	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999959544994	WITHOUT_CLASSIFICATION	4.045500584123094E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.998256405450343	WITHOUT_CLASSIFICATION	0.0017435945496569265	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999912929424631	WITHOUT_CLASSIFICATION	8.707057536893256E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999990898171631	WITHOUT_CLASSIFICATION	9.10182836743287E-7	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998837019015248	WITHOUT_CLASSIFICATION	1.1629809847514925E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999971660361139	WITHOUT_CLASSIFICATION	2.8339638860569375E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999942143708163	WITHOUT_CLASSIFICATION	5.785629183678374E-6	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998520605888466	WITHOUT_CLASSIFICATION	1.4793941115345127E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999912929424631	WITHOUT_CLASSIFICATION	8.707057536893256E-6	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999699615838685	WITHOUT_CLASSIFICATION	3.0038416131345785E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999942143708163	WITHOUT_CLASSIFICATION	5.785629183678374E-6	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999988558339994	WITHOUT_CLASSIFICATION	1.1441660006236802E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997716853682658	WITHOUT_CLASSIFICATION	2.283146317341994E-4	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999987169435068	WITHOUT_CLASSIFICATION	1.2830564931095636E-6	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999955715730274	WITHOUT_CLASSIFICATION	4.428426972523757E-6	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999998804692033	WITHOUT_CLASSIFICATION	1.19530796704185E-6	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.99997564204594	WITHOUT_CLASSIFICATION	2.4357954059994375E-5	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999344555854	WITHOUT_CLASSIFICATION	6.554441460417728E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999973716244028	WITHOUT_CLASSIFICATION	2.6283755972006744E-6	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999701902207345	WITHOUT_CLASSIFICATION	2.9809779265547875E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999912318958161	WITHOUT_CLASSIFICATION	8.768104183930678E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999059639442203	WITHOUT_CLASSIFICATION	9.403605577968833E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999874500348448	WITHOUT_CLASSIFICATION	1.254996515521319E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999690898683354	WITHOUT_CLASSIFICATION	3.091013166460677E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999952960194944	WITHOUT_CLASSIFICATION	4.70398050553968E-6	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995805680615532	WITHOUT_CLASSIFICATION	4.194319384468319E-4	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999997862041683	WITHOUT_CLASSIFICATION	2.1379583171938343E-7	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999993777936464	WITHOUT_CLASSIFICATION	6.222063535675182E-7	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999674125698015	WITHOUT_CLASSIFICATION	3.2587430198494203E-5	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999992261076391	WITHOUT_CLASSIFICATION	7.738923609352147E-7	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999813349136456	WITHOUT_CLASSIFICATION	1.866508635450186E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999971805117023	WITHOUT_CLASSIFICATION	2.819488297750944E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999974222043774	WITHOUT_CLASSIFICATION	2.5777956225119405E-6	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999993017569164	WITHOUT_CLASSIFICATION	6.98243083530696E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999986524781934	WITHOUT_CLASSIFICATION	1.347521806562583E-6	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999980788272181	WITHOUT_CLASSIFICATION	1.9211727818592257E-6	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999969516801142	WITHOUT_CLASSIFICATION	3.0483198859252447E-6	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999997013127232	WITHOUT_CLASSIFICATION	2.986872767256086E-7	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999801850570487	WITHOUT_CLASSIFICATION	1.9814942951371757E-5	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999953806785774	WITHOUT_CLASSIFICATION	4.619321422527328E-6	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9994598228077967	WITHOUT_CLASSIFICATION	5.40177192203334E-4	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999860583711472	WITHOUT_CLASSIFICATION	1.394162885287947E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993858520044	WITHOUT_CLASSIFICATION	6.141479955970762E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924819495352	WITHOUT_CLASSIFICATION	7.518050464817462E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999991709413599	WITHOUT_CLASSIFICATION	8.29058640146763E-7	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999886281333309	WITHOUT_CLASSIFICATION	1.1371866669128838E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999977716471516	WITHOUT_CLASSIFICATION	2.228352848256567E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998316497443	WITHOUT_CLASSIFICATION	1.6835025585085346E-7	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999990015039103	WITHOUT_CLASSIFICATION	9.98496089603782E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999854092884489	WITHOUT_CLASSIFICATION	1.4590711551038428E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999980725049502	WITHOUT_CLASSIFICATION	1.92749504975615E-6	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999997661542057	WITHOUT_CLASSIFICATION	2.33845794299692E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999871197908199	WITHOUT_CLASSIFICATION	1.2880209180091633E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999825662793904	WITHOUT_CLASSIFICATION	1.743372060956653E-5	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999986500186191	WITHOUT_CLASSIFICATION	1.3499813808919395E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999935078282468	WITHOUT_CLASSIFICATION	6.492171753096843E-6	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998806026472	WITHOUT_CLASSIFICATION	1.1939735280946892E-7	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999980481446863	WITHOUT_CLASSIFICATION	1.9518553137717447E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999998464905477	WITHOUT_CLASSIFICATION	1.5350945230812557E-6	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9988346723344738	WITHOUT_CLASSIFICATION	0.0011653276655262924	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999929477008812	WITHOUT_CLASSIFICATION	7.052299118677299E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999900037315078	WITHOUT_CLASSIFICATION	9.996268492275507E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998077382163	WITHOUT_CLASSIFICATION	1.9226178376207367E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999918557410913	WITHOUT_CLASSIFICATION	8.144258908640555E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999894626719387	WITHOUT_CLASSIFICATION	1.0537328061384076E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999990557511427	WITHOUT_CLASSIFICATION	9.442488573004916E-7	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999598499867464	WITHOUT_CLASSIFICATION	4.01500132537028E-5	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999446153919	WITHOUT_CLASSIFICATION	5.53846081989353E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999712077560157	WITHOUT_CLASSIFICATION	2.879224398426875E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999529603803653	WITHOUT_CLASSIFICATION	4.70396196347138E-5	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999885584376853	WITHOUT_CLASSIFICATION	1.1441562314636321E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993858520044	WITHOUT_CLASSIFICATION	6.141479955970762E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999979378574461	WITHOUT_CLASSIFICATION	2.062142553889145E-6	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999188751842	WITHOUT_CLASSIFICATION	8.112481577136781E-8	TEST
switch	WITHOUT_CLASSIFICATION	0.99971442584246	WITHOUT_CLASSIFICATION	2.855741575401031E-4	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999414965881225	WITHOUT_CLASSIFICATION	5.8503411877569606E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999993020152395	WITHOUT_CLASSIFICATION	6.979847606599434E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999996148175857	WITHOUT_CLASSIFICATION	3.851824142629136E-7	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932594510763	WITHOUT_CLASSIFICATION	6.7405489237057764E-6	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999862459564751	WITHOUT_CLASSIFICATION	1.3754043524893619E-5	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999961034839543	WITHOUT_CLASSIFICATION	3.896516045810419E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999974272618964	WITHOUT_CLASSIFICATION	2.5727381036273005E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999991999876804	WITHOUT_CLASSIFICATION	8.000123195903513E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9971801985191704	WITHOUT_CLASSIFICATION	0.002819801480829656	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999967124296842	WITHOUT_CLASSIFICATION	3.2875703158457837E-6	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999709210069816	WITHOUT_CLASSIFICATION	2.9078993018330238E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999914440569255	WITHOUT_CLASSIFICATION	8.555943074499251E-6	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999095289445	WITHOUT_CLASSIFICATION	9.047105555844004E-8	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999251858865	WITHOUT_CLASSIFICATION	7.481411346587635E-8	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999987972543959	WITHOUT_CLASSIFICATION	1.202745604136556E-6	TEST
all clear	WITHOUT_CLASSIFICATION	0.999953103453696	WITHOUT_CLASSIFICATION	4.6896546303864084E-5	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.99999999344408	WITHOUT_CLASSIFICATION	6.555920003667175E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999881914410924	WITHOUT_CLASSIFICATION	1.1808558907591686E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999881914410924	WITHOUT_CLASSIFICATION	1.1808558907591686E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999928473148738	WITHOUT_CLASSIFICATION	7.152685126217944E-6	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999993841317498	WITHOUT_CLASSIFICATION	6.158682500416637E-7	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999987468576833	WITHOUT_CLASSIFICATION	1.253142316595141E-6	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999927007498983	WITHOUT_CLASSIFICATION	7.299250101671256E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999964155373435	WITHOUT_CLASSIFICATION	3.5844626563638847E-6	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997349592453	WITHOUT_CLASSIFICATION	2.650407546487953E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999925838243527	WITHOUT_CLASSIFICATION	7.416175647311012E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999980196698915	WITHOUT_CLASSIFICATION	1.9803301083790814E-6	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999980196698915	WITHOUT_CLASSIFICATION	1.9803301083790814E-6	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999876004078614	WITHOUT_CLASSIFICATION	1.2399592138564294E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999968214753532	WITHOUT_CLASSIFICATION	3.178524646749688E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999944670200829	WITHOUT_CLASSIFICATION	5.5329799171208726E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999968910210898	WITHOUT_CLASSIFICATION	3.1089789102353703E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999968910210898	WITHOUT_CLASSIFICATION	3.1089789102353703E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999968910210898	WITHOUT_CLASSIFICATION	3.1089789102353703E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999992828209091	WITHOUT_CLASSIFICATION	7.17179090840494E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999989268345131	WITHOUT_CLASSIFICATION	1.0731654868461788E-6	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999867209527935	WITHOUT_CLASSIFICATION	1.3279047206585525E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999667782451678	WITHOUT_CLASSIFICATION	3.3221754832188175E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999975084708795	WITHOUT_CLASSIFICATION	2.4915291203929936E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999997928363903	WITHOUT_CLASSIFICATION	2.0716360968794E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999990111351054	WITHOUT_CLASSIFICATION	9.888648947285433E-7	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999586804703792	WITHOUT_CLASSIFICATION	4.1319529620796216E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999979312560993	WITHOUT_CLASSIFICATION	2.0687439007677792E-6	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999368248834	WITHOUT_CLASSIFICATION	6.317511659314678E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.999995326695862	WITHOUT_CLASSIFICATION	4.673304138065477E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999657812274413	WITHOUT_CLASSIFICATION	3.4218772558661226E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999834605065768	WITHOUT_CLASSIFICATION	1.653949342318466E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999986185675983	WITHOUT_CLASSIFICATION	1.3814324016803654E-6	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999377849736	WITHOUT_CLASSIFICATION	6.221502628155147E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999990788971606	WITHOUT_CLASSIFICATION	9.211028393989795E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999842429301118	WITHOUT_CLASSIFICATION	1.5757069888233033E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995929855057033	WITHOUT_CLASSIFICATION	4.0701449429661897E-4	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995929855057033	WITHOUT_CLASSIFICATION	4.0701449429661897E-4	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997391285915397	WITHOUT_CLASSIFICATION	2.608714084602668E-4	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997391285915397	WITHOUT_CLASSIFICATION	2.608714084602668E-4	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9997400064275205	WITHOUT_CLASSIFICATION	2.599935724795871E-4	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9996655449914476	WITHOUT_CLASSIFICATION	3.3445500855244136E-4	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9996655449914476	WITHOUT_CLASSIFICATION	3.3445500855244136E-4	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998025974310562	WITHOUT_CLASSIFICATION	1.9740256894387542E-4	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994115505996649	WITHOUT_CLASSIFICATION	5.884494003351149E-4	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999987284413164	WITHOUT_CLASSIFICATION	1.2715586835873896E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999881914410924	WITHOUT_CLASSIFICATION	1.1808558907591686E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999994270840664	WITHOUT_CLASSIFICATION	5.72915933593588E-7	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994115505996649	WITHOUT_CLASSIFICATION	5.884494003351149E-4	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999998077202769	WITHOUT_CLASSIFICATION	1.9227972312199291E-7	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999968743638425	WITHOUT_CLASSIFICATION	3.125636157355125E-6	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9992262730807608	WITHOUT_CLASSIFICATION	7.73726919239146E-4	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999699016545767	WITHOUT_CLASSIFICATION	3.009834542330688E-4	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999216649191	WITHOUT_CLASSIFICATION	7.833508086140825E-8	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999559968079964	WITHOUT_CLASSIFICATION	4.4003192003507994E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999956157843726	WITHOUT_CLASSIFICATION	4.3842156274112586E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999990538454342	WITHOUT_CLASSIFICATION	9.461545657561929E-7	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999997595246862	WITHOUT_CLASSIFICATION	2.404753136981352E-7	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999995176380678	WITHOUT_CLASSIFICATION	4.823619321221829E-7	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999447053677	WITHOUT_CLASSIFICATION	5.529463232044324E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9998214788097673	WITHOUT_CLASSIFICATION	1.78521190232741E-4	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999676763092405	WITHOUT_CLASSIFICATION	3.232369075943488E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999584627411991	WITHOUT_CLASSIFICATION	4.15372588009038E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999907922909366	WITHOUT_CLASSIFICATION	9.20770906342085E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999947845629564	WITHOUT_CLASSIFICATION	5.215437043622536E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998893013496	WITHOUT_CLASSIFICATION	1.1069865036504106E-7	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999555672753258	WITHOUT_CLASSIFICATION	4.4432724674193284E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999555672753258	WITHOUT_CLASSIFICATION	4.4432724674193284E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.999996661135706	WITHOUT_CLASSIFICATION	3.3388642940920083E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999941575614314	WITHOUT_CLASSIFICATION	5.842438568718784E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999985166939362	WITHOUT_CLASSIFICATION	1.4833060637322226E-6	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999897203371612	WITHOUT_CLASSIFICATION	1.0279662838783707E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999638010673656	WITHOUT_CLASSIFICATION	3.6198932634409975E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999997303875099	WITHOUT_CLASSIFICATION	2.696124901587863E-7	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999025595376	WITHOUT_CLASSIFICATION	9.744046236209375E-8	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999928572911936	WITHOUT_CLASSIFICATION	7.142708806450412E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999936411097208	WITHOUT_CLASSIFICATION	6.358890279255351E-6	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998700260473	WITHOUT_CLASSIFICATION	1.2997395271110577E-7	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999991068979046	WITHOUT_CLASSIFICATION	8.931020954549621E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9971801985191704	WITHOUT_CLASSIFICATION	0.002819801480829656	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998403802302	WITHOUT_CLASSIFICATION	1.5961976984723055E-7	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999984213570363	WITHOUT_CLASSIFICATION	1.5786429636939962E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999987034762694	WITHOUT_CLASSIFICATION	1.2965237306160762E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999991872228841	WITHOUT_CLASSIFICATION	8.127771159855449E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996276875003	WITHOUT_CLASSIFICATION	3.723124996520223E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996276875003	WITHOUT_CLASSIFICATION	3.723124996520223E-7	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999686107705078	WITHOUT_CLASSIFICATION	3.138922949214987E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999975081246155	WITHOUT_CLASSIFICATION	2.4918753844456366E-6	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999983490403767	WITHOUT_CLASSIFICATION	1.6509596233384548E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.999998835127733	WITHOUT_CLASSIFICATION	1.1648722669732015E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999988041594989	WITHOUT_CLASSIFICATION	1.195840501045634E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.99988159084719	WITHOUT_CLASSIFICATION	1.1840915280999297E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996204316872	WITHOUT_CLASSIFICATION	3.795683126927073E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998852512368	WITHOUT_CLASSIFICATION	1.1474876313197332E-7	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999985042034484	WITHOUT_CLASSIFICATION	1.495796551588841E-6	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999944151894001	WITHOUT_CLASSIFICATION	5.584810599875523E-6	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999988526956209	WITHOUT_CLASSIFICATION	1.1473043790154521E-6	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998852512368	WITHOUT_CLASSIFICATION	1.1474876313197332E-7	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998002029309	WITHOUT_CLASSIFICATION	1.9979706918902222E-7	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998461495491	WITHOUT_CLASSIFICATION	1.5385045099174888E-7	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999674214637	WITHOUT_CLASSIFICATION	3.25785363080722E-7	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999356012665559	WITHOUT_CLASSIFICATION	6.439873344412865E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999242768979	WITHOUT_CLASSIFICATION	7.572310213705341E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999811079613	WITHOUT_CLASSIFICATION	1.8892038689542285E-7	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999932533082072	WITHOUT_CLASSIFICATION	6.74669179278828E-6	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999976392775635	WITHOUT_CLASSIFICATION	2.3607224365927665E-6	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998152793854	WITHOUT_CLASSIFICATION	1.8472061458714525E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999802850246633	WITHOUT_CLASSIFICATION	1.971497533672915E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999970577172111	WITHOUT_CLASSIFICATION	2.942282788901761E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999997354477857	WITHOUT_CLASSIFICATION	2.645522143058335E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995679147258	WITHOUT_CLASSIFICATION	4.320852742279656E-7	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999998076534935	WITHOUT_CLASSIFICATION	1.9234650650014494E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999899030555875	WITHOUT_CLASSIFICATION	1.0096944412468987E-5	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999964430200219	WITHOUT_CLASSIFICATION	3.5569799781281718E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998665248841038	WITHOUT_CLASSIFICATION	1.3347511589627316E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999995292629669	WITHOUT_CLASSIFICATION	4.707370331031192E-6	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999933372851388	WITHOUT_CLASSIFICATION	6.662714861147557E-6	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999958668346458	WITHOUT_CLASSIFICATION	4.133165354170535E-6	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999997728894273	WITHOUT_CLASSIFICATION	2.2711057269992685E-6	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999974111560995	WITHOUT_CLASSIFICATION	2.5888439003789245E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999440482646684	WITHOUT_CLASSIFICATION	5.595173533151885E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9972126034747643	WITHOUT_CLASSIFICATION	0.0027873965252358	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999971052500018	WITHOUT_CLASSIFICATION	2.894749998012586E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999900428635849	WITHOUT_CLASSIFICATION	9.957136415094139E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999998962204214	WITHOUT_CLASSIFICATION	1.0377957859716867E-6	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999993429238606	WITHOUT_CLASSIFICATION	6.57076139359529E-7	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996387872041	WITHOUT_CLASSIFICATION	3.612127958200587E-7	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998534951005479	WITHOUT_CLASSIFICATION	1.4650489945221192E-4	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997233218061	WITHOUT_CLASSIFICATION	2.7667819395172905E-7	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999985758551234	WITHOUT_CLASSIFICATION	1.424144876549948E-6	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999859099593486	WITHOUT_CLASSIFICATION	1.4090040651490302E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999983281778584	WITHOUT_CLASSIFICATION	1.6718221416052571E-6	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999964883017693	WITHOUT_CLASSIFICATION	3.511698230631963E-6	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999970290215519	WITHOUT_CLASSIFICATION	2.9709784481296195E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999401937798	WITHOUT_CLASSIFICATION	5.980622010601146E-8	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999104369702	WITHOUT_CLASSIFICATION	8.956302983860812E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999950817808947	WITHOUT_CLASSIFICATION	4.9182191053383295E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999994446121643	WITHOUT_CLASSIFICATION	5.553878358040788E-7	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999220834051241	WITHOUT_CLASSIFICATION	7.791659487577961E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999972989827585	WITHOUT_CLASSIFICATION	2.7010172415447525E-6	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999993446780745	WITHOUT_CLASSIFICATION	6.553219255270357E-7	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999996487583563	WITHOUT_CLASSIFICATION	3.512416437094651E-7	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999925116797544	WITHOUT_CLASSIFICATION	7.488320245487897E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999948341123784	WITHOUT_CLASSIFICATION	5.16588762162807E-6	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999965658155099	WITHOUT_CLASSIFICATION	3.4341844900891015E-6	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999787816655293	WITHOUT_CLASSIFICATION	2.121833447067349E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999941335396079	WITHOUT_CLASSIFICATION	5.866460392025073E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999868634872189	WITHOUT_CLASSIFICATION	1.3136512781114907E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973405972459	WITHOUT_CLASSIFICATION	2.6594027540991758E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999958668943727	WITHOUT_CLASSIFICATION	4.133105627295712E-6	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999981081936719	WITHOUT_CLASSIFICATION	1.8918063282192004E-6	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999966698889304	WITHOUT_CLASSIFICATION	3.3301110695073663E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999993140949814	WITHOUT_CLASSIFICATION	6.859050184477628E-7	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999342216741	WITHOUT_CLASSIFICATION	6.577832589170183E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999965623866972	WITHOUT_CLASSIFICATION	3.4376133028184703E-6	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999992238041391	WITHOUT_CLASSIFICATION	7.761958609604731E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999431186232045	WITHOUT_CLASSIFICATION	5.688137679555099E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999961368285578	WITHOUT_CLASSIFICATION	3.863171442204232E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999994793747758	WITHOUT_CLASSIFICATION	5.206252241650783E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999970200070527	WITHOUT_CLASSIFICATION	2.9799929472219207E-6	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999984373613997	WITHOUT_CLASSIFICATION	1.5626386003715857E-6	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999936996519958	WITHOUT_CLASSIFICATION	6.300348004127619E-6	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999996075247029	WITHOUT_CLASSIFICATION	3.9247529709475905E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999919530226342	WITHOUT_CLASSIFICATION	8.046977365792877E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973405972459	WITHOUT_CLASSIFICATION	2.6594027540991758E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999865486570425	WITHOUT_CLASSIFICATION	1.345134295749964E-5	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999994855419628	WITHOUT_CLASSIFICATION	5.144580372277851E-7	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999987504627658	WITHOUT_CLASSIFICATION	1.249537234295453E-6	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999996697847712	WITHOUT_CLASSIFICATION	3.302152288209542E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999981333428817	WITHOUT_CLASSIFICATION	1.8666571183321412E-6	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999934851495473	WITHOUT_CLASSIFICATION	6.5148504526201614E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999985042034484	WITHOUT_CLASSIFICATION	1.495796551588841E-6	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999811482871924	WITHOUT_CLASSIFICATION	1.8851712807587674E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999964883017693	WITHOUT_CLASSIFICATION	3.511698230631963E-6	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999995006782333	WITHOUT_CLASSIFICATION	4.9932176670069284E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997893394353	WITHOUT_CLASSIFICATION	2.1066056466567238E-7	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999987195112746	WITHOUT_CLASSIFICATION	1.280488725445061E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999982443410028	WITHOUT_CLASSIFICATION	1.7556589971203411E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999999690425849	WITHOUT_CLASSIFICATION	3.095741509674565E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999991072378048	WITHOUT_CLASSIFICATION	8.92762195142172E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999702059315178	WITHOUT_CLASSIFICATION	2.9794068482226115E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999974618051033	WITHOUT_CLASSIFICATION	2.538194896792765E-6	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999996116456468	WITHOUT_CLASSIFICATION	3.8835435315881817E-7	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997820116792	WITHOUT_CLASSIFICATION	2.179883209178098E-7	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999937077289917	WITHOUT_CLASSIFICATION	6.2922710083742655E-6	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999944607854541	WITHOUT_CLASSIFICATION	5.539214545906001E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999984282030348	WITHOUT_CLASSIFICATION	1.571796965339846E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999984282030348	WITHOUT_CLASSIFICATION	1.571796965339846E-6	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998445961225	WITHOUT_CLASSIFICATION	1.554038774260956E-7	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999701104650893	WITHOUT_CLASSIFICATION	2.9889534910654732E-5	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999864870524726	WITHOUT_CLASSIFICATION	1.3512947527459921E-5	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999151535719898	WITHOUT_CLASSIFICATION	8.484642801019567E-5	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997408953045	WITHOUT_CLASSIFICATION	2.591046954834694E-7	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999970066739006	WITHOUT_CLASSIFICATION	2.9933260993565675E-6	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999997501088963	WITHOUT_CLASSIFICATION	2.49891103660998E-7	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999997147121217	WITHOUT_CLASSIFICATION	2.852878782874063E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999996315682961	WITHOUT_CLASSIFICATION	3.684317039466074E-7	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999929035633094	WITHOUT_CLASSIFICATION	7.096436690676662E-6	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999650779598913	WITHOUT_CLASSIFICATION	3.492204010876832E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999692408114224	WITHOUT_CLASSIFICATION	3.075918857760848E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999951986149676	WITHOUT_CLASSIFICATION	4.801385032428536E-6	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999896441032	WITHOUT_CLASSIFICATION	1.035589668532076E-8	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999993287899108	WITHOUT_CLASSIFICATION	6.712100891383701E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994621073601	WITHOUT_CLASSIFICATION	5.37892639935823E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999996495048458	WITHOUT_CLASSIFICATION	3.5049515428657255E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999155487930713	WITHOUT_CLASSIFICATION	8.445120692871767E-5	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999983000125663	WITHOUT_CLASSIFICATION	1.6999874337595144E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999418594229	WITHOUT_CLASSIFICATION	5.814057710953121E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999955131444274	WITHOUT_CLASSIFICATION	4.486855572649204E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999926992678083	WITHOUT_CLASSIFICATION	7.3007321916094426E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999902453889544	WITHOUT_CLASSIFICATION	9.754611045570444E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999993719935758	WITHOUT_CLASSIFICATION	6.28006424278145E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9998631077649452	WITHOUT_CLASSIFICATION	1.3689223505475117E-4	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992964949563	WITHOUT_CLASSIFICATION	7.035050436645576E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995764426865	WITHOUT_CLASSIFICATION	4.235573134980594E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999980405071455	WITHOUT_CLASSIFICATION	1.959492854570271E-6	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999991657372959	WITHOUT_CLASSIFICATION	8.342627041126926E-7	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999919201031036	WITHOUT_CLASSIFICATION	8.079896896446723E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999980487731096	WITHOUT_CLASSIFICATION	1.951226890454733E-6	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999938000271342	WITHOUT_CLASSIFICATION	6.199972865766805E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999969378777931	WITHOUT_CLASSIFICATION	3.062122206970391E-6	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999996650104204	WITHOUT_CLASSIFICATION	3.349895796118683E-7	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999520414519	WITHOUT_CLASSIFICATION	4.7958548177572306E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999989982373882	WITHOUT_CLASSIFICATION	1.0017626117989442E-6	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999944305456083	WITHOUT_CLASSIFICATION	5.56945439174416E-6	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999936550620067	WITHOUT_CLASSIFICATION	6.344937993355525E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999995560468296	WITHOUT_CLASSIFICATION	4.439531704408289E-7	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999923611785122	WITHOUT_CLASSIFICATION	7.638821487706316E-6	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999743435699568	WITHOUT_CLASSIFICATION	2.5656430043169044E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998192602416183	WITHOUT_CLASSIFICATION	1.8073975838166727E-4	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996824331737	WITHOUT_CLASSIFICATION	3.175668262459126E-7	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999896796445909	WITHOUT_CLASSIFICATION	1.0320355409107312E-4	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999982704319024	WITHOUT_CLASSIFICATION	1.7295680975986757E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999887233445863	WITHOUT_CLASSIFICATION	1.1276655413765386E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516139276087	WITHOUT_CLASSIFICATION	4.83860723913781E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9933722572952876	WITHOUT_CLASSIFICATION	0.006627742704712457	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999956607704598	WITHOUT_CLASSIFICATION	4.3392295402739354E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999970430898073	WITHOUT_CLASSIFICATION	2.956910192718376E-6	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999964622938808	WITHOUT_CLASSIFICATION	3.5377061191508764E-6	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748372907422	WITHOUT_CLASSIFICATION	2.5162709257763297E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999210159644	WITHOUT_CLASSIFICATION	7.89840355573742E-8	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999902678511732	WITHOUT_CLASSIFICATION	9.732148826790546E-6	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999965534422788	WITHOUT_CLASSIFICATION	3.446557721182573E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.999978888518411	WITHOUT_CLASSIFICATION	2.1111481588900365E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999991678425147	WITHOUT_CLASSIFICATION	8.321574852215175E-7	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999524237782451	WITHOUT_CLASSIFICATION	4.757622175485819E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999884938422154	WITHOUT_CLASSIFICATION	1.1506157784688882E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999898763635401	WITHOUT_CLASSIFICATION	1.0123636459854586E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999954053417321	WITHOUT_CLASSIFICATION	4.594658267803755E-6	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999605206413582	WITHOUT_CLASSIFICATION	3.9479358641744455E-5	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999983060940525	WITHOUT_CLASSIFICATION	1.6939059474198644E-6	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999905505507369	WITHOUT_CLASSIFICATION	9.449449263068523E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999917693522046	WITHOUT_CLASSIFICATION	8.230647795299858E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999960836738715	WITHOUT_CLASSIFICATION	3.916326128440026E-6	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999043907443	WITHOUT_CLASSIFICATION	9.560925571357587E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997612262195584	WITHOUT_CLASSIFICATION	2.3877378044153557E-4	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999989327275967	WITHOUT_CLASSIFICATION	1.0672724033186088E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999956372301456	WITHOUT_CLASSIFICATION	4.362769854423982E-6	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999955751137063	WITHOUT_CLASSIFICATION	4.424886293666268E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999956372301456	WITHOUT_CLASSIFICATION	4.362769854423982E-6	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999286932244	WITHOUT_CLASSIFICATION	7.130677557449388E-8	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999996265932265	WITHOUT_CLASSIFICATION	3.7340677344368126E-7	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999976902897229	WITHOUT_CLASSIFICATION	2.30971027710428E-6	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993584334023	WITHOUT_CLASSIFICATION	6.415665977570314E-7	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999459528984	WITHOUT_CLASSIFICATION	5.404710160046237E-7	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999997253330553	WITHOUT_CLASSIFICATION	2.746669447067598E-6	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999997535531056	WITHOUT_CLASSIFICATION	2.4644689439936954E-6	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9992470556123944	WITHOUT_CLASSIFICATION	7.529443876056469E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999958439048557	WITHOUT_CLASSIFICATION	4.1560951442608295E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999000234366	WITHOUT_CLASSIFICATION	9.997656336511104E-8	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999902855473483	WITHOUT_CLASSIFICATION	9.714452651794472E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999998131999801	WITHOUT_CLASSIFICATION	1.8680001989788377E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999941258474226	WITHOUT_CLASSIFICATION	5.8741525773889176E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999801874413885	WITHOUT_CLASSIFICATION	1.9812558611465586E-5	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999817237941516	WITHOUT_CLASSIFICATION	1.8276205848326746E-5	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999654618302	WITHOUT_CLASSIFICATION	3.4538169805479536E-7	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999990994460907	WITHOUT_CLASSIFICATION	9.005539092608914E-7	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999979416416079	WITHOUT_CLASSIFICATION	2.0583583920950933E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999023867548	WITHOUT_CLASSIFICATION	9.761324504626898E-8	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999782025651112	WITHOUT_CLASSIFICATION	2.1797434888917716E-5	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999231929588	WITHOUT_CLASSIFICATION	7.680704118460027E-8	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999966043253457	WITHOUT_CLASSIFICATION	3.395674654410168E-6	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996335128716042	WITHOUT_CLASSIFICATION	3.664871283957562E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999983923518594	WITHOUT_CLASSIFICATION	1.6076481405623884E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999955697991769	WITHOUT_CLASSIFICATION	4.430200823133921E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999850926043058	WITHOUT_CLASSIFICATION	1.4907395694161205E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999979882597988	WITHOUT_CLASSIFICATION	2.0117402012008766E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999835693580704	WITHOUT_CLASSIFICATION	1.6430641929567204E-5	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993720500556	WITHOUT_CLASSIFICATION	6.279499443982545E-7	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999934626775184	WITHOUT_CLASSIFICATION	6.537322481620536E-6	TEST
after reset!	WITHOUT_CLASSIFICATION	0.99996282482137	WITHOUT_CLASSIFICATION	3.717517863007471E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999941580378534	WITHOUT_CLASSIFICATION	5.841962146574698E-6	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999396387478	WITHOUT_CLASSIFICATION	6.036125220234908E-7	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996363536551176	WITHOUT_CLASSIFICATION	3.6364634488242364E-4	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999895209457368	WITHOUT_CLASSIFICATION	1.0479054263217323E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9996410643121239	WITHOUT_CLASSIFICATION	3.589356878761272E-4	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999975801565784	WITHOUT_CLASSIFICATION	2.419843421699858E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999991976230288	WITHOUT_CLASSIFICATION	8.023769711530864E-7	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999041852887425	WITHOUT_CLASSIFICATION	9.581471125755412E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999940208763496	WITHOUT_CLASSIFICATION	5.979123650343195E-6	TEST
an association	WITHOUT_CLASSIFICATION	0.9998394736745291	WITHOUT_CLASSIFICATION	1.6052632547103643E-4	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999942753129033	WITHOUT_CLASSIFICATION	5.724687096717338E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997001120446003	WITHOUT_CLASSIFICATION	2.9988795539973327E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999850926043058	WITHOUT_CLASSIFICATION	1.4907395694161205E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.999771329234835	WITHOUT_CLASSIFICATION	2.2867076516496485E-4	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999934300676455	WITHOUT_CLASSIFICATION	6.569932354504169E-6	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999184052954684	WITHOUT_CLASSIFICATION	8.159470453162578E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999586199682241	WITHOUT_CLASSIFICATION	4.1380031775884956E-5	TEST
special case	WITHOUT_CLASSIFICATION	0.9999887154043263	WITHOUT_CLASSIFICATION	1.1284595673701017E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999843208443541	WITHOUT_CLASSIFICATION	1.5679155645853668E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999996357383546	WITHOUT_CLASSIFICATION	3.6426164535384197E-7	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999854942636742	WITHOUT_CLASSIFICATION	1.4505736325816847E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999965142416948	WITHOUT_CLASSIFICATION	3.485758305206315E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999833703956684	WITHOUT_CLASSIFICATION	1.6629604331561613E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999682400243703	WITHOUT_CLASSIFICATION	3.175997562964646E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999715793533369	WITHOUT_CLASSIFICATION	2.842064666296814E-5	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999887608965092	WITHOUT_CLASSIFICATION	1.1239103490741788E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999754579952901	WITHOUT_CLASSIFICATION	2.454200471002167E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999990071614134	WITHOUT_CLASSIFICATION	9.928385865362562E-7	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999995132519736	WITHOUT_CLASSIFICATION	4.867480264807385E-7	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999953448687408	WITHOUT_CLASSIFICATION	4.655131259158483E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999948011010165	WITHOUT_CLASSIFICATION	5.198898983587034E-6	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999994355545458	WITHOUT_CLASSIFICATION	5.644454540988074E-7	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.999771329234835	WITHOUT_CLASSIFICATION	2.2867076516496485E-4	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999680321658022	WITHOUT_CLASSIFICATION	3.196783419773665E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999853076609319	WITHOUT_CLASSIFICATION	1.4692339068040668E-5	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999459723685903	WITHOUT_CLASSIFICATION	5.402763140963363E-5	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999920169776644	WITHOUT_CLASSIFICATION	7.983022335693795E-6	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999964235525673	WITHOUT_CLASSIFICATION	3.5764474328113456E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998770260494642	WITHOUT_CLASSIFICATION	1.2297395053588851E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998770260494642	WITHOUT_CLASSIFICATION	1.2297395053588851E-4	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999996820103092	WITHOUT_CLASSIFICATION	3.1798969085055485E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998770260494642	WITHOUT_CLASSIFICATION	1.2297395053588851E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998770260494642	WITHOUT_CLASSIFICATION	1.2297395053588851E-4	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999482736163463	WITHOUT_CLASSIFICATION	5.172638365362313E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999862964762748	WITHOUT_CLASSIFICATION	1.3703523725287865E-5	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999273119307	WITHOUT_CLASSIFICATION	7.268806929915663E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999998967116534	WITHOUT_CLASSIFICATION	1.0328834660564374E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999996642126439	WITHOUT_CLASSIFICATION	3.357873561104834E-7	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999887308584263	WITHOUT_CLASSIFICATION	1.1269141573548811E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999988144711559	WITHOUT_CLASSIFICATION	1.1855288441178337E-6	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999951825249748	WITHOUT_CLASSIFICATION	4.817475025176598E-6	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999990207075427	WITHOUT_CLASSIFICATION	9.792924572968383E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9996310328628326	WITHOUT_CLASSIFICATION	3.6896713716739923E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999993016867169	WITHOUT_CLASSIFICATION	6.983132830968526E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.999995442933348	WITHOUT_CLASSIFICATION	4.5570666519540016E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999978127310111	WITHOUT_CLASSIFICATION	2.18726898889901E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999758794899277	WITHOUT_CLASSIFICATION	2.412051007222134E-5	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999983420161276	WITHOUT_CLASSIFICATION	1.6579838723590145E-6	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999546183933601	WITHOUT_CLASSIFICATION	4.538160663994593E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999717988794657	WITHOUT_CLASSIFICATION	2.8201120534183078E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999993868387342	WITHOUT_CLASSIFICATION	6.131612657056808E-7	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999836091572534	WITHOUT_CLASSIFICATION	1.6390842746564385E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999731533646219	WITHOUT_CLASSIFICATION	2.6846635378125933E-5	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999950797276143	WITHOUT_CLASSIFICATION	4.9202723857376E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999425874215054	WITHOUT_CLASSIFICATION	5.74125784945736E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999717988794657	WITHOUT_CLASSIFICATION	2.8201120534183078E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999979882597988	WITHOUT_CLASSIFICATION	2.0117402012008766E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999950379116973	WITHOUT_CLASSIFICATION	4.962088302698162E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998839198868	WITHOUT_CLASSIFICATION	1.1608011320262013E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999981658584551	WITHOUT_CLASSIFICATION	1.8341415447512952E-6	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999766458064225	WITHOUT_CLASSIFICATION	2.3354193577486408E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999992542291952	WITHOUT_CLASSIFICATION	7.457708048697588E-7	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9993685693323655	WITHOUT_CLASSIFICATION	6.314306676345399E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999933932581738	WITHOUT_CLASSIFICATION	6.606741826225722E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999974375926534	WITHOUT_CLASSIFICATION	2.5624073466024423E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999988017101272	WITHOUT_CLASSIFICATION	1.1982898728483263E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999908838749643	WITHOUT_CLASSIFICATION	9.116125035734035E-6	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999978801954726	WITHOUT_CLASSIFICATION	2.1198045273130935E-6	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999962794203701	WITHOUT_CLASSIFICATION	3.720579630071864E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999986611609487	WITHOUT_CLASSIFICATION	1.338839051326846E-6	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997811616275667	WITHOUT_CLASSIFICATION	2.1883837243327482E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999997702263386	WITHOUT_CLASSIFICATION	2.2977366147324106E-7	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999726738482312	WITHOUT_CLASSIFICATION	2.732615176870656E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999791182902651	WITHOUT_CLASSIFICATION	2.0881709734913E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999896996421567	WITHOUT_CLASSIFICATION	1.030035784333197E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999643683239033	WITHOUT_CLASSIFICATION	3.563167609668247E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999978869979768	WITHOUT_CLASSIFICATION	2.1130020232406503E-6	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999941897461934	WITHOUT_CLASSIFICATION	5.810253806696592E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999964248977	WITHOUT_CLASSIFICATION	3.5751022757716707E-9	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999974375926534	WITHOUT_CLASSIFICATION	2.5624073466024423E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999986489663945	WITHOUT_CLASSIFICATION	1.3510336055371829E-6	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999968632709273	WITHOUT_CLASSIFICATION	3.1367290727544836E-6	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999978863895473	WITHOUT_CLASSIFICATION	2.1136104525902403E-6	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999778306719519	WITHOUT_CLASSIFICATION	2.2169328048091154E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991112722942	WITHOUT_CLASSIFICATION	8.887277057916854E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999303866617736	WITHOUT_CLASSIFICATION	6.961333822637947E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999203246230844	WITHOUT_CLASSIFICATION	7.967537691546192E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999954618647515	WITHOUT_CLASSIFICATION	4.538135248498114E-6	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999872082854129	WITHOUT_CLASSIFICATION	1.2791714587134206E-5	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9996771227636945	WITHOUT_CLASSIFICATION	3.2287723630555136E-4	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999862093957481	WITHOUT_CLASSIFICATION	1.3790604251813585E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999986597759543	WITHOUT_CLASSIFICATION	1.3402240457735306E-6	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999963038670645	WITHOUT_CLASSIFICATION	3.6961329353288303E-6	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999918434069778	WITHOUT_CLASSIFICATION	8.156593022201767E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999974243024308	WITHOUT_CLASSIFICATION	2.5756975691878246E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999969496775581	WITHOUT_CLASSIFICATION	3.050322441895664E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999862093957481	WITHOUT_CLASSIFICATION	1.3790604251813585E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999519189613579	WITHOUT_CLASSIFICATION	4.8081038642082666E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999956178514571	WITHOUT_CLASSIFICATION	4.3821485429747656E-6	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999862580366435	WITHOUT_CLASSIFICATION	1.3741963356370761E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999939231909882	WITHOUT_CLASSIFICATION	6.076809011799157E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999909761666456	WITHOUT_CLASSIFICATION	9.023833354520233E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999990274806687	WITHOUT_CLASSIFICATION	9.725193312706678E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999936240978776	WITHOUT_CLASSIFICATION	6.375902122344266E-6	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973581371807	WITHOUT_CLASSIFICATION	2.641862819303608E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960534042392	WITHOUT_CLASSIFICATION	3.946595760707663E-6	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956694712088	WITHOUT_CLASSIFICATION	4.3305287912134305E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980556931535	WITHOUT_CLASSIFICATION	1.9443068464413916E-6	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998461830145	WITHOUT_CLASSIFICATION	1.538169854986864E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995535075078	WITHOUT_CLASSIFICATION	4.4649249223626646E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995535075078	WITHOUT_CLASSIFICATION	4.4649249223626646E-7	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999654284218475	WITHOUT_CLASSIFICATION	3.457157815240626E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999976347022266	WITHOUT_CLASSIFICATION	2.3652977735400224E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999874560876544	WITHOUT_CLASSIFICATION	1.2543912345641396E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999766760085664	WITHOUT_CLASSIFICATION	2.3323991433597237E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999772803269501	WITHOUT_CLASSIFICATION	2.2719673049882693E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440372859307	WITHOUT_CLASSIFICATION	5.5962714069241484E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998190115178867	WITHOUT_CLASSIFICATION	1.8098848211334844E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999347686196061	WITHOUT_CLASSIFICATION	6.52313803939954E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999968385232586	WITHOUT_CLASSIFICATION	3.1614767414019933E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948070947449	WITHOUT_CLASSIFICATION	5.192905255111704E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440372859307	WITHOUT_CLASSIFICATION	5.5962714069241484E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998190115178867	WITHOUT_CLASSIFICATION	1.8098848211334844E-4	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999347686196061	WITHOUT_CLASSIFICATION	6.52313803939954E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9998196267955969	WITHOUT_CLASSIFICATION	1.8037320440302104E-4	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999532479493828	WITHOUT_CLASSIFICATION	4.6752050617151355E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999991056292201	WITHOUT_CLASSIFICATION	8.943707799122965E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999992060218724	WITHOUT_CLASSIFICATION	7.939781275763912E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999972274817454	WITHOUT_CLASSIFICATION	2.7725182547202457E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999993227707477	WITHOUT_CLASSIFICATION	6.772292523030472E-7	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999959961290364	WITHOUT_CLASSIFICATION	4.0038709635768774E-6	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999867512913828	WITHOUT_CLASSIFICATION	1.3248708617099063E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.999615087845952	WITHOUT_CLASSIFICATION	3.8491215404804256E-4	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999927090390916	WITHOUT_CLASSIFICATION	7.290960908397663E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999909659825512	WITHOUT_CLASSIFICATION	9.034017448773885E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995945087320708	WITHOUT_CLASSIFICATION	4.0549126792926716E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999772961395729	WITHOUT_CLASSIFICATION	2.2703860427111764E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999907886724178	WITHOUT_CLASSIFICATION	9.211327582149903E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995905947746	WITHOUT_CLASSIFICATION	4.094052255074743E-7	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999956414053816	WITHOUT_CLASSIFICATION	4.3585946184927265E-6	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9964693878993394	WITHOUT_CLASSIFICATION	0.0035306121006606237	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999612677981634	WITHOUT_CLASSIFICATION	3.873220183660416E-4	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999917380731282	WITHOUT_CLASSIFICATION	8.261926871704197E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998375212212107	WITHOUT_CLASSIFICATION	1.6247877878931597E-4	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996129316184	WITHOUT_CLASSIFICATION	3.870683816899961E-7	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997745502838	WITHOUT_CLASSIFICATION	2.2544971625498524E-7	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998033640713	WITHOUT_CLASSIFICATION	1.9663592862281842E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998230270931	WITHOUT_CLASSIFICATION	1.7697290684911425E-7	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999996132796409	WITHOUT_CLASSIFICATION	3.8672035907171324E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999965518959728	WITHOUT_CLASSIFICATION	3.4481040271893173E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998576471060902	WITHOUT_CLASSIFICATION	1.4235289390993904E-4	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996612722782335	WITHOUT_CLASSIFICATION	3.3872772176648527E-4	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999946191273258	WITHOUT_CLASSIFICATION	5.3808726741726755E-6	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240849644322	WITHOUT_CLASSIFICATION	1.7591503556777348E-4	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999675800220498	WITHOUT_CLASSIFICATION	3.241997795019973E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933362915447	WITHOUT_CLASSIFICATION	6.6637084552233195E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933362915447	WITHOUT_CLASSIFICATION	6.6637084552233195E-6	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998939774639916	WITHOUT_CLASSIFICATION	1.060225360084507E-4	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999894967012307	WITHOUT_CLASSIFICATION	1.0503298769193006E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999986528452224	WITHOUT_CLASSIFICATION	1.347154777651762E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9971801985191704	WITHOUT_CLASSIFICATION	0.002819801480829656	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999892851586737	WITHOUT_CLASSIFICATION	1.0714841326259371E-5	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999994921799386	WITHOUT_CLASSIFICATION	5.078200614215763E-7	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9996586157887192	WITHOUT_CLASSIFICATION	3.413842112808229E-4	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999941108602919	WITHOUT_CLASSIFICATION	5.889139708052298E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999895283510639	WITHOUT_CLASSIFICATION	1.0471648936091305E-5	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921331307798	WITHOUT_CLASSIFICATION	7.86686922010811E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999862068524726	WITHOUT_CLASSIFICATION	1.3793147527496807E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880018131648	WITHOUT_CLASSIFICATION	1.199818683522551E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621055830741	WITHOUT_CLASSIFICATION	3.78944169258638E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867953572862	WITHOUT_CLASSIFICATION	1.3204642713861262E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702526518015	WITHOUT_CLASSIFICATION	2.974734819853581E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900315921402	WITHOUT_CLASSIFICATION	9.968407859820788E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906269219374	WITHOUT_CLASSIFICATION	9.373078062667841E-6	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905617823407	WITHOUT_CLASSIFICATION	9.438217659253976E-6	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679390976065	WITHOUT_CLASSIFICATION	3.2060902393575575E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767295163497	WITHOUT_CLASSIFICATION	2.3270483650235634E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999969193301715	WITHOUT_CLASSIFICATION	3.0806698285423423E-6	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999591067470015	WITHOUT_CLASSIFICATION	4.089325299844982E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999721365346567	WITHOUT_CLASSIFICATION	2.786346534340941E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999973822900161	WITHOUT_CLASSIFICATION	2.617709983879841E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999976431212813	WITHOUT_CLASSIFICATION	2.3568787186322084E-6	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999969873804817	WITHOUT_CLASSIFICATION	3.0126195183524445E-6	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999929019148451	WITHOUT_CLASSIFICATION	7.098085154949543E-6	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999994035159495	WITHOUT_CLASSIFICATION	5.964840505187501E-7	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999721365346567	WITHOUT_CLASSIFICATION	2.786346534340941E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999721365346567	WITHOUT_CLASSIFICATION	2.786346534340941E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999670833229679	WITHOUT_CLASSIFICATION	3.2916677032081014E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999997042161842	WITHOUT_CLASSIFICATION	2.9578381579162564E-6	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999725884388359	WITHOUT_CLASSIFICATION	2.7411561164126495E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999938047434647	WITHOUT_CLASSIFICATION	6.1952565353944465E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999676763092405	WITHOUT_CLASSIFICATION	3.232369075943488E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998375212212107	WITHOUT_CLASSIFICATION	1.6247877878931597E-4	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9996411520975708	WITHOUT_CLASSIFICATION	3.588479024292178E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999994926476805	WITHOUT_CLASSIFICATION	5.073523193969431E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999982074848794	WITHOUT_CLASSIFICATION	1.7925151205469126E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725263557719	WITHOUT_CLASSIFICATION	2.747364422804874E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999955772352278	WITHOUT_CLASSIFICATION	4.422764772225661E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232089383504	WITHOUT_CLASSIFICATION	7.679106164957083E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999951791456936	WITHOUT_CLASSIFICATION	4.820854306397049E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999951791456936	WITHOUT_CLASSIFICATION	4.820854306397049E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999991180962661	WITHOUT_CLASSIFICATION	8.819037338879921E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999991180962661	WITHOUT_CLASSIFICATION	8.819037338879921E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895675143738	WITHOUT_CLASSIFICATION	1.043248562620649E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500553962044	WITHOUT_CLASSIFICATION	4.9944603795493856E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999592187000454	WITHOUT_CLASSIFICATION	4.0781299954504E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777841107413	WITHOUT_CLASSIFICATION	2.2215889258650657E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999924122456658	WITHOUT_CLASSIFICATION	7.587754334206569E-6	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999997079802534	WITHOUT_CLASSIFICATION	2.920197465830864E-6	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935487960129	WITHOUT_CLASSIFICATION	6.451203987058375E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981152897808	WITHOUT_CLASSIFICATION	1.8847102191975935E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999982801584107	WITHOUT_CLASSIFICATION	1.719841589201268E-6	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9995510128533954	WITHOUT_CLASSIFICATION	4.4898714660456093E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999905559249715	WITHOUT_CLASSIFICATION	9.444075028543435E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999886093731225	WITHOUT_CLASSIFICATION	1.1390626877547921E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999993309558864	WITHOUT_CLASSIFICATION	6.690441134985805E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999919625352806	WITHOUT_CLASSIFICATION	8.037464719494223E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999797437780581	WITHOUT_CLASSIFICATION	2.0256221941949618E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999797437780581	WITHOUT_CLASSIFICATION	2.0256221941949618E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999797437780581	WITHOUT_CLASSIFICATION	2.0256221941949618E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999986890564606	WITHOUT_CLASSIFICATION	1.3109435393979489E-6	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999940169378595	WITHOUT_CLASSIFICATION	5.9830621404826544E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999994776857641	WITHOUT_CLASSIFICATION	5.223142359666233E-7	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902352054555	WITHOUT_CLASSIFICATION	9.764794544492872E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535827388284	WITHOUT_CLASSIFICATION	4.641726117152007E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999982841455636	WITHOUT_CLASSIFICATION	1.7158544363896689E-6	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991768431676	WITHOUT_CLASSIFICATION	8.23156832469433E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995493593984	WITHOUT_CLASSIFICATION	4.5064060161867236E-7	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999893225229	WITHOUT_CLASSIFICATION	1.0677477096552406E-7	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999960094228111	WITHOUT_CLASSIFICATION	3.990577188859133E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999983405758547	WITHOUT_CLASSIFICATION	1.6594241453747816E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922627179689	WITHOUT_CLASSIFICATION	7.737282031169536E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997772939329	WITHOUT_CLASSIFICATION	2.2270606722848083E-7	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999975422758911	WITHOUT_CLASSIFICATION	2.457724108851784E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.999999858139784	WITHOUT_CLASSIFICATION	1.4186021594051467E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999997856337954	WITHOUT_CLASSIFICATION	2.143662045998247E-6	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999993261534061	WITHOUT_CLASSIFICATION	6.7384659390503664E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999924858601642	WITHOUT_CLASSIFICATION	7.5141398357588555E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999975948146662	WITHOUT_CLASSIFICATION	2.405185333791758E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999980967244051	WITHOUT_CLASSIFICATION	1.9032755949052172E-6	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999959831787008	WITHOUT_CLASSIFICATION	4.0168212991969465E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999945583900208	WITHOUT_CLASSIFICATION	5.441609979132133E-6	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999959497050079	WITHOUT_CLASSIFICATION	4.050294992035331E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999939797584715	WITHOUT_CLASSIFICATION	6.020241528444165E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999974911046823	WITHOUT_CLASSIFICATION	2.5088953177562286E-6	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999987827465567	WITHOUT_CLASSIFICATION	1.217253443271276E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999907575639817	WITHOUT_CLASSIFICATION	9.242436018283606E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999992672668255	WITHOUT_CLASSIFICATION	7.3273317450077245E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999739343097421	WITHOUT_CLASSIFICATION	2.606569025786762E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999983006041	WITHOUT_CLASSIFICATION	1.6993958973249032E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999925226831167	WITHOUT_CLASSIFICATION	7.4773168834041795E-6	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999706903261936	WITHOUT_CLASSIFICATION	2.9309673806539434E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999963153510523	WITHOUT_CLASSIFICATION	3.6846489478123224E-6	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998370257574823	WITHOUT_CLASSIFICATION	1.6297424251770522E-4	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999969566660069	WITHOUT_CLASSIFICATION	3.04333399305689E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995581289078	WITHOUT_CLASSIFICATION	4.4187109211110655E-7	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999975947804174	WITHOUT_CLASSIFICATION	2.4052195826727868E-6	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999980482269907	WITHOUT_CLASSIFICATION	1.951773009350283E-6	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999988477105158	WITHOUT_CLASSIFICATION	1.1522894841427205E-6	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999309014158	WITHOUT_CLASSIFICATION	6.909858418083643E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999959577558435	WITHOUT_CLASSIFICATION	4.042244156574193E-6	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999515098162257	WITHOUT_CLASSIFICATION	4.849018377431015E-5	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99999884453388	WITHOUT_CLASSIFICATION	1.1554661199651576E-6	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999170042319	WITHOUT_CLASSIFICATION	8.299576817273431E-8	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999973815298452	WITHOUT_CLASSIFICATION	2.618470154863288E-6	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999944489310166	WITHOUT_CLASSIFICATION	5.551068983364868E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999679279729224	WITHOUT_CLASSIFICATION	3.207202707754394E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999554041509049	WITHOUT_CLASSIFICATION	4.4595849095232014E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9990092176474622	WITHOUT_CLASSIFICATION	9.907823525377624E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999992157972754	WITHOUT_CLASSIFICATION	7.842027247973829E-7	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999592822208048	WITHOUT_CLASSIFICATION	4.071777919526242E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999721946825213	WITHOUT_CLASSIFICATION	2.7805317478685528E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999473622357924	WITHOUT_CLASSIFICATION	5.2637764207562484E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999985115324098	WITHOUT_CLASSIFICATION	1.488467590067249E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999539859335836	WITHOUT_CLASSIFICATION	4.601406641639597E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999918574326571	WITHOUT_CLASSIFICATION	8.142567342900149E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999973800700505	WITHOUT_CLASSIFICATION	2.619929949611722E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999989344042199	WITHOUT_CLASSIFICATION	1.065595780107604E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999757030589856	WITHOUT_CLASSIFICATION	2.4296941014364723E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999986588548481	WITHOUT_CLASSIFICATION	1.341145151940633E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999993931644577	WITHOUT_CLASSIFICATION	6.068355422475641E-7	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999890916432279	WITHOUT_CLASSIFICATION	1.0908356772059147E-5	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994949868609	WITHOUT_CLASSIFICATION	5.050131389679638E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999973867962064	WITHOUT_CLASSIFICATION	2.6132037935168484E-6	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999997162324458	WITHOUT_CLASSIFICATION	2.837675542139606E-7	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999182258208	WITHOUT_CLASSIFICATION	8.177417913466931E-8	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999995760839564	WITHOUT_CLASSIFICATION	4.2391604365344674E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999894632852013	WITHOUT_CLASSIFICATION	1.0536714798553616E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999768246239	WITHOUT_CLASSIFICATION	2.3175376099987977E-5	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999981901430581	WITHOUT_CLASSIFICATION	1.8098569417706022E-6	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999965243332815	WITHOUT_CLASSIFICATION	3.475666718636321E-6	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999954052786835	WITHOUT_CLASSIFICATION	4.594721316561674E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999174529702497	WITHOUT_CLASSIFICATION	8.254702975030685E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996607141881	WITHOUT_CLASSIFICATION	3.392858119889543E-7	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999942628993794	WITHOUT_CLASSIFICATION	5.737100620686262E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999972696410454	WITHOUT_CLASSIFICATION	2.730358954636648E-6	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999985505806624	WITHOUT_CLASSIFICATION	1.4494193375664666E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999998868358429	WITHOUT_CLASSIFICATION	1.1316415710021043E-6	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999874506996	WITHOUT_CLASSIFICATION	1.2549300332965086E-8	TEST
a composite key	WITHOUT_CLASSIFICATION	0.999996057459255	WITHOUT_CLASSIFICATION	3.942540744974024E-6	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999997450887294	WITHOUT_CLASSIFICATION	2.5491127071258923E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.99999667852777	WITHOUT_CLASSIFICATION	3.3214722300633997E-6	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999850294074857	WITHOUT_CLASSIFICATION	1.4970592514250762E-5	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999985395883594	WITHOUT_CLASSIFICATION	1.4604116406681297E-6	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999851001602844	WITHOUT_CLASSIFICATION	1.4899839715559396E-5	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.99999866223379	WITHOUT_CLASSIFICATION	1.3377662100772087E-6	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999754644195149	WITHOUT_CLASSIFICATION	2.4535580485026127E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999573433452041	WITHOUT_CLASSIFICATION	4.2656654795793887E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999999154725575	WITHOUT_CLASSIFICATION	8.452744248932963E-7	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999512640954111	WITHOUT_CLASSIFICATION	4.873590458886047E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999910278859456	WITHOUT_CLASSIFICATION	8.97211405433774E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999858140764	WITHOUT_CLASSIFICATION	1.418592359961956E-7	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999947924639487	WITHOUT_CLASSIFICATION	5.207536051339178E-6	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999994193633785	WITHOUT_CLASSIFICATION	5.806366214322607E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999988785530382	WITHOUT_CLASSIFICATION	1.12144696189077E-6	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999210658067923	WITHOUT_CLASSIFICATION	7.893419320771805E-5	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999987342345573	WITHOUT_CLASSIFICATION	1.2657654427095528E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999730489769718	WITHOUT_CLASSIFICATION	2.6951023028219502E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999928402068559	WITHOUT_CLASSIFICATION	7.159793144156753E-6	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.999994454026135	WITHOUT_CLASSIFICATION	5.5459738650000215E-6	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999779597723203	WITHOUT_CLASSIFICATION	2.2040227679762734E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999847304976749	WITHOUT_CLASSIFICATION	1.5269502325198302E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999847304976749	WITHOUT_CLASSIFICATION	1.5269502325198302E-5	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999968409405828	WITHOUT_CLASSIFICATION	3.1590594171174996E-6	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999781758534942	WITHOUT_CLASSIFICATION	2.1824146505807875E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.99999908171678	WITHOUT_CLASSIFICATION	9.182832200102863E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999978365861851	WITHOUT_CLASSIFICATION	2.1634138148997106E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999888687171065	WITHOUT_CLASSIFICATION	1.1131282893589302E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999849833564182	WITHOUT_CLASSIFICATION	1.5016643581729584E-5	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999921469898072	WITHOUT_CLASSIFICATION	7.853010192858533E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999988049147949	WITHOUT_CLASSIFICATION	1.1950852051912651E-6	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999997915229655	WITHOUT_CLASSIFICATION	2.0847703451357424E-6	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999087414987229	WITHOUT_CLASSIFICATION	9.12585012770438E-5	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999970539879064	WITHOUT_CLASSIFICATION	2.94601209366519E-6	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999985992315866	WITHOUT_CLASSIFICATION	1.4007684133691245E-6	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999897664891884	WITHOUT_CLASSIFICATION	1.0233510811517083E-5	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998989170457333	WITHOUT_CLASSIFICATION	1.0108295426673451E-4	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999916858168015	WITHOUT_CLASSIFICATION	8.314183198382944E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999863356391971	WITHOUT_CLASSIFICATION	1.3664360802767649E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998066387625909	WITHOUT_CLASSIFICATION	1.9336123740918258E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998066387625909	WITHOUT_CLASSIFICATION	1.9336123740918258E-4	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999997269292755	WITHOUT_CLASSIFICATION	2.73070724463871E-7	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999911734021248	WITHOUT_CLASSIFICATION	8.826597875203535E-6	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999992163843725	WITHOUT_CLASSIFICATION	7.83615627498528E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994791603509	WITHOUT_CLASSIFICATION	5.208396491602438E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999957787197348	WITHOUT_CLASSIFICATION	4.221280265249787E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994248784755219	WITHOUT_CLASSIFICATION	5.751215244780031E-4	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999986830511014	WITHOUT_CLASSIFICATION	1.3169488986589224E-6	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999991369433041	WITHOUT_CLASSIFICATION	8.630566959447113E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999930665917711	WITHOUT_CLASSIFICATION	6.933408228890202E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999984324887154	WITHOUT_CLASSIFICATION	1.567511284548416E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999984324887154	WITHOUT_CLASSIFICATION	1.567511284548416E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999977996991821	WITHOUT_CLASSIFICATION	2.200300817978088E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999547001986	WITHOUT_CLASSIFICATION	4.529980129320419E-8	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999995101585507	WITHOUT_CLASSIFICATION	4.898414492687584E-7	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999638035760693	WITHOUT_CLASSIFICATION	3.619642393059938E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999968388149776	WITHOUT_CLASSIFICATION	3.161185022427196E-6	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.999991762787535	WITHOUT_CLASSIFICATION	8.237212464921424E-6	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999966128997294	WITHOUT_CLASSIFICATION	3.3871002706701154E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997716853682658	WITHOUT_CLASSIFICATION	2.283146317341994E-4	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999991874559883	WITHOUT_CLASSIFICATION	8.125440117374365E-7	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999987284413164	WITHOUT_CLASSIFICATION	1.2715586835873896E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999881460334021	WITHOUT_CLASSIFICATION	1.185396659791358E-5	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999473813138225	WITHOUT_CLASSIFICATION	5.261868617751443E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998077382163	WITHOUT_CLASSIFICATION	1.9226178376207367E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999414965881225	WITHOUT_CLASSIFICATION	5.8503411877569606E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999074415898747	WITHOUT_CLASSIFICATION	9.255841012534691E-5	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9997400064275205	WITHOUT_CLASSIFICATION	2.599935724795871E-4	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999919201031036	WITHOUT_CLASSIFICATION	8.079896896446723E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997834581714	WITHOUT_CLASSIFICATION	2.165418284672204E-7	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999941233044114	WITHOUT_CLASSIFICATION	5.876695588679758E-6	TEST
by default	WITHOUT_CLASSIFICATION	0.9999891155245824	WITHOUT_CLASSIFICATION	1.0884475417620683E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999641378675901	WITHOUT_CLASSIFICATION	3.5862132409816526E-5	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999993970998616	WITHOUT_CLASSIFICATION	6.029001384244124E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999787859695312	WITHOUT_CLASSIFICATION	2.1214030468800043E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998025974310562	WITHOUT_CLASSIFICATION	1.9740256894387542E-4	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999967352209308	WITHOUT_CLASSIFICATION	3.264779069150592E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999977044518105	WITHOUT_CLASSIFICATION	2.2955481895303698E-6	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999962587784798	WITHOUT_CLASSIFICATION	3.741221520295722E-6	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999995333405335	WITHOUT_CLASSIFICATION	4.666594664814337E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9988806708119355	WITHOUT_CLASSIFICATION	0.0011193291880644278	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999959879272099	WITHOUT_CLASSIFICATION	4.012072790133433E-6	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999978882342051	WITHOUT_CLASSIFICATION	2.1117657949837124E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996276875003	WITHOUT_CLASSIFICATION	3.723124996520223E-7	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999020646738624	WITHOUT_CLASSIFICATION	9.7935326137582E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999687909234614	WITHOUT_CLASSIFICATION	3.12090765387213E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999762413477564	WITHOUT_CLASSIFICATION	2.3758652243644892E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999974222476983	WITHOUT_CLASSIFICATION	2.5777523016891864E-6	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999966737282335	WITHOUT_CLASSIFICATION	3.3262717664967216E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999980613335868	WITHOUT_CLASSIFICATION	1.9386664132010004E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999878296174249	WITHOUT_CLASSIFICATION	1.2170382574974247E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999878296174249	WITHOUT_CLASSIFICATION	1.2170382574974247E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999824171341476	WITHOUT_CLASSIFICATION	1.7582865852413824E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999949903893102	WITHOUT_CLASSIFICATION	5.0096106898958885E-6	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999996501779737	WITHOUT_CLASSIFICATION	3.498220263651135E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999952781819013	WITHOUT_CLASSIFICATION	4.721818098762552E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999996542621164	WITHOUT_CLASSIFICATION	3.4573788360595286E-6	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997961485708	WITHOUT_CLASSIFICATION	2.0385142913350543E-7	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999956193765	WITHOUT_CLASSIFICATION	4.380623609444179E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999977206776176	WITHOUT_CLASSIFICATION	2.2793223822994397E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999824171341476	WITHOUT_CLASSIFICATION	1.7582865852413824E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999949903893102	WITHOUT_CLASSIFICATION	5.0096106898958885E-6	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999995914994315	WITHOUT_CLASSIFICATION	4.085005685014428E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999923469336528	WITHOUT_CLASSIFICATION	7.653066347256034E-6	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999884510727252	WITHOUT_CLASSIFICATION	1.1548927274837684E-5	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999677275071179	WITHOUT_CLASSIFICATION	3.227249288208177E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990753246905	WITHOUT_CLASSIFICATION	9.246753095109521E-7	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999994375015373	WITHOUT_CLASSIFICATION	5.624984626233106E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999997622259961	WITHOUT_CLASSIFICATION	2.3777400390192634E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9975217278452596	WITHOUT_CLASSIFICATION	0.002478272154740318	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999984480904864	WITHOUT_CLASSIFICATION	1.5519095136044323E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999661419249036	WITHOUT_CLASSIFICATION	3.3858075096466534E-5	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999825131001895	WITHOUT_CLASSIFICATION	1.748689981050102E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999661419249036	WITHOUT_CLASSIFICATION	3.3858075096466534E-5	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.999995590006037	WITHOUT_CLASSIFICATION	4.4099939629733E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999829979138759	WITHOUT_CLASSIFICATION	1.7002086124046833E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999912356951715	WITHOUT_CLASSIFICATION	8.764304828639135E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999904272001497	WITHOUT_CLASSIFICATION	9.572799850293406E-5	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999915670301592	WITHOUT_CLASSIFICATION	8.432969840725514E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9975217278452596	WITHOUT_CLASSIFICATION	0.002478272154740318	TEST
}	WITHOUT_CLASSIFICATION	0.9975217278452596	WITHOUT_CLASSIFICATION	0.002478272154740318	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999972817350503	WITHOUT_CLASSIFICATION	2.7182649496929057E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999993228797138	WITHOUT_CLASSIFICATION	6.771202861808695E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999946771608349	WITHOUT_CLASSIFICATION	5.32283916519294E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999963260375262	WITHOUT_CLASSIFICATION	3.673962473677024E-6	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999985935949126	WITHOUT_CLASSIFICATION	1.4064050873502707E-6	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999934049308503	WITHOUT_CLASSIFICATION	6.595069149581935E-6	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999769044314977	WITHOUT_CLASSIFICATION	2.309556850239415E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.999991064197088	WITHOUT_CLASSIFICATION	8.935802912007309E-6	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999978699228546	WITHOUT_CLASSIFICATION	2.1300771455161617E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9966728973201919	WITHOUT_CLASSIFICATION	0.0033271026798081687	TEST
columns	WITHOUT_CLASSIFICATION	0.9998566660965685	WITHOUT_CLASSIFICATION	1.433339034315086E-4	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999728838653522	WITHOUT_CLASSIFICATION	2.7116134647758752E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999944197953804	WITHOUT_CLASSIFICATION	5.580204619568475E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9997712245769689	WITHOUT_CLASSIFICATION	2.2877542303127157E-4	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999797862151413	WITHOUT_CLASSIFICATION	2.0213784858776272E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999980765079578	WITHOUT_CLASSIFICATION	1.9234920421316073E-6	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999996510837695	WITHOUT_CLASSIFICATION	3.489162304622329E-7	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999949456940451	WITHOUT_CLASSIFICATION	5.0543059548960485E-6	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999993378299888	WITHOUT_CLASSIFICATION	6.621700111089628E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999977217005326	WITHOUT_CLASSIFICATION	2.278299467378154E-6	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9988548458094005	WITHOUT_CLASSIFICATION	0.0011451541905995318	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997335303031	WITHOUT_CLASSIFICATION	2.6646969685823277E-7	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996488547648977	WITHOUT_CLASSIFICATION	3.511452351022773E-4	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999986257422459	WITHOUT_CLASSIFICATION	1.374257754156223E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999974304658761	WITHOUT_CLASSIFICATION	2.5695341240477886E-6	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999966917969526	WITHOUT_CLASSIFICATION	3.3082030474642927E-6	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9994036201226267	WITHOUT_CLASSIFICATION	5.96379877373158E-4	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999085923481	WITHOUT_CLASSIFICATION	9.140765181001692E-8	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999989219049064	WITHOUT_CLASSIFICATION	1.0780950936001476E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999795060321541	WITHOUT_CLASSIFICATION	2.0493967845799353E-5	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999804427003981	WITHOUT_CLASSIFICATION	1.9557299601862087E-5	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999818660992035	WITHOUT_CLASSIFICATION	1.8133900796578738E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999936344112955	WITHOUT_CLASSIFICATION	6.365588704478219E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.999991064197088	WITHOUT_CLASSIFICATION	8.935802912007309E-6	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999948805027083	WITHOUT_CLASSIFICATION	5.119497291598704E-6	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9997895608184234	WITHOUT_CLASSIFICATION	2.1043918157666715E-4	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.999447149506672	WITHOUT_CLASSIFICATION	5.528504933280383E-4	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999671392285123	WITHOUT_CLASSIFICATION	3.2860771487668855E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999978685909807	WITHOUT_CLASSIFICATION	2.1314090193892974E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999842949213694	WITHOUT_CLASSIFICATION	1.5705078630619447E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999963260375262	WITHOUT_CLASSIFICATION	3.673962473677024E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999963260375262	WITHOUT_CLASSIFICATION	3.673962473677024E-6	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999997987282185	WITHOUT_CLASSIFICATION	2.0127178150521664E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999802446017614	WITHOUT_CLASSIFICATION	1.9755398238636857E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999923877067901	WITHOUT_CLASSIFICATION	7.612293209843523E-6	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996453217278	WITHOUT_CLASSIFICATION	3.5467827215805844E-7	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999724177205909	WITHOUT_CLASSIFICATION	2.7582279409083355E-5	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999988079132515	WITHOUT_CLASSIFICATION	1.1920867484863451E-6	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999891072649215	WITHOUT_CLASSIFICATION	1.0892735078390726E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999977614872084	WITHOUT_CLASSIFICATION	2.2385127916533404E-6	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999993214435078	WITHOUT_CLASSIFICATION	6.785564922912074E-7	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999935888480811	WITHOUT_CLASSIFICATION	6.411151918861688E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972540330699	WITHOUT_CLASSIFICATION	2.745966930081555E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999958479878475	WITHOUT_CLASSIFICATION	4.152012152515291E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9985826061293295	WITHOUT_CLASSIFICATION	0.0014173938706705663	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999824171341476	WITHOUT_CLASSIFICATION	1.7582865852413824E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972540330699	WITHOUT_CLASSIFICATION	2.745966930081555E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998707884469882	WITHOUT_CLASSIFICATION	1.2921155301182774E-4	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999978238433551	WITHOUT_CLASSIFICATION	2.176156644836036E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999958302742358	WITHOUT_CLASSIFICATION	4.169725764263399E-6	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9967330619293487	WITHOUT_CLASSIFICATION	0.0032669380706513173	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9985826061293295	WITHOUT_CLASSIFICATION	0.0014173938706705663	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999195360967846	WITHOUT_CLASSIFICATION	8.046390321544304E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993751937628	WITHOUT_CLASSIFICATION	6.248062371719489E-7	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982758880958	WITHOUT_CLASSIFICATION	1.724111904234205E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999998992818927	WITHOUT_CLASSIFICATION	1.0071810733599099E-7	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9983238311496179	WITHOUT_CLASSIFICATION	0.0016761688503821614	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999722076754324	WITHOUT_CLASSIFICATION	2.7792324567593705E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.99999938584844	WITHOUT_CLASSIFICATION	6.14151560090864E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9984938454522636	WITHOUT_CLASSIFICATION	0.0015061545477364614	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999948615080747	WITHOUT_CLASSIFICATION	5.138491925214663E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999966673845903	WITHOUT_CLASSIFICATION	3.332615409728899E-6	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999980381127711	WITHOUT_CLASSIFICATION	1.9618872289194065E-6	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998012788285	WITHOUT_CLASSIFICATION	1.987211714499681E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972540330699	WITHOUT_CLASSIFICATION	2.745966930081555E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999195360967846	WITHOUT_CLASSIFICATION	8.046390321544304E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982758880958	WITHOUT_CLASSIFICATION	1.724111904234205E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999991915603936	WITHOUT_CLASSIFICATION	8.084396063184949E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999591521374908	WITHOUT_CLASSIFICATION	4.08478625092757E-5	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999931261633908	WITHOUT_CLASSIFICATION	6.873836609304272E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9985826061293295	WITHOUT_CLASSIFICATION	0.0014173938706705663	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999994736593278	WITHOUT_CLASSIFICATION	5.263406721815218E-7	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9982812762524487	WITHOUT_CLASSIFICATION	0.001718723747551352	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9979196524166893	WITHOUT_CLASSIFICATION	0.0020803475833107068	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991732872598146	WITHOUT_CLASSIFICATION	8.267127401854796E-4	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9984938454522636	WITHOUT_CLASSIFICATION	0.0015061545477364614	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998707884469882	WITHOUT_CLASSIFICATION	1.2921155301182774E-4	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9986991963073775	WITHOUT_CLASSIFICATION	0.0013008036926225452	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999979561954476	WITHOUT_CLASSIFICATION	2.043804552286746E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.999974345809757	WITHOUT_CLASSIFICATION	2.565419024299899E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999988574753056	WITHOUT_CLASSIFICATION	1.1425246944011245E-5	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999522250073118	WITHOUT_CLASSIFICATION	4.7774992688125745E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999784664231631	WITHOUT_CLASSIFICATION	2.1533576836827414E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999798687017665	WITHOUT_CLASSIFICATION	2.013129823351806E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999904272001497	WITHOUT_CLASSIFICATION	9.572799850293406E-5	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945902865156	WITHOUT_CLASSIFICATION	5.409713484416814E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999970781738603	WITHOUT_CLASSIFICATION	2.9218261397365678E-6	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998885419409158	WITHOUT_CLASSIFICATION	1.1145805908411031E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999971379604189	WITHOUT_CLASSIFICATION	2.862039581064421E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999970860188842	WITHOUT_CLASSIFICATION	2.9139811158120037E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999997589892935	WITHOUT_CLASSIFICATION	2.4101070646932484E-7	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999121757240083	WITHOUT_CLASSIFICATION	8.782427599169386E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999957692493545	WITHOUT_CLASSIFICATION	4.230750645504609E-6	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991732872598146	WITHOUT_CLASSIFICATION	8.267127401854796E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9985141725115979	WITHOUT_CLASSIFICATION	0.001485827488402197	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9989973777734206	WITHOUT_CLASSIFICATION	0.0010026222265794675	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9995827716361534	WITHOUT_CLASSIFICATION	4.1722836384656E-4	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9991232015496743	WITHOUT_CLASSIFICATION	8.767984503256446E-4	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999890343721017	WITHOUT_CLASSIFICATION	1.0965627898292313E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999999898452316	WITHOUT_CLASSIFICATION	1.0154768410019599E-7	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999956806339857	WITHOUT_CLASSIFICATION	4.319366014339816E-6	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999966097280065	WITHOUT_CLASSIFICATION	3.390271993511319E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999992665760817	WITHOUT_CLASSIFICATION	7.334239182676098E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999784838541462	WITHOUT_CLASSIFICATION	2.1516145853832652E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999905743603307	WITHOUT_CLASSIFICATION	9.4256396693757E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999808281098165	WITHOUT_CLASSIFICATION	1.9171890183526728E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999911015408589	WITHOUT_CLASSIFICATION	8.898459141053289E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999822573198922	WITHOUT_CLASSIFICATION	1.7742680107747084E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999986591749455	WITHOUT_CLASSIFICATION	1.3408250545767549E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999965582633513	WITHOUT_CLASSIFICATION	3.4417366487302593E-6	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999996726907862	WITHOUT_CLASSIFICATION	3.2730921383463216E-7	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999982413235027	WITHOUT_CLASSIFICATION	1.7586764973693142E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999993172955437	WITHOUT_CLASSIFICATION	6.827044563071606E-7	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999974069131007	WITHOUT_CLASSIFICATION	2.5930868993001184E-6	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9987400421340057	WITHOUT_CLASSIFICATION	0.0012599578659942662	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999918486501835	WITHOUT_CLASSIFICATION	8.151349816551401E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999996606423835	WITHOUT_CLASSIFICATION	3.3935761649830033E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997017781197	WITHOUT_CLASSIFICATION	2.9822188026657506E-7	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999975540049281	WITHOUT_CLASSIFICATION	2.4459950718741287E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997976851716771	WITHOUT_CLASSIFICATION	2.0231482832294776E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999926613913703	WITHOUT_CLASSIFICATION	7.338608629665852E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999862851662427	WITHOUT_CLASSIFICATION	1.3714833757401388E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999543813415783	WITHOUT_CLASSIFICATION	4.5618658421695396E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999177957537136	WITHOUT_CLASSIFICATION	8.220424628640223E-5	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999951481217463	WITHOUT_CLASSIFICATION	4.851878253728178E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999802850246633	WITHOUT_CLASSIFICATION	1.971497533672915E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999988685399435	WITHOUT_CLASSIFICATION	1.1314600564884492E-6	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999811482871924	WITHOUT_CLASSIFICATION	1.8851712807587674E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999988591849243	WITHOUT_CLASSIFICATION	1.1408150757720768E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999992725482578	WITHOUT_CLASSIFICATION	7.274517422298485E-7	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999987183129225	WITHOUT_CLASSIFICATION	1.2816870774089437E-6	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999998417388524	WITHOUT_CLASSIFICATION	1.582611476665818E-7	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999992725482578	WITHOUT_CLASSIFICATION	7.274517422298485E-7	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999988591849243	WITHOUT_CLASSIFICATION	1.1408150757720768E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999987183129225	WITHOUT_CLASSIFICATION	1.2816870774089437E-6	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999959336478494	WITHOUT_CLASSIFICATION	4.066352150473553E-6	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999965349185859	WITHOUT_CLASSIFICATION	3.4650814140986736E-6	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.99993067767586	WITHOUT_CLASSIFICATION	6.932232414004572E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999988817071083	WITHOUT_CLASSIFICATION	1.118292891695409E-5	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999994221942	WITHOUT_CLASSIFICATION	5.778058092634954E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999614395986081	WITHOUT_CLASSIFICATION	3.856040139183917E-5	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999867363642165	WITHOUT_CLASSIFICATION	1.3263635783540623E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999959139401627	WITHOUT_CLASSIFICATION	4.086059837250939E-6	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999979792151558	WITHOUT_CLASSIFICATION	2.020784844208575E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999994861917954	WITHOUT_CLASSIFICATION	5.138082046660178E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999830242982138	WITHOUT_CLASSIFICATION	1.6975701786199722E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999966271979337	WITHOUT_CLASSIFICATION	3.3728020662746964E-6	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999988262292322	WITHOUT_CLASSIFICATION	1.1737707678690406E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999988817071083	WITHOUT_CLASSIFICATION	1.118292891695409E-5	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999994706155779	WITHOUT_CLASSIFICATION	5.293844221097162E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999961686450591	WITHOUT_CLASSIFICATION	3.831354940800716E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999729750155	WITHOUT_CLASSIFICATION	2.702498449452055E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999058902731	WITHOUT_CLASSIFICATION	9.41097268710092E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999999880364101	WITHOUT_CLASSIFICATION	1.1963589889666106E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999935893376453	WITHOUT_CLASSIFICATION	6.410662354724933E-6	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999972522595717	WITHOUT_CLASSIFICATION	2.7477404282545348E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996743992666	WITHOUT_CLASSIFICATION	3.256007334514481E-7	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999710711346983	WITHOUT_CLASSIFICATION	2.8928865301780242E-5	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999979203240914	WITHOUT_CLASSIFICATION	2.0796759085645865E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999914191083716	WITHOUT_CLASSIFICATION	8.58089162823237E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999914191083716	WITHOUT_CLASSIFICATION	8.58089162823237E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996470478588	WITHOUT_CLASSIFICATION	3.5295214120100577E-7	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996470478588	WITHOUT_CLASSIFICATION	3.5295214120100577E-7	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999085644998122	WITHOUT_CLASSIFICATION	9.143550018775654E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999729750155	WITHOUT_CLASSIFICATION	2.702498449452055E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999951530312182	WITHOUT_CLASSIFICATION	4.846968781790982E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999996320327106	WITHOUT_CLASSIFICATION	3.679672894303613E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999978589869898	WITHOUT_CLASSIFICATION	2.141013010146024E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999978589869898	WITHOUT_CLASSIFICATION	2.141013010146024E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999989092520274	WITHOUT_CLASSIFICATION	1.0907479726402489E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999506965581013	WITHOUT_CLASSIFICATION	4.930344189864036E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999140132717	WITHOUT_CLASSIFICATION	8.598672833848665E-8	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999934413985113	WITHOUT_CLASSIFICATION	6.558601488595977E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999966995176596	WITHOUT_CLASSIFICATION	3.3004823404595483E-6	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999697340441	WITHOUT_CLASSIFICATION	3.026595589190661E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999987353604514	WITHOUT_CLASSIFICATION	1.2646395487229515E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998831359294016	WITHOUT_CLASSIFICATION	1.1686407059838712E-4	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999952139133775	WITHOUT_CLASSIFICATION	4.7860866225071065E-6	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999999365650175	WITHOUT_CLASSIFICATION	6.343498251088661E-7	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999986588508221	WITHOUT_CLASSIFICATION	1.3411491779428742E-6	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999924024129392	WITHOUT_CLASSIFICATION	7.597587060794541E-6	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999993723820212	WITHOUT_CLASSIFICATION	6.276179788988683E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999853606857828	WITHOUT_CLASSIFICATION	1.4639314217174684E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999957789797416	WITHOUT_CLASSIFICATION	4.221020258390175E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999981837303866	WITHOUT_CLASSIFICATION	1.816269613324793E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555778037742	WITHOUT_CLASSIFICATION	4.442219622590166E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999996469460908	WITHOUT_CLASSIFICATION	3.530539091622293E-7	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999960094220665	WITHOUT_CLASSIFICATION	3.990577933509706E-6	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999986498478399	WITHOUT_CLASSIFICATION	1.3501521600504587E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999998708575717	WITHOUT_CLASSIFICATION	1.2914242839912796E-7	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999658607475281	WITHOUT_CLASSIFICATION	3.413925247187408E-5	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999995144909929	WITHOUT_CLASSIFICATION	4.855090070421213E-7	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999989908105245	WITHOUT_CLASSIFICATION	1.009189475529433E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9971801985191704	WITHOUT_CLASSIFICATION	0.002819801480829656	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999997754389636	WITHOUT_CLASSIFICATION	2.2456103639775524E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999808281098165	WITHOUT_CLASSIFICATION	1.9171890183526728E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999986336536496	WITHOUT_CLASSIFICATION	1.3663463503456622E-6	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999994612164177	WITHOUT_CLASSIFICATION	5.387835823017359E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998146115479244	WITHOUT_CLASSIFICATION	1.853884520755984E-4	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956083429316	WITHOUT_CLASSIFICATION	4.391657068404877E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999746018906432	WITHOUT_CLASSIFICATION	2.539810935678958E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999746018906432	WITHOUT_CLASSIFICATION	2.539810935678958E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999928283260953	WITHOUT_CLASSIFICATION	7.1716739046657904E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999685619264191	WITHOUT_CLASSIFICATION	3.143807358081383E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999419343611631	WITHOUT_CLASSIFICATION	5.806563883684294E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999419343611631	WITHOUT_CLASSIFICATION	5.806563883684294E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999965623866972	WITHOUT_CLASSIFICATION	3.4376133028184703E-6	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999994692511332	WITHOUT_CLASSIFICATION	5.307488668030125E-6	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9998315806920735	WITHOUT_CLASSIFICATION	1.684193079266091E-4	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999676763092405	WITHOUT_CLASSIFICATION	3.232369075943488E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999724594788174	WITHOUT_CLASSIFICATION	2.7540521182638856E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999871210690189	WITHOUT_CLASSIFICATION	1.2878930981111277E-5	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999778625918687	WITHOUT_CLASSIFICATION	2.213740813128397E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999991582132457	WITHOUT_CLASSIFICATION	8.417867542671239E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999913653475618	WITHOUT_CLASSIFICATION	8.634652438188435E-6	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999913653475618	WITHOUT_CLASSIFICATION	8.634652438188435E-6	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999587991795	WITHOUT_CLASSIFICATION	4.120082058413695E-8	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999886983364938	WITHOUT_CLASSIFICATION	1.1301663506205918E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999886983364938	WITHOUT_CLASSIFICATION	1.1301663506205918E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999972017447698	WITHOUT_CLASSIFICATION	2.7982552302903595E-6	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999814276707801	WITHOUT_CLASSIFICATION	1.8572329219886075E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9934724724267676	WITHOUT_CLASSIFICATION	0.006527527573232383	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999822563029952	WITHOUT_CLASSIFICATION	1.774369700480415E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999984960877245	WITHOUT_CLASSIFICATION	1.5039122755792527E-6	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998175839434	WITHOUT_CLASSIFICATION	1.8241605661449435E-7	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9997338453141207	WITHOUT_CLASSIFICATION	2.661546858793667E-4	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999363169075695	WITHOUT_CLASSIFICATION	6.368309243051927E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999505618874	WITHOUT_CLASSIFICATION	4.9438112711920854E-8	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999397513791515	WITHOUT_CLASSIFICATION	6.024862084856279E-5	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999610905769	WITHOUT_CLASSIFICATION	3.890942319118744E-8	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999302555478	WITHOUT_CLASSIFICATION	6.974445222943405E-8	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999775008505206	WITHOUT_CLASSIFICATION	2.2499149479401068E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999775008505206	WITHOUT_CLASSIFICATION	2.2499149479401068E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999775008505206	WITHOUT_CLASSIFICATION	2.2499149479401068E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999775008505206	WITHOUT_CLASSIFICATION	2.2499149479401068E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999948718024404	WITHOUT_CLASSIFICATION	5.128197559663647E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999872353793916	WITHOUT_CLASSIFICATION	1.2764620608402324E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999882150257577	WITHOUT_CLASSIFICATION	1.1784974242216232E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9998903033950458	WITHOUT_CLASSIFICATION	1.0969660495421091E-4	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999920240142685	WITHOUT_CLASSIFICATION	7.975985731544588E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999977593240046	WITHOUT_CLASSIFICATION	2.2406759954613478E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997183782768977	WITHOUT_CLASSIFICATION	2.8162172310231454E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999896551709968	WITHOUT_CLASSIFICATION	1.0344829003233637E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999785538166	WITHOUT_CLASSIFICATION	2.1446183400814632E-7	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.999987523196226	WITHOUT_CLASSIFICATION	1.2476803774026688E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999910908814184	WITHOUT_CLASSIFICATION	8.909118581568776E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991119264875	WITHOUT_CLASSIFICATION	8.880735124277321E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996788166462145	WITHOUT_CLASSIFICATION	3.2118335378555993E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998628811326962	WITHOUT_CLASSIFICATION	1.3711886730381637E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999975018551183	WITHOUT_CLASSIFICATION	2.498144881675415E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991119264875	WITHOUT_CLASSIFICATION	8.880735124277321E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.999518737809085	WITHOUT_CLASSIFICATION	4.812621909149583E-4	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999996287492909	WITHOUT_CLASSIFICATION	3.712507090748385E-7	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999996889433424	WITHOUT_CLASSIFICATION	3.1105665760164835E-6	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999638570944903	WITHOUT_CLASSIFICATION	3.6142905509701754E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999986606984416	WITHOUT_CLASSIFICATION	1.3393015583894318E-6	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999932426652693	WITHOUT_CLASSIFICATION	6.757334730531835E-6	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999981155988994	WITHOUT_CLASSIFICATION	1.884401100618425E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999971874868648	WITHOUT_CLASSIFICATION	2.812513135250555E-6	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991531121947	WITHOUT_CLASSIFICATION	8.468878053306872E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992159669997	WITHOUT_CLASSIFICATION	7.840330003987665E-7	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958300308719	WITHOUT_CLASSIFICATION	4.169969128081829E-6	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999966168774528	WITHOUT_CLASSIFICATION	3.383122547251407E-6	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999915390830693	WITHOUT_CLASSIFICATION	8.460916930771317E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9987367575287549	WITHOUT_CLASSIFICATION	0.0012632424712450828	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999003189365	WITHOUT_CLASSIFICATION	9.968106350562498E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999990010383474	WITHOUT_CLASSIFICATION	9.989616525936415E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999929324626184	WITHOUT_CLASSIFICATION	7.06753738157456E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979534336234	WITHOUT_CLASSIFICATION	2.046566376607151E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999814325238215	WITHOUT_CLASSIFICATION	1.8567476178529215E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979534336234	WITHOUT_CLASSIFICATION	2.046566376607151E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996122477902	WITHOUT_CLASSIFICATION	3.8775220973432434E-7	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999818706149094	WITHOUT_CLASSIFICATION	1.8129385090634547E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999998166355122	WITHOUT_CLASSIFICATION	1.8336448782698415E-7	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999902861769739	WITHOUT_CLASSIFICATION	9.713823025993748E-6	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999999204790544	WITHOUT_CLASSIFICATION	7.952094559973637E-7	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999582372672445	WITHOUT_CLASSIFICATION	4.176273275542807E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999371070270534	WITHOUT_CLASSIFICATION	6.289297294653057E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999929324626184	WITHOUT_CLASSIFICATION	7.06753738157456E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999814325238215	WITHOUT_CLASSIFICATION	1.8567476178529215E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996122477902	WITHOUT_CLASSIFICATION	3.8775220973432434E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999992969652752	WITHOUT_CLASSIFICATION	7.030347248624199E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.999992076241421	WITHOUT_CLASSIFICATION	7.923758579045721E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999716715460127	WITHOUT_CLASSIFICATION	2.8328453987131678E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999356571551	WITHOUT_CLASSIFICATION	6.434284491037541E-8	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999927164663234	WITHOUT_CLASSIFICATION	7.283533676550642E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999999612838316	WITHOUT_CLASSIFICATION	3.8716168407093335E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999995573353892	WITHOUT_CLASSIFICATION	4.4266461080558365E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555778037742	WITHOUT_CLASSIFICATION	4.442219622590166E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999818706149094	WITHOUT_CLASSIFICATION	1.8129385090634547E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998787385002	WITHOUT_CLASSIFICATION	1.2126149994341984E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999995051017818	WITHOUT_CLASSIFICATION	4.948982181900551E-6	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999948616736154	WITHOUT_CLASSIFICATION	5.13832638462124E-6	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999985430960642	WITHOUT_CLASSIFICATION	1.4569039358831582E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555778037742	WITHOUT_CLASSIFICATION	4.442219622590166E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999980531907198	WITHOUT_CLASSIFICATION	1.9468092802039265E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555778037742	WITHOUT_CLASSIFICATION	4.442219622590166E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999891496251339	WITHOUT_CLASSIFICATION	1.085037486627542E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999743435699568	WITHOUT_CLASSIFICATION	2.5656430043169044E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999913005696023	WITHOUT_CLASSIFICATION	8.699430397774076E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999985471035584	WITHOUT_CLASSIFICATION	1.4528964416011066E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999956607704598	WITHOUT_CLASSIFICATION	4.3392295402739354E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999829003221521	WITHOUT_CLASSIFICATION	1.7099677847983808E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999849632814409	WITHOUT_CLASSIFICATION	1.5036718558943647E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998357081022	WITHOUT_CLASSIFICATION	1.6429189779597937E-6	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999982098224901	WITHOUT_CLASSIFICATION	1.7901775098555836E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.999992729191825	WITHOUT_CLASSIFICATION	7.270808174969305E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992399437725286	WITHOUT_CLASSIFICATION	7.600562274714558E-4	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995049678565	WITHOUT_CLASSIFICATION	4.950321434182121E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9934724724267676	WITHOUT_CLASSIFICATION	0.006527527573232383	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999293509279704	WITHOUT_CLASSIFICATION	7.064907202958762E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999556053818914	WITHOUT_CLASSIFICATION	4.439461810852777E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999762668721166	WITHOUT_CLASSIFICATION	2.3733127883397785E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999896796445909	WITHOUT_CLASSIFICATION	1.0320355409107312E-4	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999990343537886	WITHOUT_CLASSIFICATION	9.656462114024903E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999984703990903	WITHOUT_CLASSIFICATION	1.5296009096624712E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999990889563001	WITHOUT_CLASSIFICATION	9.110436999789504E-7	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999929087914123	WITHOUT_CLASSIFICATION	7.091208587617702E-6	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996986268939	WITHOUT_CLASSIFICATION	3.013731061507256E-7	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999976570178108	WITHOUT_CLASSIFICATION	2.342982189271164E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9934724724267676	WITHOUT_CLASSIFICATION	0.006527527573232383	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999854025983136	WITHOUT_CLASSIFICATION	1.4597401686360741E-5	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999952165043934	WITHOUT_CLASSIFICATION	4.783495606677499E-6	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999415409647369	WITHOUT_CLASSIFICATION	5.8459035263184534E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999486660424072	WITHOUT_CLASSIFICATION	5.1333957592862737E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9995431002481407	WITHOUT_CLASSIFICATION	4.5689975185937026E-4	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999976174210983	WITHOUT_CLASSIFICATION	2.3825789016854253E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994844484128	WITHOUT_CLASSIFICATION	5.155515872093001E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999995048110181	WITHOUT_CLASSIFICATION	4.951889820095052E-7	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999449983280896	WITHOUT_CLASSIFICATION	5.500167191046194E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999889478008678	WITHOUT_CLASSIFICATION	1.1052199132202346E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9930375053659445	WITHOUT_CLASSIFICATION	0.0069624946340555065	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997612262195584	WITHOUT_CLASSIFICATION	2.3877378044153557E-4	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999962041895525	WITHOUT_CLASSIFICATION	3.7958104476118433E-6	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999033886814999	WITHOUT_CLASSIFICATION	9.66113185001312E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997846801029407	WITHOUT_CLASSIFICATION	2.153198970593891E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999982054537431	WITHOUT_CLASSIFICATION	1.7945462569149375E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9801918584986445	WITHOUT_CLASSIFICATION	0.019808141501355424	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994660882264	WITHOUT_CLASSIFICATION	5.339117736144897E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999989223968484	WITHOUT_CLASSIFICATION	1.0776031515776055E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999900428635849	WITHOUT_CLASSIFICATION	9.957136415094139E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999900428635849	WITHOUT_CLASSIFICATION	9.957136415094139E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999974166208317	WITHOUT_CLASSIFICATION	2.5833791682727467E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998357081022	WITHOUT_CLASSIFICATION	1.6429189779597937E-6	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999995490727539	WITHOUT_CLASSIFICATION	4.509272460988695E-6	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999968313019457	WITHOUT_CLASSIFICATION	3.1686980543420736E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999980610911747	WITHOUT_CLASSIFICATION	1.938908825327436E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999989409850731	WITHOUT_CLASSIFICATION	1.059014926915693E-6	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999848714517926	WITHOUT_CLASSIFICATION	1.5128548207452291E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9980941139010776	WITHOUT_CLASSIFICATION	0.0019058860989223836	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999994754813223	WITHOUT_CLASSIFICATION	5.245186777074582E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999935800307465	WITHOUT_CLASSIFICATION	6.419969253536159E-6	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999983792296292	WITHOUT_CLASSIFICATION	1.6207703708100033E-6	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999974435003314	WITHOUT_CLASSIFICATION	2.556499668561346E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999989299895835	WITHOUT_CLASSIFICATION	1.070010416473212E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999993654822413	WITHOUT_CLASSIFICATION	6.345177586350428E-7	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999875815044279	WITHOUT_CLASSIFICATION	1.2418495572120616E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998175037942	WITHOUT_CLASSIFICATION	1.82496205813315E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997100259919	WITHOUT_CLASSIFICATION	2.8997400815640884E-7	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999985085192327	WITHOUT_CLASSIFICATION	1.4914807673251235E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999982738921931	WITHOUT_CLASSIFICATION	1.7261078070097984E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998975759811	WITHOUT_CLASSIFICATION	1.0242401901657014E-7	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999415001275	WITHOUT_CLASSIFICATION	5.849987246481966E-8	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999963883179992	WITHOUT_CLASSIFICATION	3.6116820007926327E-6	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999969989793369	WITHOUT_CLASSIFICATION	3.0010206631599595E-6	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999983544056	WITHOUT_CLASSIFICATION	1.6455944066136942E-8	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9801918584986445	WITHOUT_CLASSIFICATION	0.019808141501355424	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999989935136437	WITHOUT_CLASSIFICATION	1.0064863562885687E-6	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999998349602459	WITHOUT_CLASSIFICATION	1.6503975401992958E-7	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999942778833079	WITHOUT_CLASSIFICATION	5.722116692078187E-6	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999983012360716	WITHOUT_CLASSIFICATION	1.6987639283951357E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999938217062818	WITHOUT_CLASSIFICATION	6.178293718299164E-6	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999930534547902	WITHOUT_CLASSIFICATION	6.94654520985872E-6	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999260810872407	WITHOUT_CLASSIFICATION	7.391891275929843E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999597919897485	WITHOUT_CLASSIFICATION	4.0208010251442976E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999959395065361	WITHOUT_CLASSIFICATION	4.060493463900645E-6	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999984402082146	WITHOUT_CLASSIFICATION	1.559791785400337E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999872519287603	WITHOUT_CLASSIFICATION	1.2748071239727573E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999885956104602	WITHOUT_CLASSIFICATION	1.140438953989424E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9961898475471208	WITHOUT_CLASSIFICATION	0.0038101524528791368	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999595220931068	WITHOUT_CLASSIFICATION	4.047790689319305E-5	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995330963728	WITHOUT_CLASSIFICATION	4.6690362718939795E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999989829333067	WITHOUT_CLASSIFICATION	1.017066693263907E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999989829333067	WITHOUT_CLASSIFICATION	1.017066693263907E-6	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999807553368764	WITHOUT_CLASSIFICATION	1.924466312368149E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999823261639966	WITHOUT_CLASSIFICATION	1.7673836003441863E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999862264807203	WITHOUT_CLASSIFICATION	1.3773519279578396E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999862264807203	WITHOUT_CLASSIFICATION	1.3773519279578396E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.999999518568551	WITHOUT_CLASSIFICATION	4.814314491150433E-7	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.999995442933348	WITHOUT_CLASSIFICATION	4.5570666519540016E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999994628814236	WITHOUT_CLASSIFICATION	5.371185763322878E-7	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999932493310758	WITHOUT_CLASSIFICATION	6.750668924286236E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998664443140046	WITHOUT_CLASSIFICATION	1.3355568599538687E-4	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999710479109786	WITHOUT_CLASSIFICATION	2.8952089021380403E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999990138052169	WITHOUT_CLASSIFICATION	9.861947829777783E-7	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999990138052169	WITHOUT_CLASSIFICATION	9.861947829777783E-7	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999773461037994	WITHOUT_CLASSIFICATION	2.265389620063691E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999970364185333	WITHOUT_CLASSIFICATION	2.9635814666701947E-6	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999295968934744	WITHOUT_CLASSIFICATION	7.040310652565494E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999926705460093	WITHOUT_CLASSIFICATION	7.329453990780305E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999926705460093	WITHOUT_CLASSIFICATION	7.329453990780305E-6	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999903897343095	WITHOUT_CLASSIFICATION	9.61026569053681E-6	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999872986219704	WITHOUT_CLASSIFICATION	1.2701378029601118E-5	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999954547243883	WITHOUT_CLASSIFICATION	4.545275611656085E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.999996258853526	WITHOUT_CLASSIFICATION	3.7411464739646142E-6	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999992154925706	WITHOUT_CLASSIFICATION	7.845074292213701E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999789211024255	WITHOUT_CLASSIFICATION	2.1078897574499166E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999988301835808	WITHOUT_CLASSIFICATION	1.1698164191916577E-5	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999940904601015	WITHOUT_CLASSIFICATION	5.909539898636669E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999927044718082	WITHOUT_CLASSIFICATION	7.295528191800399E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999972266137833	WITHOUT_CLASSIFICATION	2.773386216699553E-6	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999793677516	WITHOUT_CLASSIFICATION	2.063224826299323E-8	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999508435437663	WITHOUT_CLASSIFICATION	4.91564562338333E-5	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999293058620959	WITHOUT_CLASSIFICATION	7.069413790407405E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999736867394682	WITHOUT_CLASSIFICATION	2.6313260531731338E-5	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.999964914201593	WITHOUT_CLASSIFICATION	3.508579840704764E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999965258375099	WITHOUT_CLASSIFICATION	3.4741624900923025E-5	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998440022382	WITHOUT_CLASSIFICATION	1.5599776183704913E-7	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999984315686045	WITHOUT_CLASSIFICATION	1.568431395483297E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999949775570153	WITHOUT_CLASSIFICATION	5.02244298479013E-6	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999577475992623	WITHOUT_CLASSIFICATION	4.225240073780472E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999894941475309	WITHOUT_CLASSIFICATION	1.0505852469185426E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999921845563413	WITHOUT_CLASSIFICATION	7.815443658664305E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9987789969234573	WITHOUT_CLASSIFICATION	0.0012210030765427123	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999690793823562	WITHOUT_CLASSIFICATION	3.092061764382713E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999482719593908	WITHOUT_CLASSIFICATION	5.172804060910885E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999966705046773	WITHOUT_CLASSIFICATION	3.3294953227113262E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999950934069797	WITHOUT_CLASSIFICATION	4.9065930203123386E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9995899624754259	WITHOUT_CLASSIFICATION	4.1003752457407534E-4	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996427264464	WITHOUT_CLASSIFICATION	3.572735535493548E-7	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995905947746	WITHOUT_CLASSIFICATION	4.094052255074743E-7	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997745502838	WITHOUT_CLASSIFICATION	2.2544971625498524E-7	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999988046951288	WITHOUT_CLASSIFICATION	1.1953048712725898E-6	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999995518394994	WITHOUT_CLASSIFICATION	4.4816050061923595E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999922739696885	WITHOUT_CLASSIFICATION	7.726030311507334E-6	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999998091160892	WITHOUT_CLASSIFICATION	1.908839108031021E-6	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999380151411739	WITHOUT_CLASSIFICATION	6.198485882605749E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999803926545675	WITHOUT_CLASSIFICATION	1.9607345432501963E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999990044912249	WITHOUT_CLASSIFICATION	9.955087749916332E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999894340513223	WITHOUT_CLASSIFICATION	1.0565948677725479E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999985146241823	WITHOUT_CLASSIFICATION	1.4853758176813112E-6	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999994701524272	WITHOUT_CLASSIFICATION	5.298475727464917E-7	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.999956083543818	WITHOUT_CLASSIFICATION	4.391645618202192E-5	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999940357305405	WITHOUT_CLASSIFICATION	5.964269459594904E-6	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999984509892876	WITHOUT_CLASSIFICATION	1.5490107123484111E-6	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999893201971071	WITHOUT_CLASSIFICATION	1.0679802892876992E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999910163746479	WITHOUT_CLASSIFICATION	8.983625352182023E-6	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999364323600777	WITHOUT_CLASSIFICATION	6.356763992228021E-5	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999285139724692	WITHOUT_CLASSIFICATION	7.148602753088385E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999998076324813	WITHOUT_CLASSIFICATION	1.923675187047628E-6	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999864146813103	WITHOUT_CLASSIFICATION	1.3585318689659707E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999949059253391	WITHOUT_CLASSIFICATION	5.094074660900274E-6	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999912499474628	WITHOUT_CLASSIFICATION	8.75005253727743E-6	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998901179196232	WITHOUT_CLASSIFICATION	1.0988208037683673E-4	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999993846439602	WITHOUT_CLASSIFICATION	6.153560397643037E-7	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999668319183901	WITHOUT_CLASSIFICATION	3.316808160987173E-5	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999984974024081	WITHOUT_CLASSIFICATION	1.5025975919093585E-6	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999927366440082	WITHOUT_CLASSIFICATION	7.263355991682465E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999912153684987	WITHOUT_CLASSIFICATION	8.784631501387955E-6	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999998365766777	WITHOUT_CLASSIFICATION	1.6342332229491322E-6	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999146555680167	WITHOUT_CLASSIFICATION	8.534443198326791E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999955355646761	WITHOUT_CLASSIFICATION	4.464435323920546E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999955355646761	WITHOUT_CLASSIFICATION	4.464435323920546E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998495810960473	WITHOUT_CLASSIFICATION	1.5041890395266092E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999748520632941	WITHOUT_CLASSIFICATION	2.5147936705871273E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999998890829379	WITHOUT_CLASSIFICATION	1.1091706209867513E-6	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999914410878944	WITHOUT_CLASSIFICATION	8.558912105579052E-6	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999000498856502	WITHOUT_CLASSIFICATION	9.995011434982268E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999899564158264	WITHOUT_CLASSIFICATION	1.004358417360509E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999996531968952	WITHOUT_CLASSIFICATION	3.468031047009249E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999867594108	WITHOUT_CLASSIFICATION	1.3240589308252413E-8	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999977388886332	WITHOUT_CLASSIFICATION	2.261111366770021E-6	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999804190832431	WITHOUT_CLASSIFICATION	1.958091675689267E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999997317943526	WITHOUT_CLASSIFICATION	2.68205647311978E-7	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999752948498597	WITHOUT_CLASSIFICATION	2.4705150140379894E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999910700272033	WITHOUT_CLASSIFICATION	8.929972796658723E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999984395703857	WITHOUT_CLASSIFICATION	1.5604296143468166E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999969496775581	WITHOUT_CLASSIFICATION	3.050322441895664E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999969496775581	WITHOUT_CLASSIFICATION	3.050322441895664E-6	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999996466526238	WITHOUT_CLASSIFICATION	3.5334737630147547E-7	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999921159816866	WITHOUT_CLASSIFICATION	7.884018313359353E-6	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999988295805751	WITHOUT_CLASSIFICATION	1.170419424932045E-6	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999731447723	WITHOUT_CLASSIFICATION	2.685522774570822E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999862093957481	WITHOUT_CLASSIFICATION	1.3790604251813585E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428427288725	WITHOUT_CLASSIFICATION	1.57157271127595E-4	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999912146055028	WITHOUT_CLASSIFICATION	8.785394497216339E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999865492835689	WITHOUT_CLASSIFICATION	1.3450716431016471E-5	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999854577427287	WITHOUT_CLASSIFICATION	1.454225727121308E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999672675504	WITHOUT_CLASSIFICATION	3.2732449640496376E-8	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999948935301655	WITHOUT_CLASSIFICATION	5.1064698344615286E-6	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997562786348	WITHOUT_CLASSIFICATION	2.4372136514484765E-7	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999980526963052	WITHOUT_CLASSIFICATION	1.9473036948686874E-6	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999906071642	WITHOUT_CLASSIFICATION	9.392835796667805E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999997552633562	WITHOUT_CLASSIFICATION	2.447366438023138E-6	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999994876556645	WITHOUT_CLASSIFICATION	5.123443355415923E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999994394465815	WITHOUT_CLASSIFICATION	5.605534184692984E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998117835933209	WITHOUT_CLASSIFICATION	1.8821640667907255E-4	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999742777877739	WITHOUT_CLASSIFICATION	2.572221222610292E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996486735543	WITHOUT_CLASSIFICATION	3.513264457987077E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999987769374468	WITHOUT_CLASSIFICATION	1.2230625533135165E-6	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999992344609	WITHOUT_CLASSIFICATION	7.655390007137486E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999998360451434	WITHOUT_CLASSIFICATION	1.6395485657304105E-7	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999551202994	WITHOUT_CLASSIFICATION	4.487970051464219E-8	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999995815340493	WITHOUT_CLASSIFICATION	4.184659506834594E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9998826237754898	WITHOUT_CLASSIFICATION	1.1737622451032545E-4	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995945087320708	WITHOUT_CLASSIFICATION	4.0549126792926716E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999716660322927	WITHOUT_CLASSIFICATION	2.8333967707320304E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999997973610956	WITHOUT_CLASSIFICATION	2.0263890442695494E-7	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999901077007574	WITHOUT_CLASSIFICATION	9.892299242563413E-6	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999929671166321	WITHOUT_CLASSIFICATION	7.032883367974214E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999957296124503	WITHOUT_CLASSIFICATION	4.270387549696005E-6	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999587590648439	WITHOUT_CLASSIFICATION	4.1240935155975096E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999996094209621	WITHOUT_CLASSIFICATION	3.905790378998217E-7	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999994501457579	WITHOUT_CLASSIFICATION	5.498542421091452E-7	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999966271524612	WITHOUT_CLASSIFICATION	3.3728475387489364E-6	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.999999974445495	WITHOUT_CLASSIFICATION	2.5554504889992662E-8	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999998815477726	WITHOUT_CLASSIFICATION	1.1845222740377361E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999996696954355	WITHOUT_CLASSIFICATION	3.303045644285651E-7	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999962109599271	WITHOUT_CLASSIFICATION	3.7890400729378253E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999841495058845	WITHOUT_CLASSIFICATION	1.5850494115536036E-5	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999942981470585	WITHOUT_CLASSIFICATION	5.7018529414555545E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999998044383769	WITHOUT_CLASSIFICATION	1.9556162309714678E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999998044383769	WITHOUT_CLASSIFICATION	1.9556162309714678E-6	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999893297938307	WITHOUT_CLASSIFICATION	1.0670206169317327E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995969302797	WITHOUT_CLASSIFICATION	4.03069720186032E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999994813598777	WITHOUT_CLASSIFICATION	5.186401222167499E-7	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999992895254036	WITHOUT_CLASSIFICATION	7.104745962410921E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999953215685988	WITHOUT_CLASSIFICATION	4.678431401141652E-6	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998644110346	WITHOUT_CLASSIFICATION	1.3558896542193063E-7	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999957430809221	WITHOUT_CLASSIFICATION	4.256919077911146E-6	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999951770603291	WITHOUT_CLASSIFICATION	4.822939670830991E-6	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999912988398	WITHOUT_CLASSIFICATION	8.701160196036966E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747104766171	WITHOUT_CLASSIFICATION	2.5289523382929394E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630706246864	WITHOUT_CLASSIFICATION	3.692937531357538E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999721365346567	WITHOUT_CLASSIFICATION	2.786346534340941E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999860995632881	WITHOUT_CLASSIFICATION	1.3900436711927765E-5	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999990530142716	WITHOUT_CLASSIFICATION	9.469857284096902E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999957234807304	WITHOUT_CLASSIFICATION	4.276519269557382E-6	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999743927472294	WITHOUT_CLASSIFICATION	2.5607252770483805E-5	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999997676474331	WITHOUT_CLASSIFICATION	2.3235256686473983E-7	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999939734938	WITHOUT_CLASSIFICATION	6.026506213699794E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999998714968433	WITHOUT_CLASSIFICATION	1.2850315670608115E-6	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999984189640773	WITHOUT_CLASSIFICATION	1.5810359227409862E-6	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999992664699613	WITHOUT_CLASSIFICATION	7.335300387455136E-7	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999964008278	WITHOUT_CLASSIFICATION	3.599172214546824E-8	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999992615478974	WITHOUT_CLASSIFICATION	7.384521026306054E-7	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999965436564726	WITHOUT_CLASSIFICATION	3.456343527399317E-5	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999933323158788	WITHOUT_CLASSIFICATION	6.667684121155191E-6	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999999681371867	WITHOUT_CLASSIFICATION	3.1862813154190273E-8	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999591603873518	WITHOUT_CLASSIFICATION	4.083961264820456E-5	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998393832898	WITHOUT_CLASSIFICATION	1.6061671022563845E-7	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999295739405	WITHOUT_CLASSIFICATION	7.0426059497789E-8	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999995463901433	WITHOUT_CLASSIFICATION	4.5360985675535254E-7	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999992988611619	WITHOUT_CLASSIFICATION	7.011388380743083E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999999113445576	WITHOUT_CLASSIFICATION	8.865544239293602E-7	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999664106272	WITHOUT_CLASSIFICATION	3.3589372905250035E-8	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999997110632077	WITHOUT_CLASSIFICATION	2.8893679222816564E-7	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997820116792	WITHOUT_CLASSIFICATION	2.179883209178098E-7	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999847044521398	WITHOUT_CLASSIFICATION	1.5295547860137036E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999983923518594	WITHOUT_CLASSIFICATION	1.6076481405623884E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995461380876	WITHOUT_CLASSIFICATION	4.5386191240450505E-7	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999955266377762	WITHOUT_CLASSIFICATION	4.47336222378676E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998663973404	WITHOUT_CLASSIFICATION	1.3360265959442082E-7	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999337935875978	WITHOUT_CLASSIFICATION	6.620641240223984E-5	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.99994046104932	WITHOUT_CLASSIFICATION	5.9538950679926645E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999995175208181	WITHOUT_CLASSIFICATION	4.824791819566922E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999770667173	WITHOUT_CLASSIFICATION	2.2933282683508577E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999083939811	WITHOUT_CLASSIFICATION	9.16060187909146E-8	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999039551300529	WITHOUT_CLASSIFICATION	9.60448699471081E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999854954275	WITHOUT_CLASSIFICATION	1.4504572465912637E-8	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.999972265720058	WITHOUT_CLASSIFICATION	2.7734279941937245E-5	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999946722077787	WITHOUT_CLASSIFICATION	5.327792221230658E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999910700272033	WITHOUT_CLASSIFICATION	8.929972796658723E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999717508605924	WITHOUT_CLASSIFICATION	2.8249139407697514E-5	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999962421742287	WITHOUT_CLASSIFICATION	3.757825771389691E-6	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999949159339314	WITHOUT_CLASSIFICATION	5.084066068612901E-6	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999984917031036	WITHOUT_CLASSIFICATION	1.5082968963119944E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999995267210456	WITHOUT_CLASSIFICATION	4.732789543221657E-7	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999354647168	WITHOUT_CLASSIFICATION	6.453528327518918E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999990022854369	WITHOUT_CLASSIFICATION	9.977145631084856E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999691105964108	WITHOUT_CLASSIFICATION	3.0889403589224786E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999905559249715	WITHOUT_CLASSIFICATION	9.444075028543435E-6	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999952767337709	WITHOUT_CLASSIFICATION	4.723266229037815E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999998014788631	WITHOUT_CLASSIFICATION	1.9852113684638054E-7	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999920886772035	WITHOUT_CLASSIFICATION	7.911322796579582E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999920169776644	WITHOUT_CLASSIFICATION	7.983022335693795E-6	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999893260731529	WITHOUT_CLASSIFICATION	1.0673926847090785E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999997777085626	WITHOUT_CLASSIFICATION	2.222914372624926E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849520648023	WITHOUT_CLASSIFICATION	1.504793519758846E-5	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999482944249768	WITHOUT_CLASSIFICATION	5.170557502313144E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999736725049444	WITHOUT_CLASSIFICATION	2.6327495055553135E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999990822934756	WITHOUT_CLASSIFICATION	9.177065245310582E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999964195900335	WITHOUT_CLASSIFICATION	3.5804099663799794E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849520648023	WITHOUT_CLASSIFICATION	1.504793519758846E-5	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9995041476438828	WITHOUT_CLASSIFICATION	4.958523561172099E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9998867830231303	WITHOUT_CLASSIFICATION	1.1321697686973779E-4	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.99999934567467	WITHOUT_CLASSIFICATION	6.543253300842821E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999980642282675	WITHOUT_CLASSIFICATION	1.9357717324515335E-6	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999954768549014	WITHOUT_CLASSIFICATION	4.523145098570364E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996274622981	WITHOUT_CLASSIFICATION	3.7253770189882107E-7	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999997760034516	WITHOUT_CLASSIFICATION	2.2399654836548968E-7	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999619012272964	WITHOUT_CLASSIFICATION	3.809877270361556E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999991744336973	WITHOUT_CLASSIFICATION	8.255663027526953E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996689679748	WITHOUT_CLASSIFICATION	3.310320252534455E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999944504937253	WITHOUT_CLASSIFICATION	5.549506274788368E-6	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9994152549240989	WITHOUT_CLASSIFICATION	5.847450759011197E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999994265545599	WITHOUT_CLASSIFICATION	5.734454401392478E-7	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999989200217503	WITHOUT_CLASSIFICATION	1.0799782496209489E-6	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999996108740152	WITHOUT_CLASSIFICATION	3.891259846885269E-7	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999965831696364	WITHOUT_CLASSIFICATION	3.4168303637527855E-6	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999983544056	WITHOUT_CLASSIFICATION	1.6455944066136942E-8	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999909651591	WITHOUT_CLASSIFICATION	9.034840820367845E-9	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999993826799641	WITHOUT_CLASSIFICATION	6.173200358775789E-7	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999992937412766	WITHOUT_CLASSIFICATION	7.062587232691704E-7	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999998868249427	WITHOUT_CLASSIFICATION	1.1317505724015703E-7	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999561407877	WITHOUT_CLASSIFICATION	4.385921227130284E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999974532197954	WITHOUT_CLASSIFICATION	2.5467802046625903E-6	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999302110039	WITHOUT_CLASSIFICATION	6.978899608108142E-8	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999062824974	WITHOUT_CLASSIFICATION	9.371750274131967E-8	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999107264239	WITHOUT_CLASSIFICATION	8.927357608574594E-7	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999936175365822	WITHOUT_CLASSIFICATION	6.3824634177697065E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999327513972567	WITHOUT_CLASSIFICATION	6.724860274335392E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999997856337954	WITHOUT_CLASSIFICATION	2.143662045998247E-6	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999613905079457	WITHOUT_CLASSIFICATION	3.860949205419561E-5	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999987892916624	WITHOUT_CLASSIFICATION	1.2107083375246278E-6	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999994833441803	WITHOUT_CLASSIFICATION	5.166558197380591E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999954802739563	WITHOUT_CLASSIFICATION	4.519726043626503E-6	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999991090659862	WITHOUT_CLASSIFICATION	8.90934013653627E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999997835075267	WITHOUT_CLASSIFICATION	2.1649247332264792E-7	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999986748552016	WITHOUT_CLASSIFICATION	1.3251447985078269E-6	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999998894300807	WITHOUT_CLASSIFICATION	1.1056991929436886E-6	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999997556996548	WITHOUT_CLASSIFICATION	2.4430034519982208E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993827032867	WITHOUT_CLASSIFICATION	6.17296713296581E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999834242696	WITHOUT_CLASSIFICATION	1.6575730404423099E-7	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999858140764	WITHOUT_CLASSIFICATION	1.418592359961956E-7	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993934459133	WITHOUT_CLASSIFICATION	6.065540868314001E-7	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993934459133	WITHOUT_CLASSIFICATION	6.065540868314001E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999849833564182	WITHOUT_CLASSIFICATION	1.5016643581729584E-5	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999970539879064	WITHOUT_CLASSIFICATION	2.94601209366519E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994791603509	WITHOUT_CLASSIFICATION	5.208396491602438E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999991807004937	WITHOUT_CLASSIFICATION	8.192995063620395E-7	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999676763092405	WITHOUT_CLASSIFICATION	3.232369075943488E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999676763092405	WITHOUT_CLASSIFICATION	3.232369075943488E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9975217278452596	WITHOUT_CLASSIFICATION	0.002478272154740318	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999997518405241	WITHOUT_CLASSIFICATION	2.4815947583767664E-7	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999996245922113	WITHOUT_CLASSIFICATION	3.7540778874031227E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997834581714	WITHOUT_CLASSIFICATION	2.165418284672204E-7	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999985489466051	WITHOUT_CLASSIFICATION	1.451053394869805E-6	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999967352209308	WITHOUT_CLASSIFICATION	3.264779069150592E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999992617521842	WITHOUT_CLASSIFICATION	7.3824781580075325E-6	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999688338376811	WITHOUT_CLASSIFICATION	3.116616231884697E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999999786308622	WITHOUT_CLASSIFICATION	2.1369137813965561E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999996379868898	WITHOUT_CLASSIFICATION	3.620131100971718E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999778978532845	WITHOUT_CLASSIFICATION	2.2102146715516648E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816704767838	WITHOUT_CLASSIFICATION	1.8329523216252256E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816704767838	WITHOUT_CLASSIFICATION	1.8329523216252256E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999999964934385	WITHOUT_CLASSIFICATION	3.506561490859771E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9984938454522636	WITHOUT_CLASSIFICATION	0.0015061545477364614	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999722076754324	WITHOUT_CLASSIFICATION	2.7792324567593705E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999734645732437	WITHOUT_CLASSIFICATION	2.6535426756432885E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999988751988894	WITHOUT_CLASSIFICATION	1.124801110668648E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945902865156	WITHOUT_CLASSIFICATION	5.409713484416814E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9775846951564325	WITHOUT_CLASSIFICATION	0.022415304843567487	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995548698928	WITHOUT_CLASSIFICATION	4.4513010722977847E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996409000792	WITHOUT_CLASSIFICATION	3.5909992084264654E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999966438661302	WITHOUT_CLASSIFICATION	3.356133869690066E-6	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999927788013896	WITHOUT_CLASSIFICATION	7.221198610391807E-6	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996689679748	WITHOUT_CLASSIFICATION	3.310320252534455E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999933493128386	WITHOUT_CLASSIFICATION	6.650687161444356E-6	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998560908537499	WITHOUT_CLASSIFICATION	1.4390914625005415E-4	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999967117973387	WITHOUT_CLASSIFICATION	3.2882026612840114E-6	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999983960188968	WITHOUT_CLASSIFICATION	1.603981103218625E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999793096311883	WITHOUT_CLASSIFICATION	2.0690368811668593E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999938823645165	WITHOUT_CLASSIFICATION	6.117635483441308E-6	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999967062238949	WITHOUT_CLASSIFICATION	3.2937761050067434E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998800387757	WITHOUT_CLASSIFICATION	1.199612242041195E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997331669062	WITHOUT_CLASSIFICATION	2.6683309391158735E-7	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999195182165965	WITHOUT_CLASSIFICATION	8.048178340352658E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999195182165965	WITHOUT_CLASSIFICATION	8.048178340352658E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991119264875	WITHOUT_CLASSIFICATION	8.880735124277321E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999990080459	WITHOUT_CLASSIFICATION	9.919540151481973E-10	TEST
package	WITHOUT_CLASSIFICATION	0.9998658909480296	WITHOUT_CLASSIFICATION	1.3410905197045156E-4	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999989143216311	WITHOUT_CLASSIFICATION	1.0856783689521395E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999975179626869	WITHOUT_CLASSIFICATION	2.482037313140328E-6	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999996292012909	WITHOUT_CLASSIFICATION	3.707987091548881E-7	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999003189365	WITHOUT_CLASSIFICATION	9.968106350562498E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999982482134889	WITHOUT_CLASSIFICATION	1.7517865110054405E-6	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999992969652752	WITHOUT_CLASSIFICATION	7.030347248624199E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999931932497536	WITHOUT_CLASSIFICATION	6.806750246418332E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555778037742	WITHOUT_CLASSIFICATION	4.442219622590166E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999938442019608	WITHOUT_CLASSIFICATION	6.155798039244092E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999995608569895	WITHOUT_CLASSIFICATION	4.3914301052595035E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999905491031702	WITHOUT_CLASSIFICATION	9.45089682972563E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999730438384835	WITHOUT_CLASSIFICATION	2.695616151649166E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.99999718057832	WITHOUT_CLASSIFICATION	2.819421680024792E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999997964335625	WITHOUT_CLASSIFICATION	2.0356643734719386E-7	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999929126256143	WITHOUT_CLASSIFICATION	7.087374385791116E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999903946784507	WITHOUT_CLASSIFICATION	9.605321549295796E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999988652963224	WITHOUT_CLASSIFICATION	1.1347036776124351E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999992021049854	WITHOUT_CLASSIFICATION	7.978950146421458E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.99998311091394	WITHOUT_CLASSIFICATION	1.6889086060036183E-5	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999954547243883	WITHOUT_CLASSIFICATION	4.545275611656085E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999892146787732	WITHOUT_CLASSIFICATION	1.0785321226760097E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999980395666587	WITHOUT_CLASSIFICATION	1.960433341420007E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999980395666587	WITHOUT_CLASSIFICATION	1.960433341420007E-6	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969397270119	WITHOUT_CLASSIFICATION	3.0602729881645603E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991959857455	WITHOUT_CLASSIFICATION	8.040142544152073E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999984778653881	WITHOUT_CLASSIFICATION	1.5221346119731793E-6	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999984598845207	WITHOUT_CLASSIFICATION	1.5401154792615689E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999946383719104	WITHOUT_CLASSIFICATION	5.361628089550449E-6	TEST
